
USB_MSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008508  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08008690  08008690  00018690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008738  08008738  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  08008738  08008738  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008738  08008738  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800873c  0800873c  0001873c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08008740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c78  20000174  080088b4  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dec  080088b4  00020dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001139f  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326e  00000000  00000000  00031543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000347b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00035680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002948f  00000000  00000000  000363b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013800  00000000  00000000  0005f847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e890e  00000000  00000000  00073047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a08  00000000  00000000  0015b9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000174 	.word	0x20000174
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008678 	.word	0x08008678

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000178 	.word	0x20000178
 80001c4:	08008678 	.word	0x08008678

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f918 	bl	8000400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f805 	bl	80001de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f856 	bl	8000284 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001d8:	f007 fbf2 	bl	80079c0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x14>

080001de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b096      	sub	sp, #88	; 0x58
 80001e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2244      	movs	r2, #68	; 0x44
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f008 fa3b 	bl	8008668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f2:	463b      	mov	r3, r7
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000200:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000204:	f001 fe52 	bl	8001eac <HAL_PWREx_ControlVoltageScaling>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800020e:	f000 f85d 	bl	80002cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000212:	2310      	movs	r3, #16
 8000214:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800021e:	2360      	movs	r3, #96	; 0x60
 8000220:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000222:	2302      	movs	r3, #2
 8000224:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000226:	2301      	movs	r3, #1
 8000228:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800022a:	2301      	movs	r3, #1
 800022c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800022e:	2328      	movs	r3, #40	; 0x28
 8000230:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000232:	2307      	movs	r3, #7
 8000234:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000236:	2302      	movs	r3, #2
 8000238:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800023a:	2302      	movs	r3, #2
 800023c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0314 	add.w	r3, r7, #20
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fe98 	bl	8001f78 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800024e:	f000 f83d 	bl	80002cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2303      	movs	r3, #3
 8000258:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000266:	463b      	mov	r3, r7
 8000268:	2104      	movs	r1, #4
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fa60 	bl	8002730 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000276:	f000 f829 	bl	80002cc <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3758      	adds	r7, #88	; 0x58
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <MX_GPIO_Init+0x44>)
 800028c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028e:	4a0e      	ldr	r2, [pc, #56]	; (80002c8 <MX_GPIO_Init+0x44>)
 8000290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000296:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <MX_GPIO_Init+0x44>)
 8000298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <MX_GPIO_Init+0x44>)
 80002a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a6:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <MX_GPIO_Init+0x44>)
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <MX_GPIO_Init+0x44>)
 80002b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	603b      	str	r3, [r7, #0]
 80002b8:	683b      	ldr	r3, [r7, #0]

}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40021000 	.word	0x40021000

080002cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d0:	b672      	cpsid	i
}
 80002d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <Error_Handler+0x8>
	...

080002d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <HAL_MspInit+0x44>)
 80002e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002e2:	4a0e      	ldr	r2, [pc, #56]	; (800031c <HAL_MspInit+0x44>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6613      	str	r3, [r2, #96]	; 0x60
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <HAL_MspInit+0x44>)
 80002ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <HAL_MspInit+0x44>)
 80002f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002fa:	4a08      	ldr	r2, [pc, #32]	; (800031c <HAL_MspInit+0x44>)
 80002fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000300:	6593      	str	r3, [r2, #88]	; 0x58
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_MspInit+0x44>)
 8000304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000324:	e7fe      	b.n	8000324 <NMI_Handler+0x4>

08000326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800032a:	e7fe      	b.n	800032a <HardFault_Handler+0x4>

0800032c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <MemManage_Handler+0x4>

08000332 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <BusFault_Handler+0x4>

08000338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <UsageFault_Handler+0x4>

0800033e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800036c:	f000 f8a4 	bl	80004b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}

08000374 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000378:	4802      	ldr	r0, [pc, #8]	; (8000384 <OTG_FS_IRQHandler+0x10>)
 800037a:	f000 fcf0 	bl	8000d5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000668 	.word	0x20000668

08000388 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <SystemInit+0x20>)
 800038e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000392:	4a05      	ldr	r2, [pc, #20]	; (80003a8 <SystemInit+0x20>)
 8000394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	e000ed00 	.word	0xe000ed00

080003ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003b0:	f7ff ffea 	bl	8000388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b6:	490d      	ldr	r1, [pc, #52]	; (80003ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b8:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <LoopForever+0xe>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003cc:	4c0a      	ldr	r4, [pc, #40]	; (80003f8 <LoopForever+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003da:	f008 f921 	bl	8008620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003de:	f7ff fef3 	bl	80001c8 <main>

080003e2 <LoopForever>:

LoopForever:
    b LoopForever
 80003e2:	e7fe      	b.n	80003e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80003e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80003f0:	08008740 	.word	0x08008740
  ldr r2, =_sbss
 80003f4:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 80003f8:	20000dec 	.word	0x20000dec

080003fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC1_2_IRQHandler>
	...

08000400 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000406:	2300      	movs	r3, #0
 8000408:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_Init+0x3c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a0b      	ldr	r2, [pc, #44]	; (800043c <HAL_Init+0x3c>)
 8000410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000414:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000416:	2003      	movs	r0, #3
 8000418:	f000 f962 	bl	80006e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800041c:	2000      	movs	r0, #0
 800041e:	f000 f80f 	bl	8000440 <HAL_InitTick>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d002      	beq.n	800042e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000428:	2301      	movs	r3, #1
 800042a:	71fb      	strb	r3, [r7, #7]
 800042c:	e001      	b.n	8000432 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800042e:	f7ff ff53 	bl	80002d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000432:	79fb      	ldrb	r3, [r7, #7]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40022000 	.word	0x40022000

08000440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000448:	2300      	movs	r3, #0
 800044a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <HAL_InitTick+0x6c>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d023      	beq.n	800049c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <HAL_InitTick+0x70>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <HAL_InitTick+0x6c>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	4619      	mov	r1, r3
 800045e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000462:	fbb3 f3f1 	udiv	r3, r3, r1
 8000466:	fbb2 f3f3 	udiv	r3, r2, r3
 800046a:	4618      	mov	r0, r3
 800046c:	f000 f96d 	bl	800074a <HAL_SYSTICK_Config>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d10f      	bne.n	8000496 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b0f      	cmp	r3, #15
 800047a:	d809      	bhi.n	8000490 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800047c:	2200      	movs	r2, #0
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	f04f 30ff 	mov.w	r0, #4294967295
 8000484:	f000 f937 	bl	80006f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000488:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <HAL_InitTick+0x74>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6013      	str	r3, [r2, #0]
 800048e:	e007      	b.n	80004a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000490:	2301      	movs	r3, #1
 8000492:	73fb      	strb	r3, [r7, #15]
 8000494:	e004      	b.n	80004a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000496:	2301      	movs	r3, #1
 8000498:	73fb      	strb	r3, [r7, #15]
 800049a:	e001      	b.n	80004a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800049c:	2301      	movs	r3, #1
 800049e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000008 	.word	0x20000008
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000004 	.word	0x20000004

080004b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_IncTick+0x20>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <HAL_IncTick+0x24>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4413      	add	r3, r2
 80004c8:	4a04      	ldr	r2, [pc, #16]	; (80004dc <HAL_IncTick+0x24>)
 80004ca:	6013      	str	r3, [r2, #0]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000008 	.word	0x20000008
 80004dc:	20000190 	.word	0x20000190

080004e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  return uwTick;
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <HAL_GetTick+0x14>)
 80004e6:	681b      	ldr	r3, [r3, #0]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000190 	.word	0x20000190

080004f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000500:	f7ff ffee 	bl	80004e0 <HAL_GetTick>
 8000504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000510:	d005      	beq.n	800051e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <HAL_Delay+0x44>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4413      	add	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800051e:	bf00      	nop
 8000520:	f7ff ffde 	bl	80004e0 <HAL_GetTick>
 8000524:	4602      	mov	r2, r0
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	429a      	cmp	r2, r3
 800052e:	d8f7      	bhi.n	8000520 <HAL_Delay+0x28>
  {
  }
}
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000008 	.word	0x20000008

08000540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <__NVIC_SetPriorityGrouping+0x44>)
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800055c:	4013      	ands	r3, r2
 800055e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800056c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000572:	4a04      	ldr	r2, [pc, #16]	; (8000584 <__NVIC_SetPriorityGrouping+0x44>)
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	60d3      	str	r3, [r2, #12]
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <__NVIC_GetPriorityGrouping+0x18>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	0a1b      	lsrs	r3, r3, #8
 8000592:	f003 0307 	and.w	r3, r3, #7
}
 8000596:	4618      	mov	r0, r3
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db0b      	blt.n	80005ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f003 021f 	and.w	r2, r3, #31
 80005bc:	4907      	ldr	r1, [pc, #28]	; (80005dc <__NVIC_EnableIRQ+0x38>)
 80005be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c2:	095b      	lsrs	r3, r3, #5
 80005c4:	2001      	movs	r0, #1
 80005c6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000e100 	.word	0xe000e100

080005e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db0a      	blt.n	800060a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	490c      	ldr	r1, [pc, #48]	; (800062c <__NVIC_SetPriority+0x4c>)
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fe:	0112      	lsls	r2, r2, #4
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	440b      	add	r3, r1
 8000604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000608:	e00a      	b.n	8000620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4908      	ldr	r1, [pc, #32]	; (8000630 <__NVIC_SetPriority+0x50>)
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	f003 030f 	and.w	r3, r3, #15
 8000616:	3b04      	subs	r3, #4
 8000618:	0112      	lsls	r2, r2, #4
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	440b      	add	r3, r1
 800061e:	761a      	strb	r2, [r3, #24]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000e100 	.word	0xe000e100
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000634:	b480      	push	{r7}
 8000636:	b089      	sub	sp, #36	; 0x24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	f1c3 0307 	rsb	r3, r3, #7
 800064e:	2b04      	cmp	r3, #4
 8000650:	bf28      	it	cs
 8000652:	2304      	movcs	r3, #4
 8000654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	3304      	adds	r3, #4
 800065a:	2b06      	cmp	r3, #6
 800065c:	d902      	bls.n	8000664 <NVIC_EncodePriority+0x30>
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	3b03      	subs	r3, #3
 8000662:	e000      	b.n	8000666 <NVIC_EncodePriority+0x32>
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	f04f 32ff 	mov.w	r2, #4294967295
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	43da      	mvns	r2, r3
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	401a      	ands	r2, r3
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800067c:	f04f 31ff 	mov.w	r1, #4294967295
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	fa01 f303 	lsl.w	r3, r1, r3
 8000686:	43d9      	mvns	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	4313      	orrs	r3, r2
         );
}
 800068e:	4618      	mov	r0, r3
 8000690:	3724      	adds	r7, #36	; 0x24
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006ac:	d301      	bcc.n	80006b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00f      	b.n	80006d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <SysTick_Config+0x40>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ba:	210f      	movs	r1, #15
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295
 80006c0:	f7ff ff8e 	bl	80005e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <SysTick_Config+0x40>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SysTick_Config+0x40>)
 80006cc:	2207      	movs	r2, #7
 80006ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	e000e010 	.word	0xe000e010

080006e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff ff29 	bl	8000540 <__NVIC_SetPriorityGrouping>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b086      	sub	sp, #24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	4603      	mov	r3, r0
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000708:	f7ff ff3e 	bl	8000588 <__NVIC_GetPriorityGrouping>
 800070c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	68b9      	ldr	r1, [r7, #8]
 8000712:	6978      	ldr	r0, [r7, #20]
 8000714:	f7ff ff8e 	bl	8000634 <NVIC_EncodePriority>
 8000718:	4602      	mov	r2, r0
 800071a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800071e:	4611      	mov	r1, r2
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff5d 	bl	80005e0 <__NVIC_SetPriority>
}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff31 	bl	80005a4 <__NVIC_EnableIRQ>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ffa2 	bl	800069c <SysTick_Config>
 8000758:	4603      	mov	r3, r0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000764:	b480      	push	{r7}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000772:	e17f      	b.n	8000a74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	2101      	movs	r1, #1
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	4013      	ands	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2b00      	cmp	r3, #0
 8000788:	f000 8171 	beq.w	8000a6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f003 0303 	and.w	r3, r3, #3
 8000794:	2b01      	cmp	r3, #1
 8000796:	d005      	beq.n	80007a4 <HAL_GPIO_Init+0x40>
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f003 0303 	and.w	r3, r3, #3
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d130      	bne.n	8000806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	2203      	movs	r2, #3
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	4013      	ands	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	68da      	ldr	r2, [r3, #12]
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	693a      	ldr	r2, [r7, #16]
 80007d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007da:	2201      	movs	r2, #1
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43db      	mvns	r3, r3
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	4013      	ands	r3, r2
 80007e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	091b      	lsrs	r3, r3, #4
 80007f0:	f003 0201 	and.w	r2, r3, #1
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f003 0303 	and.w	r3, r3, #3
 800080e:	2b03      	cmp	r3, #3
 8000810:	d118      	bne.n	8000844 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000818:	2201      	movs	r2, #1
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	43db      	mvns	r3, r3
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	08db      	lsrs	r3, r3, #3
 800082e:	f003 0201 	and.w	r2, r3, #1
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	4313      	orrs	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f003 0303 	and.w	r3, r3, #3
 800084c:	2b03      	cmp	r3, #3
 800084e:	d017      	beq.n	8000880 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	2203      	movs	r2, #3
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	43db      	mvns	r3, r3
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	689a      	ldr	r2, [r3, #8]
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	4313      	orrs	r3, r2
 8000878:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f003 0303 	and.w	r3, r3, #3
 8000888:	2b02      	cmp	r3, #2
 800088a:	d123      	bne.n	80008d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	08da      	lsrs	r2, r3, #3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3208      	adds	r2, #8
 8000894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000898:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	220f      	movs	r2, #15
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	691a      	ldr	r2, [r3, #16]
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	08da      	lsrs	r2, r3, #3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3208      	adds	r2, #8
 80008ce:	6939      	ldr	r1, [r7, #16]
 80008d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2203      	movs	r2, #3
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f003 0203 	and.w	r2, r3, #3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4313      	orrs	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000910:	2b00      	cmp	r3, #0
 8000912:	f000 80ac 	beq.w	8000a6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <HAL_GPIO_Init+0x330>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	4a5e      	ldr	r2, [pc, #376]	; (8000a94 <HAL_GPIO_Init+0x330>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6613      	str	r3, [r2, #96]	; 0x60
 8000922:	4b5c      	ldr	r3, [pc, #368]	; (8000a94 <HAL_GPIO_Init+0x330>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800092e:	4a5a      	ldr	r2, [pc, #360]	; (8000a98 <HAL_GPIO_Init+0x334>)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	3302      	adds	r3, #2
 8000936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	f003 0303 	and.w	r3, r3, #3
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	220f      	movs	r2, #15
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4013      	ands	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000958:	d025      	beq.n	80009a6 <HAL_GPIO_Init+0x242>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a4f      	ldr	r2, [pc, #316]	; (8000a9c <HAL_GPIO_Init+0x338>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d01f      	beq.n	80009a2 <HAL_GPIO_Init+0x23e>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a4e      	ldr	r2, [pc, #312]	; (8000aa0 <HAL_GPIO_Init+0x33c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d019      	beq.n	800099e <HAL_GPIO_Init+0x23a>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a4d      	ldr	r2, [pc, #308]	; (8000aa4 <HAL_GPIO_Init+0x340>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d013      	beq.n	800099a <HAL_GPIO_Init+0x236>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a4c      	ldr	r2, [pc, #304]	; (8000aa8 <HAL_GPIO_Init+0x344>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d00d      	beq.n	8000996 <HAL_GPIO_Init+0x232>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a4b      	ldr	r2, [pc, #300]	; (8000aac <HAL_GPIO_Init+0x348>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d007      	beq.n	8000992 <HAL_GPIO_Init+0x22e>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a4a      	ldr	r2, [pc, #296]	; (8000ab0 <HAL_GPIO_Init+0x34c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_GPIO_Init+0x22a>
 800098a:	2306      	movs	r3, #6
 800098c:	e00c      	b.n	80009a8 <HAL_GPIO_Init+0x244>
 800098e:	2307      	movs	r3, #7
 8000990:	e00a      	b.n	80009a8 <HAL_GPIO_Init+0x244>
 8000992:	2305      	movs	r3, #5
 8000994:	e008      	b.n	80009a8 <HAL_GPIO_Init+0x244>
 8000996:	2304      	movs	r3, #4
 8000998:	e006      	b.n	80009a8 <HAL_GPIO_Init+0x244>
 800099a:	2303      	movs	r3, #3
 800099c:	e004      	b.n	80009a8 <HAL_GPIO_Init+0x244>
 800099e:	2302      	movs	r3, #2
 80009a0:	e002      	b.n	80009a8 <HAL_GPIO_Init+0x244>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <HAL_GPIO_Init+0x244>
 80009a6:	2300      	movs	r3, #0
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	f002 0203 	and.w	r2, r2, #3
 80009ae:	0092      	lsls	r2, r2, #2
 80009b0:	4093      	lsls	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009b8:	4937      	ldr	r1, [pc, #220]	; (8000a98 <HAL_GPIO_Init+0x334>)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	089b      	lsrs	r3, r3, #2
 80009be:	3302      	adds	r3, #2
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009c6:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <HAL_GPIO_Init+0x350>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009ea:	4a32      	ldr	r2, [pc, #200]	; (8000ab4 <HAL_GPIO_Init+0x350>)
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009f0:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <HAL_GPIO_Init+0x350>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a14:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <HAL_GPIO_Init+0x350>)
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a1a:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <HAL_GPIO_Init+0x350>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d003      	beq.n	8000a3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a3e:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <HAL_GPIO_Init+0x350>)
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_GPIO_Init+0x350>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <HAL_GPIO_Init+0x350>)
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	3301      	adds	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f47f ae78 	bne.w	8000774 <HAL_GPIO_Init+0x10>
  }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	371c      	adds	r7, #28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010000 	.word	0x40010000
 8000a9c:	48000400 	.word	0x48000400
 8000aa0:	48000800 	.word	0x48000800
 8000aa4:	48000c00 	.word	0x48000c00
 8000aa8:	48001000 	.word	0x48001000
 8000aac:	48001400 	.word	0x48001400
 8000ab0:	48001800 	.word	0x48001800
 8000ab4:	40010400 	.word	0x40010400

08000ab8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aba:	b08f      	sub	sp, #60	; 0x3c
 8000abc:	af0a      	add	r7, sp, #40	; 0x28
 8000abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d101      	bne.n	8000aca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e116      	b.n	8000cf8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d106      	bne.n	8000aea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f007 f921 	bl	8007d2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2203      	movs	r2, #3
 8000aee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 fd9e 	bl	800364a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	687e      	ldr	r6, [r7, #4]
 8000b16:	466d      	mov	r5, sp
 8000b18:	f106 0410 	add.w	r4, r6, #16
 8000b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b28:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b2c:	1d33      	adds	r3, r6, #4
 8000b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b30:	6838      	ldr	r0, [r7, #0]
 8000b32:	f002 fcb1 	bl	8003498 <USB_CoreInit>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d005      	beq.n	8000b48 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2202      	movs	r2, #2
 8000b40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e0d7      	b.n	8000cf8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fd8c 	bl	800366c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	e04a      	b.n	8000bf0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b5a:	7bfa      	ldrb	r2, [r7, #15]
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	440b      	add	r3, r1
 8000b68:	333d      	adds	r3, #61	; 0x3d
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b6e:	7bfa      	ldrb	r2, [r7, #15]
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	4613      	mov	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	4413      	add	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	333c      	adds	r3, #60	; 0x3c
 8000b7e:	7bfa      	ldrb	r2, [r7, #15]
 8000b80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b82:	7bfa      	ldrb	r2, [r7, #15]
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	b298      	uxth	r0, r3
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	4413      	add	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	440b      	add	r3, r1
 8000b94:	3344      	adds	r3, #68	; 0x44
 8000b96:	4602      	mov	r2, r0
 8000b98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b9a:	7bfa      	ldrb	r2, [r7, #15]
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	4413      	add	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	3340      	adds	r3, #64	; 0x40
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bae:	7bfa      	ldrb	r2, [r7, #15]
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	440b      	add	r3, r1
 8000bbc:	3348      	adds	r3, #72	; 0x48
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bc2:	7bfa      	ldrb	r2, [r7, #15]
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	4413      	add	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	440b      	add	r3, r1
 8000bd0:	334c      	adds	r3, #76	; 0x4c
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bd6:	7bfa      	ldrb	r2, [r7, #15]
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	3354      	adds	r3, #84	; 0x54
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	3301      	adds	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	7bfa      	ldrb	r2, [r7, #15]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d3af      	bcc.n	8000b5a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	e044      	b.n	8000c8a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c00:	7bfa      	ldrb	r2, [r7, #15]
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	4613      	mov	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	4413      	add	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c16:	7bfa      	ldrb	r2, [r7, #15]
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	4413      	add	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	440b      	add	r3, r1
 8000c24:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000c28:	7bfa      	ldrb	r2, [r7, #15]
 8000c2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c2c:	7bfa      	ldrb	r2, [r7, #15]
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	4613      	mov	r3, r2
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	4413      	add	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	440b      	add	r3, r1
 8000c3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c42:	7bfa      	ldrb	r2, [r7, #15]
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c58:	7bfa      	ldrb	r2, [r7, #15]
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	4413      	add	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	440b      	add	r3, r1
 8000c66:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c6e:	7bfa      	ldrb	r2, [r7, #15]
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4413      	add	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	3301      	adds	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d3b5      	bcc.n	8000c00 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	687e      	ldr	r6, [r7, #4]
 8000c9c:	466d      	mov	r5, sp
 8000c9e:	f106 0410 	add.w	r4, r6, #16
 8000ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000caa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cae:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cb2:	1d33      	adds	r3, r6, #4
 8000cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cb6:	6838      	ldr	r0, [r7, #0]
 8000cb8:	f002 fd24 	bl	8003704 <USB_DevInit>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d005      	beq.n	8000cce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e014      	b.n	8000cf8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d102      	bne.n	8000cec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f001 f8ae 	bl	8001e48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fdac 	bl	800484e <USB_DevDisconnect>

  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d101      	bne.n	8000d1c <HAL_PCD_Start+0x1c>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e01c      	b.n	8000d56 <HAL_PCD_Start+0x56>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d105      	bne.n	8000d38 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 fc73 	bl	8003628 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 fd60 	bl	800480c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d5e:	b590      	push	{r4, r7, lr}
 8000d60:	b08d      	sub	sp, #52	; 0x34
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fe1e 	bl	80049b6 <USB_GetMode>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f040 847e 	bne.w	800167e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 fd82 	bl	8004890 <USB_ReadInterrupts>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8474 	beq.w	800167c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 fd6f 	bl	8004890 <USB_ReadInterrupts>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d107      	bne.n	8000dcc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	695a      	ldr	r2, [r3, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f002 0202 	and.w	r2, r2, #2
 8000dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 fd5d 	bl	8004890 <USB_ReadInterrupts>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f003 0310 	and.w	r3, r3, #16
 8000ddc:	2b10      	cmp	r3, #16
 8000dde:	d161      	bne.n	8000ea4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	699a      	ldr	r2, [r3, #24]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0210 	bic.w	r2, r2, #16
 8000dee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	f003 020f 	and.w	r2, r3, #15
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	4413      	add	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	0c5b      	lsrs	r3, r3, #17
 8000e14:	f003 030f 	and.w	r3, r3, #15
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d124      	bne.n	8000e66 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d035      	beq.n	8000e94 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	6a38      	ldr	r0, [r7, #32]
 8000e3c:	f003 fb94 	bl	8004568 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e4c:	441a      	add	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	6a1a      	ldr	r2, [r3, #32]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e5e:	441a      	add	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	621a      	str	r2, [r3, #32]
 8000e64:	e016      	b.n	8000e94 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	0c5b      	lsrs	r3, r3, #17
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d110      	bne.n	8000e94 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000e78:	2208      	movs	r2, #8
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	6a38      	ldr	r0, [r7, #32]
 8000e7e:	f003 fb73 	bl	8004568 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	6a1a      	ldr	r2, [r3, #32]
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e8e:	441a      	add	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	699a      	ldr	r2, [r3, #24]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0210 	orr.w	r2, r2, #16
 8000ea2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 fcf1 	bl	8004890 <USB_ReadInterrupts>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000eb4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000eb8:	f040 80a7 	bne.w	800100a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fcf6 	bl	80048b6 <USB_ReadDevAllOutEpInterrupt>
 8000eca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000ecc:	e099      	b.n	8001002 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 808e 	beq.w	8000ff6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 fd1a 	bl	800491e <USB_ReadDevOutEPInterrupt>
 8000eea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00c      	beq.n	8000f10 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	015a      	lsls	r2, r3, #5
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	4413      	add	r3, r2
 8000efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f02:	461a      	mov	r2, r3
 8000f04:	2301      	movs	r3, #1
 8000f06:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 fec2 	bl	8001c94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00c      	beq.n	8000f34 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	015a      	lsls	r2, r3, #5
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f26:	461a      	mov	r2, r3
 8000f28:	2308      	movs	r3, #8
 8000f2a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 fefe 	bl	8001d30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d008      	beq.n	8000f50 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	015a      	lsls	r2, r3, #5
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	4413      	add	r3, r2
 8000f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d030      	beq.n	8000fbc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f62:	2b80      	cmp	r3, #128	; 0x80
 8000f64:	d109      	bne.n	8000f7a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f78:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8000f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	78db      	ldrb	r3, [r3, #3]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d108      	bne.n	8000faa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f007 f815 	bl	8007fd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	015a      	lsls	r2, r3, #5
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2302      	movs	r3, #2
 8000fba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d008      	beq.n	8000fd8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	015a      	lsls	r2, r3, #5
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	4413      	add	r3, r2
 8000fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2320      	movs	r3, #32
 8000fd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d009      	beq.n	8000ff6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	015a      	lsls	r2, r3, #5
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	4413      	add	r3, r2
 8000fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffe:	085b      	lsrs	r3, r3, #1
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001004:	2b00      	cmp	r3, #0
 8001006:	f47f af62 	bne.w	8000ece <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f003 fc3e 	bl	8004890 <USB_ReadInterrupts>
 8001014:	4603      	mov	r3, r0
 8001016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800101e:	f040 80a4 	bne.w	800116a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f003 fc5f 	bl	80048ea <USB_ReadDevAllInEpInterrupt>
 800102c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001032:	e096      	b.n	8001162 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 808b 	beq.w	8001156 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fc85 	bl	800495a <USB_ReadDevInEPInterrupt>
 8001050:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d020      	beq.n	800109e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	2201      	movs	r2, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	69f9      	ldr	r1, [r7, #28]
 8001078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800107c:	4013      	ands	r3, r2
 800107e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	015a      	lsls	r2, r3, #5
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	4413      	add	r3, r2
 8001088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800108c:	461a      	mov	r2, r3
 800108e:	2301      	movs	r3, #1
 8001090:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f006 ff06 	bl	8007eaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	015a      	lsls	r2, r3, #5
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	4413      	add	r3, r2
 80010b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010b4:	461a      	mov	r2, r3
 80010b6:	2308      	movs	r3, #8
 80010b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d008      	beq.n	80010d6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	015a      	lsls	r2, r3, #5
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	4413      	add	r3, r2
 80010cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010d0:	461a      	mov	r2, r3
 80010d2:	2310      	movs	r3, #16
 80010d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d008      	beq.n	80010f2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	015a      	lsls	r2, r3, #5
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	4413      	add	r3, r2
 80010e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010ec:	461a      	mov	r2, r3
 80010ee:	2340      	movs	r3, #64	; 0x40
 80010f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d023      	beq.n	8001144 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80010fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010fe:	6a38      	ldr	r0, [r7, #32]
 8001100:	f002 fc4c 	bl	800399c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	3338      	adds	r3, #56	; 0x38
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	3304      	adds	r3, #4
 8001116:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	78db      	ldrb	r3, [r3, #3]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d108      	bne.n	8001132 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2200      	movs	r2, #0
 8001124:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	b2db      	uxtb	r3, r3
 800112a:	4619      	mov	r1, r3
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f006 ff63 	bl	8007ff8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	015a      	lsls	r2, r3, #5
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	4413      	add	r3, r2
 800113a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800113e:	461a      	mov	r2, r3
 8001140:	2302      	movs	r3, #2
 8001142:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800114e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fd17 	bl	8001b84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	3301      	adds	r3, #1
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	085b      	lsrs	r3, r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001164:	2b00      	cmp	r3, #0
 8001166:	f47f af65 	bne.w	8001034 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fb8e 	bl	8004890 <USB_ReadInterrupts>
 8001174:	4603      	mov	r3, r0
 8001176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800117a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800117e:	d122      	bne.n	80011c6 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800119a:	2b01      	cmp	r3, #1
 800119c:	d108      	bne.n	80011b0 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011a6:	2100      	movs	r1, #0
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f007 f9cd 	bl	8008548 <HAL_PCDEx_LPM_Callback>
 80011ae:	e002      	b.n	80011b6 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f006 fee7 	bl	8007f84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	695a      	ldr	r2, [r3, #20]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fb60 	bl	8004890 <USB_ReadInterrupts>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011da:	d112      	bne.n	8001202 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d102      	bne.n	80011f2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f006 fea3 	bl	8007f38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	695a      	ldr	r2, [r3, #20]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001200:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f003 fb42 	bl	8004890 <USB_ReadInterrupts>
 800120c:	4603      	mov	r3, r0
 800120e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001216:	d121      	bne.n	800125c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	695a      	ldr	r2, [r3, #20]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001226:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800122e:	2b00      	cmp	r3, #0
 8001230:	d111      	bne.n	8001256 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	f003 020f 	and.w	r2, r3, #15
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800124c:	2101      	movs	r1, #1
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f007 f97a 	bl	8008548 <HAL_PCDEx_LPM_Callback>
 8001254:	e002      	b.n	800125c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f006 fe6e 	bl	8007f38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fb15 	bl	8004890 <USB_ReadInterrupts>
 8001266:	4603      	mov	r3, r0
 8001268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001270:	f040 80b5 	bne.w	80013de <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2110      	movs	r1, #16
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fb84 	bl	800399c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001298:	e046      	b.n	8001328 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129c:	015a      	lsls	r2, r3, #5
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	4413      	add	r3, r2
 80012a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012a6:	461a      	mov	r2, r3
 80012a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b0:	015a      	lsls	r2, r3, #5
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	4413      	add	r3, r2
 80012b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012be:	0151      	lsls	r1, r2, #5
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	440a      	add	r2, r1
 80012c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d0:	015a      	lsls	r2, r3, #5
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012da:	461a      	mov	r2, r3
 80012dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80012e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e4:	015a      	lsls	r2, r3, #5
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	4413      	add	r3, r2
 80012ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012f2:	0151      	lsls	r1, r2, #5
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	440a      	add	r2, r1
 80012f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80012fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001300:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001304:	015a      	lsls	r2, r3, #5
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	4413      	add	r3, r2
 800130a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001312:	0151      	lsls	r1, r2, #5
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	440a      	add	r2, r1
 8001318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800131c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001320:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001324:	3301      	adds	r3, #1
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800132e:	429a      	cmp	r2, r3
 8001330:	d3b3      	bcc.n	800129a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001340:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001344:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	2b00      	cmp	r3, #0
 800134c:	d016      	beq.n	800137c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800135e:	f043 030b 	orr.w	r3, r3, #11
 8001362:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001374:	f043 030b 	orr.w	r3, r3, #11
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	e015      	b.n	80013a8 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800138a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800138e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001392:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013a2:	f043 030b 	orr.w	r3, r3, #11
 80013a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f003 fb25 	bl	8004a18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	695a      	ldr	r2, [r3, #20]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80013dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 fa54 	bl	8004890 <USB_ReadInterrupts>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013f2:	d124      	bne.n	800143e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 faea 	bl	80049d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fb47 	bl	8003a96 <USB_GetDevSpeed>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681c      	ldr	r4, [r3, #0]
 8001414:	f001 fb18 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8001418:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800141e:	b2db      	uxtb	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	4620      	mov	r0, r4
 8001424:	f002 f864 	bl	80034f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f006 fd66 	bl	8007efa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800143c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f003 fa24 	bl	8004890 <USB_ReadInterrupts>
 8001448:	4603      	mov	r3, r0
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b08      	cmp	r3, #8
 8001450:	d10a      	bne.n	8001468 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f006 fd43 	bl	8007ede <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f002 0208 	and.w	r2, r2, #8
 8001466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fa0f 	bl	8004890 <USB_ReadInterrupts>
 8001472:	4603      	mov	r3, r0
 8001474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001478:	2b80      	cmp	r3, #128	; 0x80
 800147a:	d122      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001488:	2301      	movs	r3, #1
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
 800148c:	e014      	b.n	80014b8 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d105      	bne.n	80014b2 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4619      	mov	r1, r3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fb0b 	bl	8001ac8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	3301      	adds	r3, #1
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3e5      	bcc.n	800148e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 f9e2 	bl	8004890 <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014d6:	d13b      	bne.n	8001550 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014d8:	2301      	movs	r3, #1
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
 80014dc:	e02b      	b.n	8001536 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	015a      	lsls	r2, r3, #5
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	4413      	add	r3, r2
 80014e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	3340      	adds	r3, #64	; 0x40
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d115      	bne.n	8001530 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001504:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001506:	2b00      	cmp	r3, #0
 8001508:	da12      	bge.n	8001530 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	333f      	adds	r3, #63	; 0x3f
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4619      	mov	r1, r3
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 facc 	bl	8001ac8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	3301      	adds	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153c:	429a      	cmp	r2, r3
 800153e:	d3ce      	bcc.n	80014de <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800154e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f003 f99b 	bl	8004890 <USB_ReadInterrupts>
 800155a:	4603      	mov	r3, r0
 800155c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001564:	d155      	bne.n	8001612 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001566:	2301      	movs	r3, #1
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
 800156a:	e045      	b.n	80015f8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d12e      	bne.n	80015f2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001594:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001596:	2b00      	cmp	r3, #0
 8001598:	da2b      	bge.n	80015f2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80015a6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d121      	bne.n	80015f2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10a      	bne.n	80015f2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ee:	6053      	str	r3, [r2, #4]
            break;
 80015f0:	e007      	b.n	8001602 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	3301      	adds	r3, #1
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fe:	429a      	cmp	r2, r3
 8001600:	d3b4      	bcc.n	800156c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001610:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f003 f93a 	bl	8004890 <USB_ReadInterrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001626:	d10a      	bne.n	800163e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f006 fcf7 	bl	800801c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	695a      	ldr	r2, [r3, #20]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800163c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f003 f924 	bl	8004890 <USB_ReadInterrupts>
 8001648:	4603      	mov	r3, r0
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	2b04      	cmp	r3, #4
 8001650:	d115      	bne.n	800167e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f006 fce7 	bl	8008038 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	430a      	orrs	r2, r1
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	e000      	b.n	800167e <HAL_PCD_IRQHandler+0x920>
      return;
 800167c:	bf00      	nop
    }
  }
}
 800167e:	3734      	adds	r7, #52	; 0x34
 8001680:	46bd      	mov	sp, r7
 8001682:	bd90      	pop	{r4, r7, pc}

08001684 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_PCD_SetAddress+0x1a>
 800169a:	2302      	movs	r3, #2
 800169c:	e013      	b.n	80016c6 <HAL_PCD_SetAddress+0x42>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	78fa      	ldrb	r2, [r7, #3]
 80016aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 f882 	bl	80047c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	4608      	mov	r0, r1
 80016d8:	4611      	mov	r1, r2
 80016da:	461a      	mov	r2, r3
 80016dc:	4603      	mov	r3, r0
 80016de:	70fb      	strb	r3, [r7, #3]
 80016e0:	460b      	mov	r3, r1
 80016e2:	803b      	strh	r3, [r7, #0]
 80016e4:	4613      	mov	r3, r2
 80016e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da0f      	bge.n	8001714 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	f003 020f 	and.w	r2, r3, #15
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	3338      	adds	r3, #56	; 0x38
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	3304      	adds	r3, #4
 800170a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2201      	movs	r2, #1
 8001710:	705a      	strb	r2, [r3, #1]
 8001712:	e00f      	b.n	8001734 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	f003 020f 	and.w	r2, r3, #15
 800171a:	4613      	mov	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	3304      	adds	r3, #4
 800172c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	b2da      	uxtb	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001740:	883a      	ldrh	r2, [r7, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	78ba      	ldrb	r2, [r7, #2]
 800174a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	785b      	ldrb	r3, [r3, #1]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800175e:	78bb      	ldrb	r3, [r7, #2]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d102      	bne.n	800176a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_PCD_EP_Open+0xaa>
 8001774:	2302      	movs	r3, #2
 8001776:	e00e      	b.n	8001796 <HAL_PCD_EP_Open+0xc8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68f9      	ldr	r1, [r7, #12]
 8001786:	4618      	mov	r0, r3
 8001788:	f002 f9a4 	bl	8003ad4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001794:	7afb      	ldrb	r3, [r7, #11]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	da0f      	bge.n	80017d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	f003 020f 	and.w	r2, r3, #15
 80017b8:	4613      	mov	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	3338      	adds	r3, #56	; 0x38
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	3304      	adds	r3, #4
 80017c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2201      	movs	r2, #1
 80017ce:	705a      	strb	r2, [r3, #1]
 80017d0:	e00f      	b.n	80017f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f003 020f 	and.w	r2, r3, #15
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	3304      	adds	r3, #4
 80017ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_PCD_EP_Close+0x6e>
 8001808:	2302      	movs	r3, #2
 800180a:	e00e      	b.n	800182a <HAL_PCD_EP_Close+0x8c>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68f9      	ldr	r1, [r7, #12]
 800181a:	4618      	mov	r0, r3
 800181c:	f002 f9e2 	bl	8003be4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	460b      	mov	r3, r1
 8001840:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001842:	7afb      	ldrb	r3, [r7, #11]
 8001844:	f003 020f 	and.w	r2, r3, #15
 8001848:	4613      	mov	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	3304      	adds	r3, #4
 800185a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2200      	movs	r2, #0
 8001872:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001874:	7afb      	ldrb	r3, [r7, #11]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	b2da      	uxtb	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001880:	7afb      	ldrb	r3, [r7, #11]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	2b00      	cmp	r3, #0
 8001888:	d106      	bne.n	8001898 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6979      	ldr	r1, [r7, #20]
 8001890:	4618      	mov	r0, r3
 8001892:	f002 fc63 	bl	800415c <USB_EP0StartXfer>
 8001896:	e005      	b.n	80018a4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6979      	ldr	r1, [r7, #20]
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fa7c 	bl	8003d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	f003 020f 	and.w	r2, r3, #15
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80018d0:	681b      	ldr	r3, [r3, #0]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	460b      	mov	r3, r1
 80018ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	f003 020f 	and.w	r2, r3, #15
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	3338      	adds	r3, #56	; 0x38
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4413      	add	r3, r2
 8001902:	3304      	adds	r3, #4
 8001904:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2201      	movs	r2, #1
 800191c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800191e:	7afb      	ldrb	r3, [r7, #11]
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	b2da      	uxtb	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800192a:	7afb      	ldrb	r3, [r7, #11]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	2b00      	cmp	r3, #0
 8001932:	d106      	bne.n	8001942 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6979      	ldr	r1, [r7, #20]
 800193a:	4618      	mov	r0, r3
 800193c:	f002 fc0e 	bl	800415c <USB_EP0StartXfer>
 8001940:	e005      	b.n	800194e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6979      	ldr	r1, [r7, #20]
 8001948:	4618      	mov	r0, r3
 800194a:	f002 fa27 	bl	8003d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f003 020f 	and.w	r2, r3, #15
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	d901      	bls.n	8001976 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e04e      	b.n	8001a14 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800197a:	2b00      	cmp	r3, #0
 800197c:	da0f      	bge.n	800199e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	f003 020f 	and.w	r2, r3, #15
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	3338      	adds	r3, #56	; 0x38
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	3304      	adds	r3, #4
 8001994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	705a      	strb	r2, [r3, #1]
 800199c:	e00d      	b.n	80019ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	3304      	adds	r3, #4
 80019b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_PCD_EP_SetStall+0x82>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e01c      	b.n	8001a14 <HAL_PCD_EP_SetStall+0xbc>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68f9      	ldr	r1, [r7, #12]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 fe15 	bl	8004618 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d108      	bne.n	8001a0a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a02:	4619      	mov	r1, r3
 8001a04:	4610      	mov	r0, r2
 8001a06:	f003 f807 	bl	8004a18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	f003 020f 	and.w	r2, r3, #15
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d901      	bls.n	8001a3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e042      	b.n	8001ac0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	da0f      	bge.n	8001a62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	f003 020f 	and.w	r2, r3, #15
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	3338      	adds	r3, #56	; 0x38
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	3304      	adds	r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	705a      	strb	r2, [r3, #1]
 8001a60:	e00f      	b.n	8001a82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	f003 020f 	and.w	r2, r3, #15
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	3304      	adds	r3, #4
 8001a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_PCD_EP_ClrStall+0x86>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e00e      	b.n	8001ac0 <HAL_PCD_EP_ClrStall+0xa4>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68f9      	ldr	r1, [r7, #12]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 fe1f 	bl	80046f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da0c      	bge.n	8001af6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	f003 020f 	and.w	r2, r3, #15
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	3338      	adds	r3, #56	; 0x38
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	3304      	adds	r3, #4
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e00c      	b.n	8001b10 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 020f 	and.w	r2, r3, #15
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fc42 	bl	80043a0 <USB_EPStopXfer>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001b20:	7afb      	ldrb	r3, [r7, #11]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_PCD_EP_Flush+0x1a>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e01b      	b.n	8001b7c <HAL_PCD_EP_Flush+0x52>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	da09      	bge.n	8001b68 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4610      	mov	r0, r2
 8001b62:	f001 ff1b 	bl	800399c <USB_FlushTxFifo>
 8001b66:	e004      	b.n	8001b72 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f001 ff49 	bl	8003a04 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	3338      	adds	r3, #56	; 0x38
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3304      	adds	r3, #4
 8001baa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a1a      	ldr	r2, [r3, #32]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d901      	bls.n	8001bbc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e067      	b.n	8001c8c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	699a      	ldr	r2, [r3, #24]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d902      	bls.n	8001bd8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	3303      	adds	r3, #3
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001be0:	e026      	b.n	8001c30 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d902      	bls.n	8001bfe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3303      	adds	r3, #3
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6919      	ldr	r1, [r3, #16]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f002 fc6e 	bl	80044f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	441a      	add	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a1a      	ldr	r2, [r3, #32]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	441a      	add	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d809      	bhi.n	8001c5a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a1a      	ldr	r2, [r3, #32]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d203      	bcs.n	8001c5a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1c3      	bne.n	8001be2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d811      	bhi.n	8001c8a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c86:	4013      	ands	r3, r2
 8001c88:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	333c      	adds	r3, #60	; 0x3c
 8001cac:	3304      	adds	r3, #4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <PCD_EP_OutXfrComplete_int+0x98>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d124      	bne.n	8001d14 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00a      	beq.n	8001cea <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ce6:	6093      	str	r3, [r2, #8]
 8001ce8:	e01a      	b.n	8001d20 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d00:	461a      	mov	r2, r3
 8001d02:	2320      	movs	r3, #32
 8001d04:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f006 f8b1 	bl	8007e74 <HAL_PCD_DataOutStageCallback>
 8001d12:	e005      	b.n	8001d20 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f006 f8aa 	bl	8007e74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	4f54310a 	.word	0x4f54310a

08001d30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	333c      	adds	r3, #60	; 0x3c
 8001d48:	3304      	adds	r3, #4
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <PCD_EP_OutSetupPacket_int+0x64>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d90e      	bls.n	8001d84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f006 f863 	bl	8007e50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	4f54300a 	.word	0x4f54300a

08001d98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
 8001da4:	4613      	mov	r3, r2
 8001da6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d107      	bne.n	8001dc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001db6:	883b      	ldrh	r3, [r7, #0]
 8001db8:	0419      	lsls	r1, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8001dc4:	e028      	b.n	8001e18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e00d      	b.n	8001df6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	3340      	adds	r3, #64	; 0x40
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	0c1b      	lsrs	r3, r3, #16
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	4413      	add	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	3301      	adds	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d3ec      	bcc.n	8001dda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001e00:	883b      	ldrh	r3, [r7, #0]
 8001e02:	0418      	lsls	r0, r3, #16
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6819      	ldr	r1, [r3, #0]
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	4302      	orrs	r2, r0
 8001e10:	3340      	adds	r3, #64	; 0x40
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	f043 0303 	orr.w	r3, r3, #3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40007000 	.word	0x40007000

08001eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eba:	d130      	bne.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec8:	d038      	beq.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ed2:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2232      	movs	r2, #50	; 0x32
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	0c9b      	lsrs	r3, r3, #18
 8001eec:	3301      	adds	r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ef0:	e002      	b.n	8001ef8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f04:	d102      	bne.n	8001f0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f2      	bne.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f18:	d110      	bne.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e00f      	b.n	8001f3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2a:	d007      	beq.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f34:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	20000000 	.word	0x20000000
 8001f54:	431bde83 	.word	0x431bde83

08001f58 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f66:	6053      	str	r3, [r2, #4]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40007000 	.word	0x40007000

08001f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e3ca      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8a:	4b97      	ldr	r3, [pc, #604]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f94:	4b94      	ldr	r3, [pc, #592]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80e4 	beq.w	8002174 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x4a>
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	f040 808b 	bne.w	80020d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	f040 8087 	bne.w	80020d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fc2:	4b89      	ldr	r3, [pc, #548]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x62>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e3a2      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1a      	ldr	r2, [r3, #32]
 8001fde:	4b82      	ldr	r3, [pc, #520]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d004      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x7c>
 8001fea:	4b7f      	ldr	r3, [pc, #508]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff2:	e005      	b.n	8002000 <HAL_RCC_OscConfig+0x88>
 8001ff4:	4b7c      	ldr	r3, [pc, #496]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002000:	4293      	cmp	r3, r2
 8002002:	d223      	bcs.n	800204c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fd29 	bl	8002a60 <RCC_SetFlashLatencyFromMSIRange>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e383      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002018:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a72      	ldr	r2, [pc, #456]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4b70      	ldr	r3, [pc, #448]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	496d      	ldr	r1, [pc, #436]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002036:	4b6c      	ldr	r3, [pc, #432]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	4968      	ldr	r1, [pc, #416]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
 800204a:	e025      	b.n	8002098 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800204c:	4b66      	ldr	r3, [pc, #408]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a65      	ldr	r2, [pc, #404]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002052:	f043 0308 	orr.w	r3, r3, #8
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4960      	ldr	r1, [pc, #384]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800206a:	4b5f      	ldr	r3, [pc, #380]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	495b      	ldr	r1, [pc, #364]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fce9 	bl	8002a60 <RCC_SetFlashLatencyFromMSIRange>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e343      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002098:	f000 fc4a 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b52      	ldr	r3, [pc, #328]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	4950      	ldr	r1, [pc, #320]	; (80021ec <HAL_RCC_OscConfig+0x274>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	4a4e      	ldr	r2, [pc, #312]	; (80021f0 <HAL_RCC_OscConfig+0x278>)
 80020b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020b8:	4b4e      	ldr	r3, [pc, #312]	; (80021f4 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe f9bf 	bl	8000440 <HAL_InitTick>
 80020c2:	4603      	mov	r3, r0
 80020c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d052      	beq.n	8002172 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	e327      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d032      	beq.n	800213e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020d8:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a42      	ldr	r2, [pc, #264]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020e4:	f7fe f9fc 	bl	80004e0 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ec:	f7fe f9f8 	bl	80004e0 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e310      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020fe:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a36      	ldr	r2, [pc, #216]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002110:	f043 0308 	orr.w	r3, r3, #8
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4931      	ldr	r1, [pc, #196]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002128:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	492c      	ldr	r1, [pc, #176]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
 800213c:	e01a      	b.n	8002174 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800214a:	f7fe f9c9 	bl	80004e0 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002152:	f7fe f9c5 	bl	80004e0 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e2dd      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002164:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x1da>
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002172:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d074      	beq.n	800226a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b08      	cmp	r3, #8
 8002184:	d005      	beq.n	8002192 <HAL_RCC_OscConfig+0x21a>
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b0c      	cmp	r3, #12
 800218a:	d10e      	bne.n	80021aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d10b      	bne.n	80021aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d064      	beq.n	8002268 <HAL_RCC_OscConfig+0x2f0>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d160      	bne.n	8002268 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e2ba      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x24a>
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e026      	b.n	8002210 <HAL_RCC_OscConfig+0x298>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ca:	d115      	bne.n	80021f8 <HAL_RCC_OscConfig+0x280>
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 80021d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a02      	ldr	r2, [pc, #8]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 80021de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e014      	b.n	8002210 <HAL_RCC_OscConfig+0x298>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	080086d4 	.word	0x080086d4
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000004 	.word	0x20000004
 80021f8:	4ba0      	ldr	r3, [pc, #640]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a9f      	ldr	r2, [pc, #636]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b9d      	ldr	r3, [pc, #628]	; (800247c <HAL_RCC_OscConfig+0x504>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a9c      	ldr	r2, [pc, #624]	; (800247c <HAL_RCC_OscConfig+0x504>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe f962 	bl	80004e0 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe f95e 	bl	80004e0 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e276      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002232:	4b92      	ldr	r3, [pc, #584]	; (800247c <HAL_RCC_OscConfig+0x504>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x2a8>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7fe f94e 	bl	80004e0 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe f94a 	bl	80004e0 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e262      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800225a:	4b88      	ldr	r3, [pc, #544]	; (800247c <HAL_RCC_OscConfig+0x504>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x2d0>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d060      	beq.n	8002338 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d005      	beq.n	8002288 <HAL_RCC_OscConfig+0x310>
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d119      	bne.n	80022b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d116      	bne.n	80022b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002288:	4b7c      	ldr	r3, [pc, #496]	; (800247c <HAL_RCC_OscConfig+0x504>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_OscConfig+0x328>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e23f      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4b76      	ldr	r3, [pc, #472]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	061b      	lsls	r3, r3, #24
 80022ae:	4973      	ldr	r1, [pc, #460]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b4:	e040      	b.n	8002338 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d023      	beq.n	8002306 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022be:	4b6f      	ldr	r3, [pc, #444]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a6e      	ldr	r2, [pc, #440]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe f909 	bl	80004e0 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d2:	f7fe f905 	bl	80004e0 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e21d      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e4:	4b65      	ldr	r3, [pc, #404]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b62      	ldr	r3, [pc, #392]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	061b      	lsls	r3, r3, #24
 80022fe:	495f      	ldr	r1, [pc, #380]	; (800247c <HAL_RCC_OscConfig+0x504>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
 8002304:	e018      	b.n	8002338 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002306:	4b5d      	ldr	r3, [pc, #372]	; (800247c <HAL_RCC_OscConfig+0x504>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a5c      	ldr	r2, [pc, #368]	; (800247c <HAL_RCC_OscConfig+0x504>)
 800230c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002312:	f7fe f8e5 	bl	80004e0 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231a:	f7fe f8e1 	bl	80004e0 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1f9      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800232c:	4b53      	ldr	r3, [pc, #332]	; (800247c <HAL_RCC_OscConfig+0x504>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d03c      	beq.n	80023be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d01c      	beq.n	8002386 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234c:	4b4b      	ldr	r3, [pc, #300]	; (800247c <HAL_RCC_OscConfig+0x504>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002352:	4a4a      	ldr	r2, [pc, #296]	; (800247c <HAL_RCC_OscConfig+0x504>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7fe f8c0 	bl	80004e0 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002364:	f7fe f8bc 	bl	80004e0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1d4      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002376:	4b41      	ldr	r3, [pc, #260]	; (800247c <HAL_RCC_OscConfig+0x504>)
 8002378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ef      	beq.n	8002364 <HAL_RCC_OscConfig+0x3ec>
 8002384:	e01b      	b.n	80023be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002386:	4b3d      	ldr	r3, [pc, #244]	; (800247c <HAL_RCC_OscConfig+0x504>)
 8002388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238c:	4a3b      	ldr	r2, [pc, #236]	; (800247c <HAL_RCC_OscConfig+0x504>)
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002396:	f7fe f8a3 	bl	80004e0 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239e:	f7fe f89f 	bl	80004e0 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1b7      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023b0:	4b32      	ldr	r3, [pc, #200]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80023b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ef      	bne.n	800239e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80a6 	beq.w	8002518 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023cc:	2300      	movs	r3, #0
 80023ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023d0:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023dc:	4b27      	ldr	r3, [pc, #156]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	4a26      	ldr	r2, [pc, #152]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e6:	6593      	str	r3, [r2, #88]	; 0x58
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_RCC_OscConfig+0x504>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f4:	2301      	movs	r3, #1
 80023f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <HAL_RCC_OscConfig+0x508>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d118      	bne.n	8002436 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <HAL_RCC_OscConfig+0x508>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <HAL_RCC_OscConfig+0x508>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002410:	f7fe f866 	bl	80004e0 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002418:	f7fe f862 	bl	80004e0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e17a      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_RCC_OscConfig+0x508>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d108      	bne.n	8002450 <HAL_RCC_OscConfig+0x4d8>
 800243e:	4b0f      	ldr	r3, [pc, #60]	; (800247c <HAL_RCC_OscConfig+0x504>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002444:	4a0d      	ldr	r2, [pc, #52]	; (800247c <HAL_RCC_OscConfig+0x504>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800244e:	e029      	b.n	80024a4 <HAL_RCC_OscConfig+0x52c>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d115      	bne.n	8002484 <HAL_RCC_OscConfig+0x50c>
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_RCC_OscConfig+0x504>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_RCC_OscConfig+0x504>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <HAL_RCC_OscConfig+0x504>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	4a03      	ldr	r2, [pc, #12]	; (800247c <HAL_RCC_OscConfig+0x504>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002478:	e014      	b.n	80024a4 <HAL_RCC_OscConfig+0x52c>
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	40007000 	.word	0x40007000
 8002484:	4b9c      	ldr	r3, [pc, #624]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	4a9b      	ldr	r2, [pc, #620]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002494:	4b98      	ldr	r3, [pc, #608]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	4a97      	ldr	r2, [pc, #604]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d016      	beq.n	80024da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7fe f818 	bl	80004e0 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fe f814 	bl	80004e0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e12a      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ed      	beq.n	80024b4 <HAL_RCC_OscConfig+0x53c>
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7fe f801 	bl	80004e0 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fd fffd 	bl	80004e0 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e113      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f8:	4b7f      	ldr	r3, [pc, #508]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ed      	bne.n	80024e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002506:	7ffb      	ldrb	r3, [r7, #31]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b7a      	ldr	r3, [pc, #488]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002510:	4a79      	ldr	r2, [pc, #484]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002516:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80fe 	beq.w	800271e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	2b02      	cmp	r3, #2
 8002528:	f040 80d0 	bne.w	80026cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800252c:	4b72      	ldr	r3, [pc, #456]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0203 	and.w	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	429a      	cmp	r2, r3
 800253e:	d130      	bne.n	80025a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	3b01      	subs	r3, #1
 800254c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d127      	bne.n	80025a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d11f      	bne.n	80025a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800256c:	2a07      	cmp	r2, #7
 800256e:	bf14      	ite	ne
 8002570:	2201      	movne	r2, #1
 8002572:	2200      	moveq	r2, #0
 8002574:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002576:	4293      	cmp	r3, r2
 8002578:	d113      	bne.n	80025a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	3b01      	subs	r3, #1
 8002588:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	3b01      	subs	r3, #1
 800259c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d06e      	beq.n	8002680 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2b0c      	cmp	r3, #12
 80025a6:	d069      	beq.n	800267c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025a8:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025b4:	4b50      	ldr	r3, [pc, #320]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0ad      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025c4:	4b4c      	ldr	r3, [pc, #304]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a4b      	ldr	r2, [pc, #300]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 80025ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025d0:	f7fd ff86 	bl	80004e0 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fd ff82 	bl	80004e0 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e09a      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ea:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f6:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	4b40      	ldr	r3, [pc, #256]	; (80026fc <HAL_RCC_OscConfig+0x784>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002606:	3a01      	subs	r2, #1
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	4311      	orrs	r1, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002610:	0212      	lsls	r2, r2, #8
 8002612:	4311      	orrs	r1, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002618:	0852      	lsrs	r2, r2, #1
 800261a:	3a01      	subs	r2, #1
 800261c:	0552      	lsls	r2, r2, #21
 800261e:	4311      	orrs	r1, r2
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002624:	0852      	lsrs	r2, r2, #1
 8002626:	3a01      	subs	r2, #1
 8002628:	0652      	lsls	r2, r2, #25
 800262a:	4311      	orrs	r1, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002630:	0912      	lsrs	r2, r2, #4
 8002632:	0452      	lsls	r2, r2, #17
 8002634:	430a      	orrs	r2, r1
 8002636:	4930      	ldr	r1, [pc, #192]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002638:	4313      	orrs	r3, r2
 800263a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800263c:	4b2e      	ldr	r3, [pc, #184]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002646:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002648:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a2a      	ldr	r2, [pc, #168]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 800264e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002652:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002654:	f7fd ff44 	bl	80004e0 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7fd ff40 	bl	80004e0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e058      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267a:	e050      	b.n	800271e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e04f      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d148      	bne.n	800271e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002696:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002698:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 800269e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026a4:	f7fd ff1c 	bl	80004e0 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fd ff18 	bl	80004e0 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e030      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x734>
 80026ca:	e028      	b.n	800271e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d023      	beq.n	800271a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <HAL_RCC_OscConfig+0x780>)
 80026d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fd feff 	bl	80004e0 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	e00c      	b.n	8002700 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fd fefb 	bl	80004e0 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d905      	bls.n	8002700 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e013      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
 80026f8:	40021000 	.word	0x40021000
 80026fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_OscConfig+0x7b0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ec      	bne.n	80026e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_RCC_OscConfig+0x7b0>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4905      	ldr	r1, [pc, #20]	; (8002728 <HAL_RCC_OscConfig+0x7b0>)
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_OscConfig+0x7b4>)
 8002714:	4013      	ands	r3, r2
 8002716:	60cb      	str	r3, [r1, #12]
 8002718:	e001      	b.n	800271e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	feeefffc 	.word	0xfeeefffc

08002730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0e7      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002744:	4b75      	ldr	r3, [pc, #468]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d910      	bls.n	8002774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b72      	ldr	r3, [pc, #456]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0207 	bic.w	r2, r3, #7
 800275a:	4970      	ldr	r1, [pc, #448]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b6e      	ldr	r3, [pc, #440]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0cf      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d010      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	4b66      	ldr	r3, [pc, #408]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800278c:	429a      	cmp	r2, r3
 800278e:	d908      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b63      	ldr	r3, [pc, #396]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4960      	ldr	r1, [pc, #384]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d04c      	beq.n	8002848 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b6:	4b5a      	ldr	r3, [pc, #360]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d121      	bne.n	8002806 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0a6      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ce:	4b54      	ldr	r3, [pc, #336]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d115      	bne.n	8002806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e09a      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027e6:	4b4e      	ldr	r3, [pc, #312]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e08e      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f6:	4b4a      	ldr	r3, [pc, #296]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e086      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002806:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4943      	ldr	r1, [pc, #268]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	4313      	orrs	r3, r2
 8002816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002818:	f7fd fe62 	bl	80004e0 <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	e00a      	b.n	8002836 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7fd fe5e 	bl	80004e0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e06e      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b3a      	ldr	r3, [pc, #232]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 020c 	and.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1eb      	bne.n	8002820 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d010      	beq.n	8002876 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	4b31      	ldr	r3, [pc, #196]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002860:	429a      	cmp	r2, r3
 8002862:	d208      	bcs.n	8002876 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b2e      	ldr	r3, [pc, #184]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	492b      	ldr	r1, [pc, #172]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002876:	4b29      	ldr	r3, [pc, #164]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d210      	bcs.n	80028a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 0207 	bic.w	r2, r3, #7
 800288c:	4923      	ldr	r1, [pc, #140]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002894:	4b21      	ldr	r3, [pc, #132]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e036      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	4918      	ldr	r1, [pc, #96]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4910      	ldr	r1, [pc, #64]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028e4:	f000 f824 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	490b      	ldr	r1, [pc, #44]	; (8002924 <HAL_RCC_ClockConfig+0x1f4>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002900:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 8002902:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x1fc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fd99 	bl	8000440 <HAL_InitTick>
 800290e:	4603      	mov	r3, r0
 8002910:	72fb      	strb	r3, [r7, #11]

  return status;
 8002912:	7afb      	ldrb	r3, [r7, #11]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40022000 	.word	0x40022000
 8002920:	40021000 	.word	0x40021000
 8002924:	080086d4 	.word	0x080086d4
 8002928:	20000000 	.word	0x20000000
 800292c:	20000004 	.word	0x20000004

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800293e:	4b3e      	ldr	r3, [pc, #248]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002948:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x34>
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d121      	bne.n	80029a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d11e      	bne.n	80029a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002964:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002970:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	e005      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002980:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800298c:	4a2b      	ldr	r2, [pc, #172]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x10c>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10d      	bne.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029a8:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x110>)
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	e004      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x114>)
 80029b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d134      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029be:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d003      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0xac>
 80029d4:	e005      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029d6:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x110>)
 80029d8:	617b      	str	r3, [r7, #20]
      break;
 80029da:	e005      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x114>)
 80029de:	617b      	str	r3, [r7, #20]
      break;
 80029e0:	e002      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	617b      	str	r3, [r7, #20]
      break;
 80029e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	3301      	adds	r3, #1
 80029f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	fb03 f202 	mul.w	r2, r3, r2
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	0e5b      	lsrs	r3, r3, #25
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a28:	69bb      	ldr	r3, [r7, #24]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	080086e4 	.word	0x080086e4
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	007a1200 	.word	0x007a1200

08002a48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000000 	.word	0x20000000

08002a60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a78:	f7ff fa0a 	bl	8001e90 <HAL_PWREx_GetVoltageRange>
 8002a7c:	6178      	str	r0, [r7, #20]
 8002a7e:	e014      	b.n	8002aaa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a98:	f7ff f9fa 	bl	8001e90 <HAL_PWREx_GetVoltageRange>
 8002a9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab0:	d10b      	bne.n	8002aca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b80      	cmp	r3, #128	; 0x80
 8002ab6:	d919      	bls.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2ba0      	cmp	r3, #160	; 0xa0
 8002abc:	d902      	bls.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002abe:	2302      	movs	r3, #2
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	e013      	b.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	e010      	b.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b80      	cmp	r3, #128	; 0x80
 8002ace:	d902      	bls.n	8002ad6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	e00a      	b.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b80      	cmp	r3, #128	; 0x80
 8002ada:	d102      	bne.n	8002ae2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002adc:	2302      	movs	r3, #2
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	e004      	b.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b70      	cmp	r3, #112	; 0x70
 8002ae6:	d101      	bne.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ae8:	2301      	movs	r3, #1
 8002aea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 0207 	bic.w	r2, r3, #7
 8002af4:	4909      	ldr	r1, [pc, #36]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002afc:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40022000 	.word	0x40022000

08002b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b28:	2300      	movs	r3, #0
 8002b2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d041      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b44:	d02a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b4a:	d824      	bhi.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b50:	d008      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b56:	d81e      	bhi.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b60:	d010      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b62:	e018      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b64:	4b86      	ldr	r3, [pc, #536]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a85      	ldr	r2, [pc, #532]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b70:	e015      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fabb 	bl	80030f4 <RCCEx_PLLSAI1_Config>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b82:	e00c      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3320      	adds	r3, #32
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fba6 	bl	80032dc <RCCEx_PLLSAI2_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b94:	e003      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	74fb      	strb	r3, [r7, #19]
      break;
 8002b9a:	e000      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ba4:	4b76      	ldr	r3, [pc, #472]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bb2:	4973      	ldr	r1, [pc, #460]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bba:	e001      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d041      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bd4:	d02a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bda:	d824      	bhi.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002be0:	d008      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002be6:	d81e      	bhi.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf0:	d010      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bf2:	e018      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bf4:	4b62      	ldr	r3, [pc, #392]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a61      	ldr	r2, [pc, #388]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c00:	e015      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fa73 	bl	80030f4 <RCCEx_PLLSAI1_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c12:	e00c      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3320      	adds	r3, #32
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fb5e 	bl	80032dc <RCCEx_PLLSAI2_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c24:	e003      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	74fb      	strb	r3, [r7, #19]
      break;
 8002c2a:	e000      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10b      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c34:	4b52      	ldr	r3, [pc, #328]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c42:	494f      	ldr	r1, [pc, #316]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c4a:	e001      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80a0 	beq.w	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c62:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c72:	2300      	movs	r3, #0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00d      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c78:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	4a40      	ldr	r2, [pc, #256]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c82:	6593      	str	r3, [r2, #88]	; 0x58
 8002c84:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c90:	2301      	movs	r3, #1
 8002c92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c94:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a3a      	ldr	r2, [pc, #232]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ca0:	f7fd fc1e 	bl	80004e0 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ca6:	e009      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca8:	f7fd fc1a 	bl	80004e0 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d902      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	74fb      	strb	r3, [r7, #19]
        break;
 8002cba:	e005      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ef      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002cc8:	7cfb      	ldrb	r3, [r7, #19]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d15c      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cce:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01f      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d019      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cec:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	4a20      	ldr	r2, [pc, #128]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d18:	4a19      	ldr	r2, [pc, #100]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fd fbd9 	bl	80004e0 <HAL_GetTick>
 8002d2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d30:	e00b      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fd fbd5 	bl	80004e0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d902      	bls.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	74fb      	strb	r3, [r7, #19]
            break;
 8002d48:	e006      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ec      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d6e:	4904      	ldr	r1, [pc, #16]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d76:	e009      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	74bb      	strb	r3, [r7, #18]
 8002d7c:	e006      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d8c:	7c7b      	ldrb	r3, [r7, #17]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d105      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d92:	4b9e      	ldr	r3, [pc, #632]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	4a9d      	ldr	r2, [pc, #628]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002daa:	4b98      	ldr	r3, [pc, #608]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db0:	f023 0203 	bic.w	r2, r3, #3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	4994      	ldr	r1, [pc, #592]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dcc:	4b8f      	ldr	r3, [pc, #572]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	f023 020c 	bic.w	r2, r3, #12
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	498c      	ldr	r1, [pc, #560]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dee:	4b87      	ldr	r3, [pc, #540]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	4983      	ldr	r1, [pc, #524]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e10:	4b7e      	ldr	r3, [pc, #504]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	497b      	ldr	r1, [pc, #492]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e32:	4b76      	ldr	r3, [pc, #472]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e40:	4972      	ldr	r1, [pc, #456]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e54:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	496a      	ldr	r1, [pc, #424]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e76:	4b65      	ldr	r3, [pc, #404]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	4961      	ldr	r1, [pc, #388]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e98:	4b5c      	ldr	r3, [pc, #368]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	4959      	ldr	r1, [pc, #356]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eba:	4b54      	ldr	r3, [pc, #336]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec8:	4950      	ldr	r1, [pc, #320]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002edc:	4b4b      	ldr	r3, [pc, #300]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	4948      	ldr	r1, [pc, #288]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002efe:	4b43      	ldr	r3, [pc, #268]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	493f      	ldr	r1, [pc, #252]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d028      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f20:	4b3a      	ldr	r3, [pc, #232]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f2e:	4937      	ldr	r1, [pc, #220]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f40:	4b32      	ldr	r3, [pc, #200]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4a31      	ldr	r2, [pc, #196]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f4a:	60d3      	str	r3, [r2, #12]
 8002f4c:	e011      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f8c8 	bl	80030f4 <RCCEx_PLLSAI1_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f6e:	7cfb      	ldrb	r3, [r7, #19]
 8002f70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d028      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f7e:	4b23      	ldr	r3, [pc, #140]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	491f      	ldr	r1, [pc, #124]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f9c:	d106      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	4a1a      	ldr	r2, [pc, #104]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fa8:	60d3      	str	r3, [r2, #12]
 8002faa:	e011      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	2101      	movs	r1, #1
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f899 	bl	80030f4 <RCCEx_PLLSAI1_Config>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fc6:	7cfb      	ldrb	r3, [r7, #19]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02b      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fea:	4908      	ldr	r1, [pc, #32]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ffa:	d109      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a02      	ldr	r2, [pc, #8]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003006:	60d3      	str	r3, [r2, #12]
 8003008:	e014      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003014:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003018:	d10c      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3304      	adds	r3, #4
 800301e:	2101      	movs	r1, #1
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f867 	bl	80030f4 <RCCEx_PLLSAI1_Config>
 8003026:	4603      	mov	r3, r0
 8003028:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d02f      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003040:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800304e:	4928      	ldr	r1, [pc, #160]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800305e:	d10d      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3304      	adds	r3, #4
 8003064:	2102      	movs	r1, #2
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f844 	bl	80030f4 <RCCEx_PLLSAI1_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d014      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	74bb      	strb	r3, [r7, #18]
 800307a:	e011      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003084:	d10c      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3320      	adds	r3, #32
 800308a:	2102      	movs	r1, #2
 800308c:	4618      	mov	r0, r3
 800308e:	f000 f925 	bl	80032dc <RCCEx_PLLSAI2_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003096:	7cfb      	ldrb	r3, [r7, #19]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800309c:	7cfb      	ldrb	r3, [r7, #19]
 800309e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ba:	490d      	ldr	r1, [pc, #52]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030de:	4904      	ldr	r1, [pc, #16]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000

080030f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003102:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d018      	beq.n	8003140 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800310e:	4b72      	ldr	r3, [pc, #456]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f003 0203 	and.w	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d10d      	bne.n	800313a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
       ||
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003126:	4b6c      	ldr	r3, [pc, #432]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
       ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d047      	beq.n	80031ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
 800313e:	e044      	b.n	80031ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d018      	beq.n	800317a <RCCEx_PLLSAI1_Config+0x86>
 8003148:	2b03      	cmp	r3, #3
 800314a:	d825      	bhi.n	8003198 <RCCEx_PLLSAI1_Config+0xa4>
 800314c:	2b01      	cmp	r3, #1
 800314e:	d002      	beq.n	8003156 <RCCEx_PLLSAI1_Config+0x62>
 8003150:	2b02      	cmp	r3, #2
 8003152:	d009      	beq.n	8003168 <RCCEx_PLLSAI1_Config+0x74>
 8003154:	e020      	b.n	8003198 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003156:	4b60      	ldr	r3, [pc, #384]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d11d      	bne.n	800319e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003166:	e01a      	b.n	800319e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003168:	4b5b      	ldr	r3, [pc, #364]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	2b00      	cmp	r3, #0
 8003172:	d116      	bne.n	80031a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003178:	e013      	b.n	80031a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800317a:	4b57      	ldr	r3, [pc, #348]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10f      	bne.n	80031a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003186:	4b54      	ldr	r3, [pc, #336]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003196:	e006      	b.n	80031a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      break;
 800319c:	e004      	b.n	80031a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800319e:	bf00      	nop
 80031a0:	e002      	b.n	80031a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031a2:	bf00      	nop
 80031a4:	e000      	b.n	80031a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10d      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	3b01      	subs	r3, #1
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	430b      	orrs	r3, r1
 80031c4:	4944      	ldr	r1, [pc, #272]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d17d      	bne.n	80032cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031d0:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a40      	ldr	r2, [pc, #256]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031dc:	f7fd f980 	bl	80004e0 <HAL_GetTick>
 80031e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031e2:	e009      	b.n	80031f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031e4:	f7fd f97c 	bl	80004e0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d902      	bls.n	80031f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	73fb      	strb	r3, [r7, #15]
        break;
 80031f6:	e005      	b.n	8003204 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031f8:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ef      	bne.n	80031e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d160      	bne.n	80032cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d111      	bne.n	8003234 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003210:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6892      	ldr	r2, [r2, #8]
 8003220:	0211      	lsls	r1, r2, #8
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68d2      	ldr	r2, [r2, #12]
 8003226:	0912      	lsrs	r2, r2, #4
 8003228:	0452      	lsls	r2, r2, #17
 800322a:	430a      	orrs	r2, r1
 800322c:	492a      	ldr	r1, [pc, #168]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322e:	4313      	orrs	r3, r2
 8003230:	610b      	str	r3, [r1, #16]
 8003232:	e027      	b.n	8003284 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d112      	bne.n	8003260 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800323a:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003242:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6892      	ldr	r2, [r2, #8]
 800324a:	0211      	lsls	r1, r2, #8
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6912      	ldr	r2, [r2, #16]
 8003250:	0852      	lsrs	r2, r2, #1
 8003252:	3a01      	subs	r2, #1
 8003254:	0552      	lsls	r2, r2, #21
 8003256:	430a      	orrs	r2, r1
 8003258:	491f      	ldr	r1, [pc, #124]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	610b      	str	r3, [r1, #16]
 800325e:	e011      	b.n	8003284 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003268:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6892      	ldr	r2, [r2, #8]
 8003270:	0211      	lsls	r1, r2, #8
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6952      	ldr	r2, [r2, #20]
 8003276:	0852      	lsrs	r2, r2, #1
 8003278:	3a01      	subs	r2, #1
 800327a:	0652      	lsls	r2, r2, #25
 800327c:	430a      	orrs	r2, r1
 800327e:	4916      	ldr	r1, [pc, #88]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003280:	4313      	orrs	r3, r2
 8003282:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a13      	ldr	r2, [pc, #76]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800328e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fd f926 	bl	80004e0 <HAL_GetTick>
 8003294:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003296:	e009      	b.n	80032ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003298:	f7fd f922 	bl	80004e0 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d902      	bls.n	80032ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	73fb      	strb	r3, [r7, #15]
          break;
 80032aa:	e005      	b.n	80032b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ef      	beq.n	8003298 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	4904      	ldr	r1, [pc, #16]	; (80032d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000

080032dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ea:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d018      	beq.n	8003328 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032f6:	4b67      	ldr	r3, [pc, #412]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0203 	and.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d10d      	bne.n	8003322 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
       ||
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800330e:	4b61      	ldr	r3, [pc, #388]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
       ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d047      	beq.n	80033b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
 8003326:	e044      	b.n	80033b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d018      	beq.n	8003362 <RCCEx_PLLSAI2_Config+0x86>
 8003330:	2b03      	cmp	r3, #3
 8003332:	d825      	bhi.n	8003380 <RCCEx_PLLSAI2_Config+0xa4>
 8003334:	2b01      	cmp	r3, #1
 8003336:	d002      	beq.n	800333e <RCCEx_PLLSAI2_Config+0x62>
 8003338:	2b02      	cmp	r3, #2
 800333a:	d009      	beq.n	8003350 <RCCEx_PLLSAI2_Config+0x74>
 800333c:	e020      	b.n	8003380 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800333e:	4b55      	ldr	r3, [pc, #340]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d11d      	bne.n	8003386 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800334e:	e01a      	b.n	8003386 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003350:	4b50      	ldr	r3, [pc, #320]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d116      	bne.n	800338a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003360:	e013      	b.n	800338a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003362:	4b4c      	ldr	r3, [pc, #304]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10f      	bne.n	800338e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800336e:	4b49      	ldr	r3, [pc, #292]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800337e:	e006      	b.n	800338e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e004      	b.n	8003390 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003386:	bf00      	nop
 8003388:	e002      	b.n	8003390 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800338e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10d      	bne.n	80033b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003396:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	430b      	orrs	r3, r1
 80033ac:	4939      	ldr	r1, [pc, #228]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d167      	bne.n	8003488 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a35      	ldr	r2, [pc, #212]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c4:	f7fd f88c 	bl	80004e0 <HAL_GetTick>
 80033c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033ca:	e009      	b.n	80033e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033cc:	f7fd f888 	bl	80004e0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d902      	bls.n	80033e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	73fb      	strb	r3, [r7, #15]
        break;
 80033de:	e005      	b.n	80033ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033e0:	4b2c      	ldr	r3, [pc, #176]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1ef      	bne.n	80033cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d14a      	bne.n	8003488 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d111      	bne.n	800341c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033f8:	4b26      	ldr	r3, [pc, #152]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6892      	ldr	r2, [r2, #8]
 8003408:	0211      	lsls	r1, r2, #8
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68d2      	ldr	r2, [r2, #12]
 800340e:	0912      	lsrs	r2, r2, #4
 8003410:	0452      	lsls	r2, r2, #17
 8003412:	430a      	orrs	r2, r1
 8003414:	491f      	ldr	r1, [pc, #124]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	614b      	str	r3, [r1, #20]
 800341a:	e011      	b.n	8003440 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003424:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6892      	ldr	r2, [r2, #8]
 800342c:	0211      	lsls	r1, r2, #8
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6912      	ldr	r2, [r2, #16]
 8003432:	0852      	lsrs	r2, r2, #1
 8003434:	3a01      	subs	r2, #1
 8003436:	0652      	lsls	r2, r2, #25
 8003438:	430a      	orrs	r2, r1
 800343a:	4916      	ldr	r1, [pc, #88]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 800343c:	4313      	orrs	r3, r2
 800343e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a13      	ldr	r2, [pc, #76]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fd f848 	bl	80004e0 <HAL_GetTick>
 8003450:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003452:	e009      	b.n	8003468 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003454:	f7fd f844 	bl	80004e0 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d902      	bls.n	8003468 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	73fb      	strb	r3, [r7, #15]
          break;
 8003466:	e005      	b.n	8003474 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ef      	beq.n	8003454 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	4904      	ldr	r1, [pc, #16]	; (8003494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003484:	4313      	orrs	r3, r2
 8003486:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000

08003498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003498:	b084      	sub	sp, #16
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	f107 001c 	add.w	r0, r7, #28
 80034a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 faf6 	bl	8004aa8 <USB_CoreReset>
 80034bc:	4603      	mov	r3, r0
 80034be:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80034c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38
 80034d2:	e005      	b.n	80034e0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034ec:	b004      	add	sp, #16
 80034ee:	4770      	bx	lr

080034f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d165      	bne.n	80035d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4a3e      	ldr	r2, [pc, #248]	; (8003600 <USB_SetTurnaroundTime+0x110>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d906      	bls.n	800351a <USB_SetTurnaroundTime+0x2a>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4a3d      	ldr	r2, [pc, #244]	; (8003604 <USB_SetTurnaroundTime+0x114>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d202      	bcs.n	800351a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003514:	230f      	movs	r3, #15
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e05c      	b.n	80035d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4a39      	ldr	r2, [pc, #228]	; (8003604 <USB_SetTurnaroundTime+0x114>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d306      	bcc.n	8003530 <USB_SetTurnaroundTime+0x40>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	4a38      	ldr	r2, [pc, #224]	; (8003608 <USB_SetTurnaroundTime+0x118>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d202      	bcs.n	8003530 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800352a:	230e      	movs	r3, #14
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e051      	b.n	80035d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4a35      	ldr	r2, [pc, #212]	; (8003608 <USB_SetTurnaroundTime+0x118>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d306      	bcc.n	8003546 <USB_SetTurnaroundTime+0x56>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4a34      	ldr	r2, [pc, #208]	; (800360c <USB_SetTurnaroundTime+0x11c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d202      	bcs.n	8003546 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003540:	230d      	movs	r3, #13
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e046      	b.n	80035d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4a30      	ldr	r2, [pc, #192]	; (800360c <USB_SetTurnaroundTime+0x11c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d306      	bcc.n	800355c <USB_SetTurnaroundTime+0x6c>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	4a2f      	ldr	r2, [pc, #188]	; (8003610 <USB_SetTurnaroundTime+0x120>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d802      	bhi.n	800355c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003556:	230c      	movs	r3, #12
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	e03b      	b.n	80035d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4a2c      	ldr	r2, [pc, #176]	; (8003610 <USB_SetTurnaroundTime+0x120>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d906      	bls.n	8003572 <USB_SetTurnaroundTime+0x82>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4a2b      	ldr	r2, [pc, #172]	; (8003614 <USB_SetTurnaroundTime+0x124>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d802      	bhi.n	8003572 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800356c:	230b      	movs	r3, #11
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	e030      	b.n	80035d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4a27      	ldr	r2, [pc, #156]	; (8003614 <USB_SetTurnaroundTime+0x124>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d906      	bls.n	8003588 <USB_SetTurnaroundTime+0x98>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4a26      	ldr	r2, [pc, #152]	; (8003618 <USB_SetTurnaroundTime+0x128>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d802      	bhi.n	8003588 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003582:	230a      	movs	r3, #10
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	e025      	b.n	80035d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4a23      	ldr	r2, [pc, #140]	; (8003618 <USB_SetTurnaroundTime+0x128>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d906      	bls.n	800359e <USB_SetTurnaroundTime+0xae>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4a22      	ldr	r2, [pc, #136]	; (800361c <USB_SetTurnaroundTime+0x12c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d202      	bcs.n	800359e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003598:	2309      	movs	r3, #9
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e01a      	b.n	80035d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4a1e      	ldr	r2, [pc, #120]	; (800361c <USB_SetTurnaroundTime+0x12c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d306      	bcc.n	80035b4 <USB_SetTurnaroundTime+0xc4>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <USB_SetTurnaroundTime+0x130>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d802      	bhi.n	80035b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80035ae:	2308      	movs	r3, #8
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e00f      	b.n	80035d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <USB_SetTurnaroundTime+0x130>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d906      	bls.n	80035ca <USB_SetTurnaroundTime+0xda>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4a19      	ldr	r2, [pc, #100]	; (8003624 <USB_SetTurnaroundTime+0x134>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d202      	bcs.n	80035ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80035c4:	2307      	movs	r3, #7
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	e004      	b.n	80035d4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80035ca:	2306      	movs	r3, #6
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e001      	b.n	80035d4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80035d0:	2309      	movs	r3, #9
 80035d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	029b      	lsls	r3, r3, #10
 80035e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80035ec:	431a      	orrs	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	00d8acbf 	.word	0x00d8acbf
 8003604:	00e4e1c0 	.word	0x00e4e1c0
 8003608:	00f42400 	.word	0x00f42400
 800360c:	01067380 	.word	0x01067380
 8003610:	011a499f 	.word	0x011a499f
 8003614:	01312cff 	.word	0x01312cff
 8003618:	014ca43f 	.word	0x014ca43f
 800361c:	016e3600 	.word	0x016e3600
 8003620:	01a6ab1f 	.word	0x01a6ab1f
 8003624:	01e84800 	.word	0x01e84800

08003628 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f043 0201 	orr.w	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f023 0201 	bic.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d115      	bne.n	80036ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800369a:	2001      	movs	r0, #1
 800369c:	f7fc ff2c 	bl	80004f8 <HAL_Delay>
      ms++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3301      	adds	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f001 f985 	bl	80049b6 <USB_GetMode>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d01e      	beq.n	80036f0 <USB_SetCurrentMode+0x84>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b31      	cmp	r3, #49	; 0x31
 80036b6:	d9f0      	bls.n	800369a <USB_SetCurrentMode+0x2e>
 80036b8:	e01a      	b.n	80036f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d115      	bne.n	80036ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036cc:	2001      	movs	r0, #1
 80036ce:	f7fc ff13 	bl	80004f8 <HAL_Delay>
      ms++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3301      	adds	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f001 f96c 	bl	80049b6 <USB_GetMode>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <USB_SetCurrentMode+0x84>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b31      	cmp	r3, #49	; 0x31
 80036e8:	d9f0      	bls.n	80036cc <USB_SetCurrentMode+0x60>
 80036ea:	e001      	b.n	80036f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e005      	b.n	80036fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b32      	cmp	r3, #50	; 0x32
 80036f4:	d101      	bne.n	80036fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003704:	b084      	sub	sp, #16
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	e009      	b.n	8003738 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	3340      	adds	r3, #64	; 0x40
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	2200      	movs	r2, #0
 8003730:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	3301      	adds	r3, #1
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b0e      	cmp	r3, #14
 800373c:	d9f2      	bls.n	8003724 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800373e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11c      	bne.n	800377e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003752:	f043 0302 	orr.w	r3, r3, #2
 8003756:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e005      	b.n	800378a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003790:	461a      	mov	r2, r3
 8003792:	2300      	movs	r3, #0
 8003794:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379c:	4619      	mov	r1, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a4:	461a      	mov	r2, r3
 80037a6:	680b      	ldr	r3, [r1, #0]
 80037a8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037aa:	2103      	movs	r1, #3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f959 	bl	8003a64 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037b2:	2110      	movs	r1, #16
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f8f1 	bl	800399c <USB_FlushTxFifo>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f91d 	bl	8003a04 <USB_FlushRxFifo>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037da:	461a      	mov	r2, r3
 80037dc:	2300      	movs	r3, #0
 80037de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e6:	461a      	mov	r2, r3
 80037e8:	2300      	movs	r3, #0
 80037ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f2:	461a      	mov	r2, r3
 80037f4:	2300      	movs	r3, #0
 80037f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	e043      	b.n	8003886 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003814:	d118      	bne.n	8003848 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003828:	461a      	mov	r2, r3
 800382a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	e013      	b.n	800385a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	461a      	mov	r2, r3
 8003840:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e008      	b.n	800385a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003854:	461a      	mov	r2, r3
 8003856:	2300      	movs	r3, #0
 8003858:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003866:	461a      	mov	r2, r3
 8003868:	2300      	movs	r3, #0
 800386a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003878:	461a      	mov	r2, r3
 800387a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800387e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	3301      	adds	r3, #1
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3b7      	bcc.n	80037fe <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	e043      	b.n	800391c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038aa:	d118      	bne.n	80038de <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038be:	461a      	mov	r2, r3
 80038c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e013      	b.n	80038f0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d4:	461a      	mov	r2, r3
 80038d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e008      	b.n	80038f0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ea:	461a      	mov	r2, r3
 80038ec:	2300      	movs	r3, #0
 80038ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fc:	461a      	mov	r2, r3
 80038fe:	2300      	movs	r3, #0
 8003900:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390e:	461a      	mov	r2, r3
 8003910:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003914:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	3301      	adds	r3, #1
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	429a      	cmp	r2, r3
 8003922:	d3b7      	bcc.n	8003894 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003936:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003944:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f043 0210 	orr.w	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <USB_DevInit+0x294>)
 8003958:	4313      	orrs	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800395e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f043 0208 	orr.w	r2, r3, #8
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003972:	2b01      	cmp	r3, #1
 8003974:	d107      	bne.n	8003986 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003986:	7dfb      	ldrb	r3, [r7, #23]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003992:	b004      	add	sp, #16
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	803c3800 	.word	0x803c3800

0800399c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3301      	adds	r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a13      	ldr	r2, [pc, #76]	; (8003a00 <USB_FlushTxFifo+0x64>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e01b      	b.n	80039f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	daf2      	bge.n	80039aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	019b      	lsls	r3, r3, #6
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3301      	adds	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a08      	ldr	r2, [pc, #32]	; (8003a00 <USB_FlushTxFifo+0x64>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e006      	b.n	80039f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d0f0      	beq.n	80039d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	00030d40 	.word	0x00030d40

08003a04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3301      	adds	r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <USB_FlushRxFifo+0x5c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e018      	b.n	8003a54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	daf2      	bge.n	8003a10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2210      	movs	r2, #16
 8003a32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3301      	adds	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <USB_FlushRxFifo+0x5c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e006      	b.n	8003a54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	d0f0      	beq.n	8003a34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	00030d40 	.word	0x00030d40

08003a64 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	68f9      	ldr	r1, [r7, #12]
 8003a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b087      	sub	sp, #28
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0306 	and.w	r3, r3, #6
 8003aae:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d002      	beq.n	8003abc <USB_GetDevSpeed+0x26>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b06      	cmp	r3, #6
 8003aba:	d102      	bne.n	8003ac2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003abc:	2302      	movs	r3, #2
 8003abe:	75fb      	strb	r3, [r7, #23]
 8003ac0:	e001      	b.n	8003ac6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003ac2:	230f      	movs	r3, #15
 8003ac4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	785b      	ldrb	r3, [r3, #1]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d13a      	bne.n	8003b66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	2101      	movs	r1, #1
 8003b02:	fa01 f303 	lsl.w	r3, r1, r3
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	68f9      	ldr	r1, [r7, #12]
 8003b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d155      	bne.n	8003bd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	791b      	ldrb	r3, [r3, #4]
 8003b42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	059b      	lsls	r3, r3, #22
 8003b4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	0151      	lsls	r1, r2, #5
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	440a      	add	r2, r1
 8003b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	e036      	b.n	8003bd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	2101      	movs	r1, #1
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	041b      	lsls	r3, r3, #16
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d11a      	bne.n	8003bd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	791b      	ldrb	r3, [r3, #4]
 8003bb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	0151      	lsls	r1, r2, #5
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	440a      	add	r2, r1
 8003bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d161      	bne.n	8003cc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c16:	d11f      	bne.n	8003c58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	0151      	lsls	r1, r2, #5
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	2101      	movs	r1, #1
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	68f9      	ldr	r1, [r7, #12]
 8003c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c78:	4013      	ands	r3, r2
 8003c7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	0159      	lsls	r1, r3, #5
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	440b      	add	r3, r1
 8003cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4b35      	ldr	r3, [pc, #212]	; (8003d94 <USB_DeactivateEndpoint+0x1b0>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
 8003cc2:	e060      	b.n	8003d86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cda:	d11f      	bne.n	8003d1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	0151      	lsls	r1, r2, #5
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	440a      	add	r2, r1
 8003cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	0151      	lsls	r1, r2, #5
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	440a      	add	r2, r1
 8003d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d32:	041b      	lsls	r3, r3, #16
 8003d34:	43db      	mvns	r3, r3
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	2101      	movs	r1, #1
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	041b      	lsls	r3, r3, #16
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d60:	4013      	ands	r3, r2
 8003d62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	0159      	lsls	r1, r3, #5
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	440b      	add	r3, r1
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <USB_DeactivateEndpoint+0x1b4>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	ec337800 	.word	0xec337800
 8003d98:	eff37800 	.word	0xeff37800

08003d9c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	f040 810a 	bne.w	8003fce <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d132      	bne.n	8003e28 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ddc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003de0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003de4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	0151      	lsls	r1, r2, #5
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	0151      	lsls	r1, r2, #5
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	440a      	add	r2, r1
 8003e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e20:	0cdb      	lsrs	r3, r3, #19
 8003e22:	04db      	lsls	r3, r3, #19
 8003e24:	6113      	str	r3, [r2, #16]
 8003e26:	e074      	b.n	8003f12 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e42:	0cdb      	lsrs	r3, r3, #19
 8003e44:	04db      	lsls	r3, r3, #19
 8003e46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e78:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6999      	ldr	r1, [r3, #24]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	440b      	add	r3, r1
 8003e84:	1e59      	subs	r1, r3, #1
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e8e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e90:	4b9e      	ldr	r3, [pc, #632]	; (800410c <USB_EPStartXfer+0x370>)
 8003e92:	400b      	ands	r3, r1
 8003e94:	6939      	ldr	r1, [r7, #16]
 8003e96:	0148      	lsls	r0, r1, #5
 8003e98:	6979      	ldr	r1, [r7, #20]
 8003e9a:	4401      	add	r1, r0
 8003e9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eba:	6939      	ldr	r1, [r7, #16]
 8003ebc:	0148      	lsls	r0, r1, #5
 8003ebe:	6979      	ldr	r1, [r7, #20]
 8003ec0:	4401      	add	r1, r0
 8003ec2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	791b      	ldrb	r3, [r3, #4]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d11f      	bne.n	8003f12 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ef0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	0151      	lsls	r1, r2, #5
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	440a      	add	r2, r1
 8003f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f10:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	0151      	lsls	r1, r2, #5
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	440a      	add	r2, r1
 8003f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f30:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	791b      	ldrb	r3, [r3, #4]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d015      	beq.n	8003f66 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8106 	beq.w	8004150 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	2101      	movs	r1, #1
 8003f56:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5a:	6979      	ldr	r1, [r7, #20]
 8003f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f60:	4313      	orrs	r3, r2
 8003f62:	634b      	str	r3, [r1, #52]	; 0x34
 8003f64:	e0f4      	b.n	8004150 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d110      	bne.n	8003f98 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	e00f      	b.n	8003fb8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	0151      	lsls	r1, r2, #5
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	440a      	add	r2, r1
 8003fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6919      	ldr	r1, [r3, #16]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	781a      	ldrb	r2, [r3, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa94 	bl	80044f4 <USB_WritePacket>
 8003fcc:	e0c0      	b.n	8004150 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe8:	0cdb      	lsrs	r3, r3, #19
 8003fea:	04db      	lsls	r3, r3, #19
 8003fec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	440a      	add	r2, r1
 8004004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004008:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800400c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004010:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d123      	bne.n	8004062 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004030:	6939      	ldr	r1, [r7, #16]
 8004032:	0148      	lsls	r0, r1, #5
 8004034:	6979      	ldr	r1, [r7, #20]
 8004036:	4401      	add	r1, r0
 8004038:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800403c:	4313      	orrs	r3, r2
 800403e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	0151      	lsls	r1, r2, #5
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	440a      	add	r2, r1
 8004056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800405a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800405e:	6113      	str	r3, [r2, #16]
 8004060:	e037      	b.n	80040d2 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4413      	add	r3, r2
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	89fa      	ldrh	r2, [r7, #14]
 800407e:	fb03 f202 	mul.w	r2, r3, r2
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	89fb      	ldrh	r3, [r7, #14]
 8004096:	04d9      	lsls	r1, r3, #19
 8004098:	4b1c      	ldr	r3, [pc, #112]	; (800410c <USB_EPStartXfer+0x370>)
 800409a:	400b      	ands	r3, r1
 800409c:	6939      	ldr	r1, [r7, #16]
 800409e:	0148      	lsls	r0, r1, #5
 80040a0:	6979      	ldr	r1, [r7, #20]
 80040a2:	4401      	add	r1, r0
 80040a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040a8:	4313      	orrs	r3, r2
 80040aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c2:	6939      	ldr	r1, [r7, #16]
 80040c4:	0148      	lsls	r0, r1, #5
 80040c6:	6979      	ldr	r1, [r7, #20]
 80040c8:	4401      	add	r1, r0
 80040ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040ce:	4313      	orrs	r3, r2
 80040d0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	791b      	ldrb	r3, [r3, #4]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d12a      	bne.n	8004130 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d112      	bne.n	8004110 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	0151      	lsls	r1, r2, #5
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	440a      	add	r2, r1
 8004100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004104:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	e011      	b.n	8004130 <USB_EPStartXfer+0x394>
 800410c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	440a      	add	r2, r1
 8004126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	0151      	lsls	r1, r2, #5
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	440a      	add	r2, r1
 8004146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800414a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800414e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop

0800415c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 80ab 	bne.w	80042d0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d132      	bne.n	80041e8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	440a      	add	r2, r1
 8004198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800419c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e0:	0cdb      	lsrs	r3, r3, #19
 80041e2:	04db      	lsls	r3, r3, #19
 80041e4:	6113      	str	r3, [r2, #16]
 80041e6:	e04e      	b.n	8004286 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004202:	0cdb      	lsrs	r3, r3, #19
 8004204:	04db      	lsls	r3, r3, #19
 8004206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	440a      	add	r2, r1
 800421e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004222:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004226:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800422a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	429a      	cmp	r2, r3
 8004236:	d903      	bls.n	8004240 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800425e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	0148      	lsls	r0, r1, #5
 800427a:	68f9      	ldr	r1, [r7, #12]
 800427c:	4401      	add	r1, r0
 800427e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004282:	4313      	orrs	r3, r2
 8004284:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	0151      	lsls	r1, r2, #5
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	440a      	add	r2, r1
 800429c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042a4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d071      	beq.n	8004392 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	2101      	movs	r1, #1
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	68f9      	ldr	r1, [r7, #12]
 80042c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ca:	4313      	orrs	r3, r2
 80042cc:	634b      	str	r3, [r1, #52]	; 0x34
 80042ce:	e060      	b.n	8004392 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ea:	0cdb      	lsrs	r3, r3, #19
 80042ec:	04db      	lsls	r3, r3, #19
 80042ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	440a      	add	r2, r1
 8004306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800430a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800430e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004312:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	0151      	lsls	r1, r2, #5
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	440a      	add	r2, r1
 8004342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800434a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	0148      	lsls	r0, r1, #5
 8004366:	68f9      	ldr	r1, [r7, #12]
 8004368:	4401      	add	r1, r0
 800436a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800436e:	4313      	orrs	r3, r2
 8004370:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	0151      	lsls	r1, r2, #5
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	440a      	add	r2, r1
 8004388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800438c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004390:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	785b      	ldrb	r3, [r3, #1]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d14a      	bne.n	8004454 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d6:	f040 8086 	bne.w	80044e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	7812      	ldrb	r2, [r2, #0]
 80043ee:	0151      	lsls	r1, r2, #5
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	440a      	add	r2, r1
 80043f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	0151      	lsls	r1, r2, #5
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	440a      	add	r2, r1
 8004418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004420:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3301      	adds	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f242 7210 	movw	r2, #10000	; 0x2710
 800442e:	4293      	cmp	r3, r2
 8004430:	d902      	bls.n	8004438 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
          break;
 8004436:	e056      	b.n	80044e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800444c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004450:	d0e7      	beq.n	8004422 <USB_EPStopXfer+0x82>
 8004452:	e048      	b.n	80044e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800446c:	d13b      	bne.n	80044e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	7812      	ldrb	r2, [r2, #0]
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	440a      	add	r2, r1
 8004488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800448c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004490:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	7812      	ldrb	r2, [r2, #0]
 80044a6:	0151      	lsls	r1, r2, #5
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	440a      	add	r2, r1
 80044ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3301      	adds	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f242 7210 	movw	r2, #10000	; 0x2710
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d902      	bls.n	80044cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
          break;
 80044ca:	e00c      	b.n	80044e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044e4:	d0e7      	beq.n	80044b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	4611      	mov	r1, r2
 8004500:	461a      	mov	r2, r3
 8004502:	460b      	mov	r3, r1
 8004504:	71fb      	strb	r3, [r7, #7]
 8004506:	4613      	mov	r3, r2
 8004508:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004512:	88bb      	ldrh	r3, [r7, #4]
 8004514:	3303      	adds	r3, #3
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	e018      	b.n	8004552 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	031a      	lsls	r2, r3, #12
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	4413      	add	r3, r2
 8004528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452c:	461a      	mov	r2, r3
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	3301      	adds	r3, #1
 8004538:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3301      	adds	r3, #1
 800453e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	3301      	adds	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	3301      	adds	r3, #1
 800454a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	3301      	adds	r3, #1
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	429a      	cmp	r2, r3
 8004558:	d3e2      	bcc.n	8004520 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3724      	adds	r7, #36	; 0x24
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004568:	b480      	push	{r7}
 800456a:	b08b      	sub	sp, #44	; 0x2c
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	b29b      	uxth	r3, r3
 8004584:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800458e:	2300      	movs	r3, #0
 8004590:	623b      	str	r3, [r7, #32]
 8004592:	e014      	b.n	80045be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	601a      	str	r2, [r3, #0]
    pDest++;
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	3301      	adds	r3, #1
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	3301      	adds	r3, #1
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	3301      	adds	r3, #1
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	3301      	adds	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	3301      	adds	r3, #1
 80045bc:	623b      	str	r3, [r7, #32]
 80045be:	6a3a      	ldr	r2, [r7, #32]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d3e6      	bcc.n	8004594 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80045c6:	8bfb      	ldrh	r3, [r7, #30]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01e      	beq.n	800460a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d6:	461a      	mov	r2, r3
 80045d8:	f107 0310 	add.w	r3, r7, #16
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	701a      	strb	r2, [r3, #0]
      i++;
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	3301      	adds	r3, #1
 80045f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	3301      	adds	r3, #1
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80045fe:	8bfb      	ldrh	r3, [r7, #30]
 8004600:	3b01      	subs	r3, #1
 8004602:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004604:	8bfb      	ldrh	r3, [r7, #30]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1ea      	bne.n	80045e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800460c:	4618      	mov	r0, r3
 800460e:	372c      	adds	r7, #44	; 0x2c
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d12c      	bne.n	800468e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	db12      	blt.n	800466c <USB_EPSetStall+0x54>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00f      	beq.n	800466c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	0151      	lsls	r1, r2, #5
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	440a      	add	r2, r1
 8004662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004666:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800466a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	0151      	lsls	r1, r2, #5
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	440a      	add	r2, r1
 8004682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	e02b      	b.n	80046e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	db12      	blt.n	80046c6 <USB_EPSetStall+0xae>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00f      	beq.n	80046c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	0151      	lsls	r1, r2, #5
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	440a      	add	r2, r1
 80046bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	0151      	lsls	r1, r2, #5
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	440a      	add	r2, r1
 80046dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	785b      	ldrb	r3, [r3, #1]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d128      	bne.n	8004762 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	0151      	lsls	r1, r2, #5
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	440a      	add	r2, r1
 8004726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800472e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	791b      	ldrb	r3, [r3, #4]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d003      	beq.n	8004740 <USB_EPClearStall+0x4c>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	791b      	ldrb	r3, [r3, #4]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d138      	bne.n	80047b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	0151      	lsls	r1, r2, #5
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	440a      	add	r2, r1
 8004756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	e027      	b.n	80047b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	440a      	add	r2, r1
 8004778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800477c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004780:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	791b      	ldrb	r3, [r3, #4]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d003      	beq.n	8004792 <USB_EPClearStall+0x9e>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	791b      	ldrb	r3, [r3, #4]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d10f      	bne.n	80047b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80047f4:	68f9      	ldr	r1, [r7, #12]
 80047f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047fa:	4313      	orrs	r3, r2
 80047fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800483a:	f023 0302 	bic.w	r3, r3, #2
 800483e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004868:	f023 0303 	bic.w	r3, r3, #3
 800486c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800487c:	f043 0302 	orr.w	r3, r3, #2
 8004880:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4013      	ands	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048a8:	68fb      	ldr	r3, [r7, #12]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	4013      	ands	r3, r2
 80048d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	0c1b      	lsrs	r3, r3, #16
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	4013      	ands	r3, r2
 800490c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	b29b      	uxth	r3, r3
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	460b      	mov	r3, r1
 8004928:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	4013      	ands	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800494c:	68bb      	ldr	r3, [r7, #8]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800495a:	b480      	push	{r7}
 800495c:	b087      	sub	sp, #28
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	460b      	mov	r3, r1
 8004964:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	fa22 f303 	lsr.w	r3, r2, r3
 800498a:	01db      	lsls	r3, r3, #7
 800498c:	b2db      	uxtb	r3, r3
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4013      	ands	r3, r2
 80049a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049a8:	68bb      	ldr	r3, [r7, #8]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f003 0301 	and.w	r3, r3, #1
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049f0:	f023 0307 	bic.w	r3, r3, #7
 80049f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	333c      	adds	r3, #60	; 0x3c
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a1c      	ldr	r2, [pc, #112]	; (8004aa4 <USB_EP0_OutStart+0x8c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d90a      	bls.n	8004a4e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a48:	d101      	bne.n	8004a4e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e024      	b.n	8004a98 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a54:	461a      	mov	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7c:	f043 0318 	orr.w	r3, r3, #24
 8004a80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a94:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	4f54300a 	.word	0x4f54300a

08004aa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <USB_CoreReset+0x64>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e01b      	b.n	8004afe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	daf2      	bge.n	8004ab4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f043 0201 	orr.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <USB_CoreReset+0x64>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e006      	b.n	8004afe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d0f0      	beq.n	8004ade <USB_CoreReset+0x36>

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	00030d40 	.word	0x00030d40

08004b10 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004b1c:	f44f 701d 	mov.w	r0, #628	; 0x274
 8004b20:	f003 fd60 	bl	80085e4 <USBD_static_malloc>
 8004b24:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d105      	bne.n	8004b38 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004b34:	2302      	movs	r3, #2
 8004b36:	e034      	b.n	8004ba2 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	7c1b      	ldrb	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d115      	bne.n	8004b74 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	2101      	movs	r1, #1
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f003 fafd 	bl	8008150 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b62:	2202      	movs	r2, #2
 8004b64:	2181      	movs	r1, #129	; 0x81
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f003 faf2 	bl	8008150 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	871a      	strh	r2, [r3, #56]	; 0x38
 8004b72:	e012      	b.n	8004b9a <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004b74:	2340      	movs	r3, #64	; 0x40
 8004b76:	2202      	movs	r2, #2
 8004b78:	2101      	movs	r1, #1
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f003 fae8 	bl	8008150 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004b88:	2340      	movs	r3, #64	; 0x40
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	2181      	movs	r1, #129	; 0x81
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f003 fade 	bl	8008150 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f999 	bl	8004ed2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f003 fb07 	bl	80081cc <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8004bc6:	2181      	movs	r1, #129	; 0x81
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f003 faff 	bl	80081cc <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00c      	beq.n	8004bf8 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f9d5 	bl	8004f8e <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bea:	4618      	mov	r0, r3
 8004bec:	f003 fd08 	bl	8008600 <USBD_static_free>
    pdev->pClassData = NULL;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c14:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e0db      	b.n	8004de0 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d04e      	beq.n	8004cd2 <USBD_MSC_Setup+0xce>
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	f040 80cb 	bne.w	8004dd0 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	785b      	ldrb	r3, [r3, #1]
 8004c3e:	2bfe      	cmp	r3, #254	; 0xfe
 8004c40:	d002      	beq.n	8004c48 <USBD_MSC_Setup+0x44>
 8004c42:	2bff      	cmp	r3, #255	; 0xff
 8004c44:	d025      	beq.n	8004c92 <USBD_MSC_Setup+0x8e>
 8004c46:	e03c      	b.n	8004cc2 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	885b      	ldrh	r3, [r3, #2]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d119      	bne.n	8004c84 <USBD_MSC_Setup+0x80>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	88db      	ldrh	r3, [r3, #6]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d115      	bne.n	8004c84 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	da10      	bge.n	8004c84 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	4798      	blx	r3
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461a      	mov	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2201      	movs	r2, #1
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f002 fe3d 	bl	80078fa <USBD_CtlSendData>
 8004c80:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c82:	e025      	b.n	8004cd0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004c84:	6839      	ldr	r1, [r7, #0]
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f002 fdc6 	bl	8007818 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	75fb      	strb	r3, [r7, #23]
          break;
 8004c90:	e01e      	b.n	8004cd0 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	885b      	ldrh	r3, [r3, #2]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10c      	bne.n	8004cb4 <USBD_MSC_Setup+0xb0>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	88db      	ldrh	r3, [r3, #6]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	db03      	blt.n	8004cb4 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f948 	bl	8004f42 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cb2:	e00d      	b.n	8004cd0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004cb4:	6839      	ldr	r1, [r7, #0]
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f002 fdae 	bl	8007818 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	75fb      	strb	r3, [r7, #23]
          break;
 8004cc0:	e006      	b.n	8004cd0 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8004cc2:	6839      	ldr	r1, [r7, #0]
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f002 fda7 	bl	8007818 <USBD_CtlError>
          ret = USBD_FAIL;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8004cce:	bf00      	nop
      }
      break;
 8004cd0:	e085      	b.n	8004dde <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	2b0b      	cmp	r3, #11
 8004cd8:	d871      	bhi.n	8004dbe <USBD_MSC_Setup+0x1ba>
 8004cda:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <USBD_MSC_Setup+0xdc>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004d11 	.word	0x08004d11
 8004ce4:	08004d8d 	.word	0x08004d8d
 8004ce8:	08004dbf 	.word	0x08004dbf
 8004cec:	08004dbf 	.word	0x08004dbf
 8004cf0:	08004dbf 	.word	0x08004dbf
 8004cf4:	08004dbf 	.word	0x08004dbf
 8004cf8:	08004dbf 	.word	0x08004dbf
 8004cfc:	08004dbf 	.word	0x08004dbf
 8004d00:	08004dbf 	.word	0x08004dbf
 8004d04:	08004dbf 	.word	0x08004dbf
 8004d08:	08004d3b 	.word	0x08004d3b
 8004d0c:	08004d65 	.word	0x08004d65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d107      	bne.n	8004d2c <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004d1c:	f107 030e 	add.w	r3, r7, #14
 8004d20:	2202      	movs	r2, #2
 8004d22:	4619      	mov	r1, r3
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f002 fde8 	bl	80078fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d2a:	e050      	b.n	8004dce <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8004d2c:	6839      	ldr	r1, [r7, #0]
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f002 fd72 	bl	8007818 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d34:	2303      	movs	r3, #3
 8004d36:	75fb      	strb	r3, [r7, #23]
          break;
 8004d38:	e049      	b.n	8004dce <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d107      	bne.n	8004d56 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f002 fdd3 	bl	80078fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d54:	e03b      	b.n	8004dce <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8004d56:	6839      	ldr	r1, [r7, #0]
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f002 fd5d 	bl	8007818 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	75fb      	strb	r3, [r7, #23]
          break;
 8004d62:	e034      	b.n	8004dce <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d106      	bne.n	8004d7e <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	885b      	ldrh	r3, [r3, #2]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d7c:	e027      	b.n	8004dce <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f002 fd49 	bl	8007818 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d86:	2303      	movs	r3, #3
 8004d88:	75fb      	strb	r3, [r7, #23]
          break;
 8004d8a:	e020      	b.n	8004dce <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d119      	bne.n	8004dcc <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	885b      	ldrh	r3, [r3, #2]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d115      	bne.n	8004dcc <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	889b      	ldrh	r3, [r3, #4]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f003 fa45 	bl	8008238 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	889b      	ldrh	r3, [r3, #4]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fa82 	bl	80052c0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8004dbc:	e006      	b.n	8004dcc <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 8004dbe:	6839      	ldr	r1, [r7, #0]
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f002 fd29 	bl	8007818 <USBD_CtlError>
          ret = USBD_FAIL;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8004dca:	e000      	b.n	8004dce <USBD_MSC_Setup+0x1ca>
          break;
 8004dcc:	bf00      	nop
      }
      break;
 8004dce:	e006      	b.n	8004dde <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 8004dd0:	6839      	ldr	r1, [r7, #0]
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f002 fd20 	bl	8007818 <USBD_CtlError>
      ret = USBD_FAIL;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	75fb      	strb	r3, [r7, #23]
      break;
 8004ddc:	bf00      	nop
  }

  return (uint8_t)ret;
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f8dc 	bl	8004fb6 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f902 	bl	8005022 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8004e36:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	20000044 	.word	0x20000044

08004e48 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8004e56:	4b03      	ldr	r3, [pc, #12]	; (8004e64 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	20000064 	.word	0x20000064

08004e68 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8004e76:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	20000084 	.word	0x20000084

08004e88 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	220a      	movs	r2, #10
 8004e94:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8004e96:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	200000a4 	.word	0x200000a4

08004ea8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e004      	b.n	8004ec6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ee0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d028      	beq.n	8004f3a <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2000      	movs	r0, #0
 8004f16:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8004f18:	2101      	movs	r1, #1
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f003 f98c 	bl	8008238 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8004f20:	2181      	movs	r1, #129	; 0x81
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f003 f988 	bl	8008238 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004f2e:	231f      	movs	r3, #31
 8004f30:	2101      	movs	r1, #1
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f003 fabc 	bl	80084b0 <USBD_LL_PrepareReceive>
 8004f38:	e000      	b.n	8004f3c <MSC_BOT_Init+0x6a>
    return;
 8004f3a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f50:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d016      	beq.n	8004f86 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8004f64:	2181      	movs	r1, #129	; 0x81
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f003 f9d2 	bl	8008310 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f003 f9ce 	bl	8008310 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004f7a:	231f      	movs	r3, #31
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f003 fa96 	bl	80084b0 <USBD_LL_PrepareReceive>
 8004f84:	e000      	b.n	8004f88 <MSC_BOT_Reset+0x46>
    return;
 8004f86:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f9c:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	721a      	strb	r2, [r3, #8]
  }
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fc8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d020      	beq.n	8005012 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	7a1b      	ldrb	r3, [r3, #8]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d005      	beq.n	8004fe4 <MSC_BOT_DataIn+0x2e>
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	db1c      	blt.n	8005016 <MSC_BOT_DataIn+0x60>
 8004fdc:	3b03      	subs	r3, #3
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d819      	bhi.n	8005016 <MSC_BOT_DataIn+0x60>
 8004fe2:	e011      	b.n	8005008 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f992 	bl	800531c <SCSI_ProcessCmd>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da0d      	bge.n	800501a <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004ffe:	2101      	movs	r1, #1
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f8fb 	bl	80051fc <MSC_BOT_SendCSW>
      }
      break;
 8005006:	e008      	b.n	800501a <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005008:	2100      	movs	r1, #0
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f8f6 	bl	80051fc <MSC_BOT_SendCSW>
      break;
 8005010:	e004      	b.n	800501c <MSC_BOT_DataIn+0x66>
    return;
 8005012:	bf00      	nop
 8005014:	e002      	b.n	800501c <MSC_BOT_DataIn+0x66>

    default:
      break;
 8005016:	bf00      	nop
 8005018:	e000      	b.n	800501c <MSC_BOT_DataIn+0x66>
      break;
 800501a:	bf00      	nop
  }
}
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005034:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01c      	beq.n	8005076 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	7a1b      	ldrb	r3, [r3, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <MSC_BOT_DataOut+0x28>
 8005044:	2b01      	cmp	r3, #1
 8005046:	d004      	beq.n	8005052 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8005048:	e018      	b.n	800507c <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f81a 	bl	8005084 <MSC_BOT_CBW_Decode>
      break;
 8005050:	e014      	b.n	800507c <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800505e:	461a      	mov	r2, r3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f95b 	bl	800531c <SCSI_ProcessCmd>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	da06      	bge.n	800507a <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800506c:	2101      	movs	r1, #1
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f8c4 	bl	80051fc <MSC_BOT_SendCSW>
      break;
 8005074:	e001      	b.n	800507a <MSC_BOT_DataOut+0x58>
    return;
 8005076:	bf00      	nop
 8005078:	e000      	b.n	800507c <MSC_BOT_DataOut+0x5a>
      break;
 800507a:	bf00      	nop
  }
}
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005092:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d077      	beq.n	800518a <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80050b2:	2101      	movs	r1, #1
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f003 fa33 	bl	8008520 <USBD_LL_GetRxDataSize>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b1f      	cmp	r3, #31
 80050be:	d114      	bne.n	80050ea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80050c6:	4a34      	ldr	r2, [pc, #208]	; (8005198 <MSC_BOT_CBW_Decode+0x114>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d10e      	bne.n	80050ea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d809      	bhi.n	80050ea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d004      	beq.n	80050ea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80050e6:	2b10      	cmp	r3, #16
 80050e8:	d90e      	bls.n	8005108 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80050f0:	2320      	movs	r3, #32
 80050f2:	2205      	movs	r2, #5
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fdbc 	bl	8005c72 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2202      	movs	r2, #2
 80050fe:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f8ab 	bl	800525c <MSC_BOT_Abort>
 8005106:	e043      	b.n	8005190 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8005114:	461a      	mov	r2, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f900 	bl	800531c <SCSI_ProcessCmd>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	da0c      	bge.n	800513c <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	7a1b      	ldrb	r3, [r3, #8]
 8005126:	2b05      	cmp	r3, #5
 8005128:	d104      	bne.n	8005134 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800512a:	2101      	movs	r1, #1
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f865 	bl	80051fc <MSC_BOT_SendCSW>
 8005132:	e02d      	b.n	8005190 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f891 	bl	800525c <MSC_BOT_Abort>
 800513a:	e029      	b.n	8005190 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	7a1b      	ldrb	r3, [r3, #8]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d024      	beq.n	800518e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005148:	2b01      	cmp	r3, #1
 800514a:	d020      	beq.n	800518e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005150:	2b03      	cmp	r3, #3
 8005152:	d01c      	beq.n	800518e <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f103 0110 	add.w	r1, r3, #16
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	461a      	mov	r2, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f817 	bl	800519c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800516e:	e00f      	b.n	8005190 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005178:	2100      	movs	r1, #0
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f83e 	bl	80051fc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005180:	e006      	b.n	8005190 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f86a 	bl	800525c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8005188:	e002      	b.n	8005190 <MSC_BOT_CBW_Decode+0x10c>
    return;
 800518a:	bf00      	nop
 800518c:	e000      	b.n	8005190 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 800518e:	bf00      	nop
    }
  }
}
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	43425355 	.word	0x43425355

0800519c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ae:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4293      	cmp	r3, r2
 80051ba:	bf28      	it	cs
 80051bc:	4613      	movcs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d015      	beq.n	80051f2 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2204      	movs	r2, #4
 80051e2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	2181      	movs	r1, #129	; 0x81
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f003 f928 	bl	8008440 <USBD_LL_Transmit>
 80051f0:	e000      	b.n	80051f4 <MSC_BOT_SendData+0x58>
    return;
 80051f2:	bf00      	nop
}
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800520e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d01b      	beq.n	800524e <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4a0f      	ldr	r2, [pc, #60]	; (8005258 <MSC_BOT_SendCSW+0x5c>)
 800521a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8005232:	230d      	movs	r3, #13
 8005234:	2181      	movs	r1, #129	; 0x81
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f003 f902 	bl	8008440 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8005242:	231f      	movs	r3, #31
 8005244:	2101      	movs	r1, #1
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f003 f932 	bl	80084b0 <USBD_LL_PrepareReceive>
 800524c:	e000      	b.n	8005250 <MSC_BOT_SendCSW+0x54>
    return;
 800524e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	53425355 	.word	0x53425355

0800525c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800526a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d022      	beq.n	80052b8 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10c      	bne.n	8005296 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800528a:	2b00      	cmp	r3, #0
 800528c:	d103      	bne.n	8005296 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800528e:	2101      	movs	r1, #1
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f003 f807 	bl	80082a4 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8005296:	2181      	movs	r1, #129	; 0x81
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f003 f803 	bl	80082a4 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	7a5b      	ldrb	r3, [r3, #9]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d109      	bne.n	80052ba <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80052a6:	2181      	movs	r1, #129	; 0x81
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f002 fffb 	bl	80082a4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80052ae:	2101      	movs	r1, #1
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f002 fff7 	bl	80082a4 <USBD_LL_StallEP>
 80052b6:	e000      	b.n	80052ba <MSC_BOT_Abort+0x5e>
    return;
 80052b8:	bf00      	nop
  }
}
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052d2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d019      	beq.n	800530e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	7a5b      	ldrb	r3, [r3, #9]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d108      	bne.n	80052f4 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80052e2:	2181      	movs	r1, #129	; 0x81
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f002 ffdd 	bl	80082a4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80052ea:	2101      	movs	r1, #1
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f002 ffd9 	bl	80082a4 <USBD_LL_StallEP>
 80052f2:	e00f      	b.n	8005314 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80052f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da0a      	bge.n	8005312 <MSC_BOT_CplClrFeature+0x52>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	7a5b      	ldrb	r3, [r3, #9]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d006      	beq.n	8005312 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005304:	2101      	movs	r1, #1
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff ff78 	bl	80051fc <MSC_BOT_SendCSW>
 800530c:	e002      	b.n	8005314 <MSC_BOT_CplClrFeature+0x54>
    return;
 800530e:	bf00      	nop
 8005310:	e000      	b.n	8005314 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8005312:	bf00      	nop
  }
}
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	460b      	mov	r3, r1
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005330:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8005338:	f04f 33ff 	mov.w	r3, #4294967295
 800533c:	e168      	b.n	8005610 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2baa      	cmp	r3, #170	; 0xaa
 8005344:	f000 8144 	beq.w	80055d0 <SCSI_ProcessCmd+0x2b4>
 8005348:	2baa      	cmp	r3, #170	; 0xaa
 800534a:	f300 8153 	bgt.w	80055f4 <SCSI_ProcessCmd+0x2d8>
 800534e:	2ba8      	cmp	r3, #168	; 0xa8
 8005350:	f000 812c 	beq.w	80055ac <SCSI_ProcessCmd+0x290>
 8005354:	2ba8      	cmp	r3, #168	; 0xa8
 8005356:	f300 814d 	bgt.w	80055f4 <SCSI_ProcessCmd+0x2d8>
 800535a:	2b5a      	cmp	r3, #90	; 0x5a
 800535c:	f300 80c0 	bgt.w	80054e0 <SCSI_ProcessCmd+0x1c4>
 8005360:	2b00      	cmp	r3, #0
 8005362:	f2c0 8147 	blt.w	80055f4 <SCSI_ProcessCmd+0x2d8>
 8005366:	2b5a      	cmp	r3, #90	; 0x5a
 8005368:	f200 8144 	bhi.w	80055f4 <SCSI_ProcessCmd+0x2d8>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <SCSI_ProcessCmd+0x58>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	080054e7 	.word	0x080054e7
 8005378:	080055f5 	.word	0x080055f5
 800537c:	080055f5 	.word	0x080055f5
 8005380:	080054f9 	.word	0x080054f9
 8005384:	080055f5 	.word	0x080055f5
 8005388:	080055f5 	.word	0x080055f5
 800538c:	080055f5 	.word	0x080055f5
 8005390:	080055f5 	.word	0x080055f5
 8005394:	080055f5 	.word	0x080055f5
 8005398:	080055f5 	.word	0x080055f5
 800539c:	080055f5 	.word	0x080055f5
 80053a0:	080055f5 	.word	0x080055f5
 80053a4:	080055f5 	.word	0x080055f5
 80053a8:	080055f5 	.word	0x080055f5
 80053ac:	080055f5 	.word	0x080055f5
 80053b0:	080055f5 	.word	0x080055f5
 80053b4:	080055f5 	.word	0x080055f5
 80053b8:	080055f5 	.word	0x080055f5
 80053bc:	0800550b 	.word	0x0800550b
 80053c0:	080055f5 	.word	0x080055f5
 80053c4:	080055f5 	.word	0x080055f5
 80053c8:	080055f5 	.word	0x080055f5
 80053cc:	080055f5 	.word	0x080055f5
 80053d0:	080055f5 	.word	0x080055f5
 80053d4:	080055f5 	.word	0x080055f5
 80053d8:	080055f5 	.word	0x080055f5
 80053dc:	08005541 	.word	0x08005541
 80053e0:	0800551d 	.word	0x0800551d
 80053e4:	080055f5 	.word	0x080055f5
 80053e8:	080055f5 	.word	0x080055f5
 80053ec:	0800552f 	.word	0x0800552f
 80053f0:	080055f5 	.word	0x080055f5
 80053f4:	080055f5 	.word	0x080055f5
 80053f8:	080055f5 	.word	0x080055f5
 80053fc:	080055f5 	.word	0x080055f5
 8005400:	08005565 	.word	0x08005565
 8005404:	080055f5 	.word	0x080055f5
 8005408:	08005577 	.word	0x08005577
 800540c:	080055f5 	.word	0x080055f5
 8005410:	080055f5 	.word	0x080055f5
 8005414:	0800559b 	.word	0x0800559b
 8005418:	080055f5 	.word	0x080055f5
 800541c:	080055bf 	.word	0x080055bf
 8005420:	080055f5 	.word	0x080055f5
 8005424:	080055f5 	.word	0x080055f5
 8005428:	080055f5 	.word	0x080055f5
 800542c:	080055f5 	.word	0x080055f5
 8005430:	080055e3 	.word	0x080055e3
 8005434:	080055f5 	.word	0x080055f5
 8005438:	080055f5 	.word	0x080055f5
 800543c:	080055f5 	.word	0x080055f5
 8005440:	080055f5 	.word	0x080055f5
 8005444:	080055f5 	.word	0x080055f5
 8005448:	080055f5 	.word	0x080055f5
 800544c:	080055f5 	.word	0x080055f5
 8005450:	080055f5 	.word	0x080055f5
 8005454:	080055f5 	.word	0x080055f5
 8005458:	080055f5 	.word	0x080055f5
 800545c:	080055f5 	.word	0x080055f5
 8005460:	080055f5 	.word	0x080055f5
 8005464:	080055f5 	.word	0x080055f5
 8005468:	080055f5 	.word	0x080055f5
 800546c:	080055f5 	.word	0x080055f5
 8005470:	080055f5 	.word	0x080055f5
 8005474:	080055f5 	.word	0x080055f5
 8005478:	080055f5 	.word	0x080055f5
 800547c:	080055f5 	.word	0x080055f5
 8005480:	080055f5 	.word	0x080055f5
 8005484:	080055f5 	.word	0x080055f5
 8005488:	080055f5 	.word	0x080055f5
 800548c:	080055f5 	.word	0x080055f5
 8005490:	080055f5 	.word	0x080055f5
 8005494:	080055f5 	.word	0x080055f5
 8005498:	080055f5 	.word	0x080055f5
 800549c:	080055f5 	.word	0x080055f5
 80054a0:	080055f5 	.word	0x080055f5
 80054a4:	080055f5 	.word	0x080055f5
 80054a8:	080055f5 	.word	0x080055f5
 80054ac:	080055f5 	.word	0x080055f5
 80054b0:	080055f5 	.word	0x080055f5
 80054b4:	080055f5 	.word	0x080055f5
 80054b8:	080055f5 	.word	0x080055f5
 80054bc:	080055f5 	.word	0x080055f5
 80054c0:	080055f5 	.word	0x080055f5
 80054c4:	080055f5 	.word	0x080055f5
 80054c8:	080055f5 	.word	0x080055f5
 80054cc:	080055f5 	.word	0x080055f5
 80054d0:	080055f5 	.word	0x080055f5
 80054d4:	080055f5 	.word	0x080055f5
 80054d8:	080055f5 	.word	0x080055f5
 80054dc:	08005553 	.word	0x08005553
 80054e0:	2b9e      	cmp	r3, #158	; 0x9e
 80054e2:	d051      	beq.n	8005588 <SCSI_ProcessCmd+0x26c>
 80054e4:	e086      	b.n	80055f4 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80054e6:	7afb      	ldrb	r3, [r7, #11]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	4619      	mov	r1, r3
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f893 	bl	8005618 <SCSI_TestUnitReady>
 80054f2:	4603      	mov	r3, r0
 80054f4:	75fb      	strb	r3, [r7, #23]
      break;
 80054f6:	e089      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80054f8:	7afb      	ldrb	r3, [r7, #11]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	4619      	mov	r1, r3
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fb38 	bl	8005b74 <SCSI_RequestSense>
 8005504:	4603      	mov	r3, r0
 8005506:	75fb      	strb	r3, [r7, #23]
      break;
 8005508:	e080      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800550a:	7afb      	ldrb	r3, [r7, #11]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	4619      	mov	r1, r3
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f8d1 	bl	80056b8 <SCSI_Inquiry>
 8005516:	4603      	mov	r3, r0
 8005518:	75fb      	strb	r3, [r7, #23]
      break;
 800551a:	e077      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800551c:	7afb      	ldrb	r3, [r7, #11]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4619      	mov	r1, r3
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fbec 	bl	8005d00 <SCSI_StartStopUnit>
 8005528:	4603      	mov	r3, r0
 800552a:	75fb      	strb	r3, [r7, #23]
      break;
 800552c:	e06e      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800552e:	7afb      	ldrb	r3, [r7, #11]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4619      	mov	r1, r3
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 fc34 	bl	8005da2 <SCSI_AllowPreventRemovable>
 800553a:	4603      	mov	r3, r0
 800553c:	75fb      	strb	r3, [r7, #23]
      break;
 800553e:	e065      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8005540:	7afb      	ldrb	r3, [r7, #11]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	4619      	mov	r1, r3
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 fabc 	bl	8005ac4 <SCSI_ModeSense6>
 800554c:	4603      	mov	r3, r0
 800554e:	75fb      	strb	r3, [r7, #23]
      break;
 8005550:	e05c      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8005552:	7afb      	ldrb	r3, [r7, #11]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	4619      	mov	r1, r3
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fadf 	bl	8005b1c <SCSI_ModeSense10>
 800555e:	4603      	mov	r3, r0
 8005560:	75fb      	strb	r3, [r7, #23]
      break;
 8005562:	e053      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005564:	7afb      	ldrb	r3, [r7, #11]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	4619      	mov	r1, r3
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 fa37 	bl	80059de <SCSI_ReadFormatCapacity>
 8005570:	4603      	mov	r3, r0
 8005572:	75fb      	strb	r3, [r7, #23]
      break;
 8005574:	e04a      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8005576:	7afb      	ldrb	r3, [r7, #11]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	4619      	mov	r1, r3
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f90f 	bl	80057a0 <SCSI_ReadCapacity10>
 8005582:	4603      	mov	r3, r0
 8005584:	75fb      	strb	r3, [r7, #23]
      break;
 8005586:	e041      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8005588:	7afb      	ldrb	r3, [r7, #11]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	4619      	mov	r1, r3
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f97b 	bl	800588a <SCSI_ReadCapacity16>
 8005594:	4603      	mov	r3, r0
 8005596:	75fb      	strb	r3, [r7, #23]
      break;
 8005598:	e038      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800559a:	7afb      	ldrb	r3, [r7, #11]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	4619      	mov	r1, r3
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 fc27 	bl	8005df4 <SCSI_Read10>
 80055a6:	4603      	mov	r3, r0
 80055a8:	75fb      	strb	r3, [r7, #23]
      break;
 80055aa:	e02f      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80055ac:	7afb      	ldrb	r3, [r7, #11]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	4619      	mov	r1, r3
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 fcbe 	bl	8005f34 <SCSI_Read12>
 80055b8:	4603      	mov	r3, r0
 80055ba:	75fb      	strb	r3, [r7, #23]
      break;
 80055bc:	e026      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80055be:	7afb      	ldrb	r3, [r7, #11]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	4619      	mov	r1, r3
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fd60 	bl	800608a <SCSI_Write10>
 80055ca:	4603      	mov	r3, r0
 80055cc:	75fb      	strb	r3, [r7, #23]
      break;
 80055ce:	e01d      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80055d0:	7afb      	ldrb	r3, [r7, #11]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	4619      	mov	r1, r3
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fe1c 	bl	8006214 <SCSI_Write12>
 80055dc:	4603      	mov	r3, r0
 80055de:	75fb      	strb	r3, [r7, #23]
      break;
 80055e0:	e014      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80055e2:	7afb      	ldrb	r3, [r7, #11]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	4619      	mov	r1, r3
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 fee8 	bl	80063be <SCSI_Verify10>
 80055ee:	4603      	mov	r3, r0
 80055f0:	75fb      	strb	r3, [r7, #23]
      break;
 80055f2:	e00b      	b.n	800560c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80055f4:	7af9      	ldrb	r1, [r7, #11]
 80055f6:	2320      	movs	r3, #32
 80055f8:	2205      	movs	r2, #5
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fb39 	bl	8005c72 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2202      	movs	r2, #2
 8005604:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8005606:	23ff      	movs	r3, #255	; 0xff
 8005608:	75fb      	strb	r3, [r7, #23]
      break;
 800560a:	bf00      	nop
  }

  return ret;
 800560c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	460b      	mov	r3, r1
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800562c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8005634:	f04f 33ff 	mov.w	r3, #4294967295
 8005638:	e03a      	b.n	80056b0 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800564a:	2320      	movs	r3, #32
 800564c:	2205      	movs	r2, #5
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fb0f 	bl	8005c72 <SCSI_SenseCode>

    return -1;
 8005654:	f04f 33ff 	mov.w	r3, #4294967295
 8005658:	e02a      	b.n	80056b0 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005660:	2b02      	cmp	r3, #2
 8005662:	d10b      	bne.n	800567c <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005664:	7af9      	ldrb	r1, [r7, #11]
 8005666:	233a      	movs	r3, #58	; 0x3a
 8005668:	2202      	movs	r2, #2
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fb01 	bl	8005c72 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2205      	movs	r2, #5
 8005674:	721a      	strb	r2, [r3, #8]
    return -1;
 8005676:	f04f 33ff 	mov.w	r3, #4294967295
 800567a:	e019      	b.n	80056b0 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	7afa      	ldrb	r2, [r7, #11]
 8005686:	4610      	mov	r0, r2
 8005688:	4798      	blx	r3
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00b      	beq.n	80056a8 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005690:	7af9      	ldrb	r1, [r7, #11]
 8005692:	233a      	movs	r3, #58	; 0x3a
 8005694:	2202      	movs	r2, #2
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 faeb 	bl	8005c72 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2205      	movs	r2, #5
 80056a0:	721a      	strb	r2, [r3, #8]

    return -1;
 80056a2:	f04f 33ff 	mov.w	r3, #4294967295
 80056a6:	e003      	b.n	80056b0 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2200      	movs	r2, #0
 80056ac:	60da      	str	r2, [r3, #12]

  return 0;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	460b      	mov	r3, r1
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056cc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <SCSI_Inquiry+0x22>
  {
    return -1;
 80056d4:	f04f 33ff 	mov.w	r3, #4294967295
 80056d8:	e05a      	b.n	8005790 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80056ea:	2320      	movs	r3, #32
 80056ec:	2205      	movs	r2, #5
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fabf 	bl	8005c72 <SCSI_SenseCode>
    return -1;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	e04a      	b.n	8005790 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3301      	adds	r3, #1
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d020      	beq.n	800574a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3302      	adds	r3, #2
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d105      	bne.n	800571e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8005712:	2206      	movs	r2, #6
 8005714:	4920      	ldr	r1, [pc, #128]	; (8005798 <SCSI_Inquiry+0xe0>)
 8005716:	69b8      	ldr	r0, [r7, #24]
 8005718:	f000 ffb4 	bl	8006684 <SCSI_UpdateBotData>
 800571c:	e037      	b.n	800578e <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3302      	adds	r3, #2
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b80      	cmp	r3, #128	; 0x80
 8005726:	d105      	bne.n	8005734 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005728:	2208      	movs	r2, #8
 800572a:	491c      	ldr	r1, [pc, #112]	; (800579c <SCSI_Inquiry+0xe4>)
 800572c:	69b8      	ldr	r0, [r7, #24]
 800572e:	f000 ffa9 	bl	8006684 <SCSI_UpdateBotData>
 8005732:	e02c      	b.n	800578e <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800573a:	2324      	movs	r3, #36	; 0x24
 800573c:	2205      	movs	r2, #5
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fa97 	bl	8005c72 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8005744:	f04f 33ff 	mov.w	r3, #4294967295
 8005748:	e022      	b.n	8005790 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005750:	69d9      	ldr	r1, [r3, #28]
 8005752:	7afa      	ldrb	r2, [r7, #11]
 8005754:	4613      	mov	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	3304      	adds	r3, #4
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	b29b      	uxth	r3, r3
 8005768:	3305      	adds	r3, #5
 800576a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3304      	adds	r3, #4
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	8bfa      	ldrh	r2, [r7, #30]
 8005776:	429a      	cmp	r2, r3
 8005778:	d303      	bcc.n	8005782 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3304      	adds	r3, #4
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8005782:	8bfb      	ldrh	r3, [r7, #30]
 8005784:	461a      	mov	r2, r3
 8005786:	6979      	ldr	r1, [r7, #20]
 8005788:	69b8      	ldr	r0, [r7, #24]
 800578a:	f000 ff7b 	bl	8006684 <SCSI_UpdateBotData>
  }

  return 0;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	200000b0 	.word	0x200000b0
 800579c:	200000b8 	.word	0x200000b8

080057a0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	460b      	mov	r3, r1
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d102      	bne.n	80057c2 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 80057bc:	f04f 33ff 	mov.w	r3, #4294967295
 80057c0:	e05f      	b.n	8005882 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80057d6:	7af8      	ldrb	r0, [r7, #11]
 80057d8:	4798      	blx	r3
 80057da:	4603      	mov	r3, r0
 80057dc:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80057de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d104      	bne.n	80057f0 <SCSI_ReadCapacity10+0x50>
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d108      	bne.n	8005802 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80057f0:	7af9      	ldrb	r1, [r7, #11]
 80057f2:	233a      	movs	r3, #58	; 0x3a
 80057f4:	2202      	movs	r2, #2
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 fa3b 	bl	8005c72 <SCSI_SenseCode>
    return -1;
 80057fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005800:	e03f      	b.n	8005882 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005808:	3b01      	subs	r3, #1
 800580a:	0e1b      	lsrs	r3, r3, #24
 800580c:	b2da      	uxtb	r2, r3
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005818:	3b01      	subs	r3, #1
 800581a:	0c1b      	lsrs	r3, r3, #16
 800581c:	b2da      	uxtb	r2, r3
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005828:	3b01      	subs	r3, #1
 800582a:	0a1b      	lsrs	r3, r3, #8
 800582c:	b2da      	uxtb	r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005838:	b2db      	uxtb	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b2da      	uxtb	r2, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005848:	161b      	asrs	r3, r3, #24
 800584a:	b2da      	uxtb	r2, r3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005856:	141b      	asrs	r3, r3, #16
 8005858:	b2da      	uxtb	r2, r3
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005864:	0a1b      	lsrs	r3, r3, #8
 8005866:	b29b      	uxth	r3, r3
 8005868:	b2da      	uxtb	r2, r3
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005874:	b2da      	uxtb	r2, r3
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2208      	movs	r2, #8
 800587e:	60da      	str	r2, [r3, #12]

  return 0;
 8005880:	2300      	movs	r3, #0

}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b088      	sub	sp, #32
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	460b      	mov	r3, r1
 8005894:	607a      	str	r2, [r7, #4]
 8005896:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800589e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 80058a6:	f04f 33ff 	mov.w	r3, #4294967295
 80058aa:	e094      	b.n	80059d6 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80058c0:	7af8      	ldrb	r0, [r7, #11]
 80058c2:	4798      	blx	r3
 80058c4:	4603      	mov	r3, r0
 80058c6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80058c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <SCSI_ReadCapacity16+0x50>
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d108      	bne.n	80058ec <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80058da:	7af9      	ldrb	r1, [r7, #11]
 80058dc:	233a      	movs	r3, #58	; 0x3a
 80058de:	2202      	movs	r2, #2
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f9c6 	bl	8005c72 <SCSI_SenseCode>
    return -1;
 80058e6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ea:	e074      	b.n	80059d6 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	330a      	adds	r3, #10
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	330b      	adds	r3, #11
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80058fc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	330c      	adds	r3, #12
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005906:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	320d      	adds	r2, #13
 800590c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800590e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005914:	2300      	movs	r3, #0
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e007      	b.n	800592a <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 800591a:	7ffb      	ldrb	r3, [r7, #31]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4413      	add	r3, r2
 8005920:	2200      	movs	r2, #0
 8005922:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005924:	7ffb      	ldrb	r3, [r7, #31]
 8005926:	3301      	adds	r3, #1
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	7ffa      	ldrb	r2, [r7, #31]
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	429a      	cmp	r2, r3
 8005932:	d3f2      	bcc.n	800591a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800593a:	3b01      	subs	r3, #1
 800593c:	0e1b      	lsrs	r3, r3, #24
 800593e:	b2da      	uxtb	r2, r3
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800594a:	3b01      	subs	r3, #1
 800594c:	0c1b      	lsrs	r3, r3, #16
 800594e:	b2da      	uxtb	r2, r3
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800595a:	3b01      	subs	r3, #1
 800595c:	0a1b      	lsrs	r3, r3, #8
 800595e:	b2da      	uxtb	r2, r3
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800596a:	b2db      	uxtb	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b2da      	uxtb	r2, r3
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800597a:	161b      	asrs	r3, r3, #24
 800597c:	b2da      	uxtb	r2, r3
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005988:	141b      	asrs	r3, r3, #16
 800598a:	b2da      	uxtb	r2, r3
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005996:	0a1b      	lsrs	r3, r3, #8
 8005998:	b29b      	uxth	r3, r3
 800599a:	b2da      	uxtb	r2, r3
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	330a      	adds	r3, #10
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	330b      	adds	r3, #11
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80059bc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	330c      	adds	r3, #12
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80059c6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	320d      	adds	r2, #13
 80059cc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80059ce:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	60da      	str	r2, [r3, #12]

  return 0;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3720      	adds	r7, #32
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b088      	sub	sp, #32
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	460b      	mov	r3, r1
 80059e8:	607a      	str	r2, [r7, #4]
 80059ea:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059f2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80059fa:	f04f 33ff 	mov.w	r3, #4294967295
 80059fe:	e05c      	b.n	8005aba <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f107 0214 	add.w	r2, r7, #20
 8005a0c:	f107 0110 	add.w	r1, r7, #16
 8005a10:	7af8      	ldrb	r0, [r7, #11]
 8005a12:	4798      	blx	r3
 8005a14:	4603      	mov	r3, r0
 8005a16:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d104      	bne.n	8005a2a <SCSI_ReadFormatCapacity+0x4c>
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d108      	bne.n	8005a3c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005a2a:	7af9      	ldrb	r1, [r7, #11]
 8005a2c:	233a      	movs	r3, #58	; 0x3a
 8005a2e:	2202      	movs	r2, #2
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f91e 	bl	8005c72 <SCSI_SenseCode>
    return -1;
 8005a36:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3a:	e03e      	b.n	8005aba <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	83fb      	strh	r3, [r7, #30]
 8005a40:	e007      	b.n	8005a52 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8005a42:	8bfb      	ldrh	r3, [r7, #30]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4413      	add	r3, r2
 8005a48:	2200      	movs	r2, #0
 8005a4a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8005a4c:	8bfb      	ldrh	r3, [r7, #30]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	83fb      	strh	r3, [r7, #30]
 8005a52:	8bfb      	ldrh	r3, [r7, #30]
 8005a54:	2b0b      	cmp	r3, #11
 8005a56:	d9f4      	bls.n	8005a42 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	0e1b      	lsrs	r3, r3, #24
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	0c1b      	lsrs	r3, r3, #16
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2202      	movs	r2, #2
 8005a92:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005a94:	8abb      	ldrh	r3, [r7, #20]
 8005a96:	141b      	asrs	r3, r3, #16
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8005a9e:	8abb      	ldrh	r3, [r7, #20]
 8005aa0:	0a1b      	lsrs	r3, r3, #8
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005aaa:	8abb      	ldrh	r3, [r7, #20]
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	220c      	movs	r2, #12
 8005ab6:	60da      	str	r2, [r3, #12]

  return 0;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3720      	adds	r7, #32
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	460b      	mov	r3, r1
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ad8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005ada:	2317      	movs	r3, #23
 8005adc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d102      	bne.n	8005aea <SCSI_ModeSense6+0x26>
  {
    return -1;
 8005ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae8:	e011      	b.n	8005b0e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3304      	adds	r3, #4
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	8afa      	ldrh	r2, [r7, #22]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d303      	bcc.n	8005b00 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3304      	adds	r3, #4
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005b00:	8afb      	ldrh	r3, [r7, #22]
 8005b02:	461a      	mov	r2, r3
 8005b04:	4904      	ldr	r1, [pc, #16]	; (8005b18 <SCSI_ModeSense6+0x54>)
 8005b06:	6938      	ldr	r0, [r7, #16]
 8005b08:	f000 fdbc 	bl	8006684 <SCSI_UpdateBotData>

  return 0;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200000c0 	.word	0x200000c0

08005b1c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	460b      	mov	r3, r1
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b30:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8005b32:	231b      	movs	r3, #27
 8005b34:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <SCSI_ModeSense10+0x26>
  {
    return -1;
 8005b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b40:	e011      	b.n	8005b66 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3308      	adds	r3, #8
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	8afa      	ldrh	r2, [r7, #22]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d303      	bcc.n	8005b58 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3308      	adds	r3, #8
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8005b58:	8afb      	ldrh	r3, [r7, #22]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	4904      	ldr	r1, [pc, #16]	; (8005b70 <SCSI_ModeSense10+0x54>)
 8005b5e:	6938      	ldr	r0, [r7, #16]
 8005b60:	f000 fd90 	bl	8006684 <SCSI_UpdateBotData>

  return 0;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	200000d8 	.word	0x200000d8

08005b74 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b88:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <SCSI_RequestSense+0x22>
  {
    return -1;
 8005b90:	f04f 33ff 	mov.w	r3, #4294967295
 8005b94:	e069      	b.n	8005c6a <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005ba6:	2320      	movs	r3, #32
 8005ba8:	2205      	movs	r2, #5
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 f861 	bl	8005c72 <SCSI_SenseCode>
    return -1;
 8005bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb4:	e059      	b.n	8005c6a <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	75fb      	strb	r3, [r7, #23]
 8005bba:	e007      	b.n	8005bcc <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	75fb      	strb	r3, [r7, #23]
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	2b11      	cmp	r3, #17
 8005bd0:	d9f4      	bls.n	8005bbc <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2270      	movs	r2, #112	; 0x70
 8005bd6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	220c      	movs	r2, #12
 8005bdc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d02e      	beq.n	8005c4c <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	3248      	adds	r2, #72	; 0x48
 8005bfa:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	3348      	adds	r3, #72	; 0x48
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	4413      	add	r3, r2
 8005c10:	791a      	ldrb	r2, [r3, #4]
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	3348      	adds	r3, #72	; 0x48
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	4413      	add	r3, r2
 8005c24:	795a      	ldrb	r2, [r3, #5]
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005c30:	3301      	adds	r3, #1
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d103      	bne.n	8005c4c <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2212      	movs	r2, #18
 8005c50:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3304      	adds	r3, #4
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b12      	cmp	r3, #18
 8005c5a:	d805      	bhi.n	8005c68 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	4608      	mov	r0, r1
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	461a      	mov	r2, r3
 8005c80:	4603      	mov	r3, r0
 8005c82:	70fb      	strb	r3, [r7, #3]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70bb      	strb	r3, [r7, #2]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c92:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d02c      	beq.n	8005cf4 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3248      	adds	r2, #72	; 0x48
 8005ca6:	78b9      	ldrb	r1, [r7, #2]
 8005ca8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	3348      	adds	r3, #72	; 0x48
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4413      	add	r3, r2
 8005cba:	787a      	ldrb	r2, [r7, #1]
 8005cbc:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	3348      	adds	r3, #72	; 0x48
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	4413      	add	r3, r2
 8005ccc:	2200      	movs	r2, #0
 8005cce:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d105      	bne.n	8005cf6 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8005cf2:	e000      	b.n	8005cf6 <SCSI_SenseCode+0x84>
    return;
 8005cf4:	bf00      	nop
  }
}
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d14:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8005d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d20:	e03b      	b.n	8005d9a <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d10f      	bne.n	8005d4c <SCSI_StartStopUnit+0x4c>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d108      	bne.n	8005d4c <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8005d3a:	7af9      	ldrb	r1, [r7, #11]
 8005d3c:	2324      	movs	r3, #36	; 0x24
 8005d3e:	2205      	movs	r2, #5
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff ff96 	bl	8005c72 <SCSI_SenseCode>

    return -1;
 8005d46:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4a:	e026      	b.n	8005d9a <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d104      	bne.n	8005d64 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005d62:	e016      	b.n	8005d92 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d104      	bne.n	8005d7c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005d7a:	e00a      	b.n	8005d92 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d103      	bne.n	8005d92 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2200      	movs	r2, #0
 8005d96:	60da      	str	r2, [r3, #12]

  return 0;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b087      	sub	sp, #28
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	460b      	mov	r3, r1
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005db6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc2:	e011      	b.n	8005de8 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d104      	bne.n	8005dd8 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005dd6:	e003      	b.n	8005de0 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2200      	movs	r2, #0
 8005de4:	60da      	str	r2, [r3, #12]

  return 0;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <SCSI_Read10+0x22>
  {
    return -1;
 8005e10:	f04f 33ff 	mov.w	r3, #4294967295
 8005e14:	e08a      	b.n	8005f2c <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	7a1b      	ldrb	r3, [r3, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d17c      	bne.n	8005f18 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005e24:	b25b      	sxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	db0a      	blt.n	8005e40 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005e30:	2320      	movs	r3, #32
 8005e32:	2205      	movs	r2, #5
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff ff1c 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 8005e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e3e:	e075      	b.n	8005f2c <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d108      	bne.n	8005e5c <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005e4a:	7af9      	ldrb	r1, [r7, #11]
 8005e4c:	233a      	movs	r3, #58	; 0x3a
 8005e4e:	2202      	movs	r2, #2
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f7ff ff0e 	bl	8005c72 <SCSI_SenseCode>

      return -1;
 8005e56:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5a:	e067      	b.n	8005f2c <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	7afa      	ldrb	r2, [r7, #11]
 8005e66:	4610      	mov	r0, r2
 8005e68:	4798      	blx	r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d008      	beq.n	8005e82 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005e70:	7af9      	ldrb	r1, [r7, #11]
 8005e72:	233a      	movs	r3, #58	; 0x3a
 8005e74:	2202      	movs	r2, #2
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff fefb 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e80:	e054      	b.n	8005f2c <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3302      	adds	r3, #2
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3303      	adds	r3, #3
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005e92:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3304      	adds	r3, #4
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005e9c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	3205      	adds	r2, #5
 8005ea2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005ea4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3307      	adds	r3, #7
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	3208      	adds	r2, #8
 8005eb8:	7812      	ldrb	r2, [r2, #0]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005ece:	7af9      	ldrb	r1, [r7, #11]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 faad 	bl	8006430 <SCSI_CheckAddressRange>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	da02      	bge.n	8005ee2 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005edc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee0:	e024      	b.n	8005f2c <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005eee:	6979      	ldr	r1, [r7, #20]
 8005ef0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005ef4:	fb01 f303 	mul.w	r3, r1, r3
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d00a      	beq.n	8005f12 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005f02:	2320      	movs	r3, #32
 8005f04:	2205      	movs	r2, #5
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f7ff feb3 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 8005f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f10:	e00c      	b.n	8005f2c <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2202      	movs	r2, #2
 8005f16:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f1e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8005f20:	7afb      	ldrb	r3, [r7, #11]
 8005f22:	4619      	mov	r1, r3
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 faab 	bl	8006480 <SCSI_ProcessRead>
 8005f2a:	4603      	mov	r3, r0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f48:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d102      	bne.n	8005f56 <SCSI_Read12+0x22>
  {
    return -1;
 8005f50:	f04f 33ff 	mov.w	r3, #4294967295
 8005f54:	e095      	b.n	8006082 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	7a1b      	ldrb	r3, [r3, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f040 8087 	bne.w	800606e <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005f66:	b25b      	sxtb	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	db0a      	blt.n	8005f82 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005f72:	2320      	movs	r3, #32
 8005f74:	2205      	movs	r2, #5
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff fe7b 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 8005f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f80:	e07f      	b.n	8006082 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d108      	bne.n	8005f9e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005f8c:	7af9      	ldrb	r1, [r7, #11]
 8005f8e:	233a      	movs	r3, #58	; 0x3a
 8005f90:	2202      	movs	r2, #2
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7ff fe6d 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 8005f98:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9c:	e071      	b.n	8006082 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	7afa      	ldrb	r2, [r7, #11]
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4798      	blx	r3
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005fb2:	7af9      	ldrb	r1, [r7, #11]
 8005fb4:	233a      	movs	r3, #58	; 0x3a
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff fe5a 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 8005fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc2:	e05e      	b.n	8006082 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3302      	adds	r3, #2
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3303      	adds	r3, #3
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fd4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005fde:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	3205      	adds	r2, #5
 8005fe4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005fe6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3306      	adds	r3, #6
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3307      	adds	r3, #7
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005ffe:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3308      	adds	r3, #8
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8006008:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	3209      	adds	r2, #9
 800600e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8006010:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006024:	7af9      	ldrb	r1, [r7, #11]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fa02 	bl	8006430 <SCSI_CheckAddressRange>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	da02      	bge.n	8006038 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
 8006036:	e024      	b.n	8006082 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006044:	6979      	ldr	r1, [r7, #20]
 8006046:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800604a:	fb01 f303 	mul.w	r3, r1, r3
 800604e:	429a      	cmp	r2, r3
 8006050:	d00a      	beq.n	8006068 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006058:	2320      	movs	r3, #32
 800605a:	2205      	movs	r2, #5
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff fe08 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 8006062:	f04f 33ff 	mov.w	r3, #4294967295
 8006066:	e00c      	b.n	8006082 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2202      	movs	r2, #2
 800606c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006074:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8006076:	7afb      	ldrb	r3, [r7, #11]
 8006078:	4619      	mov	r1, r3
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 fa00 	bl	8006480 <SCSI_ProcessRead>
 8006080:	4603      	mov	r3, r0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	460b      	mov	r3, r1
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800609e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d102      	bne.n	80060ac <SCSI_Write10+0x22>
  {
    return -1;
 80060a6:	f04f 33ff 	mov.w	r3, #4294967295
 80060aa:	e0af      	b.n	800620c <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	7a1b      	ldrb	r3, [r3, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f040 80a5 	bne.w	8006200 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80060c6:	2320      	movs	r3, #32
 80060c8:	2205      	movs	r2, #5
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff fdd1 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 80060d0:	f04f 33ff 	mov.w	r3, #4294967295
 80060d4:	e09a      	b.n	800620c <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80060dc:	b25b      	sxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	da0a      	bge.n	80060f8 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80060e8:	2320      	movs	r3, #32
 80060ea:	2205      	movs	r2, #5
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff fdc0 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 80060f2:	f04f 33ff 	mov.w	r3, #4294967295
 80060f6:	e089      	b.n	800620c <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	7afa      	ldrb	r2, [r7, #11]
 8006102:	4610      	mov	r0, r2
 8006104:	4798      	blx	r3
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800610c:	7af9      	ldrb	r1, [r7, #11]
 800610e:	233a      	movs	r3, #58	; 0x3a
 8006110:	2202      	movs	r2, #2
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff fdad 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 8006118:	f04f 33ff 	mov.w	r3, #4294967295
 800611c:	e076      	b.n	800620c <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	7afa      	ldrb	r2, [r7, #11]
 8006128:	4610      	mov	r0, r2
 800612a:	4798      	blx	r3
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d008      	beq.n	8006144 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8006132:	7af9      	ldrb	r1, [r7, #11]
 8006134:	2327      	movs	r3, #39	; 0x27
 8006136:	2202      	movs	r2, #2
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff fd9a 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 800613e:	f04f 33ff 	mov.w	r3, #4294967295
 8006142:	e063      	b.n	800620c <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3302      	adds	r3, #2
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3303      	adds	r3, #3
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006154:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3304      	adds	r3, #4
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800615e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	3205      	adds	r2, #5
 8006164:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006166:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3307      	adds	r3, #7
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	3208      	adds	r2, #8
 800617a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800617c:	431a      	orrs	r2, r3
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006190:	7af9      	ldrb	r1, [r7, #11]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f94c 	bl	8006430 <SCSI_CheckAddressRange>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	da02      	bge.n	80061a4 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800619e:	f04f 33ff 	mov.w	r3, #4294967295
 80061a2:	e033      	b.n	800620c <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80061b0:	fb02 f303 	mul.w	r3, r2, r3
 80061b4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d00a      	beq.n	80061d8 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80061c8:	2320      	movs	r3, #32
 80061ca:	2205      	movs	r2, #5
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff fd50 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 80061d2:	f04f 33ff 	mov.w	r3, #4294967295
 80061d6:	e019      	b.n	800620c <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061de:	bf28      	it	cs
 80061e0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80061e4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2201      	movs	r2, #1
 80061ea:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f103 0210 	add.w	r2, r3, #16
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	2101      	movs	r1, #1
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f002 f95a 	bl	80084b0 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	e005      	b.n	800620c <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8006200:	7afb      	ldrb	r3, [r7, #11]
 8006202:	4619      	mov	r1, r3
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f9b4 	bl	8006572 <SCSI_ProcessWrite>
 800620a:	4603      	mov	r3, r0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	460b      	mov	r3, r1
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006228:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <SCSI_Write12+0x22>
  {
    return -1;
 8006230:	f04f 33ff 	mov.w	r3, #4294967295
 8006234:	e0bf      	b.n	80063b6 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	7a1b      	ldrb	r3, [r3, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f040 80b5 	bne.w	80063aa <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006250:	2320      	movs	r3, #32
 8006252:	2205      	movs	r2, #5
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff fd0c 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 800625a:	f04f 33ff 	mov.w	r3, #4294967295
 800625e:	e0aa      	b.n	80063b6 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006266:	b25b      	sxtb	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	da0a      	bge.n	8006282 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006272:	2320      	movs	r3, #32
 8006274:	2205      	movs	r2, #5
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f7ff fcfb 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 800627c:	f04f 33ff 	mov.w	r3, #4294967295
 8006280:	e099      	b.n	80063b6 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	7afa      	ldrb	r2, [r7, #11]
 800628c:	4610      	mov	r0, r2
 800628e:	4798      	blx	r3
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006296:	7af9      	ldrb	r1, [r7, #11]
 8006298:	233a      	movs	r3, #58	; 0x3a
 800629a:	2202      	movs	r2, #2
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7ff fce8 	bl	8005c72 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2205      	movs	r2, #5
 80062a6:	721a      	strb	r2, [r3, #8]
      return -1;
 80062a8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ac:	e083      	b.n	80063b6 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	7afa      	ldrb	r2, [r7, #11]
 80062b8:	4610      	mov	r0, r2
 80062ba:	4798      	blx	r3
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00b      	beq.n	80062da <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80062c2:	7af9      	ldrb	r1, [r7, #11]
 80062c4:	2327      	movs	r3, #39	; 0x27
 80062c6:	2202      	movs	r2, #2
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f7ff fcd2 	bl	8005c72 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2205      	movs	r2, #5
 80062d2:	721a      	strb	r2, [r3, #8]
      return -1;
 80062d4:	f04f 33ff 	mov.w	r3, #4294967295
 80062d8:	e06d      	b.n	80063b6 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3302      	adds	r3, #2
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3303      	adds	r3, #3
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80062ea:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80062f4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	3205      	adds	r2, #5
 80062fa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80062fc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3306      	adds	r3, #6
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3307      	adds	r3, #7
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006314:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3308      	adds	r3, #8
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800631e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	3209      	adds	r2, #9
 8006324:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8006326:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800633a:	7af9      	ldrb	r1, [r7, #11]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f877 	bl	8006430 <SCSI_CheckAddressRange>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	da02      	bge.n	800634e <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006348:	f04f 33ff 	mov.w	r3, #4294967295
 800634c:	e033      	b.n	80063b6 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800635a:	fb02 f303 	mul.w	r3, r2, r3
 800635e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	429a      	cmp	r2, r3
 800636a:	d00a      	beq.n	8006382 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006372:	2320      	movs	r3, #32
 8006374:	2205      	movs	r2, #5
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7ff fc7b 	bl	8005c72 <SCSI_SenseCode>
      return -1;
 800637c:	f04f 33ff 	mov.w	r3, #4294967295
 8006380:	e019      	b.n	80063b6 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006388:	bf28      	it	cs
 800638a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800638e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2201      	movs	r2, #1
 8006394:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f103 0210 	add.w	r2, r3, #16
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2101      	movs	r1, #1
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f002 f885 	bl	80084b0 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	e005      	b.n	80063b6 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	4619      	mov	r1, r3
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 f8df 	bl	8006572 <SCSI_ProcessWrite>
 80063b4:	4603      	mov	r3, r0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b086      	sub	sp, #24
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	460b      	mov	r3, r1
 80063c8:	607a      	str	r2, [r7, #4]
 80063ca:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063d2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d102      	bne.n	80063e0 <SCSI_Verify10+0x22>
  {
    return -1;
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
 80063de:	e023      	b.n	8006428 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3301      	adds	r3, #1
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80063ee:	7af9      	ldrb	r1, [r7, #11]
 80063f0:	2324      	movs	r3, #36	; 0x24
 80063f2:	2205      	movs	r2, #5
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f7ff fc3c 	bl	8005c72 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295
 80063fe:	e013      	b.n	8006428 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800640c:	7af9      	ldrb	r1, [r7, #11]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 f80e 	bl	8006430 <SCSI_CheckAddressRange>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	da02      	bge.n	8006420 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 800641a:	f04f 33ff 	mov.w	r3, #4294967295
 800641e:	e003      	b.n	8006428 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2200      	movs	r2, #0
 8006424:	60da      	str	r2, [r3, #12]

  return 0;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	460b      	mov	r3, r1
 800643e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006446:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800644e:	f04f 33ff 	mov.w	r3, #4294967295
 8006452:	e011      	b.n	8006478 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	441a      	add	r2, r3
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006460:	429a      	cmp	r2, r3
 8006462:	d908      	bls.n	8006476 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006464:	7af9      	ldrb	r1, [r7, #11]
 8006466:	2321      	movs	r3, #33	; 0x21
 8006468:	2205      	movs	r2, #5
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f7ff fc01 	bl	8005c72 <SCSI_SenseCode>
    return -1;
 8006470:	f04f 33ff 	mov.w	r3, #4294967295
 8006474:	e000      	b.n	8006478 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006492:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80064a0:	fb02 f303 	mul.w	r3, r2, r3
 80064a4:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <SCSI_ProcessRead+0x32>
  {
    return -1;
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295
 80064b0:	e05b      	b.n	800656a <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b8:	bf28      	it	cs
 80064ba:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80064be:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064c6:	691c      	ldr	r4, [r3, #16]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f103 0110 	add.w	r1, r3, #16
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80064da:	4618      	mov	r0, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	78f8      	ldrb	r0, [r7, #3]
 80064e6:	47a0      	blx	r4
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	da08      	bge.n	8006500 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80064ee:	78f9      	ldrb	r1, [r7, #3]
 80064f0:	2311      	movs	r3, #17
 80064f2:	2204      	movs	r2, #4
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff fbbc 	bl	8005c72 <SCSI_SenseCode>
    return -1;
 80064fa:	f04f 33ff 	mov.w	r3, #4294967295
 80064fe:	e034      	b.n	800656a <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f103 0210 	add.w	r2, r3, #16
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2181      	movs	r1, #129	; 0x81
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 ff98 	bl	8008440 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800651c:	4619      	mov	r1, r3
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	fbb3 f3f1 	udiv	r3, r3, r1
 8006524:	441a      	add	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006538:	4619      	mov	r1, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006540:	1ad2      	subs	r2, r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	1ad2      	subs	r2, r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800655e:	2b00      	cmp	r3, #0
 8006560:	d102      	bne.n	8006568 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2203      	movs	r2, #3
 8006566:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	bd90      	pop	{r4, r7, pc}

08006572 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006572:	b590      	push	{r4, r7, lr}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006584:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d102      	bne.n	80065a4 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 800659e:	f04f 33ff 	mov.w	r3, #4294967295
 80065a2:	e06b      	b.n	800667c <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065aa:	bf28      	it	cs
 80065ac:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80065b0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065b8:	695c      	ldr	r4, [r3, #20]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f103 0110 	add.w	r1, r3, #16
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80065cc:	4618      	mov	r0, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	78f8      	ldrb	r0, [r7, #3]
 80065d8:	47a0      	blx	r4
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	da08      	bge.n	80065f2 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80065e0:	78f9      	ldrb	r1, [r7, #3]
 80065e2:	2303      	movs	r3, #3
 80065e4:	2204      	movs	r2, #4
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff fb43 	bl	8005c72 <SCSI_SenseCode>
    return -1;
 80065ec:	f04f 33ff 	mov.w	r3, #4294967295
 80065f0:	e044      	b.n	800667c <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80065fe:	4619      	mov	r1, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	fbb3 f3f1 	udiv	r3, r3, r1
 8006606:	441a      	add	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800661a:	4619      	mov	r1, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006622:	1ad2      	subs	r2, r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	1ad2      	subs	r2, r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006644:	2100      	movs	r1, #0
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7fe fdd8 	bl	80051fc <MSC_BOT_SendCSW>
 800664c:	e015      	b.n	800667a <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800665a:	fb02 f303 	mul.w	r3, r2, r3
 800665e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006662:	bf28      	it	cs
 8006664:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006668:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f103 0210 	add.w	r2, r3, #16
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2101      	movs	r1, #1
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 ff1b 	bl	80084b0 <USBD_LL_PrepareReceive>
  }

  return 0;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	bd90      	pop	{r4, r7, pc}

08006684 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d102      	bne.n	80066a2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800669c:	f04f 33ff 	mov.w	r3, #4294967295
 80066a0:	e013      	b.n	80066ca <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80066a2:	8afa      	ldrh	r2, [r7, #22]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80066a8:	e00b      	b.n	80066c2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80066aa:	8afb      	ldrh	r3, [r7, #22]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80066b0:	8afb      	ldrh	r3, [r7, #22]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	441a      	add	r2, r3
 80066b6:	8afb      	ldrh	r3, [r7, #22]
 80066b8:	7811      	ldrb	r1, [r2, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	460a      	mov	r2, r1
 80066c0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80066c2:	8afb      	ldrh	r3, [r7, #22]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f0      	bne.n	80066aa <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	4613      	mov	r3, r2
 80066e2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e01f      	b.n	800672e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	79fa      	ldrb	r2, [r7, #7]
 8006720:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f001 fc96 	bl	8008054 <USBD_LL_Init>
 8006728:	4603      	mov	r3, r0
 800672a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800672c:	7dfb      	ldrb	r3, [r7, #23]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800674a:	2303      	movs	r3, #3
 800674c:	e016      	b.n	800677c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00b      	beq.n	800677a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	f107 020e 	add.w	r2, r7, #14
 800676e:	4610      	mov	r0, r2
 8006770:	4798      	blx	r3
 8006772:	4602      	mov	r2, r0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 fcad 	bl	80080ec <USBD_LL_Start>
 8006792:	4603      	mov	r3, r0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	460b      	mov	r3, r1
 80067bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067be:	2303      	movs	r3, #3
 80067c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d009      	beq.n	80067e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	4611      	mov	r1, r2
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	4798      	blx	r3
 80067dc:	4603      	mov	r3, r0
 80067de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	4611      	mov	r1, r2
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	4798      	blx	r3
  }

  return USBD_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	4618      	mov	r0, r3
 800682e:	f000 ffb9 	bl	80077a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006840:	461a      	mov	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	2b02      	cmp	r3, #2
 8006854:	d01a      	beq.n	800688c <USBD_LL_SetupStage+0x72>
 8006856:	2b02      	cmp	r3, #2
 8006858:	d822      	bhi.n	80068a0 <USBD_LL_SetupStage+0x86>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <USBD_LL_SetupStage+0x4a>
 800685e:	2b01      	cmp	r3, #1
 8006860:	d00a      	beq.n	8006878 <USBD_LL_SetupStage+0x5e>
 8006862:	e01d      	b.n	80068a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fa61 	bl	8006d34 <USBD_StdDevReq>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]
      break;
 8006876:	e020      	b.n	80068ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fac5 	bl	8006e10 <USBD_StdItfReq>
 8006886:	4603      	mov	r3, r0
 8006888:	73fb      	strb	r3, [r7, #15]
      break;
 800688a:	e016      	b.n	80068ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fb04 	bl	8006ea2 <USBD_StdEPReq>
 800689a:	4603      	mov	r3, r0
 800689c:	73fb      	strb	r3, [r7, #15]
      break;
 800689e:	e00c      	b.n	80068ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fcf8 	bl	80082a4 <USBD_LL_StallEP>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73fb      	strb	r3, [r7, #15]
      break;
 80068b8:	bf00      	nop
  }

  return ret;
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	460b      	mov	r3, r1
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068d2:	7afb      	ldrb	r3, [r7, #11]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d138      	bne.n	800694a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d14a      	bne.n	8006980 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d913      	bls.n	800691e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	4293      	cmp	r3, r2
 800690e:	bf28      	it	cs
 8006910:	4613      	movcs	r3, r2
 8006912:	461a      	mov	r2, r3
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f001 f81b 	bl	8007952 <USBD_CtlContinueRx>
 800691c:	e030      	b.n	8006980 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b03      	cmp	r3, #3
 8006928:	d10b      	bne.n	8006942 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f001 f816 	bl	8007974 <USBD_CtlSendStatus>
 8006948:	e01a      	b.n	8006980 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b03      	cmp	r3, #3
 8006954:	d114      	bne.n	8006980 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00e      	beq.n	8006980 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	7afa      	ldrb	r2, [r7, #11]
 800696c:	4611      	mov	r1, r2
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	4798      	blx	r3
 8006972:	4603      	mov	r3, r0
 8006974:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	e000      	b.n	8006982 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b086      	sub	sp, #24
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	460b      	mov	r3, r1
 8006994:	607a      	str	r2, [r7, #4]
 8006996:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d16b      	bne.n	8006a76 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3314      	adds	r3, #20
 80069a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d156      	bne.n	8006a5c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d914      	bls.n	80069e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	1ad2      	subs	r2, r2, r3
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	461a      	mov	r2, r3
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 ffad 	bl	8007930 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069d6:	2300      	movs	r3, #0
 80069d8:	2200      	movs	r2, #0
 80069da:	2100      	movs	r1, #0
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f001 fd67 	bl	80084b0 <USBD_LL_PrepareReceive>
 80069e2:	e03b      	b.n	8006a5c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d11c      	bne.n	8006a2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d316      	bcc.n	8006a2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d20f      	bcs.n	8006a2a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 ff8e 	bl	8007930 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2100      	movs	r1, #0
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f001 fd44 	bl	80084b0 <USBD_LL_PrepareReceive>
 8006a28:	e018      	b.n	8006a5c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d10b      	bne.n	8006a4e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a4e:	2180      	movs	r1, #128	; 0x80
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f001 fc27 	bl	80082a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 ff9f 	bl	800799a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d122      	bne.n	8006aac <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff fe98 	bl	800679c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a74:	e01a      	b.n	8006aac <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d114      	bne.n	8006aac <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00e      	beq.n	8006aac <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	7afa      	ldrb	r2, [r7, #11]
 8006a98:	4611      	mov	r1, r2
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	4798      	blx	r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	e000      	b.n	8006aae <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e02f      	b.n	8006b4a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00f      	beq.n	8006b14 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d009      	beq.n	8006b14 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6852      	ldr	r2, [r2, #4]
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	4611      	mov	r1, r2
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b14:	2340      	movs	r3, #64	; 0x40
 8006b16:	2200      	movs	r2, #0
 8006b18:	2100      	movs	r1, #0
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 fb18 	bl	8008150 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2240      	movs	r2, #64	; 0x40
 8006b2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b30:	2340      	movs	r3, #64	; 0x40
 8006b32:	2200      	movs	r2, #0
 8006b34:	2180      	movs	r1, #128	; 0x80
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 fb0a 	bl	8008150 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2240      	movs	r2, #64	; 0x40
 8006b46:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	78fa      	ldrb	r2, [r7, #3]
 8006b62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d106      	bne.n	8006bc0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e012      	b.n	8006c0a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d10b      	bne.n	8006c08 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e014      	b.n	8006c56 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d10d      	bne.n	8006c54 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d007      	beq.n	8006c54 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	78fa      	ldrb	r2, [r7, #3]
 8006c4e:	4611      	mov	r1, r2
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e014      	b.n	8006ca2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d10d      	bne.n	8006ca0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	78fa      	ldrb	r2, [r7, #3]
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6852      	ldr	r2, [r2, #4]
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	4611      	mov	r1, r2
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
  }

  return USBD_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d16:	8a3b      	ldrh	r3, [r7, #16]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	b21a      	sxth	r2, r3
 8006d1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	b21b      	sxth	r3, r3
 8006d24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d26:	89fb      	ldrh	r3, [r7, #14]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d4a:	2b40      	cmp	r3, #64	; 0x40
 8006d4c:	d005      	beq.n	8006d5a <USBD_StdDevReq+0x26>
 8006d4e:	2b40      	cmp	r3, #64	; 0x40
 8006d50:	d853      	bhi.n	8006dfa <USBD_StdDevReq+0xc6>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00b      	beq.n	8006d6e <USBD_StdDevReq+0x3a>
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	d14f      	bne.n	8006dfa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6c:	e04a      	b.n	8006e04 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	785b      	ldrb	r3, [r3, #1]
 8006d72:	2b09      	cmp	r3, #9
 8006d74:	d83b      	bhi.n	8006dee <USBD_StdDevReq+0xba>
 8006d76:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <USBD_StdDevReq+0x48>)
 8006d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7c:	08006dd1 	.word	0x08006dd1
 8006d80:	08006de5 	.word	0x08006de5
 8006d84:	08006def 	.word	0x08006def
 8006d88:	08006ddb 	.word	0x08006ddb
 8006d8c:	08006def 	.word	0x08006def
 8006d90:	08006daf 	.word	0x08006daf
 8006d94:	08006da5 	.word	0x08006da5
 8006d98:	08006def 	.word	0x08006def
 8006d9c:	08006dc7 	.word	0x08006dc7
 8006da0:	08006db9 	.word	0x08006db9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f9de 	bl	8007168 <USBD_GetDescriptor>
          break;
 8006dac:	e024      	b.n	8006df8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fb6d 	bl	8007490 <USBD_SetAddress>
          break;
 8006db6:	e01f      	b.n	8006df8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fbac 	bl	8007518 <USBD_SetConfig>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	73fb      	strb	r3, [r7, #15]
          break;
 8006dc4:	e018      	b.n	8006df8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fc4b 	bl	8007664 <USBD_GetConfig>
          break;
 8006dce:	e013      	b.n	8006df8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fc7c 	bl	80076d0 <USBD_GetStatus>
          break;
 8006dd8:	e00e      	b.n	8006df8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fcab 	bl	8007738 <USBD_SetFeature>
          break;
 8006de2:	e009      	b.n	8006df8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fcba 	bl	8007760 <USBD_ClrFeature>
          break;
 8006dec:	e004      	b.n	8006df8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fd11 	bl	8007818 <USBD_CtlError>
          break;
 8006df6:	bf00      	nop
      }
      break;
 8006df8:	e004      	b.n	8006e04 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fd0b 	bl	8007818 <USBD_CtlError>
      break;
 8006e02:	bf00      	nop
  }

  return ret;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop

08006e10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d005      	beq.n	8006e36 <USBD_StdItfReq+0x26>
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d82f      	bhi.n	8006e8e <USBD_StdItfReq+0x7e>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <USBD_StdItfReq+0x26>
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	d12b      	bne.n	8006e8e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d81d      	bhi.n	8006e80 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	889b      	ldrh	r3, [r3, #4]
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d813      	bhi.n	8006e76 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	4798      	blx	r3
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	88db      	ldrh	r3, [r3, #6]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d110      	bne.n	8006e8a <USBD_StdItfReq+0x7a>
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10d      	bne.n	8006e8a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fd80 	bl	8007974 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e74:	e009      	b.n	8006e8a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fccd 	bl	8007818 <USBD_CtlError>
          break;
 8006e7e:	e004      	b.n	8006e8a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fcc8 	bl	8007818 <USBD_CtlError>
          break;
 8006e88:	e000      	b.n	8006e8c <USBD_StdItfReq+0x7c>
          break;
 8006e8a:	bf00      	nop
      }
      break;
 8006e8c:	e004      	b.n	8006e98 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fcc1 	bl	8007818 <USBD_CtlError>
      break;
 8006e96:	bf00      	nop
  }

  return ret;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	889b      	ldrh	r3, [r3, #4]
 8006eb4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ebe:	2b40      	cmp	r3, #64	; 0x40
 8006ec0:	d007      	beq.n	8006ed2 <USBD_StdEPReq+0x30>
 8006ec2:	2b40      	cmp	r3, #64	; 0x40
 8006ec4:	f200 8145 	bhi.w	8007152 <USBD_StdEPReq+0x2b0>
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00c      	beq.n	8006ee6 <USBD_StdEPReq+0x44>
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	f040 8140 	bne.w	8007152 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	4798      	blx	r3
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee4:	e13a      	b.n	800715c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d007      	beq.n	8006efe <USBD_StdEPReq+0x5c>
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	f300 8129 	bgt.w	8007146 <USBD_StdEPReq+0x2a4>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d07f      	beq.n	8006ff8 <USBD_StdEPReq+0x156>
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d03c      	beq.n	8006f76 <USBD_StdEPReq+0xd4>
 8006efc:	e123      	b.n	8007146 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d002      	beq.n	8006f10 <USBD_StdEPReq+0x6e>
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d016      	beq.n	8006f3c <USBD_StdEPReq+0x9a>
 8006f0e:	e02c      	b.n	8006f6a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f10:	7bbb      	ldrb	r3, [r7, #14]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00d      	beq.n	8006f32 <USBD_StdEPReq+0x90>
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	2b80      	cmp	r3, #128	; 0x80
 8006f1a:	d00a      	beq.n	8006f32 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 f9bf 	bl	80082a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f26:	2180      	movs	r1, #128	; 0x80
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f9bb 	bl	80082a4 <USBD_LL_StallEP>
 8006f2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f30:	e020      	b.n	8006f74 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fc6f 	bl	8007818 <USBD_CtlError>
              break;
 8006f3a:	e01b      	b.n	8006f74 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	885b      	ldrh	r3, [r3, #2]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10e      	bne.n	8006f62 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00b      	beq.n	8006f62 <USBD_StdEPReq+0xc0>
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	2b80      	cmp	r3, #128	; 0x80
 8006f4e:	d008      	beq.n	8006f62 <USBD_StdEPReq+0xc0>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	88db      	ldrh	r3, [r3, #6]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 f9a1 	bl	80082a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fd06 	bl	8007974 <USBD_CtlSendStatus>

              break;
 8006f68:	e004      	b.n	8006f74 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fc53 	bl	8007818 <USBD_CtlError>
              break;
 8006f72:	bf00      	nop
          }
          break;
 8006f74:	e0ec      	b.n	8007150 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d002      	beq.n	8006f88 <USBD_StdEPReq+0xe6>
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d016      	beq.n	8006fb4 <USBD_StdEPReq+0x112>
 8006f86:	e030      	b.n	8006fea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00d      	beq.n	8006faa <USBD_StdEPReq+0x108>
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	2b80      	cmp	r3, #128	; 0x80
 8006f92:	d00a      	beq.n	8006faa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f001 f983 	bl	80082a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f9e:	2180      	movs	r1, #128	; 0x80
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 f97f 	bl	80082a4 <USBD_LL_StallEP>
 8006fa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fa8:	e025      	b.n	8006ff6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fc33 	bl	8007818 <USBD_CtlError>
              break;
 8006fb2:	e020      	b.n	8006ff6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	885b      	ldrh	r3, [r3, #2]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d11b      	bne.n	8006ff4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 f9a0 	bl	8008310 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fccf 	bl	8007974 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006fe8:	e004      	b.n	8006ff4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fc13 	bl	8007818 <USBD_CtlError>
              break;
 8006ff2:	e000      	b.n	8006ff6 <USBD_StdEPReq+0x154>
              break;
 8006ff4:	bf00      	nop
          }
          break;
 8006ff6:	e0ab      	b.n	8007150 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d002      	beq.n	800700a <USBD_StdEPReq+0x168>
 8007004:	2b03      	cmp	r3, #3
 8007006:	d032      	beq.n	800706e <USBD_StdEPReq+0x1cc>
 8007008:	e097      	b.n	800713a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <USBD_StdEPReq+0x17e>
 8007010:	7bbb      	ldrb	r3, [r7, #14]
 8007012:	2b80      	cmp	r3, #128	; 0x80
 8007014:	d004      	beq.n	8007020 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fbfd 	bl	8007818 <USBD_CtlError>
                break;
 800701e:	e091      	b.n	8007144 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007024:	2b00      	cmp	r3, #0
 8007026:	da0b      	bge.n	8007040 <USBD_StdEPReq+0x19e>
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	3310      	adds	r3, #16
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	4413      	add	r3, r2
 800703c:	3304      	adds	r3, #4
 800703e:	e00b      	b.n	8007058 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	3304      	adds	r3, #4
 8007058:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2202      	movs	r2, #2
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fc47 	bl	80078fa <USBD_CtlSendData>
              break;
 800706c:	e06a      	b.n	8007144 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800706e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007072:	2b00      	cmp	r3, #0
 8007074:	da11      	bge.n	800709a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	f003 020f 	and.w	r2, r3, #15
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	440b      	add	r3, r1
 8007088:	3324      	adds	r3, #36	; 0x24
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d117      	bne.n	80070c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fbc0 	bl	8007818 <USBD_CtlError>
                  break;
 8007098:	e054      	b.n	8007144 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800709a:	7bbb      	ldrb	r3, [r7, #14]
 800709c:	f003 020f 	and.w	r2, r3, #15
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	440b      	add	r3, r1
 80070ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d104      	bne.n	80070c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fbad 	bl	8007818 <USBD_CtlError>
                  break;
 80070be:	e041      	b.n	8007144 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	da0b      	bge.n	80070e0 <USBD_StdEPReq+0x23e>
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	3310      	adds	r3, #16
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	4413      	add	r3, r2
 80070dc:	3304      	adds	r3, #4
 80070de:	e00b      	b.n	80070f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4413      	add	r3, r2
 80070f6:	3304      	adds	r3, #4
 80070f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <USBD_StdEPReq+0x264>
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b80      	cmp	r3, #128	; 0x80
 8007104:	d103      	bne.n	800710e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	e00e      	b.n	800712c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 f932 	bl	800837c <USBD_LL_IsStallEP>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	e002      	b.n	800712c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2202      	movs	r2, #2
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fbe1 	bl	80078fa <USBD_CtlSendData>
              break;
 8007138:	e004      	b.n	8007144 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fb6b 	bl	8007818 <USBD_CtlError>
              break;
 8007142:	bf00      	nop
          }
          break;
 8007144:	e004      	b.n	8007150 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fb65 	bl	8007818 <USBD_CtlError>
          break;
 800714e:	bf00      	nop
      }
      break;
 8007150:	e004      	b.n	800715c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fb5f 	bl	8007818 <USBD_CtlError>
      break;
 800715a:	bf00      	nop
  }

  return ret;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	885b      	ldrh	r3, [r3, #2]
 8007182:	0a1b      	lsrs	r3, r3, #8
 8007184:	b29b      	uxth	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	2b0e      	cmp	r3, #14
 800718a:	f200 8152 	bhi.w	8007432 <USBD_GetDescriptor+0x2ca>
 800718e:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <USBD_GetDescriptor+0x2c>)
 8007190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007194:	08007205 	.word	0x08007205
 8007198:	0800721d 	.word	0x0800721d
 800719c:	0800725d 	.word	0x0800725d
 80071a0:	08007433 	.word	0x08007433
 80071a4:	08007433 	.word	0x08007433
 80071a8:	080073d3 	.word	0x080073d3
 80071ac:	080073ff 	.word	0x080073ff
 80071b0:	08007433 	.word	0x08007433
 80071b4:	08007433 	.word	0x08007433
 80071b8:	08007433 	.word	0x08007433
 80071bc:	08007433 	.word	0x08007433
 80071c0:	08007433 	.word	0x08007433
 80071c4:	08007433 	.word	0x08007433
 80071c8:	08007433 	.word	0x08007433
 80071cc:	080071d1 	.word	0x080071d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	7c12      	ldrb	r2, [r2, #16]
 80071e8:	f107 0108 	add.w	r1, r7, #8
 80071ec:	4610      	mov	r0, r2
 80071ee:	4798      	blx	r3
 80071f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071f2:	e126      	b.n	8007442 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fb0e 	bl	8007818 <USBD_CtlError>
        err++;
 80071fc:	7afb      	ldrb	r3, [r7, #11]
 80071fe:	3301      	adds	r3, #1
 8007200:	72fb      	strb	r3, [r7, #11]
      break;
 8007202:	e11e      	b.n	8007442 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	7c12      	ldrb	r2, [r2, #16]
 8007210:	f107 0108 	add.w	r1, r7, #8
 8007214:	4610      	mov	r0, r2
 8007216:	4798      	blx	r3
 8007218:	60f8      	str	r0, [r7, #12]
      break;
 800721a:	e112      	b.n	8007442 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	7c1b      	ldrb	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10d      	bne.n	8007240 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	f107 0208 	add.w	r2, r7, #8
 8007230:	4610      	mov	r0, r2
 8007232:	4798      	blx	r3
 8007234:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3301      	adds	r3, #1
 800723a:	2202      	movs	r2, #2
 800723c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800723e:	e100      	b.n	8007442 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007248:	f107 0208 	add.w	r2, r7, #8
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
 8007250:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	2202      	movs	r2, #2
 8007258:	701a      	strb	r2, [r3, #0]
      break;
 800725a:	e0f2      	b.n	8007442 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	885b      	ldrh	r3, [r3, #2]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b05      	cmp	r3, #5
 8007264:	f200 80ac 	bhi.w	80073c0 <USBD_GetDescriptor+0x258>
 8007268:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <USBD_GetDescriptor+0x108>)
 800726a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726e:	bf00      	nop
 8007270:	08007289 	.word	0x08007289
 8007274:	080072bd 	.word	0x080072bd
 8007278:	080072f1 	.word	0x080072f1
 800727c:	08007325 	.word	0x08007325
 8007280:	08007359 	.word	0x08007359
 8007284:	0800738d 	.word	0x0800738d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	7c12      	ldrb	r2, [r2, #16]
 80072a0:	f107 0108 	add.w	r1, r7, #8
 80072a4:	4610      	mov	r0, r2
 80072a6:	4798      	blx	r3
 80072a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072aa:	e091      	b.n	80073d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fab2 	bl	8007818 <USBD_CtlError>
            err++;
 80072b4:	7afb      	ldrb	r3, [r7, #11]
 80072b6:	3301      	adds	r3, #1
 80072b8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ba:	e089      	b.n	80073d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00b      	beq.n	80072e0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	7c12      	ldrb	r2, [r2, #16]
 80072d4:	f107 0108 	add.w	r1, r7, #8
 80072d8:	4610      	mov	r0, r2
 80072da:	4798      	blx	r3
 80072dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072de:	e077      	b.n	80073d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa98 	bl	8007818 <USBD_CtlError>
            err++;
 80072e8:	7afb      	ldrb	r3, [r7, #11]
 80072ea:	3301      	adds	r3, #1
 80072ec:	72fb      	strb	r3, [r7, #11]
          break;
 80072ee:	e06f      	b.n	80073d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00b      	beq.n	8007314 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	7c12      	ldrb	r2, [r2, #16]
 8007308:	f107 0108 	add.w	r1, r7, #8
 800730c:	4610      	mov	r0, r2
 800730e:	4798      	blx	r3
 8007310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007312:	e05d      	b.n	80073d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa7e 	bl	8007818 <USBD_CtlError>
            err++;
 800731c:	7afb      	ldrb	r3, [r7, #11]
 800731e:	3301      	adds	r3, #1
 8007320:	72fb      	strb	r3, [r7, #11]
          break;
 8007322:	e055      	b.n	80073d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00b      	beq.n	8007348 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	7c12      	ldrb	r2, [r2, #16]
 800733c:	f107 0108 	add.w	r1, r7, #8
 8007340:	4610      	mov	r0, r2
 8007342:	4798      	blx	r3
 8007344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007346:	e043      	b.n	80073d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fa64 	bl	8007818 <USBD_CtlError>
            err++;
 8007350:	7afb      	ldrb	r3, [r7, #11]
 8007352:	3301      	adds	r3, #1
 8007354:	72fb      	strb	r3, [r7, #11]
          break;
 8007356:	e03b      	b.n	80073d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	7c12      	ldrb	r2, [r2, #16]
 8007370:	f107 0108 	add.w	r1, r7, #8
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3
 8007378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800737a:	e029      	b.n	80073d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa4a 	bl	8007818 <USBD_CtlError>
            err++;
 8007384:	7afb      	ldrb	r3, [r7, #11]
 8007386:	3301      	adds	r3, #1
 8007388:	72fb      	strb	r3, [r7, #11]
          break;
 800738a:	e021      	b.n	80073d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00b      	beq.n	80073b0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	7c12      	ldrb	r2, [r2, #16]
 80073a4:	f107 0108 	add.w	r1, r7, #8
 80073a8:	4610      	mov	r0, r2
 80073aa:	4798      	blx	r3
 80073ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ae:	e00f      	b.n	80073d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fa30 	bl	8007818 <USBD_CtlError>
            err++;
 80073b8:	7afb      	ldrb	r3, [r7, #11]
 80073ba:	3301      	adds	r3, #1
 80073bc:	72fb      	strb	r3, [r7, #11]
          break;
 80073be:	e007      	b.n	80073d0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa28 	bl	8007818 <USBD_CtlError>
          err++;
 80073c8:	7afb      	ldrb	r3, [r7, #11]
 80073ca:	3301      	adds	r3, #1
 80073cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80073ce:	bf00      	nop
      }
      break;
 80073d0:	e037      	b.n	8007442 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	7c1b      	ldrb	r3, [r3, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d109      	bne.n	80073ee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e2:	f107 0208 	add.w	r2, r7, #8
 80073e6:	4610      	mov	r0, r2
 80073e8:	4798      	blx	r3
 80073ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073ec:	e029      	b.n	8007442 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fa11 	bl	8007818 <USBD_CtlError>
        err++;
 80073f6:	7afb      	ldrb	r3, [r7, #11]
 80073f8:	3301      	adds	r3, #1
 80073fa:	72fb      	strb	r3, [r7, #11]
      break;
 80073fc:	e021      	b.n	8007442 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	7c1b      	ldrb	r3, [r3, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10d      	bne.n	8007422 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	f107 0208 	add.w	r2, r7, #8
 8007412:	4610      	mov	r0, r2
 8007414:	4798      	blx	r3
 8007416:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3301      	adds	r3, #1
 800741c:	2207      	movs	r2, #7
 800741e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007420:	e00f      	b.n	8007442 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f9f7 	bl	8007818 <USBD_CtlError>
        err++;
 800742a:	7afb      	ldrb	r3, [r7, #11]
 800742c:	3301      	adds	r3, #1
 800742e:	72fb      	strb	r3, [r7, #11]
      break;
 8007430:	e007      	b.n	8007442 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f9ef 	bl	8007818 <USBD_CtlError>
      err++;
 800743a:	7afb      	ldrb	r3, [r7, #11]
 800743c:	3301      	adds	r3, #1
 800743e:	72fb      	strb	r3, [r7, #11]
      break;
 8007440:	bf00      	nop
  }

  if (err != 0U)
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d11e      	bne.n	8007486 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	88db      	ldrh	r3, [r3, #6]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d016      	beq.n	800747e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007450:	893b      	ldrh	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00e      	beq.n	8007474 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	88da      	ldrh	r2, [r3, #6]
 800745a:	893b      	ldrh	r3, [r7, #8]
 800745c:	4293      	cmp	r3, r2
 800745e:	bf28      	it	cs
 8007460:	4613      	movcs	r3, r2
 8007462:	b29b      	uxth	r3, r3
 8007464:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007466:	893b      	ldrh	r3, [r7, #8]
 8007468:	461a      	mov	r2, r3
 800746a:	68f9      	ldr	r1, [r7, #12]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fa44 	bl	80078fa <USBD_CtlSendData>
 8007472:	e009      	b.n	8007488 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f9ce 	bl	8007818 <USBD_CtlError>
 800747c:	e004      	b.n	8007488 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa78 	bl	8007974 <USBD_CtlSendStatus>
 8007484:	e000      	b.n	8007488 <USBD_GetDescriptor+0x320>
    return;
 8007486:	bf00      	nop
  }
}
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop

08007490 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	889b      	ldrh	r3, [r3, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d131      	bne.n	8007506 <USBD_SetAddress+0x76>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	88db      	ldrh	r3, [r3, #6]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d12d      	bne.n	8007506 <USBD_SetAddress+0x76>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	885b      	ldrh	r3, [r3, #2]
 80074ae:	2b7f      	cmp	r3, #127	; 0x7f
 80074b0:	d829      	bhi.n	8007506 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	885b      	ldrh	r3, [r3, #2]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d104      	bne.n	80074d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f9a3 	bl	8007818 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074d2:	e01d      	b.n	8007510 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	7bfa      	ldrb	r2, [r7, #15]
 80074d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 ff77 	bl	80083d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa44 	bl	8007974 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2202      	movs	r2, #2
 80074f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fa:	e009      	b.n	8007510 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007504:	e004      	b.n	8007510 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f985 	bl	8007818 <USBD_CtlError>
  }
}
 800750e:	bf00      	nop
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	885b      	ldrh	r3, [r3, #2]
 800752a:	b2da      	uxtb	r2, r3
 800752c:	4b4c      	ldr	r3, [pc, #304]	; (8007660 <USBD_SetConfig+0x148>)
 800752e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007530:	4b4b      	ldr	r3, [pc, #300]	; (8007660 <USBD_SetConfig+0x148>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d905      	bls.n	8007544 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f96c 	bl	8007818 <USBD_CtlError>
    return USBD_FAIL;
 8007540:	2303      	movs	r3, #3
 8007542:	e088      	b.n	8007656 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b02      	cmp	r3, #2
 800754e:	d002      	beq.n	8007556 <USBD_SetConfig+0x3e>
 8007550:	2b03      	cmp	r3, #3
 8007552:	d025      	beq.n	80075a0 <USBD_SetConfig+0x88>
 8007554:	e071      	b.n	800763a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007556:	4b42      	ldr	r3, [pc, #264]	; (8007660 <USBD_SetConfig+0x148>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01c      	beq.n	8007598 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800755e:	4b40      	ldr	r3, [pc, #256]	; (8007660 <USBD_SetConfig+0x148>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007568:	4b3d      	ldr	r3, [pc, #244]	; (8007660 <USBD_SetConfig+0x148>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff f91f 	bl	80067b2 <USBD_SetClassConfig>
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d004      	beq.n	8007588 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f949 	bl	8007818 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007586:	e065      	b.n	8007654 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f9f3 	bl	8007974 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2203      	movs	r2, #3
 8007592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007596:	e05d      	b.n	8007654 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f9eb 	bl	8007974 <USBD_CtlSendStatus>
      break;
 800759e:	e059      	b.n	8007654 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80075a0:	4b2f      	ldr	r3, [pc, #188]	; (8007660 <USBD_SetConfig+0x148>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d112      	bne.n	80075ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80075b0:	4b2b      	ldr	r3, [pc, #172]	; (8007660 <USBD_SetConfig+0x148>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	461a      	mov	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075ba:	4b29      	ldr	r3, [pc, #164]	; (8007660 <USBD_SetConfig+0x148>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff f912 	bl	80067ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f9d4 	bl	8007974 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075cc:	e042      	b.n	8007654 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80075ce:	4b24      	ldr	r3, [pc, #144]	; (8007660 <USBD_SetConfig+0x148>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d02a      	beq.n	8007632 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff f900 	bl	80067ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80075ea:	4b1d      	ldr	r3, [pc, #116]	; (8007660 <USBD_SetConfig+0x148>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075f4:	4b1a      	ldr	r3, [pc, #104]	; (8007660 <USBD_SetConfig+0x148>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff f8d9 	bl	80067b2 <USBD_SetClassConfig>
 8007600:	4603      	mov	r3, r0
 8007602:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00f      	beq.n	800762a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f903 	bl	8007818 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff f8e5 	bl	80067ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007628:	e014      	b.n	8007654 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f9a2 	bl	8007974 <USBD_CtlSendStatus>
      break;
 8007630:	e010      	b.n	8007654 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f99e 	bl	8007974 <USBD_CtlSendStatus>
      break;
 8007638:	e00c      	b.n	8007654 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f8eb 	bl	8007818 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007642:	4b07      	ldr	r3, [pc, #28]	; (8007660 <USBD_SetConfig+0x148>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff f8ce 	bl	80067ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800764e:	2303      	movs	r3, #3
 8007650:	73fb      	strb	r3, [r7, #15]
      break;
 8007652:	bf00      	nop
  }

  return ret;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000194 	.word	0x20000194

08007664 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	88db      	ldrh	r3, [r3, #6]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d004      	beq.n	8007680 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f8cd 	bl	8007818 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800767e:	e023      	b.n	80076c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	dc02      	bgt.n	8007692 <USBD_GetConfig+0x2e>
 800768c:	2b00      	cmp	r3, #0
 800768e:	dc03      	bgt.n	8007698 <USBD_GetConfig+0x34>
 8007690:	e015      	b.n	80076be <USBD_GetConfig+0x5a>
 8007692:	2b03      	cmp	r3, #3
 8007694:	d00b      	beq.n	80076ae <USBD_GetConfig+0x4a>
 8007696:	e012      	b.n	80076be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3308      	adds	r3, #8
 80076a2:	2201      	movs	r2, #1
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f927 	bl	80078fa <USBD_CtlSendData>
        break;
 80076ac:	e00c      	b.n	80076c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3304      	adds	r3, #4
 80076b2:	2201      	movs	r2, #1
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f91f 	bl	80078fa <USBD_CtlSendData>
        break;
 80076bc:	e004      	b.n	80076c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f8a9 	bl	8007818 <USBD_CtlError>
        break;
 80076c6:	bf00      	nop
}
 80076c8:	bf00      	nop
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d81e      	bhi.n	8007726 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	88db      	ldrh	r3, [r3, #6]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d004      	beq.n	80076fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f890 	bl	8007818 <USBD_CtlError>
        break;
 80076f8:	e01a      	b.n	8007730 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f043 0202 	orr.w	r2, r3, #2
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	330c      	adds	r3, #12
 800771a:	2202      	movs	r2, #2
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f8eb 	bl	80078fa <USBD_CtlSendData>
      break;
 8007724:	e004      	b.n	8007730 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f875 	bl	8007818 <USBD_CtlError>
      break;
 800772e:	bf00      	nop
  }
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	885b      	ldrh	r3, [r3, #2]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d106      	bne.n	8007758 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f90e 	bl	8007974 <USBD_CtlSendStatus>
  }
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007770:	b2db      	uxtb	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	2b02      	cmp	r3, #2
 8007776:	d80b      	bhi.n	8007790 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	885b      	ldrh	r3, [r3, #2]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d10c      	bne.n	800779a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f8f3 	bl	8007974 <USBD_CtlSendStatus>
      }
      break;
 800778e:	e004      	b.n	800779a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f840 	bl	8007818 <USBD_CtlError>
      break;
 8007798:	e000      	b.n	800779c <USBD_ClrFeature+0x3c>
      break;
 800779a:	bf00      	nop
  }
}
 800779c:	bf00      	nop
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	781a      	ldrb	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3301      	adds	r3, #1
 80077be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7ff fa92 	bl	8006cf8 <SWAPBYTE>
 80077d4:	4603      	mov	r3, r0
 80077d6:	461a      	mov	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3301      	adds	r3, #1
 80077e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3301      	adds	r3, #1
 80077e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7ff fa85 	bl	8006cf8 <SWAPBYTE>
 80077ee:	4603      	mov	r3, r0
 80077f0:	461a      	mov	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3301      	adds	r3, #1
 80077fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3301      	adds	r3, #1
 8007800:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7ff fa78 	bl	8006cf8 <SWAPBYTE>
 8007808:	4603      	mov	r3, r0
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	80da      	strh	r2, [r3, #6]
}
 8007810:	bf00      	nop
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007822:	2180      	movs	r1, #128	; 0x80
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fd3d 	bl	80082a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800782a:	2100      	movs	r1, #0
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fd39 	bl	80082a4 <USBD_LL_StallEP>
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b086      	sub	sp, #24
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d036      	beq.n	80078be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007854:	6938      	ldr	r0, [r7, #16]
 8007856:	f000 f836 	bl	80078c6 <USBD_GetLen>
 800785a:	4603      	mov	r3, r0
 800785c:	3301      	adds	r3, #1
 800785e:	b29b      	uxth	r3, r3
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	4413      	add	r3, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	7812      	ldrb	r2, [r2, #0]
 8007872:	701a      	strb	r2, [r3, #0]
  idx++;
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	3301      	adds	r3, #1
 8007878:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800787a:	7dfb      	ldrb	r3, [r7, #23]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	4413      	add	r3, r2
 8007880:	2203      	movs	r2, #3
 8007882:	701a      	strb	r2, [r3, #0]
  idx++;
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	3301      	adds	r3, #1
 8007888:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800788a:	e013      	b.n	80078b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	4413      	add	r3, r2
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	7812      	ldrb	r2, [r2, #0]
 8007896:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	3301      	adds	r3, #1
 800789c:	613b      	str	r3, [r7, #16]
    idx++;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	3301      	adds	r3, #1
 80078a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	4413      	add	r3, r2
 80078aa:	2200      	movs	r2, #0
 80078ac:	701a      	strb	r2, [r3, #0]
    idx++;
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	3301      	adds	r3, #1
 80078b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e7      	bne.n	800788c <USBD_GetString+0x52>
 80078bc:	e000      	b.n	80078c0 <USBD_GetString+0x86>
    return;
 80078be:	bf00      	nop
  }
}
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80078d6:	e005      	b.n	80078e4 <USBD_GetLen+0x1e>
  {
    len++;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	3301      	adds	r3, #1
 80078dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	3301      	adds	r3, #1
 80078e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f5      	bne.n	80078d8 <USBD_GetLen+0x12>
  }

  return len;
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2202      	movs	r2, #2
 800790a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	2100      	movs	r1, #0
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 fd8d 	bl	8008440 <USBD_LL_Transmit>

  return USBD_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	2100      	movs	r1, #0
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 fd7c 	bl	8008440 <USBD_LL_Transmit>

  return USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	2100      	movs	r1, #0
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 fda3 	bl	80084b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2204      	movs	r2, #4
 8007980:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007984:	2300      	movs	r3, #0
 8007986:	2200      	movs	r2, #0
 8007988:	2100      	movs	r1, #0
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fd58 	bl	8008440 <USBD_LL_Transmit>

  return USBD_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2205      	movs	r2, #5
 80079a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079aa:	2300      	movs	r3, #0
 80079ac:	2200      	movs	r2, #0
 80079ae:	2100      	movs	r1, #0
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fd7d 	bl	80084b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079c4:	2200      	movs	r2, #0
 80079c6:	4912      	ldr	r1, [pc, #72]	; (8007a10 <MX_USB_DEVICE_Init+0x50>)
 80079c8:	4812      	ldr	r0, [pc, #72]	; (8007a14 <MX_USB_DEVICE_Init+0x54>)
 80079ca:	f7fe fe84 	bl	80066d6 <USBD_Init>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079d4:	f7f8 fc7a 	bl	80002cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80079d8:	490f      	ldr	r1, [pc, #60]	; (8007a18 <MX_USB_DEVICE_Init+0x58>)
 80079da:	480e      	ldr	r0, [pc, #56]	; (8007a14 <MX_USB_DEVICE_Init+0x54>)
 80079dc:	f7fe feab 	bl	8006736 <USBD_RegisterClass>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079e6:	f7f8 fc71 	bl	80002cc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80079ea:	490c      	ldr	r1, [pc, #48]	; (8007a1c <MX_USB_DEVICE_Init+0x5c>)
 80079ec:	4809      	ldr	r0, [pc, #36]	; (8007a14 <MX_USB_DEVICE_Init+0x54>)
 80079ee:	f7fd fa5b 	bl	8004ea8 <USBD_MSC_RegisterStorage>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079f8:	f7f8 fc68 	bl	80002cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079fc:	4805      	ldr	r0, [pc, #20]	; (8007a14 <MX_USB_DEVICE_Init+0x54>)
 80079fe:	f7fe fec1 	bl	8006784 <USBD_Start>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a08:	f7f8 fc60 	bl	80002cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a0c:	bf00      	nop
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200000f4 	.word	0x200000f4
 8007a14:	20000198 	.word	0x20000198
 8007a18:	2000000c 	.word	0x2000000c
 8007a1c:	20000154 	.word	0x20000154

08007a20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	6039      	str	r1, [r7, #0]
 8007a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2212      	movs	r2, #18
 8007a30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a32:	4b03      	ldr	r3, [pc, #12]	; (8007a40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	20000114 	.word	0x20000114

08007a44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	6039      	str	r1, [r7, #0]
 8007a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2204      	movs	r2, #4
 8007a54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a56:	4b03      	ldr	r3, [pc, #12]	; (8007a64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	20000134 	.word	0x20000134

08007a68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	6039      	str	r1, [r7, #0]
 8007a72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a74:	79fb      	ldrb	r3, [r7, #7]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d105      	bne.n	8007a86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	4907      	ldr	r1, [pc, #28]	; (8007a9c <USBD_FS_ProductStrDescriptor+0x34>)
 8007a7e:	4808      	ldr	r0, [pc, #32]	; (8007aa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a80:	f7ff fedb 	bl	800783a <USBD_GetString>
 8007a84:	e004      	b.n	8007a90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	4904      	ldr	r1, [pc, #16]	; (8007a9c <USBD_FS_ProductStrDescriptor+0x34>)
 8007a8a:	4805      	ldr	r0, [pc, #20]	; (8007aa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a8c:	f7ff fed5 	bl	800783a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a90:	4b02      	ldr	r3, [pc, #8]	; (8007a9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20000468 	.word	0x20000468
 8007aa0:	08008690 	.word	0x08008690

08007aa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	4603      	mov	r3, r0
 8007aac:	6039      	str	r1, [r7, #0]
 8007aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	4904      	ldr	r1, [pc, #16]	; (8007ac4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ab4:	4804      	ldr	r0, [pc, #16]	; (8007ac8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ab6:	f7ff fec0 	bl	800783a <USBD_GetString>
  return USBD_StrDesc;
 8007aba:	4b02      	ldr	r3, [pc, #8]	; (8007ac4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20000468 	.word	0x20000468
 8007ac8:	080086a4 	.word	0x080086a4

08007acc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	6039      	str	r1, [r7, #0]
 8007ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	221a      	movs	r2, #26
 8007adc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ade:	f000 f855 	bl	8007b8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ae2:	4b02      	ldr	r3, [pc, #8]	; (8007aec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20000138 	.word	0x20000138

08007af0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d105      	bne.n	8007b0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	4907      	ldr	r1, [pc, #28]	; (8007b24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b06:	4808      	ldr	r0, [pc, #32]	; (8007b28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b08:	f7ff fe97 	bl	800783a <USBD_GetString>
 8007b0c:	e004      	b.n	8007b18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	4904      	ldr	r1, [pc, #16]	; (8007b24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b12:	4805      	ldr	r0, [pc, #20]	; (8007b28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b14:	f7ff fe91 	bl	800783a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b18:	4b02      	ldr	r3, [pc, #8]	; (8007b24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20000468 	.word	0x20000468
 8007b28:	080086b8 	.word	0x080086b8

08007b2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	6039      	str	r1, [r7, #0]
 8007b36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d105      	bne.n	8007b4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	4907      	ldr	r1, [pc, #28]	; (8007b60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b42:	4808      	ldr	r0, [pc, #32]	; (8007b64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b44:	f7ff fe79 	bl	800783a <USBD_GetString>
 8007b48:	e004      	b.n	8007b54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	4904      	ldr	r1, [pc, #16]	; (8007b60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b4e:	4805      	ldr	r0, [pc, #20]	; (8007b64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b50:	f7ff fe73 	bl	800783a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b54:	4b02      	ldr	r3, [pc, #8]	; (8007b60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000468 	.word	0x20000468
 8007b64:	080086c4 	.word	0x080086c4

08007b68 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	220c      	movs	r2, #12
 8007b78:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007b7a:	4b03      	ldr	r3, [pc, #12]	; (8007b88 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	20000128 	.word	0x20000128

08007b8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b92:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <Get_SerialNum+0x44>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b98:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <Get_SerialNum+0x48>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b9e:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <Get_SerialNum+0x4c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4413      	add	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bb2:	2208      	movs	r2, #8
 8007bb4:	4909      	ldr	r1, [pc, #36]	; (8007bdc <Get_SerialNum+0x50>)
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 f814 	bl	8007be4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bbc:	2204      	movs	r2, #4
 8007bbe:	4908      	ldr	r1, [pc, #32]	; (8007be0 <Get_SerialNum+0x54>)
 8007bc0:	68b8      	ldr	r0, [r7, #8]
 8007bc2:	f000 f80f 	bl	8007be4 <IntToUnicode>
  }
}
 8007bc6:	bf00      	nop
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	1fff7590 	.word	0x1fff7590
 8007bd4:	1fff7594 	.word	0x1fff7594
 8007bd8:	1fff7598 	.word	0x1fff7598
 8007bdc:	2000013a 	.word	0x2000013a
 8007be0:	2000014a 	.word	0x2000014a

08007be4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	75fb      	strb	r3, [r7, #23]
 8007bfa:	e027      	b.n	8007c4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	0f1b      	lsrs	r3, r3, #28
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	d80b      	bhi.n	8007c1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	0f1b      	lsrs	r3, r3, #28
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	440b      	add	r3, r1
 8007c14:	3230      	adds	r2, #48	; 0x30
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	701a      	strb	r2, [r3, #0]
 8007c1a:	e00a      	b.n	8007c32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	0f1b      	lsrs	r3, r3, #28
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	4619      	mov	r1, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	440b      	add	r3, r1
 8007c2c:	3237      	adds	r2, #55	; 0x37
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4413      	add	r3, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	75fb      	strb	r3, [r7, #23]
 8007c4c:	7dfa      	ldrb	r2, [r7, #23]
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d3d3      	bcc.n	8007bfc <IntToUnicode+0x18>
  }
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	4603      	mov	r3, r0
 8007c6a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8007c6c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	4603      	mov	r3, r0
 8007c82:	60b9      	str	r1, [r7, #8]
 8007c84:	607a      	str	r2, [r7, #4]
 8007c86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007c8e:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c96:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8007c98:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	4603      	mov	r3, r0
 8007cae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007cb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007cc8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b085      	sub	sp, #20
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8007cea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	607a      	str	r2, [r7, #4]
 8007d02:	461a      	mov	r2, r3
 8007d04:	4603      	mov	r3, r0
 8007d06:	73fb      	strb	r3, [r7, #15]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8007d0c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8007d1e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
	...

08007d2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b0ac      	sub	sp, #176	; 0xb0
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	605a      	str	r2, [r3, #4]
 8007d3e:	609a      	str	r2, [r3, #8]
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007d44:	f107 0314 	add.w	r3, r7, #20
 8007d48:	2288      	movs	r2, #136	; 0x88
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fc8b 	bl	8008668 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d5a:	d173      	bne.n	8007e44 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d60:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007d62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007d66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8007d72:	2318      	movs	r3, #24
 8007d74:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8007d76:	2307      	movs	r3, #7
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8007d82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d86:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007d88:	f107 0314 	add.w	r3, r7, #20
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fa fec7 	bl	8002b20 <HAL_RCCEx_PeriphCLKConfig>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8007d98:	f7f8 fa98 	bl	80002cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d9c:	4b2b      	ldr	r3, [pc, #172]	; (8007e4c <HAL_PCD_MspInit+0x120>)
 8007d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da0:	4a2a      	ldr	r2, [pc, #168]	; (8007e4c <HAL_PCD_MspInit+0x120>)
 8007da2:	f043 0301 	orr.w	r3, r3, #1
 8007da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007da8:	4b28      	ldr	r3, [pc, #160]	; (8007e4c <HAL_PCD_MspInit+0x120>)
 8007daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007db4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007dce:	230a      	movs	r3, #10
 8007dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007dde:	f7f8 fcc1 	bl	8000764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007de2:	4b1a      	ldr	r3, [pc, #104]	; (8007e4c <HAL_PCD_MspInit+0x120>)
 8007de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de6:	4a19      	ldr	r2, [pc, #100]	; (8007e4c <HAL_PCD_MspInit+0x120>)
 8007de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007dee:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <HAL_PCD_MspInit+0x120>)
 8007df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dfa:	4b14      	ldr	r3, [pc, #80]	; (8007e4c <HAL_PCD_MspInit+0x120>)
 8007dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d114      	bne.n	8007e30 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e06:	4b11      	ldr	r3, [pc, #68]	; (8007e4c <HAL_PCD_MspInit+0x120>)
 8007e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0a:	4a10      	ldr	r2, [pc, #64]	; (8007e4c <HAL_PCD_MspInit+0x120>)
 8007e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e10:	6593      	str	r3, [r2, #88]	; 0x58
 8007e12:	4b0e      	ldr	r3, [pc, #56]	; (8007e4c <HAL_PCD_MspInit+0x120>)
 8007e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e1a:	60bb      	str	r3, [r7, #8]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007e1e:	f7fa f89b 	bl	8001f58 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e22:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <HAL_PCD_MspInit+0x120>)
 8007e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e26:	4a09      	ldr	r2, [pc, #36]	; (8007e4c <HAL_PCD_MspInit+0x120>)
 8007e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8007e2e:	e001      	b.n	8007e34 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007e30:	f7fa f892 	bl	8001f58 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e34:	2200      	movs	r2, #0
 8007e36:	2100      	movs	r1, #0
 8007e38:	2043      	movs	r0, #67	; 0x43
 8007e3a:	f7f8 fc5c 	bl	80006f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e3e:	2043      	movs	r0, #67	; 0x43
 8007e40:	f7f8 fc75 	bl	800072e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e44:	bf00      	nop
 8007e46:	37b0      	adds	r7, #176	; 0xb0
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40021000 	.word	0x40021000

08007e50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f7fe fcd7 	bl	800681a <USBD_LL_SetupStage>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007e86:	78fa      	ldrb	r2, [r7, #3]
 8007e88:	6879      	ldr	r1, [r7, #4]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	440b      	add	r3, r1
 8007e94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	f7fe fd11 	bl	80068c4 <USBD_LL_DataOutStage>
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ebc:	78fa      	ldrb	r2, [r7, #3]
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	440b      	add	r3, r1
 8007eca:	334c      	adds	r3, #76	; 0x4c
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	f7fe fd5a 	bl	800698a <USBD_LL_DataInStage>
}
 8007ed6:	bf00      	nop
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fe fe6e 	bl	8006bce <USBD_LL_SOF>
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f02:	2301      	movs	r3, #1
 8007f04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d001      	beq.n	8007f12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f0e:	f7f8 f9dd 	bl	80002cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f18:	7bfa      	ldrb	r2, [r7, #15]
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe fe18 	bl	8006b52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe fdc4 	bl	8006ab6 <USBD_LL_Reset>
}
 8007f2e:	bf00      	nop
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	6812      	ldr	r2, [r2, #0]
 8007f4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f52:	f043 0301 	orr.w	r3, r3, #1
 8007f56:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe fe07 	bl	8006b72 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f6c:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <HAL_PCD_SuspendCallback+0x48>)
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	4a03      	ldr	r2, [pc, #12]	; (8007f80 <HAL_PCD_SuspendCallback+0x48>)
 8007f72:	f043 0306 	orr.w	r3, r3, #6
 8007f76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	e000ed00 	.word	0xe000ed00

08007f84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f9e:	f023 0301 	bic.w	r3, r3, #1
 8007fa2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d007      	beq.n	8007fbc <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fac:	4b08      	ldr	r3, [pc, #32]	; (8007fd0 <HAL_PCD_ResumeCallback+0x4c>)
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	4a07      	ldr	r2, [pc, #28]	; (8007fd0 <HAL_PCD_ResumeCallback+0x4c>)
 8007fb2:	f023 0306 	bic.w	r3, r3, #6
 8007fb6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007fb8:	f000 fb2c 	bl	8008614 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe fdeb 	bl	8006b9e <USBD_LL_Resume>
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	e000ed00 	.word	0xe000ed00

08007fd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	4611      	mov	r1, r2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe fe37 	bl	8006c5e <USBD_LL_IsoOUTIncomplete>
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f7fe fdff 	bl	8006c12 <USBD_LL_IsoINIncomplete>
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fe3d 	bl	8006caa <USBD_LL_DevConnected>
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe fe3a 	bl	8006cc0 <USBD_LL_DevDisconnected>
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d13c      	bne.n	80080de <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008064:	4a20      	ldr	r2, [pc, #128]	; (80080e8 <USBD_LL_Init+0x94>)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a1e      	ldr	r2, [pc, #120]	; (80080e8 <USBD_LL_Init+0x94>)
 8008070:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008074:	4b1c      	ldr	r3, [pc, #112]	; (80080e8 <USBD_LL_Init+0x94>)
 8008076:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800807a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800807c:	4b1a      	ldr	r3, [pc, #104]	; (80080e8 <USBD_LL_Init+0x94>)
 800807e:	2206      	movs	r2, #6
 8008080:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008082:	4b19      	ldr	r3, [pc, #100]	; (80080e8 <USBD_LL_Init+0x94>)
 8008084:	2202      	movs	r2, #2
 8008086:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008088:	4b17      	ldr	r3, [pc, #92]	; (80080e8 <USBD_LL_Init+0x94>)
 800808a:	2202      	movs	r2, #2
 800808c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800808e:	4b16      	ldr	r3, [pc, #88]	; (80080e8 <USBD_LL_Init+0x94>)
 8008090:	2200      	movs	r2, #0
 8008092:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008094:	4b14      	ldr	r3, [pc, #80]	; (80080e8 <USBD_LL_Init+0x94>)
 8008096:	2200      	movs	r2, #0
 8008098:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800809a:	4b13      	ldr	r3, [pc, #76]	; (80080e8 <USBD_LL_Init+0x94>)
 800809c:	2200      	movs	r2, #0
 800809e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80080a0:	4b11      	ldr	r3, [pc, #68]	; (80080e8 <USBD_LL_Init+0x94>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80080a6:	4b10      	ldr	r3, [pc, #64]	; (80080e8 <USBD_LL_Init+0x94>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80080ac:	4b0e      	ldr	r3, [pc, #56]	; (80080e8 <USBD_LL_Init+0x94>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80080b2:	480d      	ldr	r0, [pc, #52]	; (80080e8 <USBD_LL_Init+0x94>)
 80080b4:	f7f8 fd00 	bl	8000ab8 <HAL_PCD_Init>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80080be:	f7f8 f905 	bl	80002cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80080c2:	2180      	movs	r1, #128	; 0x80
 80080c4:	4808      	ldr	r0, [pc, #32]	; (80080e8 <USBD_LL_Init+0x94>)
 80080c6:	f7f9 feae 	bl	8001e26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80080ca:	2240      	movs	r2, #64	; 0x40
 80080cc:	2100      	movs	r1, #0
 80080ce:	4806      	ldr	r0, [pc, #24]	; (80080e8 <USBD_LL_Init+0x94>)
 80080d0:	f7f9 fe62 	bl	8001d98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080d4:	2280      	movs	r2, #128	; 0x80
 80080d6:	2101      	movs	r1, #1
 80080d8:	4803      	ldr	r0, [pc, #12]	; (80080e8 <USBD_LL_Init+0x94>)
 80080da:	f7f9 fe5d 	bl	8001d98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	20000668 	.word	0x20000668

080080ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008102:	4618      	mov	r0, r3
 8008104:	f7f8 fdfc 	bl	8000d00 <HAL_PCD_Start>
 8008108:	4603      	mov	r3, r0
 800810a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	2b03      	cmp	r3, #3
 8008110:	d816      	bhi.n	8008140 <USBD_LL_Start+0x54>
 8008112:	a201      	add	r2, pc, #4	; (adr r2, 8008118 <USBD_LL_Start+0x2c>)
 8008114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008118:	08008129 	.word	0x08008129
 800811c:	0800812f 	.word	0x0800812f
 8008120:	08008135 	.word	0x08008135
 8008124:	0800813b 	.word	0x0800813b
    case HAL_OK :
      usb_status = USBD_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	73fb      	strb	r3, [r7, #15]
    break;
 800812c:	e00b      	b.n	8008146 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800812e:	2303      	movs	r3, #3
 8008130:	73fb      	strb	r3, [r7, #15]
    break;
 8008132:	e008      	b.n	8008146 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008134:	2301      	movs	r3, #1
 8008136:	73fb      	strb	r3, [r7, #15]
    break;
 8008138:	e005      	b.n	8008146 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800813a:	2303      	movs	r3, #3
 800813c:	73fb      	strb	r3, [r7, #15]
    break;
 800813e:	e002      	b.n	8008146 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008140:	2303      	movs	r3, #3
 8008142:	73fb      	strb	r3, [r7, #15]
    break;
 8008144:	bf00      	nop
  }
  return usb_status;
 8008146:	7bfb      	ldrb	r3, [r7, #15]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	4608      	mov	r0, r1
 800815a:	4611      	mov	r1, r2
 800815c:	461a      	mov	r2, r3
 800815e:	4603      	mov	r3, r0
 8008160:	70fb      	strb	r3, [r7, #3]
 8008162:	460b      	mov	r3, r1
 8008164:	70bb      	strb	r3, [r7, #2]
 8008166:	4613      	mov	r3, r2
 8008168:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008178:	78bb      	ldrb	r3, [r7, #2]
 800817a:	883a      	ldrh	r2, [r7, #0]
 800817c:	78f9      	ldrb	r1, [r7, #3]
 800817e:	f7f9 faa6 	bl	80016ce <HAL_PCD_EP_Open>
 8008182:	4603      	mov	r3, r0
 8008184:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b03      	cmp	r3, #3
 800818a:	d817      	bhi.n	80081bc <USBD_LL_OpenEP+0x6c>
 800818c:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <USBD_LL_OpenEP+0x44>)
 800818e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008192:	bf00      	nop
 8008194:	080081a5 	.word	0x080081a5
 8008198:	080081ab 	.word	0x080081ab
 800819c:	080081b1 	.word	0x080081b1
 80081a0:	080081b7 	.word	0x080081b7
    case HAL_OK :
      usb_status = USBD_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]
    break;
 80081a8:	e00b      	b.n	80081c2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081aa:	2303      	movs	r3, #3
 80081ac:	73fb      	strb	r3, [r7, #15]
    break;
 80081ae:	e008      	b.n	80081c2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081b0:	2301      	movs	r3, #1
 80081b2:	73fb      	strb	r3, [r7, #15]
    break;
 80081b4:	e005      	b.n	80081c2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081b6:	2303      	movs	r3, #3
 80081b8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ba:	e002      	b.n	80081c2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80081bc:	2303      	movs	r3, #3
 80081be:	73fb      	strb	r3, [r7, #15]
    break;
 80081c0:	bf00      	nop
  }
  return usb_status;
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	4611      	mov	r1, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7f9 fad7 	bl	800179e <HAL_PCD_EP_Close>
 80081f0:	4603      	mov	r3, r0
 80081f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d816      	bhi.n	8008228 <USBD_LL_CloseEP+0x5c>
 80081fa:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <USBD_LL_CloseEP+0x34>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	08008211 	.word	0x08008211
 8008204:	08008217 	.word	0x08008217
 8008208:	0800821d 	.word	0x0800821d
 800820c:	08008223 	.word	0x08008223
    case HAL_OK :
      usb_status = USBD_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]
    break;
 8008214:	e00b      	b.n	800822e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008216:	2303      	movs	r3, #3
 8008218:	73fb      	strb	r3, [r7, #15]
    break;
 800821a:	e008      	b.n	800822e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
    break;
 8008220:	e005      	b.n	800822e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008222:	2303      	movs	r3, #3
 8008224:	73fb      	strb	r3, [r7, #15]
    break;
 8008226:	e002      	b.n	800822e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008228:	2303      	movs	r3, #3
 800822a:	73fb      	strb	r3, [r7, #15]
    break;
 800822c:	bf00      	nop
  }
  return usb_status;
 800822e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008252:	78fa      	ldrb	r2, [r7, #3]
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f7f9 fc67 	bl	8001b2a <HAL_PCD_EP_Flush>
 800825c:	4603      	mov	r3, r0
 800825e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b03      	cmp	r3, #3
 8008264:	d816      	bhi.n	8008294 <USBD_LL_FlushEP+0x5c>
 8008266:	a201      	add	r2, pc, #4	; (adr r2, 800826c <USBD_LL_FlushEP+0x34>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	0800827d 	.word	0x0800827d
 8008270:	08008283 	.word	0x08008283
 8008274:	08008289 	.word	0x08008289
 8008278:	0800828f 	.word	0x0800828f
    case HAL_OK :
      usb_status = USBD_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
    break;
 8008280:	e00b      	b.n	800829a <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008282:	2303      	movs	r3, #3
 8008284:	73fb      	strb	r3, [r7, #15]
    break;
 8008286:	e008      	b.n	800829a <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008288:	2301      	movs	r3, #1
 800828a:	73fb      	strb	r3, [r7, #15]
    break;
 800828c:	e005      	b.n	800829a <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800828e:	2303      	movs	r3, #3
 8008290:	73fb      	strb	r3, [r7, #15]
    break;
 8008292:	e002      	b.n	800829a <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008294:	2303      	movs	r3, #3
 8008296:	73fb      	strb	r3, [r7, #15]
    break;
 8008298:	bf00      	nop
  }
  return usb_status;
 800829a:	7bfb      	ldrb	r3, [r7, #15]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082be:	78fa      	ldrb	r2, [r7, #3]
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7f9 fb48 	bl	8001958 <HAL_PCD_EP_SetStall>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d816      	bhi.n	8008300 <USBD_LL_StallEP+0x5c>
 80082d2:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <USBD_LL_StallEP+0x34>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	080082e9 	.word	0x080082e9
 80082dc:	080082ef 	.word	0x080082ef
 80082e0:	080082f5 	.word	0x080082f5
 80082e4:	080082fb 	.word	0x080082fb
    case HAL_OK :
      usb_status = USBD_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
    break;
 80082ec:	e00b      	b.n	8008306 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082ee:	2303      	movs	r3, #3
 80082f0:	73fb      	strb	r3, [r7, #15]
    break;
 80082f2:	e008      	b.n	8008306 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082f4:	2301      	movs	r3, #1
 80082f6:	73fb      	strb	r3, [r7, #15]
    break;
 80082f8:	e005      	b.n	8008306 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082fa:	2303      	movs	r3, #3
 80082fc:	73fb      	strb	r3, [r7, #15]
    break;
 80082fe:	e002      	b.n	8008306 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008300:	2303      	movs	r3, #3
 8008302:	73fb      	strb	r3, [r7, #15]
    break;
 8008304:	bf00      	nop
  }
  return usb_status;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800832a:	78fa      	ldrb	r2, [r7, #3]
 800832c:	4611      	mov	r1, r2
 800832e:	4618      	mov	r0, r3
 8008330:	f7f9 fb74 	bl	8001a1c <HAL_PCD_EP_ClrStall>
 8008334:	4603      	mov	r3, r0
 8008336:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	2b03      	cmp	r3, #3
 800833c:	d816      	bhi.n	800836c <USBD_LL_ClearStallEP+0x5c>
 800833e:	a201      	add	r2, pc, #4	; (adr r2, 8008344 <USBD_LL_ClearStallEP+0x34>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	08008355 	.word	0x08008355
 8008348:	0800835b 	.word	0x0800835b
 800834c:	08008361 	.word	0x08008361
 8008350:	08008367 	.word	0x08008367
    case HAL_OK :
      usb_status = USBD_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	73fb      	strb	r3, [r7, #15]
    break;
 8008358:	e00b      	b.n	8008372 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800835a:	2303      	movs	r3, #3
 800835c:	73fb      	strb	r3, [r7, #15]
    break;
 800835e:	e008      	b.n	8008372 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008360:	2301      	movs	r3, #1
 8008362:	73fb      	strb	r3, [r7, #15]
    break;
 8008364:	e005      	b.n	8008372 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008366:	2303      	movs	r3, #3
 8008368:	73fb      	strb	r3, [r7, #15]
    break;
 800836a:	e002      	b.n	8008372 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800836c:	2303      	movs	r3, #3
 800836e:	73fb      	strb	r3, [r7, #15]
    break;
 8008370:	bf00      	nop
  }
  return usb_status;
 8008372:	7bfb      	ldrb	r3, [r7, #15]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800838e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008394:	2b00      	cmp	r3, #0
 8008396:	da0b      	bge.n	80083b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800839e:	68f9      	ldr	r1, [r7, #12]
 80083a0:	4613      	mov	r3, r2
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	333e      	adds	r3, #62	; 0x3e
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	e00b      	b.n	80083c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083b6:	68f9      	ldr	r1, [r7, #12]
 80083b8:	4613      	mov	r3, r2
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80083c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083ee:	78fa      	ldrb	r2, [r7, #3]
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7f9 f946 	bl	8001684 <HAL_PCD_SetAddress>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d816      	bhi.n	8008430 <USBD_LL_SetUSBAddress+0x5c>
 8008402:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <USBD_LL_SetUSBAddress+0x34>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	08008419 	.word	0x08008419
 800840c:	0800841f 	.word	0x0800841f
 8008410:	08008425 	.word	0x08008425
 8008414:	0800842b 	.word	0x0800842b
    case HAL_OK :
      usb_status = USBD_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
    break;
 800841c:	e00b      	b.n	8008436 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800841e:	2303      	movs	r3, #3
 8008420:	73fb      	strb	r3, [r7, #15]
    break;
 8008422:	e008      	b.n	8008436 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008424:	2301      	movs	r3, #1
 8008426:	73fb      	strb	r3, [r7, #15]
    break;
 8008428:	e005      	b.n	8008436 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800842a:	2303      	movs	r3, #3
 800842c:	73fb      	strb	r3, [r7, #15]
    break;
 800842e:	e002      	b.n	8008436 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008430:	2303      	movs	r3, #3
 8008432:	73fb      	strb	r3, [r7, #15]
    break;
 8008434:	bf00      	nop
  }
  return usb_status;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	607a      	str	r2, [r7, #4]
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	460b      	mov	r3, r1
 800844e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800845e:	7af9      	ldrb	r1, [r7, #11]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	f7f9 fa3b 	bl	80018de <HAL_PCD_EP_Transmit>
 8008468:	4603      	mov	r3, r0
 800846a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800846c:	7dbb      	ldrb	r3, [r7, #22]
 800846e:	2b03      	cmp	r3, #3
 8008470:	d816      	bhi.n	80084a0 <USBD_LL_Transmit+0x60>
 8008472:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <USBD_LL_Transmit+0x38>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	08008489 	.word	0x08008489
 800847c:	0800848f 	.word	0x0800848f
 8008480:	08008495 	.word	0x08008495
 8008484:	0800849b 	.word	0x0800849b
    case HAL_OK :
      usb_status = USBD_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	75fb      	strb	r3, [r7, #23]
    break;
 800848c:	e00b      	b.n	80084a6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800848e:	2303      	movs	r3, #3
 8008490:	75fb      	strb	r3, [r7, #23]
    break;
 8008492:	e008      	b.n	80084a6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008494:	2301      	movs	r3, #1
 8008496:	75fb      	strb	r3, [r7, #23]
    break;
 8008498:	e005      	b.n	80084a6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800849a:	2303      	movs	r3, #3
 800849c:	75fb      	strb	r3, [r7, #23]
    break;
 800849e:	e002      	b.n	80084a6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80084a0:	2303      	movs	r3, #3
 80084a2:	75fb      	strb	r3, [r7, #23]
    break;
 80084a4:	bf00      	nop
  }
  return usb_status;
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	607a      	str	r2, [r7, #4]
 80084ba:	603b      	str	r3, [r7, #0]
 80084bc:	460b      	mov	r3, r1
 80084be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80084ce:	7af9      	ldrb	r1, [r7, #11]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	f7f9 f9ad 	bl	8001832 <HAL_PCD_EP_Receive>
 80084d8:	4603      	mov	r3, r0
 80084da:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80084dc:	7dbb      	ldrb	r3, [r7, #22]
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d816      	bhi.n	8008510 <USBD_LL_PrepareReceive+0x60>
 80084e2:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <USBD_LL_PrepareReceive+0x38>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	080084f9 	.word	0x080084f9
 80084ec:	080084ff 	.word	0x080084ff
 80084f0:	08008505 	.word	0x08008505
 80084f4:	0800850b 	.word	0x0800850b
    case HAL_OK :
      usb_status = USBD_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	75fb      	strb	r3, [r7, #23]
    break;
 80084fc:	e00b      	b.n	8008516 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084fe:	2303      	movs	r3, #3
 8008500:	75fb      	strb	r3, [r7, #23]
    break;
 8008502:	e008      	b.n	8008516 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008504:	2301      	movs	r3, #1
 8008506:	75fb      	strb	r3, [r7, #23]
    break;
 8008508:	e005      	b.n	8008516 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800850a:	2303      	movs	r3, #3
 800850c:	75fb      	strb	r3, [r7, #23]
    break;
 800850e:	e002      	b.n	8008516 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008510:	2303      	movs	r3, #3
 8008512:	75fb      	strb	r3, [r7, #23]
    break;
 8008514:	bf00      	nop
  }
  return usb_status;
 8008516:	7dfb      	ldrb	r3, [r7, #23]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008532:	78fa      	ldrb	r2, [r7, #3]
 8008534:	4611      	mov	r1, r2
 8008536:	4618      	mov	r0, r3
 8008538:	f7f9 f9b9 	bl	80018ae <HAL_PCD_EP_GetRxCount>
 800853c:	4603      	mov	r3, r0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <HAL_PCDEx_LPM_Callback+0x18>
 800855a:	2b01      	cmp	r3, #1
 800855c:	d01f      	beq.n	800859e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800855e:	e03b      	b.n	80085d8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008568:	f000 f854 	bl	8008614 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800856c:	4b1c      	ldr	r3, [pc, #112]	; (80085e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	4a1b      	ldr	r2, [pc, #108]	; (80085e0 <HAL_PCDEx_LPM_Callback+0x98>)
 8008572:	f023 0306 	bic.w	r3, r3, #6
 8008576:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800858a:	f023 0301 	bic.w	r3, r3, #1
 800858e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe fb01 	bl	8006b9e <USBD_LL_Resume>
    break;
 800859c:	e01c      	b.n	80085d8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	6812      	ldr	r2, [r2, #0]
 80085ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085b0:	f043 0301 	orr.w	r3, r3, #1
 80085b4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fe fad8 	bl	8006b72 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085ca:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <HAL_PCDEx_LPM_Callback+0x98>)
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	4a04      	ldr	r2, [pc, #16]	; (80085e0 <HAL_PCDEx_LPM_Callback+0x98>)
 80085d0:	f043 0306 	orr.w	r3, r3, #6
 80085d4:	6113      	str	r3, [r2, #16]
    break;
 80085d6:	bf00      	nop
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	e000ed00 	.word	0xe000ed00

080085e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085ec:	4b03      	ldr	r3, [pc, #12]	; (80085fc <USBD_static_malloc+0x18>)
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	20000b74 	.word	0x20000b74

08008600 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]

}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008618:	f7f7 fde1 	bl	80001de <SystemClock_Config>
}
 800861c:	bf00      	nop
 800861e:	bd80      	pop	{r7, pc}

08008620 <__libc_init_array>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	4d0d      	ldr	r5, [pc, #52]	; (8008658 <__libc_init_array+0x38>)
 8008624:	4c0d      	ldr	r4, [pc, #52]	; (800865c <__libc_init_array+0x3c>)
 8008626:	1b64      	subs	r4, r4, r5
 8008628:	10a4      	asrs	r4, r4, #2
 800862a:	2600      	movs	r6, #0
 800862c:	42a6      	cmp	r6, r4
 800862e:	d109      	bne.n	8008644 <__libc_init_array+0x24>
 8008630:	4d0b      	ldr	r5, [pc, #44]	; (8008660 <__libc_init_array+0x40>)
 8008632:	4c0c      	ldr	r4, [pc, #48]	; (8008664 <__libc_init_array+0x44>)
 8008634:	f000 f820 	bl	8008678 <_init>
 8008638:	1b64      	subs	r4, r4, r5
 800863a:	10a4      	asrs	r4, r4, #2
 800863c:	2600      	movs	r6, #0
 800863e:	42a6      	cmp	r6, r4
 8008640:	d105      	bne.n	800864e <__libc_init_array+0x2e>
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	f855 3b04 	ldr.w	r3, [r5], #4
 8008648:	4798      	blx	r3
 800864a:	3601      	adds	r6, #1
 800864c:	e7ee      	b.n	800862c <__libc_init_array+0xc>
 800864e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008652:	4798      	blx	r3
 8008654:	3601      	adds	r6, #1
 8008656:	e7f2      	b.n	800863e <__libc_init_array+0x1e>
 8008658:	08008738 	.word	0x08008738
 800865c:	08008738 	.word	0x08008738
 8008660:	08008738 	.word	0x08008738
 8008664:	0800873c 	.word	0x0800873c

08008668 <memset>:
 8008668:	4402      	add	r2, r0
 800866a:	4603      	mov	r3, r0
 800866c:	4293      	cmp	r3, r2
 800866e:	d100      	bne.n	8008672 <memset+0xa>
 8008670:	4770      	bx	lr
 8008672:	f803 1b01 	strb.w	r1, [r3], #1
 8008676:	e7f9      	b.n	800866c <memset+0x4>

08008678 <_init>:
 8008678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867a:	bf00      	nop
 800867c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867e:	bc08      	pop	{r3}
 8008680:	469e      	mov	lr, r3
 8008682:	4770      	bx	lr

08008684 <_fini>:
 8008684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008686:	bf00      	nop
 8008688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868a:	bc08      	pop	{r3}
 800868c:	469e      	mov	lr, r3
 800868e:	4770      	bx	lr
