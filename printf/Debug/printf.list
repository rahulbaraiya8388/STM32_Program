
printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002764  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002934  08002934  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800293c  0800293c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800293c  0800293c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002940  08002940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  080029b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080029b4  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005cd2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c5  00000000  00000000  00025d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  00027230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  000278f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b0b  00000000  00000000  00027f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000752b  00000000  00000000  0003da43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082ba2  00000000  00000000  00044f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7b10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002100  00000000  00000000  000c7b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08002888 	.word	0x08002888

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08002888 	.word	0x08002888

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 f9ff 	bl	800088a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f80a 	bl	80004a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f880 	bl	8000594 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000494:	f000 f854 	bl	8000540 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//  	  char buff[] = "Hello";
//	HAL_UART_Transmit(&huart2,(uint8_t *)buff,sizeof(buff),1000);

  printf("Hello ninj\r\n");
 8000498:	4801      	ldr	r0, [pc, #4]	; (80004a0 <main+0x1c>)
 800049a:	f001 fd6d 	bl	8001f78 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800049e:	e7fe      	b.n	800049e <main+0x1a>
 80004a0:	080028a0 	.word	0x080028a0

080004a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b092      	sub	sp, #72	; 0x48
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	2234      	movs	r2, #52	; 0x34
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fcea 	bl	8001e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	463b      	mov	r3, r7
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
 80004c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c6:	4b1d      	ldr	r3, [pc, #116]	; (800053c <SystemClock_Config+0x98>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004ce:	4a1b      	ldr	r2, [pc, #108]	; (800053c <SystemClock_Config+0x98>)
 80004d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004d4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d6:	2302      	movs	r3, #2
 80004d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004da:	2301      	movs	r3, #1
 80004dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004de:	2310      	movs	r3, #16
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e2:	2302      	movs	r3, #2
 80004e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004e6:	2300      	movs	r3, #0
 80004e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80004f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80004f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fc98 	bl	8000e30 <HAL_RCC_OscConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000506:	f000 f85b 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050a:	230f      	movs	r3, #15
 800050c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050e:	2303      	movs	r3, #3
 8000510:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800051e:	463b      	mov	r3, r7
 8000520:	2101      	movs	r1, #1
 8000522:	4618      	mov	r0, r3
 8000524:	f000 ffb4 	bl	8001490 <HAL_RCC_ClockConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800052e:	f000 f847 	bl	80005c0 <Error_Handler>
  }
}
 8000532:	bf00      	nop
 8000534:	3748      	adds	r7, #72	; 0x48
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40007000 	.word	0x40007000

08000540 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_USART2_UART_Init+0x4c>)
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <MX_USART2_UART_Init+0x50>)
 8000548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <MX_USART2_UART_Init+0x4c>)
 800054c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_USART2_UART_Init+0x4c>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_USART2_UART_Init+0x4c>)
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <MX_USART2_UART_Init+0x4c>)
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_USART2_UART_Init+0x4c>)
 8000566:	220c      	movs	r2, #12
 8000568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <MX_USART2_UART_Init+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_USART2_UART_Init+0x4c>)
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000576:	4805      	ldr	r0, [pc, #20]	; (800058c <MX_USART2_UART_Init+0x4c>)
 8000578:	f001 fa50 	bl	8001a1c <HAL_UART_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000582:	f000 f81d 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2000008c 	.word	0x2000008c
 8000590:	40004400 	.word	0x40004400

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_GPIO_Init+0x28>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <MX_GPIO_Init+0x28>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	61d3      	str	r3, [r2, #28]
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <MX_GPIO_Init+0x28>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40023800 	.word	0x40023800

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_MspInit+0x5c>)
 80005d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <HAL_MspInit+0x5c>)
 80005d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005dc:	6253      	str	r3, [r2, #36]	; 0x24
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_MspInit+0x5c>)
 80005e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_MspInit+0x5c>)
 80005ec:	6a1b      	ldr	r3, [r3, #32]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_MspInit+0x5c>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6213      	str	r3, [r2, #32]
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <HAL_MspInit+0x5c>)
 80005f8:	6a1b      	ldr	r3, [r3, #32]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_MspInit+0x5c>)
 8000604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <HAL_MspInit+0x5c>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	6253      	str	r3, [r2, #36]	; 0x24
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_MspInit+0x5c>)
 8000610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800061a:	2007      	movs	r0, #7
 800061c:	f000 fa54 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800

0800062c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <HAL_UART_MspInit+0x7c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d127      	bne.n	800069e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_UART_MspInit+0x80>)
 8000650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <HAL_UART_MspInit+0x80>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	6253      	str	r3, [r2, #36]	; 0x24
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_UART_MspInit+0x80>)
 800065c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <HAL_UART_MspInit+0x80>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a10      	ldr	r2, [pc, #64]	; (80006ac <HAL_UART_MspInit+0x80>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <HAL_UART_MspInit+0x80>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800067e:	230c      	movs	r3, #12
 8000680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068a:	2303      	movs	r3, #3
 800068c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800068e:	2307      	movs	r3, #7
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <HAL_UART_MspInit+0x84>)
 800069a:	f000 fa49 	bl	8000b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	; 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40004400 	.word	0x40004400
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020000 	.word	0x40020000

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <MemManage_Handler+0x4>

080006c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr

080006ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fa:	f000 f919 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}

08000702 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b086      	sub	sp, #24
 8000706:	af00      	add	r7, sp, #0
 8000708:	60f8      	str	r0, [r7, #12]
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	e00a      	b.n	800072a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000714:	f3af 8000 	nop.w
 8000718:	4601      	mov	r1, r0
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	60ba      	str	r2, [r7, #8]
 8000720:	b2ca      	uxtb	r2, r1
 8000722:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	3301      	adds	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	697a      	ldr	r2, [r7, #20]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	429a      	cmp	r2, r3
 8000730:	dbf0      	blt.n	8000714 <_read+0x12>
  }

  return len;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }

	HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,1000);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	b29a      	uxth	r2, r3
 800074c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000750:	68b9      	ldr	r1, [r7, #8]
 8000752:	4804      	ldr	r0, [pc, #16]	; (8000764 <_write+0x28>)
 8000754:	f001 f9af 	bl	8001ab6 <HAL_UART_Transmit>
  return len;
 8000758:	687b      	ldr	r3, [r7, #4]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000008c 	.word	0x2000008c

08000768 <_close>:

int _close(int file)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000774:	4618      	mov	r0, r3
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800078e:	605a      	str	r2, [r3, #4]
  return 0;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <_isatty>:

int _isatty(int file)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007a4:	2301      	movs	r3, #1
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d0:	4a14      	ldr	r2, [pc, #80]	; (8000824 <_sbrk+0x5c>)
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <_sbrk+0x60>)
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <_sbrk+0x64>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <_sbrk+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d207      	bcs.n	8000808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f8:	f001 fb1e 	bl	8001e38 <__errno>
 80007fc:	4603      	mov	r3, r0
 80007fe:	220c      	movs	r2, #12
 8000800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	e009      	b.n	800081c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <_sbrk+0x64>)
 8000818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20008000 	.word	0x20008000
 8000828:	00000400 	.word	0x00000400
 800082c:	200000d0 	.word	0x200000d0
 8000830:	200000e8 	.word	0x200000e8

08000834 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	; (8000878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	; (8000884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000866:	f7ff ffe5 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f001 faeb 	bl	8001e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086e:	f7ff fe09 	bl	8000484 <main>
  bx lr
 8000872:	4770      	bx	lr
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800087c:	08002944 	.word	0x08002944
  ldr r2, =_sbss
 8000880:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000884:	200000e8 	.word	0x200000e8

08000888 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_IRQHandler>

0800088a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f917 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800089a:	2000      	movs	r0, #0
 800089c:	f000 f80e 	bl	80008bc <HAL_InitTick>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	e001      	b.n	80008b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008ac:	f7ff fe8e 	bl	80005cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_InitTick+0x68>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d022      	beq.n	8000916 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_InitTick+0x6c>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <HAL_InitTick+0x68>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80008e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f916 	bl	8000b16 <HAL_SYSTICK_Config>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d10f      	bne.n	8000910 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b0f      	cmp	r3, #15
 80008f4:	d809      	bhi.n	800090a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f6:	2200      	movs	r2, #0
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	f04f 30ff 	mov.w	r0, #4294967295
 80008fe:	f000 f8ee 	bl	8000ade <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_InitTick+0x70>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	e007      	b.n	800091a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]
 800090e:	e004      	b.n	800091a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	e001      	b.n	800091a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000008 	.word	0x20000008
 8000928:	20000000 	.word	0x20000000
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x1c>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_IncTick+0x20>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4413      	add	r3, r2
 800093e:	4a03      	ldr	r2, [pc, #12]	; (800094c <HAL_IncTick+0x1c>)
 8000940:	6013      	str	r3, [r2, #0]
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	200000d4 	.word	0x200000d4
 8000950:	20000008 	.word	0x20000008

08000954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTick;
 8000958:	4b02      	ldr	r3, [pc, #8]	; (8000964 <HAL_GetTick+0x10>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	200000d4 	.word	0x200000d4

08000968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_GetPriorityGrouping+0x18>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	f003 0307 	and.w	r3, r3, #7
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
         );
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	; 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a94:	d301      	bcc.n	8000a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00f      	b.n	8000aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <SysTick_Config+0x40>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f7ff ff90 	bl	80009cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <SysTick_Config+0x40>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SysTick_Config+0x40>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	e000e010 	.word	0xe000e010

08000ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff49 	bl	8000968 <__NVIC_SetPriorityGrouping>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af0:	f7ff ff5e 	bl	80009b0 <__NVIC_GetPriorityGrouping>
 8000af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f7ff ff90 	bl	8000a20 <NVIC_EncodePriority>
 8000b00:	4602      	mov	r2, r0
 8000b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff5f 	bl	80009cc <__NVIC_SetPriority>
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ffb0 	bl	8000a84 <SysTick_Config>
 8000b24:	4603      	mov	r3, r0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b46:	e154      	b.n	8000df2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 8146 	beq.w	8000dec <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d005      	beq.n	8000b78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d130      	bne.n	8000bda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	2203      	movs	r2, #3
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000bae:	2201      	movs	r2, #1
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	f003 0201 	and.w	r2, r3, #1
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d017      	beq.n	8000c16 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d123      	bne.n	8000c6a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	08da      	lsrs	r2, r3, #3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3208      	adds	r2, #8
 8000c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	220f      	movs	r2, #15
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	691a      	ldr	r2, [r3, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f003 0307 	and.w	r3, r3, #7
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	08da      	lsrs	r2, r3, #3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3208      	adds	r2, #8
 8000c64:	6939      	ldr	r1, [r7, #16]
 8000c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0203 	and.w	r2, r3, #3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 80a0 	beq.w	8000dec <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cac:	4b58      	ldr	r3, [pc, #352]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	4a57      	ldr	r2, [pc, #348]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6213      	str	r3, [r2, #32]
 8000cb8:	4b55      	ldr	r3, [pc, #340]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000cba:	6a1b      	ldr	r3, [r3, #32]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000cc4:	4a53      	ldr	r2, [pc, #332]	; (8000e14 <HAL_GPIO_Init+0x2e4>)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a4b      	ldr	r2, [pc, #300]	; (8000e18 <HAL_GPIO_Init+0x2e8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d019      	beq.n	8000d24 <HAL_GPIO_Init+0x1f4>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <HAL_GPIO_Init+0x2ec>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d013      	beq.n	8000d20 <HAL_GPIO_Init+0x1f0>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <HAL_GPIO_Init+0x2f0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d00d      	beq.n	8000d1c <HAL_GPIO_Init+0x1ec>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_GPIO_Init+0x2f4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d007      	beq.n	8000d18 <HAL_GPIO_Init+0x1e8>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a47      	ldr	r2, [pc, #284]	; (8000e28 <HAL_GPIO_Init+0x2f8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d101      	bne.n	8000d14 <HAL_GPIO_Init+0x1e4>
 8000d10:	2304      	movs	r3, #4
 8000d12:	e008      	b.n	8000d26 <HAL_GPIO_Init+0x1f6>
 8000d14:	2305      	movs	r3, #5
 8000d16:	e006      	b.n	8000d26 <HAL_GPIO_Init+0x1f6>
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e004      	b.n	8000d26 <HAL_GPIO_Init+0x1f6>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e002      	b.n	8000d26 <HAL_GPIO_Init+0x1f6>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <HAL_GPIO_Init+0x1f6>
 8000d24:	2300      	movs	r3, #0
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	f002 0203 	and.w	r2, r2, #3
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	4093      	lsls	r3, r2
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d36:	4937      	ldr	r1, [pc, #220]	; (8000e14 <HAL_GPIO_Init+0x2e4>)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d44:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <HAL_GPIO_Init+0x2fc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d68:	4a30      	ldr	r2, [pc, #192]	; (8000e2c <HAL_GPIO_Init+0x2fc>)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <HAL_GPIO_Init+0x2fc>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d92:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_GPIO_Init+0x2fc>)
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_GPIO_Init+0x2fc>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <HAL_GPIO_Init+0x2fc>)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_GPIO_Init+0x2fc>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000de6:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <HAL_GPIO_Init+0x2fc>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f47f aea3 	bne.w	8000b48 <HAL_GPIO_Init+0x18>
  }
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40010000 	.word	0x40010000
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40020c00 	.word	0x40020c00
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010400 	.word	0x40010400

08000e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e31d      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e42:	4b94      	ldr	r3, [pc, #592]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e4c:	4b91      	ldr	r3, [pc, #580]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e54:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d07b      	beq.n	8000f5a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	2b08      	cmp	r3, #8
 8000e66:	d006      	beq.n	8000e76 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2b0c      	cmp	r3, #12
 8000e6c:	d10f      	bne.n	8000e8e <HAL_RCC_OscConfig+0x5e>
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e74:	d10b      	bne.n	8000e8e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e76:	4b87      	ldr	r3, [pc, #540]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d06a      	beq.n	8000f58 <HAL_RCC_OscConfig+0x128>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d166      	bne.n	8000f58 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e2f7      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d106      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x74>
 8000e96:	4b7f      	ldr	r3, [pc, #508]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a7e      	ldr	r2, [pc, #504]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e02d      	b.n	8000f00 <HAL_RCC_OscConfig+0xd0>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10c      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x96>
 8000eac:	4b79      	ldr	r3, [pc, #484]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a78      	ldr	r2, [pc, #480]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b76      	ldr	r3, [pc, #472]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a75      	ldr	r2, [pc, #468]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	e01c      	b.n	8000f00 <HAL_RCC_OscConfig+0xd0>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b05      	cmp	r3, #5
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0xb8>
 8000ece:	4b71      	ldr	r3, [pc, #452]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a70      	ldr	r2, [pc, #448]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4b6e      	ldr	r3, [pc, #440]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a6d      	ldr	r2, [pc, #436]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e00b      	b.n	8000f00 <HAL_RCC_OscConfig+0xd0>
 8000ee8:	4b6a      	ldr	r3, [pc, #424]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a69      	ldr	r2, [pc, #420]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b67      	ldr	r3, [pc, #412]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a66      	ldr	r2, [pc, #408]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d013      	beq.n	8000f30 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fd24 	bl	8000954 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fd20 	bl	8000954 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b64      	cmp	r3, #100	; 0x64
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e2ad      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f22:	4b5c      	ldr	r3, [pc, #368]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f0      	beq.n	8000f10 <HAL_RCC_OscConfig+0xe0>
 8000f2e:	e014      	b.n	8000f5a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fd10 	bl	8000954 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fd0c 	bl	8000954 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	; 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e299      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f4a:	4b52      	ldr	r3, [pc, #328]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x108>
 8000f56:	e000      	b.n	8000f5a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d05a      	beq.n	800101c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d005      	beq.n	8000f78 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	2b0c      	cmp	r3, #12
 8000f70:	d119      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x176>
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d116      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f78:	4b46      	ldr	r3, [pc, #280]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <HAL_RCC_OscConfig+0x160>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d001      	beq.n	8000f90 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e276      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f90:	4b40      	ldr	r3, [pc, #256]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	493d      	ldr	r1, [pc, #244]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa4:	e03a      	b.n	800101c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d020      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fae:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fcce 	bl	8000954 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbc:	f7ff fcca 	bl	8000954 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e257      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fce:	4b31      	ldr	r3, [pc, #196]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f0      	beq.n	8000fbc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	492a      	ldr	r1, [pc, #168]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	604b      	str	r3, [r1, #4]
 8000fee:	e015      	b.n	800101c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <HAL_RCC_OscConfig+0x268>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fcad 	bl	8000954 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffe:	f7ff fca9 	bl	8000954 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e236      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001010:	4b20      	ldr	r3, [pc, #128]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f0      	bne.n	8000ffe <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80b8 	beq.w	800119a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d170      	bne.n	8001112 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <HAL_RCC_OscConfig+0x218>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e21a      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1a      	ldr	r2, [r3, #32]
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001054:	429a      	cmp	r2, r3
 8001056:	d921      	bls.n	800109c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fc7d 	bl	800195c <RCC_SetFlashLatencyFromMSIRange>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e208      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	4906      	ldr	r1, [pc, #24]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	061b      	lsls	r3, r3, #24
 800108c:	4901      	ldr	r1, [pc, #4]	; (8001094 <HAL_RCC_OscConfig+0x264>)
 800108e:	4313      	orrs	r3, r2
 8001090:	604b      	str	r3, [r1, #4]
 8001092:	e020      	b.n	80010d6 <HAL_RCC_OscConfig+0x2a6>
 8001094:	40023800 	.word	0x40023800
 8001098:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800109c:	4b99      	ldr	r3, [pc, #612]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4996      	ldr	r1, [pc, #600]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ae:	4b95      	ldr	r3, [pc, #596]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	061b      	lsls	r3, r3, #24
 80010bc:	4991      	ldr	r1, [pc, #580]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fc48 	bl	800195c <RCC_SetFlashLatencyFromMSIRange>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e1d3      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	0b5b      	lsrs	r3, r3, #13
 80010dc:	3301      	adds	r3, #1
 80010de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010e6:	4a87      	ldr	r2, [pc, #540]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80010e8:	6892      	ldr	r2, [r2, #8]
 80010ea:	0912      	lsrs	r2, r2, #4
 80010ec:	f002 020f 	and.w	r2, r2, #15
 80010f0:	4985      	ldr	r1, [pc, #532]	; (8001308 <HAL_RCC_OscConfig+0x4d8>)
 80010f2:	5c8a      	ldrb	r2, [r1, r2]
 80010f4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010f6:	4a85      	ldr	r2, [pc, #532]	; (800130c <HAL_RCC_OscConfig+0x4dc>)
 80010f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010fa:	4b85      	ldr	r3, [pc, #532]	; (8001310 <HAL_RCC_OscConfig+0x4e0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fbdc 	bl	80008bc <HAL_InitTick>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d045      	beq.n	800119a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	e1b5      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d029      	beq.n	800116e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800111a:	4b7e      	ldr	r3, [pc, #504]	; (8001314 <HAL_RCC_OscConfig+0x4e4>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fc18 	bl	8000954 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001128:	f7ff fc14 	bl	8000954 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e1a1      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800113a:	4b72      	ldr	r3, [pc, #456]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001146:	4b6f      	ldr	r3, [pc, #444]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	496c      	ldr	r1, [pc, #432]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001158:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	061b      	lsls	r3, r3, #24
 8001166:	4967      	ldr	r1, [pc, #412]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
 800116c:	e015      	b.n	800119a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800116e:	4b69      	ldr	r3, [pc, #420]	; (8001314 <HAL_RCC_OscConfig+0x4e4>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fbee 	bl	8000954 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800117c:	f7ff fbea 	bl	8000954 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e177      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800118e:	4b5d      	ldr	r3, [pc, #372]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d030      	beq.n	8001208 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d016      	beq.n	80011dc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ae:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <HAL_RCC_OscConfig+0x4e8>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b4:	f7ff fbce 	bl	8000954 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011bc:	f7ff fbca 	bl	8000954 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e157      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011ce:	4b4d      	ldr	r3, [pc, #308]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80011d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0x38c>
 80011da:	e015      	b.n	8001208 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011dc:	4b4e      	ldr	r3, [pc, #312]	; (8001318 <HAL_RCC_OscConfig+0x4e8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e2:	f7ff fbb7 	bl	8000954 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ea:	f7ff fbb3 	bl	8000954 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e140      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011fc:	4b41      	ldr	r3, [pc, #260]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80011fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f0      	bne.n	80011ea <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80b5 	beq.w	8001380 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800121a:	4b3a      	ldr	r3, [pc, #232]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10d      	bne.n	8001242 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b37      	ldr	r3, [pc, #220]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	4a36      	ldr	r2, [pc, #216]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6253      	str	r3, [r2, #36]	; 0x24
 8001232:	4b34      	ldr	r3, [pc, #208]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800123e:	2301      	movs	r3, #1
 8001240:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001242:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_RCC_OscConfig+0x4ec>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	2b00      	cmp	r3, #0
 800124c:	d118      	bne.n	8001280 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <HAL_RCC_OscConfig+0x4ec>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a32      	ldr	r2, [pc, #200]	; (800131c <HAL_RCC_OscConfig+0x4ec>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800125a:	f7ff fb7b 	bl	8000954 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001262:	f7ff fb77 	bl	8000954 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b64      	cmp	r3, #100	; 0x64
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e104      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <HAL_RCC_OscConfig+0x4ec>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d106      	bne.n	8001296 <HAL_RCC_OscConfig+0x466>
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 800128a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6353      	str	r3, [r2, #52]	; 0x34
 8001294:	e02d      	b.n	80012f2 <HAL_RCC_OscConfig+0x4c2>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x488>
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80012a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a2:	4a18      	ldr	r2, [pc, #96]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80012a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012a8:	6353      	str	r3, [r2, #52]	; 0x34
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80012b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012b4:	6353      	str	r3, [r2, #52]	; 0x34
 80012b6:	e01c      	b.n	80012f2 <HAL_RCC_OscConfig+0x4c2>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d10c      	bne.n	80012da <HAL_RCC_OscConfig+0x4aa>
 80012c0:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80012c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c4:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80012c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ca:	6353      	str	r3, [r2, #52]	; 0x34
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80012ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d0:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	6353      	str	r3, [r2, #52]	; 0x34
 80012d8:	e00b      	b.n	80012f2 <HAL_RCC_OscConfig+0x4c2>
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80012dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80012e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012e4:	6353      	str	r3, [r2, #52]	; 0x34
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80012e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ea:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_RCC_OscConfig+0x4d4>)
 80012ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012f0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d024      	beq.n	8001344 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fb2b 	bl	8000954 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001300:	e019      	b.n	8001336 <HAL_RCC_OscConfig+0x506>
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	080028b8 	.word	0x080028b8
 800130c:	20000000 	.word	0x20000000
 8001310:	20000004 	.word	0x20000004
 8001314:	42470020 	.word	0x42470020
 8001318:	42470680 	.word	0x42470680
 800131c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001320:	f7ff fb18 	bl	8000954 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	f241 3288 	movw	r2, #5000	; 0x1388
 800132e:	4293      	cmp	r3, r2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e0a3      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001336:	4b54      	ldr	r3, [pc, #336]	; (8001488 <HAL_RCC_OscConfig+0x658>)
 8001338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0ee      	beq.n	8001320 <HAL_RCC_OscConfig+0x4f0>
 8001342:	e014      	b.n	800136e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff fb06 	bl	8000954 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800134a:	e00a      	b.n	8001362 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134c:	f7ff fb02 	bl	8000954 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e08d      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001362:	4b49      	ldr	r3, [pc, #292]	; (8001488 <HAL_RCC_OscConfig+0x658>)
 8001364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1ee      	bne.n	800134c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800136e:	7ffb      	ldrb	r3, [r7, #31]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d105      	bne.n	8001380 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001374:	4b44      	ldr	r3, [pc, #272]	; (8001488 <HAL_RCC_OscConfig+0x658>)
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	4a43      	ldr	r2, [pc, #268]	; (8001488 <HAL_RCC_OscConfig+0x658>)
 800137a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800137e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	2b00      	cmp	r3, #0
 8001386:	d079      	beq.n	800147c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2b0c      	cmp	r3, #12
 800138c:	d056      	beq.n	800143c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	2b02      	cmp	r3, #2
 8001394:	d13b      	bne.n	800140e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001396:	4b3d      	ldr	r3, [pc, #244]	; (800148c <HAL_RCC_OscConfig+0x65c>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fada 	bl	8000954 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a4:	f7ff fad6 	bl	8000954 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e063      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013b6:	4b34      	ldr	r3, [pc, #208]	; (8001488 <HAL_RCC_OscConfig+0x658>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c2:	4b31      	ldr	r3, [pc, #196]	; (8001488 <HAL_RCC_OscConfig+0x658>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	4319      	orrs	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	430b      	orrs	r3, r1
 80013da:	492b      	ldr	r1, [pc, #172]	; (8001488 <HAL_RCC_OscConfig+0x658>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e0:	4b2a      	ldr	r3, [pc, #168]	; (800148c <HAL_RCC_OscConfig+0x65c>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fab5 	bl	8000954 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ee:	f7ff fab1 	bl	8000954 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e03e      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_RCC_OscConfig+0x658>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x5be>
 800140c:	e036      	b.n	800147c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <HAL_RCC_OscConfig+0x65c>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fa9e 	bl	8000954 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff fa9a 	bl	8000954 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e027      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_RCC_OscConfig+0x658>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x5ec>
 800143a:	e01f      	b.n	800147c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e01a      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_RCC_OscConfig+0x658>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	429a      	cmp	r2, r3
 800145a:	d10d      	bne.n	8001478 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d106      	bne.n	8001478 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001474:	429a      	cmp	r2, r3
 8001476:	d001      	beq.n	800147c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	42470060 	.word	0x42470060

08001490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e11a      	b.n	80016da <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a4:	4b8f      	ldr	r3, [pc, #572]	; (80016e4 <HAL_RCC_ClockConfig+0x254>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d919      	bls.n	80014e6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_RCC_ClockConfig+0x34>
 80014b8:	4b8a      	ldr	r3, [pc, #552]	; (80016e4 <HAL_RCC_ClockConfig+0x254>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a89      	ldr	r2, [pc, #548]	; (80016e4 <HAL_RCC_ClockConfig+0x254>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b87      	ldr	r3, [pc, #540]	; (80016e4 <HAL_RCC_ClockConfig+0x254>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 0201 	bic.w	r2, r3, #1
 80014cc:	4985      	ldr	r1, [pc, #532]	; (80016e4 <HAL_RCC_ClockConfig+0x254>)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d4:	4b83      	ldr	r3, [pc, #524]	; (80016e4 <HAL_RCC_ClockConfig+0x254>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0f9      	b.n	80016da <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f2:	4b7d      	ldr	r3, [pc, #500]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	497a      	ldr	r1, [pc, #488]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 8001500:	4313      	orrs	r3, r2
 8001502:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 808e 	beq.w	800162e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800151a:	4b73      	ldr	r3, [pc, #460]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d121      	bne.n	800156a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0d7      	b.n	80016da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b03      	cmp	r3, #3
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001532:	4b6d      	ldr	r3, [pc, #436]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d115      	bne.n	800156a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0cb      	b.n	80016da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800154a:	4b67      	ldr	r3, [pc, #412]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0bf      	b.n	80016da <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0b7      	b.n	80016da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156a:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f023 0203 	bic.w	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	495c      	ldr	r1, [pc, #368]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 8001578:	4313      	orrs	r3, r2
 800157a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800157c:	f7ff f9ea 	bl	8000954 <HAL_GetTick>
 8001580:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d112      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158c:	f7ff f9e2 	bl	8000954 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e09b      	b.n	80016da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a2:	4b51      	ldr	r3, [pc, #324]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d1ee      	bne.n	800158c <HAL_RCC_ClockConfig+0xfc>
 80015ae:	e03e      	b.n	800162e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d112      	bne.n	80015de <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ba:	f7ff f9cb 	bl	8000954 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e084      	b.n	80016da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d0:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	2b0c      	cmp	r3, #12
 80015da:	d1ee      	bne.n	80015ba <HAL_RCC_ClockConfig+0x12a>
 80015dc:	e027      	b.n	800162e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d11d      	bne.n	8001622 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e8:	f7ff f9b4 	bl	8000954 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e06d      	b.n	80016da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015fe:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d1ee      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x158>
 800160a:	e010      	b.n	800162e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160c:	f7ff f9a2 	bl	8000954 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e05b      	b.n	80016da <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ee      	bne.n	800160c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HAL_RCC_ClockConfig+0x254>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d219      	bcs.n	8001670 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d105      	bne.n	800164e <HAL_RCC_ClockConfig+0x1be>
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <HAL_RCC_ClockConfig+0x254>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <HAL_RCC_ClockConfig+0x254>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_RCC_ClockConfig+0x254>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0201 	bic.w	r2, r3, #1
 8001656:	4923      	ldr	r1, [pc, #140]	; (80016e4 <HAL_RCC_ClockConfig+0x254>)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <HAL_RCC_ClockConfig+0x254>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e034      	b.n	80016da <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4917      	ldr	r1, [pc, #92]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	490f      	ldr	r1, [pc, #60]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ae:	f000 f823 	bl	80016f8 <HAL_RCC_GetSysClockFreq>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_RCC_ClockConfig+0x258>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	490b      	ldr	r1, [pc, #44]	; (80016ec <HAL_RCC_ClockConfig+0x25c>)
 80016c0:	5ccb      	ldrb	r3, [r1, r3]
 80016c2:	fa22 f303 	lsr.w	r3, r2, r3
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_RCC_ClockConfig+0x260>)
 80016c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_RCC_ClockConfig+0x264>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff f8f4 	bl	80008bc <HAL_InitTick>
 80016d4:	4603      	mov	r3, r0
 80016d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80016d8:	7afb      	ldrb	r3, [r7, #11]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00
 80016e8:	40023800 	.word	0x40023800
 80016ec:	080028b8 	.word	0x080028b8
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016fc:	b092      	sub	sp, #72	; 0x48
 80016fe:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001700:	4b79      	ldr	r3, [pc, #484]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b0c      	cmp	r3, #12
 800170e:	d00d      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x34>
 8001710:	2b0c      	cmp	r3, #12
 8001712:	f200 80d5 	bhi.w	80018c0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8001716:	2b04      	cmp	r3, #4
 8001718:	d002      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x28>
 800171a:	2b08      	cmp	r3, #8
 800171c:	d003      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x2e>
 800171e:	e0cf      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001720:	4b72      	ldr	r3, [pc, #456]	; (80018ec <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001722:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001724:	e0da      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001728:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800172a:	e0d7      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800172c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	f003 020f 	and.w	r2, r3, #15
 8001734:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001736:	5c9b      	ldrb	r3, [r3, r2]
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800173a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800173c:	0d9b      	lsrs	r3, r3, #22
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	3301      	adds	r3, #1
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001746:	4b68      	ldr	r3, [pc, #416]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d05d      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001754:	2200      	movs	r2, #0
 8001756:	4618      	mov	r0, r3
 8001758:	4611      	mov	r1, r2
 800175a:	4604      	mov	r4, r0
 800175c:	460d      	mov	r5, r1
 800175e:	4622      	mov	r2, r4
 8001760:	462b      	mov	r3, r5
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	0159      	lsls	r1, r3, #5
 800176c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001770:	0150      	lsls	r0, r2, #5
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4621      	mov	r1, r4
 8001778:	1a51      	subs	r1, r2, r1
 800177a:	6139      	str	r1, [r7, #16]
 800177c:	4629      	mov	r1, r5
 800177e:	eb63 0301 	sbc.w	r3, r3, r1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001790:	4659      	mov	r1, fp
 8001792:	018b      	lsls	r3, r1, #6
 8001794:	4651      	mov	r1, sl
 8001796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800179a:	4651      	mov	r1, sl
 800179c:	018a      	lsls	r2, r1, #6
 800179e:	46d4      	mov	ip, sl
 80017a0:	ebb2 080c 	subs.w	r8, r2, ip
 80017a4:	4659      	mov	r1, fp
 80017a6:	eb63 0901 	sbc.w	r9, r3, r1
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017be:	4690      	mov	r8, r2
 80017c0:	4699      	mov	r9, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	eb18 0303 	adds.w	r3, r8, r3
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	462b      	mov	r3, r5
 80017cc:	eb49 0303 	adc.w	r3, r9, r3
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017de:	4629      	mov	r1, r5
 80017e0:	024b      	lsls	r3, r1, #9
 80017e2:	4620      	mov	r0, r4
 80017e4:	4629      	mov	r1, r5
 80017e6:	4604      	mov	r4, r0
 80017e8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80017ec:	4601      	mov	r1, r0
 80017ee:	024a      	lsls	r2, r1, #9
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f6:	2200      	movs	r2, #0
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001800:	f7fe fcbc 	bl	800017c <__aeabi_uldivmod>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4613      	mov	r3, r2
 800180a:	647b      	str	r3, [r7, #68]	; 0x44
 800180c:	e055      	b.n	80018ba <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800180e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001810:	2200      	movs	r2, #0
 8001812:	623b      	str	r3, [r7, #32]
 8001814:	627a      	str	r2, [r7, #36]	; 0x24
 8001816:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800181a:	4642      	mov	r2, r8
 800181c:	464b      	mov	r3, r9
 800181e:	f04f 0000 	mov.w	r0, #0
 8001822:	f04f 0100 	mov.w	r1, #0
 8001826:	0159      	lsls	r1, r3, #5
 8001828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800182c:	0150      	lsls	r0, r2, #5
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	46c4      	mov	ip, r8
 8001834:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001838:	4640      	mov	r0, r8
 800183a:	4649      	mov	r1, r9
 800183c:	468c      	mov	ip, r1
 800183e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800184e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001852:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001856:	ebb2 040a 	subs.w	r4, r2, sl
 800185a:	eb63 050b 	sbc.w	r5, r3, fp
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	00eb      	lsls	r3, r5, #3
 8001868:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800186c:	00e2      	lsls	r2, r4, #3
 800186e:	4614      	mov	r4, r2
 8001870:	461d      	mov	r5, r3
 8001872:	4603      	mov	r3, r0
 8001874:	18e3      	adds	r3, r4, r3
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	460b      	mov	r3, r1
 800187a:	eb45 0303 	adc.w	r3, r5, r3
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e9d7 4500 	ldrd	r4, r5, [r7]
 800188c:	4629      	mov	r1, r5
 800188e:	028b      	lsls	r3, r1, #10
 8001890:	4620      	mov	r0, r4
 8001892:	4629      	mov	r1, r5
 8001894:	4604      	mov	r4, r0
 8001896:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800189a:	4601      	mov	r1, r0
 800189c:	028a      	lsls	r2, r1, #10
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a4:	2200      	movs	r2, #0
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	61fa      	str	r2, [r7, #28]
 80018aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018ae:	f7fe fc65 	bl	800017c <__aeabi_uldivmod>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4613      	mov	r3, r2
 80018b8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80018ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018bc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80018be:	e00d      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	0b5b      	lsrs	r3, r3, #13
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ce:	3301      	adds	r3, #1
 80018d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80018da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3748      	adds	r7, #72	; 0x48
 80018e2:	46bd      	mov	sp, r7
 80018e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	00f42400 	.word	0x00f42400
 80018f0:	007a1200 	.word	0x007a1200
 80018f4:	080028ac 	.word	0x080028ac

080018f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018fc:	4b02      	ldr	r3, [pc, #8]	; (8001908 <HAL_RCC_GetHCLKFreq+0x10>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	20000000 	.word	0x20000000

0800190c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001910:	f7ff fff2 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001914:	4602      	mov	r2, r0
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	0a1b      	lsrs	r3, r3, #8
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	4903      	ldr	r1, [pc, #12]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	080028c8 	.word	0x080028c8

08001934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001938:	f7ff ffde 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 800193c:	4602      	mov	r2, r0
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	0adb      	lsrs	r3, r3, #11
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	4903      	ldr	r1, [pc, #12]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800194a:	5ccb      	ldrb	r3, [r1, r3]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	080028c8 	.word	0x080028c8

0800195c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001968:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d12c      	bne.n	80019ce <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001974:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e016      	b.n	80019ba <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001996:	6253      	str	r3, [r2, #36]	; 0x24
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80019ac:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80019c0:	d105      	bne.n	80019ce <RCC_SetFlashLatencyFromMSIRange+0x72>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80019c8:	d101      	bne.n	80019ce <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80019ca:	2301      	movs	r3, #1
 80019cc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 0201 	bic.w	r2, r3, #1
 80019e8:	490b      	ldr	r1, [pc, #44]	; (8001a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d001      	beq.n	8001a02 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40007000 	.word	0x40007000
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e03f      	b.n	8001aae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7fe fdf2 	bl	800062c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2224      	movs	r2, #36	; 0x24
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f905 	bl	8001c70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b08a      	sub	sp, #40	; 0x28
 8001aba:	af02      	add	r7, sp, #8
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d17c      	bne.n	8001bd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <HAL_UART_Transmit+0x2c>
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e075      	b.n	8001bd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_UART_Transmit+0x3e>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e06e      	b.n	8001bd2 <HAL_UART_Transmit+0x11c>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2221      	movs	r2, #33	; 0x21
 8001b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b0a:	f7fe ff23 	bl	8000954 <HAL_GetTick>
 8001b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	88fa      	ldrh	r2, [r7, #6]
 8001b14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	88fa      	ldrh	r2, [r7, #6]
 8001b1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b24:	d108      	bne.n	8001b38 <HAL_UART_Transmit+0x82>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d104      	bne.n	8001b38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	e003      	b.n	8001b40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b48:	e02a      	b.n	8001ba0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2200      	movs	r2, #0
 8001b52:	2180      	movs	r1, #128	; 0x80
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f840 	bl	8001bda <UART_WaitOnFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e036      	b.n	8001bd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10b      	bne.n	8001b82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	e007      	b.n	8001b92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1cf      	bne.n	8001b4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2140      	movs	r1, #64	; 0x40
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f810 	bl	8001bda <UART_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e006      	b.n	8001bd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e000      	b.n	8001bd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bd0:	2302      	movs	r3, #2
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4613      	mov	r3, r2
 8001be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bea:	e02c      	b.n	8001c46 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf2:	d028      	beq.n	8001c46 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8001bfa:	f7fe feab 	bl	8000954 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d21d      	bcs.n	8001c46 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c18:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0201 	bic.w	r2, r2, #1
 8001c28:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2220      	movs	r2, #32
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e00f      	b.n	8001c66 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d0c3      	beq.n	8001bec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001cb0:	f023 030c 	bic.w	r3, r3, #12
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a55      	ldr	r2, [pc, #340]	; (8001e30 <UART_SetConfig+0x1c0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d103      	bne.n	8001ce6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cde:	f7ff fe29 	bl	8001934 <HAL_RCC_GetPCLK2Freq>
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	e002      	b.n	8001cec <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ce6:	f7ff fe11 	bl	800190c <HAL_RCC_GetPCLK1Freq>
 8001cea:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf4:	d14c      	bne.n	8001d90 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009a      	lsls	r2, r3, #2
 8001d00:	441a      	add	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0c:	4a49      	ldr	r2, [pc, #292]	; (8001e34 <UART_SetConfig+0x1c4>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	0119      	lsls	r1, r3, #4
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009a      	lsls	r2, r3, #2
 8001d20:	441a      	add	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d2c:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <UART_SetConfig+0x1c4>)
 8001d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2064      	movs	r0, #100	; 0x64
 8001d36:	fb00 f303 	mul.w	r3, r0, r3
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	3332      	adds	r3, #50	; 0x32
 8001d40:	4a3c      	ldr	r2, [pc, #240]	; (8001e34 <UART_SetConfig+0x1c4>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d4e:	4419      	add	r1, r3
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	009a      	lsls	r2, r3, #2
 8001d5a:	441a      	add	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d66:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <UART_SetConfig+0x1c4>)
 8001d68:	fba3 0302 	umull	r0, r3, r3, r2
 8001d6c:	095b      	lsrs	r3, r3, #5
 8001d6e:	2064      	movs	r0, #100	; 0x64
 8001d70:	fb00 f303 	mul.w	r3, r0, r3
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	3332      	adds	r3, #50	; 0x32
 8001d7a:	4a2e      	ldr	r2, [pc, #184]	; (8001e34 <UART_SetConfig+0x1c4>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	f003 0207 	and.w	r2, r3, #7
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	440a      	add	r2, r1
 8001d8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001d8e:	e04a      	b.n	8001e26 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	009a      	lsls	r2, r3, #2
 8001d9a:	441a      	add	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <UART_SetConfig+0x1c4>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	0119      	lsls	r1, r3, #4
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	009a      	lsls	r2, r3, #2
 8001dba:	441a      	add	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <UART_SetConfig+0x1c4>)
 8001dc8:	fba3 0302 	umull	r0, r3, r3, r2
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	2064      	movs	r0, #100	; 0x64
 8001dd0:	fb00 f303 	mul.w	r3, r0, r3
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	3332      	adds	r3, #50	; 0x32
 8001dda:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <UART_SetConfig+0x1c4>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	095b      	lsrs	r3, r3, #5
 8001de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de6:	4419      	add	r1, r3
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	009a      	lsls	r2, r3, #2
 8001df2:	441a      	add	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <UART_SetConfig+0x1c4>)
 8001e00:	fba3 0302 	umull	r0, r3, r3, r2
 8001e04:	095b      	lsrs	r3, r3, #5
 8001e06:	2064      	movs	r0, #100	; 0x64
 8001e08:	fb00 f303 	mul.w	r3, r0, r3
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	3332      	adds	r3, #50	; 0x32
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <UART_SetConfig+0x1c4>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	095b      	lsrs	r3, r3, #5
 8001e1a:	f003 020f 	and.w	r2, r3, #15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	440a      	add	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40013800 	.word	0x40013800
 8001e34:	51eb851f 	.word	0x51eb851f

08001e38 <__errno>:
 8001e38:	4b01      	ldr	r3, [pc, #4]	; (8001e40 <__errno+0x8>)
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	2000000c 	.word	0x2000000c

08001e44 <__libc_init_array>:
 8001e44:	b570      	push	{r4, r5, r6, lr}
 8001e46:	2600      	movs	r6, #0
 8001e48:	4d0c      	ldr	r5, [pc, #48]	; (8001e7c <__libc_init_array+0x38>)
 8001e4a:	4c0d      	ldr	r4, [pc, #52]	; (8001e80 <__libc_init_array+0x3c>)
 8001e4c:	1b64      	subs	r4, r4, r5
 8001e4e:	10a4      	asrs	r4, r4, #2
 8001e50:	42a6      	cmp	r6, r4
 8001e52:	d109      	bne.n	8001e68 <__libc_init_array+0x24>
 8001e54:	f000 fd18 	bl	8002888 <_init>
 8001e58:	2600      	movs	r6, #0
 8001e5a:	4d0a      	ldr	r5, [pc, #40]	; (8001e84 <__libc_init_array+0x40>)
 8001e5c:	4c0a      	ldr	r4, [pc, #40]	; (8001e88 <__libc_init_array+0x44>)
 8001e5e:	1b64      	subs	r4, r4, r5
 8001e60:	10a4      	asrs	r4, r4, #2
 8001e62:	42a6      	cmp	r6, r4
 8001e64:	d105      	bne.n	8001e72 <__libc_init_array+0x2e>
 8001e66:	bd70      	pop	{r4, r5, r6, pc}
 8001e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e6c:	4798      	blx	r3
 8001e6e:	3601      	adds	r6, #1
 8001e70:	e7ee      	b.n	8001e50 <__libc_init_array+0xc>
 8001e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e76:	4798      	blx	r3
 8001e78:	3601      	adds	r6, #1
 8001e7a:	e7f2      	b.n	8001e62 <__libc_init_array+0x1e>
 8001e7c:	0800293c 	.word	0x0800293c
 8001e80:	0800293c 	.word	0x0800293c
 8001e84:	0800293c 	.word	0x0800293c
 8001e88:	08002940 	.word	0x08002940

08001e8c <memset>:
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4402      	add	r2, r0
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d100      	bne.n	8001e96 <memset+0xa>
 8001e94:	4770      	bx	lr
 8001e96:	f803 1b01 	strb.w	r1, [r3], #1
 8001e9a:	e7f9      	b.n	8001e90 <memset+0x4>

08001e9c <_puts_r>:
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	460e      	mov	r6, r1
 8001ea0:	4605      	mov	r5, r0
 8001ea2:	b118      	cbz	r0, 8001eac <_puts_r+0x10>
 8001ea4:	6983      	ldr	r3, [r0, #24]
 8001ea6:	b90b      	cbnz	r3, 8001eac <_puts_r+0x10>
 8001ea8:	f000 fa44 	bl	8002334 <__sinit>
 8001eac:	69ab      	ldr	r3, [r5, #24]
 8001eae:	68ac      	ldr	r4, [r5, #8]
 8001eb0:	b913      	cbnz	r3, 8001eb8 <_puts_r+0x1c>
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	f000 fa3e 	bl	8002334 <__sinit>
 8001eb8:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <_puts_r+0xd0>)
 8001eba:	429c      	cmp	r4, r3
 8001ebc:	d120      	bne.n	8001f00 <_puts_r+0x64>
 8001ebe:	686c      	ldr	r4, [r5, #4]
 8001ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ec2:	07db      	lsls	r3, r3, #31
 8001ec4:	d405      	bmi.n	8001ed2 <_puts_r+0x36>
 8001ec6:	89a3      	ldrh	r3, [r4, #12]
 8001ec8:	0598      	lsls	r0, r3, #22
 8001eca:	d402      	bmi.n	8001ed2 <_puts_r+0x36>
 8001ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ece:	f000 facf 	bl	8002470 <__retarget_lock_acquire_recursive>
 8001ed2:	89a3      	ldrh	r3, [r4, #12]
 8001ed4:	0719      	lsls	r1, r3, #28
 8001ed6:	d51d      	bpl.n	8001f14 <_puts_r+0x78>
 8001ed8:	6923      	ldr	r3, [r4, #16]
 8001eda:	b1db      	cbz	r3, 8001f14 <_puts_r+0x78>
 8001edc:	3e01      	subs	r6, #1
 8001ede:	68a3      	ldr	r3, [r4, #8]
 8001ee0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	60a3      	str	r3, [r4, #8]
 8001ee8:	bb39      	cbnz	r1, 8001f3a <_puts_r+0x9e>
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da38      	bge.n	8001f60 <_puts_r+0xc4>
 8001eee:	4622      	mov	r2, r4
 8001ef0:	210a      	movs	r1, #10
 8001ef2:	4628      	mov	r0, r5
 8001ef4:	f000 f848 	bl	8001f88 <__swbuf_r>
 8001ef8:	3001      	adds	r0, #1
 8001efa:	d011      	beq.n	8001f20 <_puts_r+0x84>
 8001efc:	250a      	movs	r5, #10
 8001efe:	e011      	b.n	8001f24 <_puts_r+0x88>
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <_puts_r+0xd4>)
 8001f02:	429c      	cmp	r4, r3
 8001f04:	d101      	bne.n	8001f0a <_puts_r+0x6e>
 8001f06:	68ac      	ldr	r4, [r5, #8]
 8001f08:	e7da      	b.n	8001ec0 <_puts_r+0x24>
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <_puts_r+0xd8>)
 8001f0c:	429c      	cmp	r4, r3
 8001f0e:	bf08      	it	eq
 8001f10:	68ec      	ldreq	r4, [r5, #12]
 8001f12:	e7d5      	b.n	8001ec0 <_puts_r+0x24>
 8001f14:	4621      	mov	r1, r4
 8001f16:	4628      	mov	r0, r5
 8001f18:	f000 f888 	bl	800202c <__swsetup_r>
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d0dd      	beq.n	8001edc <_puts_r+0x40>
 8001f20:	f04f 35ff 	mov.w	r5, #4294967295
 8001f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f26:	07da      	lsls	r2, r3, #31
 8001f28:	d405      	bmi.n	8001f36 <_puts_r+0x9a>
 8001f2a:	89a3      	ldrh	r3, [r4, #12]
 8001f2c:	059b      	lsls	r3, r3, #22
 8001f2e:	d402      	bmi.n	8001f36 <_puts_r+0x9a>
 8001f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f32:	f000 fa9e 	bl	8002472 <__retarget_lock_release_recursive>
 8001f36:	4628      	mov	r0, r5
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	da04      	bge.n	8001f48 <_puts_r+0xac>
 8001f3e:	69a2      	ldr	r2, [r4, #24]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dc06      	bgt.n	8001f52 <_puts_r+0xb6>
 8001f44:	290a      	cmp	r1, #10
 8001f46:	d004      	beq.n	8001f52 <_puts_r+0xb6>
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	6022      	str	r2, [r4, #0]
 8001f4e:	7019      	strb	r1, [r3, #0]
 8001f50:	e7c5      	b.n	8001ede <_puts_r+0x42>
 8001f52:	4622      	mov	r2, r4
 8001f54:	4628      	mov	r0, r5
 8001f56:	f000 f817 	bl	8001f88 <__swbuf_r>
 8001f5a:	3001      	adds	r0, #1
 8001f5c:	d1bf      	bne.n	8001ede <_puts_r+0x42>
 8001f5e:	e7df      	b.n	8001f20 <_puts_r+0x84>
 8001f60:	250a      	movs	r5, #10
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	6022      	str	r2, [r4, #0]
 8001f68:	701d      	strb	r5, [r3, #0]
 8001f6a:	e7db      	b.n	8001f24 <_puts_r+0x88>
 8001f6c:	080028f4 	.word	0x080028f4
 8001f70:	08002914 	.word	0x08002914
 8001f74:	080028d4 	.word	0x080028d4

08001f78 <puts>:
 8001f78:	4b02      	ldr	r3, [pc, #8]	; (8001f84 <puts+0xc>)
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	f7ff bf8d 	b.w	8001e9c <_puts_r>
 8001f82:	bf00      	nop
 8001f84:	2000000c 	.word	0x2000000c

08001f88 <__swbuf_r>:
 8001f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8a:	460e      	mov	r6, r1
 8001f8c:	4614      	mov	r4, r2
 8001f8e:	4605      	mov	r5, r0
 8001f90:	b118      	cbz	r0, 8001f9a <__swbuf_r+0x12>
 8001f92:	6983      	ldr	r3, [r0, #24]
 8001f94:	b90b      	cbnz	r3, 8001f9a <__swbuf_r+0x12>
 8001f96:	f000 f9cd 	bl	8002334 <__sinit>
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <__swbuf_r+0x98>)
 8001f9c:	429c      	cmp	r4, r3
 8001f9e:	d12b      	bne.n	8001ff8 <__swbuf_r+0x70>
 8001fa0:	686c      	ldr	r4, [r5, #4]
 8001fa2:	69a3      	ldr	r3, [r4, #24]
 8001fa4:	60a3      	str	r3, [r4, #8]
 8001fa6:	89a3      	ldrh	r3, [r4, #12]
 8001fa8:	071a      	lsls	r2, r3, #28
 8001faa:	d52f      	bpl.n	800200c <__swbuf_r+0x84>
 8001fac:	6923      	ldr	r3, [r4, #16]
 8001fae:	b36b      	cbz	r3, 800200c <__swbuf_r+0x84>
 8001fb0:	6923      	ldr	r3, [r4, #16]
 8001fb2:	6820      	ldr	r0, [r4, #0]
 8001fb4:	b2f6      	uxtb	r6, r6
 8001fb6:	1ac0      	subs	r0, r0, r3
 8001fb8:	6963      	ldr	r3, [r4, #20]
 8001fba:	4637      	mov	r7, r6
 8001fbc:	4283      	cmp	r3, r0
 8001fbe:	dc04      	bgt.n	8001fca <__swbuf_r+0x42>
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	4628      	mov	r0, r5
 8001fc4:	f000 f922 	bl	800220c <_fflush_r>
 8001fc8:	bb30      	cbnz	r0, 8002018 <__swbuf_r+0x90>
 8001fca:	68a3      	ldr	r3, [r4, #8]
 8001fcc:	3001      	adds	r0, #1
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	60a3      	str	r3, [r4, #8]
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	6022      	str	r2, [r4, #0]
 8001fd8:	701e      	strb	r6, [r3, #0]
 8001fda:	6963      	ldr	r3, [r4, #20]
 8001fdc:	4283      	cmp	r3, r0
 8001fde:	d004      	beq.n	8001fea <__swbuf_r+0x62>
 8001fe0:	89a3      	ldrh	r3, [r4, #12]
 8001fe2:	07db      	lsls	r3, r3, #31
 8001fe4:	d506      	bpl.n	8001ff4 <__swbuf_r+0x6c>
 8001fe6:	2e0a      	cmp	r6, #10
 8001fe8:	d104      	bne.n	8001ff4 <__swbuf_r+0x6c>
 8001fea:	4621      	mov	r1, r4
 8001fec:	4628      	mov	r0, r5
 8001fee:	f000 f90d 	bl	800220c <_fflush_r>
 8001ff2:	b988      	cbnz	r0, 8002018 <__swbuf_r+0x90>
 8001ff4:	4638      	mov	r0, r7
 8001ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <__swbuf_r+0x9c>)
 8001ffa:	429c      	cmp	r4, r3
 8001ffc:	d101      	bne.n	8002002 <__swbuf_r+0x7a>
 8001ffe:	68ac      	ldr	r4, [r5, #8]
 8002000:	e7cf      	b.n	8001fa2 <__swbuf_r+0x1a>
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <__swbuf_r+0xa0>)
 8002004:	429c      	cmp	r4, r3
 8002006:	bf08      	it	eq
 8002008:	68ec      	ldreq	r4, [r5, #12]
 800200a:	e7ca      	b.n	8001fa2 <__swbuf_r+0x1a>
 800200c:	4621      	mov	r1, r4
 800200e:	4628      	mov	r0, r5
 8002010:	f000 f80c 	bl	800202c <__swsetup_r>
 8002014:	2800      	cmp	r0, #0
 8002016:	d0cb      	beq.n	8001fb0 <__swbuf_r+0x28>
 8002018:	f04f 37ff 	mov.w	r7, #4294967295
 800201c:	e7ea      	b.n	8001ff4 <__swbuf_r+0x6c>
 800201e:	bf00      	nop
 8002020:	080028f4 	.word	0x080028f4
 8002024:	08002914 	.word	0x08002914
 8002028:	080028d4 	.word	0x080028d4

0800202c <__swsetup_r>:
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <__swsetup_r+0xcc>)
 800202e:	b570      	push	{r4, r5, r6, lr}
 8002030:	681d      	ldr	r5, [r3, #0]
 8002032:	4606      	mov	r6, r0
 8002034:	460c      	mov	r4, r1
 8002036:	b125      	cbz	r5, 8002042 <__swsetup_r+0x16>
 8002038:	69ab      	ldr	r3, [r5, #24]
 800203a:	b913      	cbnz	r3, 8002042 <__swsetup_r+0x16>
 800203c:	4628      	mov	r0, r5
 800203e:	f000 f979 	bl	8002334 <__sinit>
 8002042:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <__swsetup_r+0xd0>)
 8002044:	429c      	cmp	r4, r3
 8002046:	d10f      	bne.n	8002068 <__swsetup_r+0x3c>
 8002048:	686c      	ldr	r4, [r5, #4]
 800204a:	89a3      	ldrh	r3, [r4, #12]
 800204c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002050:	0719      	lsls	r1, r3, #28
 8002052:	d42c      	bmi.n	80020ae <__swsetup_r+0x82>
 8002054:	06dd      	lsls	r5, r3, #27
 8002056:	d411      	bmi.n	800207c <__swsetup_r+0x50>
 8002058:	2309      	movs	r3, #9
 800205a:	6033      	str	r3, [r6, #0]
 800205c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	81a3      	strh	r3, [r4, #12]
 8002066:	e03e      	b.n	80020e6 <__swsetup_r+0xba>
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <__swsetup_r+0xd4>)
 800206a:	429c      	cmp	r4, r3
 800206c:	d101      	bne.n	8002072 <__swsetup_r+0x46>
 800206e:	68ac      	ldr	r4, [r5, #8]
 8002070:	e7eb      	b.n	800204a <__swsetup_r+0x1e>
 8002072:	4b24      	ldr	r3, [pc, #144]	; (8002104 <__swsetup_r+0xd8>)
 8002074:	429c      	cmp	r4, r3
 8002076:	bf08      	it	eq
 8002078:	68ec      	ldreq	r4, [r5, #12]
 800207a:	e7e6      	b.n	800204a <__swsetup_r+0x1e>
 800207c:	0758      	lsls	r0, r3, #29
 800207e:	d512      	bpl.n	80020a6 <__swsetup_r+0x7a>
 8002080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002082:	b141      	cbz	r1, 8002096 <__swsetup_r+0x6a>
 8002084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002088:	4299      	cmp	r1, r3
 800208a:	d002      	beq.n	8002092 <__swsetup_r+0x66>
 800208c:	4630      	mov	r0, r6
 800208e:	f000 fa57 	bl	8002540 <_free_r>
 8002092:	2300      	movs	r3, #0
 8002094:	6363      	str	r3, [r4, #52]	; 0x34
 8002096:	89a3      	ldrh	r3, [r4, #12]
 8002098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800209c:	81a3      	strh	r3, [r4, #12]
 800209e:	2300      	movs	r3, #0
 80020a0:	6063      	str	r3, [r4, #4]
 80020a2:	6923      	ldr	r3, [r4, #16]
 80020a4:	6023      	str	r3, [r4, #0]
 80020a6:	89a3      	ldrh	r3, [r4, #12]
 80020a8:	f043 0308 	orr.w	r3, r3, #8
 80020ac:	81a3      	strh	r3, [r4, #12]
 80020ae:	6923      	ldr	r3, [r4, #16]
 80020b0:	b94b      	cbnz	r3, 80020c6 <__swsetup_r+0x9a>
 80020b2:	89a3      	ldrh	r3, [r4, #12]
 80020b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020bc:	d003      	beq.n	80020c6 <__swsetup_r+0x9a>
 80020be:	4621      	mov	r1, r4
 80020c0:	4630      	mov	r0, r6
 80020c2:	f000 f9fd 	bl	80024c0 <__smakebuf_r>
 80020c6:	89a0      	ldrh	r0, [r4, #12]
 80020c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020cc:	f010 0301 	ands.w	r3, r0, #1
 80020d0:	d00a      	beq.n	80020e8 <__swsetup_r+0xbc>
 80020d2:	2300      	movs	r3, #0
 80020d4:	60a3      	str	r3, [r4, #8]
 80020d6:	6963      	ldr	r3, [r4, #20]
 80020d8:	425b      	negs	r3, r3
 80020da:	61a3      	str	r3, [r4, #24]
 80020dc:	6923      	ldr	r3, [r4, #16]
 80020de:	b943      	cbnz	r3, 80020f2 <__swsetup_r+0xc6>
 80020e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80020e4:	d1ba      	bne.n	800205c <__swsetup_r+0x30>
 80020e6:	bd70      	pop	{r4, r5, r6, pc}
 80020e8:	0781      	lsls	r1, r0, #30
 80020ea:	bf58      	it	pl
 80020ec:	6963      	ldrpl	r3, [r4, #20]
 80020ee:	60a3      	str	r3, [r4, #8]
 80020f0:	e7f4      	b.n	80020dc <__swsetup_r+0xb0>
 80020f2:	2000      	movs	r0, #0
 80020f4:	e7f7      	b.n	80020e6 <__swsetup_r+0xba>
 80020f6:	bf00      	nop
 80020f8:	2000000c 	.word	0x2000000c
 80020fc:	080028f4 	.word	0x080028f4
 8002100:	08002914 	.word	0x08002914
 8002104:	080028d4 	.word	0x080028d4

08002108 <__sflush_r>:
 8002108:	898a      	ldrh	r2, [r1, #12]
 800210a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210c:	4605      	mov	r5, r0
 800210e:	0710      	lsls	r0, r2, #28
 8002110:	460c      	mov	r4, r1
 8002112:	d457      	bmi.n	80021c4 <__sflush_r+0xbc>
 8002114:	684b      	ldr	r3, [r1, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	dc04      	bgt.n	8002124 <__sflush_r+0x1c>
 800211a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800211c:	2b00      	cmp	r3, #0
 800211e:	dc01      	bgt.n	8002124 <__sflush_r+0x1c>
 8002120:	2000      	movs	r0, #0
 8002122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002126:	2e00      	cmp	r6, #0
 8002128:	d0fa      	beq.n	8002120 <__sflush_r+0x18>
 800212a:	2300      	movs	r3, #0
 800212c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002130:	682f      	ldr	r7, [r5, #0]
 8002132:	602b      	str	r3, [r5, #0]
 8002134:	d032      	beq.n	800219c <__sflush_r+0x94>
 8002136:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002138:	89a3      	ldrh	r3, [r4, #12]
 800213a:	075a      	lsls	r2, r3, #29
 800213c:	d505      	bpl.n	800214a <__sflush_r+0x42>
 800213e:	6863      	ldr	r3, [r4, #4]
 8002140:	1ac0      	subs	r0, r0, r3
 8002142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002144:	b10b      	cbz	r3, 800214a <__sflush_r+0x42>
 8002146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002148:	1ac0      	subs	r0, r0, r3
 800214a:	2300      	movs	r3, #0
 800214c:	4602      	mov	r2, r0
 800214e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002150:	4628      	mov	r0, r5
 8002152:	6a21      	ldr	r1, [r4, #32]
 8002154:	47b0      	blx	r6
 8002156:	1c43      	adds	r3, r0, #1
 8002158:	89a3      	ldrh	r3, [r4, #12]
 800215a:	d106      	bne.n	800216a <__sflush_r+0x62>
 800215c:	6829      	ldr	r1, [r5, #0]
 800215e:	291d      	cmp	r1, #29
 8002160:	d82c      	bhi.n	80021bc <__sflush_r+0xb4>
 8002162:	4a29      	ldr	r2, [pc, #164]	; (8002208 <__sflush_r+0x100>)
 8002164:	40ca      	lsrs	r2, r1
 8002166:	07d6      	lsls	r6, r2, #31
 8002168:	d528      	bpl.n	80021bc <__sflush_r+0xb4>
 800216a:	2200      	movs	r2, #0
 800216c:	6062      	str	r2, [r4, #4]
 800216e:	6922      	ldr	r2, [r4, #16]
 8002170:	04d9      	lsls	r1, r3, #19
 8002172:	6022      	str	r2, [r4, #0]
 8002174:	d504      	bpl.n	8002180 <__sflush_r+0x78>
 8002176:	1c42      	adds	r2, r0, #1
 8002178:	d101      	bne.n	800217e <__sflush_r+0x76>
 800217a:	682b      	ldr	r3, [r5, #0]
 800217c:	b903      	cbnz	r3, 8002180 <__sflush_r+0x78>
 800217e:	6560      	str	r0, [r4, #84]	; 0x54
 8002180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002182:	602f      	str	r7, [r5, #0]
 8002184:	2900      	cmp	r1, #0
 8002186:	d0cb      	beq.n	8002120 <__sflush_r+0x18>
 8002188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800218c:	4299      	cmp	r1, r3
 800218e:	d002      	beq.n	8002196 <__sflush_r+0x8e>
 8002190:	4628      	mov	r0, r5
 8002192:	f000 f9d5 	bl	8002540 <_free_r>
 8002196:	2000      	movs	r0, #0
 8002198:	6360      	str	r0, [r4, #52]	; 0x34
 800219a:	e7c2      	b.n	8002122 <__sflush_r+0x1a>
 800219c:	6a21      	ldr	r1, [r4, #32]
 800219e:	2301      	movs	r3, #1
 80021a0:	4628      	mov	r0, r5
 80021a2:	47b0      	blx	r6
 80021a4:	1c41      	adds	r1, r0, #1
 80021a6:	d1c7      	bne.n	8002138 <__sflush_r+0x30>
 80021a8:	682b      	ldr	r3, [r5, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0c4      	beq.n	8002138 <__sflush_r+0x30>
 80021ae:	2b1d      	cmp	r3, #29
 80021b0:	d001      	beq.n	80021b6 <__sflush_r+0xae>
 80021b2:	2b16      	cmp	r3, #22
 80021b4:	d101      	bne.n	80021ba <__sflush_r+0xb2>
 80021b6:	602f      	str	r7, [r5, #0]
 80021b8:	e7b2      	b.n	8002120 <__sflush_r+0x18>
 80021ba:	89a3      	ldrh	r3, [r4, #12]
 80021bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021c0:	81a3      	strh	r3, [r4, #12]
 80021c2:	e7ae      	b.n	8002122 <__sflush_r+0x1a>
 80021c4:	690f      	ldr	r7, [r1, #16]
 80021c6:	2f00      	cmp	r7, #0
 80021c8:	d0aa      	beq.n	8002120 <__sflush_r+0x18>
 80021ca:	0793      	lsls	r3, r2, #30
 80021cc:	bf18      	it	ne
 80021ce:	2300      	movne	r3, #0
 80021d0:	680e      	ldr	r6, [r1, #0]
 80021d2:	bf08      	it	eq
 80021d4:	694b      	ldreq	r3, [r1, #20]
 80021d6:	1bf6      	subs	r6, r6, r7
 80021d8:	600f      	str	r7, [r1, #0]
 80021da:	608b      	str	r3, [r1, #8]
 80021dc:	2e00      	cmp	r6, #0
 80021de:	dd9f      	ble.n	8002120 <__sflush_r+0x18>
 80021e0:	4633      	mov	r3, r6
 80021e2:	463a      	mov	r2, r7
 80021e4:	4628      	mov	r0, r5
 80021e6:	6a21      	ldr	r1, [r4, #32]
 80021e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80021ec:	47e0      	blx	ip
 80021ee:	2800      	cmp	r0, #0
 80021f0:	dc06      	bgt.n	8002200 <__sflush_r+0xf8>
 80021f2:	89a3      	ldrh	r3, [r4, #12]
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021fc:	81a3      	strh	r3, [r4, #12]
 80021fe:	e790      	b.n	8002122 <__sflush_r+0x1a>
 8002200:	4407      	add	r7, r0
 8002202:	1a36      	subs	r6, r6, r0
 8002204:	e7ea      	b.n	80021dc <__sflush_r+0xd4>
 8002206:	bf00      	nop
 8002208:	20400001 	.word	0x20400001

0800220c <_fflush_r>:
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	690b      	ldr	r3, [r1, #16]
 8002210:	4605      	mov	r5, r0
 8002212:	460c      	mov	r4, r1
 8002214:	b913      	cbnz	r3, 800221c <_fflush_r+0x10>
 8002216:	2500      	movs	r5, #0
 8002218:	4628      	mov	r0, r5
 800221a:	bd38      	pop	{r3, r4, r5, pc}
 800221c:	b118      	cbz	r0, 8002226 <_fflush_r+0x1a>
 800221e:	6983      	ldr	r3, [r0, #24]
 8002220:	b90b      	cbnz	r3, 8002226 <_fflush_r+0x1a>
 8002222:	f000 f887 	bl	8002334 <__sinit>
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <_fflush_r+0x6c>)
 8002228:	429c      	cmp	r4, r3
 800222a:	d11b      	bne.n	8002264 <_fflush_r+0x58>
 800222c:	686c      	ldr	r4, [r5, #4]
 800222e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0ef      	beq.n	8002216 <_fflush_r+0xa>
 8002236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002238:	07d0      	lsls	r0, r2, #31
 800223a:	d404      	bmi.n	8002246 <_fflush_r+0x3a>
 800223c:	0599      	lsls	r1, r3, #22
 800223e:	d402      	bmi.n	8002246 <_fflush_r+0x3a>
 8002240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002242:	f000 f915 	bl	8002470 <__retarget_lock_acquire_recursive>
 8002246:	4628      	mov	r0, r5
 8002248:	4621      	mov	r1, r4
 800224a:	f7ff ff5d 	bl	8002108 <__sflush_r>
 800224e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002250:	4605      	mov	r5, r0
 8002252:	07da      	lsls	r2, r3, #31
 8002254:	d4e0      	bmi.n	8002218 <_fflush_r+0xc>
 8002256:	89a3      	ldrh	r3, [r4, #12]
 8002258:	059b      	lsls	r3, r3, #22
 800225a:	d4dd      	bmi.n	8002218 <_fflush_r+0xc>
 800225c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800225e:	f000 f908 	bl	8002472 <__retarget_lock_release_recursive>
 8002262:	e7d9      	b.n	8002218 <_fflush_r+0xc>
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <_fflush_r+0x70>)
 8002266:	429c      	cmp	r4, r3
 8002268:	d101      	bne.n	800226e <_fflush_r+0x62>
 800226a:	68ac      	ldr	r4, [r5, #8]
 800226c:	e7df      	b.n	800222e <_fflush_r+0x22>
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <_fflush_r+0x74>)
 8002270:	429c      	cmp	r4, r3
 8002272:	bf08      	it	eq
 8002274:	68ec      	ldreq	r4, [r5, #12]
 8002276:	e7da      	b.n	800222e <_fflush_r+0x22>
 8002278:	080028f4 	.word	0x080028f4
 800227c:	08002914 	.word	0x08002914
 8002280:	080028d4 	.word	0x080028d4

08002284 <std>:
 8002284:	2300      	movs	r3, #0
 8002286:	b510      	push	{r4, lr}
 8002288:	4604      	mov	r4, r0
 800228a:	e9c0 3300 	strd	r3, r3, [r0]
 800228e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002292:	6083      	str	r3, [r0, #8]
 8002294:	8181      	strh	r1, [r0, #12]
 8002296:	6643      	str	r3, [r0, #100]	; 0x64
 8002298:	81c2      	strh	r2, [r0, #14]
 800229a:	6183      	str	r3, [r0, #24]
 800229c:	4619      	mov	r1, r3
 800229e:	2208      	movs	r2, #8
 80022a0:	305c      	adds	r0, #92	; 0x5c
 80022a2:	f7ff fdf3 	bl	8001e8c <memset>
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <std+0x38>)
 80022a8:	6224      	str	r4, [r4, #32]
 80022aa:	6263      	str	r3, [r4, #36]	; 0x24
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <std+0x3c>)
 80022ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <std+0x40>)
 80022b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <std+0x44>)
 80022b6:	6323      	str	r3, [r4, #48]	; 0x30
 80022b8:	bd10      	pop	{r4, pc}
 80022ba:	bf00      	nop
 80022bc:	08002719 	.word	0x08002719
 80022c0:	0800273b 	.word	0x0800273b
 80022c4:	08002773 	.word	0x08002773
 80022c8:	08002797 	.word	0x08002797

080022cc <_cleanup_r>:
 80022cc:	4901      	ldr	r1, [pc, #4]	; (80022d4 <_cleanup_r+0x8>)
 80022ce:	f000 b8af 	b.w	8002430 <_fwalk_reent>
 80022d2:	bf00      	nop
 80022d4:	0800220d 	.word	0x0800220d

080022d8 <__sfmoreglue>:
 80022d8:	2268      	movs	r2, #104	; 0x68
 80022da:	b570      	push	{r4, r5, r6, lr}
 80022dc:	1e4d      	subs	r5, r1, #1
 80022de:	4355      	muls	r5, r2
 80022e0:	460e      	mov	r6, r1
 80022e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80022e6:	f000 f993 	bl	8002610 <_malloc_r>
 80022ea:	4604      	mov	r4, r0
 80022ec:	b140      	cbz	r0, 8002300 <__sfmoreglue+0x28>
 80022ee:	2100      	movs	r1, #0
 80022f0:	e9c0 1600 	strd	r1, r6, [r0]
 80022f4:	300c      	adds	r0, #12
 80022f6:	60a0      	str	r0, [r4, #8]
 80022f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80022fc:	f7ff fdc6 	bl	8001e8c <memset>
 8002300:	4620      	mov	r0, r4
 8002302:	bd70      	pop	{r4, r5, r6, pc}

08002304 <__sfp_lock_acquire>:
 8002304:	4801      	ldr	r0, [pc, #4]	; (800230c <__sfp_lock_acquire+0x8>)
 8002306:	f000 b8b3 	b.w	8002470 <__retarget_lock_acquire_recursive>
 800230a:	bf00      	nop
 800230c:	200000d9 	.word	0x200000d9

08002310 <__sfp_lock_release>:
 8002310:	4801      	ldr	r0, [pc, #4]	; (8002318 <__sfp_lock_release+0x8>)
 8002312:	f000 b8ae 	b.w	8002472 <__retarget_lock_release_recursive>
 8002316:	bf00      	nop
 8002318:	200000d9 	.word	0x200000d9

0800231c <__sinit_lock_acquire>:
 800231c:	4801      	ldr	r0, [pc, #4]	; (8002324 <__sinit_lock_acquire+0x8>)
 800231e:	f000 b8a7 	b.w	8002470 <__retarget_lock_acquire_recursive>
 8002322:	bf00      	nop
 8002324:	200000da 	.word	0x200000da

08002328 <__sinit_lock_release>:
 8002328:	4801      	ldr	r0, [pc, #4]	; (8002330 <__sinit_lock_release+0x8>)
 800232a:	f000 b8a2 	b.w	8002472 <__retarget_lock_release_recursive>
 800232e:	bf00      	nop
 8002330:	200000da 	.word	0x200000da

08002334 <__sinit>:
 8002334:	b510      	push	{r4, lr}
 8002336:	4604      	mov	r4, r0
 8002338:	f7ff fff0 	bl	800231c <__sinit_lock_acquire>
 800233c:	69a3      	ldr	r3, [r4, #24]
 800233e:	b11b      	cbz	r3, 8002348 <__sinit+0x14>
 8002340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002344:	f7ff bff0 	b.w	8002328 <__sinit_lock_release>
 8002348:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800234c:	6523      	str	r3, [r4, #80]	; 0x50
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <__sinit+0x68>)
 8002350:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <__sinit+0x6c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	62a2      	str	r2, [r4, #40]	; 0x28
 8002356:	42a3      	cmp	r3, r4
 8002358:	bf08      	it	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	4620      	mov	r0, r4
 800235e:	bf08      	it	eq
 8002360:	61a3      	streq	r3, [r4, #24]
 8002362:	f000 f81f 	bl	80023a4 <__sfp>
 8002366:	6060      	str	r0, [r4, #4]
 8002368:	4620      	mov	r0, r4
 800236a:	f000 f81b 	bl	80023a4 <__sfp>
 800236e:	60a0      	str	r0, [r4, #8]
 8002370:	4620      	mov	r0, r4
 8002372:	f000 f817 	bl	80023a4 <__sfp>
 8002376:	2200      	movs	r2, #0
 8002378:	2104      	movs	r1, #4
 800237a:	60e0      	str	r0, [r4, #12]
 800237c:	6860      	ldr	r0, [r4, #4]
 800237e:	f7ff ff81 	bl	8002284 <std>
 8002382:	2201      	movs	r2, #1
 8002384:	2109      	movs	r1, #9
 8002386:	68a0      	ldr	r0, [r4, #8]
 8002388:	f7ff ff7c 	bl	8002284 <std>
 800238c:	2202      	movs	r2, #2
 800238e:	2112      	movs	r1, #18
 8002390:	68e0      	ldr	r0, [r4, #12]
 8002392:	f7ff ff77 	bl	8002284 <std>
 8002396:	2301      	movs	r3, #1
 8002398:	61a3      	str	r3, [r4, #24]
 800239a:	e7d1      	b.n	8002340 <__sinit+0xc>
 800239c:	080028d0 	.word	0x080028d0
 80023a0:	080022cd 	.word	0x080022cd

080023a4 <__sfp>:
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a6:	4607      	mov	r7, r0
 80023a8:	f7ff ffac 	bl	8002304 <__sfp_lock_acquire>
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <__sfp+0x84>)
 80023ae:	681e      	ldr	r6, [r3, #0]
 80023b0:	69b3      	ldr	r3, [r6, #24]
 80023b2:	b913      	cbnz	r3, 80023ba <__sfp+0x16>
 80023b4:	4630      	mov	r0, r6
 80023b6:	f7ff ffbd 	bl	8002334 <__sinit>
 80023ba:	3648      	adds	r6, #72	; 0x48
 80023bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	d503      	bpl.n	80023cc <__sfp+0x28>
 80023c4:	6833      	ldr	r3, [r6, #0]
 80023c6:	b30b      	cbz	r3, 800240c <__sfp+0x68>
 80023c8:	6836      	ldr	r6, [r6, #0]
 80023ca:	e7f7      	b.n	80023bc <__sfp+0x18>
 80023cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80023d0:	b9d5      	cbnz	r5, 8002408 <__sfp+0x64>
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <__sfp+0x88>)
 80023d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80023d8:	60e3      	str	r3, [r4, #12]
 80023da:	6665      	str	r5, [r4, #100]	; 0x64
 80023dc:	f000 f847 	bl	800246e <__retarget_lock_init_recursive>
 80023e0:	f7ff ff96 	bl	8002310 <__sfp_lock_release>
 80023e4:	2208      	movs	r2, #8
 80023e6:	4629      	mov	r1, r5
 80023e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80023ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80023f0:	6025      	str	r5, [r4, #0]
 80023f2:	61a5      	str	r5, [r4, #24]
 80023f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80023f8:	f7ff fd48 	bl	8001e8c <memset>
 80023fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002404:	4620      	mov	r0, r4
 8002406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002408:	3468      	adds	r4, #104	; 0x68
 800240a:	e7d9      	b.n	80023c0 <__sfp+0x1c>
 800240c:	2104      	movs	r1, #4
 800240e:	4638      	mov	r0, r7
 8002410:	f7ff ff62 	bl	80022d8 <__sfmoreglue>
 8002414:	4604      	mov	r4, r0
 8002416:	6030      	str	r0, [r6, #0]
 8002418:	2800      	cmp	r0, #0
 800241a:	d1d5      	bne.n	80023c8 <__sfp+0x24>
 800241c:	f7ff ff78 	bl	8002310 <__sfp_lock_release>
 8002420:	230c      	movs	r3, #12
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	e7ee      	b.n	8002404 <__sfp+0x60>
 8002426:	bf00      	nop
 8002428:	080028d0 	.word	0x080028d0
 800242c:	ffff0001 	.word	0xffff0001

08002430 <_fwalk_reent>:
 8002430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002434:	4606      	mov	r6, r0
 8002436:	4688      	mov	r8, r1
 8002438:	2700      	movs	r7, #0
 800243a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800243e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002442:	f1b9 0901 	subs.w	r9, r9, #1
 8002446:	d505      	bpl.n	8002454 <_fwalk_reent+0x24>
 8002448:	6824      	ldr	r4, [r4, #0]
 800244a:	2c00      	cmp	r4, #0
 800244c:	d1f7      	bne.n	800243e <_fwalk_reent+0xe>
 800244e:	4638      	mov	r0, r7
 8002450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002454:	89ab      	ldrh	r3, [r5, #12]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d907      	bls.n	800246a <_fwalk_reent+0x3a>
 800245a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800245e:	3301      	adds	r3, #1
 8002460:	d003      	beq.n	800246a <_fwalk_reent+0x3a>
 8002462:	4629      	mov	r1, r5
 8002464:	4630      	mov	r0, r6
 8002466:	47c0      	blx	r8
 8002468:	4307      	orrs	r7, r0
 800246a:	3568      	adds	r5, #104	; 0x68
 800246c:	e7e9      	b.n	8002442 <_fwalk_reent+0x12>

0800246e <__retarget_lock_init_recursive>:
 800246e:	4770      	bx	lr

08002470 <__retarget_lock_acquire_recursive>:
 8002470:	4770      	bx	lr

08002472 <__retarget_lock_release_recursive>:
 8002472:	4770      	bx	lr

08002474 <__swhatbuf_r>:
 8002474:	b570      	push	{r4, r5, r6, lr}
 8002476:	460e      	mov	r6, r1
 8002478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800247c:	4614      	mov	r4, r2
 800247e:	2900      	cmp	r1, #0
 8002480:	461d      	mov	r5, r3
 8002482:	b096      	sub	sp, #88	; 0x58
 8002484:	da08      	bge.n	8002498 <__swhatbuf_r+0x24>
 8002486:	2200      	movs	r2, #0
 8002488:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800248c:	602a      	str	r2, [r5, #0]
 800248e:	061a      	lsls	r2, r3, #24
 8002490:	d410      	bmi.n	80024b4 <__swhatbuf_r+0x40>
 8002492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002496:	e00e      	b.n	80024b6 <__swhatbuf_r+0x42>
 8002498:	466a      	mov	r2, sp
 800249a:	f000 f9a3 	bl	80027e4 <_fstat_r>
 800249e:	2800      	cmp	r0, #0
 80024a0:	dbf1      	blt.n	8002486 <__swhatbuf_r+0x12>
 80024a2:	9a01      	ldr	r2, [sp, #4]
 80024a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80024a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80024ac:	425a      	negs	r2, r3
 80024ae:	415a      	adcs	r2, r3
 80024b0:	602a      	str	r2, [r5, #0]
 80024b2:	e7ee      	b.n	8002492 <__swhatbuf_r+0x1e>
 80024b4:	2340      	movs	r3, #64	; 0x40
 80024b6:	2000      	movs	r0, #0
 80024b8:	6023      	str	r3, [r4, #0]
 80024ba:	b016      	add	sp, #88	; 0x58
 80024bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080024c0 <__smakebuf_r>:
 80024c0:	898b      	ldrh	r3, [r1, #12]
 80024c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024c4:	079d      	lsls	r5, r3, #30
 80024c6:	4606      	mov	r6, r0
 80024c8:	460c      	mov	r4, r1
 80024ca:	d507      	bpl.n	80024dc <__smakebuf_r+0x1c>
 80024cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80024d0:	6023      	str	r3, [r4, #0]
 80024d2:	6123      	str	r3, [r4, #16]
 80024d4:	2301      	movs	r3, #1
 80024d6:	6163      	str	r3, [r4, #20]
 80024d8:	b002      	add	sp, #8
 80024da:	bd70      	pop	{r4, r5, r6, pc}
 80024dc:	466a      	mov	r2, sp
 80024de:	ab01      	add	r3, sp, #4
 80024e0:	f7ff ffc8 	bl	8002474 <__swhatbuf_r>
 80024e4:	9900      	ldr	r1, [sp, #0]
 80024e6:	4605      	mov	r5, r0
 80024e8:	4630      	mov	r0, r6
 80024ea:	f000 f891 	bl	8002610 <_malloc_r>
 80024ee:	b948      	cbnz	r0, 8002504 <__smakebuf_r+0x44>
 80024f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024f4:	059a      	lsls	r2, r3, #22
 80024f6:	d4ef      	bmi.n	80024d8 <__smakebuf_r+0x18>
 80024f8:	f023 0303 	bic.w	r3, r3, #3
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	81a3      	strh	r3, [r4, #12]
 8002502:	e7e3      	b.n	80024cc <__smakebuf_r+0xc>
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <__smakebuf_r+0x7c>)
 8002506:	62b3      	str	r3, [r6, #40]	; 0x28
 8002508:	89a3      	ldrh	r3, [r4, #12]
 800250a:	6020      	str	r0, [r4, #0]
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	81a3      	strh	r3, [r4, #12]
 8002512:	9b00      	ldr	r3, [sp, #0]
 8002514:	6120      	str	r0, [r4, #16]
 8002516:	6163      	str	r3, [r4, #20]
 8002518:	9b01      	ldr	r3, [sp, #4]
 800251a:	b15b      	cbz	r3, 8002534 <__smakebuf_r+0x74>
 800251c:	4630      	mov	r0, r6
 800251e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002522:	f000 f971 	bl	8002808 <_isatty_r>
 8002526:	b128      	cbz	r0, 8002534 <__smakebuf_r+0x74>
 8002528:	89a3      	ldrh	r3, [r4, #12]
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	81a3      	strh	r3, [r4, #12]
 8002534:	89a0      	ldrh	r0, [r4, #12]
 8002536:	4305      	orrs	r5, r0
 8002538:	81a5      	strh	r5, [r4, #12]
 800253a:	e7cd      	b.n	80024d8 <__smakebuf_r+0x18>
 800253c:	080022cd 	.word	0x080022cd

08002540 <_free_r>:
 8002540:	b538      	push	{r3, r4, r5, lr}
 8002542:	4605      	mov	r5, r0
 8002544:	2900      	cmp	r1, #0
 8002546:	d040      	beq.n	80025ca <_free_r+0x8a>
 8002548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800254c:	1f0c      	subs	r4, r1, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	bfb8      	it	lt
 8002552:	18e4      	addlt	r4, r4, r3
 8002554:	f000 f97a 	bl	800284c <__malloc_lock>
 8002558:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <_free_r+0x8c>)
 800255a:	6813      	ldr	r3, [r2, #0]
 800255c:	b933      	cbnz	r3, 800256c <_free_r+0x2c>
 800255e:	6063      	str	r3, [r4, #4]
 8002560:	6014      	str	r4, [r2, #0]
 8002562:	4628      	mov	r0, r5
 8002564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002568:	f000 b976 	b.w	8002858 <__malloc_unlock>
 800256c:	42a3      	cmp	r3, r4
 800256e:	d908      	bls.n	8002582 <_free_r+0x42>
 8002570:	6820      	ldr	r0, [r4, #0]
 8002572:	1821      	adds	r1, r4, r0
 8002574:	428b      	cmp	r3, r1
 8002576:	bf01      	itttt	eq
 8002578:	6819      	ldreq	r1, [r3, #0]
 800257a:	685b      	ldreq	r3, [r3, #4]
 800257c:	1809      	addeq	r1, r1, r0
 800257e:	6021      	streq	r1, [r4, #0]
 8002580:	e7ed      	b.n	800255e <_free_r+0x1e>
 8002582:	461a      	mov	r2, r3
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	b10b      	cbz	r3, 800258c <_free_r+0x4c>
 8002588:	42a3      	cmp	r3, r4
 800258a:	d9fa      	bls.n	8002582 <_free_r+0x42>
 800258c:	6811      	ldr	r1, [r2, #0]
 800258e:	1850      	adds	r0, r2, r1
 8002590:	42a0      	cmp	r0, r4
 8002592:	d10b      	bne.n	80025ac <_free_r+0x6c>
 8002594:	6820      	ldr	r0, [r4, #0]
 8002596:	4401      	add	r1, r0
 8002598:	1850      	adds	r0, r2, r1
 800259a:	4283      	cmp	r3, r0
 800259c:	6011      	str	r1, [r2, #0]
 800259e:	d1e0      	bne.n	8002562 <_free_r+0x22>
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4401      	add	r1, r0
 80025a6:	6011      	str	r1, [r2, #0]
 80025a8:	6053      	str	r3, [r2, #4]
 80025aa:	e7da      	b.n	8002562 <_free_r+0x22>
 80025ac:	d902      	bls.n	80025b4 <_free_r+0x74>
 80025ae:	230c      	movs	r3, #12
 80025b0:	602b      	str	r3, [r5, #0]
 80025b2:	e7d6      	b.n	8002562 <_free_r+0x22>
 80025b4:	6820      	ldr	r0, [r4, #0]
 80025b6:	1821      	adds	r1, r4, r0
 80025b8:	428b      	cmp	r3, r1
 80025ba:	bf01      	itttt	eq
 80025bc:	6819      	ldreq	r1, [r3, #0]
 80025be:	685b      	ldreq	r3, [r3, #4]
 80025c0:	1809      	addeq	r1, r1, r0
 80025c2:	6021      	streq	r1, [r4, #0]
 80025c4:	6063      	str	r3, [r4, #4]
 80025c6:	6054      	str	r4, [r2, #4]
 80025c8:	e7cb      	b.n	8002562 <_free_r+0x22>
 80025ca:	bd38      	pop	{r3, r4, r5, pc}
 80025cc:	200000dc 	.word	0x200000dc

080025d0 <sbrk_aligned>:
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	4e0e      	ldr	r6, [pc, #56]	; (800260c <sbrk_aligned+0x3c>)
 80025d4:	460c      	mov	r4, r1
 80025d6:	6831      	ldr	r1, [r6, #0]
 80025d8:	4605      	mov	r5, r0
 80025da:	b911      	cbnz	r1, 80025e2 <sbrk_aligned+0x12>
 80025dc:	f000 f88c 	bl	80026f8 <_sbrk_r>
 80025e0:	6030      	str	r0, [r6, #0]
 80025e2:	4621      	mov	r1, r4
 80025e4:	4628      	mov	r0, r5
 80025e6:	f000 f887 	bl	80026f8 <_sbrk_r>
 80025ea:	1c43      	adds	r3, r0, #1
 80025ec:	d00a      	beq.n	8002604 <sbrk_aligned+0x34>
 80025ee:	1cc4      	adds	r4, r0, #3
 80025f0:	f024 0403 	bic.w	r4, r4, #3
 80025f4:	42a0      	cmp	r0, r4
 80025f6:	d007      	beq.n	8002608 <sbrk_aligned+0x38>
 80025f8:	1a21      	subs	r1, r4, r0
 80025fa:	4628      	mov	r0, r5
 80025fc:	f000 f87c 	bl	80026f8 <_sbrk_r>
 8002600:	3001      	adds	r0, #1
 8002602:	d101      	bne.n	8002608 <sbrk_aligned+0x38>
 8002604:	f04f 34ff 	mov.w	r4, #4294967295
 8002608:	4620      	mov	r0, r4
 800260a:	bd70      	pop	{r4, r5, r6, pc}
 800260c:	200000e0 	.word	0x200000e0

08002610 <_malloc_r>:
 8002610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002614:	1ccd      	adds	r5, r1, #3
 8002616:	f025 0503 	bic.w	r5, r5, #3
 800261a:	3508      	adds	r5, #8
 800261c:	2d0c      	cmp	r5, #12
 800261e:	bf38      	it	cc
 8002620:	250c      	movcc	r5, #12
 8002622:	2d00      	cmp	r5, #0
 8002624:	4607      	mov	r7, r0
 8002626:	db01      	blt.n	800262c <_malloc_r+0x1c>
 8002628:	42a9      	cmp	r1, r5
 800262a:	d905      	bls.n	8002638 <_malloc_r+0x28>
 800262c:	230c      	movs	r3, #12
 800262e:	2600      	movs	r6, #0
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	4630      	mov	r0, r6
 8002634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002638:	4e2e      	ldr	r6, [pc, #184]	; (80026f4 <_malloc_r+0xe4>)
 800263a:	f000 f907 	bl	800284c <__malloc_lock>
 800263e:	6833      	ldr	r3, [r6, #0]
 8002640:	461c      	mov	r4, r3
 8002642:	bb34      	cbnz	r4, 8002692 <_malloc_r+0x82>
 8002644:	4629      	mov	r1, r5
 8002646:	4638      	mov	r0, r7
 8002648:	f7ff ffc2 	bl	80025d0 <sbrk_aligned>
 800264c:	1c43      	adds	r3, r0, #1
 800264e:	4604      	mov	r4, r0
 8002650:	d14d      	bne.n	80026ee <_malloc_r+0xde>
 8002652:	6834      	ldr	r4, [r6, #0]
 8002654:	4626      	mov	r6, r4
 8002656:	2e00      	cmp	r6, #0
 8002658:	d140      	bne.n	80026dc <_malloc_r+0xcc>
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	4631      	mov	r1, r6
 800265e:	4638      	mov	r0, r7
 8002660:	eb04 0803 	add.w	r8, r4, r3
 8002664:	f000 f848 	bl	80026f8 <_sbrk_r>
 8002668:	4580      	cmp	r8, r0
 800266a:	d13a      	bne.n	80026e2 <_malloc_r+0xd2>
 800266c:	6821      	ldr	r1, [r4, #0]
 800266e:	3503      	adds	r5, #3
 8002670:	1a6d      	subs	r5, r5, r1
 8002672:	f025 0503 	bic.w	r5, r5, #3
 8002676:	3508      	adds	r5, #8
 8002678:	2d0c      	cmp	r5, #12
 800267a:	bf38      	it	cc
 800267c:	250c      	movcc	r5, #12
 800267e:	4638      	mov	r0, r7
 8002680:	4629      	mov	r1, r5
 8002682:	f7ff ffa5 	bl	80025d0 <sbrk_aligned>
 8002686:	3001      	adds	r0, #1
 8002688:	d02b      	beq.n	80026e2 <_malloc_r+0xd2>
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	442b      	add	r3, r5
 800268e:	6023      	str	r3, [r4, #0]
 8002690:	e00e      	b.n	80026b0 <_malloc_r+0xa0>
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	1b52      	subs	r2, r2, r5
 8002696:	d41e      	bmi.n	80026d6 <_malloc_r+0xc6>
 8002698:	2a0b      	cmp	r2, #11
 800269a:	d916      	bls.n	80026ca <_malloc_r+0xba>
 800269c:	1961      	adds	r1, r4, r5
 800269e:	42a3      	cmp	r3, r4
 80026a0:	6025      	str	r5, [r4, #0]
 80026a2:	bf18      	it	ne
 80026a4:	6059      	strne	r1, [r3, #4]
 80026a6:	6863      	ldr	r3, [r4, #4]
 80026a8:	bf08      	it	eq
 80026aa:	6031      	streq	r1, [r6, #0]
 80026ac:	5162      	str	r2, [r4, r5]
 80026ae:	604b      	str	r3, [r1, #4]
 80026b0:	4638      	mov	r0, r7
 80026b2:	f104 060b 	add.w	r6, r4, #11
 80026b6:	f000 f8cf 	bl	8002858 <__malloc_unlock>
 80026ba:	f026 0607 	bic.w	r6, r6, #7
 80026be:	1d23      	adds	r3, r4, #4
 80026c0:	1af2      	subs	r2, r6, r3
 80026c2:	d0b6      	beq.n	8002632 <_malloc_r+0x22>
 80026c4:	1b9b      	subs	r3, r3, r6
 80026c6:	50a3      	str	r3, [r4, r2]
 80026c8:	e7b3      	b.n	8002632 <_malloc_r+0x22>
 80026ca:	6862      	ldr	r2, [r4, #4]
 80026cc:	42a3      	cmp	r3, r4
 80026ce:	bf0c      	ite	eq
 80026d0:	6032      	streq	r2, [r6, #0]
 80026d2:	605a      	strne	r2, [r3, #4]
 80026d4:	e7ec      	b.n	80026b0 <_malloc_r+0xa0>
 80026d6:	4623      	mov	r3, r4
 80026d8:	6864      	ldr	r4, [r4, #4]
 80026da:	e7b2      	b.n	8002642 <_malloc_r+0x32>
 80026dc:	4634      	mov	r4, r6
 80026de:	6876      	ldr	r6, [r6, #4]
 80026e0:	e7b9      	b.n	8002656 <_malloc_r+0x46>
 80026e2:	230c      	movs	r3, #12
 80026e4:	4638      	mov	r0, r7
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	f000 f8b6 	bl	8002858 <__malloc_unlock>
 80026ec:	e7a1      	b.n	8002632 <_malloc_r+0x22>
 80026ee:	6025      	str	r5, [r4, #0]
 80026f0:	e7de      	b.n	80026b0 <_malloc_r+0xa0>
 80026f2:	bf00      	nop
 80026f4:	200000dc 	.word	0x200000dc

080026f8 <_sbrk_r>:
 80026f8:	b538      	push	{r3, r4, r5, lr}
 80026fa:	2300      	movs	r3, #0
 80026fc:	4d05      	ldr	r5, [pc, #20]	; (8002714 <_sbrk_r+0x1c>)
 80026fe:	4604      	mov	r4, r0
 8002700:	4608      	mov	r0, r1
 8002702:	602b      	str	r3, [r5, #0]
 8002704:	f7fe f860 	bl	80007c8 <_sbrk>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	d102      	bne.n	8002712 <_sbrk_r+0x1a>
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	b103      	cbz	r3, 8002712 <_sbrk_r+0x1a>
 8002710:	6023      	str	r3, [r4, #0]
 8002712:	bd38      	pop	{r3, r4, r5, pc}
 8002714:	200000e4 	.word	0x200000e4

08002718 <__sread>:
 8002718:	b510      	push	{r4, lr}
 800271a:	460c      	mov	r4, r1
 800271c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002720:	f000 f8a0 	bl	8002864 <_read_r>
 8002724:	2800      	cmp	r0, #0
 8002726:	bfab      	itete	ge
 8002728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800272a:	89a3      	ldrhlt	r3, [r4, #12]
 800272c:	181b      	addge	r3, r3, r0
 800272e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002732:	bfac      	ite	ge
 8002734:	6563      	strge	r3, [r4, #84]	; 0x54
 8002736:	81a3      	strhlt	r3, [r4, #12]
 8002738:	bd10      	pop	{r4, pc}

0800273a <__swrite>:
 800273a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800273e:	461f      	mov	r7, r3
 8002740:	898b      	ldrh	r3, [r1, #12]
 8002742:	4605      	mov	r5, r0
 8002744:	05db      	lsls	r3, r3, #23
 8002746:	460c      	mov	r4, r1
 8002748:	4616      	mov	r6, r2
 800274a:	d505      	bpl.n	8002758 <__swrite+0x1e>
 800274c:	2302      	movs	r3, #2
 800274e:	2200      	movs	r2, #0
 8002750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002754:	f000 f868 	bl	8002828 <_lseek_r>
 8002758:	89a3      	ldrh	r3, [r4, #12]
 800275a:	4632      	mov	r2, r6
 800275c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002760:	81a3      	strh	r3, [r4, #12]
 8002762:	4628      	mov	r0, r5
 8002764:	463b      	mov	r3, r7
 8002766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800276a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800276e:	f000 b817 	b.w	80027a0 <_write_r>

08002772 <__sseek>:
 8002772:	b510      	push	{r4, lr}
 8002774:	460c      	mov	r4, r1
 8002776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800277a:	f000 f855 	bl	8002828 <_lseek_r>
 800277e:	1c43      	adds	r3, r0, #1
 8002780:	89a3      	ldrh	r3, [r4, #12]
 8002782:	bf15      	itete	ne
 8002784:	6560      	strne	r0, [r4, #84]	; 0x54
 8002786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800278a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800278e:	81a3      	strheq	r3, [r4, #12]
 8002790:	bf18      	it	ne
 8002792:	81a3      	strhne	r3, [r4, #12]
 8002794:	bd10      	pop	{r4, pc}

08002796 <__sclose>:
 8002796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800279a:	f000 b813 	b.w	80027c4 <_close_r>
	...

080027a0 <_write_r>:
 80027a0:	b538      	push	{r3, r4, r5, lr}
 80027a2:	4604      	mov	r4, r0
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	2200      	movs	r2, #0
 80027aa:	4d05      	ldr	r5, [pc, #20]	; (80027c0 <_write_r+0x20>)
 80027ac:	602a      	str	r2, [r5, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f7fd ffc4 	bl	800073c <_write>
 80027b4:	1c43      	adds	r3, r0, #1
 80027b6:	d102      	bne.n	80027be <_write_r+0x1e>
 80027b8:	682b      	ldr	r3, [r5, #0]
 80027ba:	b103      	cbz	r3, 80027be <_write_r+0x1e>
 80027bc:	6023      	str	r3, [r4, #0]
 80027be:	bd38      	pop	{r3, r4, r5, pc}
 80027c0:	200000e4 	.word	0x200000e4

080027c4 <_close_r>:
 80027c4:	b538      	push	{r3, r4, r5, lr}
 80027c6:	2300      	movs	r3, #0
 80027c8:	4d05      	ldr	r5, [pc, #20]	; (80027e0 <_close_r+0x1c>)
 80027ca:	4604      	mov	r4, r0
 80027cc:	4608      	mov	r0, r1
 80027ce:	602b      	str	r3, [r5, #0]
 80027d0:	f7fd ffca 	bl	8000768 <_close>
 80027d4:	1c43      	adds	r3, r0, #1
 80027d6:	d102      	bne.n	80027de <_close_r+0x1a>
 80027d8:	682b      	ldr	r3, [r5, #0]
 80027da:	b103      	cbz	r3, 80027de <_close_r+0x1a>
 80027dc:	6023      	str	r3, [r4, #0]
 80027de:	bd38      	pop	{r3, r4, r5, pc}
 80027e0:	200000e4 	.word	0x200000e4

080027e4 <_fstat_r>:
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	2300      	movs	r3, #0
 80027e8:	4d06      	ldr	r5, [pc, #24]	; (8002804 <_fstat_r+0x20>)
 80027ea:	4604      	mov	r4, r0
 80027ec:	4608      	mov	r0, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	602b      	str	r3, [r5, #0]
 80027f2:	f7fd ffc4 	bl	800077e <_fstat>
 80027f6:	1c43      	adds	r3, r0, #1
 80027f8:	d102      	bne.n	8002800 <_fstat_r+0x1c>
 80027fa:	682b      	ldr	r3, [r5, #0]
 80027fc:	b103      	cbz	r3, 8002800 <_fstat_r+0x1c>
 80027fe:	6023      	str	r3, [r4, #0]
 8002800:	bd38      	pop	{r3, r4, r5, pc}
 8002802:	bf00      	nop
 8002804:	200000e4 	.word	0x200000e4

08002808 <_isatty_r>:
 8002808:	b538      	push	{r3, r4, r5, lr}
 800280a:	2300      	movs	r3, #0
 800280c:	4d05      	ldr	r5, [pc, #20]	; (8002824 <_isatty_r+0x1c>)
 800280e:	4604      	mov	r4, r0
 8002810:	4608      	mov	r0, r1
 8002812:	602b      	str	r3, [r5, #0]
 8002814:	f7fd ffc2 	bl	800079c <_isatty>
 8002818:	1c43      	adds	r3, r0, #1
 800281a:	d102      	bne.n	8002822 <_isatty_r+0x1a>
 800281c:	682b      	ldr	r3, [r5, #0]
 800281e:	b103      	cbz	r3, 8002822 <_isatty_r+0x1a>
 8002820:	6023      	str	r3, [r4, #0]
 8002822:	bd38      	pop	{r3, r4, r5, pc}
 8002824:	200000e4 	.word	0x200000e4

08002828 <_lseek_r>:
 8002828:	b538      	push	{r3, r4, r5, lr}
 800282a:	4604      	mov	r4, r0
 800282c:	4608      	mov	r0, r1
 800282e:	4611      	mov	r1, r2
 8002830:	2200      	movs	r2, #0
 8002832:	4d05      	ldr	r5, [pc, #20]	; (8002848 <_lseek_r+0x20>)
 8002834:	602a      	str	r2, [r5, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	f7fd ffba 	bl	80007b0 <_lseek>
 800283c:	1c43      	adds	r3, r0, #1
 800283e:	d102      	bne.n	8002846 <_lseek_r+0x1e>
 8002840:	682b      	ldr	r3, [r5, #0]
 8002842:	b103      	cbz	r3, 8002846 <_lseek_r+0x1e>
 8002844:	6023      	str	r3, [r4, #0]
 8002846:	bd38      	pop	{r3, r4, r5, pc}
 8002848:	200000e4 	.word	0x200000e4

0800284c <__malloc_lock>:
 800284c:	4801      	ldr	r0, [pc, #4]	; (8002854 <__malloc_lock+0x8>)
 800284e:	f7ff be0f 	b.w	8002470 <__retarget_lock_acquire_recursive>
 8002852:	bf00      	nop
 8002854:	200000d8 	.word	0x200000d8

08002858 <__malloc_unlock>:
 8002858:	4801      	ldr	r0, [pc, #4]	; (8002860 <__malloc_unlock+0x8>)
 800285a:	f7ff be0a 	b.w	8002472 <__retarget_lock_release_recursive>
 800285e:	bf00      	nop
 8002860:	200000d8 	.word	0x200000d8

08002864 <_read_r>:
 8002864:	b538      	push	{r3, r4, r5, lr}
 8002866:	4604      	mov	r4, r0
 8002868:	4608      	mov	r0, r1
 800286a:	4611      	mov	r1, r2
 800286c:	2200      	movs	r2, #0
 800286e:	4d05      	ldr	r5, [pc, #20]	; (8002884 <_read_r+0x20>)
 8002870:	602a      	str	r2, [r5, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	f7fd ff45 	bl	8000702 <_read>
 8002878:	1c43      	adds	r3, r0, #1
 800287a:	d102      	bne.n	8002882 <_read_r+0x1e>
 800287c:	682b      	ldr	r3, [r5, #0]
 800287e:	b103      	cbz	r3, 8002882 <_read_r+0x1e>
 8002880:	6023      	str	r3, [r4, #0]
 8002882:	bd38      	pop	{r3, r4, r5, pc}
 8002884:	200000e4 	.word	0x200000e4

08002888 <_init>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	bf00      	nop
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr

08002894 <_fini>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	bf00      	nop
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr
