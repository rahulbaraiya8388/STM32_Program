
QSPI_SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000757c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd8  08007cd8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ce0  08007ce0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002798  20000088  08007d70  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002820  08007d70  00022820  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdf5  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002203  00000000  00000000  0002bea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  0002ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c1f  00000000  00000000  0002f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff5a  00000000  00000000  000463f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084556  00000000  00000000  00056351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da8a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a8  00000000  00000000  000da8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000088 	.word	0x20000088
 8000158:	00000000 	.word	0x00000000
 800015c:	080076a0 	.word	0x080076a0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000008c 	.word	0x2000008c
 8000178:	080076a0 	.word	0x080076a0

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_dmul>:
 800018c:	b570      	push	{r4, r5, r6, lr}
 800018e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000192:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000196:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800019a:	bf1d      	ittte	ne
 800019c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001a0:	ea94 0f0c 	teqne	r4, ip
 80001a4:	ea95 0f0c 	teqne	r5, ip
 80001a8:	f000 f8de 	bleq	8000368 <__aeabi_dmul+0x1dc>
 80001ac:	442c      	add	r4, r5
 80001ae:	ea81 0603 	eor.w	r6, r1, r3
 80001b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001be:	bf18      	it	ne
 80001c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001cc:	d038      	beq.n	8000240 <__aeabi_dmul+0xb4>
 80001ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80001d2:	f04f 0500 	mov.w	r5, #0
 80001d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001e2:	f04f 0600 	mov.w	r6, #0
 80001e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ea:	f09c 0f00 	teq	ip, #0
 80001ee:	bf18      	it	ne
 80001f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000200:	d204      	bcs.n	800020c <__aeabi_dmul+0x80>
 8000202:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000206:	416d      	adcs	r5, r5
 8000208:	eb46 0606 	adc.w	r6, r6, r6
 800020c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000210:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000214:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000218:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800021c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000220:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000224:	bf88      	it	hi
 8000226:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800022a:	d81e      	bhi.n	800026a <__aeabi_dmul+0xde>
 800022c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000230:	bf08      	it	eq
 8000232:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000236:	f150 0000 	adcs.w	r0, r0, #0
 800023a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800023e:	bd70      	pop	{r4, r5, r6, pc}
 8000240:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000244:	ea46 0101 	orr.w	r1, r6, r1
 8000248:	ea40 0002 	orr.w	r0, r0, r2
 800024c:	ea81 0103 	eor.w	r1, r1, r3
 8000250:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000254:	bfc2      	ittt	gt
 8000256:	ebd4 050c 	rsbsgt	r5, r4, ip
 800025a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800025e:	bd70      	popgt	{r4, r5, r6, pc}
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f04f 0e00 	mov.w	lr, #0
 8000268:	3c01      	subs	r4, #1
 800026a:	f300 80ab 	bgt.w	80003c4 <__aeabi_dmul+0x238>
 800026e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000272:	bfde      	ittt	le
 8000274:	2000      	movle	r0, #0
 8000276:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800027a:	bd70      	pople	{r4, r5, r6, pc}
 800027c:	f1c4 0400 	rsb	r4, r4, #0
 8000280:	3c20      	subs	r4, #32
 8000282:	da35      	bge.n	80002f0 <__aeabi_dmul+0x164>
 8000284:	340c      	adds	r4, #12
 8000286:	dc1b      	bgt.n	80002c0 <__aeabi_dmul+0x134>
 8000288:	f104 0414 	add.w	r4, r4, #20
 800028c:	f1c4 0520 	rsb	r5, r4, #32
 8000290:	fa00 f305 	lsl.w	r3, r0, r5
 8000294:	fa20 f004 	lsr.w	r0, r0, r4
 8000298:	fa01 f205 	lsl.w	r2, r1, r5
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002ac:	fa21 f604 	lsr.w	r6, r1, r4
 80002b0:	eb42 0106 	adc.w	r1, r2, r6
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 040c 	rsb	r4, r4, #12
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f304 	lsl.w	r3, r0, r4
 80002cc:	fa20 f005 	lsr.w	r0, r0, r5
 80002d0:	fa01 f204 	lsl.w	r2, r1, r4
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e8:	bf08      	it	eq
 80002ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f205 	lsl.w	r2, r0, r5
 80002f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000300:	fa01 f205 	lsl.w	r2, r1, r5
 8000304:	ea43 0302 	orr.w	r3, r3, r2
 8000308:	fa21 f004 	lsr.w	r0, r1, r4
 800030c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000310:	fa21 f204 	lsr.w	r2, r1, r4
 8000314:	ea20 0002 	bic.w	r0, r0, r2
 8000318:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800031c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000320:	bf08      	it	eq
 8000322:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	f094 0f00 	teq	r4, #0
 800032c:	d10f      	bne.n	800034e <__aeabi_dmul+0x1c2>
 800032e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000332:	0040      	lsls	r0, r0, #1
 8000334:	eb41 0101 	adc.w	r1, r1, r1
 8000338:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033c:	bf08      	it	eq
 800033e:	3c01      	subeq	r4, #1
 8000340:	d0f7      	beq.n	8000332 <__aeabi_dmul+0x1a6>
 8000342:	ea41 0106 	orr.w	r1, r1, r6
 8000346:	f095 0f00 	teq	r5, #0
 800034a:	bf18      	it	ne
 800034c:	4770      	bxne	lr
 800034e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000352:	0052      	lsls	r2, r2, #1
 8000354:	eb43 0303 	adc.w	r3, r3, r3
 8000358:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800035c:	bf08      	it	eq
 800035e:	3d01      	subeq	r5, #1
 8000360:	d0f7      	beq.n	8000352 <__aeabi_dmul+0x1c6>
 8000362:	ea43 0306 	orr.w	r3, r3, r6
 8000366:	4770      	bx	lr
 8000368:	ea94 0f0c 	teq	r4, ip
 800036c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000370:	bf18      	it	ne
 8000372:	ea95 0f0c 	teqne	r5, ip
 8000376:	d00c      	beq.n	8000392 <__aeabi_dmul+0x206>
 8000378:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037c:	bf18      	it	ne
 800037e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000382:	d1d1      	bne.n	8000328 <__aeabi_dmul+0x19c>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f04f 0000 	mov.w	r0, #0
 8000390:	bd70      	pop	{r4, r5, r6, pc}
 8000392:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000396:	bf06      	itte	eq
 8000398:	4610      	moveq	r0, r2
 800039a:	4619      	moveq	r1, r3
 800039c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003a0:	d019      	beq.n	80003d6 <__aeabi_dmul+0x24a>
 80003a2:	ea94 0f0c 	teq	r4, ip
 80003a6:	d102      	bne.n	80003ae <__aeabi_dmul+0x222>
 80003a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003ac:	d113      	bne.n	80003d6 <__aeabi_dmul+0x24a>
 80003ae:	ea95 0f0c 	teq	r5, ip
 80003b2:	d105      	bne.n	80003c0 <__aeabi_dmul+0x234>
 80003b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003b8:	bf1c      	itt	ne
 80003ba:	4610      	movne	r0, r2
 80003bc:	4619      	movne	r1, r3
 80003be:	d10a      	bne.n	80003d6 <__aeabi_dmul+0x24a>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003de:	bd70      	pop	{r4, r5, r6, pc}

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_d2uiz>:
 8000758:	004a      	lsls	r2, r1, #1
 800075a:	d211      	bcs.n	8000780 <__aeabi_d2uiz+0x28>
 800075c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000760:	d211      	bcs.n	8000786 <__aeabi_d2uiz+0x2e>
 8000762:	d50d      	bpl.n	8000780 <__aeabi_d2uiz+0x28>
 8000764:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000768:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800076c:	d40e      	bmi.n	800078c <__aeabi_d2uiz+0x34>
 800076e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000776:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800077a:	fa23 f002 	lsr.w	r0, r3, r2
 800077e:	4770      	bx	lr
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	4770      	bx	lr
 8000786:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800078a:	d102      	bne.n	8000792 <__aeabi_d2uiz+0x3a>
 800078c:	f04f 30ff 	mov.w	r0, #4294967295
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr

08000798 <__aeabi_uldivmod>:
 8000798:	b953      	cbnz	r3, 80007b0 <__aeabi_uldivmod+0x18>
 800079a:	b94a      	cbnz	r2, 80007b0 <__aeabi_uldivmod+0x18>
 800079c:	2900      	cmp	r1, #0
 800079e:	bf08      	it	eq
 80007a0:	2800      	cmpeq	r0, #0
 80007a2:	bf1c      	itt	ne
 80007a4:	f04f 31ff 	movne.w	r1, #4294967295
 80007a8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ac:	f000 b976 	b.w	8000a9c <__aeabi_idiv0>
 80007b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007b8:	f000 f806 	bl	80007c8 <__udivmoddi4>
 80007bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007c4:	b004      	add	sp, #16
 80007c6:	4770      	bx	lr

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	4688      	mov	r8, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14d      	bne.n	8000874 <__udivmoddi4+0xac>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d968      	bls.n	80008b0 <__udivmoddi4+0xe8>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b152      	cbz	r2, 80007fa <__udivmoddi4+0x32>
 80007e4:	fa01 f302 	lsl.w	r3, r1, r2
 80007e8:	f1c2 0120 	rsb	r1, r2, #32
 80007ec:	fa20 f101 	lsr.w	r1, r0, r1
 80007f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f4:	ea41 0803 	orr.w	r8, r1, r3
 80007f8:	4094      	lsls	r4, r2
 80007fa:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80007fe:	fbb8 f7f1 	udiv	r7, r8, r1
 8000802:	fa1f fe8c 	uxth.w	lr, ip
 8000806:	fb01 8817 	mls	r8, r1, r7, r8
 800080a:	fb07 f00e 	mul.w	r0, r7, lr
 800080e:	0c23      	lsrs	r3, r4, #16
 8000810:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000814:	4298      	cmp	r0, r3
 8000816:	d90a      	bls.n	800082e <__udivmoddi4+0x66>
 8000818:	eb1c 0303 	adds.w	r3, ip, r3
 800081c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000820:	f080 811e 	bcs.w	8000a60 <__udivmoddi4+0x298>
 8000824:	4298      	cmp	r0, r3
 8000826:	f240 811b 	bls.w	8000a60 <__udivmoddi4+0x298>
 800082a:	3f02      	subs	r7, #2
 800082c:	4463      	add	r3, ip
 800082e:	1a1b      	subs	r3, r3, r0
 8000830:	fbb3 f0f1 	udiv	r0, r3, r1
 8000834:	fb01 3310 	mls	r3, r1, r0, r3
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	b2a4      	uxth	r4, r4
 800083e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000842:	45a6      	cmp	lr, r4
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x94>
 8000846:	eb1c 0404 	adds.w	r4, ip, r4
 800084a:	f100 33ff 	add.w	r3, r0, #4294967295
 800084e:	f080 8109 	bcs.w	8000a64 <__udivmoddi4+0x29c>
 8000852:	45a6      	cmp	lr, r4
 8000854:	f240 8106 	bls.w	8000a64 <__udivmoddi4+0x29c>
 8000858:	4464      	add	r4, ip
 800085a:	3802      	subs	r0, #2
 800085c:	2100      	movs	r1, #0
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000866:	b11e      	cbz	r6, 8000870 <__udivmoddi4+0xa8>
 8000868:	2300      	movs	r3, #0
 800086a:	40d4      	lsrs	r4, r2
 800086c:	e9c6 4300 	strd	r4, r3, [r6]
 8000870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000874:	428b      	cmp	r3, r1
 8000876:	d908      	bls.n	800088a <__udivmoddi4+0xc2>
 8000878:	2e00      	cmp	r6, #0
 800087a:	f000 80ee 	beq.w	8000a5a <__udivmoddi4+0x292>
 800087e:	2100      	movs	r1, #0
 8000880:	e9c6 0500 	strd	r0, r5, [r6]
 8000884:	4608      	mov	r0, r1
 8000886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088a:	fab3 f183 	clz	r1, r3
 800088e:	2900      	cmp	r1, #0
 8000890:	d14a      	bne.n	8000928 <__udivmoddi4+0x160>
 8000892:	42ab      	cmp	r3, r5
 8000894:	d302      	bcc.n	800089c <__udivmoddi4+0xd4>
 8000896:	4282      	cmp	r2, r0
 8000898:	f200 80fc 	bhi.w	8000a94 <__udivmoddi4+0x2cc>
 800089c:	1a84      	subs	r4, r0, r2
 800089e:	eb65 0303 	sbc.w	r3, r5, r3
 80008a2:	2001      	movs	r0, #1
 80008a4:	4698      	mov	r8, r3
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d0e2      	beq.n	8000870 <__udivmoddi4+0xa8>
 80008aa:	e9c6 4800 	strd	r4, r8, [r6]
 80008ae:	e7df      	b.n	8000870 <__udivmoddi4+0xa8>
 80008b0:	b902      	cbnz	r2, 80008b4 <__udivmoddi4+0xec>
 80008b2:	deff      	udf	#255	; 0xff
 80008b4:	fab2 f282 	clz	r2, r2
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	f040 8091 	bne.w	80009e0 <__udivmoddi4+0x218>
 80008be:	eba1 000c 	sub.w	r0, r1, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb0 f3f7 	udiv	r3, r0, r7
 80008d0:	fb07 0013 	mls	r0, r7, r3, r0
 80008d4:	0c25      	lsrs	r5, r4, #16
 80008d6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008da:	fb0e f003 	mul.w	r0, lr, r3
 80008de:	42a8      	cmp	r0, r5
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x12c>
 80008e2:	eb1c 0505 	adds.w	r5, ip, r5
 80008e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x12a>
 80008ec:	42a8      	cmp	r0, r5
 80008ee:	f200 80ce 	bhi.w	8000a8e <__udivmoddi4+0x2c6>
 80008f2:	4643      	mov	r3, r8
 80008f4:	1a2d      	subs	r5, r5, r0
 80008f6:	fbb5 f0f7 	udiv	r0, r5, r7
 80008fa:	fb07 5510 	mls	r5, r7, r0, r5
 80008fe:	fb0e fe00 	mul.w	lr, lr, r0
 8000902:	b2a4      	uxth	r4, r4
 8000904:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000908:	45a6      	cmp	lr, r4
 800090a:	d908      	bls.n	800091e <__udivmoddi4+0x156>
 800090c:	eb1c 0404 	adds.w	r4, ip, r4
 8000910:	f100 35ff 	add.w	r5, r0, #4294967295
 8000914:	d202      	bcs.n	800091c <__udivmoddi4+0x154>
 8000916:	45a6      	cmp	lr, r4
 8000918:	f200 80b6 	bhi.w	8000a88 <__udivmoddi4+0x2c0>
 800091c:	4628      	mov	r0, r5
 800091e:	eba4 040e 	sub.w	r4, r4, lr
 8000922:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000926:	e79e      	b.n	8000866 <__udivmoddi4+0x9e>
 8000928:	f1c1 0720 	rsb	r7, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000932:	ea4c 0c03 	orr.w	ip, ip, r3
 8000936:	fa25 fa07 	lsr.w	sl, r5, r7
 800093a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093e:	fbba f8f9 	udiv	r8, sl, r9
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	fb09 aa18 	mls	sl, r9, r8, sl
 800094a:	408d      	lsls	r5, r1
 800094c:	fa1f fe8c 	uxth.w	lr, ip
 8000950:	431d      	orrs	r5, r3
 8000952:	fa00 f301 	lsl.w	r3, r0, r1
 8000956:	fb08 f00e 	mul.w	r0, r8, lr
 800095a:	0c2c      	lsrs	r4, r5, #16
 800095c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000960:	42a0      	cmp	r0, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90b      	bls.n	8000980 <__udivmoddi4+0x1b8>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000970:	f080 8088 	bcs.w	8000a84 <__udivmoddi4+0x2bc>
 8000974:	42a0      	cmp	r0, r4
 8000976:	f240 8085 	bls.w	8000a84 <__udivmoddi4+0x2bc>
 800097a:	f1a8 0802 	sub.w	r8, r8, #2
 800097e:	4464      	add	r4, ip
 8000980:	1a24      	subs	r4, r4, r0
 8000982:	fbb4 f0f9 	udiv	r0, r4, r9
 8000986:	fb09 4410 	mls	r4, r9, r0, r4
 800098a:	fb00 fe0e 	mul.w	lr, r0, lr
 800098e:	b2ad      	uxth	r5, r5
 8000990:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000994:	45a6      	cmp	lr, r4
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x1e2>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 35ff 	add.w	r5, r0, #4294967295
 80009a0:	d26c      	bcs.n	8000a7c <__udivmoddi4+0x2b4>
 80009a2:	45a6      	cmp	lr, r4
 80009a4:	d96a      	bls.n	8000a7c <__udivmoddi4+0x2b4>
 80009a6:	3802      	subs	r0, #2
 80009a8:	4464      	add	r4, ip
 80009aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ae:	fba0 9502 	umull	r9, r5, r0, r2
 80009b2:	eba4 040e 	sub.w	r4, r4, lr
 80009b6:	42ac      	cmp	r4, r5
 80009b8:	46c8      	mov	r8, r9
 80009ba:	46ae      	mov	lr, r5
 80009bc:	d356      	bcc.n	8000a6c <__udivmoddi4+0x2a4>
 80009be:	d053      	beq.n	8000a68 <__udivmoddi4+0x2a0>
 80009c0:	2e00      	cmp	r6, #0
 80009c2:	d069      	beq.n	8000a98 <__udivmoddi4+0x2d0>
 80009c4:	ebb3 0208 	subs.w	r2, r3, r8
 80009c8:	eb64 040e 	sbc.w	r4, r4, lr
 80009cc:	fa22 f301 	lsr.w	r3, r2, r1
 80009d0:	fa04 f707 	lsl.w	r7, r4, r7
 80009d4:	431f      	orrs	r7, r3
 80009d6:	40cc      	lsrs	r4, r1
 80009d8:	e9c6 7400 	strd	r7, r4, [r6]
 80009dc:	2100      	movs	r1, #0
 80009de:	e747      	b.n	8000870 <__udivmoddi4+0xa8>
 80009e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e4:	f1c2 0120 	rsb	r1, r2, #32
 80009e8:	fa25 f301 	lsr.w	r3, r5, r1
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa20 f101 	lsr.w	r1, r0, r1
 80009f4:	4095      	lsls	r5, r2
 80009f6:	430d      	orrs	r5, r1
 80009f8:	fbb3 f1f7 	udiv	r1, r3, r7
 80009fc:	fb07 3311 	mls	r3, r7, r1, r3
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	0c28      	lsrs	r0, r5, #16
 8000a06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a0a:	fb01 f30e 	mul.w	r3, r1, lr
 8000a0e:	4283      	cmp	r3, r0
 8000a10:	fa04 f402 	lsl.w	r4, r4, r2
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x260>
 8000a16:	eb1c 0000 	adds.w	r0, ip, r0
 8000a1a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a1e:	d22f      	bcs.n	8000a80 <__udivmoddi4+0x2b8>
 8000a20:	4283      	cmp	r3, r0
 8000a22:	d92d      	bls.n	8000a80 <__udivmoddi4+0x2b8>
 8000a24:	3902      	subs	r1, #2
 8000a26:	4460      	add	r0, ip
 8000a28:	1ac0      	subs	r0, r0, r3
 8000a2a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a2e:	fb07 0013 	mls	r0, r7, r3, r0
 8000a32:	b2ad      	uxth	r5, r5
 8000a34:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a38:	fb03 f00e 	mul.w	r0, r3, lr
 8000a3c:	42a8      	cmp	r0, r5
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x28a>
 8000a40:	eb1c 0505 	adds.w	r5, ip, r5
 8000a44:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a48:	d216      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4a:	42a8      	cmp	r0, r5
 8000a4c:	d914      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4e:	3b02      	subs	r3, #2
 8000a50:	4465      	add	r5, ip
 8000a52:	1a28      	subs	r0, r5, r0
 8000a54:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a58:	e738      	b.n	80008cc <__udivmoddi4+0x104>
 8000a5a:	4631      	mov	r1, r6
 8000a5c:	4630      	mov	r0, r6
 8000a5e:	e707      	b.n	8000870 <__udivmoddi4+0xa8>
 8000a60:	462f      	mov	r7, r5
 8000a62:	e6e4      	b.n	800082e <__udivmoddi4+0x66>
 8000a64:	4618      	mov	r0, r3
 8000a66:	e6f9      	b.n	800085c <__udivmoddi4+0x94>
 8000a68:	454b      	cmp	r3, r9
 8000a6a:	d2a9      	bcs.n	80009c0 <__udivmoddi4+0x1f8>
 8000a6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a70:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a74:	3801      	subs	r0, #1
 8000a76:	e7a3      	b.n	80009c0 <__udivmoddi4+0x1f8>
 8000a78:	4643      	mov	r3, r8
 8000a7a:	e7ea      	b.n	8000a52 <__udivmoddi4+0x28a>
 8000a7c:	4628      	mov	r0, r5
 8000a7e:	e794      	b.n	80009aa <__udivmoddi4+0x1e2>
 8000a80:	4641      	mov	r1, r8
 8000a82:	e7d1      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a84:	46d0      	mov	r8, sl
 8000a86:	e77b      	b.n	8000980 <__udivmoddi4+0x1b8>
 8000a88:	4464      	add	r4, ip
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	e747      	b.n	800091e <__udivmoddi4+0x156>
 8000a8e:	3b02      	subs	r3, #2
 8000a90:	4465      	add	r5, ip
 8000a92:	e72f      	b.n	80008f4 <__udivmoddi4+0x12c>
 8000a94:	4608      	mov	r0, r1
 8000a96:	e706      	b.n	80008a6 <__udivmoddi4+0xde>
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e6e9      	b.n	8000870 <__udivmoddi4+0xa8>

08000a9c <__aeabi_idiv0>:
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_6

/* SPI Chip Select */
static void SELECT(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <SELECT+0x14>)
 8000aaa:	f001 fb39 	bl	8002120 <HAL_GPIO_WritePin>
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2140      	movs	r1, #64	; 0x40
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <DESELECT+0x14>)
 8000ac2:	f001 fb2d 	bl	8002120 <HAL_GPIO_WritePin>
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40020400 	.word	0x40020400

08000ad0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000ada:	bf00      	nop
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <SPI_TxByte+0x2c>)
 8000ade:	f002 fc94 	bl	800340a <HAL_SPI_GetState>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d1f9      	bne.n	8000adc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000ae8:	1df9      	adds	r1, r7, #7
 8000aea:	2364      	movs	r3, #100	; 0x64
 8000aec:	2201      	movs	r2, #1
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <SPI_TxByte+0x2c>)
 8000af0:	f002 f9ad 	bl	8002e4e <HAL_SPI_Transmit>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200000a8 	.word	0x200000a8

08000b00 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000b06:	23ff      	movs	r3, #255	; 0xff
 8000b08:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000b0e:	bf00      	nop
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <SPI_RxByte+0x38>)
 8000b12:	f002 fc7a 	bl	800340a <HAL_SPI_GetState>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d1f9      	bne.n	8000b10 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000b1c:	1dba      	adds	r2, r7, #6
 8000b1e:	1df9      	adds	r1, r7, #7
 8000b20:	2364      	movs	r3, #100	; 0x64
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2301      	movs	r3, #1
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <SPI_RxByte+0x38>)
 8000b28:	f002 facd 	bl	80030c6 <HAL_SPI_TransmitReceive>

  return data;
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000a8 	.word	0x200000a8

08000b3c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000b44:	f7ff ffdc 	bl	8000b00 <SPI_RxByte>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	701a      	strb	r2, [r3, #0]
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <SD_ReadyWait+0x34>)
 8000b60:	2232      	movs	r2, #50	; 0x32
 8000b62:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000b64:	f7ff ffcc 	bl	8000b00 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000b68:	f7ff ffca 	bl	8000b00 <SPI_RxByte>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2bff      	cmp	r3, #255	; 0xff
 8000b74:	d004      	beq.n	8000b80 <SD_ReadyWait+0x28>
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SD_ReadyWait+0x34>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1f3      	bne.n	8000b68 <SD_ReadyWait+0x10>

  return res;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200025ca 	.word	0x200025ca

08000b90 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000b96:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b9a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000b9c:	f7ff ff8c 	bl	8000ab8 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	e005      	b.n	8000bb2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000ba6:	20ff      	movs	r0, #255	; 0xff
 8000ba8:	f7ff ff92 	bl	8000ad0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	2b09      	cmp	r3, #9
 8000bb6:	ddf6      	ble.n	8000ba6 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000bb8:	f7ff ff72 	bl	8000aa0 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000bbc:	2340      	movs	r3, #64	; 0x40
 8000bbe:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000bd0:	2395      	movs	r3, #149	; 0x95
 8000bd2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	e009      	b.n	8000bee <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000bda:	1d3a      	adds	r2, r7, #4
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff74 	bl	8000ad0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	3301      	adds	r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2b05      	cmp	r3, #5
 8000bf2:	ddf2      	ble.n	8000bda <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000bf4:	e002      	b.n	8000bfc <SD_PowerOn+0x6c>
  {
    Count--;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000bfc:	f7ff ff80 	bl	8000b00 <SPI_RxByte>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d002      	beq.n	8000c0c <SD_PowerOn+0x7c>
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1f4      	bne.n	8000bf6 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000c0c:	f7ff ff54 	bl	8000ab8 <DESELECT>
  SPI_TxByte(0XFF);
 8000c10:	20ff      	movs	r0, #255	; 0xff
 8000c12:	f7ff ff5d 	bl	8000ad0 <SPI_TxByte>

  PowerFlag = 1;
 8000c16:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <SD_PowerOn+0x94>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000a5 	.word	0x200000a5

08000c28 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <SD_PowerOff+0x14>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200000a5 	.word	0x200000a5

08000c40 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000c44:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <SD_CheckPower+0x10>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	200000a5 	.word	0x200000a5

08000c54 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <SD_RxDataBlock+0x68>)
 8000c60:	220a      	movs	r2, #10
 8000c62:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000c64:	f7ff ff4c 	bl	8000b00 <SPI_RxByte>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2bff      	cmp	r3, #255	; 0xff
 8000c70:	d104      	bne.n	8000c7c <SD_RxDataBlock+0x28>
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <SD_RxDataBlock+0x68>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f3      	bne.n	8000c64 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	2bfe      	cmp	r3, #254	; 0xfe
 8000c80:	d001      	beq.n	8000c86 <SD_RxDataBlock+0x32>
    return FALSE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e016      	b.n	8000cb4 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	1c5a      	adds	r2, r3, #1
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff55 	bl	8000b3c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff4f 	bl	8000b3c <SPI_RxBytePtr>
  } while(btr -= 2);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3b02      	subs	r3, #2
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1ed      	bne.n	8000c86 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000caa:	f7ff ff29 	bl	8000b00 <SPI_RxByte>
  SPI_RxByte();
 8000cae:	f7ff ff27 	bl	8000b00 <SPI_RxByte>

  return TRUE;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200025c9 	.word	0x200025c9

08000cc0 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000cd0:	f7ff ff42 	bl	8000b58 <SD_ReadyWait>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2bff      	cmp	r3, #255	; 0xff
 8000cd8:	d001      	beq.n	8000cde <SD_TxDataBlock+0x1e>
    return FALSE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e040      	b.n	8000d60 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fef5 	bl	8000ad0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	2bfd      	cmp	r3, #253	; 0xfd
 8000cea:	d031      	beq.n	8000d50 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fee9 	bl	8000ad0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	1c5a      	adds	r2, r3, #1
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fee2 	bl	8000ad0 <SPI_TxByte>
    } while (--wc);
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	73bb      	strb	r3, [r7, #14]
 8000d12:	7bbb      	ldrb	r3, [r7, #14]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1eb      	bne.n	8000cf0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000d18:	f7ff fef2 	bl	8000b00 <SPI_RxByte>
    SPI_RxByte();
 8000d1c:	f7ff fef0 	bl	8000b00 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000d20:	e00b      	b.n	8000d3a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000d22:	f7ff feed 	bl	8000b00 <SPI_RxByte>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f003 031f 	and.w	r3, r3, #31
 8000d30:	2b05      	cmp	r3, #5
 8000d32:	d006      	beq.n	8000d42 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000d34:	7b7b      	ldrb	r3, [r7, #13]
 8000d36:	3301      	adds	r3, #1
 8000d38:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000d3a:	7b7b      	ldrb	r3, [r7, #13]
 8000d3c:	2b40      	cmp	r3, #64	; 0x40
 8000d3e:	d9f0      	bls.n	8000d22 <SD_TxDataBlock+0x62>
 8000d40:	e000      	b.n	8000d44 <SD_TxDataBlock+0x84>
        break;
 8000d42:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000d44:	bf00      	nop
 8000d46:	f7ff fedb 	bl	8000b00 <SPI_RxByte>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0fa      	beq.n	8000d46 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	2b05      	cmp	r3, #5
 8000d58:	d101      	bne.n	8000d5e <SD_TxDataBlock+0x9e>
    return TRUE;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000d74:	f7ff fef0 	bl	8000b58 <SD_ReadyWait>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2bff      	cmp	r3, #255	; 0xff
 8000d7c:	d001      	beq.n	8000d82 <SD_SendCmd+0x1a>
    return 0xFF;
 8000d7e:	23ff      	movs	r3, #255	; 0xff
 8000d80:	e040      	b.n	8000e04 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fea3 	bl	8000ad0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	0e1b      	lsrs	r3, r3, #24
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fe9d 	bl	8000ad0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	0c1b      	lsrs	r3, r3, #16
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fe97 	bl	8000ad0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fe91 	bl	8000ad0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fe8c 	bl	8000ad0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b40      	cmp	r3, #64	; 0x40
 8000dc0:	d101      	bne.n	8000dc6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000dc2:	2395      	movs	r3, #149	; 0x95
 8000dc4:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b48      	cmp	r3, #72	; 0x48
 8000dca:	d101      	bne.n	8000dd0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000dcc:	2387      	movs	r3, #135	; 0x87
 8000dce:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fe7c 	bl	8000ad0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2b4c      	cmp	r3, #76	; 0x4c
 8000ddc:	d101      	bne.n	8000de2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000dde:	f7ff fe8f 	bl	8000b00 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000de2:	230a      	movs	r3, #10
 8000de4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000de6:	f7ff fe8b 	bl	8000b00 <SPI_RxByte>
 8000dea:	4603      	mov	r3, r0
 8000dec:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000dee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da05      	bge.n	8000e02 <SD_SendCmd+0x9a>
 8000df6:	7bbb      	ldrb	r3, [r7, #14]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	73bb      	strb	r3, [r7, #14]
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f1      	bne.n	8000de6 <SD_SendCmd+0x7e>

  return res;
 8000e02:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e0d5      	b.n	8000fcc <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000e20:	4b6c      	ldr	r3, [pc, #432]	; (8000fd4 <SD_disk_initialize+0x1c8>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <SD_disk_initialize+0x2a>
    return Stat;
 8000e2e:	4b69      	ldr	r3, [pc, #420]	; (8000fd4 <SD_disk_initialize+0x1c8>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	e0ca      	b.n	8000fcc <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000e36:	f7ff feab 	bl	8000b90 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000e3a:	f7ff fe31 	bl	8000aa0 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000e42:	2100      	movs	r1, #0
 8000e44:	2040      	movs	r0, #64	; 0x40
 8000e46:	f7ff ff8f 	bl	8000d68 <SD_SendCmd>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	f040 80a5 	bne.w	8000f9c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000e52:	4b61      	ldr	r3, [pc, #388]	; (8000fd8 <SD_disk_initialize+0x1cc>)
 8000e54:	2264      	movs	r2, #100	; 0x64
 8000e56:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000e58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000e5c:	2048      	movs	r0, #72	; 0x48
 8000e5e:	f7ff ff83 	bl	8000d68 <SD_SendCmd>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d158      	bne.n	8000f1a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e00c      	b.n	8000e88 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000e6e:	7bfc      	ldrb	r4, [r7, #15]
 8000e70:	f7ff fe46 	bl	8000b00 <SPI_RxByte>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	f104 0310 	add.w	r3, r4, #16
 8000e7c:	443b      	add	r3, r7
 8000e7e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	3301      	adds	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d9ef      	bls.n	8000e6e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000e8e:	7abb      	ldrb	r3, [r7, #10]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	f040 8083 	bne.w	8000f9c <SD_disk_initialize+0x190>
 8000e96:	7afb      	ldrb	r3, [r7, #11]
 8000e98:	2baa      	cmp	r3, #170	; 0xaa
 8000e9a:	d17f      	bne.n	8000f9c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2077      	movs	r0, #119	; 0x77
 8000ea0:	f7ff ff62 	bl	8000d68 <SD_SendCmd>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d807      	bhi.n	8000eba <SD_disk_initialize+0xae>
 8000eaa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000eae:	2069      	movs	r0, #105	; 0x69
 8000eb0:	f7ff ff5a 	bl	8000d68 <SD_SendCmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000eba:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <SD_disk_initialize+0x1cc>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1eb      	bne.n	8000e9c <SD_disk_initialize+0x90>
 8000ec4:	e000      	b.n	8000ec8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000ec6:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000ec8:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <SD_disk_initialize+0x1cc>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d064      	beq.n	8000f9c <SD_disk_initialize+0x190>
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	207a      	movs	r0, #122	; 0x7a
 8000ed6:	f7ff ff47 	bl	8000d68 <SD_SendCmd>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d15d      	bne.n	8000f9c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e00c      	b.n	8000f00 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000ee6:	7bfc      	ldrb	r4, [r7, #15]
 8000ee8:	f7ff fe0a 	bl	8000b00 <SPI_RxByte>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	f104 0310 	add.w	r3, r4, #16
 8000ef4:	443b      	add	r3, r7
 8000ef6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	3301      	adds	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d9ef      	bls.n	8000ee6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000f06:	7a3b      	ldrb	r3, [r7, #8]
 8000f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SD_disk_initialize+0x108>
 8000f10:	2306      	movs	r3, #6
 8000f12:	e000      	b.n	8000f16 <SD_disk_initialize+0x10a>
 8000f14:	2302      	movs	r3, #2
 8000f16:	73bb      	strb	r3, [r7, #14]
 8000f18:	e040      	b.n	8000f9c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2077      	movs	r0, #119	; 0x77
 8000f1e:	f7ff ff23 	bl	8000d68 <SD_SendCmd>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d808      	bhi.n	8000f3a <SD_disk_initialize+0x12e>
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2069      	movs	r0, #105	; 0x69
 8000f2c:	f7ff ff1c 	bl	8000d68 <SD_SendCmd>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d801      	bhi.n	8000f3a <SD_disk_initialize+0x12e>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e000      	b.n	8000f3c <SD_disk_initialize+0x130>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d10e      	bne.n	8000f62 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000f44:	2100      	movs	r1, #0
 8000f46:	2077      	movs	r0, #119	; 0x77
 8000f48:	f7ff ff0e 	bl	8000d68 <SD_SendCmd>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d80e      	bhi.n	8000f70 <SD_disk_initialize+0x164>
 8000f52:	2100      	movs	r1, #0
 8000f54:	2069      	movs	r0, #105	; 0x69
 8000f56:	f7ff ff07 	bl	8000d68 <SD_SendCmd>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d107      	bne.n	8000f70 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000f60:	e00d      	b.n	8000f7e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000f62:	2100      	movs	r1, #0
 8000f64:	2041      	movs	r0, #65	; 0x41
 8000f66:	f7ff feff 	bl	8000d68 <SD_SendCmd>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <SD_disk_initialize+0x1cc>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1e1      	bne.n	8000f3e <SD_disk_initialize+0x132>
 8000f7a:	e000      	b.n	8000f7e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000f7c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <SD_disk_initialize+0x1cc>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d007      	beq.n	8000f98 <SD_disk_initialize+0x18c>
 8000f88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8c:	2050      	movs	r0, #80	; 0x50
 8000f8e:	f7ff feeb 	bl	8000d68 <SD_SendCmd>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <SD_disk_initialize+0x1d0>)
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000fa2:	f7ff fd89 	bl	8000ab8 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000fa6:	f7ff fdab 	bl	8000b00 <SPI_RxByte>

  if (type)
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d008      	beq.n	8000fc2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <SD_disk_initialize+0x1c8>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f023 0301 	bic.w	r3, r3, #1
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SD_disk_initialize+0x1c8>)
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e001      	b.n	8000fc6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000fc2:	f7ff fe31 	bl	8000c28 <SD_PowerOff>
  }

  return Stat;
 8000fc6:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <SD_disk_initialize+0x1c8>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b2db      	uxtb	r3, r3
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	200025c9 	.word	0x200025c9
 8000fdc:	200000a4 	.word	0x200000a4

08000fe0 <SD_disk_read>:
  return Stat;
}

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <SD_disk_read+0x1c>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <SD_disk_read+0x20>
    return RES_PARERR;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	e051      	b.n	80010a4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <SD_disk_read+0xcc>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800100e:	2303      	movs	r3, #3
 8001010:	e048      	b.n	80010a4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001012:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <SD_disk_read+0xd0>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	025b      	lsls	r3, r3, #9
 8001022:	607b      	str	r3, [r7, #4]

  SELECT();
 8001024:	f7ff fd3c 	bl	8000aa0 <SELECT>

  if (count == 1)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d111      	bne.n	8001052 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	2051      	movs	r0, #81	; 0x51
 8001032:	f7ff fe99 	bl	8000d68 <SD_SendCmd>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d129      	bne.n	8001090 <SD_disk_read+0xb0>
 800103c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001040:	68b8      	ldr	r0, [r7, #8]
 8001042:	f7ff fe07 	bl	8000c54 <SD_RxDataBlock>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d021      	beq.n	8001090 <SD_disk_read+0xb0>
      count = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	e01e      	b.n	8001090 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	2052      	movs	r0, #82	; 0x52
 8001056:	f7ff fe87 	bl	8000d68 <SD_SendCmd>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d117      	bne.n	8001090 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001060:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001064:	68b8      	ldr	r0, [r7, #8]
 8001066:	f7ff fdf5 	bl	8000c54 <SD_RxDataBlock>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00a      	beq.n	8001086 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001076:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	3b01      	subs	r3, #1
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1ed      	bne.n	8001060 <SD_disk_read+0x80>
 8001084:	e000      	b.n	8001088 <SD_disk_read+0xa8>
          break;
 8001086:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001088:	2100      	movs	r1, #0
 800108a:	204c      	movs	r0, #76	; 0x4c
 800108c:	f7ff fe6c 	bl	8000d68 <SD_SendCmd>
    }
  }

  DESELECT();
 8001090:	f7ff fd12 	bl	8000ab8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001094:	f7ff fd34 	bl	8000b00 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf14      	ite	ne
 800109e:	2301      	movne	r3, #1
 80010a0:	2300      	moveq	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000000 	.word	0x20000000
 80010b0:	200000a4 	.word	0x200000a4

080010b4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d102      	bne.n	80010d0 <SD_disk_write+0x1c>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <SD_disk_write+0x20>
    return RES_PARERR;
 80010d0:	2304      	movs	r3, #4
 80010d2:	e06b      	b.n	80011ac <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <SD_disk_write+0x100>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e062      	b.n	80011ac <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80010e6:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <SD_disk_write+0x100>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SD_disk_write+0x44>
    return RES_WRPRT;
 80010f4:	2302      	movs	r3, #2
 80010f6:	e059      	b.n	80011ac <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <SD_disk_write+0x104>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	025b      	lsls	r3, r3, #9
 8001108:	607b      	str	r3, [r7, #4]

  SELECT();
 800110a:	f7ff fcc9 	bl	8000aa0 <SELECT>

  if (count == 1)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d110      	bne.n	8001136 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	2058      	movs	r0, #88	; 0x58
 8001118:	f7ff fe26 	bl	8000d68 <SD_SendCmd>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d13a      	bne.n	8001198 <SD_disk_write+0xe4>
 8001122:	21fe      	movs	r1, #254	; 0xfe
 8001124:	68b8      	ldr	r0, [r7, #8]
 8001126:	f7ff fdcb 	bl	8000cc0 <SD_TxDataBlock>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d033      	beq.n	8001198 <SD_disk_write+0xe4>
      count = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	e030      	b.n	8001198 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <SD_disk_write+0x104>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001142:	2100      	movs	r1, #0
 8001144:	2077      	movs	r0, #119	; 0x77
 8001146:	f7ff fe0f 	bl	8000d68 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800114a:	6839      	ldr	r1, [r7, #0]
 800114c:	2057      	movs	r0, #87	; 0x57
 800114e:	f7ff fe0b 	bl	8000d68 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	2059      	movs	r0, #89	; 0x59
 8001156:	f7ff fe07 	bl	8000d68 <SD_SendCmd>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d11b      	bne.n	8001198 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001160:	21fc      	movs	r1, #252	; 0xfc
 8001162:	68b8      	ldr	r0, [r7, #8]
 8001164:	f7ff fdac 	bl	8000cc0 <SD_TxDataBlock>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00a      	beq.n	8001184 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001174:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3b01      	subs	r3, #1
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1ee      	bne.n	8001160 <SD_disk_write+0xac>
 8001182:	e000      	b.n	8001186 <SD_disk_write+0xd2>
          break;
 8001184:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001186:	21fd      	movs	r1, #253	; 0xfd
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fd99 	bl	8000cc0 <SD_TxDataBlock>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <SD_disk_write+0xe4>
      {
        count = 1;
 8001194:	2301      	movs	r3, #1
 8001196:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001198:	f7ff fc8e 	bl	8000ab8 <DESELECT>
  SPI_RxByte();
 800119c:	f7ff fcb0 	bl	8000b00 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bf14      	ite	ne
 80011a6:	2301      	movne	r3, #1
 80011a8:	2300      	moveq	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000000 	.word	0x20000000
 80011b8:	200000a4 	.word	0x200000a4

080011bc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b08b      	sub	sp, #44	; 0x2c
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	603a      	str	r2, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	460b      	mov	r3, r1
 80011ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80011d6:	2304      	movs	r3, #4
 80011d8:	e11b      	b.n	8001412 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	d129      	bne.n	800123a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d017      	beq.n	800121e <SD_disk_ioctl+0x62>
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	dc1f      	bgt.n	8001232 <SD_disk_ioctl+0x76>
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <SD_disk_ioctl+0x40>
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d00b      	beq.n	8001212 <SD_disk_ioctl+0x56>
 80011fa:	e01a      	b.n	8001232 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80011fc:	f7ff fd20 	bl	8000c40 <SD_CheckPower>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001206:	f7ff fd0f 	bl	8000c28 <SD_PowerOff>
      res = RES_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001210:	e0fd      	b.n	800140e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001212:	f7ff fcbd 	bl	8000b90 <SD_PowerOn>
      res = RES_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800121c:	e0f7      	b.n	800140e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	1c5c      	adds	r4, r3, #1
 8001222:	f7ff fd0d 	bl	8000c40 <SD_CheckPower>
 8001226:	4603      	mov	r3, r0
 8001228:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001230:	e0ed      	b.n	800140e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001232:	2304      	movs	r3, #4
 8001234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001238:	e0e9      	b.n	800140e <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800123a:	4b78      	ldr	r3, [pc, #480]	; (800141c <SD_disk_ioctl+0x260>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001248:	2303      	movs	r3, #3
 800124a:	e0e2      	b.n	8001412 <SD_disk_ioctl+0x256>

    SELECT();
 800124c:	f7ff fc28 	bl	8000aa0 <SELECT>

    switch (ctrl)
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	2b0d      	cmp	r3, #13
 8001254:	f200 80cc 	bhi.w	80013f0 <SD_disk_ioctl+0x234>
 8001258:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <SD_disk_ioctl+0xa4>)
 800125a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125e:	bf00      	nop
 8001260:	0800135b 	.word	0x0800135b
 8001264:	08001299 	.word	0x08001299
 8001268:	0800134b 	.word	0x0800134b
 800126c:	080013f1 	.word	0x080013f1
 8001270:	080013f1 	.word	0x080013f1
 8001274:	080013f1 	.word	0x080013f1
 8001278:	080013f1 	.word	0x080013f1
 800127c:	080013f1 	.word	0x080013f1
 8001280:	080013f1 	.word	0x080013f1
 8001284:	080013f1 	.word	0x080013f1
 8001288:	080013f1 	.word	0x080013f1
 800128c:	0800136d 	.word	0x0800136d
 8001290:	08001391 	.word	0x08001391
 8001294:	080013b5 	.word	0x080013b5
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001298:	2100      	movs	r1, #0
 800129a:	2049      	movs	r0, #73	; 0x49
 800129c:	f7ff fd64 	bl	8000d68 <SD_SendCmd>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 80a8 	bne.w	80013f8 <SD_disk_ioctl+0x23c>
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2110      	movs	r1, #16
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fcd0 	bl	8000c54 <SD_RxDataBlock>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 809e 	beq.w	80013f8 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80012bc:	7b3b      	ldrb	r3, [r7, #12]
 80012be:	099b      	lsrs	r3, r3, #6
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10e      	bne.n	80012e4 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80012c6:	7d7b      	ldrb	r3, [r7, #21]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	7d3b      	ldrb	r3, [r7, #20]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	3301      	adds	r3, #1
 80012d8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80012da:	8bfb      	ldrh	r3, [r7, #30]
 80012dc:	029a      	lsls	r2, r3, #10
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	e02e      	b.n	8001342 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80012e4:	7c7b      	ldrb	r3, [r7, #17]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	7dbb      	ldrb	r3, [r7, #22]
 80012ee:	09db      	lsrs	r3, r3, #7
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	7d7b      	ldrb	r3, [r7, #21]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f003 0306 	and.w	r3, r3, #6
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3302      	adds	r3, #2
 8001308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800130c:	7d3b      	ldrb	r3, [r7, #20]
 800130e:	099b      	lsrs	r3, r3, #6
 8001310:	b2db      	uxtb	r3, r3
 8001312:	b29a      	uxth	r2, r3
 8001314:	7cfb      	ldrb	r3, [r7, #19]
 8001316:	b29b      	uxth	r3, r3
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	b29b      	uxth	r3, r3
 800131c:	4413      	add	r3, r2
 800131e:	b29a      	uxth	r2, r3
 8001320:	7cbb      	ldrb	r3, [r7, #18]
 8001322:	029b      	lsls	r3, r3, #10
 8001324:	b29b      	uxth	r3, r3
 8001326:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800132a:	b29b      	uxth	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	b29b      	uxth	r3, r3
 8001330:	3301      	adds	r3, #1
 8001332:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001334:	8bfa      	ldrh	r2, [r7, #30]
 8001336:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800133a:	3b09      	subs	r3, #9
 800133c:	409a      	lsls	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001348:	e056      	b.n	80013f8 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001350:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001358:	e055      	b.n	8001406 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800135a:	f7ff fbfd 	bl	8000b58 <SD_ReadyWait>
 800135e:	4603      	mov	r3, r0
 8001360:	2bff      	cmp	r3, #255	; 0xff
 8001362:	d14b      	bne.n	80013fc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800136a:	e047      	b.n	80013fc <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800136c:	2100      	movs	r1, #0
 800136e:	2049      	movs	r0, #73	; 0x49
 8001370:	f7ff fcfa 	bl	8000d68 <SD_SendCmd>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d142      	bne.n	8001400 <SD_disk_ioctl+0x244>
 800137a:	2110      	movs	r1, #16
 800137c:	6a38      	ldr	r0, [r7, #32]
 800137e:	f7ff fc69 	bl	8000c54 <SD_RxDataBlock>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d03b      	beq.n	8001400 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800138e:	e037      	b.n	8001400 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001390:	2100      	movs	r1, #0
 8001392:	204a      	movs	r0, #74	; 0x4a
 8001394:	f7ff fce8 	bl	8000d68 <SD_SendCmd>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d132      	bne.n	8001404 <SD_disk_ioctl+0x248>
 800139e:	2110      	movs	r1, #16
 80013a0:	6a38      	ldr	r0, [r7, #32]
 80013a2:	f7ff fc57 	bl	8000c54 <SD_RxDataBlock>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d02b      	beq.n	8001404 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80013b2:	e027      	b.n	8001404 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80013b4:	2100      	movs	r1, #0
 80013b6:	207a      	movs	r0, #122	; 0x7a
 80013b8:	f7ff fcd6 	bl	8000d68 <SD_SendCmd>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013c8:	e00b      	b.n	80013e2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80013ca:	6a3c      	ldr	r4, [r7, #32]
 80013cc:	1c63      	adds	r3, r4, #1
 80013ce:	623b      	str	r3, [r7, #32]
 80013d0:	f7ff fb96 	bl	8000b00 <SPI_RxByte>
 80013d4:	4603      	mov	r3, r0
 80013d6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80013d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013dc:	3301      	adds	r3, #1
 80013de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d9ef      	bls.n	80013ca <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80013f0:	2304      	movs	r3, #4
 80013f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013f6:	e006      	b.n	8001406 <SD_disk_ioctl+0x24a>
      break;
 80013f8:	bf00      	nop
 80013fa:	e004      	b.n	8001406 <SD_disk_ioctl+0x24a>
      break;
 80013fc:	bf00      	nop
 80013fe:	e002      	b.n	8001406 <SD_disk_ioctl+0x24a>
      break;
 8001400:	bf00      	nop
 8001402:	e000      	b.n	8001406 <SD_disk_ioctl+0x24a>
      break;
 8001404:	bf00      	nop
    }

    DESELECT();
 8001406:	f7ff fb57 	bl	8000ab8 <DESELECT>
    SPI_RxByte();
 800140a:	f7ff fb79 	bl	8000b00 <SPI_RxByte>
  }

  return res;
 800140e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001412:	4618      	mov	r0, r3
 8001414:	372c      	adds	r7, #44	; 0x2c
 8001416:	46bd      	mov	sp, r7
 8001418:	bd90      	pop	{r4, r7, pc}
 800141a:	bf00      	nop
 800141c:	20000000 	.word	0x20000000

08001420 <send_uart>:
uint32_t total, free_space;


// to send the uart

void send_uart(char *string){
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7fe fea7 	bl	800017c <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2,(uint8_t *)string,len,2000); // transmiting in bloking mode
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	b29a      	uxth	r2, r3
 8001436:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <send_uart+0x2c>)
 800143e:	f002 f908 	bl	8003652 <HAL_UART_Transmit>

}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000100 	.word	0x20000100

08001450 <bufsize>:

// to fined the size of data in buffer

int bufsize(char *buf){
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	int i=0;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
	while(*buf++ != '\0');
 800145c:	bf00      	nop
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f9      	bne.n	800145e <bufsize+0xe>
	return i;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
	...

08001478 <bufclear>:

void bufclear(void){  // clear the buffer
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0

	for(int i=0;i<1024; i++){
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	e007      	b.n	8001494 <bufclear+0x1c>
		buffer[i]='\0';
 8001484:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <bufclear+0x30>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<1024; i++){
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3301      	adds	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149a:	dbf3      	blt.n	8001484 <bufclear+0xc>
	}
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	200021b8 	.word	0x200021b8

080014ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b0:	f000 fb63 	bl	8001b7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b4:	f000 f8e0 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b8:	f000 f98c 	bl	80017d4 <MX_GPIO_Init>
  MX_SPI2_Init();
 80014bc:	f000 f92a 	bl	8001714 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80014c0:	f000 f95e 	bl	8001780 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80014c4:	f002 fa86 	bl	80039d4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  //Mount sd card

  fresult = f_mount(&fs, "/", 1);
 80014c8:	2201      	movs	r2, #1
 80014ca:	4955      	ldr	r1, [pc, #340]	; (8001620 <main+0x174>)
 80014cc:	4855      	ldr	r0, [pc, #340]	; (8001624 <main+0x178>)
 80014ce:	f004 fcbd 	bl	8005e4c <f_mount>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <main+0x17c>)
 80014d8:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 80014da:	4b53      	ldr	r3, [pc, #332]	; (8001628 <main+0x17c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <main+0x3e>
	   send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 80014e2:	4852      	ldr	r0, [pc, #328]	; (800162c <main+0x180>)
 80014e4:	f7ff ff9c 	bl	8001420 <send_uart>
 80014e8:	e002      	b.n	80014f0 <main+0x44>
  else send_uart("SD CARD mounted successfully...\n\n");
 80014ea:	4851      	ldr	r0, [pc, #324]	; (8001630 <main+0x184>)
 80014ec:	f7ff ff98 	bl	8001420 <send_uart>


  /*************** Card capacity details ********************/

    	/* Check free space */
    	f_getfree("", &fre_clust, &pfs);
 80014f0:	4a50      	ldr	r2, [pc, #320]	; (8001634 <main+0x188>)
 80014f2:	4951      	ldr	r1, [pc, #324]	; (8001638 <main+0x18c>)
 80014f4:	4851      	ldr	r0, [pc, #324]	; (800163c <main+0x190>)
 80014f6:	f005 fa56 	bl	80069a6 <f_getfree>

    	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80014fa:	4b4e      	ldr	r3, [pc, #312]	; (8001634 <main+0x188>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	3b02      	subs	r3, #2
 8001502:	4a4c      	ldr	r2, [pc, #304]	; (8001634 <main+0x188>)
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	8952      	ldrh	r2, [r2, #10]
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f8a9 	bl	8000664 <__aeabi_ui2d>
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <main+0x194>)
 8001518:	f7fe fe38 	bl	800018c <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff f918 	bl	8000758 <__aeabi_d2uiz>
 8001528:	4603      	mov	r3, r0
 800152a:	4a46      	ldr	r2, [pc, #280]	; (8001644 <main+0x198>)
 800152c:	6013      	str	r3, [r2, #0]
    	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 800152e:	4b45      	ldr	r3, [pc, #276]	; (8001644 <main+0x198>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	4944      	ldr	r1, [pc, #272]	; (8001648 <main+0x19c>)
 8001536:	4845      	ldr	r0, [pc, #276]	; (800164c <main+0x1a0>)
 8001538:	f005 fc46 	bl	8006dc8 <siprintf>
    	send_uart(buffer);
 800153c:	4843      	ldr	r0, [pc, #268]	; (800164c <main+0x1a0>)
 800153e:	f7ff ff6f 	bl	8001420 <send_uart>
    	bufclear();
 8001542:	f7ff ff99 	bl	8001478 <bufclear>
    	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <main+0x188>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	895b      	ldrh	r3, [r3, #10]
 800154c:	461a      	mov	r2, r3
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <main+0x18c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f884 	bl	8000664 <__aeabi_ui2d>
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b37      	ldr	r3, [pc, #220]	; (8001640 <main+0x194>)
 8001562:	f7fe fe13 	bl	800018c <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff f8f3 	bl	8000758 <__aeabi_d2uiz>
 8001572:	4603      	mov	r3, r0
 8001574:	4a36      	ldr	r2, [pc, #216]	; (8001650 <main+0x1a4>)
 8001576:	6013      	str	r3, [r2, #0]
    	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <main+0x1a4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4935      	ldr	r1, [pc, #212]	; (8001654 <main+0x1a8>)
 8001580:	4832      	ldr	r0, [pc, #200]	; (800164c <main+0x1a0>)
 8001582:	f005 fc21 	bl	8006dc8 <siprintf>
    	send_uart(buffer);
 8001586:	4831      	ldr	r0, [pc, #196]	; (800164c <main+0x1a0>)
 8001588:	f7ff ff4a 	bl	8001420 <send_uart>
    	bufclear();
 800158c:	f7ff ff74 	bl	8001478 <bufclear>


          	  	/**************** The following operation is using f_write and f_read **************************/

          	  	/* Create second file with read write access and open it */
          	  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001590:	220a      	movs	r2, #10
 8001592:	4931      	ldr	r1, [pc, #196]	; (8001658 <main+0x1ac>)
 8001594:	4831      	ldr	r0, [pc, #196]	; (800165c <main+0x1b0>)
 8001596:	f004 fc9f 	bl	8005ed8 <f_open>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <main+0x17c>)
 80015a0:	701a      	strb	r2, [r3, #0]

          	  	/* Writing text */
          	  	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Rahul\n");
 80015a2:	4a2a      	ldr	r2, [pc, #168]	; (800164c <main+0x1a0>)
 80015a4:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <main+0x1b4>)
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	234d      	movs	r3, #77	; 0x4d
 80015ac:	461a      	mov	r2, r3
 80015ae:	f005 fbf5 	bl	8006d9c <memcpy>

          	  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80015b2:	4826      	ldr	r0, [pc, #152]	; (800164c <main+0x1a0>)
 80015b4:	f7ff ff4c 	bl	8001450 <bufsize>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <main+0x1b8>)
 80015be:	4923      	ldr	r1, [pc, #140]	; (800164c <main+0x1a0>)
 80015c0:	4826      	ldr	r0, [pc, #152]	; (800165c <main+0x1b0>)
 80015c2:	f004 ffb4 	bl	800652e <f_write>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <main+0x17c>)
 80015cc:	701a      	strb	r2, [r3, #0]

          	  	send_uart ("File2.txt created and data is written\n");
 80015ce:	4826      	ldr	r0, [pc, #152]	; (8001668 <main+0x1bc>)
 80015d0:	f7ff ff26 	bl	8001420 <send_uart>

          	  	/* Close file */
          	  	f_close(&fil);
 80015d4:	4821      	ldr	r0, [pc, #132]	; (800165c <main+0x1b0>)
 80015d6:	f005 f9bc 	bl	8006952 <f_close>

          	  	// clearing buffer to show that result obtained is from the file
//          	    bufclear();

          	  	/* Open second file to read */
          	  	fresult = f_open(&fil, "file2.txt", FA_READ);
 80015da:	2201      	movs	r2, #1
 80015dc:	491e      	ldr	r1, [pc, #120]	; (8001658 <main+0x1ac>)
 80015de:	481f      	ldr	r0, [pc, #124]	; (800165c <main+0x1b0>)
 80015e0:	f004 fc7a 	bl	8005ed8 <f_open>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <main+0x17c>)
 80015ea:	701a      	strb	r2, [r3, #0]



          	  	if (fresult == FR_OK){
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <main+0x17c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <main+0x14e>
          	  		send_uart ("file2.txt is open and the data is shown below\n");
 80015f4:	481d      	ldr	r0, [pc, #116]	; (800166c <main+0x1c0>)
 80015f6:	f7ff ff13 	bl	8001420 <send_uart>

          	  	}
          	  /* Read data from the file
          	            	     * Please see the function details for the arguments */
          	   f_read (&fil, buffer, f_size(&fil), &br);
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <main+0x1b0>)
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <main+0x1c4>)
 8001600:	4912      	ldr	r1, [pc, #72]	; (800164c <main+0x1a0>)
 8001602:	4816      	ldr	r0, [pc, #88]	; (800165c <main+0x1b0>)
 8001604:	f004 fe34 	bl	8006270 <f_read>

          		send_uart(buffer);
 8001608:	4810      	ldr	r0, [pc, #64]	; (800164c <main+0x1a0>)
 800160a:	f7ff ff09 	bl	8001420 <send_uart>
          	    send_uart("\n\n");
 800160e:	4819      	ldr	r0, [pc, #100]	; (8001674 <main+0x1c8>)
 8001610:	f7ff ff06 	bl	8001420 <send_uart>



          	  	/* Close file */
          	  	f_close(&fil);
 8001614:	4811      	ldr	r0, [pc, #68]	; (800165c <main+0x1b0>)
 8001616:	f005 f99c 	bl	8006952 <f_close>

          	     bufclear();
 800161a:	f7ff ff2d 	bl	8001478 <bufclear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800161e:	e7fe      	b.n	800161e <main+0x172>
 8001620:	080076b8 	.word	0x080076b8
 8001624:	20000144 	.word	0x20000144
 8001628:	200021ac 	.word	0x200021ac
 800162c:	080076bc 	.word	0x080076bc
 8001630:	080076e0 	.word	0x080076e0
 8001634:	200025b8 	.word	0x200025b8
 8001638:	200025bc 	.word	0x200025bc
 800163c:	08007704 	.word	0x08007704
 8001640:	3fe00000 	.word	0x3fe00000
 8001644:	200025c0 	.word	0x200025c0
 8001648:	08007708 	.word	0x08007708
 800164c:	200021b8 	.word	0x200021b8
 8001650:	200025c4 	.word	0x200025c4
 8001654:	08007724 	.word	0x08007724
 8001658:	08007740 	.word	0x08007740
 800165c:	2000117c 	.word	0x2000117c
 8001660:	0800774c 	.word	0x0800774c
 8001664:	200021b4 	.word	0x200021b4
 8001668:	0800779c 	.word	0x0800779c
 800166c:	080077c4 	.word	0x080077c4
 8001670:	200021b0 	.word	0x200021b0
 8001674:	080077f4 	.word	0x080077f4

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b092      	sub	sp, #72	; 0x48
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	2234      	movs	r2, #52	; 0x34
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f005 fb96 	bl	8006db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	463b      	mov	r3, r7
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <SystemClock_Config+0x98>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80016a2:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <SystemClock_Config+0x98>)
 80016a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016a8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016aa:	2302      	movs	r3, #2
 80016ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ae:	2301      	movs	r3, #1
 80016b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b2:	2310      	movs	r3, #16
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b6:	2302      	movs	r3, #2
 80016b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ba:	2300      	movs	r3, #0
 80016bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80016be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80016c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fd3e 	bl	8002150 <HAL_RCC_OscConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016da:	f000 f8d1 	bl	8001880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016de:	230f      	movs	r3, #15
 80016e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e2:	2303      	movs	r3, #3
 80016e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016f2:	463b      	mov	r3, r7
 80016f4:	2101      	movs	r1, #1
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 f85a 	bl	80027b0 <HAL_RCC_ClockConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001702:	f000 f8bd 	bl	8001880 <Error_Handler>
  }
}
 8001706:	bf00      	nop
 8001708:	3748      	adds	r7, #72	; 0x48
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40007000 	.word	0x40007000

08001714 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_SPI2_Init+0x64>)
 800171a:	4a18      	ldr	r2, [pc, #96]	; (800177c <MX_SPI2_Init+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <MX_SPI2_Init+0x64>)
 8001720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001724:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_SPI2_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_SPI2_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_SPI2_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_SPI2_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_SPI2_Init+0x64>)
 8001740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001744:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_SPI2_Init+0x64>)
 8001748:	2200      	movs	r2, #0
 800174a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <MX_SPI2_Init+0x64>)
 800174e:	2200      	movs	r2, #0
 8001750:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_SPI2_Init+0x64>)
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <MX_SPI2_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_SPI2_Init+0x64>)
 8001760:	220a      	movs	r2, #10
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <MX_SPI2_Init+0x64>)
 8001766:	f001 fae9 	bl	8002d3c <HAL_SPI_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001770:	f000 f886 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200000a8 	.word	0x200000a8
 800177c:	40003800 	.word	0x40003800

08001780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_USART2_UART_Init+0x50>)
 8001788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 800178c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b8:	f001 fefe 	bl	80035b8 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017c2:	f000 f85d 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000100 	.word	0x20000100
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <MX_GPIO_Init+0xa4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a22      	ldr	r2, [pc, #136]	; (8001878 <MX_GPIO_Init+0xa4>)
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	61d3      	str	r3, [r2, #28]
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <MX_GPIO_Init+0xa4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <MX_GPIO_Init+0xa4>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <MX_GPIO_Init+0xa4>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_GPIO_Init+0xa4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_GPIO_Init+0xa4>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a16      	ldr	r2, [pc, #88]	; (8001878 <MX_GPIO_Init+0xa4>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_GPIO_Init+0xa4>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_GPIO_Init+0xa4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <MX_GPIO_Init+0xa4>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_GPIO_Init+0xa4>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2140      	movs	r1, #64	; 0x40
 800184e:	480b      	ldr	r0, [pc, #44]	; (800187c <MX_GPIO_Init+0xa8>)
 8001850:	f000 fc66 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001854:	2340      	movs	r3, #64	; 0x40
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_GPIO_Init+0xa8>)
 800186c:	f000 fad8 	bl	8001e20 <HAL_GPIO_Init>

}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	; 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	40020800 	.word	0x40020800

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001888:	e7fe      	b.n	8001888 <Error_Handler+0x8>
	...

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_MspInit+0x5c>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <HAL_MspInit+0x5c>)
 8001898:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800189c:	6253      	str	r3, [r2, #36]	; 0x24
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_MspInit+0x5c>)
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_MspInit+0x5c>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <HAL_MspInit+0x5c>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6213      	str	r3, [r2, #32]
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_MspInit+0x5c>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_MspInit+0x5c>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <HAL_MspInit+0x5c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6253      	str	r3, [r2, #36]	; 0x24
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_MspInit+0x5c>)
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018da:	2007      	movs	r0, #7
 80018dc:	f000 fa6c 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e0:	bf00      	nop
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_SPI_MspInit+0x7c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d128      	bne.n	8001960 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_SPI_MspInit+0x80>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <HAL_SPI_MspInit+0x80>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	6253      	str	r3, [r2, #36]	; 0x24
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_SPI_MspInit+0x80>)
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_SPI_MspInit+0x80>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_SPI_MspInit+0x80>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_SPI_MspInit+0x80>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800193e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001950:	2305      	movs	r3, #5
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <HAL_SPI_MspInit+0x84>)
 800195c:	f000 fa60 	bl	8001e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40003800 	.word	0x40003800
 800196c:	40023800 	.word	0x40023800
 8001970:	40020400 	.word	0x40020400

08001974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_UART_MspInit+0x7c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d127      	bne.n	80019e6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_UART_MspInit+0x80>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <HAL_UART_MspInit+0x80>)
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	6253      	str	r3, [r2, #36]	; 0x24
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_UART_MspInit+0x80>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_UART_MspInit+0x80>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_UART_MspInit+0x80>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	61d3      	str	r3, [r2, #28]
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_UART_MspInit+0x80>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019c6:	230c      	movs	r3, #12
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019d6:	2307      	movs	r3, #7
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <HAL_UART_MspInit+0x84>)
 80019e2:	f000 fa1d 	bl	8001e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40004400 	.word	0x40004400
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020000 	.word	0x40020000

080019fc <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <SDTimer_Handler+0x3c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d006      	beq.n	8001a18 <SDTimer_Handler+0x1c>
    Timer1--;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <SDTimer_Handler+0x3c>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <SDTimer_Handler+0x3c>)
 8001a16:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <SDTimer_Handler+0x40>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <SDTimer_Handler+0x34>
	  Timer2--;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <SDTimer_Handler+0x40>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <SDTimer_Handler+0x40>)
 8001a2e:	701a      	strb	r2, [r3, #0]

}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	200025c9 	.word	0x200025c9
 8001a3c:	200025ca 	.word	0x200025ca

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <SysTick_Handler+0x30>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <SysTick_Handler+0x30>)
 8001a94:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <SysTick_Handler+0x30>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b09      	cmp	r3, #9
 8001a9e:	d904      	bls.n	8001aaa <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <SysTick_Handler+0x30>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8001aa6:	f7ff ffa9 	bl	80019fc <SDTimer_Handler>
		  }


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aaa:	f000 f8b9 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200025c8 	.word	0x200025c8

08001ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <_sbrk+0x5c>)
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <_sbrk+0x60>)
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <_sbrk+0x64>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <_sbrk+0x68>)
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d207      	bcs.n	8001af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae8:	f005 f92e 	bl	8006d48 <__errno>
 8001aec:	4603      	mov	r3, r0
 8001aee:	220c      	movs	r2, #12
 8001af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	e009      	b.n	8001b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <_sbrk+0x64>)
 8001b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20008000 	.word	0x20008000
 8001b18:	00000400 	.word	0x00000400
 8001b1c:	200025cc 	.word	0x200025cc
 8001b20:	20002820 	.word	0x20002820

08001b24 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b32:	490d      	ldr	r1, [pc, #52]	; (8001b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b48:	4c0a      	ldr	r4, [pc, #40]	; (8001b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b56:	f7ff ffe5 	bl	8001b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f005 f8fb 	bl	8006d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5e:	f7ff fca5 	bl	80014ac <main>
  bx lr
 8001b62:	4770      	bx	lr
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001b6c:	08007ce8 	.word	0x08007ce8
  ldr r2, =_sbss
 8001b70:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b74:	20002820 	.word	0x20002820

08001b78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC1_IRQHandler>

08001b7a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f917 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 f80e 	bl	8001bac <HAL_InitTick>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	e001      	b.n	8001ba0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b9c:	f7ff fe76 	bl	800188c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_InitTick+0x68>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d022      	beq.n	8001c06 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_InitTick+0x6c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <HAL_InitTick+0x68>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 f916 	bl	8001e06 <HAL_SYSTICK_Config>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10f      	bne.n	8001c00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b0f      	cmp	r3, #15
 8001be4:	d809      	bhi.n	8001bfa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be6:	2200      	movs	r2, #0
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	f04f 30ff 	mov.w	r0, #4294967295
 8001bee:	f000 f8ee 	bl	8001dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_InitTick+0x70>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e007      	b.n	8001c0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	e004      	b.n	8001c0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e001      	b.n	8001c0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	2000000c 	.word	0x2000000c
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	20000008 	.word	0x20000008

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_IncTick+0x1c>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_IncTick+0x20>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a03      	ldr	r2, [pc, #12]	; (8001c3c <HAL_IncTick+0x1c>)
 8001c30:	6013      	str	r3, [r2, #0]
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	200025d0 	.word	0x200025d0
 8001c40:	2000000c 	.word	0x2000000c

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <HAL_GetTick+0x10>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	200025d0 	.word	0x200025d0

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	; (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff90 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff49 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de0:	f7ff ff5e 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7ff ff90 	bl	8001d10 <NVIC_EncodePriority>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff5f 	bl	8001cbc <__NVIC_SetPriority>
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffb0 	bl	8001d74 <SysTick_Config>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e36:	e154      	b.n	80020e2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8146 	beq.w	80020dc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d005      	beq.n	8001e68 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d130      	bne.n	8001eca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 0201 	and.w	r2, r3, #1
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d017      	beq.n	8001f06 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d123      	bne.n	8001f5a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3208      	adds	r2, #8
 8001f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	6939      	ldr	r1, [r7, #16]
 8001f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0203 	and.w	r2, r3, #3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80a0 	beq.w	80020dc <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9c:	4b58      	ldr	r3, [pc, #352]	; (8002100 <HAL_GPIO_Init+0x2e0>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a57      	ldr	r2, [pc, #348]	; (8002100 <HAL_GPIO_Init+0x2e0>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6213      	str	r3, [r2, #32]
 8001fa8:	4b55      	ldr	r3, [pc, #340]	; (8002100 <HAL_GPIO_Init+0x2e0>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fb4:	4a53      	ldr	r2, [pc, #332]	; (8002104 <HAL_GPIO_Init+0x2e4>)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a4b      	ldr	r2, [pc, #300]	; (8002108 <HAL_GPIO_Init+0x2e8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d019      	beq.n	8002014 <HAL_GPIO_Init+0x1f4>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a4a      	ldr	r2, [pc, #296]	; (800210c <HAL_GPIO_Init+0x2ec>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <HAL_GPIO_Init+0x1f0>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a49      	ldr	r2, [pc, #292]	; (8002110 <HAL_GPIO_Init+0x2f0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00d      	beq.n	800200c <HAL_GPIO_Init+0x1ec>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a48      	ldr	r2, [pc, #288]	; (8002114 <HAL_GPIO_Init+0x2f4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d007      	beq.n	8002008 <HAL_GPIO_Init+0x1e8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a47      	ldr	r2, [pc, #284]	; (8002118 <HAL_GPIO_Init+0x2f8>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d101      	bne.n	8002004 <HAL_GPIO_Init+0x1e4>
 8002000:	2304      	movs	r3, #4
 8002002:	e008      	b.n	8002016 <HAL_GPIO_Init+0x1f6>
 8002004:	2305      	movs	r3, #5
 8002006:	e006      	b.n	8002016 <HAL_GPIO_Init+0x1f6>
 8002008:	2303      	movs	r3, #3
 800200a:	e004      	b.n	8002016 <HAL_GPIO_Init+0x1f6>
 800200c:	2302      	movs	r3, #2
 800200e:	e002      	b.n	8002016 <HAL_GPIO_Init+0x1f6>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_GPIO_Init+0x1f6>
 8002014:	2300      	movs	r3, #0
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	f002 0203 	and.w	r2, r2, #3
 800201c:	0092      	lsls	r2, r2, #2
 800201e:	4093      	lsls	r3, r2
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002026:	4937      	ldr	r1, [pc, #220]	; (8002104 <HAL_GPIO_Init+0x2e4>)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002034:	4b39      	ldr	r3, [pc, #228]	; (800211c <HAL_GPIO_Init+0x2fc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002058:	4a30      	ldr	r2, [pc, #192]	; (800211c <HAL_GPIO_Init+0x2fc>)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_GPIO_Init+0x2fc>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002082:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_GPIO_Init+0x2fc>)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <HAL_GPIO_Init+0x2fc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <HAL_GPIO_Init+0x2fc>)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_GPIO_Init+0x2fc>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020d6:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_GPIO_Init+0x2fc>)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3301      	adds	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f47f aea3 	bne.w	8001e38 <HAL_GPIO_Init+0x18>
  }
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40010000 	.word	0x40010000
 8002108:	40020000 	.word	0x40020000
 800210c:	40020400 	.word	0x40020400
 8002110:	40020800 	.word	0x40020800
 8002114:	40020c00 	.word	0x40020c00
 8002118:	40021000 	.word	0x40021000
 800211c:	40010400 	.word	0x40010400

08002120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800213c:	e003      	b.n	8002146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	041a      	lsls	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	619a      	str	r2, [r3, #24]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e31d      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002162:	4b94      	ldr	r3, [pc, #592]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216c:	4b91      	ldr	r3, [pc, #580]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d07b      	beq.n	800227a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d006      	beq.n	8002196 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d10f      	bne.n	80021ae <HAL_RCC_OscConfig+0x5e>
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002194:	d10b      	bne.n	80021ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002196:	4b87      	ldr	r3, [pc, #540]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d06a      	beq.n	8002278 <HAL_RCC_OscConfig+0x128>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d166      	bne.n	8002278 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e2f7      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x74>
 80021b6:	4b7f      	ldr	r3, [pc, #508]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7e      	ldr	r2, [pc, #504]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e02d      	b.n	8002220 <HAL_RCC_OscConfig+0xd0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10c      	bne.n	80021e6 <HAL_RCC_OscConfig+0x96>
 80021cc:	4b79      	ldr	r3, [pc, #484]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a78      	ldr	r2, [pc, #480]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80021d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b76      	ldr	r3, [pc, #472]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a75      	ldr	r2, [pc, #468]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80021de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e01c      	b.n	8002220 <HAL_RCC_OscConfig+0xd0>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0xb8>
 80021ee:	4b71      	ldr	r3, [pc, #452]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a70      	ldr	r2, [pc, #448]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b6e      	ldr	r3, [pc, #440]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a6d      	ldr	r2, [pc, #436]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0xd0>
 8002208:	4b6a      	ldr	r3, [pc, #424]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a69      	ldr	r2, [pc, #420]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 800220e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b67      	ldr	r3, [pc, #412]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a66      	ldr	r2, [pc, #408]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7ff fd0c 	bl	8001c44 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002230:	f7ff fd08 	bl	8001c44 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e2ad      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002242:	4b5c      	ldr	r3, [pc, #368]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0xe0>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7ff fcf8 	bl	8001c44 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002258:	f7ff fcf4 	bl	8001c44 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e299      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800226a:	4b52      	ldr	r3, [pc, #328]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x108>
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d05a      	beq.n	800233c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d005      	beq.n	8002298 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d119      	bne.n	80022c6 <HAL_RCC_OscConfig+0x176>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d116      	bne.n	80022c6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002298:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_OscConfig+0x160>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e276      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	493d      	ldr	r1, [pc, #244]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c4:	e03a      	b.n	800233c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d020      	beq.n	8002310 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ce:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <HAL_RCC_OscConfig+0x268>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fcb6 	bl	8001c44 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022dc:	f7ff fcb2 	bl	8001c44 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e257      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022ee:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	492a      	ldr	r1, [pc, #168]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
 800230e:	e015      	b.n	800233c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002310:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <HAL_RCC_OscConfig+0x268>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7ff fc95 	bl	8001c44 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800231e:	f7ff fc91 	bl	8001c44 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e236      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002330:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80b8 	beq.w	80024ba <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d170      	bne.n	8002432 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002350:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_OscConfig+0x218>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e21a      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1a      	ldr	r2, [r3, #32]
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002374:	429a      	cmp	r2, r3
 8002376:	d921      	bls.n	80023bc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fc7d 	bl	8002c7c <RCC_SetFlashLatencyFromMSIRange>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e208      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4906      	ldr	r1, [pc, #24]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	061b      	lsls	r3, r3, #24
 80023ac:	4901      	ldr	r1, [pc, #4]	; (80023b4 <HAL_RCC_OscConfig+0x264>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
 80023b2:	e020      	b.n	80023f6 <HAL_RCC_OscConfig+0x2a6>
 80023b4:	40023800 	.word	0x40023800
 80023b8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023bc:	4b99      	ldr	r3, [pc, #612]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4996      	ldr	r1, [pc, #600]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ce:	4b95      	ldr	r3, [pc, #596]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	061b      	lsls	r3, r3, #24
 80023dc:	4991      	ldr	r1, [pc, #580]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fc48 	bl	8002c7c <RCC_SetFlashLatencyFromMSIRange>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1d3      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	0b5b      	lsrs	r3, r3, #13
 80023fc:	3301      	adds	r3, #1
 80023fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002406:	4a87      	ldr	r2, [pc, #540]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 8002408:	6892      	ldr	r2, [r2, #8]
 800240a:	0912      	lsrs	r2, r2, #4
 800240c:	f002 020f 	and.w	r2, r2, #15
 8002410:	4985      	ldr	r1, [pc, #532]	; (8002628 <HAL_RCC_OscConfig+0x4d8>)
 8002412:	5c8a      	ldrb	r2, [r1, r2]
 8002414:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002416:	4a85      	ldr	r2, [pc, #532]	; (800262c <HAL_RCC_OscConfig+0x4dc>)
 8002418:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800241a:	4b85      	ldr	r3, [pc, #532]	; (8002630 <HAL_RCC_OscConfig+0x4e0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fbc4 	bl	8001bac <HAL_InitTick>
 8002424:	4603      	mov	r3, r0
 8002426:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d045      	beq.n	80024ba <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	e1b5      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d029      	beq.n	800248e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800243a:	4b7e      	ldr	r3, [pc, #504]	; (8002634 <HAL_RCC_OscConfig+0x4e4>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff fc00 	bl	8001c44 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002448:	f7ff fbfc 	bl	8001c44 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1a1      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800245a:	4b72      	ldr	r3, [pc, #456]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002466:	4b6f      	ldr	r3, [pc, #444]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	496c      	ldr	r1, [pc, #432]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002478:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	4967      	ldr	r1, [pc, #412]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
 800248c:	e015      	b.n	80024ba <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800248e:	4b69      	ldr	r3, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x4e4>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7ff fbd6 	bl	8001c44 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800249c:	f7ff fbd2 	bl	8001c44 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e177      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024ae:	4b5d      	ldr	r3, [pc, #372]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d030      	beq.n	8002528 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d016      	beq.n	80024fc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ce:	4b5a      	ldr	r3, [pc, #360]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d4:	f7ff fbb6 	bl	8001c44 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024dc:	f7ff fbb2 	bl	8001c44 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e157      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024ee:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80024f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x38c>
 80024fa:	e015      	b.n	8002528 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fc:	4b4e      	ldr	r3, [pc, #312]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002502:	f7ff fb9f 	bl	8001c44 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250a:	f7ff fb9b 	bl	8001c44 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e140      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800251c:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 800251e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80b5 	beq.w	80026a0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253a:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10d      	bne.n	8002562 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	4a36      	ldr	r2, [pc, #216]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	6253      	str	r3, [r2, #36]	; 0x24
 8002552:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255e:	2301      	movs	r3, #1
 8002560:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002562:	4b36      	ldr	r3, [pc, #216]	; (800263c <HAL_RCC_OscConfig+0x4ec>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d118      	bne.n	80025a0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256e:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_RCC_OscConfig+0x4ec>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a32      	ldr	r2, [pc, #200]	; (800263c <HAL_RCC_OscConfig+0x4ec>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257a:	f7ff fb63 	bl	8001c44 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002582:	f7ff fb5f 	bl	8001c44 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b64      	cmp	r3, #100	; 0x64
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e104      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_RCC_OscConfig+0x4ec>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d106      	bne.n	80025b6 <HAL_RCC_OscConfig+0x466>
 80025a8:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b2:	6353      	str	r3, [r2, #52]	; 0x34
 80025b4:	e02d      	b.n	8002612 <HAL_RCC_OscConfig+0x4c2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x488>
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80025c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c2:	4a18      	ldr	r2, [pc, #96]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80025c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025c8:	6353      	str	r3, [r2, #52]	; 0x34
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80025cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ce:	4a15      	ldr	r2, [pc, #84]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80025d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025d4:	6353      	str	r3, [r2, #52]	; 0x34
 80025d6:	e01c      	b.n	8002612 <HAL_RCC_OscConfig+0x4c2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_OscConfig+0x4aa>
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	4a0f      	ldr	r2, [pc, #60]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80025e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ea:	6353      	str	r3, [r2, #52]	; 0x34
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80025ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f0:	4a0c      	ldr	r2, [pc, #48]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80025f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f6:	6353      	str	r3, [r2, #52]	; 0x34
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_OscConfig+0x4c2>
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 8002600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002604:	6353      	str	r3, [r2, #52]	; 0x34
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 8002608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260a:	4a06      	ldr	r2, [pc, #24]	; (8002624 <HAL_RCC_OscConfig+0x4d4>)
 800260c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002610:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d024      	beq.n	8002664 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261a:	f7ff fb13 	bl	8001c44 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002620:	e019      	b.n	8002656 <HAL_RCC_OscConfig+0x506>
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	0800784c 	.word	0x0800784c
 800262c:	20000004 	.word	0x20000004
 8002630:	20000008 	.word	0x20000008
 8002634:	42470020 	.word	0x42470020
 8002638:	42470680 	.word	0x42470680
 800263c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7ff fb00 	bl	8001c44 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0a3      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002656:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <HAL_RCC_OscConfig+0x658>)
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ee      	beq.n	8002640 <HAL_RCC_OscConfig+0x4f0>
 8002662:	e014      	b.n	800268e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002664:	f7ff faee 	bl	8001c44 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7ff faea 	bl	8001c44 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e08d      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002682:	4b49      	ldr	r3, [pc, #292]	; (80027a8 <HAL_RCC_OscConfig+0x658>)
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ee      	bne.n	800266c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800268e:	7ffb      	ldrb	r3, [r7, #31]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002694:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <HAL_RCC_OscConfig+0x658>)
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	4a43      	ldr	r2, [pc, #268]	; (80027a8 <HAL_RCC_OscConfig+0x658>)
 800269a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d079      	beq.n	800279c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2b0c      	cmp	r3, #12
 80026ac:	d056      	beq.n	800275c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d13b      	bne.n	800272e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_RCC_OscConfig+0x65c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff fac2 	bl	8001c44 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c4:	f7ff fabe 	bl	8001c44 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e063      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026d6:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <HAL_RCC_OscConfig+0x658>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e2:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <HAL_RCC_OscConfig+0x658>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	4319      	orrs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	430b      	orrs	r3, r1
 80026fa:	492b      	ldr	r1, [pc, #172]	; (80027a8 <HAL_RCC_OscConfig+0x658>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <HAL_RCC_OscConfig+0x65c>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7ff fa9d 	bl	8001c44 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270e:	f7ff fa99 	bl	8001c44 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e03e      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002720:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <HAL_RCC_OscConfig+0x658>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x5be>
 800272c:	e036      	b.n	800279c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272e:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <HAL_RCC_OscConfig+0x65c>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7ff fa86 	bl	8001c44 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273c:	f7ff fa82 	bl	8001c44 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e027      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_RCC_OscConfig+0x658>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x5ec>
 800275a:	e01f      	b.n	800279c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e01a      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <HAL_RCC_OscConfig+0x658>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	429a      	cmp	r2, r3
 800277a:	d10d      	bne.n	8002798 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d106      	bne.n	8002798 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	42470060 	.word	0x42470060

080027b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e11a      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b8f      	ldr	r3, [pc, #572]	; (8002a04 <HAL_RCC_ClockConfig+0x254>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d919      	bls.n	8002806 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x34>
 80027d8:	4b8a      	ldr	r3, [pc, #552]	; (8002a04 <HAL_RCC_ClockConfig+0x254>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a89      	ldr	r2, [pc, #548]	; (8002a04 <HAL_RCC_ClockConfig+0x254>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b87      	ldr	r3, [pc, #540]	; (8002a04 <HAL_RCC_ClockConfig+0x254>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 0201 	bic.w	r2, r3, #1
 80027ec:	4985      	ldr	r1, [pc, #532]	; (8002a04 <HAL_RCC_ClockConfig+0x254>)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f4:	4b83      	ldr	r3, [pc, #524]	; (8002a04 <HAL_RCC_ClockConfig+0x254>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d001      	beq.n	8002806 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0f9      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002812:	4b7d      	ldr	r3, [pc, #500]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	497a      	ldr	r1, [pc, #488]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 808e 	beq.w	800294e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800283a:	4b73      	ldr	r3, [pc, #460]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d121      	bne.n	800288a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0d7      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b03      	cmp	r3, #3
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002852:	4b6d      	ldr	r3, [pc, #436]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d115      	bne.n	800288a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e0cb      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800286a:	4b67      	ldr	r3, [pc, #412]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0bf      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800287a:	4b63      	ldr	r3, [pc, #396]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0b7      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b5f      	ldr	r3, [pc, #380]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	495c      	ldr	r1, [pc, #368]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800289c:	f7ff f9d2 	bl	8001c44 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ac:	f7ff f9ca 	bl	8001c44 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e09b      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c2:	4b51      	ldr	r3, [pc, #324]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d1ee      	bne.n	80028ac <HAL_RCC_ClockConfig+0xfc>
 80028ce:	e03e      	b.n	800294e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d112      	bne.n	80028fe <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028da:	f7ff f9b3 	bl	8001c44 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e084      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f0:	4b45      	ldr	r3, [pc, #276]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	d1ee      	bne.n	80028da <HAL_RCC_ClockConfig+0x12a>
 80028fc:	e027      	b.n	800294e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d11d      	bne.n	8002942 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002906:	e00a      	b.n	800291e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002908:	f7ff f99c 	bl	8001c44 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e06d      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800291e:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b04      	cmp	r3, #4
 8002928:	d1ee      	bne.n	8002908 <HAL_RCC_ClockConfig+0x158>
 800292a:	e010      	b.n	800294e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292c:	f7ff f98a 	bl	8001c44 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e05b      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ee      	bne.n	800292c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800294e:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_RCC_ClockConfig+0x254>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d219      	bcs.n	8002990 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d105      	bne.n	800296e <HAL_RCC_ClockConfig+0x1be>
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <HAL_RCC_ClockConfig+0x254>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a27      	ldr	r2, [pc, #156]	; (8002a04 <HAL_RCC_ClockConfig+0x254>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <HAL_RCC_ClockConfig+0x254>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 0201 	bic.w	r2, r3, #1
 8002976:	4923      	ldr	r1, [pc, #140]	; (8002a04 <HAL_RCC_ClockConfig+0x254>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCC_ClockConfig+0x254>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e034      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4917      	ldr	r1, [pc, #92]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	490f      	ldr	r1, [pc, #60]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ce:	f000 f823 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_RCC_ClockConfig+0x258>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	490b      	ldr	r1, [pc, #44]	; (8002a0c <HAL_RCC_ClockConfig+0x25c>)
 80029e0:	5ccb      	ldrb	r3, [r1, r3]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <HAL_RCC_ClockConfig+0x260>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_RCC_ClockConfig+0x264>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f8dc 	bl	8001bac <HAL_InitTick>
 80029f4:	4603      	mov	r3, r0
 80029f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80029f8:	7afb      	ldrb	r3, [r7, #11]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023c00 	.word	0x40023c00
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	0800784c 	.word	0x0800784c
 8002a10:	20000004 	.word	0x20000004
 8002a14:	20000008 	.word	0x20000008

08002a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a1c:	b092      	sub	sp, #72	; 0x48
 8002a1e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002a20:	4b79      	ldr	r3, [pc, #484]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	d00d      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x34>
 8002a30:	2b0c      	cmp	r3, #12
 8002a32:	f200 80d5 	bhi.w	8002be0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d002      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x28>
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x2e>
 8002a3e:	e0cf      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a40:	4b72      	ldr	r3, [pc, #456]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002a42:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002a44:	e0da      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a46:	4b72      	ldr	r3, [pc, #456]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002a48:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002a4a:	e0d7      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4e:	0c9b      	lsrs	r3, r3, #18
 8002a50:	f003 020f 	and.w	r2, r3, #15
 8002a54:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a56:	5c9b      	ldrb	r3, [r3, r2]
 8002a58:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5c:	0d9b      	lsrs	r3, r3, #22
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	3301      	adds	r3, #1
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a66:	4b68      	ldr	r3, [pc, #416]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d05d      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	2200      	movs	r2, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	460d      	mov	r5, r1
 8002a7e:	4622      	mov	r2, r4
 8002a80:	462b      	mov	r3, r5
 8002a82:	f04f 0000 	mov.w	r0, #0
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	0159      	lsls	r1, r3, #5
 8002a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a90:	0150      	lsls	r0, r2, #5
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4621      	mov	r1, r4
 8002a98:	1a51      	subs	r1, r2, r1
 8002a9a:	6139      	str	r1, [r7, #16]
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ab0:	4659      	mov	r1, fp
 8002ab2:	018b      	lsls	r3, r1, #6
 8002ab4:	4651      	mov	r1, sl
 8002ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aba:	4651      	mov	r1, sl
 8002abc:	018a      	lsls	r2, r1, #6
 8002abe:	46d4      	mov	ip, sl
 8002ac0:	ebb2 080c 	subs.w	r8, r2, ip
 8002ac4:	4659      	mov	r1, fp
 8002ac6:	eb63 0901 	sbc.w	r9, r3, r1
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ade:	4690      	mov	r8, r2
 8002ae0:	4699      	mov	r9, r3
 8002ae2:	4623      	mov	r3, r4
 8002ae4:	eb18 0303 	adds.w	r3, r8, r3
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	462b      	mov	r3, r5
 8002aec:	eb49 0303 	adc.w	r3, r9, r3
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002afe:	4629      	mov	r1, r5
 8002b00:	024b      	lsls	r3, r1, #9
 8002b02:	4620      	mov	r0, r4
 8002b04:	4629      	mov	r1, r5
 8002b06:	4604      	mov	r4, r0
 8002b08:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002b0c:	4601      	mov	r1, r0
 8002b0e:	024a      	lsls	r2, r1, #9
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b16:	2200      	movs	r2, #0
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b20:	f7fd fe3a 	bl	8000798 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b2c:	e055      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b30:	2200      	movs	r2, #0
 8002b32:	623b      	str	r3, [r7, #32]
 8002b34:	627a      	str	r2, [r7, #36]	; 0x24
 8002b36:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b3a:	4642      	mov	r2, r8
 8002b3c:	464b      	mov	r3, r9
 8002b3e:	f04f 0000 	mov.w	r0, #0
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	0159      	lsls	r1, r3, #5
 8002b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b4c:	0150      	lsls	r0, r2, #5
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	46c4      	mov	ip, r8
 8002b54:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002b58:	4640      	mov	r0, r8
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b6e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b72:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b76:	ebb2 040a 	subs.w	r4, r2, sl
 8002b7a:	eb63 050b 	sbc.w	r5, r3, fp
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	00eb      	lsls	r3, r5, #3
 8002b88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b8c:	00e2      	lsls	r2, r4, #3
 8002b8e:	4614      	mov	r4, r2
 8002b90:	461d      	mov	r5, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	18e3      	adds	r3, r4, r3
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	eb45 0303 	adc.w	r3, r5, r3
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bac:	4629      	mov	r1, r5
 8002bae:	028b      	lsls	r3, r1, #10
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002bba:	4601      	mov	r1, r0
 8002bbc:	028a      	lsls	r2, r1, #10
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	61fa      	str	r2, [r7, #28]
 8002bca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bce:	f7fd fde3 	bl	8000798 <__aeabi_uldivmod>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8002bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bdc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002bde:	e00d      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	0b5b      	lsrs	r3, r3, #13
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002bfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3748      	adds	r7, #72	; 0x48
 8002c02:	46bd      	mov	sp, r7
 8002c04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	00f42400 	.word	0x00f42400
 8002c10:	007a1200 	.word	0x007a1200
 8002c14:	08007840 	.word	0x08007840

08002c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c1c:	4b02      	ldr	r3, [pc, #8]	; (8002c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	20000004 	.word	0x20000004

08002c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c30:	f7ff fff2 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c34:	4602      	mov	r2, r0
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	4903      	ldr	r1, [pc, #12]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c42:	5ccb      	ldrb	r3, [r1, r3]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	0800785c 	.word	0x0800785c

08002c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c58:	f7ff ffde 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	0adb      	lsrs	r3, r3, #11
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4903      	ldr	r1, [pc, #12]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40023800 	.word	0x40023800
 8002c78:	0800785c 	.word	0x0800785c

08002c7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c88:	4b29      	ldr	r3, [pc, #164]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d12c      	bne.n	8002cee <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c94:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002ca0:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e016      	b.n	8002cda <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cac:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	4a1f      	ldr	r2, [pc, #124]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	6253      	str	r3, [r2, #36]	; 0x24
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002ccc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cce:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ce0:	d105      	bne.n	8002cee <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ce8:	d101      	bne.n	8002cee <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002cea:	2301      	movs	r3, #1
 8002cec:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cfa:	f043 0304 	orr.w	r3, r3, #4
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 0201 	bic.w	r2, r3, #1
 8002d08:	490b      	ldr	r1, [pc, #44]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d001      	beq.n	8002d22 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40007000 	.word	0x40007000
 8002d38:	40023c00 	.word	0x40023c00

08002d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e07b      	b.n	8002e46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d108      	bne.n	8002d68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d5e:	d009      	beq.n	8002d74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
 8002d66:	e005      	b.n	8002d74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe fdac 	bl	80018ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002daa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df8:	ea42 0103 	orr.w	r1, r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	f003 0104 	and.w	r1, r3, #4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	f003 0210 	and.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b088      	sub	sp, #32
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_SPI_Transmit+0x22>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e126      	b.n	80030be <HAL_SPI_Transmit+0x270>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e78:	f7fe fee4 	bl	8001c44 <HAL_GetTick>
 8002e7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d002      	beq.n	8002e94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e92:	e10b      	b.n	80030ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_SPI_Transmit+0x52>
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ea4:	e102      	b.n	80030ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eec:	d10f      	bne.n	8002f0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	d007      	beq.n	8002f2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f34:	d14b      	bne.n	8002fce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_SPI_Transmit+0xf6>
 8002f3e:	8afb      	ldrh	r3, [r7, #22]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d13e      	bne.n	8002fc2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	881a      	ldrh	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	1c9a      	adds	r2, r3, #2
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f68:	e02b      	b.n	8002fc2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d112      	bne.n	8002f9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	881a      	ldrh	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	1c9a      	adds	r2, r3, #2
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f9c:	e011      	b.n	8002fc2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f9e:	f7fe fe51 	bl	8001c44 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d803      	bhi.n	8002fb6 <HAL_SPI_Transmit+0x168>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d102      	bne.n	8002fbc <HAL_SPI_Transmit+0x16e>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fc0:	e074      	b.n	80030ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ce      	bne.n	8002f6a <HAL_SPI_Transmit+0x11c>
 8002fcc:	e04c      	b.n	8003068 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_SPI_Transmit+0x18e>
 8002fd6:	8afb      	ldrh	r3, [r7, #22]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d140      	bne.n	800305e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003002:	e02c      	b.n	800305e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b02      	cmp	r3, #2
 8003010:	d113      	bne.n	800303a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	330c      	adds	r3, #12
 800301c:	7812      	ldrb	r2, [r2, #0]
 800301e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	86da      	strh	r2, [r3, #54]	; 0x36
 8003038:	e011      	b.n	800305e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800303a:	f7fe fe03 	bl	8001c44 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d803      	bhi.n	8003052 <HAL_SPI_Transmit+0x204>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d102      	bne.n	8003058 <HAL_SPI_Transmit+0x20a>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800305c:	e026      	b.n	80030ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1cd      	bne.n	8003004 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	6839      	ldr	r1, [r7, #0]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fa61 	bl	8003534 <SPI_EndRxTxTransaction>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e000      	b.n	80030ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80030aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b08c      	sub	sp, #48	; 0x30
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030d4:	2301      	movs	r3, #1
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_SPI_TransmitReceive+0x26>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e18a      	b.n	8003402 <HAL_SPI_TransmitReceive+0x33c>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030f4:	f7fe fda6 	bl	8001c44 <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800310e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003112:	2b01      	cmp	r3, #1
 8003114:	d00f      	beq.n	8003136 <HAL_SPI_TransmitReceive+0x70>
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800311c:	d107      	bne.n	800312e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <HAL_SPI_TransmitReceive+0x68>
 8003126:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800312a:	2b04      	cmp	r3, #4
 800312c:	d003      	beq.n	8003136 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800312e:	2302      	movs	r3, #2
 8003130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003134:	e15b      	b.n	80033ee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x82>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x82>
 8003142:	887b      	ldrh	r3, [r7, #2]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d103      	bne.n	8003150 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800314e:	e14e      	b.n	80033ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b04      	cmp	r3, #4
 800315a:	d003      	beq.n	8003164 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2205      	movs	r2, #5
 8003160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	887a      	ldrh	r2, [r7, #2]
 800317a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	887a      	ldrh	r2, [r7, #2]
 8003186:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	d007      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c0:	d178      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_SPI_TransmitReceive+0x10a>
 80031ca:	8b7b      	ldrh	r3, [r7, #26]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d166      	bne.n	800329e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	881a      	ldrh	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	1c9a      	adds	r2, r3, #2
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f4:	e053      	b.n	800329e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b02      	cmp	r3, #2
 8003202:	d11b      	bne.n	800323c <HAL_SPI_TransmitReceive+0x176>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d016      	beq.n	800323c <HAL_SPI_TransmitReceive+0x176>
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d113      	bne.n	800323c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	881a      	ldrh	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	1c9a      	adds	r2, r3, #2
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d119      	bne.n	800327e <HAL_SPI_TransmitReceive+0x1b8>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d014      	beq.n	800327e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	b292      	uxth	r2, r2
 8003260:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	1c9a      	adds	r2, r3, #2
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800327a:	2301      	movs	r3, #1
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800327e:	f7fe fce1 	bl	8001c44 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800328a:	429a      	cmp	r2, r3
 800328c:	d807      	bhi.n	800329e <HAL_SPI_TransmitReceive+0x1d8>
 800328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d003      	beq.n	800329e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800329c:	e0a7      	b.n	80033ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1a6      	bne.n	80031f6 <HAL_SPI_TransmitReceive+0x130>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1a1      	bne.n	80031f6 <HAL_SPI_TransmitReceive+0x130>
 80032b2:	e07c      	b.n	80033ae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_SPI_TransmitReceive+0x1fc>
 80032bc:	8b7b      	ldrh	r3, [r7, #26]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d16b      	bne.n	800339a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	330c      	adds	r3, #12
 80032cc:	7812      	ldrb	r2, [r2, #0]
 80032ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e8:	e057      	b.n	800339a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d11c      	bne.n	8003332 <HAL_SPI_TransmitReceive+0x26c>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d017      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x26c>
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d114      	bne.n	8003332 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	330c      	adds	r3, #12
 8003312:	7812      	ldrb	r2, [r2, #0]
 8003314:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d119      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x2ae>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d014      	beq.n	8003374 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003370:	2301      	movs	r3, #1
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003374:	f7fe fc66 	bl	8001c44 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003380:	429a      	cmp	r2, r3
 8003382:	d803      	bhi.n	800338c <HAL_SPI_TransmitReceive+0x2c6>
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338a:	d102      	bne.n	8003392 <HAL_SPI_TransmitReceive+0x2cc>
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	2b00      	cmp	r3, #0
 8003390:	d103      	bne.n	800339a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003398:	e029      	b.n	80033ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1a2      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x224>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d19d      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f8be 	bl	8003534 <SPI_EndRxTxTransaction>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d006      	beq.n	80033cc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033ca:	e010      	b.n	80033ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10b      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	e000      	b.n	80033ee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003402:	4618      	mov	r0, r3
 8003404:	3730      	adds	r7, #48	; 0x30
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003418:	b2db      	uxtb	r3, r3
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003434:	f7fe fc06 	bl	8001c44 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	4413      	add	r3, r2
 8003442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003444:	f7fe fbfe 	bl	8001c44 <HAL_GetTick>
 8003448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800344a:	4b39      	ldr	r3, [pc, #228]	; (8003530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	015b      	lsls	r3, r3, #5
 8003450:	0d1b      	lsrs	r3, r3, #20
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800345a:	e054      	b.n	8003506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d050      	beq.n	8003506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003464:	f7fe fbee 	bl	8001c44 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	429a      	cmp	r2, r3
 8003472:	d902      	bls.n	800347a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d13d      	bne.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003492:	d111      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349c:	d004      	beq.n	80034a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a6:	d107      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c0:	d10f      	bne.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e017      	b.n	8003526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	3b01      	subs	r3, #1
 8003504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	429a      	cmp	r2, r3
 8003522:	d19b      	bne.n	800345c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000004 	.word	0x20000004

08003534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <SPI_EndRxTxTransaction+0x7c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1b      	ldr	r2, [pc, #108]	; (80035b4 <SPI_EndRxTxTransaction+0x80>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	0d5b      	lsrs	r3, r3, #21
 800354c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003550:	fb02 f303 	mul.w	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355e:	d112      	bne.n	8003586 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2200      	movs	r2, #0
 8003568:	2180      	movs	r1, #128	; 0x80
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7ff ff5a 	bl	8003424 <SPI_WaitFlagStateUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d016      	beq.n	80035a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e00f      	b.n	80035a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	3b01      	subs	r3, #1
 8003590:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359c:	2b80      	cmp	r3, #128	; 0x80
 800359e:	d0f2      	beq.n	8003586 <SPI_EndRxTxTransaction+0x52>
 80035a0:	e000      	b.n	80035a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80035a2:	bf00      	nop
  }

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000004 	.word	0x20000004
 80035b4:	165e9f81 	.word	0x165e9f81

080035b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e03f      	b.n	800364a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe f9c8 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2224      	movs	r2, #36	; 0x24
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f905 	bl	800380c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b08a      	sub	sp, #40	; 0x28
 8003656:	af02      	add	r7, sp, #8
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b20      	cmp	r3, #32
 8003670:	d17c      	bne.n	800376c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <HAL_UART_Transmit+0x2c>
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e075      	b.n	800376e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_UART_Transmit+0x3e>
 800368c:	2302      	movs	r3, #2
 800368e:	e06e      	b.n	800376e <HAL_UART_Transmit+0x11c>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2221      	movs	r2, #33	; 0x21
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036a6:	f7fe facd 	bl	8001c44 <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	88fa      	ldrh	r2, [r7, #6]
 80036b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	88fa      	ldrh	r2, [r7, #6]
 80036b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c0:	d108      	bne.n	80036d4 <HAL_UART_Transmit+0x82>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d104      	bne.n	80036d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	e003      	b.n	80036dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036e4:	e02a      	b.n	800373c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2200      	movs	r2, #0
 80036ee:	2180      	movs	r1, #128	; 0x80
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f840 	bl	8003776 <UART_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e036      	b.n	800376e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10b      	bne.n	800371e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003714:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	3302      	adds	r3, #2
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	e007      	b.n	800372e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	3301      	adds	r3, #1
 800372c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1cf      	bne.n	80036e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2200      	movs	r2, #0
 800374e:	2140      	movs	r1, #64	; 0x40
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f810 	bl	8003776 <UART_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e006      	b.n	800376e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003786:	e02c      	b.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d028      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003796:	f7fe fa55 	bl	8001c44 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d21d      	bcs.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e00f      	b.n	8003802 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4013      	ands	r3, r2
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d0c3      	beq.n	8003788 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	4313      	orrs	r3, r2
 8003840:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800384c:	f023 030c 	bic.w	r3, r3, #12
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	430b      	orrs	r3, r1
 8003858:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a55      	ldr	r2, [pc, #340]	; (80039cc <UART_SetConfig+0x1c0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d103      	bne.n	8003882 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800387a:	f7ff f9eb 	bl	8002c54 <HAL_RCC_GetPCLK2Freq>
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	e002      	b.n	8003888 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003882:	f7ff f9d3 	bl	8002c2c <HAL_RCC_GetPCLK1Freq>
 8003886:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003890:	d14c      	bne.n	800392c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	009a      	lsls	r2, r3, #2
 800389c:	441a      	add	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	4a49      	ldr	r2, [pc, #292]	; (80039d0 <UART_SetConfig+0x1c4>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	0119      	lsls	r1, r3, #4
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009a      	lsls	r2, r3, #2
 80038bc:	441a      	add	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c8:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <UART_SetConfig+0x1c4>)
 80038ca:	fba3 0302 	umull	r0, r3, r3, r2
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2064      	movs	r0, #100	; 0x64
 80038d2:	fb00 f303 	mul.w	r3, r0, r3
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	3332      	adds	r3, #50	; 0x32
 80038dc:	4a3c      	ldr	r2, [pc, #240]	; (80039d0 <UART_SetConfig+0x1c4>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038ea:	4419      	add	r1, r3
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009a      	lsls	r2, r3, #2
 80038f6:	441a      	add	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003902:	4b33      	ldr	r3, [pc, #204]	; (80039d0 <UART_SetConfig+0x1c4>)
 8003904:	fba3 0302 	umull	r0, r3, r3, r2
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	2064      	movs	r0, #100	; 0x64
 800390c:	fb00 f303 	mul.w	r3, r0, r3
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	3332      	adds	r3, #50	; 0x32
 8003916:	4a2e      	ldr	r2, [pc, #184]	; (80039d0 <UART_SetConfig+0x1c4>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	f003 0207 	and.w	r2, r3, #7
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	440a      	add	r2, r1
 8003928:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800392a:	e04a      	b.n	80039c2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009a      	lsls	r2, r3, #2
 8003936:	441a      	add	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	4a23      	ldr	r2, [pc, #140]	; (80039d0 <UART_SetConfig+0x1c4>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	0119      	lsls	r1, r3, #4
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009a      	lsls	r2, r3, #2
 8003956:	441a      	add	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <UART_SetConfig+0x1c4>)
 8003964:	fba3 0302 	umull	r0, r3, r3, r2
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	2064      	movs	r0, #100	; 0x64
 800396c:	fb00 f303 	mul.w	r3, r0, r3
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	3332      	adds	r3, #50	; 0x32
 8003976:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <UART_SetConfig+0x1c4>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003982:	4419      	add	r1, r3
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	009a      	lsls	r2, r3, #2
 800398e:	441a      	add	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	fbb2 f2f3 	udiv	r2, r2, r3
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <UART_SetConfig+0x1c4>)
 800399c:	fba3 0302 	umull	r0, r3, r3, r2
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	2064      	movs	r0, #100	; 0x64
 80039a4:	fb00 f303 	mul.w	r3, r0, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	3332      	adds	r3, #50	; 0x32
 80039ae:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <UART_SetConfig+0x1c4>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	f003 020f 	and.w	r2, r3, #15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	440a      	add	r2, r1
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40013800 	.word	0x40013800
 80039d0:	51eb851f 	.word	0x51eb851f

080039d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80039d8:	4904      	ldr	r1, [pc, #16]	; (80039ec <MX_FATFS_Init+0x18>)
 80039da:	4805      	ldr	r0, [pc, #20]	; (80039f0 <MX_FATFS_Init+0x1c>)
 80039dc:	f003 f8e2 	bl	8006ba4 <FATFS_LinkDriver>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461a      	mov	r2, r3
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <MX_FATFS_Init+0x20>)
 80039e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80039e8:	bf00      	nop
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	200025d8 	.word	0x200025d8
 80039f0:	20000010 	.word	0x20000010
 80039f4:	200025d4 	.word	0x200025d4

080039f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80039fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd f9fa 	bl	8000e0c <SD_disk_initialize>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    return SD_disk_initialize(pdrv);
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fd f9eb 	bl	8000e0c <SD_disk_initialize>
 8003a36:	4603      	mov	r3, r0
 8003a38:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4603      	mov	r3, r0
 8003a50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return  SD_disk_read(pdrv, buff, sector, count);
 8003a52:	7bf8      	ldrb	r0, [r7, #15]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	f7fd fac1 	bl	8000fe0 <SD_disk_read>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	4603      	mov	r3, r0
 8003a78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003a7a:	7bf8      	ldrb	r0, [r7, #15]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	f7fd fb17 	bl	80010b4 <SD_disk_write>
 8003a86:	4603      	mov	r3, r0
 8003a88:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	603a      	str	r2, [r7, #0]
 8003a9c:	71fb      	strb	r3, [r7, #7]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	79b9      	ldrb	r1, [r7, #6]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fd fb87 	bl	80011bc <SD_disk_ioctl>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	4a08      	ldr	r2, [pc, #32]	; (8003aec <disk_status+0x30>)
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	79fa      	ldrb	r2, [r7, #7]
 8003ad4:	4905      	ldr	r1, [pc, #20]	; (8003aec <disk_status+0x30>)
 8003ad6:	440a      	add	r2, r1
 8003ad8:	7a12      	ldrb	r2, [r2, #8]
 8003ada:	4610      	mov	r0, r2
 8003adc:	4798      	blx	r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20002804 	.word	0x20002804

08003af0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <disk_initialize+0x48>)
 8003b02:	5cd3      	ldrb	r3, [r2, r3]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d111      	bne.n	8003b2c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	4a0b      	ldr	r2, [pc, #44]	; (8003b38 <disk_initialize+0x48>)
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <disk_initialize+0x48>)
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	79fa      	ldrb	r2, [r7, #7]
 8003b1e:	4906      	ldr	r1, [pc, #24]	; (8003b38 <disk_initialize+0x48>)
 8003b20:	440a      	add	r2, r1
 8003b22:	7a12      	ldrb	r2, [r2, #8]
 8003b24:	4610      	mov	r0, r2
 8003b26:	4798      	blx	r3
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20002804 	.word	0x20002804

08003b3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	4603      	mov	r3, r0
 8003b4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <disk_read+0x3c>)
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	689c      	ldr	r4, [r3, #8]
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <disk_read+0x3c>)
 8003b5c:	4413      	add	r3, r2
 8003b5e:	7a18      	ldrb	r0, [r3, #8]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	47a0      	blx	r4
 8003b68:	4603      	mov	r3, r0
 8003b6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd90      	pop	{r4, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20002804 	.word	0x20002804

08003b7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	4603      	mov	r3, r0
 8003b8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <disk_write+0x3c>)
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	68dc      	ldr	r4, [r3, #12]
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	4a07      	ldr	r2, [pc, #28]	; (8003bb8 <disk_write+0x3c>)
 8003b9c:	4413      	add	r3, r2
 8003b9e:	7a18      	ldrb	r0, [r3, #8]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	47a0      	blx	r4
 8003ba8:	4603      	mov	r3, r0
 8003baa:	75fb      	strb	r3, [r7, #23]
  return res;
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd90      	pop	{r4, r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20002804 	.word	0x20002804

08003bbc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	603a      	str	r2, [r7, #0]
 8003bc6:	71fb      	strb	r3, [r7, #7]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <disk_ioctl+0x38>)
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	79fa      	ldrb	r2, [r7, #7]
 8003bda:	4906      	ldr	r1, [pc, #24]	; (8003bf4 <disk_ioctl+0x38>)
 8003bdc:	440a      	add	r2, r1
 8003bde:	7a10      	ldrb	r0, [r2, #8]
 8003be0:	79b9      	ldrb	r1, [r7, #6]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	4798      	blx	r3
 8003be6:	4603      	mov	r3, r0
 8003be8:	73fb      	strb	r3, [r7, #15]
  return res;
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20002804 	.word	0x20002804

08003bf8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3301      	adds	r3, #1
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003c08:	89fb      	ldrh	r3, [r7, #14]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	b21a      	sxth	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	b21b      	sxth	r3, r3
 8003c14:	4313      	orrs	r3, r2
 8003c16:	b21b      	sxth	r3, r3
 8003c18:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003c1a:	89fb      	ldrh	r3, [r7, #14]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3303      	adds	r3, #3
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	3202      	adds	r2, #2
 8003c3e:	7812      	ldrb	r2, [r2, #0]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	3201      	adds	r2, #1
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	7812      	ldrb	r2, [r2, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
	return rv;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr

08003c6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	887a      	ldrh	r2, [r7, #2]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	887b      	ldrh	r3, [r7, #2]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	0a1b      	lsrs	r3, r3, #8
 8003cca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00d      	beq.n	8003d2a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	1c53      	adds	r3, r2, #1
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	1c59      	adds	r1, r3, #1
 8003d18:	6179      	str	r1, [r7, #20]
 8003d1a:	7812      	ldrb	r2, [r2, #0]
 8003d1c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f1      	bne.n	8003d0e <mem_cpy+0x1a>
	}
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	617a      	str	r2, [r7, #20]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	607b      	str	r3, [r7, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f3      	bne.n	8003d44 <mem_set+0x10>
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003d68:	b480      	push	{r7}
 8003d6a:	b089      	sub	sp, #36	; 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	61fa      	str	r2, [r7, #28]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	61ba      	str	r2, [r7, #24]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	1acb      	subs	r3, r1, r3
 8003d94:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	607b      	str	r3, [r7, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <mem_cmp+0x40>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0eb      	beq.n	8003d80 <mem_cmp+0x18>

	return r;
 8003da8:	697b      	ldr	r3, [r7, #20]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3724      	adds	r7, #36	; 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003dbe:	e002      	b.n	8003dc6 <chk_chr+0x12>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <chk_chr+0x26>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d1f2      	bne.n	8003dc0 <chk_chr+0xc>
	return *str;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e029      	b.n	8003e50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003dfc:	4a26      	ldr	r2, [pc, #152]	; (8003e98 <chk_lock+0xb0>)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	4413      	add	r3, r2
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d01d      	beq.n	8003e46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003e0a:	4a23      	ldr	r2, [pc, #140]	; (8003e98 <chk_lock+0xb0>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	4413      	add	r3, r2
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d116      	bne.n	8003e4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003e1c:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <chk_lock+0xb0>)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	4413      	add	r3, r2
 8003e24:	3304      	adds	r3, #4
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d10c      	bne.n	8003e4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003e30:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <chk_lock+0xb0>)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	4413      	add	r3, r2
 8003e38:	3308      	adds	r3, #8
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d102      	bne.n	8003e4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003e44:	e007      	b.n	8003e56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003e46:	2301      	movs	r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d9d2      	bls.n	8003dfc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d109      	bne.n	8003e70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d102      	bne.n	8003e68 <chk_lock+0x80>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d101      	bne.n	8003e6c <chk_lock+0x84>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e010      	b.n	8003e8e <chk_lock+0xa6>
 8003e6c:	2312      	movs	r3, #18
 8003e6e:	e00e      	b.n	8003e8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d108      	bne.n	8003e88 <chk_lock+0xa0>
 8003e76:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <chk_lock+0xb0>)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	4413      	add	r3, r2
 8003e7e:	330c      	adds	r3, #12
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e86:	d101      	bne.n	8003e8c <chk_lock+0xa4>
 8003e88:	2310      	movs	r3, #16
 8003e8a:	e000      	b.n	8003e8e <chk_lock+0xa6>
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	200025e4 	.word	0x200025e4

08003e9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	e002      	b.n	8003eae <enq_lock+0x12>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d806      	bhi.n	8003ec2 <enq_lock+0x26>
 8003eb4:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <enq_lock+0x3c>)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	4413      	add	r3, r2
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f2      	bne.n	8003ea8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	200025e4 	.word	0x200025e4

08003edc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	e01f      	b.n	8003f2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003eec:	4a41      	ldr	r2, [pc, #260]	; (8003ff4 <inc_lock+0x118>)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	4413      	add	r3, r2
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d113      	bne.n	8003f26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003efe:	4a3d      	ldr	r2, [pc, #244]	; (8003ff4 <inc_lock+0x118>)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	4413      	add	r3, r2
 8003f06:	3304      	adds	r3, #4
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d109      	bne.n	8003f26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003f12:	4a38      	ldr	r2, [pc, #224]	; (8003ff4 <inc_lock+0x118>)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	4413      	add	r3, r2
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d006      	beq.n	8003f34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d9dc      	bls.n	8003eec <inc_lock+0x10>
 8003f32:	e000      	b.n	8003f36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003f34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d132      	bne.n	8003fa2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	e002      	b.n	8003f48 <inc_lock+0x6c>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3301      	adds	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d806      	bhi.n	8003f5c <inc_lock+0x80>
 8003f4e:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <inc_lock+0x118>)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	4413      	add	r3, r2
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f2      	bne.n	8003f42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d101      	bne.n	8003f66 <inc_lock+0x8a>
 8003f62:	2300      	movs	r3, #0
 8003f64:	e040      	b.n	8003fe8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4922      	ldr	r1, [pc, #136]	; (8003ff4 <inc_lock+0x118>)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	440b      	add	r3, r1
 8003f72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	491e      	ldr	r1, [pc, #120]	; (8003ff4 <inc_lock+0x118>)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	440b      	add	r3, r1
 8003f80:	3304      	adds	r3, #4
 8003f82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	491a      	ldr	r1, [pc, #104]	; (8003ff4 <inc_lock+0x118>)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	440b      	add	r3, r1
 8003f90:	3308      	adds	r3, #8
 8003f92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003f94:	4a17      	ldr	r2, [pc, #92]	; (8003ff4 <inc_lock+0x118>)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	4413      	add	r3, r2
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <inc_lock+0xe0>
 8003fa8:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <inc_lock+0x118>)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	4413      	add	r3, r2
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <inc_lock+0xe0>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e015      	b.n	8003fe8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d108      	bne.n	8003fd4 <inc_lock+0xf8>
 8003fc2:	4a0c      	ldr	r2, [pc, #48]	; (8003ff4 <inc_lock+0x118>)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	4413      	add	r3, r2
 8003fca:	330c      	adds	r3, #12
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	e001      	b.n	8003fd8 <inc_lock+0xfc>
 8003fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd8:	4906      	ldr	r1, [pc, #24]	; (8003ff4 <inc_lock+0x118>)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	440b      	add	r3, r1
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3301      	adds	r3, #1
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	200025e4 	.word	0x200025e4

08003ff8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3b01      	subs	r3, #1
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d825      	bhi.n	8004058 <dec_lock+0x60>
		n = Files[i].ctr;
 800400c:	4a16      	ldr	r2, [pc, #88]	; (8004068 <dec_lock+0x70>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	4413      	add	r3, r2
 8004014:	330c      	adds	r3, #12
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800401a:	89fb      	ldrh	r3, [r7, #14]
 800401c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004020:	d101      	bne.n	8004026 <dec_lock+0x2e>
 8004022:	2300      	movs	r3, #0
 8004024:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004026:	89fb      	ldrh	r3, [r7, #14]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <dec_lock+0x3a>
 800402c:	89fb      	ldrh	r3, [r7, #14]
 800402e:	3b01      	subs	r3, #1
 8004030:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004032:	4a0d      	ldr	r2, [pc, #52]	; (8004068 <dec_lock+0x70>)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	4413      	add	r3, r2
 800403a:	330c      	adds	r3, #12
 800403c:	89fa      	ldrh	r2, [r7, #14]
 800403e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004040:	89fb      	ldrh	r3, [r7, #14]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d105      	bne.n	8004052 <dec_lock+0x5a>
 8004046:	4a08      	ldr	r2, [pc, #32]	; (8004068 <dec_lock+0x70>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	4413      	add	r3, r2
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	737b      	strb	r3, [r7, #13]
 8004056:	e001      	b.n	800405c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004058:	2302      	movs	r3, #2
 800405a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800405c:	7b7b      	ldrb	r3, [r7, #13]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr
 8004068:	200025e4 	.word	0x200025e4

0800406c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e010      	b.n	800409c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800407a:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <clear_lock+0x44>)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	4413      	add	r3, r2
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	429a      	cmp	r2, r3
 8004088:	d105      	bne.n	8004096 <clear_lock+0x2a>
 800408a:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <clear_lock+0x44>)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	4413      	add	r3, r2
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3301      	adds	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d9eb      	bls.n	800407a <clear_lock+0xe>
	}
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	200025e4 	.word	0x200025e4

080040b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	78db      	ldrb	r3, [r3, #3]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d034      	beq.n	8004132 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	7858      	ldrb	r0, [r3, #1]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80040d8:	2301      	movs	r3, #1
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	f7ff fd4e 	bl	8003b7c <disk_write>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <sync_window+0x38>
			res = FR_DISK_ERR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
 80040ea:	e022      	b.n	8004132 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	1ad2      	subs	r2, r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d217      	bcs.n	8004132 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	789b      	ldrb	r3, [r3, #2]
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	e010      	b.n	800412c <sync_window+0x78>
					wsect += fs->fsize;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4413      	add	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	7858      	ldrb	r0, [r3, #1]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800411e:	2301      	movs	r3, #1
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	f7ff fd2b 	bl	8003b7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	3b01      	subs	r3, #1
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d8eb      	bhi.n	800410a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d01b      	beq.n	800418c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff ffad 	bl	80040b4 <sync_window>
 800415a:	4603      	mov	r3, r0
 800415c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d113      	bne.n	800418c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7858      	ldrb	r0, [r3, #1]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800416e:	2301      	movs	r3, #1
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	f7ff fce3 	bl	8003b3c <disk_read>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800417c:	f04f 33ff 	mov.w	r3, #4294967295
 8004180:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff87 	bl	80040b4 <sync_window>
 80041a6:	4603      	mov	r3, r0
 80041a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d159      	bne.n	8004264 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d149      	bne.n	800424c <sync_fs+0xb4>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	791b      	ldrb	r3, [r3, #4]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d145      	bne.n	800424c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	899b      	ldrh	r3, [r3, #12]
 80041ca:	461a      	mov	r2, r3
 80041cc:	2100      	movs	r1, #0
 80041ce:	f7ff fdb1 	bl	8003d34 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3338      	adds	r3, #56	; 0x38
 80041d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80041da:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fd43 	bl	8003c6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3338      	adds	r3, #56	; 0x38
 80041e8:	4921      	ldr	r1, [pc, #132]	; (8004270 <sync_fs+0xd8>)
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fd57 	bl	8003c9e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3338      	adds	r3, #56	; 0x38
 80041f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80041f8:	491e      	ldr	r1, [pc, #120]	; (8004274 <sync_fs+0xdc>)
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fd4f 	bl	8003c9e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3338      	adds	r3, #56	; 0x38
 8004204:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f7ff fd45 	bl	8003c9e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3338      	adds	r3, #56	; 0x38
 8004218:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f7ff fd3b 	bl	8003c9e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	7858      	ldrb	r0, [r3, #1]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004240:	2301      	movs	r3, #1
 8004242:	f7ff fc9b 	bl	8003b7c <disk_write>
			fs->fsi_flag = 0;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	785b      	ldrb	r3, [r3, #1]
 8004250:	2200      	movs	r2, #0
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fcb1 	bl	8003bbc <disk_ioctl>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <sync_fs+0xcc>
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004264:	7bfb      	ldrb	r3, [r7, #15]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	41615252 	.word	0x41615252
 8004274:	61417272 	.word	0x61417272

08004278 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	3b02      	subs	r3, #2
 8004286:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	3b02      	subs	r3, #2
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d301      	bcc.n	8004298 <clust2sect+0x20>
 8004294:	2300      	movs	r3, #0
 8004296:	e008      	b.n	80042aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	895b      	ldrh	r3, [r3, #10]
 800429c:	461a      	mov	r2, r3
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	fb03 f202 	mul.w	r2, r3, r2
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	4413      	add	r3, r2
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d904      	bls.n	80042d4 <get_fat+0x20>
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d302      	bcc.n	80042da <get_fat+0x26>
		val = 1;	/* Internal error */
 80042d4:	2301      	movs	r3, #1
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e0bb      	b.n	8004452 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80042da:	f04f 33ff 	mov.w	r3, #4294967295
 80042de:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	f000 8083 	beq.w	80043f0 <get_fat+0x13c>
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	f300 80a7 	bgt.w	800443e <get_fat+0x18a>
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d002      	beq.n	80042fa <get_fat+0x46>
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d056      	beq.n	80043a6 <get_fat+0xf2>
 80042f8:	e0a1      	b.n	800443e <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4413      	add	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	899b      	ldrh	r3, [r3, #12]
 8004310:	4619      	mov	r1, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	fbb3 f3f1 	udiv	r3, r3, r1
 8004318:	4413      	add	r3, r2
 800431a:	4619      	mov	r1, r3
 800431c:	6938      	ldr	r0, [r7, #16]
 800431e:	f7ff ff0d 	bl	800413c <move_window>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	f040 808d 	bne.w	8004444 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	60fa      	str	r2, [r7, #12]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	8992      	ldrh	r2, [r2, #12]
 8004334:	fbb3 f1f2 	udiv	r1, r3, r2
 8004338:	fb01 f202 	mul.w	r2, r1, r2
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4413      	add	r3, r2
 8004342:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004346:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	899b      	ldrh	r3, [r3, #12]
 8004350:	4619      	mov	r1, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	fbb3 f3f1 	udiv	r3, r3, r1
 8004358:	4413      	add	r3, r2
 800435a:	4619      	mov	r1, r3
 800435c:	6938      	ldr	r0, [r7, #16]
 800435e:	f7ff feed 	bl	800413c <move_window>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d16f      	bne.n	8004448 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	899b      	ldrh	r3, [r3, #12]
 800436c:	461a      	mov	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	fbb3 f1f2 	udiv	r1, r3, r2
 8004374:	fb01 f202 	mul.w	r2, r1, r2
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	461a      	mov	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4313      	orrs	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <get_fat+0xe8>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	e002      	b.n	80043a2 <get_fat+0xee>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a2:	617b      	str	r3, [r7, #20]
			break;
 80043a4:	e055      	b.n	8004452 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	899b      	ldrh	r3, [r3, #12]
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	4619      	mov	r1, r3
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ba:	4413      	add	r3, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	6938      	ldr	r0, [r7, #16]
 80043c0:	f7ff febc 	bl	800413c <move_window>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d140      	bne.n	800444c <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	8992      	ldrh	r2, [r2, #12]
 80043d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80043dc:	fb00 f202 	mul.w	r2, r0, r2
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	440b      	add	r3, r1
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fc07 	bl	8003bf8 <ld_word>
 80043ea:	4603      	mov	r3, r0
 80043ec:	617b      	str	r3, [r7, #20]
			break;
 80043ee:	e030      	b.n	8004452 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	899b      	ldrh	r3, [r3, #12]
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	4619      	mov	r1, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	fbb3 f3f1 	udiv	r3, r3, r1
 8004404:	4413      	add	r3, r2
 8004406:	4619      	mov	r1, r3
 8004408:	6938      	ldr	r0, [r7, #16]
 800440a:	f7ff fe97 	bl	800413c <move_window>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d11d      	bne.n	8004450 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	8992      	ldrh	r2, [r2, #12]
 8004422:	fbb3 f0f2 	udiv	r0, r3, r2
 8004426:	fb00 f202 	mul.w	r2, r0, r2
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	440b      	add	r3, r1
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fbf9 	bl	8003c26 <ld_dword>
 8004434:	4603      	mov	r3, r0
 8004436:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800443a:	617b      	str	r3, [r7, #20]
			break;
 800443c:	e009      	b.n	8004452 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800443e:	2301      	movs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	e006      	b.n	8004452 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004444:	bf00      	nop
 8004446:	e004      	b.n	8004452 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004448:	bf00      	nop
 800444a:	e002      	b.n	8004452 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800444c:	bf00      	nop
 800444e:	e000      	b.n	8004452 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004450:	bf00      	nop
		}
	}

	return val;
 8004452:	697b      	ldr	r3, [r7, #20]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b089      	sub	sp, #36	; 0x24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004468:	2302      	movs	r3, #2
 800446a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b01      	cmp	r3, #1
 8004470:	f240 8102 	bls.w	8004678 <put_fat+0x21c>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	f080 80fc 	bcs.w	8004678 <put_fat+0x21c>
		switch (fs->fs_type) {
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b03      	cmp	r3, #3
 8004486:	f000 80b6 	beq.w	80045f6 <put_fat+0x19a>
 800448a:	2b03      	cmp	r3, #3
 800448c:	f300 80fd 	bgt.w	800468a <put_fat+0x22e>
 8004490:	2b01      	cmp	r3, #1
 8004492:	d003      	beq.n	800449c <put_fat+0x40>
 8004494:	2b02      	cmp	r3, #2
 8004496:	f000 8083 	beq.w	80045a0 <put_fat+0x144>
 800449a:	e0f6      	b.n	800468a <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4413      	add	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	899b      	ldrh	r3, [r3, #12]
 80044b2:	4619      	mov	r1, r3
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80044ba:	4413      	add	r3, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f7ff fe3c 	bl	800413c <move_window>
 80044c4:	4603      	mov	r3, r0
 80044c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80044c8:	7ffb      	ldrb	r3, [r7, #31]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 80d6 	bne.w	800467c <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	61ba      	str	r2, [r7, #24]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	8992      	ldrh	r2, [r2, #12]
 80044e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80044e4:	fb00 f202 	mul.w	r2, r0, r2
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	440b      	add	r3, r1
 80044ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <put_fat+0xb8>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	b25b      	sxtb	r3, r3
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	b25a      	sxtb	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	b25b      	sxtb	r3, r3
 800450c:	4313      	orrs	r3, r2
 800450e:	b25b      	sxtb	r3, r3
 8004510:	b2db      	uxtb	r3, r3
 8004512:	e001      	b.n	8004518 <put_fat+0xbc>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	899b      	ldrh	r3, [r3, #12]
 800452a:	4619      	mov	r1, r3
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004532:	4413      	add	r3, r2
 8004534:	4619      	mov	r1, r3
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7ff fe00 	bl	800413c <move_window>
 800453c:	4603      	mov	r3, r0
 800453e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004540:	7ffb      	ldrb	r3, [r7, #31]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f040 809c 	bne.w	8004680 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	899b      	ldrh	r3, [r3, #12]
 8004552:	461a      	mov	r2, r3
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	fbb3 f0f2 	udiv	r0, r3, r2
 800455a:	fb00 f202 	mul.w	r2, r0, r2
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	440b      	add	r3, r1
 8004562:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <put_fat+0x11a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	b2db      	uxtb	r3, r3
 8004574:	e00e      	b.n	8004594 <put_fat+0x138>
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	b25b      	sxtb	r3, r3
 800457c:	f023 030f 	bic.w	r3, r3, #15
 8004580:	b25a      	sxtb	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	b25b      	sxtb	r3, r3
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	b25b      	sxtb	r3, r3
 800458e:	4313      	orrs	r3, r2
 8004590:	b25b      	sxtb	r3, r3
 8004592:	b2db      	uxtb	r3, r3
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	70da      	strb	r2, [r3, #3]
			break;
 800459e:	e074      	b.n	800468a <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	899b      	ldrh	r3, [r3, #12]
 80045a8:	085b      	lsrs	r3, r3, #1
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	4619      	mov	r1, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80045b4:	4413      	add	r3, r2
 80045b6:	4619      	mov	r1, r3
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7ff fdbf 	bl	800413c <move_window>
 80045be:	4603      	mov	r3, r0
 80045c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045c2:	7ffb      	ldrb	r3, [r7, #31]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d15d      	bne.n	8004684 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	8992      	ldrh	r2, [r2, #12]
 80045d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80045da:	fb00 f202 	mul.w	r2, r0, r2
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	440b      	add	r3, r1
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	b292      	uxth	r2, r2
 80045e6:	4611      	mov	r1, r2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fb3e 	bl	8003c6a <st_word>
			fs->wflag = 1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	70da      	strb	r2, [r3, #3]
			break;
 80045f4:	e049      	b.n	800468a <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	899b      	ldrh	r3, [r3, #12]
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	b29b      	uxth	r3, r3
 8004602:	4619      	mov	r1, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	fbb3 f3f1 	udiv	r3, r3, r1
 800460a:	4413      	add	r3, r2
 800460c:	4619      	mov	r1, r3
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7ff fd94 	bl	800413c <move_window>
 8004614:	4603      	mov	r3, r0
 8004616:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004618:	7ffb      	ldrb	r3, [r7, #31]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d134      	bne.n	8004688 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	8992      	ldrh	r2, [r2, #12]
 8004632:	fbb3 f0f2 	udiv	r0, r3, r2
 8004636:	fb00 f202 	mul.w	r2, r0, r2
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	440b      	add	r3, r1
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff faf1 	bl	8003c26 <ld_dword>
 8004644:	4603      	mov	r3, r0
 8004646:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800464a:	4323      	orrs	r3, r4
 800464c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	8992      	ldrh	r2, [r2, #12]
 800465c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004660:	fb00 f202 	mul.w	r2, r0, r2
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	440b      	add	r3, r1
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fb17 	bl	8003c9e <st_dword>
			fs->wflag = 1;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	70da      	strb	r2, [r3, #3]
			break;
 8004676:	e008      	b.n	800468a <put_fat+0x22e>
		}
	}
 8004678:	bf00      	nop
 800467a:	e006      	b.n	800468a <put_fat+0x22e>
			if (res != FR_OK) break;
 800467c:	bf00      	nop
 800467e:	e004      	b.n	800468a <put_fat+0x22e>
			if (res != FR_OK) break;
 8004680:	bf00      	nop
 8004682:	e002      	b.n	800468a <put_fat+0x22e>
			if (res != FR_OK) break;
 8004684:	bf00      	nop
 8004686:	e000      	b.n	800468a <put_fat+0x22e>
			if (res != FR_OK) break;
 8004688:	bf00      	nop
	return res;
 800468a:	7ffb      	ldrb	r3, [r7, #31]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3724      	adds	r7, #36	; 0x24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd90      	pop	{r4, r7, pc}

08004694 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d904      	bls.n	80046ba <remove_chain+0x26>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d301      	bcc.n	80046be <remove_chain+0x2a>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e04b      	b.n	8004756 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00c      	beq.n	80046de <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80046c4:	f04f 32ff 	mov.w	r2, #4294967295
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	69b8      	ldr	r0, [r7, #24]
 80046cc:	f7ff fec6 	bl	800445c <put_fat>
 80046d0:	4603      	mov	r3, r0
 80046d2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80046d4:	7ffb      	ldrb	r3, [r7, #31]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <remove_chain+0x4a>
 80046da:	7ffb      	ldrb	r3, [r7, #31]
 80046dc:	e03b      	b.n	8004756 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff fde7 	bl	80042b4 <get_fat>
 80046e6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d031      	beq.n	8004752 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <remove_chain+0x64>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e02e      	b.n	8004756 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d101      	bne.n	8004704 <remove_chain+0x70>
 8004700:	2301      	movs	r3, #1
 8004702:	e028      	b.n	8004756 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004704:	2200      	movs	r2, #0
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	69b8      	ldr	r0, [r7, #24]
 800470a:	f7ff fea7 	bl	800445c <put_fat>
 800470e:	4603      	mov	r3, r0
 8004710:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004712:	7ffb      	ldrb	r3, [r7, #31]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <remove_chain+0x88>
 8004718:	7ffb      	ldrb	r3, [r7, #31]
 800471a:	e01c      	b.n	8004756 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	3b02      	subs	r3, #2
 8004726:	429a      	cmp	r2, r3
 8004728:	d20b      	bcs.n	8004742 <remove_chain+0xae>
			fs->free_clst++;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	791b      	ldrb	r3, [r3, #4]
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	b2da      	uxtb	r2, r3
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	d3c6      	bcc.n	80046de <remove_chain+0x4a>
 8004750:	e000      	b.n	8004754 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004752:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b088      	sub	sp, #32
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10d      	bne.n	8004790 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <create_chain+0x2c>
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	429a      	cmp	r2, r3
 8004788:	d31b      	bcc.n	80047c2 <create_chain+0x64>
 800478a:	2301      	movs	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	e018      	b.n	80047c2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004790:	6839      	ldr	r1, [r7, #0]
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff fd8e 	bl	80042b4 <get_fat>
 8004798:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d801      	bhi.n	80047a4 <create_chain+0x46>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e070      	b.n	8004886 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d101      	bne.n	80047b0 <create_chain+0x52>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	e06a      	b.n	8004886 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d201      	bcs.n	80047be <create_chain+0x60>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	e063      	b.n	8004886 <create_chain+0x128>
		scl = clst;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	3301      	adds	r3, #1
 80047ca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d307      	bcc.n	80047e6 <create_chain+0x88>
				ncl = 2;
 80047d6:	2302      	movs	r3, #2
 80047d8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d901      	bls.n	80047e6 <create_chain+0x88>
 80047e2:	2300      	movs	r3, #0
 80047e4:	e04f      	b.n	8004886 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80047e6:	69f9      	ldr	r1, [r7, #28]
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff fd63 	bl	80042b4 <get_fat>
 80047ee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00e      	beq.n	8004814 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d003      	beq.n	8004804 <create_chain+0xa6>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d101      	bne.n	8004808 <create_chain+0xaa>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	e03e      	b.n	8004886 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	429a      	cmp	r2, r3
 800480e:	d1da      	bne.n	80047c6 <create_chain+0x68>
 8004810:	2300      	movs	r3, #0
 8004812:	e038      	b.n	8004886 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004814:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004816:	f04f 32ff 	mov.w	r2, #4294967295
 800481a:	69f9      	ldr	r1, [r7, #28]
 800481c:	6938      	ldr	r0, [r7, #16]
 800481e:	f7ff fe1d 	bl	800445c <put_fat>
 8004822:	4603      	mov	r3, r0
 8004824:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004826:	7dfb      	ldrb	r3, [r7, #23]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <create_chain+0xe2>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d006      	beq.n	8004840 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	6839      	ldr	r1, [r7, #0]
 8004836:	6938      	ldr	r0, [r7, #16]
 8004838:	f7ff fe10 	bl	800445c <put_fat>
 800483c:	4603      	mov	r3, r0
 800483e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d116      	bne.n	8004874 <create_chain+0x116>
		fs->last_clst = ncl;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	3b02      	subs	r3, #2
 8004856:	429a      	cmp	r2, r3
 8004858:	d804      	bhi.n	8004864 <create_chain+0x106>
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	1e5a      	subs	r2, r3, #1
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	791b      	ldrb	r3, [r3, #4]
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	b2da      	uxtb	r2, r3
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	711a      	strb	r2, [r3, #4]
 8004872:	e007      	b.n	8004884 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d102      	bne.n	8004880 <create_chain+0x122>
 800487a:	f04f 33ff 	mov.w	r3, #4294967295
 800487e:	e000      	b.n	8004882 <create_chain+0x124>
 8004880:	2301      	movs	r3, #1
 8004882:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004884:	69fb      	ldr	r3, [r7, #28]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800488e:	b480      	push	{r7}
 8004890:	b087      	sub	sp, #28
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	3304      	adds	r3, #4
 80048a4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	899b      	ldrh	r3, [r3, #12]
 80048aa:	461a      	mov	r2, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	8952      	ldrh	r2, [r2, #10]
 80048b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1d1a      	adds	r2, r3, #4
 80048c0:	613a      	str	r2, [r7, #16]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <clmt_clust+0x42>
 80048cc:	2300      	movs	r3, #0
 80048ce:	e010      	b.n	80048f2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d307      	bcc.n	80048e8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	3304      	adds	r3, #4
 80048e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80048e6:	e7e9      	b.n	80048bc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80048e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	4413      	add	r3, r2
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004912:	d204      	bcs.n	800491e <dir_sdi+0x22>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <dir_sdi+0x26>
		return FR_INT_ERR;
 800491e:	2302      	movs	r3, #2
 8004920:	e071      	b.n	8004a06 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <dir_sdi+0x46>
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d902      	bls.n	8004942 <dir_sdi+0x46>
		clst = fs->dirbase;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10c      	bne.n	8004962 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	8912      	ldrh	r2, [r2, #8]
 8004950:	4293      	cmp	r3, r2
 8004952:	d301      	bcc.n	8004958 <dir_sdi+0x5c>
 8004954:	2302      	movs	r3, #2
 8004956:	e056      	b.n	8004a06 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	61da      	str	r2, [r3, #28]
 8004960:	e02d      	b.n	80049be <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	895b      	ldrh	r3, [r3, #10]
 8004966:	461a      	mov	r2, r3
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	899b      	ldrh	r3, [r3, #12]
 800496c:	fb02 f303 	mul.w	r3, r2, r3
 8004970:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004972:	e019      	b.n	80049a8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6979      	ldr	r1, [r7, #20]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fc9b 	bl	80042b4 <get_fat>
 800497e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d101      	bne.n	800498c <dir_sdi+0x90>
 8004988:	2301      	movs	r3, #1
 800498a:	e03c      	b.n	8004a06 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d904      	bls.n	800499c <dir_sdi+0xa0>
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	429a      	cmp	r2, r3
 800499a:	d301      	bcc.n	80049a0 <dir_sdi+0xa4>
 800499c:	2302      	movs	r3, #2
 800499e:	e032      	b.n	8004a06 <dir_sdi+0x10a>
			ofs -= csz;
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d2e1      	bcs.n	8004974 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80049b0:	6979      	ldr	r1, [r7, #20]
 80049b2:	6938      	ldr	r0, [r7, #16]
 80049b4:	f7ff fc60 	bl	8004278 <clust2sect>
 80049b8:	4602      	mov	r2, r0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <dir_sdi+0xd4>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e01a      	b.n	8004a06 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	899b      	ldrh	r3, [r3, #12]
 80049d8:	4619      	mov	r1, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	899b      	ldrh	r3, [r3, #12]
 80049f0:	461a      	mov	r2, r3
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80049f8:	fb00 f202 	mul.w	r2, r0, r2
 80049fc:	1a9b      	subs	r3, r3, r2
 80049fe:	18ca      	adds	r2, r1, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	3320      	adds	r3, #32
 8004a24:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <dir_next+0x28>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a34:	d301      	bcc.n	8004a3a <dir_next+0x2c>
 8004a36:	2304      	movs	r3, #4
 8004a38:	e0bb      	b.n	8004bb2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	899b      	ldrh	r3, [r3, #12]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a46:	fb01 f202 	mul.w	r2, r1, r2
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f040 809d 	bne.w	8004b8c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	8912      	ldrh	r2, [r2, #8]
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	f0c0 808d 	bcc.w	8004b8c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	61da      	str	r2, [r3, #28]
 8004a78:	2304      	movs	r3, #4
 8004a7a:	e09a      	b.n	8004bb2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	899b      	ldrh	r3, [r3, #12]
 8004a80:	461a      	mov	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	8952      	ldrh	r2, [r2, #10]
 8004a8c:	3a01      	subs	r2, #1
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d17b      	bne.n	8004b8c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7ff fc09 	bl	80042b4 <get_fat>
 8004aa2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d801      	bhi.n	8004aae <dir_next+0xa0>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e081      	b.n	8004bb2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d101      	bne.n	8004aba <dir_next+0xac>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e07b      	b.n	8004bb2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d359      	bcc.n	8004b78 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	61da      	str	r2, [r3, #28]
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	e06e      	b.n	8004bb2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7ff fe3e 	bl	800475e <create_chain>
 8004ae2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <dir_next+0xe0>
 8004aea:	2307      	movs	r3, #7
 8004aec:	e061      	b.n	8004bb2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <dir_next+0xea>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e05c      	b.n	8004bb2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afe:	d101      	bne.n	8004b04 <dir_next+0xf6>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e056      	b.n	8004bb2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f7ff fad5 	bl	80040b4 <sync_window>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <dir_next+0x106>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e04e      	b.n	8004bb2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	899b      	ldrh	r3, [r3, #12]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	2100      	movs	r1, #0
 8004b22:	f7ff f907 	bl	8003d34 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004b26:	2300      	movs	r3, #0
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	6979      	ldr	r1, [r7, #20]
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7ff fba3 	bl	8004278 <clust2sect>
 8004b32:	4602      	mov	r2, r0
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	635a      	str	r2, [r3, #52]	; 0x34
 8004b38:	e012      	b.n	8004b60 <dir_next+0x152>
						fs->wflag = 1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff fab7 	bl	80040b4 <sync_window>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <dir_next+0x142>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e030      	b.n	8004bb2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	3301      	adds	r3, #1
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	635a      	str	r2, [r3, #52]	; 0x34
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	895b      	ldrh	r3, [r3, #10]
 8004b64:	461a      	mov	r2, r3
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d3e6      	bcc.n	8004b3a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad2      	subs	r2, r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004b7e:	6979      	ldr	r1, [r7, #20]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff fb79 	bl	8004278 <clust2sect>
 8004b86:	4602      	mov	r2, r0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	899b      	ldrh	r3, [r3, #12]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ba4:	fb00 f202 	mul.w	r2, r0, r2
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	18ca      	adds	r2, r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b086      	sub	sp, #24
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004bca:	2100      	movs	r1, #0
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff fe95 	bl	80048fc <dir_sdi>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d12b      	bne.n	8004c34 <dir_alloc+0x7a>
		n = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	4619      	mov	r1, r3
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff faa8 	bl	800413c <move_window>
 8004bec:	4603      	mov	r3, r0
 8004bee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11d      	bne.n	8004c32 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2be5      	cmp	r3, #229	; 0xe5
 8004bfe:	d004      	beq.n	8004c0a <dir_alloc+0x50>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d107      	bne.n	8004c1a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d102      	bne.n	8004c1e <dir_alloc+0x64>
 8004c18:	e00c      	b.n	8004c34 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004c1e:	2101      	movs	r1, #1
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff fef4 	bl	8004a0e <dir_next>
 8004c26:	4603      	mov	r3, r0
 8004c28:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0d7      	beq.n	8004be0 <dir_alloc+0x26>
 8004c30:	e000      	b.n	8004c34 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004c32:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d101      	bne.n	8004c3e <dir_alloc+0x84>
 8004c3a:	2307      	movs	r3, #7
 8004c3c:	75fb      	strb	r3, [r7, #23]
	return res;
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	331a      	adds	r3, #26
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe ffce 	bl	8003bf8 <ld_word>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d109      	bne.n	8004c7c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	3314      	adds	r3, #20
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fe ffc3 	bl	8003bf8 <ld_word>
 8004c72:	4603      	mov	r3, r0
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	331a      	adds	r3, #26
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	b292      	uxth	r2, r2
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe ffe4 	bl	8003c6a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d109      	bne.n	8004cbe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f103 0214 	add.w	r2, r3, #20
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4610      	mov	r0, r2
 8004cba:	f7fe ffd6 	bl	8003c6a <st_word>
	}
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	331a      	adds	r3, #26
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe ff8e 	bl	8003bf8 <ld_word>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <cmp_lfn+0x1e>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e059      	b.n	8004d9a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cee:	1e5a      	subs	r2, r3, #1
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	81fb      	strh	r3, [r7, #14]
 8004d00:	2300      	movs	r3, #0
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	e033      	b.n	8004d6e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004d06:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <cmp_lfn+0xdc>)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	4413      	add	r3, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fe ff6f 	bl	8003bf8 <ld_word>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004d1e:	89fb      	ldrh	r3, [r7, #14]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01a      	beq.n	8004d5a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2bfe      	cmp	r3, #254	; 0xfe
 8004d28:	d812      	bhi.n	8004d50 <cmp_lfn+0x88>
 8004d2a:	89bb      	ldrh	r3, [r7, #12]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 ff83 	bl	8006c38 <ff_wtoupper>
 8004d32:	4603      	mov	r3, r0
 8004d34:	461c      	mov	r4, r3
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	617a      	str	r2, [r7, #20]
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 ff77 	bl	8006c38 <ff_wtoupper>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	429c      	cmp	r4, r3
 8004d4e:	d001      	beq.n	8004d54 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004d50:	2300      	movs	r3, #0
 8004d52:	e022      	b.n	8004d9a <cmp_lfn+0xd2>
			}
			wc = uc;
 8004d54:	89bb      	ldrh	r3, [r7, #12]
 8004d56:	81fb      	strh	r3, [r7, #14]
 8004d58:	e006      	b.n	8004d68 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004d5a:	89bb      	ldrh	r3, [r7, #12]
 8004d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d001      	beq.n	8004d68 <cmp_lfn+0xa0>
 8004d64:	2300      	movs	r3, #0
 8004d66:	e018      	b.n	8004d9a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	d9c8      	bls.n	8004d06 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <cmp_lfn+0xd0>
 8004d80:	89fb      	ldrh	r3, [r7, #14]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <cmp_lfn+0xd0>
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <cmp_lfn+0xd0>
 8004d94:	2300      	movs	r3, #0
 8004d96:	e000      	b.n	8004d9a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004d98:	2301      	movs	r3, #1
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd90      	pop	{r4, r7, pc}
 8004da2:	bf00      	nop
 8004da4:	080078e4 	.word	0x080078e4

08004da8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	4611      	mov	r1, r2
 8004db4:	461a      	mov	r2, r3
 8004db6:	460b      	mov	r3, r1
 8004db8:	71fb      	strb	r3, [r7, #7]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	330d      	adds	r3, #13
 8004dc2:	79ba      	ldrb	r2, [r7, #6]
 8004dc4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	330b      	adds	r3, #11
 8004dca:	220f      	movs	r2, #15
 8004dcc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	331a      	adds	r3, #26
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fe ff44 	bl	8003c6a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	1e5a      	subs	r2, r3, #1
 8004de6:	4613      	mov	r3, r2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	82fb      	strh	r3, [r7, #22]
 8004df6:	2300      	movs	r3, #0
 8004df8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004dfa:	8afb      	ldrh	r3, [r7, #22]
 8004dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d007      	beq.n	8004e14 <put_lfn+0x6c>
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	61fa      	str	r2, [r7, #28]
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004e14:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <put_lfn+0xcc>)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	4413      	add	r3, r2
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4413      	add	r3, r2
 8004e22:	8afa      	ldrh	r2, [r7, #22]
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fe ff1f 	bl	8003c6a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004e2c:	8afb      	ldrh	r3, [r7, #22]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <put_lfn+0x90>
 8004e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e36:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	d9da      	bls.n	8004dfa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004e44:	8afb      	ldrh	r3, [r7, #22]
 8004e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d006      	beq.n	8004e5c <put_lfn+0xb4>
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d103      	bne.n	8004e64 <put_lfn+0xbc>
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e62:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	79fa      	ldrb	r2, [r7, #7]
 8004e68:	701a      	strb	r2, [r3, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	080078e4 	.word	0x080078e4

08004e78 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08c      	sub	sp, #48	; 0x30
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004e86:	220b      	movs	r2, #11
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7fe ff32 	bl	8003cf4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	d92b      	bls.n	8004eee <gen_numname+0x76>
		sr = seq;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004e9a:	e022      	b.n	8004ee2 <gen_numname+0x6a>
			wc = *lfn++;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	1c9a      	adds	r2, r3, #2
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eaa:	e017      	b.n	8004edc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	005a      	lsls	r2, r3, #1
 8004eb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	4413      	add	r3, r2
 8004eb8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004eba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d005      	beq.n	8004ed6 <gen_numname+0x5e>
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004ed0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004ed4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	3301      	adds	r3, #1
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	2b0f      	cmp	r3, #15
 8004ee0:	d9e4      	bls.n	8004eac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1d8      	bne.n	8004e9c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004eee:	2307      	movs	r3, #7
 8004ef0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	3330      	adds	r3, #48	; 0x30
 8004efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004f02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f06:	2b39      	cmp	r3, #57	; 0x39
 8004f08:	d904      	bls.n	8004f14 <gen_numname+0x9c>
 8004f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f0e:	3307      	adds	r3, #7
 8004f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	1e5a      	subs	r2, r3, #1
 8004f18:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f1a:	3330      	adds	r3, #48	; 0x30
 8004f1c:	443b      	add	r3, r7
 8004f1e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004f22:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	091b      	lsrs	r3, r3, #4
 8004f2a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1df      	bne.n	8004ef2 <gen_numname+0x7a>
	ns[i] = '~';
 8004f32:	f107 0214 	add.w	r2, r7, #20
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	4413      	add	r3, r2
 8004f3a:	227e      	movs	r2, #126	; 0x7e
 8004f3c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004f3e:	2300      	movs	r3, #0
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	e002      	b.n	8004f4a <gen_numname+0xd2>
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	3301      	adds	r3, #1
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d205      	bcs.n	8004f5e <gen_numname+0xe6>
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	4413      	add	r3, r2
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d1f2      	bne.n	8004f44 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	2b07      	cmp	r3, #7
 8004f62:	d807      	bhi.n	8004f74 <gen_numname+0xfc>
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f6a:	3330      	adds	r3, #48	; 0x30
 8004f6c:	443b      	add	r3, r7
 8004f6e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004f72:	e000      	b.n	8004f76 <gen_numname+0xfe>
 8004f74:	2120      	movs	r1, #32
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	627a      	str	r2, [r7, #36]	; 0x24
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	460a      	mov	r2, r1
 8004f82:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	2b07      	cmp	r3, #7
 8004f88:	d9e9      	bls.n	8004f5e <gen_numname+0xe6>
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	3730      	adds	r7, #48	; 0x30
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004fa0:	230b      	movs	r3, #11
 8004fa2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	0852      	lsrs	r2, r2, #1
 8004faa:	01db      	lsls	r3, r3, #7
 8004fac:	4313      	orrs	r3, r2
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	1c59      	adds	r1, r3, #1
 8004fb4:	6079      	str	r1, [r7, #4]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	4413      	add	r3, r2
 8004fba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1ed      	bne.n	8004fa4 <sum_sfn+0x10>
	return sum;
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff fc89 	bl	80048fc <dir_sdi>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <dir_find+0x24>
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
 8004ff6:	e0a9      	b.n	800514c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004ff8:	23ff      	movs	r3, #255	; 0xff
 8004ffa:	753b      	strb	r3, [r7, #20]
 8004ffc:	7d3b      	ldrb	r3, [r7, #20]
 8004ffe:	757b      	strb	r3, [r7, #21]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f04f 32ff 	mov.w	r2, #4294967295
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	4619      	mov	r1, r3
 800500e:	6938      	ldr	r0, [r7, #16]
 8005010:	f7ff f894 	bl	800413c <move_window>
 8005014:	4603      	mov	r3, r0
 8005016:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f040 8090 	bne.w	8005140 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005028:	7dbb      	ldrb	r3, [r7, #22]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <dir_find+0x60>
 800502e:	2304      	movs	r3, #4
 8005030:	75fb      	strb	r3, [r7, #23]
 8005032:	e08a      	b.n	800514a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	330b      	adds	r3, #11
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005040:	73fb      	strb	r3, [r7, #15]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005048:	7dbb      	ldrb	r3, [r7, #22]
 800504a:	2be5      	cmp	r3, #229	; 0xe5
 800504c:	d007      	beq.n	800505e <dir_find+0x8a>
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <dir_find+0x98>
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b0f      	cmp	r3, #15
 800505c:	d006      	beq.n	800506c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800505e:	23ff      	movs	r3, #255	; 0xff
 8005060:	757b      	strb	r3, [r7, #21]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f04f 32ff 	mov.w	r2, #4294967295
 8005068:	631a      	str	r2, [r3, #48]	; 0x30
 800506a:	e05e      	b.n	800512a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b0f      	cmp	r3, #15
 8005070:	d136      	bne.n	80050e0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d154      	bne.n	800512a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005080:	7dbb      	ldrb	r3, [r7, #22]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00d      	beq.n	80050a6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	7b5b      	ldrb	r3, [r3, #13]
 8005090:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005092:	7dbb      	ldrb	r3, [r7, #22]
 8005094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005098:	75bb      	strb	r3, [r7, #22]
 800509a:	7dbb      	ldrb	r3, [r7, #22]
 800509c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695a      	ldr	r2, [r3, #20]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80050a6:	7dba      	ldrb	r2, [r7, #22]
 80050a8:	7d7b      	ldrb	r3, [r7, #21]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d115      	bne.n	80050da <dir_find+0x106>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	330d      	adds	r3, #13
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	7d3a      	ldrb	r2, [r7, #20]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d10e      	bne.n	80050da <dir_find+0x106>
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f7ff fdfe 	bl	8004cc8 <cmp_lfn>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <dir_find+0x106>
 80050d2:	7d7b      	ldrb	r3, [r7, #21]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	e000      	b.n	80050dc <dir_find+0x108>
 80050da:	23ff      	movs	r3, #255	; 0xff
 80050dc:	757b      	strb	r3, [r7, #21]
 80050de:	e024      	b.n	800512a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80050e0:	7d7b      	ldrb	r3, [r7, #21]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <dir_find+0x126>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff ff52 	bl	8004f94 <sum_sfn>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461a      	mov	r2, r3
 80050f4:	7d3b      	ldrb	r3, [r7, #20]
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d024      	beq.n	8005144 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <dir_find+0x14a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a18      	ldr	r0, [r3, #32]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3324      	adds	r3, #36	; 0x24
 8005110:	220b      	movs	r2, #11
 8005112:	4619      	mov	r1, r3
 8005114:	f7fe fe28 	bl	8003d68 <mem_cmp>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d014      	beq.n	8005148 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800511e:	23ff      	movs	r3, #255	; 0xff
 8005120:	757b      	strb	r3, [r7, #21]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f04f 32ff 	mov.w	r2, #4294967295
 8005128:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800512a:	2100      	movs	r1, #0
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7ff fc6e 	bl	8004a0e <dir_next>
 8005132:	4603      	mov	r3, r0
 8005134:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005136:	7dfb      	ldrb	r3, [r7, #23]
 8005138:	2b00      	cmp	r3, #0
 800513a:	f43f af65 	beq.w	8005008 <dir_find+0x34>
 800513e:	e004      	b.n	800514a <dir_find+0x176>
		if (res != FR_OK) break;
 8005140:	bf00      	nop
 8005142:	e002      	b.n	800514a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005144:	bf00      	nop
 8005146:	e000      	b.n	800514a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005148:	bf00      	nop

	return res;
 800514a:	7dfb      	ldrb	r3, [r7, #23]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08c      	sub	sp, #48	; 0x30
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005168:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <dir_register+0x20>
 8005170:	2306      	movs	r3, #6
 8005172:	e0e0      	b.n	8005336 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005174:	2300      	movs	r3, #0
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
 8005178:	e002      	b.n	8005180 <dir_register+0x2c>
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	3301      	adds	r3, #1
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	4413      	add	r3, r2
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1f4      	bne.n	800517a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005196:	f107 030c 	add.w	r3, r7, #12
 800519a:	220c      	movs	r2, #12
 800519c:	4618      	mov	r0, r3
 800519e:	f7fe fda9 	bl	8003cf4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d032      	beq.n	8005212 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2240      	movs	r2, #64	; 0x40
 80051b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80051b4:	2301      	movs	r3, #1
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b8:	e016      	b.n	80051e8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	f107 010c 	add.w	r1, r7, #12
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	f7ff fe55 	bl	8004e78 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff ff00 	bl	8004fd4 <dir_find>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80051da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	3301      	adds	r3, #1
 80051e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	2b63      	cmp	r3, #99	; 0x63
 80051ec:	d9e5      	bls.n	80051ba <dir_register+0x66>
 80051ee:	e000      	b.n	80051f2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80051f0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	2b64      	cmp	r3, #100	; 0x64
 80051f6:	d101      	bne.n	80051fc <dir_register+0xa8>
 80051f8:	2307      	movs	r3, #7
 80051fa:	e09c      	b.n	8005336 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80051fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005200:	2b04      	cmp	r3, #4
 8005202:	d002      	beq.n	800520a <dir_register+0xb6>
 8005204:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005208:	e095      	b.n	8005336 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800520a:	7dfa      	ldrb	r2, [r7, #23]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <dir_register+0xd8>
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	330c      	adds	r3, #12
 8005220:	4a47      	ldr	r2, [pc, #284]	; (8005340 <dir_register+0x1ec>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	089b      	lsrs	r3, r3, #2
 8005228:	3301      	adds	r3, #1
 800522a:	e000      	b.n	800522e <dir_register+0xda>
 800522c:	2301      	movs	r3, #1
 800522e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005230:	6a39      	ldr	r1, [r7, #32]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fcc1 	bl	8004bba <dir_alloc>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800523e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005242:	2b00      	cmp	r3, #0
 8005244:	d148      	bne.n	80052d8 <dir_register+0x184>
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	3b01      	subs	r3, #1
 800524a:	623b      	str	r3, [r7, #32]
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d042      	beq.n	80052d8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	015b      	lsls	r3, r3, #5
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff fb4c 	bl	80048fc <dir_sdi>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800526a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800526e:	2b00      	cmp	r3, #0
 8005270:	d132      	bne.n	80052d8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3324      	adds	r3, #36	; 0x24
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff fe8c 	bl	8004f94 <sum_sfn>
 800527c:	4603      	mov	r3, r0
 800527e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	4619      	mov	r1, r3
 8005286:	69f8      	ldr	r0, [r7, #28]
 8005288:	f7fe ff58 	bl	800413c <move_window>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005296:	2b00      	cmp	r3, #0
 8005298:	d11d      	bne.n	80052d6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	6918      	ldr	r0, [r3, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a19      	ldr	r1, [r3, #32]
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	7efb      	ldrb	r3, [r7, #27]
 80052a8:	f7ff fd7e 	bl	8004da8 <put_lfn>
				fs->wflag = 1;
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	2201      	movs	r2, #1
 80052b0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80052b2:	2100      	movs	r1, #0
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff fbaa 	bl	8004a0e <dir_next>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80052c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d107      	bne.n	80052d8 <dir_register+0x184>
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	623b      	str	r3, [r7, #32]
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1d5      	bne.n	8005280 <dir_register+0x12c>
 80052d4:	e000      	b.n	80052d8 <dir_register+0x184>
				if (res != FR_OK) break;
 80052d6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80052d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d128      	bne.n	8005332 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	4619      	mov	r1, r3
 80052e6:	69f8      	ldr	r0, [r7, #28]
 80052e8:	f7fe ff28 	bl	800413c <move_window>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80052f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d11b      	bne.n	8005332 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	2220      	movs	r2, #32
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe fd16 	bl	8003d34 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a18      	ldr	r0, [r3, #32]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3324      	adds	r3, #36	; 0x24
 8005310:	220b      	movs	r2, #11
 8005312:	4619      	mov	r1, r3
 8005314:	f7fe fcee 	bl	8003cf4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	330c      	adds	r3, #12
 8005324:	f002 0218 	and.w	r2, r2, #24
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2201      	movs	r2, #1
 8005330:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005336:	4618      	mov	r0, r3
 8005338:	3730      	adds	r7, #48	; 0x30
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	4ec4ec4f 	.word	0x4ec4ec4f

08005344 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	; 0x28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	61ba      	str	r2, [r7, #24]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4413      	add	r3, r2
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005374:	2b1f      	cmp	r3, #31
 8005376:	d940      	bls.n	80053fa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800537a:	2b2f      	cmp	r3, #47	; 0x2f
 800537c:	d006      	beq.n	800538c <create_name+0x48>
 800537e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005380:	2b5c      	cmp	r3, #92	; 0x5c
 8005382:	d110      	bne.n	80053a6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005384:	e002      	b.n	800538c <create_name+0x48>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	3301      	adds	r3, #1
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	4413      	add	r3, r2
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b2f      	cmp	r3, #47	; 0x2f
 8005396:	d0f6      	beq.n	8005386 <create_name+0x42>
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	4413      	add	r3, r2
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b5c      	cmp	r3, #92	; 0x5c
 80053a2:	d0f0      	beq.n	8005386 <create_name+0x42>
			break;
 80053a4:	e02a      	b.n	80053fc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2bfe      	cmp	r3, #254	; 0xfe
 80053aa:	d901      	bls.n	80053b0 <create_name+0x6c>
 80053ac:	2306      	movs	r3, #6
 80053ae:	e17d      	b.n	80056ac <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80053b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80053b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053b8:	2101      	movs	r1, #1
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 fc02 	bl	8006bc4 <ff_convert>
 80053c0:	4603      	mov	r3, r0
 80053c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80053c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <create_name+0x8a>
 80053ca:	2306      	movs	r3, #6
 80053cc:	e16e      	b.n	80056ac <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80053ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053d0:	2b7f      	cmp	r3, #127	; 0x7f
 80053d2:	d809      	bhi.n	80053e8 <create_name+0xa4>
 80053d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053d6:	4619      	mov	r1, r3
 80053d8:	488d      	ldr	r0, [pc, #564]	; (8005610 <create_name+0x2cc>)
 80053da:	f7fe fceb 	bl	8003db4 <chk_chr>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <create_name+0xa4>
 80053e4:	2306      	movs	r3, #6
 80053e6:	e161      	b.n	80056ac <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	617a      	str	r2, [r7, #20]
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053f6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80053f8:	e7b4      	b.n	8005364 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80053fa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	441a      	add	r2, r3
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005408:	2b1f      	cmp	r3, #31
 800540a:	d801      	bhi.n	8005410 <create_name+0xcc>
 800540c:	2304      	movs	r3, #4
 800540e:	e000      	b.n	8005412 <create_name+0xce>
 8005410:	2300      	movs	r3, #0
 8005412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005416:	e011      	b.n	800543c <create_name+0xf8>
		w = lfn[di - 1];
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800541e:	3b01      	subs	r3, #1
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800542a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800542c:	2b20      	cmp	r3, #32
 800542e:	d002      	beq.n	8005436 <create_name+0xf2>
 8005430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005432:	2b2e      	cmp	r3, #46	; 0x2e
 8005434:	d106      	bne.n	8005444 <create_name+0x100>
		di--;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3b01      	subs	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1ea      	bne.n	8005418 <create_name+0xd4>
 8005442:	e000      	b.n	8005446 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005444:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4413      	add	r3, r2
 800544e:	2200      	movs	r2, #0
 8005450:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <create_name+0x118>
 8005458:	2306      	movs	r3, #6
 800545a:	e127      	b.n	80056ac <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3324      	adds	r3, #36	; 0x24
 8005460:	220b      	movs	r2, #11
 8005462:	2120      	movs	r1, #32
 8005464:	4618      	mov	r0, r3
 8005466:	f7fe fc65 	bl	8003d34 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800546a:	2300      	movs	r3, #0
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	e002      	b.n	8005476 <create_name+0x132>
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	3301      	adds	r3, #1
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	2b20      	cmp	r3, #32
 8005482:	d0f5      	beq.n	8005470 <create_name+0x12c>
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	2b2e      	cmp	r3, #46	; 0x2e
 8005490:	d0ee      	beq.n	8005470 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d009      	beq.n	80054ac <create_name+0x168>
 8005498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800549c:	f043 0303 	orr.w	r3, r3, #3
 80054a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80054a4:	e002      	b.n	80054ac <create_name+0x168>
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <create_name+0x182>
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80054b8:	3b01      	subs	r3, #1
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	2b2e      	cmp	r3, #46	; 0x2e
 80054c4:	d1ef      	bne.n	80054a6 <create_name+0x162>

	i = b = 0; ni = 8;
 80054c6:	2300      	movs	r3, #0
 80054c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80054cc:	2300      	movs	r3, #0
 80054ce:	623b      	str	r3, [r7, #32]
 80054d0:	2308      	movs	r3, #8
 80054d2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	61ba      	str	r2, [r7, #24]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80054e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8090 	beq.w	800560c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80054ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d006      	beq.n	8005500 <create_name+0x1bc>
 80054f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054f4:	2b2e      	cmp	r3, #46	; 0x2e
 80054f6:	d10a      	bne.n	800550e <create_name+0x1ca>
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d006      	beq.n	800550e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005504:	f043 0303 	orr.w	r3, r3, #3
 8005508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800550c:	e07d      	b.n	800560a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800550e:	6a3a      	ldr	r2, [r7, #32]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	429a      	cmp	r2, r3
 8005514:	d203      	bcs.n	800551e <create_name+0x1da>
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	429a      	cmp	r2, r3
 800551c:	d123      	bne.n	8005566 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	2b0b      	cmp	r3, #11
 8005522:	d106      	bne.n	8005532 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005528:	f043 0303 	orr.w	r3, r3, #3
 800552c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005530:	e075      	b.n	800561e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	429a      	cmp	r2, r3
 8005538:	d005      	beq.n	8005546 <create_name+0x202>
 800553a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800553e:	f043 0303 	orr.w	r3, r3, #3
 8005542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	429a      	cmp	r2, r3
 800554c:	d866      	bhi.n	800561c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	2308      	movs	r3, #8
 8005554:	623b      	str	r3, [r7, #32]
 8005556:	230b      	movs	r3, #11
 8005558:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800555a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005564:	e051      	b.n	800560a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005568:	2b7f      	cmp	r3, #127	; 0x7f
 800556a:	d914      	bls.n	8005596 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800556c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fb27 	bl	8006bc4 <ff_convert>
 8005576:	4603      	mov	r3, r0
 8005578:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800557a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800557c:	2b00      	cmp	r3, #0
 800557e:	d004      	beq.n	800558a <create_name+0x246>
 8005580:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005582:	3b80      	subs	r3, #128	; 0x80
 8005584:	4a23      	ldr	r2, [pc, #140]	; (8005614 <create_name+0x2d0>)
 8005586:	5cd3      	ldrb	r3, [r2, r3]
 8005588:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800558a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800558e:	f043 0302 	orr.w	r3, r3, #2
 8005592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	d007      	beq.n	80055ac <create_name+0x268>
 800559c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800559e:	4619      	mov	r1, r3
 80055a0:	481d      	ldr	r0, [pc, #116]	; (8005618 <create_name+0x2d4>)
 80055a2:	f7fe fc07 	bl	8003db4 <chk_chr>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80055ac:	235f      	movs	r3, #95	; 0x5f
 80055ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b4:	f043 0303 	orr.w	r3, r3, #3
 80055b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055bc:	e01b      	b.n	80055f6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80055be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d909      	bls.n	80055d8 <create_name+0x294>
 80055c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055c6:	2b5a      	cmp	r3, #90	; 0x5a
 80055c8:	d806      	bhi.n	80055d8 <create_name+0x294>
					b |= 2;
 80055ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055ce:	f043 0302 	orr.w	r3, r3, #2
 80055d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80055d6:	e00e      	b.n	80055f6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80055d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055da:	2b60      	cmp	r3, #96	; 0x60
 80055dc:	d90b      	bls.n	80055f6 <create_name+0x2b2>
 80055de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055e0:	2b7a      	cmp	r3, #122	; 0x7a
 80055e2:	d808      	bhi.n	80055f6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80055e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80055f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055f2:	3b20      	subs	r3, #32
 80055f4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	623a      	str	r2, [r7, #32]
 80055fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055fe:	b2d1      	uxtb	r1, r2
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	4413      	add	r3, r2
 8005604:	460a      	mov	r2, r1
 8005606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800560a:	e763      	b.n	80054d4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800560c:	bf00      	nop
 800560e:	e006      	b.n	800561e <create_name+0x2da>
 8005610:	080077f8 	.word	0x080077f8
 8005614:	08007864 	.word	0x08007864
 8005618:	08007804 	.word	0x08007804
			if (si > di) break;			/* No extension */
 800561c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005624:	2be5      	cmp	r3, #229	; 0xe5
 8005626:	d103      	bne.n	8005630 <create_name+0x2ec>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2205      	movs	r2, #5
 800562c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	2b08      	cmp	r3, #8
 8005634:	d104      	bne.n	8005640 <create_name+0x2fc>
 8005636:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005640:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005644:	f003 030c 	and.w	r3, r3, #12
 8005648:	2b0c      	cmp	r3, #12
 800564a:	d005      	beq.n	8005658 <create_name+0x314>
 800564c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	2b03      	cmp	r3, #3
 8005656:	d105      	bne.n	8005664 <create_name+0x320>
 8005658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800565c:	f043 0302 	orr.w	r3, r3, #2
 8005660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d117      	bne.n	80056a0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005670:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d105      	bne.n	8005688 <create_name+0x344>
 800567c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005680:	f043 0310 	orr.w	r3, r3, #16
 8005684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005688:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800568c:	f003 030c 	and.w	r3, r3, #12
 8005690:	2b04      	cmp	r3, #4
 8005692:	d105      	bne.n	80056a0 <create_name+0x35c>
 8005694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005698:	f043 0308 	orr.w	r3, r3, #8
 800569c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80056a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80056aa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3728      	adds	r7, #40	; 0x28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80056c8:	e002      	b.n	80056d0 <follow_path+0x1c>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b2f      	cmp	r3, #47	; 0x2f
 80056d6:	d0f8      	beq.n	80056ca <follow_path+0x16>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b5c      	cmp	r3, #92	; 0x5c
 80056de:	d0f4      	beq.n	80056ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2200      	movs	r2, #0
 80056e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b1f      	cmp	r3, #31
 80056ec:	d80a      	bhi.n	8005704 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2280      	movs	r2, #128	; 0x80
 80056f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80056f6:	2100      	movs	r1, #0
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff f8ff 	bl	80048fc <dir_sdi>
 80056fe:	4603      	mov	r3, r0
 8005700:	75fb      	strb	r3, [r7, #23]
 8005702:	e048      	b.n	8005796 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005704:	463b      	mov	r3, r7
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fe1b 	bl	8005344 <create_name>
 800570e:	4603      	mov	r3, r0
 8005710:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d139      	bne.n	800578c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff fc5b 	bl	8004fd4 <dir_find>
 800571e:	4603      	mov	r3, r0
 8005720:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005728:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	2b04      	cmp	r3, #4
 8005734:	d12c      	bne.n	8005790 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005736:	7afb      	ldrb	r3, [r7, #11]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d127      	bne.n	8005790 <follow_path+0xdc>
 8005740:	2305      	movs	r3, #5
 8005742:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005744:	e024      	b.n	8005790 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005746:	7afb      	ldrb	r3, [r7, #11]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d121      	bne.n	8005794 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	799b      	ldrb	r3, [r3, #6]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800575c:	2305      	movs	r3, #5
 800575e:	75fb      	strb	r3, [r7, #23]
 8005760:	e019      	b.n	8005796 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	8992      	ldrh	r2, [r2, #12]
 8005770:	fbb3 f0f2 	udiv	r0, r3, r2
 8005774:	fb00 f202 	mul.w	r2, r0, r2
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	440b      	add	r3, r1
 800577c:	4619      	mov	r1, r3
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff fa62 	bl	8004c48 <ld_clust>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800578a:	e7bb      	b.n	8005704 <follow_path+0x50>
			if (res != FR_OK) break;
 800578c:	bf00      	nop
 800578e:	e002      	b.n	8005796 <follow_path+0xe2>
				break;
 8005790:	bf00      	nop
 8005792:	e000      	b.n	8005796 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005794:	bf00      	nop
			}
		}
	}

	return res;
 8005796:	7dfb      	ldrb	r3, [r7, #23]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d031      	beq.n	800581a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e002      	b.n	80057c4 <get_ldnumber+0x24>
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	3301      	adds	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b1f      	cmp	r3, #31
 80057ca:	d903      	bls.n	80057d4 <get_ldnumber+0x34>
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b3a      	cmp	r3, #58	; 0x3a
 80057d2:	d1f4      	bne.n	80057be <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b3a      	cmp	r3, #58	; 0x3a
 80057da:	d11c      	bne.n	8005816 <get_ldnumber+0x76>
			tp = *path;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	60fa      	str	r2, [r7, #12]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	3b30      	subs	r3, #48	; 0x30
 80057ec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b09      	cmp	r3, #9
 80057f2:	d80e      	bhi.n	8005812 <get_ldnumber+0x72>
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d10a      	bne.n	8005812 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d107      	bne.n	8005812 <get_ldnumber+0x72>
					vol = (int)i;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	3301      	adds	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	e002      	b.n	800581c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005816:	2300      	movs	r3, #0
 8005818:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800581a:	693b      	ldr	r3, [r7, #16]
}
 800581c:	4618      	mov	r0, r3
 800581e:	371c      	adds	r7, #28
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
	...

08005828 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	70da      	strb	r2, [r3, #3]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f04f 32ff 	mov.w	r2, #4294967295
 800583e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fe fc7a 	bl	800413c <move_window>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <check_fs+0x2a>
 800584e:	2304      	movs	r3, #4
 8005850:	e038      	b.n	80058c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3338      	adds	r3, #56	; 0x38
 8005856:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe f9cc 	bl	8003bf8 <ld_word>
 8005860:	4603      	mov	r3, r0
 8005862:	461a      	mov	r2, r3
 8005864:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <check_fs+0x48>
 800586c:	2303      	movs	r3, #3
 800586e:	e029      	b.n	80058c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005876:	2be9      	cmp	r3, #233	; 0xe9
 8005878:	d009      	beq.n	800588e <check_fs+0x66>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005880:	2beb      	cmp	r3, #235	; 0xeb
 8005882:	d11e      	bne.n	80058c2 <check_fs+0x9a>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800588a:	2b90      	cmp	r3, #144	; 0x90
 800588c:	d119      	bne.n	80058c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3338      	adds	r3, #56	; 0x38
 8005892:	3336      	adds	r3, #54	; 0x36
 8005894:	4618      	mov	r0, r3
 8005896:	f7fe f9c6 	bl	8003c26 <ld_dword>
 800589a:	4603      	mov	r3, r0
 800589c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058a0:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <check_fs+0xa4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d101      	bne.n	80058aa <check_fs+0x82>
 80058a6:	2300      	movs	r3, #0
 80058a8:	e00c      	b.n	80058c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3338      	adds	r3, #56	; 0x38
 80058ae:	3352      	adds	r3, #82	; 0x52
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fe f9b8 	bl	8003c26 <ld_dword>
 80058b6:	4603      	mov	r3, r0
 80058b8:	4a05      	ldr	r2, [pc, #20]	; (80058d0 <check_fs+0xa8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d101      	bne.n	80058c2 <check_fs+0x9a>
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80058c2:	2302      	movs	r3, #2
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	00544146 	.word	0x00544146
 80058d0:	33544146 	.word	0x33544146

080058d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b096      	sub	sp, #88	; 0x58
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff ff59 	bl	80057a0 <get_ldnumber>
 80058ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80058f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	da01      	bge.n	80058fa <find_volume+0x26>
 80058f6:	230b      	movs	r3, #11
 80058f8:	e265      	b.n	8005dc6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80058fa:	4a9f      	ldr	r2, [pc, #636]	; (8005b78 <find_volume+0x2a4>)
 80058fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005902:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <find_volume+0x3a>
 800590a:	230c      	movs	r3, #12
 800590c:	e25b      	b.n	8005dc6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005912:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	f023 0301 	bic.w	r3, r3, #1
 800591a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01a      	beq.n	800595a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe f8c7 	bl	8003abc <disk_status>
 800592e:	4603      	mov	r3, r0
 8005930:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005934:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10c      	bne.n	800595a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <find_volume+0x82>
 8005946:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005952:	230a      	movs	r3, #10
 8005954:	e237      	b.n	8005dc6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005956:	2300      	movs	r3, #0
 8005958:	e235      	b.n	8005dc6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005962:	b2da      	uxtb	r2, r3
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe f8bf 	bl	8003af0 <disk_initialize>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005978:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005984:	2303      	movs	r3, #3
 8005986:	e21e      	b.n	8005dc6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d007      	beq.n	800599e <find_volume+0xca>
 800598e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800599a:	230a      	movs	r3, #10
 800599c:	e213      	b.n	8005dc6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	7858      	ldrb	r0, [r3, #1]
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	330c      	adds	r3, #12
 80059a6:	461a      	mov	r2, r3
 80059a8:	2102      	movs	r1, #2
 80059aa:	f7fe f907 	bl	8003bbc <disk_ioctl>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <find_volume+0xe4>
 80059b4:	2301      	movs	r3, #1
 80059b6:	e206      	b.n	8005dc6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	899b      	ldrh	r3, [r3, #12]
 80059bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c0:	d80d      	bhi.n	80059de <find_volume+0x10a>
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	899b      	ldrh	r3, [r3, #12]
 80059c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ca:	d308      	bcc.n	80059de <find_volume+0x10a>
 80059cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ce:	899b      	ldrh	r3, [r3, #12]
 80059d0:	461a      	mov	r2, r3
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	899b      	ldrh	r3, [r3, #12]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	4013      	ands	r3, r2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <find_volume+0x10e>
 80059de:	2301      	movs	r3, #1
 80059e0:	e1f1      	b.n	8005dc6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80059e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059ea:	f7ff ff1d 	bl	8005828 <check_fs>
 80059ee:	4603      	mov	r3, r0
 80059f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80059f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d149      	bne.n	8005a90 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80059fc:	2300      	movs	r3, #0
 80059fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005a00:	e01e      	b.n	8005a40 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005a10:	4413      	add	r3, r2
 8005a12:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	3304      	adds	r3, #4
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d006      	beq.n	8005a2c <find_volume+0x158>
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	3308      	adds	r3, #8
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe f8ff 	bl	8003c26 <ld_dword>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	e000      	b.n	8005a2e <find_volume+0x15a>
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	3358      	adds	r3, #88	; 0x58
 8005a34:	443b      	add	r3, r7
 8005a36:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d9dd      	bls.n	8005a02 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005a46:	2300      	movs	r3, #0
 8005a48:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <find_volume+0x182>
 8005a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a52:	3b01      	subs	r3, #1
 8005a54:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	3358      	adds	r3, #88	; 0x58
 8005a5c:	443b      	add	r3, r7
 8005a5e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005a62:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <find_volume+0x1a2>
 8005a6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a6e:	f7ff fedb 	bl	8005828 <check_fs>
 8005a72:	4603      	mov	r3, r0
 8005a74:	e000      	b.n	8005a78 <find_volume+0x1a4>
 8005a76:	2303      	movs	r3, #3
 8005a78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005a7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d905      	bls.n	8005a90 <find_volume+0x1bc>
 8005a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a86:	3301      	adds	r3, #1
 8005a88:	643b      	str	r3, [r7, #64]	; 0x40
 8005a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d9e2      	bls.n	8005a56 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005a90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d101      	bne.n	8005a9c <find_volume+0x1c8>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e194      	b.n	8005dc6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005a9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d901      	bls.n	8005aa8 <find_volume+0x1d4>
 8005aa4:	230d      	movs	r3, #13
 8005aa6:	e18e      	b.n	8005dc6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	3338      	adds	r3, #56	; 0x38
 8005aac:	330b      	adds	r3, #11
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe f8a2 	bl	8003bf8 <ld_word>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	899b      	ldrh	r3, [r3, #12]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <find_volume+0x1f0>
 8005ac0:	230d      	movs	r3, #13
 8005ac2:	e180      	b.n	8005dc6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	3338      	adds	r3, #56	; 0x38
 8005ac8:	3316      	adds	r3, #22
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe f894 	bl	8003bf8 <ld_word>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <find_volume+0x214>
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	3338      	adds	r3, #56	; 0x38
 8005ade:	3324      	adds	r3, #36	; 0x24
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fe f8a0 	bl	8003c26 <ld_dword>
 8005ae6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	789b      	ldrb	r3, [r3, #2]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d005      	beq.n	8005b0c <find_volume+0x238>
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	789b      	ldrb	r3, [r3, #2]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d001      	beq.n	8005b0c <find_volume+0x238>
 8005b08:	230d      	movs	r3, #13
 8005b0a:	e15c      	b.n	8005dc6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	789b      	ldrb	r3, [r3, #2]
 8005b10:	461a      	mov	r2, r3
 8005b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	895b      	ldrh	r3, [r3, #10]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d008      	beq.n	8005b40 <find_volume+0x26c>
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	895b      	ldrh	r3, [r3, #10]
 8005b32:	461a      	mov	r2, r3
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	895b      	ldrh	r3, [r3, #10]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <find_volume+0x270>
 8005b40:	230d      	movs	r3, #13
 8005b42:	e140      	b.n	8005dc6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	3338      	adds	r3, #56	; 0x38
 8005b48:	3311      	adds	r3, #17
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe f854 	bl	8003bf8 <ld_word>
 8005b50:	4603      	mov	r3, r0
 8005b52:	461a      	mov	r2, r3
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	891b      	ldrh	r3, [r3, #8]
 8005b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b5e:	8992      	ldrh	r2, [r2, #12]
 8005b60:	0952      	lsrs	r2, r2, #5
 8005b62:	b292      	uxth	r2, r2
 8005b64:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b68:	fb01 f202 	mul.w	r2, r1, r2
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <find_volume+0x2a8>
 8005b74:	230d      	movs	r3, #13
 8005b76:	e126      	b.n	8005dc6 <find_volume+0x4f2>
 8005b78:	200025dc 	.word	0x200025dc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	3338      	adds	r3, #56	; 0x38
 8005b80:	3313      	adds	r3, #19
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe f838 	bl	8003bf8 <ld_word>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <find_volume+0x2cc>
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	3338      	adds	r3, #56	; 0x38
 8005b96:	3320      	adds	r3, #32
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fe f844 	bl	8003c26 <ld_dword>
 8005b9e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	3338      	adds	r3, #56	; 0x38
 8005ba4:	330e      	adds	r3, #14
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe f826 	bl	8003bf8 <ld_word>
 8005bac:	4603      	mov	r3, r0
 8005bae:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005bb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <find_volume+0x2e6>
 8005bb6:	230d      	movs	r3, #13
 8005bb8:	e105      	b.n	8005dc6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005bba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbe:	4413      	add	r3, r2
 8005bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bc2:	8911      	ldrh	r1, [r2, #8]
 8005bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bc6:	8992      	ldrh	r2, [r2, #12]
 8005bc8:	0952      	lsrs	r2, r2, #5
 8005bca:	b292      	uxth	r2, r2
 8005bcc:	fbb1 f2f2 	udiv	r2, r1, r2
 8005bd0:	b292      	uxth	r2, r2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d201      	bcs.n	8005be2 <find_volume+0x30e>
 8005bde:	230d      	movs	r3, #13
 8005be0:	e0f1      	b.n	8005dc6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bea:	8952      	ldrh	r2, [r2, #10]
 8005bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <find_volume+0x328>
 8005bf8:	230d      	movs	r3, #13
 8005bfa:	e0e4      	b.n	8005dc6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d802      	bhi.n	8005c12 <find_volume+0x33e>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d802      	bhi.n	8005c22 <find_volume+0x34e>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	1c9a      	adds	r2, r3, #2
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005c30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c34:	441a      	add	r2, r3
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005c3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	441a      	add	r2, r3
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005c44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d11e      	bne.n	8005c8a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	3338      	adds	r3, #56	; 0x38
 8005c50:	332a      	adds	r3, #42	; 0x2a
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fd ffd0 	bl	8003bf8 <ld_word>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <find_volume+0x38e>
 8005c5e:	230d      	movs	r3, #13
 8005c60:	e0b1      	b.n	8005dc6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	891b      	ldrh	r3, [r3, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <find_volume+0x39a>
 8005c6a:	230d      	movs	r3, #13
 8005c6c:	e0ab      	b.n	8005dc6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	3338      	adds	r3, #56	; 0x38
 8005c72:	332c      	adds	r3, #44	; 0x2c
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fd ffd6 	bl	8003c26 <ld_dword>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	647b      	str	r3, [r7, #68]	; 0x44
 8005c88:	e01f      	b.n	8005cca <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8c:	891b      	ldrh	r3, [r3, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <find_volume+0x3c2>
 8005c92:	230d      	movs	r3, #13
 8005c94:	e097      	b.n	8005dc6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9c:	441a      	add	r2, r3
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005ca2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d103      	bne.n	8005cb2 <find_volume+0x3de>
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	e00a      	b.n	8005cc8 <find_volume+0x3f4>
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	69da      	ldr	r2, [r3, #28]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	4413      	add	r3, r2
 8005cbc:	085a      	lsrs	r2, r3, #1
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005cc8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	6a1a      	ldr	r2, [r3, #32]
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	899b      	ldrh	r3, [r3, #12]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cdc:	8989      	ldrh	r1, [r1, #12]
 8005cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d201      	bcs.n	8005cea <find_volume+0x416>
 8005ce6:	230d      	movs	r3, #13
 8005ce8:	e06d      	b.n	8005dc6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf0:	619a      	str	r2, [r3, #24]
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	2280      	movs	r2, #128	; 0x80
 8005cfe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005d00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d149      	bne.n	8005d9c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	3338      	adds	r3, #56	; 0x38
 8005d0c:	3330      	adds	r3, #48	; 0x30
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fd ff72 	bl	8003bf8 <ld_word>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d140      	bne.n	8005d9c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d22:	f7fe fa0b 	bl	800413c <move_window>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d137      	bne.n	8005d9c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	2200      	movs	r2, #0
 8005d30:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d34:	3338      	adds	r3, #56	; 0x38
 8005d36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fd ff5c 	bl	8003bf8 <ld_word>
 8005d40:	4603      	mov	r3, r0
 8005d42:	461a      	mov	r2, r3
 8005d44:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d127      	bne.n	8005d9c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	3338      	adds	r3, #56	; 0x38
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fd ff68 	bl	8003c26 <ld_dword>
 8005d56:	4603      	mov	r3, r0
 8005d58:	4a1d      	ldr	r2, [pc, #116]	; (8005dd0 <find_volume+0x4fc>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d11e      	bne.n	8005d9c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	3338      	adds	r3, #56	; 0x38
 8005d62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fd ff5d 	bl	8003c26 <ld_dword>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	4a19      	ldr	r2, [pc, #100]	; (8005dd4 <find_volume+0x500>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d113      	bne.n	8005d9c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	3338      	adds	r3, #56	; 0x38
 8005d78:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fd ff52 	bl	8003c26 <ld_dword>
 8005d82:	4602      	mov	r2, r0
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	3338      	adds	r3, #56	; 0x38
 8005d8c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fd ff48 	bl	8003c26 <ld_dword>
 8005d96:	4602      	mov	r2, r0
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005da2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005da4:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <find_volume+0x504>)
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <find_volume+0x504>)
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <find_volume+0x504>)
 8005db2:	881a      	ldrh	r2, [r3, #0]
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	4a08      	ldr	r2, [pc, #32]	; (8005ddc <find_volume+0x508>)
 8005dbc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005dbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dc0:	f7fe f954 	bl	800406c <clear_lock>
#endif
	return FR_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3758      	adds	r7, #88	; 0x58
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	41615252 	.word	0x41615252
 8005dd4:	61417272 	.word	0x61417272
 8005dd8:	200025e0 	.word	0x200025e0
 8005ddc:	20002604 	.word	0x20002604

08005de0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005dea:	2309      	movs	r3, #9
 8005dec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d01c      	beq.n	8005e2e <validate+0x4e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d018      	beq.n	8005e2e <validate+0x4e>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d013      	beq.n	8005e2e <validate+0x4e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	889a      	ldrh	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	88db      	ldrh	r3, [r3, #6]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d10c      	bne.n	8005e2e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fd fe4e 	bl	8003abc <disk_status>
 8005e20:	4603      	mov	r3, r0
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <validate+0x4e>
			res = FR_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <validate+0x5a>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	e000      	b.n	8005e3c <validate+0x5c>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	6013      	str	r3, [r2, #0]
	return res;
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005e5e:	f107 0310 	add.w	r3, r7, #16
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fc9c 	bl	80057a0 <get_ldnumber>
 8005e68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	da01      	bge.n	8005e74 <f_mount+0x28>
 8005e70:	230b      	movs	r3, #11
 8005e72:	e02b      	b.n	8005ecc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005e74:	4a17      	ldr	r2, [pc, #92]	; (8005ed4 <f_mount+0x88>)
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005e84:	69b8      	ldr	r0, [r7, #24]
 8005e86:	f7fe f8f1 	bl	800406c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	490d      	ldr	r1, [pc, #52]	; (8005ed4 <f_mount+0x88>)
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <f_mount+0x66>
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d001      	beq.n	8005eb6 <f_mount+0x6a>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e00a      	b.n	8005ecc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005eb6:	f107 010c 	add.w	r1, r7, #12
 8005eba:	f107 0308 	add.w	r3, r7, #8
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff fd07 	bl	80058d4 <find_volume>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3720      	adds	r7, #32
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	200025dc 	.word	0x200025dc

08005ed8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b09a      	sub	sp, #104	; 0x68
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <f_open+0x18>
 8005eec:	2309      	movs	r3, #9
 8005eee:	e1bb      	b.n	8006268 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005ef8:	79fa      	ldrb	r2, [r7, #7]
 8005efa:	f107 0114 	add.w	r1, r7, #20
 8005efe:	f107 0308 	add.w	r3, r7, #8
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff fce6 	bl	80058d4 <find_volume>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8005f0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f040 819f 	bne.w	8006256 <f_open+0x37e>
		dj.obj.fs = fs;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	f107 0318 	add.w	r3, r7, #24
 8005f22:	4611      	mov	r1, r2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fbc5 	bl	80056b4 <follow_path>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005f30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d11a      	bne.n	8005f6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005f38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f3c:	b25b      	sxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da03      	bge.n	8005f4a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005f42:	2306      	movs	r3, #6
 8005f44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005f48:	e011      	b.n	8005f6e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bf14      	ite	ne
 8005f54:	2301      	movne	r3, #1
 8005f56:	2300      	moveq	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f107 0318 	add.w	r3, r7, #24
 8005f60:	4611      	mov	r1, r2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fd ff40 	bl	8003de8 <chk_lock>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	f003 031c 	and.w	r3, r3, #28
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d07f      	beq.n	8006078 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005f78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d017      	beq.n	8005fb0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005f80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d10e      	bne.n	8005fa6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005f88:	f7fd ff88 	bl	8003e9c <enq_lock>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d006      	beq.n	8005fa0 <f_open+0xc8>
 8005f92:	f107 0318 	add.w	r3, r7, #24
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff f8dc 	bl	8005154 <dir_register>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	e000      	b.n	8005fa2 <f_open+0xca>
 8005fa0:	2312      	movs	r3, #18
 8005fa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	f043 0308 	orr.w	r3, r3, #8
 8005fac:	71fb      	strb	r3, [r7, #7]
 8005fae:	e010      	b.n	8005fd2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005fb0:	7fbb      	ldrb	r3, [r7, #30]
 8005fb2:	f003 0311 	and.w	r3, r3, #17
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <f_open+0xea>
					res = FR_DENIED;
 8005fba:	2307      	movs	r3, #7
 8005fbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005fc0:	e007      	b.n	8005fd2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <f_open+0xfa>
 8005fcc:	2308      	movs	r3, #8
 8005fce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005fd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d168      	bne.n	80060ac <f_open+0x1d4>
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d063      	beq.n	80060ac <f_open+0x1d4>
				dw = GET_FATTIME();
 8005fe4:	f7fd fd08 	bl	80039f8 <get_fattime>
 8005fe8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	330e      	adds	r3, #14
 8005fee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fd fe54 	bl	8003c9e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	3316      	adds	r3, #22
 8005ffa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fd fe4e 	bl	8003c9e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	330b      	adds	r3, #11
 8006006:	2220      	movs	r2, #32
 8006008:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800600e:	4611      	mov	r1, r2
 8006010:	4618      	mov	r0, r3
 8006012:	f7fe fe19 	bl	8004c48 <ld_clust>
 8006016:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800601c:	2200      	movs	r2, #0
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe fe31 	bl	8004c86 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	331c      	adds	r3, #28
 8006028:	2100      	movs	r1, #0
 800602a:	4618      	mov	r0, r3
 800602c:	f7fd fe37 	bl	8003c9e <st_dword>
					fs->wflag = 1;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2201      	movs	r2, #1
 8006034:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006038:	2b00      	cmp	r3, #0
 800603a:	d037      	beq.n	80060ac <f_open+0x1d4>
						dw = fs->winsect;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006040:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006042:	f107 0318 	add.w	r3, r7, #24
 8006046:	2200      	movs	r2, #0
 8006048:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fb22 	bl	8004694 <remove_chain>
 8006050:	4603      	mov	r3, r0
 8006052:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006056:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800605a:	2b00      	cmp	r3, #0
 800605c:	d126      	bne.n	80060ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe f86a 	bl	800413c <move_window>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006072:	3a01      	subs	r2, #1
 8006074:	615a      	str	r2, [r3, #20]
 8006076:	e019      	b.n	80060ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006078:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800607c:	2b00      	cmp	r3, #0
 800607e:	d115      	bne.n	80060ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006080:	7fbb      	ldrb	r3, [r7, #30]
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <f_open+0x1ba>
					res = FR_NO_FILE;
 800608a:	2304      	movs	r3, #4
 800608c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006090:	e00c      	b.n	80060ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <f_open+0x1d4>
 800609c:	7fbb      	ldrb	r3, [r7, #30]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <f_open+0x1d4>
						res = FR_DENIED;
 80060a6:	2307      	movs	r3, #7
 80060a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80060ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d128      	bne.n	8006106 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80060ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	f023 0301 	bic.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bf14      	ite	ne
 80060de:	2301      	movne	r3, #1
 80060e0:	2300      	moveq	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	f107 0318 	add.w	r3, r7, #24
 80060ea:	4611      	mov	r1, r2
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fd fef5 	bl	8003edc <inc_lock>
 80060f2:	4602      	mov	r2, r0
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <f_open+0x22e>
 8006100:	2302      	movs	r3, #2
 8006102:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006106:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800610a:	2b00      	cmp	r3, #0
 800610c:	f040 80a3 	bne.w	8006256 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006114:	4611      	mov	r1, r2
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fd96 	bl	8004c48 <ld_clust>
 800611c:	4602      	mov	r2, r0
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	331c      	adds	r3, #28
 8006126:	4618      	mov	r0, r3
 8006128:	f7fd fd7d 	bl	8003c26 <ld_dword>
 800612c:	4602      	mov	r2, r0
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	88da      	ldrh	r2, [r3, #6]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	79fa      	ldrb	r2, [r7, #7]
 800614a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3330      	adds	r3, #48	; 0x30
 8006162:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006166:	2100      	movs	r1, #0
 8006168:	4618      	mov	r0, r3
 800616a:	f7fd fde3 	bl	8003d34 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	d06e      	beq.n	8006256 <f_open+0x37e>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d06a      	beq.n	8006256 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68da      	ldr	r2, [r3, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	895b      	ldrh	r3, [r3, #10]
 800618c:	461a      	mov	r2, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	899b      	ldrh	r3, [r3, #12]
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061a4:	e016      	b.n	80061d4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe f882 	bl	80042b4 <get_fat>
 80061b0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80061b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d802      	bhi.n	80061be <f_open+0x2e6>
 80061b8:	2302      	movs	r3, #2
 80061ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80061be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c4:	d102      	bne.n	80061cc <f_open+0x2f4>
 80061c6:	2301      	movs	r3, #1
 80061c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80061cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d103      	bne.n	80061e4 <f_open+0x30c>
 80061dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d8e0      	bhi.n	80061a6 <f_open+0x2ce>
				}
				fp->clust = clst;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80061ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d131      	bne.n	8006256 <f_open+0x37e>
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	899b      	ldrh	r3, [r3, #12]
 80061f6:	461a      	mov	r2, r3
 80061f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80061fe:	fb01 f202 	mul.w	r2, r1, r2
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d026      	beq.n	8006256 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800620c:	4618      	mov	r0, r3
 800620e:	f7fe f833 	bl	8004278 <clust2sect>
 8006212:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d103      	bne.n	8006222 <f_open+0x34a>
						res = FR_INT_ERR;
 800621a:	2302      	movs	r3, #2
 800621c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006220:	e019      	b.n	8006256 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	899b      	ldrh	r3, [r3, #12]
 8006226:	461a      	mov	r2, r3
 8006228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800622a:	fbb3 f2f2 	udiv	r2, r3, r2
 800622e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006230:	441a      	add	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	7858      	ldrb	r0, [r3, #1]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1a      	ldr	r2, [r3, #32]
 8006244:	2301      	movs	r3, #1
 8006246:	f7fd fc79 	bl	8003b3c <disk_read>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <f_open+0x37e>
 8006250:	2301      	movs	r3, #1
 8006252:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006256:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <f_open+0x38c>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006264:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006268:	4618      	mov	r0, r3
 800626a:	3768      	adds	r7, #104	; 0x68
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08e      	sub	sp, #56	; 0x38
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f107 0214 	add.w	r2, r7, #20
 800628e:	4611      	mov	r1, r2
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fda5 	bl	8005de0 <validate>
 8006296:	4603      	mov	r3, r0
 8006298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800629c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d107      	bne.n	80062b4 <f_read+0x44>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	7d5b      	ldrb	r3, [r3, #21]
 80062a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80062ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <f_read+0x4a>
 80062b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062b8:	e135      	b.n	8006526 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	7d1b      	ldrb	r3, [r3, #20]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <f_read+0x5a>
 80062c6:	2307      	movs	r3, #7
 80062c8:	e12d      	b.n	8006526 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	429a      	cmp	r2, r3
 80062dc:	f240 811e 	bls.w	800651c <f_read+0x2ac>
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80062e4:	e11a      	b.n	800651c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	8992      	ldrh	r2, [r2, #12]
 80062ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80062f2:	fb01 f202 	mul.w	r2, r1, r2
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f040 80d5 	bne.w	80064a8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	8992      	ldrh	r2, [r2, #12]
 8006306:	fbb3 f3f2 	udiv	r3, r3, r2
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	8952      	ldrh	r2, [r2, #10]
 800630e:	3a01      	subs	r2, #1
 8006310:	4013      	ands	r3, r2
 8006312:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d12f      	bne.n	800637a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d103      	bne.n	800632a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	633b      	str	r3, [r7, #48]	; 0x30
 8006328:	e013      	b.n	8006352 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	4619      	mov	r1, r3
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f7fe faa8 	bl	800488e <clmt_clust>
 800633e:	6338      	str	r0, [r7, #48]	; 0x30
 8006340:	e007      	b.n	8006352 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	4619      	mov	r1, r3
 800634a:	4610      	mov	r0, r2
 800634c:	f7fd ffb2 	bl	80042b4 <get_fat>
 8006350:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	2b01      	cmp	r3, #1
 8006356:	d804      	bhi.n	8006362 <f_read+0xf2>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2202      	movs	r2, #2
 800635c:	755a      	strb	r2, [r3, #21]
 800635e:	2302      	movs	r3, #2
 8006360:	e0e1      	b.n	8006526 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d104      	bne.n	8006374 <f_read+0x104>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	755a      	strb	r2, [r3, #21]
 8006370:	2301      	movs	r3, #1
 8006372:	e0d8      	b.n	8006526 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006378:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	4619      	mov	r1, r3
 8006382:	4610      	mov	r0, r2
 8006384:	f7fd ff78 	bl	8004278 <clust2sect>
 8006388:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <f_read+0x12a>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2202      	movs	r2, #2
 8006394:	755a      	strb	r2, [r3, #21]
 8006396:	2302      	movs	r3, #2
 8006398:	e0c5      	b.n	8006526 <f_read+0x2b6>
			sect += csect;
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	899b      	ldrh	r3, [r3, #12]
 80063a6:	461a      	mov	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d041      	beq.n	800643a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	4413      	add	r3, r2
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	8952      	ldrh	r2, [r2, #10]
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d905      	bls.n	80063d0 <f_read+0x160>
					cc = fs->csize - csect;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	895b      	ldrh	r3, [r3, #10]
 80063c8:	461a      	mov	r2, r3
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	7858      	ldrb	r0, [r3, #1]
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063da:	f7fd fbaf 	bl	8003b3c <disk_read>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <f_read+0x17e>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	755a      	strb	r2, [r3, #21]
 80063ea:	2301      	movs	r3, #1
 80063ec:	e09b      	b.n	8006526 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	7d1b      	ldrb	r3, [r3, #20]
 80063f2:	b25b      	sxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	da18      	bge.n	800642a <f_read+0x1ba>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a1a      	ldr	r2, [r3, #32]
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006402:	429a      	cmp	r2, r3
 8006404:	d911      	bls.n	800642a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a1a      	ldr	r2, [r3, #32]
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	8992      	ldrh	r2, [r2, #12]
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006418:	18d0      	adds	r0, r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	899b      	ldrh	r3, [r3, #12]
 8006424:	461a      	mov	r2, r3
 8006426:	f7fd fc65 	bl	8003cf4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	899b      	ldrh	r3, [r3, #12]
 800642e:	461a      	mov	r2, r3
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	fb02 f303 	mul.w	r3, r2, r3
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006438:	e05c      	b.n	80064f4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	429a      	cmp	r2, r3
 8006442:	d02e      	beq.n	80064a2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	7d1b      	ldrb	r3, [r3, #20]
 8006448:	b25b      	sxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	da18      	bge.n	8006480 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	7858      	ldrb	r0, [r3, #1]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a1a      	ldr	r2, [r3, #32]
 800645c:	2301      	movs	r3, #1
 800645e:	f7fd fb8d 	bl	8003b7c <disk_write>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <f_read+0x202>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	755a      	strb	r2, [r3, #21]
 800646e:	2301      	movs	r3, #1
 8006470:	e059      	b.n	8006526 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	7d1b      	ldrb	r3, [r3, #20]
 8006476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647a:	b2da      	uxtb	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	7858      	ldrb	r0, [r3, #1]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800648a:	2301      	movs	r3, #1
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	f7fd fb55 	bl	8003b3c <disk_read>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <f_read+0x232>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	755a      	strb	r2, [r3, #21]
 800649e:	2301      	movs	r3, #1
 80064a0:	e041      	b.n	8006526 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	899b      	ldrh	r3, [r3, #12]
 80064ac:	4618      	mov	r0, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	8992      	ldrh	r2, [r2, #12]
 80064b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80064ba:	fb01 f202 	mul.w	r2, r1, r2
 80064be:	1a9b      	subs	r3, r3, r2
 80064c0:	1ac3      	subs	r3, r0, r3
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80064c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d901      	bls.n	80064d0 <f_read+0x260>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	8992      	ldrh	r2, [r2, #12]
 80064de:	fbb3 f0f2 	udiv	r0, r3, r2
 80064e2:	fb00 f202 	mul.w	r2, r0, r2
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	440b      	add	r3, r1
 80064ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ec:	4619      	mov	r1, r3
 80064ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064f0:	f7fd fc00 	bl	8003cf4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80064f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f8:	4413      	add	r3, r2
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	699a      	ldr	r2, [r3, #24]
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	441a      	add	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	619a      	str	r2, [r3, #24]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	441a      	add	r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f47f aee1 	bne.w	80062e6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3738      	adds	r7, #56	; 0x38
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b08c      	sub	sp, #48	; 0x30
 8006532:	af00      	add	r7, sp, #0
 8006534:	60f8      	str	r0, [r7, #12]
 8006536:	60b9      	str	r1, [r7, #8]
 8006538:	607a      	str	r2, [r7, #4]
 800653a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f107 0210 	add.w	r2, r7, #16
 800654c:	4611      	mov	r1, r2
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff fc46 	bl	8005de0 <validate>
 8006554:	4603      	mov	r3, r0
 8006556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800655a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800655e:	2b00      	cmp	r3, #0
 8006560:	d107      	bne.n	8006572 <f_write+0x44>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	7d5b      	ldrb	r3, [r3, #21]
 8006566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800656a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <f_write+0x4a>
 8006572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006576:	e16a      	b.n	800684e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	7d1b      	ldrb	r3, [r3, #20]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <f_write+0x5a>
 8006584:	2307      	movs	r3, #7
 8006586:	e162      	b.n	800684e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	699a      	ldr	r2, [r3, #24]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	441a      	add	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	429a      	cmp	r2, r3
 8006596:	f080 814c 	bcs.w	8006832 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	43db      	mvns	r3, r3
 80065a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80065a2:	e146      	b.n	8006832 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	8992      	ldrh	r2, [r2, #12]
 80065ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80065b0:	fb01 f202 	mul.w	r2, r1, r2
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f040 80f1 	bne.w	800679e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	8992      	ldrh	r2, [r2, #12]
 80065c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	8952      	ldrh	r2, [r2, #10]
 80065cc:	3a01      	subs	r2, #1
 80065ce:	4013      	ands	r3, r2
 80065d0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d143      	bne.n	8006660 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10c      	bne.n	80065fa <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d11a      	bne.n	8006622 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2100      	movs	r1, #0
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fe f8b4 	bl	800475e <create_chain>
 80065f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80065f8:	e013      	b.n	8006622 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	4619      	mov	r1, r3
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7fe f940 	bl	800488e <clmt_clust>
 800660e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006610:	e007      	b.n	8006622 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	4619      	mov	r1, r3
 800661a:	4610      	mov	r0, r2
 800661c:	f7fe f89f 	bl	800475e <create_chain>
 8006620:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 8109 	beq.w	800683c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	2b01      	cmp	r3, #1
 800662e:	d104      	bne.n	800663a <f_write+0x10c>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2202      	movs	r2, #2
 8006634:	755a      	strb	r2, [r3, #21]
 8006636:	2302      	movs	r3, #2
 8006638:	e109      	b.n	800684e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d104      	bne.n	800664c <f_write+0x11e>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	755a      	strb	r2, [r3, #21]
 8006648:	2301      	movs	r3, #1
 800664a:	e100      	b.n	800684e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006650:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <f_write+0x132>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800665e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	7d1b      	ldrb	r3, [r3, #20]
 8006664:	b25b      	sxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	da18      	bge.n	800669c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	7858      	ldrb	r0, [r3, #1]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a1a      	ldr	r2, [r3, #32]
 8006678:	2301      	movs	r3, #1
 800667a:	f7fd fa7f 	bl	8003b7c <disk_write>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <f_write+0x160>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	755a      	strb	r2, [r3, #21]
 800668a:	2301      	movs	r3, #1
 800668c:	e0df      	b.n	800684e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	7d1b      	ldrb	r3, [r3, #20]
 8006692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006696:	b2da      	uxtb	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	4619      	mov	r1, r3
 80066a4:	4610      	mov	r0, r2
 80066a6:	f7fd fde7 	bl	8004278 <clust2sect>
 80066aa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d104      	bne.n	80066bc <f_write+0x18e>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2202      	movs	r2, #2
 80066b6:	755a      	strb	r2, [r3, #21]
 80066b8:	2302      	movs	r3, #2
 80066ba:	e0c8      	b.n	800684e <f_write+0x320>
			sect += csect;
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	4413      	add	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	899b      	ldrh	r3, [r3, #12]
 80066c8:	461a      	mov	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80066d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d043      	beq.n	8006760 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	4413      	add	r3, r2
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	8952      	ldrh	r2, [r2, #10]
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d905      	bls.n	80066f2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	895b      	ldrh	r3, [r3, #10]
 80066ea:	461a      	mov	r2, r3
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	7858      	ldrb	r0, [r3, #1]
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	69f9      	ldr	r1, [r7, #28]
 80066fc:	f7fd fa3e 	bl	8003b7c <disk_write>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d004      	beq.n	8006710 <f_write+0x1e2>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	755a      	strb	r2, [r3, #21]
 800670c:	2301      	movs	r3, #1
 800670e:	e09e      	b.n	800684e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1a      	ldr	r2, [r3, #32]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	6a3a      	ldr	r2, [r7, #32]
 800671a:	429a      	cmp	r2, r3
 800671c:	d918      	bls.n	8006750 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a1a      	ldr	r2, [r3, #32]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	8992      	ldrh	r2, [r2, #12]
 8006730:	fb02 f303 	mul.w	r3, r2, r3
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	18d1      	adds	r1, r2, r3
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	899b      	ldrh	r3, [r3, #12]
 800673c:	461a      	mov	r2, r3
 800673e:	f7fd fad9 	bl	8003cf4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	7d1b      	ldrb	r3, [r3, #20]
 8006746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800674a:	b2da      	uxtb	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	899b      	ldrh	r3, [r3, #12]
 8006754:	461a      	mov	r2, r3
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	fb02 f303 	mul.w	r3, r2, r3
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800675e:	e04b      	b.n	80067f8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	429a      	cmp	r2, r3
 8006768:	d016      	beq.n	8006798 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006772:	429a      	cmp	r2, r3
 8006774:	d210      	bcs.n	8006798 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	7858      	ldrb	r0, [r3, #1]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006780:	2301      	movs	r3, #1
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	f7fd f9da 	bl	8003b3c <disk_read>
 8006788:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800678a:	2b00      	cmp	r3, #0
 800678c:	d004      	beq.n	8006798 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	755a      	strb	r2, [r3, #21]
 8006794:	2301      	movs	r3, #1
 8006796:	e05a      	b.n	800684e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	899b      	ldrh	r3, [r3, #12]
 80067a2:	4618      	mov	r0, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	8992      	ldrh	r2, [r2, #12]
 80067ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80067b0:	fb01 f202 	mul.w	r2, r1, r2
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	1ac3      	subs	r3, r0, r3
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80067ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d901      	bls.n	80067c6 <f_write+0x298>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	8992      	ldrh	r2, [r2, #12]
 80067d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80067d8:	fb00 f202 	mul.w	r2, r0, r2
 80067dc:	1a9b      	subs	r3, r3, r2
 80067de:	440b      	add	r3, r1
 80067e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e2:	69f9      	ldr	r1, [r7, #28]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fd fa85 	bl	8003cf4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	7d1b      	ldrb	r3, [r3, #20]
 80067ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	4413      	add	r3, r2
 80067fe:	61fb      	str	r3, [r7, #28]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	441a      	add	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	619a      	str	r2, [r3, #24]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	429a      	cmp	r2, r3
 8006816:	bf38      	it	cc
 8006818:	461a      	movcc	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	60da      	str	r2, [r3, #12]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	441a      	add	r2, r3
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f47f aeb5 	bne.w	80065a4 <f_write+0x76>
 800683a:	e000      	b.n	800683e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800683c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	7d1b      	ldrb	r3, [r3, #20]
 8006842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006846:	b2da      	uxtb	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3730      	adds	r7, #48	; 0x30
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b086      	sub	sp, #24
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f107 0208 	add.w	r2, r7, #8
 8006864:	4611      	mov	r1, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff faba 	bl	8005de0 <validate>
 800686c:	4603      	mov	r3, r0
 800686e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d168      	bne.n	8006948 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	7d1b      	ldrb	r3, [r3, #20]
 800687a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d062      	beq.n	8006948 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	7d1b      	ldrb	r3, [r3, #20]
 8006886:	b25b      	sxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	da15      	bge.n	80068b8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	7858      	ldrb	r0, [r3, #1]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1a      	ldr	r2, [r3, #32]
 800689a:	2301      	movs	r3, #1
 800689c:	f7fd f96e 	bl	8003b7c <disk_write>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <f_sync+0x54>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e04f      	b.n	800694a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	7d1b      	ldrb	r3, [r3, #20]
 80068ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80068b8:	f7fd f89e 	bl	80039f8 <get_fattime>
 80068bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f7fd fc38 	bl	800413c <move_window>
 80068cc:	4603      	mov	r3, r0
 80068ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d138      	bne.n	8006948 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	330b      	adds	r3, #11
 80068e0:	781a      	ldrb	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	330b      	adds	r3, #11
 80068e6:	f042 0220 	orr.w	r2, r2, #32
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	461a      	mov	r2, r3
 80068f8:	68f9      	ldr	r1, [r7, #12]
 80068fa:	f7fe f9c4 	bl	8004c86 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f103 021c 	add.w	r2, r3, #28
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	4619      	mov	r1, r3
 800690a:	4610      	mov	r0, r2
 800690c:	f7fd f9c7 	bl	8003c9e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3316      	adds	r3, #22
 8006914:	6939      	ldr	r1, [r7, #16]
 8006916:	4618      	mov	r0, r3
 8006918:	f7fd f9c1 	bl	8003c9e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3312      	adds	r3, #18
 8006920:	2100      	movs	r1, #0
 8006922:	4618      	mov	r0, r3
 8006924:	f7fd f9a1 	bl	8003c6a <st_word>
					fs->wflag = 1;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2201      	movs	r2, #1
 800692c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	4618      	mov	r0, r3
 8006932:	f7fd fc31 	bl	8004198 <sync_fs>
 8006936:	4603      	mov	r3, r0
 8006938:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	7d1b      	ldrb	r3, [r3, #20]
 800693e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006942:	b2da      	uxtb	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006948:	7dfb      	ldrb	r3, [r7, #23]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff ff7b 	bl	8006856 <f_sync>
 8006960:	4603      	mov	r3, r0
 8006962:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d118      	bne.n	800699c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f107 0208 	add.w	r2, r7, #8
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff fa34 	bl	8005de0 <validate>
 8006978:	4603      	mov	r3, r0
 800697a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10c      	bne.n	800699c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	4618      	mov	r0, r3
 8006988:	f7fd fb36 	bl	8003ff8 <dec_lock>
 800698c:	4603      	mov	r3, r0
 800698e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d102      	bne.n	800699c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800699c:	7bfb      	ldrb	r3, [r7, #15]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b092      	sub	sp, #72	; 0x48
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80069b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80069b6:	f107 030c 	add.w	r3, r7, #12
 80069ba:	2200      	movs	r2, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe ff89 	bl	80058d4 <find_volume>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80069c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f040 8099 	bne.w	8006b04 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80069d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	3b02      	subs	r3, #2
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d804      	bhi.n	80069f0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e089      	b.n	8006b04 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d128      	bne.n	8006a4e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80069fc:	2302      	movs	r3, #2
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006a04:	f107 0314 	add.w	r3, r7, #20
 8006a08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fd fc52 	bl	80042b4 <get_fat>
 8006a10:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a18:	d103      	bne.n	8006a22 <f_getfree+0x7c>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a20:	e063      	b.n	8006aea <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d103      	bne.n	8006a30 <f_getfree+0x8a>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a2e:	e05c      	b.n	8006aea <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d102      	bne.n	8006a3c <f_getfree+0x96>
 8006a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a38:	3301      	adds	r3, #1
 8006a3a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3e:	3301      	adds	r3, #1
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d3db      	bcc.n	8006a04 <f_getfree+0x5e>
 8006a4c:	e04d      	b.n	8006aea <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5e:	2300      	movs	r3, #0
 8006a60:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d113      	bne.n	8006a90 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006a70:	4619      	mov	r1, r3
 8006a72:	f7fd fb63 	bl	800413c <move_window>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006a7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d131      	bne.n	8006ae8 <f_getfree+0x142>
							p = fs->win;
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	3338      	adds	r3, #56	; 0x38
 8006a88:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	899b      	ldrh	r3, [r3, #12]
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d10f      	bne.n	8006ab8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9a:	f7fd f8ad 	bl	8003bf8 <ld_word>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <f_getfree+0x104>
 8006aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	3302      	adds	r3, #2
 8006aae:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab2:	3b02      	subs	r3, #2
 8006ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab6:	e010      	b.n	8006ada <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aba:	f7fd f8b4 	bl	8003c26 <ld_dword>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d102      	bne.n	8006ace <f_getfree+0x128>
 8006ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aca:	3301      	adds	r3, #1
 8006acc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad6:	3b04      	subs	r3, #4
 8006ad8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006adc:	3b01      	subs	r3, #1
 8006ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1bd      	bne.n	8006a62 <f_getfree+0xbc>
 8006ae6:	e000      	b.n	8006aea <f_getfree+0x144>
							if (res != FR_OK) break;
 8006ae8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aee:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006af4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	791a      	ldrb	r2, [r3, #4]
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	f042 0201 	orr.w	r2, r2, #1
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006b04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3748      	adds	r7, #72	; 0x48
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006b26:	4b1e      	ldr	r3, [pc, #120]	; (8006ba0 <FATFS_LinkDriverEx+0x90>)
 8006b28:	7a5b      	ldrb	r3, [r3, #9]
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d131      	bne.n	8006b94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006b30:	4b1b      	ldr	r3, [pc, #108]	; (8006ba0 <FATFS_LinkDriverEx+0x90>)
 8006b32:	7a5b      	ldrb	r3, [r3, #9]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	461a      	mov	r2, r3
 8006b38:	4b19      	ldr	r3, [pc, #100]	; (8006ba0 <FATFS_LinkDriverEx+0x90>)
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006b3e:	4b18      	ldr	r3, [pc, #96]	; (8006ba0 <FATFS_LinkDriverEx+0x90>)
 8006b40:	7a5b      	ldrb	r3, [r3, #9]
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <FATFS_LinkDriverEx+0x90>)
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006b4e:	4b14      	ldr	r3, [pc, #80]	; (8006ba0 <FATFS_LinkDriverEx+0x90>)
 8006b50:	7a5b      	ldrb	r3, [r3, #9]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <FATFS_LinkDriverEx+0x90>)
 8006b58:	4413      	add	r3, r2
 8006b5a:	79fa      	ldrb	r2, [r7, #7]
 8006b5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006b5e:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <FATFS_LinkDriverEx+0x90>)
 8006b60:	7a5b      	ldrb	r3, [r3, #9]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	b2d1      	uxtb	r1, r2
 8006b68:	4a0d      	ldr	r2, [pc, #52]	; (8006ba0 <FATFS_LinkDriverEx+0x90>)
 8006b6a:	7251      	strb	r1, [r2, #9]
 8006b6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006b6e:	7dbb      	ldrb	r3, [r7, #22]
 8006b70:	3330      	adds	r3, #48	; 0x30
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	223a      	movs	r2, #58	; 0x3a
 8006b7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	3302      	adds	r3, #2
 8006b84:	222f      	movs	r2, #47	; 0x2f
 8006b86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	3303      	adds	r3, #3
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr
 8006ba0:	20002804 	.word	0x20002804

08006ba4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006bae:	2200      	movs	r2, #0
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff ffac 	bl	8006b10 <FATFS_LinkDriverEx>
 8006bb8:	4603      	mov	r3, r0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	6039      	str	r1, [r7, #0]
 8006bce:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006bd0:	88fb      	ldrh	r3, [r7, #6]
 8006bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd4:	d802      	bhi.n	8006bdc <ff_convert+0x18>
		c = chr;
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	81fb      	strh	r3, [r7, #14]
 8006bda:	e025      	b.n	8006c28 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	2bff      	cmp	r3, #255	; 0xff
 8006be6:	d805      	bhi.n	8006bf4 <ff_convert+0x30>
 8006be8:	88fb      	ldrh	r3, [r7, #6]
 8006bea:	3b80      	subs	r3, #128	; 0x80
 8006bec:	4a11      	ldr	r2, [pc, #68]	; (8006c34 <ff_convert+0x70>)
 8006bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bf2:	e000      	b.n	8006bf6 <ff_convert+0x32>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	81fb      	strh	r3, [r7, #14]
 8006bf8:	e016      	b.n	8006c28 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	81fb      	strh	r3, [r7, #14]
 8006bfe:	e009      	b.n	8006c14 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006c00:	89fb      	ldrh	r3, [r7, #14]
 8006c02:	4a0c      	ldr	r2, [pc, #48]	; (8006c34 <ff_convert+0x70>)
 8006c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c08:	88fa      	ldrh	r2, [r7, #6]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d006      	beq.n	8006c1c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006c0e:	89fb      	ldrh	r3, [r7, #14]
 8006c10:	3301      	adds	r3, #1
 8006c12:	81fb      	strh	r3, [r7, #14]
 8006c14:	89fb      	ldrh	r3, [r7, #14]
 8006c16:	2b7f      	cmp	r3, #127	; 0x7f
 8006c18:	d9f2      	bls.n	8006c00 <ff_convert+0x3c>
 8006c1a:	e000      	b.n	8006c1e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006c1c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006c1e:	89fb      	ldrh	r3, [r7, #14]
 8006c20:	3380      	adds	r3, #128	; 0x80
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006c28:	89fb      	ldrh	r3, [r7, #14]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr
 8006c34:	080078f4 	.word	0x080078f4

08006c38 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006c42:	88fb      	ldrh	r3, [r7, #6]
 8006c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c48:	d201      	bcs.n	8006c4e <ff_wtoupper+0x16>
 8006c4a:	4b3d      	ldr	r3, [pc, #244]	; (8006d40 <ff_wtoupper+0x108>)
 8006c4c:	e000      	b.n	8006c50 <ff_wtoupper+0x18>
 8006c4e:	4b3d      	ldr	r3, [pc, #244]	; (8006d44 <ff_wtoupper+0x10c>)
 8006c50:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	1c9a      	adds	r2, r3, #2
 8006c56:	617a      	str	r2, [r7, #20]
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006c5c:	8a7b      	ldrh	r3, [r7, #18]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d068      	beq.n	8006d34 <ff_wtoupper+0xfc>
 8006c62:	88fa      	ldrh	r2, [r7, #6]
 8006c64:	8a7b      	ldrh	r3, [r7, #18]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d364      	bcc.n	8006d34 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	1c9a      	adds	r2, r3, #2
 8006c6e:	617a      	str	r2, [r7, #20]
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	823b      	strh	r3, [r7, #16]
 8006c74:	8a3b      	ldrh	r3, [r7, #16]
 8006c76:	0a1b      	lsrs	r3, r3, #8
 8006c78:	81fb      	strh	r3, [r7, #14]
 8006c7a:	8a3b      	ldrh	r3, [r7, #16]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006c80:	88fa      	ldrh	r2, [r7, #6]
 8006c82:	8a79      	ldrh	r1, [r7, #18]
 8006c84:	8a3b      	ldrh	r3, [r7, #16]
 8006c86:	440b      	add	r3, r1
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	da49      	bge.n	8006d20 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006c8c:	89fb      	ldrh	r3, [r7, #14]
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d84f      	bhi.n	8006d32 <ff_wtoupper+0xfa>
 8006c92:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <ff_wtoupper+0x60>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006ccf 	.word	0x08006ccf
 8006ca0:	08006ce5 	.word	0x08006ce5
 8006ca4:	08006ced 	.word	0x08006ced
 8006ca8:	08006cf5 	.word	0x08006cf5
 8006cac:	08006cfd 	.word	0x08006cfd
 8006cb0:	08006d05 	.word	0x08006d05
 8006cb4:	08006d0d 	.word	0x08006d0d
 8006cb8:	08006d15 	.word	0x08006d15
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006cbc:	88fa      	ldrh	r2, [r7, #6]
 8006cbe:	8a7b      	ldrh	r3, [r7, #18]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	80fb      	strh	r3, [r7, #6]
 8006ccc:	e027      	b.n	8006d1e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006cce:	88fa      	ldrh	r2, [r7, #6]
 8006cd0:	8a7b      	ldrh	r3, [r7, #18]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	88fa      	ldrh	r2, [r7, #6]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	80fb      	strh	r3, [r7, #6]
 8006ce2:	e01c      	b.n	8006d1e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	3b10      	subs	r3, #16
 8006ce8:	80fb      	strh	r3, [r7, #6]
 8006cea:	e018      	b.n	8006d1e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	3b20      	subs	r3, #32
 8006cf0:	80fb      	strh	r3, [r7, #6]
 8006cf2:	e014      	b.n	8006d1e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006cf4:	88fb      	ldrh	r3, [r7, #6]
 8006cf6:	3b30      	subs	r3, #48	; 0x30
 8006cf8:	80fb      	strh	r3, [r7, #6]
 8006cfa:	e010      	b.n	8006d1e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	3b1a      	subs	r3, #26
 8006d00:	80fb      	strh	r3, [r7, #6]
 8006d02:	e00c      	b.n	8006d1e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	3308      	adds	r3, #8
 8006d08:	80fb      	strh	r3, [r7, #6]
 8006d0a:	e008      	b.n	8006d1e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006d0c:	88fb      	ldrh	r3, [r7, #6]
 8006d0e:	3b50      	subs	r3, #80	; 0x50
 8006d10:	80fb      	strh	r3, [r7, #6]
 8006d12:	e004      	b.n	8006d1e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006d14:	88fb      	ldrh	r3, [r7, #6]
 8006d16:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8006d1a:	80fb      	strh	r3, [r7, #6]
 8006d1c:	bf00      	nop
			}
			break;
 8006d1e:	e008      	b.n	8006d32 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006d20:	89fb      	ldrh	r3, [r7, #14]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d195      	bne.n	8006c52 <ff_wtoupper+0x1a>
 8006d26:	8a3b      	ldrh	r3, [r7, #16]
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006d30:	e78f      	b.n	8006c52 <ff_wtoupper+0x1a>
			break;
 8006d32:	bf00      	nop
	}

	return chr;
 8006d34:	88fb      	ldrh	r3, [r7, #6]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr
 8006d40:	080079f4 	.word	0x080079f4
 8006d44:	08007be8 	.word	0x08007be8

08006d48 <__errno>:
 8006d48:	4b01      	ldr	r3, [pc, #4]	; (8006d50 <__errno+0x8>)
 8006d4a:	6818      	ldr	r0, [r3, #0]
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	20000024 	.word	0x20000024

08006d54 <__libc_init_array>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	2600      	movs	r6, #0
 8006d58:	4d0c      	ldr	r5, [pc, #48]	; (8006d8c <__libc_init_array+0x38>)
 8006d5a:	4c0d      	ldr	r4, [pc, #52]	; (8006d90 <__libc_init_array+0x3c>)
 8006d5c:	1b64      	subs	r4, r4, r5
 8006d5e:	10a4      	asrs	r4, r4, #2
 8006d60:	42a6      	cmp	r6, r4
 8006d62:	d109      	bne.n	8006d78 <__libc_init_array+0x24>
 8006d64:	f000 fc9c 	bl	80076a0 <_init>
 8006d68:	2600      	movs	r6, #0
 8006d6a:	4d0a      	ldr	r5, [pc, #40]	; (8006d94 <__libc_init_array+0x40>)
 8006d6c:	4c0a      	ldr	r4, [pc, #40]	; (8006d98 <__libc_init_array+0x44>)
 8006d6e:	1b64      	subs	r4, r4, r5
 8006d70:	10a4      	asrs	r4, r4, #2
 8006d72:	42a6      	cmp	r6, r4
 8006d74:	d105      	bne.n	8006d82 <__libc_init_array+0x2e>
 8006d76:	bd70      	pop	{r4, r5, r6, pc}
 8006d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7c:	4798      	blx	r3
 8006d7e:	3601      	adds	r6, #1
 8006d80:	e7ee      	b.n	8006d60 <__libc_init_array+0xc>
 8006d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d86:	4798      	blx	r3
 8006d88:	3601      	adds	r6, #1
 8006d8a:	e7f2      	b.n	8006d72 <__libc_init_array+0x1e>
 8006d8c:	08007ce0 	.word	0x08007ce0
 8006d90:	08007ce0 	.word	0x08007ce0
 8006d94:	08007ce0 	.word	0x08007ce0
 8006d98:	08007ce4 	.word	0x08007ce4

08006d9c <memcpy>:
 8006d9c:	440a      	add	r2, r1
 8006d9e:	4291      	cmp	r1, r2
 8006da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006da4:	d100      	bne.n	8006da8 <memcpy+0xc>
 8006da6:	4770      	bx	lr
 8006da8:	b510      	push	{r4, lr}
 8006daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dae:	4291      	cmp	r1, r2
 8006db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006db4:	d1f9      	bne.n	8006daa <memcpy+0xe>
 8006db6:	bd10      	pop	{r4, pc}

08006db8 <memset>:
 8006db8:	4603      	mov	r3, r0
 8006dba:	4402      	add	r2, r0
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d100      	bne.n	8006dc2 <memset+0xa>
 8006dc0:	4770      	bx	lr
 8006dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8006dc6:	e7f9      	b.n	8006dbc <memset+0x4>

08006dc8 <siprintf>:
 8006dc8:	b40e      	push	{r1, r2, r3}
 8006dca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dce:	b500      	push	{lr}
 8006dd0:	b09c      	sub	sp, #112	; 0x70
 8006dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8006dd4:	9002      	str	r0, [sp, #8]
 8006dd6:	9006      	str	r0, [sp, #24]
 8006dd8:	9107      	str	r1, [sp, #28]
 8006dda:	9104      	str	r1, [sp, #16]
 8006ddc:	4808      	ldr	r0, [pc, #32]	; (8006e00 <siprintf+0x38>)
 8006dde:	4909      	ldr	r1, [pc, #36]	; (8006e04 <siprintf+0x3c>)
 8006de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de4:	9105      	str	r1, [sp, #20]
 8006de6:	6800      	ldr	r0, [r0, #0]
 8006de8:	a902      	add	r1, sp, #8
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	f000 f868 	bl	8006ec0 <_svfiprintf_r>
 8006df0:	2200      	movs	r2, #0
 8006df2:	9b02      	ldr	r3, [sp, #8]
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	b01c      	add	sp, #112	; 0x70
 8006df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dfc:	b003      	add	sp, #12
 8006dfe:	4770      	bx	lr
 8006e00:	20000024 	.word	0x20000024
 8006e04:	ffff0208 	.word	0xffff0208

08006e08 <__ssputs_r>:
 8006e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	688e      	ldr	r6, [r1, #8]
 8006e0e:	4682      	mov	sl, r0
 8006e10:	429e      	cmp	r6, r3
 8006e12:	460c      	mov	r4, r1
 8006e14:	4690      	mov	r8, r2
 8006e16:	461f      	mov	r7, r3
 8006e18:	d838      	bhi.n	8006e8c <__ssputs_r+0x84>
 8006e1a:	898a      	ldrh	r2, [r1, #12]
 8006e1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e20:	d032      	beq.n	8006e88 <__ssputs_r+0x80>
 8006e22:	6825      	ldr	r5, [r4, #0]
 8006e24:	6909      	ldr	r1, [r1, #16]
 8006e26:	3301      	adds	r3, #1
 8006e28:	eba5 0901 	sub.w	r9, r5, r1
 8006e2c:	6965      	ldr	r5, [r4, #20]
 8006e2e:	444b      	add	r3, r9
 8006e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e38:	106d      	asrs	r5, r5, #1
 8006e3a:	429d      	cmp	r5, r3
 8006e3c:	bf38      	it	cc
 8006e3e:	461d      	movcc	r5, r3
 8006e40:	0553      	lsls	r3, r2, #21
 8006e42:	d531      	bpl.n	8006ea8 <__ssputs_r+0xa0>
 8006e44:	4629      	mov	r1, r5
 8006e46:	f000 fb61 	bl	800750c <_malloc_r>
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	b950      	cbnz	r0, 8006e64 <__ssputs_r+0x5c>
 8006e4e:	230c      	movs	r3, #12
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	f8ca 3000 	str.w	r3, [sl]
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e64:	464a      	mov	r2, r9
 8006e66:	6921      	ldr	r1, [r4, #16]
 8006e68:	f7ff ff98 	bl	8006d9c <memcpy>
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e76:	81a3      	strh	r3, [r4, #12]
 8006e78:	6126      	str	r6, [r4, #16]
 8006e7a:	444e      	add	r6, r9
 8006e7c:	6026      	str	r6, [r4, #0]
 8006e7e:	463e      	mov	r6, r7
 8006e80:	6165      	str	r5, [r4, #20]
 8006e82:	eba5 0509 	sub.w	r5, r5, r9
 8006e86:	60a5      	str	r5, [r4, #8]
 8006e88:	42be      	cmp	r6, r7
 8006e8a:	d900      	bls.n	8006e8e <__ssputs_r+0x86>
 8006e8c:	463e      	mov	r6, r7
 8006e8e:	4632      	mov	r2, r6
 8006e90:	4641      	mov	r1, r8
 8006e92:	6820      	ldr	r0, [r4, #0]
 8006e94:	f000 fab8 	bl	8007408 <memmove>
 8006e98:	68a3      	ldr	r3, [r4, #8]
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	1b9b      	subs	r3, r3, r6
 8006e9e:	60a3      	str	r3, [r4, #8]
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	4433      	add	r3, r6
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	e7db      	b.n	8006e60 <__ssputs_r+0x58>
 8006ea8:	462a      	mov	r2, r5
 8006eaa:	f000 fba3 	bl	80075f4 <_realloc_r>
 8006eae:	4606      	mov	r6, r0
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d1e1      	bne.n	8006e78 <__ssputs_r+0x70>
 8006eb4:	4650      	mov	r0, sl
 8006eb6:	6921      	ldr	r1, [r4, #16]
 8006eb8:	f000 fac0 	bl	800743c <_free_r>
 8006ebc:	e7c7      	b.n	8006e4e <__ssputs_r+0x46>
	...

08006ec0 <_svfiprintf_r>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	4698      	mov	r8, r3
 8006ec6:	898b      	ldrh	r3, [r1, #12]
 8006ec8:	4607      	mov	r7, r0
 8006eca:	061b      	lsls	r3, r3, #24
 8006ecc:	460d      	mov	r5, r1
 8006ece:	4614      	mov	r4, r2
 8006ed0:	b09d      	sub	sp, #116	; 0x74
 8006ed2:	d50e      	bpl.n	8006ef2 <_svfiprintf_r+0x32>
 8006ed4:	690b      	ldr	r3, [r1, #16]
 8006ed6:	b963      	cbnz	r3, 8006ef2 <_svfiprintf_r+0x32>
 8006ed8:	2140      	movs	r1, #64	; 0x40
 8006eda:	f000 fb17 	bl	800750c <_malloc_r>
 8006ede:	6028      	str	r0, [r5, #0]
 8006ee0:	6128      	str	r0, [r5, #16]
 8006ee2:	b920      	cbnz	r0, 8006eee <_svfiprintf_r+0x2e>
 8006ee4:	230c      	movs	r3, #12
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	e0d1      	b.n	8007092 <_svfiprintf_r+0x1d2>
 8006eee:	2340      	movs	r3, #64	; 0x40
 8006ef0:	616b      	str	r3, [r5, #20]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef6:	2320      	movs	r3, #32
 8006ef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006efc:	2330      	movs	r3, #48	; 0x30
 8006efe:	f04f 0901 	mov.w	r9, #1
 8006f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80070ac <_svfiprintf_r+0x1ec>
 8006f0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f0e:	4623      	mov	r3, r4
 8006f10:	469a      	mov	sl, r3
 8006f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f16:	b10a      	cbz	r2, 8006f1c <_svfiprintf_r+0x5c>
 8006f18:	2a25      	cmp	r2, #37	; 0x25
 8006f1a:	d1f9      	bne.n	8006f10 <_svfiprintf_r+0x50>
 8006f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8006f20:	d00b      	beq.n	8006f3a <_svfiprintf_r+0x7a>
 8006f22:	465b      	mov	r3, fp
 8006f24:	4622      	mov	r2, r4
 8006f26:	4629      	mov	r1, r5
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f7ff ff6d 	bl	8006e08 <__ssputs_r>
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f000 80aa 	beq.w	8007088 <_svfiprintf_r+0x1c8>
 8006f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f36:	445a      	add	r2, fp
 8006f38:	9209      	str	r2, [sp, #36]	; 0x24
 8006f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80a2 	beq.w	8007088 <_svfiprintf_r+0x1c8>
 8006f44:	2300      	movs	r3, #0
 8006f46:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f4e:	f10a 0a01 	add.w	sl, sl, #1
 8006f52:	9304      	str	r3, [sp, #16]
 8006f54:	9307      	str	r3, [sp, #28]
 8006f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8006f5c:	4654      	mov	r4, sl
 8006f5e:	2205      	movs	r2, #5
 8006f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f64:	4851      	ldr	r0, [pc, #324]	; (80070ac <_svfiprintf_r+0x1ec>)
 8006f66:	f000 fa41 	bl	80073ec <memchr>
 8006f6a:	9a04      	ldr	r2, [sp, #16]
 8006f6c:	b9d8      	cbnz	r0, 8006fa6 <_svfiprintf_r+0xe6>
 8006f6e:	06d0      	lsls	r0, r2, #27
 8006f70:	bf44      	itt	mi
 8006f72:	2320      	movmi	r3, #32
 8006f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f78:	0711      	lsls	r1, r2, #28
 8006f7a:	bf44      	itt	mi
 8006f7c:	232b      	movmi	r3, #43	; 0x2b
 8006f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f82:	f89a 3000 	ldrb.w	r3, [sl]
 8006f86:	2b2a      	cmp	r3, #42	; 0x2a
 8006f88:	d015      	beq.n	8006fb6 <_svfiprintf_r+0xf6>
 8006f8a:	4654      	mov	r4, sl
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	f04f 0c0a 	mov.w	ip, #10
 8006f92:	9a07      	ldr	r2, [sp, #28]
 8006f94:	4621      	mov	r1, r4
 8006f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f9a:	3b30      	subs	r3, #48	; 0x30
 8006f9c:	2b09      	cmp	r3, #9
 8006f9e:	d94e      	bls.n	800703e <_svfiprintf_r+0x17e>
 8006fa0:	b1b0      	cbz	r0, 8006fd0 <_svfiprintf_r+0x110>
 8006fa2:	9207      	str	r2, [sp, #28]
 8006fa4:	e014      	b.n	8006fd0 <_svfiprintf_r+0x110>
 8006fa6:	eba0 0308 	sub.w	r3, r0, r8
 8006faa:	fa09 f303 	lsl.w	r3, r9, r3
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	46a2      	mov	sl, r4
 8006fb2:	9304      	str	r3, [sp, #16]
 8006fb4:	e7d2      	b.n	8006f5c <_svfiprintf_r+0x9c>
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	1d19      	adds	r1, r3, #4
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	9103      	str	r1, [sp, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	bfbb      	ittet	lt
 8006fc2:	425b      	neglt	r3, r3
 8006fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8006fc8:	9307      	strge	r3, [sp, #28]
 8006fca:	9307      	strlt	r3, [sp, #28]
 8006fcc:	bfb8      	it	lt
 8006fce:	9204      	strlt	r2, [sp, #16]
 8006fd0:	7823      	ldrb	r3, [r4, #0]
 8006fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8006fd4:	d10c      	bne.n	8006ff0 <_svfiprintf_r+0x130>
 8006fd6:	7863      	ldrb	r3, [r4, #1]
 8006fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8006fda:	d135      	bne.n	8007048 <_svfiprintf_r+0x188>
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	3402      	adds	r4, #2
 8006fe0:	1d1a      	adds	r2, r3, #4
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	9203      	str	r2, [sp, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	bfb8      	it	lt
 8006fea:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fee:	9305      	str	r3, [sp, #20]
 8006ff0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80070b0 <_svfiprintf_r+0x1f0>
 8006ff4:	2203      	movs	r2, #3
 8006ff6:	4650      	mov	r0, sl
 8006ff8:	7821      	ldrb	r1, [r4, #0]
 8006ffa:	f000 f9f7 	bl	80073ec <memchr>
 8006ffe:	b140      	cbz	r0, 8007012 <_svfiprintf_r+0x152>
 8007000:	2340      	movs	r3, #64	; 0x40
 8007002:	eba0 000a 	sub.w	r0, r0, sl
 8007006:	fa03 f000 	lsl.w	r0, r3, r0
 800700a:	9b04      	ldr	r3, [sp, #16]
 800700c:	3401      	adds	r4, #1
 800700e:	4303      	orrs	r3, r0
 8007010:	9304      	str	r3, [sp, #16]
 8007012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007016:	2206      	movs	r2, #6
 8007018:	4826      	ldr	r0, [pc, #152]	; (80070b4 <_svfiprintf_r+0x1f4>)
 800701a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800701e:	f000 f9e5 	bl	80073ec <memchr>
 8007022:	2800      	cmp	r0, #0
 8007024:	d038      	beq.n	8007098 <_svfiprintf_r+0x1d8>
 8007026:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <_svfiprintf_r+0x1f8>)
 8007028:	bb1b      	cbnz	r3, 8007072 <_svfiprintf_r+0x1b2>
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	3307      	adds	r3, #7
 800702e:	f023 0307 	bic.w	r3, r3, #7
 8007032:	3308      	adds	r3, #8
 8007034:	9303      	str	r3, [sp, #12]
 8007036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007038:	4433      	add	r3, r6
 800703a:	9309      	str	r3, [sp, #36]	; 0x24
 800703c:	e767      	b.n	8006f0e <_svfiprintf_r+0x4e>
 800703e:	460c      	mov	r4, r1
 8007040:	2001      	movs	r0, #1
 8007042:	fb0c 3202 	mla	r2, ip, r2, r3
 8007046:	e7a5      	b.n	8006f94 <_svfiprintf_r+0xd4>
 8007048:	2300      	movs	r3, #0
 800704a:	f04f 0c0a 	mov.w	ip, #10
 800704e:	4619      	mov	r1, r3
 8007050:	3401      	adds	r4, #1
 8007052:	9305      	str	r3, [sp, #20]
 8007054:	4620      	mov	r0, r4
 8007056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800705a:	3a30      	subs	r2, #48	; 0x30
 800705c:	2a09      	cmp	r2, #9
 800705e:	d903      	bls.n	8007068 <_svfiprintf_r+0x1a8>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0c5      	beq.n	8006ff0 <_svfiprintf_r+0x130>
 8007064:	9105      	str	r1, [sp, #20]
 8007066:	e7c3      	b.n	8006ff0 <_svfiprintf_r+0x130>
 8007068:	4604      	mov	r4, r0
 800706a:	2301      	movs	r3, #1
 800706c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007070:	e7f0      	b.n	8007054 <_svfiprintf_r+0x194>
 8007072:	ab03      	add	r3, sp, #12
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	462a      	mov	r2, r5
 8007078:	4638      	mov	r0, r7
 800707a:	4b10      	ldr	r3, [pc, #64]	; (80070bc <_svfiprintf_r+0x1fc>)
 800707c:	a904      	add	r1, sp, #16
 800707e:	f3af 8000 	nop.w
 8007082:	1c42      	adds	r2, r0, #1
 8007084:	4606      	mov	r6, r0
 8007086:	d1d6      	bne.n	8007036 <_svfiprintf_r+0x176>
 8007088:	89ab      	ldrh	r3, [r5, #12]
 800708a:	065b      	lsls	r3, r3, #25
 800708c:	f53f af2c 	bmi.w	8006ee8 <_svfiprintf_r+0x28>
 8007090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007092:	b01d      	add	sp, #116	; 0x74
 8007094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007098:	ab03      	add	r3, sp, #12
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	462a      	mov	r2, r5
 800709e:	4638      	mov	r0, r7
 80070a0:	4b06      	ldr	r3, [pc, #24]	; (80070bc <_svfiprintf_r+0x1fc>)
 80070a2:	a904      	add	r1, sp, #16
 80070a4:	f000 f87c 	bl	80071a0 <_printf_i>
 80070a8:	e7eb      	b.n	8007082 <_svfiprintf_r+0x1c2>
 80070aa:	bf00      	nop
 80070ac:	08007ca4 	.word	0x08007ca4
 80070b0:	08007caa 	.word	0x08007caa
 80070b4:	08007cae 	.word	0x08007cae
 80070b8:	00000000 	.word	0x00000000
 80070bc:	08006e09 	.word	0x08006e09

080070c0 <_printf_common>:
 80070c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	4616      	mov	r6, r2
 80070c6:	4699      	mov	r9, r3
 80070c8:	688a      	ldr	r2, [r1, #8]
 80070ca:	690b      	ldr	r3, [r1, #16]
 80070cc:	4607      	mov	r7, r0
 80070ce:	4293      	cmp	r3, r2
 80070d0:	bfb8      	it	lt
 80070d2:	4613      	movlt	r3, r2
 80070d4:	6033      	str	r3, [r6, #0]
 80070d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070da:	460c      	mov	r4, r1
 80070dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070e0:	b10a      	cbz	r2, 80070e6 <_printf_common+0x26>
 80070e2:	3301      	adds	r3, #1
 80070e4:	6033      	str	r3, [r6, #0]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	0699      	lsls	r1, r3, #26
 80070ea:	bf42      	ittt	mi
 80070ec:	6833      	ldrmi	r3, [r6, #0]
 80070ee:	3302      	addmi	r3, #2
 80070f0:	6033      	strmi	r3, [r6, #0]
 80070f2:	6825      	ldr	r5, [r4, #0]
 80070f4:	f015 0506 	ands.w	r5, r5, #6
 80070f8:	d106      	bne.n	8007108 <_printf_common+0x48>
 80070fa:	f104 0a19 	add.w	sl, r4, #25
 80070fe:	68e3      	ldr	r3, [r4, #12]
 8007100:	6832      	ldr	r2, [r6, #0]
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	42ab      	cmp	r3, r5
 8007106:	dc28      	bgt.n	800715a <_printf_common+0x9a>
 8007108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800710c:	1e13      	subs	r3, r2, #0
 800710e:	6822      	ldr	r2, [r4, #0]
 8007110:	bf18      	it	ne
 8007112:	2301      	movne	r3, #1
 8007114:	0692      	lsls	r2, r2, #26
 8007116:	d42d      	bmi.n	8007174 <_printf_common+0xb4>
 8007118:	4649      	mov	r1, r9
 800711a:	4638      	mov	r0, r7
 800711c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007120:	47c0      	blx	r8
 8007122:	3001      	adds	r0, #1
 8007124:	d020      	beq.n	8007168 <_printf_common+0xa8>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	68e5      	ldr	r5, [r4, #12]
 800712a:	f003 0306 	and.w	r3, r3, #6
 800712e:	2b04      	cmp	r3, #4
 8007130:	bf18      	it	ne
 8007132:	2500      	movne	r5, #0
 8007134:	6832      	ldr	r2, [r6, #0]
 8007136:	f04f 0600 	mov.w	r6, #0
 800713a:	68a3      	ldr	r3, [r4, #8]
 800713c:	bf08      	it	eq
 800713e:	1aad      	subeq	r5, r5, r2
 8007140:	6922      	ldr	r2, [r4, #16]
 8007142:	bf08      	it	eq
 8007144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007148:	4293      	cmp	r3, r2
 800714a:	bfc4      	itt	gt
 800714c:	1a9b      	subgt	r3, r3, r2
 800714e:	18ed      	addgt	r5, r5, r3
 8007150:	341a      	adds	r4, #26
 8007152:	42b5      	cmp	r5, r6
 8007154:	d11a      	bne.n	800718c <_printf_common+0xcc>
 8007156:	2000      	movs	r0, #0
 8007158:	e008      	b.n	800716c <_printf_common+0xac>
 800715a:	2301      	movs	r3, #1
 800715c:	4652      	mov	r2, sl
 800715e:	4649      	mov	r1, r9
 8007160:	4638      	mov	r0, r7
 8007162:	47c0      	blx	r8
 8007164:	3001      	adds	r0, #1
 8007166:	d103      	bne.n	8007170 <_printf_common+0xb0>
 8007168:	f04f 30ff 	mov.w	r0, #4294967295
 800716c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007170:	3501      	adds	r5, #1
 8007172:	e7c4      	b.n	80070fe <_printf_common+0x3e>
 8007174:	2030      	movs	r0, #48	; 0x30
 8007176:	18e1      	adds	r1, r4, r3
 8007178:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007182:	4422      	add	r2, r4
 8007184:	3302      	adds	r3, #2
 8007186:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800718a:	e7c5      	b.n	8007118 <_printf_common+0x58>
 800718c:	2301      	movs	r3, #1
 800718e:	4622      	mov	r2, r4
 8007190:	4649      	mov	r1, r9
 8007192:	4638      	mov	r0, r7
 8007194:	47c0      	blx	r8
 8007196:	3001      	adds	r0, #1
 8007198:	d0e6      	beq.n	8007168 <_printf_common+0xa8>
 800719a:	3601      	adds	r6, #1
 800719c:	e7d9      	b.n	8007152 <_printf_common+0x92>
	...

080071a0 <_printf_i>:
 80071a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a4:	7e0f      	ldrb	r7, [r1, #24]
 80071a6:	4691      	mov	r9, r2
 80071a8:	2f78      	cmp	r7, #120	; 0x78
 80071aa:	4680      	mov	r8, r0
 80071ac:	460c      	mov	r4, r1
 80071ae:	469a      	mov	sl, r3
 80071b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071b6:	d807      	bhi.n	80071c8 <_printf_i+0x28>
 80071b8:	2f62      	cmp	r7, #98	; 0x62
 80071ba:	d80a      	bhi.n	80071d2 <_printf_i+0x32>
 80071bc:	2f00      	cmp	r7, #0
 80071be:	f000 80d9 	beq.w	8007374 <_printf_i+0x1d4>
 80071c2:	2f58      	cmp	r7, #88	; 0x58
 80071c4:	f000 80a4 	beq.w	8007310 <_printf_i+0x170>
 80071c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071d0:	e03a      	b.n	8007248 <_printf_i+0xa8>
 80071d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071d6:	2b15      	cmp	r3, #21
 80071d8:	d8f6      	bhi.n	80071c8 <_printf_i+0x28>
 80071da:	a101      	add	r1, pc, #4	; (adr r1, 80071e0 <_printf_i+0x40>)
 80071dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071e0:	08007239 	.word	0x08007239
 80071e4:	0800724d 	.word	0x0800724d
 80071e8:	080071c9 	.word	0x080071c9
 80071ec:	080071c9 	.word	0x080071c9
 80071f0:	080071c9 	.word	0x080071c9
 80071f4:	080071c9 	.word	0x080071c9
 80071f8:	0800724d 	.word	0x0800724d
 80071fc:	080071c9 	.word	0x080071c9
 8007200:	080071c9 	.word	0x080071c9
 8007204:	080071c9 	.word	0x080071c9
 8007208:	080071c9 	.word	0x080071c9
 800720c:	0800735b 	.word	0x0800735b
 8007210:	0800727d 	.word	0x0800727d
 8007214:	0800733d 	.word	0x0800733d
 8007218:	080071c9 	.word	0x080071c9
 800721c:	080071c9 	.word	0x080071c9
 8007220:	0800737d 	.word	0x0800737d
 8007224:	080071c9 	.word	0x080071c9
 8007228:	0800727d 	.word	0x0800727d
 800722c:	080071c9 	.word	0x080071c9
 8007230:	080071c9 	.word	0x080071c9
 8007234:	08007345 	.word	0x08007345
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	1d1a      	adds	r2, r3, #4
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	602a      	str	r2, [r5, #0]
 8007240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007248:	2301      	movs	r3, #1
 800724a:	e0a4      	b.n	8007396 <_printf_i+0x1f6>
 800724c:	6820      	ldr	r0, [r4, #0]
 800724e:	6829      	ldr	r1, [r5, #0]
 8007250:	0606      	lsls	r6, r0, #24
 8007252:	f101 0304 	add.w	r3, r1, #4
 8007256:	d50a      	bpl.n	800726e <_printf_i+0xce>
 8007258:	680e      	ldr	r6, [r1, #0]
 800725a:	602b      	str	r3, [r5, #0]
 800725c:	2e00      	cmp	r6, #0
 800725e:	da03      	bge.n	8007268 <_printf_i+0xc8>
 8007260:	232d      	movs	r3, #45	; 0x2d
 8007262:	4276      	negs	r6, r6
 8007264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007268:	230a      	movs	r3, #10
 800726a:	485e      	ldr	r0, [pc, #376]	; (80073e4 <_printf_i+0x244>)
 800726c:	e019      	b.n	80072a2 <_printf_i+0x102>
 800726e:	680e      	ldr	r6, [r1, #0]
 8007270:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007274:	602b      	str	r3, [r5, #0]
 8007276:	bf18      	it	ne
 8007278:	b236      	sxthne	r6, r6
 800727a:	e7ef      	b.n	800725c <_printf_i+0xbc>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	6820      	ldr	r0, [r4, #0]
 8007280:	1d19      	adds	r1, r3, #4
 8007282:	6029      	str	r1, [r5, #0]
 8007284:	0601      	lsls	r1, r0, #24
 8007286:	d501      	bpl.n	800728c <_printf_i+0xec>
 8007288:	681e      	ldr	r6, [r3, #0]
 800728a:	e002      	b.n	8007292 <_printf_i+0xf2>
 800728c:	0646      	lsls	r6, r0, #25
 800728e:	d5fb      	bpl.n	8007288 <_printf_i+0xe8>
 8007290:	881e      	ldrh	r6, [r3, #0]
 8007292:	2f6f      	cmp	r7, #111	; 0x6f
 8007294:	bf0c      	ite	eq
 8007296:	2308      	moveq	r3, #8
 8007298:	230a      	movne	r3, #10
 800729a:	4852      	ldr	r0, [pc, #328]	; (80073e4 <_printf_i+0x244>)
 800729c:	2100      	movs	r1, #0
 800729e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072a2:	6865      	ldr	r5, [r4, #4]
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	bfa8      	it	ge
 80072a8:	6821      	ldrge	r1, [r4, #0]
 80072aa:	60a5      	str	r5, [r4, #8]
 80072ac:	bfa4      	itt	ge
 80072ae:	f021 0104 	bicge.w	r1, r1, #4
 80072b2:	6021      	strge	r1, [r4, #0]
 80072b4:	b90e      	cbnz	r6, 80072ba <_printf_i+0x11a>
 80072b6:	2d00      	cmp	r5, #0
 80072b8:	d04d      	beq.n	8007356 <_printf_i+0x1b6>
 80072ba:	4615      	mov	r5, r2
 80072bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80072c0:	fb03 6711 	mls	r7, r3, r1, r6
 80072c4:	5dc7      	ldrb	r7, [r0, r7]
 80072c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072ca:	4637      	mov	r7, r6
 80072cc:	42bb      	cmp	r3, r7
 80072ce:	460e      	mov	r6, r1
 80072d0:	d9f4      	bls.n	80072bc <_printf_i+0x11c>
 80072d2:	2b08      	cmp	r3, #8
 80072d4:	d10b      	bne.n	80072ee <_printf_i+0x14e>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	07de      	lsls	r6, r3, #31
 80072da:	d508      	bpl.n	80072ee <_printf_i+0x14e>
 80072dc:	6923      	ldr	r3, [r4, #16]
 80072de:	6861      	ldr	r1, [r4, #4]
 80072e0:	4299      	cmp	r1, r3
 80072e2:	bfde      	ittt	le
 80072e4:	2330      	movle	r3, #48	; 0x30
 80072e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072ee:	1b52      	subs	r2, r2, r5
 80072f0:	6122      	str	r2, [r4, #16]
 80072f2:	464b      	mov	r3, r9
 80072f4:	4621      	mov	r1, r4
 80072f6:	4640      	mov	r0, r8
 80072f8:	f8cd a000 	str.w	sl, [sp]
 80072fc:	aa03      	add	r2, sp, #12
 80072fe:	f7ff fedf 	bl	80070c0 <_printf_common>
 8007302:	3001      	adds	r0, #1
 8007304:	d14c      	bne.n	80073a0 <_printf_i+0x200>
 8007306:	f04f 30ff 	mov.w	r0, #4294967295
 800730a:	b004      	add	sp, #16
 800730c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007310:	4834      	ldr	r0, [pc, #208]	; (80073e4 <_printf_i+0x244>)
 8007312:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007316:	6829      	ldr	r1, [r5, #0]
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	f851 6b04 	ldr.w	r6, [r1], #4
 800731e:	6029      	str	r1, [r5, #0]
 8007320:	061d      	lsls	r5, r3, #24
 8007322:	d514      	bpl.n	800734e <_printf_i+0x1ae>
 8007324:	07df      	lsls	r7, r3, #31
 8007326:	bf44      	itt	mi
 8007328:	f043 0320 	orrmi.w	r3, r3, #32
 800732c:	6023      	strmi	r3, [r4, #0]
 800732e:	b91e      	cbnz	r6, 8007338 <_printf_i+0x198>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	f023 0320 	bic.w	r3, r3, #32
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	2310      	movs	r3, #16
 800733a:	e7af      	b.n	800729c <_printf_i+0xfc>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	f043 0320 	orr.w	r3, r3, #32
 8007342:	6023      	str	r3, [r4, #0]
 8007344:	2378      	movs	r3, #120	; 0x78
 8007346:	4828      	ldr	r0, [pc, #160]	; (80073e8 <_printf_i+0x248>)
 8007348:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800734c:	e7e3      	b.n	8007316 <_printf_i+0x176>
 800734e:	0659      	lsls	r1, r3, #25
 8007350:	bf48      	it	mi
 8007352:	b2b6      	uxthmi	r6, r6
 8007354:	e7e6      	b.n	8007324 <_printf_i+0x184>
 8007356:	4615      	mov	r5, r2
 8007358:	e7bb      	b.n	80072d2 <_printf_i+0x132>
 800735a:	682b      	ldr	r3, [r5, #0]
 800735c:	6826      	ldr	r6, [r4, #0]
 800735e:	1d18      	adds	r0, r3, #4
 8007360:	6961      	ldr	r1, [r4, #20]
 8007362:	6028      	str	r0, [r5, #0]
 8007364:	0635      	lsls	r5, r6, #24
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	d501      	bpl.n	800736e <_printf_i+0x1ce>
 800736a:	6019      	str	r1, [r3, #0]
 800736c:	e002      	b.n	8007374 <_printf_i+0x1d4>
 800736e:	0670      	lsls	r0, r6, #25
 8007370:	d5fb      	bpl.n	800736a <_printf_i+0x1ca>
 8007372:	8019      	strh	r1, [r3, #0]
 8007374:	2300      	movs	r3, #0
 8007376:	4615      	mov	r5, r2
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	e7ba      	b.n	80072f2 <_printf_i+0x152>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	2100      	movs	r1, #0
 8007380:	1d1a      	adds	r2, r3, #4
 8007382:	602a      	str	r2, [r5, #0]
 8007384:	681d      	ldr	r5, [r3, #0]
 8007386:	6862      	ldr	r2, [r4, #4]
 8007388:	4628      	mov	r0, r5
 800738a:	f000 f82f 	bl	80073ec <memchr>
 800738e:	b108      	cbz	r0, 8007394 <_printf_i+0x1f4>
 8007390:	1b40      	subs	r0, r0, r5
 8007392:	6060      	str	r0, [r4, #4]
 8007394:	6863      	ldr	r3, [r4, #4]
 8007396:	6123      	str	r3, [r4, #16]
 8007398:	2300      	movs	r3, #0
 800739a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800739e:	e7a8      	b.n	80072f2 <_printf_i+0x152>
 80073a0:	462a      	mov	r2, r5
 80073a2:	4649      	mov	r1, r9
 80073a4:	4640      	mov	r0, r8
 80073a6:	6923      	ldr	r3, [r4, #16]
 80073a8:	47d0      	blx	sl
 80073aa:	3001      	adds	r0, #1
 80073ac:	d0ab      	beq.n	8007306 <_printf_i+0x166>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	079b      	lsls	r3, r3, #30
 80073b2:	d413      	bmi.n	80073dc <_printf_i+0x23c>
 80073b4:	68e0      	ldr	r0, [r4, #12]
 80073b6:	9b03      	ldr	r3, [sp, #12]
 80073b8:	4298      	cmp	r0, r3
 80073ba:	bfb8      	it	lt
 80073bc:	4618      	movlt	r0, r3
 80073be:	e7a4      	b.n	800730a <_printf_i+0x16a>
 80073c0:	2301      	movs	r3, #1
 80073c2:	4632      	mov	r2, r6
 80073c4:	4649      	mov	r1, r9
 80073c6:	4640      	mov	r0, r8
 80073c8:	47d0      	blx	sl
 80073ca:	3001      	adds	r0, #1
 80073cc:	d09b      	beq.n	8007306 <_printf_i+0x166>
 80073ce:	3501      	adds	r5, #1
 80073d0:	68e3      	ldr	r3, [r4, #12]
 80073d2:	9903      	ldr	r1, [sp, #12]
 80073d4:	1a5b      	subs	r3, r3, r1
 80073d6:	42ab      	cmp	r3, r5
 80073d8:	dcf2      	bgt.n	80073c0 <_printf_i+0x220>
 80073da:	e7eb      	b.n	80073b4 <_printf_i+0x214>
 80073dc:	2500      	movs	r5, #0
 80073de:	f104 0619 	add.w	r6, r4, #25
 80073e2:	e7f5      	b.n	80073d0 <_printf_i+0x230>
 80073e4:	08007cb5 	.word	0x08007cb5
 80073e8:	08007cc6 	.word	0x08007cc6

080073ec <memchr>:
 80073ec:	4603      	mov	r3, r0
 80073ee:	b510      	push	{r4, lr}
 80073f0:	b2c9      	uxtb	r1, r1
 80073f2:	4402      	add	r2, r0
 80073f4:	4293      	cmp	r3, r2
 80073f6:	4618      	mov	r0, r3
 80073f8:	d101      	bne.n	80073fe <memchr+0x12>
 80073fa:	2000      	movs	r0, #0
 80073fc:	e003      	b.n	8007406 <memchr+0x1a>
 80073fe:	7804      	ldrb	r4, [r0, #0]
 8007400:	3301      	adds	r3, #1
 8007402:	428c      	cmp	r4, r1
 8007404:	d1f6      	bne.n	80073f4 <memchr+0x8>
 8007406:	bd10      	pop	{r4, pc}

08007408 <memmove>:
 8007408:	4288      	cmp	r0, r1
 800740a:	b510      	push	{r4, lr}
 800740c:	eb01 0402 	add.w	r4, r1, r2
 8007410:	d902      	bls.n	8007418 <memmove+0x10>
 8007412:	4284      	cmp	r4, r0
 8007414:	4623      	mov	r3, r4
 8007416:	d807      	bhi.n	8007428 <memmove+0x20>
 8007418:	1e43      	subs	r3, r0, #1
 800741a:	42a1      	cmp	r1, r4
 800741c:	d008      	beq.n	8007430 <memmove+0x28>
 800741e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007422:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007426:	e7f8      	b.n	800741a <memmove+0x12>
 8007428:	4601      	mov	r1, r0
 800742a:	4402      	add	r2, r0
 800742c:	428a      	cmp	r2, r1
 800742e:	d100      	bne.n	8007432 <memmove+0x2a>
 8007430:	bd10      	pop	{r4, pc}
 8007432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800743a:	e7f7      	b.n	800742c <memmove+0x24>

0800743c <_free_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4605      	mov	r5, r0
 8007440:	2900      	cmp	r1, #0
 8007442:	d040      	beq.n	80074c6 <_free_r+0x8a>
 8007444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007448:	1f0c      	subs	r4, r1, #4
 800744a:	2b00      	cmp	r3, #0
 800744c:	bfb8      	it	lt
 800744e:	18e4      	addlt	r4, r4, r3
 8007450:	f000 f910 	bl	8007674 <__malloc_lock>
 8007454:	4a1c      	ldr	r2, [pc, #112]	; (80074c8 <_free_r+0x8c>)
 8007456:	6813      	ldr	r3, [r2, #0]
 8007458:	b933      	cbnz	r3, 8007468 <_free_r+0x2c>
 800745a:	6063      	str	r3, [r4, #4]
 800745c:	6014      	str	r4, [r2, #0]
 800745e:	4628      	mov	r0, r5
 8007460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007464:	f000 b90c 	b.w	8007680 <__malloc_unlock>
 8007468:	42a3      	cmp	r3, r4
 800746a:	d908      	bls.n	800747e <_free_r+0x42>
 800746c:	6820      	ldr	r0, [r4, #0]
 800746e:	1821      	adds	r1, r4, r0
 8007470:	428b      	cmp	r3, r1
 8007472:	bf01      	itttt	eq
 8007474:	6819      	ldreq	r1, [r3, #0]
 8007476:	685b      	ldreq	r3, [r3, #4]
 8007478:	1809      	addeq	r1, r1, r0
 800747a:	6021      	streq	r1, [r4, #0]
 800747c:	e7ed      	b.n	800745a <_free_r+0x1e>
 800747e:	461a      	mov	r2, r3
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	b10b      	cbz	r3, 8007488 <_free_r+0x4c>
 8007484:	42a3      	cmp	r3, r4
 8007486:	d9fa      	bls.n	800747e <_free_r+0x42>
 8007488:	6811      	ldr	r1, [r2, #0]
 800748a:	1850      	adds	r0, r2, r1
 800748c:	42a0      	cmp	r0, r4
 800748e:	d10b      	bne.n	80074a8 <_free_r+0x6c>
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	4401      	add	r1, r0
 8007494:	1850      	adds	r0, r2, r1
 8007496:	4283      	cmp	r3, r0
 8007498:	6011      	str	r1, [r2, #0]
 800749a:	d1e0      	bne.n	800745e <_free_r+0x22>
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	4401      	add	r1, r0
 80074a2:	6011      	str	r1, [r2, #0]
 80074a4:	6053      	str	r3, [r2, #4]
 80074a6:	e7da      	b.n	800745e <_free_r+0x22>
 80074a8:	d902      	bls.n	80074b0 <_free_r+0x74>
 80074aa:	230c      	movs	r3, #12
 80074ac:	602b      	str	r3, [r5, #0]
 80074ae:	e7d6      	b.n	800745e <_free_r+0x22>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	1821      	adds	r1, r4, r0
 80074b4:	428b      	cmp	r3, r1
 80074b6:	bf01      	itttt	eq
 80074b8:	6819      	ldreq	r1, [r3, #0]
 80074ba:	685b      	ldreq	r3, [r3, #4]
 80074bc:	1809      	addeq	r1, r1, r0
 80074be:	6021      	streq	r1, [r4, #0]
 80074c0:	6063      	str	r3, [r4, #4]
 80074c2:	6054      	str	r4, [r2, #4]
 80074c4:	e7cb      	b.n	800745e <_free_r+0x22>
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	20002810 	.word	0x20002810

080074cc <sbrk_aligned>:
 80074cc:	b570      	push	{r4, r5, r6, lr}
 80074ce:	4e0e      	ldr	r6, [pc, #56]	; (8007508 <sbrk_aligned+0x3c>)
 80074d0:	460c      	mov	r4, r1
 80074d2:	6831      	ldr	r1, [r6, #0]
 80074d4:	4605      	mov	r5, r0
 80074d6:	b911      	cbnz	r1, 80074de <sbrk_aligned+0x12>
 80074d8:	f000 f8bc 	bl	8007654 <_sbrk_r>
 80074dc:	6030      	str	r0, [r6, #0]
 80074de:	4621      	mov	r1, r4
 80074e0:	4628      	mov	r0, r5
 80074e2:	f000 f8b7 	bl	8007654 <_sbrk_r>
 80074e6:	1c43      	adds	r3, r0, #1
 80074e8:	d00a      	beq.n	8007500 <sbrk_aligned+0x34>
 80074ea:	1cc4      	adds	r4, r0, #3
 80074ec:	f024 0403 	bic.w	r4, r4, #3
 80074f0:	42a0      	cmp	r0, r4
 80074f2:	d007      	beq.n	8007504 <sbrk_aligned+0x38>
 80074f4:	1a21      	subs	r1, r4, r0
 80074f6:	4628      	mov	r0, r5
 80074f8:	f000 f8ac 	bl	8007654 <_sbrk_r>
 80074fc:	3001      	adds	r0, #1
 80074fe:	d101      	bne.n	8007504 <sbrk_aligned+0x38>
 8007500:	f04f 34ff 	mov.w	r4, #4294967295
 8007504:	4620      	mov	r0, r4
 8007506:	bd70      	pop	{r4, r5, r6, pc}
 8007508:	20002814 	.word	0x20002814

0800750c <_malloc_r>:
 800750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007510:	1ccd      	adds	r5, r1, #3
 8007512:	f025 0503 	bic.w	r5, r5, #3
 8007516:	3508      	adds	r5, #8
 8007518:	2d0c      	cmp	r5, #12
 800751a:	bf38      	it	cc
 800751c:	250c      	movcc	r5, #12
 800751e:	2d00      	cmp	r5, #0
 8007520:	4607      	mov	r7, r0
 8007522:	db01      	blt.n	8007528 <_malloc_r+0x1c>
 8007524:	42a9      	cmp	r1, r5
 8007526:	d905      	bls.n	8007534 <_malloc_r+0x28>
 8007528:	230c      	movs	r3, #12
 800752a:	2600      	movs	r6, #0
 800752c:	603b      	str	r3, [r7, #0]
 800752e:	4630      	mov	r0, r6
 8007530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007534:	4e2e      	ldr	r6, [pc, #184]	; (80075f0 <_malloc_r+0xe4>)
 8007536:	f000 f89d 	bl	8007674 <__malloc_lock>
 800753a:	6833      	ldr	r3, [r6, #0]
 800753c:	461c      	mov	r4, r3
 800753e:	bb34      	cbnz	r4, 800758e <_malloc_r+0x82>
 8007540:	4629      	mov	r1, r5
 8007542:	4638      	mov	r0, r7
 8007544:	f7ff ffc2 	bl	80074cc <sbrk_aligned>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	4604      	mov	r4, r0
 800754c:	d14d      	bne.n	80075ea <_malloc_r+0xde>
 800754e:	6834      	ldr	r4, [r6, #0]
 8007550:	4626      	mov	r6, r4
 8007552:	2e00      	cmp	r6, #0
 8007554:	d140      	bne.n	80075d8 <_malloc_r+0xcc>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	4631      	mov	r1, r6
 800755a:	4638      	mov	r0, r7
 800755c:	eb04 0803 	add.w	r8, r4, r3
 8007560:	f000 f878 	bl	8007654 <_sbrk_r>
 8007564:	4580      	cmp	r8, r0
 8007566:	d13a      	bne.n	80075de <_malloc_r+0xd2>
 8007568:	6821      	ldr	r1, [r4, #0]
 800756a:	3503      	adds	r5, #3
 800756c:	1a6d      	subs	r5, r5, r1
 800756e:	f025 0503 	bic.w	r5, r5, #3
 8007572:	3508      	adds	r5, #8
 8007574:	2d0c      	cmp	r5, #12
 8007576:	bf38      	it	cc
 8007578:	250c      	movcc	r5, #12
 800757a:	4638      	mov	r0, r7
 800757c:	4629      	mov	r1, r5
 800757e:	f7ff ffa5 	bl	80074cc <sbrk_aligned>
 8007582:	3001      	adds	r0, #1
 8007584:	d02b      	beq.n	80075de <_malloc_r+0xd2>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	442b      	add	r3, r5
 800758a:	6023      	str	r3, [r4, #0]
 800758c:	e00e      	b.n	80075ac <_malloc_r+0xa0>
 800758e:	6822      	ldr	r2, [r4, #0]
 8007590:	1b52      	subs	r2, r2, r5
 8007592:	d41e      	bmi.n	80075d2 <_malloc_r+0xc6>
 8007594:	2a0b      	cmp	r2, #11
 8007596:	d916      	bls.n	80075c6 <_malloc_r+0xba>
 8007598:	1961      	adds	r1, r4, r5
 800759a:	42a3      	cmp	r3, r4
 800759c:	6025      	str	r5, [r4, #0]
 800759e:	bf18      	it	ne
 80075a0:	6059      	strne	r1, [r3, #4]
 80075a2:	6863      	ldr	r3, [r4, #4]
 80075a4:	bf08      	it	eq
 80075a6:	6031      	streq	r1, [r6, #0]
 80075a8:	5162      	str	r2, [r4, r5]
 80075aa:	604b      	str	r3, [r1, #4]
 80075ac:	4638      	mov	r0, r7
 80075ae:	f104 060b 	add.w	r6, r4, #11
 80075b2:	f000 f865 	bl	8007680 <__malloc_unlock>
 80075b6:	f026 0607 	bic.w	r6, r6, #7
 80075ba:	1d23      	adds	r3, r4, #4
 80075bc:	1af2      	subs	r2, r6, r3
 80075be:	d0b6      	beq.n	800752e <_malloc_r+0x22>
 80075c0:	1b9b      	subs	r3, r3, r6
 80075c2:	50a3      	str	r3, [r4, r2]
 80075c4:	e7b3      	b.n	800752e <_malloc_r+0x22>
 80075c6:	6862      	ldr	r2, [r4, #4]
 80075c8:	42a3      	cmp	r3, r4
 80075ca:	bf0c      	ite	eq
 80075cc:	6032      	streq	r2, [r6, #0]
 80075ce:	605a      	strne	r2, [r3, #4]
 80075d0:	e7ec      	b.n	80075ac <_malloc_r+0xa0>
 80075d2:	4623      	mov	r3, r4
 80075d4:	6864      	ldr	r4, [r4, #4]
 80075d6:	e7b2      	b.n	800753e <_malloc_r+0x32>
 80075d8:	4634      	mov	r4, r6
 80075da:	6876      	ldr	r6, [r6, #4]
 80075dc:	e7b9      	b.n	8007552 <_malloc_r+0x46>
 80075de:	230c      	movs	r3, #12
 80075e0:	4638      	mov	r0, r7
 80075e2:	603b      	str	r3, [r7, #0]
 80075e4:	f000 f84c 	bl	8007680 <__malloc_unlock>
 80075e8:	e7a1      	b.n	800752e <_malloc_r+0x22>
 80075ea:	6025      	str	r5, [r4, #0]
 80075ec:	e7de      	b.n	80075ac <_malloc_r+0xa0>
 80075ee:	bf00      	nop
 80075f0:	20002810 	.word	0x20002810

080075f4 <_realloc_r>:
 80075f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f8:	4680      	mov	r8, r0
 80075fa:	4614      	mov	r4, r2
 80075fc:	460e      	mov	r6, r1
 80075fe:	b921      	cbnz	r1, 800760a <_realloc_r+0x16>
 8007600:	4611      	mov	r1, r2
 8007602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007606:	f7ff bf81 	b.w	800750c <_malloc_r>
 800760a:	b92a      	cbnz	r2, 8007618 <_realloc_r+0x24>
 800760c:	f7ff ff16 	bl	800743c <_free_r>
 8007610:	4625      	mov	r5, r4
 8007612:	4628      	mov	r0, r5
 8007614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007618:	f000 f838 	bl	800768c <_malloc_usable_size_r>
 800761c:	4284      	cmp	r4, r0
 800761e:	4607      	mov	r7, r0
 8007620:	d802      	bhi.n	8007628 <_realloc_r+0x34>
 8007622:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007626:	d812      	bhi.n	800764e <_realloc_r+0x5a>
 8007628:	4621      	mov	r1, r4
 800762a:	4640      	mov	r0, r8
 800762c:	f7ff ff6e 	bl	800750c <_malloc_r>
 8007630:	4605      	mov	r5, r0
 8007632:	2800      	cmp	r0, #0
 8007634:	d0ed      	beq.n	8007612 <_realloc_r+0x1e>
 8007636:	42bc      	cmp	r4, r7
 8007638:	4622      	mov	r2, r4
 800763a:	4631      	mov	r1, r6
 800763c:	bf28      	it	cs
 800763e:	463a      	movcs	r2, r7
 8007640:	f7ff fbac 	bl	8006d9c <memcpy>
 8007644:	4631      	mov	r1, r6
 8007646:	4640      	mov	r0, r8
 8007648:	f7ff fef8 	bl	800743c <_free_r>
 800764c:	e7e1      	b.n	8007612 <_realloc_r+0x1e>
 800764e:	4635      	mov	r5, r6
 8007650:	e7df      	b.n	8007612 <_realloc_r+0x1e>
	...

08007654 <_sbrk_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	2300      	movs	r3, #0
 8007658:	4d05      	ldr	r5, [pc, #20]	; (8007670 <_sbrk_r+0x1c>)
 800765a:	4604      	mov	r4, r0
 800765c:	4608      	mov	r0, r1
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	f7fa fa2a 	bl	8001ab8 <_sbrk>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_sbrk_r+0x1a>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_sbrk_r+0x1a>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	20002818 	.word	0x20002818

08007674 <__malloc_lock>:
 8007674:	4801      	ldr	r0, [pc, #4]	; (800767c <__malloc_lock+0x8>)
 8007676:	f000 b811 	b.w	800769c <__retarget_lock_acquire_recursive>
 800767a:	bf00      	nop
 800767c:	2000281c 	.word	0x2000281c

08007680 <__malloc_unlock>:
 8007680:	4801      	ldr	r0, [pc, #4]	; (8007688 <__malloc_unlock+0x8>)
 8007682:	f000 b80c 	b.w	800769e <__retarget_lock_release_recursive>
 8007686:	bf00      	nop
 8007688:	2000281c 	.word	0x2000281c

0800768c <_malloc_usable_size_r>:
 800768c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007690:	1f18      	subs	r0, r3, #4
 8007692:	2b00      	cmp	r3, #0
 8007694:	bfbc      	itt	lt
 8007696:	580b      	ldrlt	r3, [r1, r0]
 8007698:	18c0      	addlt	r0, r0, r3
 800769a:	4770      	bx	lr

0800769c <__retarget_lock_acquire_recursive>:
 800769c:	4770      	bx	lr

0800769e <__retarget_lock_release_recursive>:
 800769e:	4770      	bx	lr

080076a0 <_init>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	bf00      	nop
 80076a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a6:	bc08      	pop	{r3}
 80076a8:	469e      	mov	lr, r3
 80076aa:	4770      	bx	lr

080076ac <_fini>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr
