
I2C_PRESSURE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097d4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08009918  08009918  00019918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e2c  08009e2c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e34  08009e34  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e34  08009e34  00019e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e38  08009e38  00019e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  200001e0  0800a01c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  0800a01c  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e66b  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213f  00000000  00000000  0002e874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  000309b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  000318a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173b7  00000000  00000000  000326e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f368  00000000  00000000  00049a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cffe  00000000  00000000  00058e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5e05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a0  00000000  00000000  000e5e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	080098fc 	.word	0x080098fc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	080098fc 	.word	0x080098fc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__aeabi_uldivmod>:
 8001054:	b953      	cbnz	r3, 800106c <__aeabi_uldivmod+0x18>
 8001056:	b94a      	cbnz	r2, 800106c <__aeabi_uldivmod+0x18>
 8001058:	2900      	cmp	r1, #0
 800105a:	bf08      	it	eq
 800105c:	2800      	cmpeq	r0, #0
 800105e:	bf1c      	itt	ne
 8001060:	f04f 31ff 	movne.w	r1, #4294967295
 8001064:	f04f 30ff 	movne.w	r0, #4294967295
 8001068:	f000 b9ae 	b.w	80013c8 <__aeabi_idiv0>
 800106c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001070:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001074:	f000 f83e 	bl	80010f4 <__udivmoddi4>
 8001078:	f8dd e004 	ldr.w	lr, [sp, #4]
 800107c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001080:	b004      	add	sp, #16
 8001082:	4770      	bx	lr

08001084 <__aeabi_d2lz>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4605      	mov	r5, r0
 8001088:	460c      	mov	r4, r1
 800108a:	2200      	movs	r2, #0
 800108c:	2300      	movs	r3, #0
 800108e:	4628      	mov	r0, r5
 8001090:	4621      	mov	r1, r4
 8001092:	f7ff fcab 	bl	80009ec <__aeabi_dcmplt>
 8001096:	b928      	cbnz	r0, 80010a4 <__aeabi_d2lz+0x20>
 8001098:	4628      	mov	r0, r5
 800109a:	4621      	mov	r1, r4
 800109c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010a0:	f000 b80a 	b.w	80010b8 <__aeabi_d2ulz>
 80010a4:	4628      	mov	r0, r5
 80010a6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010aa:	f000 f805 	bl	80010b8 <__aeabi_d2ulz>
 80010ae:	4240      	negs	r0, r0
 80010b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
 80010b6:	bf00      	nop

080010b8 <__aeabi_d2ulz>:
 80010b8:	b5d0      	push	{r4, r6, r7, lr}
 80010ba:	2200      	movs	r2, #0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <__aeabi_d2ulz+0x34>)
 80010be:	4606      	mov	r6, r0
 80010c0:	460f      	mov	r7, r1
 80010c2:	f7ff fa21 	bl	8000508 <__aeabi_dmul>
 80010c6:	f7ff fcf7 	bl	8000ab8 <__aeabi_d2uiz>
 80010ca:	4604      	mov	r4, r0
 80010cc:	f7ff f9a2 	bl	8000414 <__aeabi_ui2d>
 80010d0:	2200      	movs	r2, #0
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <__aeabi_d2ulz+0x38>)
 80010d4:	f7ff fa18 	bl	8000508 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4630      	mov	r0, r6
 80010de:	4639      	mov	r1, r7
 80010e0:	f7ff f85a 	bl	8000198 <__aeabi_dsub>
 80010e4:	f7ff fce8 	bl	8000ab8 <__aeabi_d2uiz>
 80010e8:	4621      	mov	r1, r4
 80010ea:	bdd0      	pop	{r4, r6, r7, pc}
 80010ec:	3df00000 	.word	0x3df00000
 80010f0:	41f00000 	.word	0x41f00000

080010f4 <__udivmoddi4>:
 80010f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f8:	9e08      	ldr	r6, [sp, #32]
 80010fa:	460d      	mov	r5, r1
 80010fc:	4604      	mov	r4, r0
 80010fe:	4688      	mov	r8, r1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d14d      	bne.n	80011a0 <__udivmoddi4+0xac>
 8001104:	428a      	cmp	r2, r1
 8001106:	4694      	mov	ip, r2
 8001108:	d968      	bls.n	80011dc <__udivmoddi4+0xe8>
 800110a:	fab2 f282 	clz	r2, r2
 800110e:	b152      	cbz	r2, 8001126 <__udivmoddi4+0x32>
 8001110:	fa01 f302 	lsl.w	r3, r1, r2
 8001114:	f1c2 0120 	rsb	r1, r2, #32
 8001118:	fa20 f101 	lsr.w	r1, r0, r1
 800111c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001120:	ea41 0803 	orr.w	r8, r1, r3
 8001124:	4094      	lsls	r4, r2
 8001126:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800112a:	fbb8 f7f1 	udiv	r7, r8, r1
 800112e:	fa1f fe8c 	uxth.w	lr, ip
 8001132:	fb01 8817 	mls	r8, r1, r7, r8
 8001136:	fb07 f00e 	mul.w	r0, r7, lr
 800113a:	0c23      	lsrs	r3, r4, #16
 800113c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001140:	4298      	cmp	r0, r3
 8001142:	d90a      	bls.n	800115a <__udivmoddi4+0x66>
 8001144:	eb1c 0303 	adds.w	r3, ip, r3
 8001148:	f107 35ff 	add.w	r5, r7, #4294967295
 800114c:	f080 811e 	bcs.w	800138c <__udivmoddi4+0x298>
 8001150:	4298      	cmp	r0, r3
 8001152:	f240 811b 	bls.w	800138c <__udivmoddi4+0x298>
 8001156:	3f02      	subs	r7, #2
 8001158:	4463      	add	r3, ip
 800115a:	1a1b      	subs	r3, r3, r0
 800115c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001160:	fb01 3310 	mls	r3, r1, r0, r3
 8001164:	fb00 fe0e 	mul.w	lr, r0, lr
 8001168:	b2a4      	uxth	r4, r4
 800116a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800116e:	45a6      	cmp	lr, r4
 8001170:	d90a      	bls.n	8001188 <__udivmoddi4+0x94>
 8001172:	eb1c 0404 	adds.w	r4, ip, r4
 8001176:	f100 33ff 	add.w	r3, r0, #4294967295
 800117a:	f080 8109 	bcs.w	8001390 <__udivmoddi4+0x29c>
 800117e:	45a6      	cmp	lr, r4
 8001180:	f240 8106 	bls.w	8001390 <__udivmoddi4+0x29c>
 8001184:	4464      	add	r4, ip
 8001186:	3802      	subs	r0, #2
 8001188:	2100      	movs	r1, #0
 800118a:	eba4 040e 	sub.w	r4, r4, lr
 800118e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001192:	b11e      	cbz	r6, 800119c <__udivmoddi4+0xa8>
 8001194:	2300      	movs	r3, #0
 8001196:	40d4      	lsrs	r4, r2
 8001198:	e9c6 4300 	strd	r4, r3, [r6]
 800119c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a0:	428b      	cmp	r3, r1
 80011a2:	d908      	bls.n	80011b6 <__udivmoddi4+0xc2>
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	f000 80ee 	beq.w	8001386 <__udivmoddi4+0x292>
 80011aa:	2100      	movs	r1, #0
 80011ac:	e9c6 0500 	strd	r0, r5, [r6]
 80011b0:	4608      	mov	r0, r1
 80011b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b6:	fab3 f183 	clz	r1, r3
 80011ba:	2900      	cmp	r1, #0
 80011bc:	d14a      	bne.n	8001254 <__udivmoddi4+0x160>
 80011be:	42ab      	cmp	r3, r5
 80011c0:	d302      	bcc.n	80011c8 <__udivmoddi4+0xd4>
 80011c2:	4282      	cmp	r2, r0
 80011c4:	f200 80fc 	bhi.w	80013c0 <__udivmoddi4+0x2cc>
 80011c8:	1a84      	subs	r4, r0, r2
 80011ca:	eb65 0303 	sbc.w	r3, r5, r3
 80011ce:	2001      	movs	r0, #1
 80011d0:	4698      	mov	r8, r3
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d0e2      	beq.n	800119c <__udivmoddi4+0xa8>
 80011d6:	e9c6 4800 	strd	r4, r8, [r6]
 80011da:	e7df      	b.n	800119c <__udivmoddi4+0xa8>
 80011dc:	b902      	cbnz	r2, 80011e0 <__udivmoddi4+0xec>
 80011de:	deff      	udf	#255	; 0xff
 80011e0:	fab2 f282 	clz	r2, r2
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	f040 8091 	bne.w	800130c <__udivmoddi4+0x218>
 80011ea:	eba1 000c 	sub.w	r0, r1, ip
 80011ee:	2101      	movs	r1, #1
 80011f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011f4:	fa1f fe8c 	uxth.w	lr, ip
 80011f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80011fc:	fb07 0013 	mls	r0, r7, r3, r0
 8001200:	0c25      	lsrs	r5, r4, #16
 8001202:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001206:	fb0e f003 	mul.w	r0, lr, r3
 800120a:	42a8      	cmp	r0, r5
 800120c:	d908      	bls.n	8001220 <__udivmoddi4+0x12c>
 800120e:	eb1c 0505 	adds.w	r5, ip, r5
 8001212:	f103 38ff 	add.w	r8, r3, #4294967295
 8001216:	d202      	bcs.n	800121e <__udivmoddi4+0x12a>
 8001218:	42a8      	cmp	r0, r5
 800121a:	f200 80ce 	bhi.w	80013ba <__udivmoddi4+0x2c6>
 800121e:	4643      	mov	r3, r8
 8001220:	1a2d      	subs	r5, r5, r0
 8001222:	fbb5 f0f7 	udiv	r0, r5, r7
 8001226:	fb07 5510 	mls	r5, r7, r0, r5
 800122a:	fb0e fe00 	mul.w	lr, lr, r0
 800122e:	b2a4      	uxth	r4, r4
 8001230:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001234:	45a6      	cmp	lr, r4
 8001236:	d908      	bls.n	800124a <__udivmoddi4+0x156>
 8001238:	eb1c 0404 	adds.w	r4, ip, r4
 800123c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001240:	d202      	bcs.n	8001248 <__udivmoddi4+0x154>
 8001242:	45a6      	cmp	lr, r4
 8001244:	f200 80b6 	bhi.w	80013b4 <__udivmoddi4+0x2c0>
 8001248:	4628      	mov	r0, r5
 800124a:	eba4 040e 	sub.w	r4, r4, lr
 800124e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001252:	e79e      	b.n	8001192 <__udivmoddi4+0x9e>
 8001254:	f1c1 0720 	rsb	r7, r1, #32
 8001258:	408b      	lsls	r3, r1
 800125a:	fa22 fc07 	lsr.w	ip, r2, r7
 800125e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001262:	fa25 fa07 	lsr.w	sl, r5, r7
 8001266:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800126a:	fbba f8f9 	udiv	r8, sl, r9
 800126e:	fa20 f307 	lsr.w	r3, r0, r7
 8001272:	fb09 aa18 	mls	sl, r9, r8, sl
 8001276:	408d      	lsls	r5, r1
 8001278:	fa1f fe8c 	uxth.w	lr, ip
 800127c:	431d      	orrs	r5, r3
 800127e:	fa00 f301 	lsl.w	r3, r0, r1
 8001282:	fb08 f00e 	mul.w	r0, r8, lr
 8001286:	0c2c      	lsrs	r4, r5, #16
 8001288:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800128c:	42a0      	cmp	r0, r4
 800128e:	fa02 f201 	lsl.w	r2, r2, r1
 8001292:	d90b      	bls.n	80012ac <__udivmoddi4+0x1b8>
 8001294:	eb1c 0404 	adds.w	r4, ip, r4
 8001298:	f108 3aff 	add.w	sl, r8, #4294967295
 800129c:	f080 8088 	bcs.w	80013b0 <__udivmoddi4+0x2bc>
 80012a0:	42a0      	cmp	r0, r4
 80012a2:	f240 8085 	bls.w	80013b0 <__udivmoddi4+0x2bc>
 80012a6:	f1a8 0802 	sub.w	r8, r8, #2
 80012aa:	4464      	add	r4, ip
 80012ac:	1a24      	subs	r4, r4, r0
 80012ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80012b2:	fb09 4410 	mls	r4, r9, r0, r4
 80012b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80012ba:	b2ad      	uxth	r5, r5
 80012bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012c0:	45a6      	cmp	lr, r4
 80012c2:	d908      	bls.n	80012d6 <__udivmoddi4+0x1e2>
 80012c4:	eb1c 0404 	adds.w	r4, ip, r4
 80012c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80012cc:	d26c      	bcs.n	80013a8 <__udivmoddi4+0x2b4>
 80012ce:	45a6      	cmp	lr, r4
 80012d0:	d96a      	bls.n	80013a8 <__udivmoddi4+0x2b4>
 80012d2:	3802      	subs	r0, #2
 80012d4:	4464      	add	r4, ip
 80012d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012da:	fba0 9502 	umull	r9, r5, r0, r2
 80012de:	eba4 040e 	sub.w	r4, r4, lr
 80012e2:	42ac      	cmp	r4, r5
 80012e4:	46c8      	mov	r8, r9
 80012e6:	46ae      	mov	lr, r5
 80012e8:	d356      	bcc.n	8001398 <__udivmoddi4+0x2a4>
 80012ea:	d053      	beq.n	8001394 <__udivmoddi4+0x2a0>
 80012ec:	2e00      	cmp	r6, #0
 80012ee:	d069      	beq.n	80013c4 <__udivmoddi4+0x2d0>
 80012f0:	ebb3 0208 	subs.w	r2, r3, r8
 80012f4:	eb64 040e 	sbc.w	r4, r4, lr
 80012f8:	fa22 f301 	lsr.w	r3, r2, r1
 80012fc:	fa04 f707 	lsl.w	r7, r4, r7
 8001300:	431f      	orrs	r7, r3
 8001302:	40cc      	lsrs	r4, r1
 8001304:	e9c6 7400 	strd	r7, r4, [r6]
 8001308:	2100      	movs	r1, #0
 800130a:	e747      	b.n	800119c <__udivmoddi4+0xa8>
 800130c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001310:	f1c2 0120 	rsb	r1, r2, #32
 8001314:	fa25 f301 	lsr.w	r3, r5, r1
 8001318:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800131c:	fa20 f101 	lsr.w	r1, r0, r1
 8001320:	4095      	lsls	r5, r2
 8001322:	430d      	orrs	r5, r1
 8001324:	fbb3 f1f7 	udiv	r1, r3, r7
 8001328:	fb07 3311 	mls	r3, r7, r1, r3
 800132c:	fa1f fe8c 	uxth.w	lr, ip
 8001330:	0c28      	lsrs	r0, r5, #16
 8001332:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001336:	fb01 f30e 	mul.w	r3, r1, lr
 800133a:	4283      	cmp	r3, r0
 800133c:	fa04 f402 	lsl.w	r4, r4, r2
 8001340:	d908      	bls.n	8001354 <__udivmoddi4+0x260>
 8001342:	eb1c 0000 	adds.w	r0, ip, r0
 8001346:	f101 38ff 	add.w	r8, r1, #4294967295
 800134a:	d22f      	bcs.n	80013ac <__udivmoddi4+0x2b8>
 800134c:	4283      	cmp	r3, r0
 800134e:	d92d      	bls.n	80013ac <__udivmoddi4+0x2b8>
 8001350:	3902      	subs	r1, #2
 8001352:	4460      	add	r0, ip
 8001354:	1ac0      	subs	r0, r0, r3
 8001356:	fbb0 f3f7 	udiv	r3, r0, r7
 800135a:	fb07 0013 	mls	r0, r7, r3, r0
 800135e:	b2ad      	uxth	r5, r5
 8001360:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001364:	fb03 f00e 	mul.w	r0, r3, lr
 8001368:	42a8      	cmp	r0, r5
 800136a:	d908      	bls.n	800137e <__udivmoddi4+0x28a>
 800136c:	eb1c 0505 	adds.w	r5, ip, r5
 8001370:	f103 38ff 	add.w	r8, r3, #4294967295
 8001374:	d216      	bcs.n	80013a4 <__udivmoddi4+0x2b0>
 8001376:	42a8      	cmp	r0, r5
 8001378:	d914      	bls.n	80013a4 <__udivmoddi4+0x2b0>
 800137a:	3b02      	subs	r3, #2
 800137c:	4465      	add	r5, ip
 800137e:	1a28      	subs	r0, r5, r0
 8001380:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001384:	e738      	b.n	80011f8 <__udivmoddi4+0x104>
 8001386:	4631      	mov	r1, r6
 8001388:	4630      	mov	r0, r6
 800138a:	e707      	b.n	800119c <__udivmoddi4+0xa8>
 800138c:	462f      	mov	r7, r5
 800138e:	e6e4      	b.n	800115a <__udivmoddi4+0x66>
 8001390:	4618      	mov	r0, r3
 8001392:	e6f9      	b.n	8001188 <__udivmoddi4+0x94>
 8001394:	454b      	cmp	r3, r9
 8001396:	d2a9      	bcs.n	80012ec <__udivmoddi4+0x1f8>
 8001398:	ebb9 0802 	subs.w	r8, r9, r2
 800139c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013a0:	3801      	subs	r0, #1
 80013a2:	e7a3      	b.n	80012ec <__udivmoddi4+0x1f8>
 80013a4:	4643      	mov	r3, r8
 80013a6:	e7ea      	b.n	800137e <__udivmoddi4+0x28a>
 80013a8:	4628      	mov	r0, r5
 80013aa:	e794      	b.n	80012d6 <__udivmoddi4+0x1e2>
 80013ac:	4641      	mov	r1, r8
 80013ae:	e7d1      	b.n	8001354 <__udivmoddi4+0x260>
 80013b0:	46d0      	mov	r8, sl
 80013b2:	e77b      	b.n	80012ac <__udivmoddi4+0x1b8>
 80013b4:	4464      	add	r4, ip
 80013b6:	3802      	subs	r0, #2
 80013b8:	e747      	b.n	800124a <__udivmoddi4+0x156>
 80013ba:	3b02      	subs	r3, #2
 80013bc:	4465      	add	r5, ip
 80013be:	e72f      	b.n	8001220 <__udivmoddi4+0x12c>
 80013c0:	4608      	mov	r0, r1
 80013c2:	e706      	b.n	80011d2 <__udivmoddi4+0xde>
 80013c4:	4631      	mov	r1, r6
 80013c6:	e6e9      	b.n	800119c <__udivmoddi4+0xa8>

080013c8 <__aeabi_idiv0>:
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f000 fda2 	bl	8001f1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d6:	f000 f851 	bl	800147c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013da:	f000 f999 	bl	8001710 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013de:	f000 f8b1 	bl	8001544 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80013e2:	f000 f96b 	bl	80016bc <MX_USART2_UART_Init>
  MX_RTC_Init();
 80013e6:	f000 f8db 	bl	80015a0 <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013ea:	2200      	movs	r2, #0
 80013ec:	491b      	ldr	r1, [pc, #108]	; (800145c <main+0x90>)
 80013ee:	481c      	ldr	r0, [pc, #112]	; (8001460 <main+0x94>)
 80013f0:	f003 f8b5 	bl	800455e <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013f4:	2200      	movs	r2, #0
 80013f6:	491b      	ldr	r1, [pc, #108]	; (8001464 <main+0x98>)
 80013f8:	4819      	ldr	r0, [pc, #100]	; (8001460 <main+0x94>)
 80013fa:	f003 f9ab 	bl	8004754 <HAL_RTC_GetDate>


	  	  sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <main+0x98>)
 8001400:	789b      	ldrb	r3, [r3, #2]
 8001402:	461a      	mov	r2, r3
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <main+0x98>)
 8001406:	785b      	ldrb	r3, [r3, #1]
 8001408:	4619      	mov	r1, r3
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <main+0x98>)
 800140c:	78db      	ldrb	r3, [r3, #3]
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	460b      	mov	r3, r1
 8001412:	4915      	ldr	r1, [pc, #84]	; (8001468 <main+0x9c>)
 8001414:	4815      	ldr	r0, [pc, #84]	; (800146c <main+0xa0>)
 8001416:	f004 fcb5 	bl	8005d84 <siprintf>
	  	  sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <main+0x90>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <main+0x90>)
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	4619      	mov	r1, r3
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <main+0x90>)
 8001428:	789b      	ldrb	r3, [r3, #2]
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	460b      	mov	r3, r1
 800142e:	4910      	ldr	r1, [pc, #64]	; (8001470 <main+0xa4>)
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <main+0xa8>)
 8001432:	f004 fca7 	bl	8005d84 <siprintf>

	  	  HAL_UART_Transmit(&huart2, (uint8_t *)date, sizeof(date), 300);
 8001436:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800143a:	221e      	movs	r2, #30
 800143c:	490b      	ldr	r1, [pc, #44]	; (800146c <main+0xa0>)
 800143e:	480e      	ldr	r0, [pc, #56]	; (8001478 <main+0xac>)
 8001440:	f003 fc3b 	bl	8004cba <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)time, sizeof(time), 300);
 8001444:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001448:	221e      	movs	r2, #30
 800144a:	490a      	ldr	r1, [pc, #40]	; (8001474 <main+0xa8>)
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <main+0xac>)
 800144e:	f003 fc34 	bl	8004cba <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 8001452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001456:	f000 fdcf 	bl	8001ff8 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800145a:	e7c6      	b.n	80013ea <main+0x1e>
 800145c:	200002f4 	.word	0x200002f4
 8001460:	20000250 	.word	0x20000250
 8001464:	20000308 	.word	0x20000308
 8001468:	08009918 	.word	0x08009918
 800146c:	200002b4 	.word	0x200002b4
 8001470:	08009930 	.word	0x08009930
 8001474:	200002d4 	.word	0x200002d4
 8001478:	20000270 	.word	0x20000270

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b096      	sub	sp, #88	; 0x58
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2234      	movs	r2, #52	; 0x34
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fe00 	bl	8005090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <SystemClock_Config+0xc4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80014b2:	4a23      	ldr	r2, [pc, #140]	; (8001540 <SystemClock_Config+0xc4>)
 80014b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014b8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80014ba:	2306      	movs	r3, #6
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014be:	2301      	movs	r3, #1
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c2:	2301      	movs	r3, #1
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c6:	2310      	movs	r3, #16
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ca:	2302      	movs	r3, #2
 80014cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ce:	2300      	movs	r3, #0
 80014d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80014d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80014d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80014dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fff6 	bl	80034d4 <HAL_RCC_OscConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80014ee:	f000 fa03 	bl	80018f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f2:	230f      	movs	r3, #15
 80014f4:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f6:	2303      	movs	r3, #3
 80014f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fb11 	bl	8003b34 <HAL_RCC_ClockConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001518:	f000 f9ee 	bl	80018f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800151c:	2301      	movs	r3, #1
 800151e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001524:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fdc9 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001534:	f000 f9e0 	bl	80018f8 <Error_Handler>
  }
}
 8001538:	bf00      	nop
 800153a:	3758      	adds	r7, #88	; 0x58
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40007000 	.word	0x40007000

08001544 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_I2C1_Init+0x50>)
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <MX_I2C1_Init+0x54>)
 800154c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_I2C1_Init+0x50>)
 8001550:	4a12      	ldr	r2, [pc, #72]	; (800159c <MX_I2C1_Init+0x58>)
 8001552:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_I2C1_Init+0x50>)
 8001562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001566:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MX_I2C1_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_I2C1_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_I2C1_Init+0x50>)
 8001582:	f000 ffe9 	bl	8002558 <HAL_I2C_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800158c:	f000 f9b4 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200001fc 	.word	0x200001fc
 8001598:	40005400 	.word	0x40005400
 800159c:	000186a0 	.word	0x000186a0

080015a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b090      	sub	sp, #64	; 0x40
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015b6:	2300      	movs	r3, #0
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80015ba:	463b      	mov	r3, r7
 80015bc:	2228      	movs	r2, #40	; 0x28
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 fd65 	bl	8005090 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <MX_RTC_Init+0x114>)
 80015c8:	4a3b      	ldr	r2, [pc, #236]	; (80016b8 <MX_RTC_Init+0x118>)
 80015ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015cc:	4b39      	ldr	r3, [pc, #228]	; (80016b4 <MX_RTC_Init+0x114>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <MX_RTC_Init+0x114>)
 80015d4:	227f      	movs	r2, #127	; 0x7f
 80015d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015d8:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <MX_RTC_Init+0x114>)
 80015da:	22ff      	movs	r2, #255	; 0xff
 80015dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015de:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <MX_RTC_Init+0x114>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015e4:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <MX_RTC_Init+0x114>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015ea:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <MX_RTC_Init+0x114>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015f0:	4830      	ldr	r0, [pc, #192]	; (80016b4 <MX_RTC_Init+0x114>)
 80015f2:	f002 fe6f 	bl	80042d4 <HAL_RTC_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80015fc:	f000 f97c 	bl	80018f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8001600:	2310      	movs	r3, #16
 8001602:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x20;
 8001606:	2320      	movs	r3, #32
 8001608:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 800160c:	2345      	movs	r3, #69	; 0x45
 800160e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001612:	2300      	movs	r3, #0
 8001614:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800161a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161e:	2201      	movs	r2, #1
 8001620:	4619      	mov	r1, r3
 8001622:	4824      	ldr	r0, [pc, #144]	; (80016b4 <MX_RTC_Init+0x114>)
 8001624:	f002 fee7 	bl	80043f6 <HAL_RTC_SetTime>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800162e:	f000 f963 	bl	80018f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001632:	2301      	movs	r3, #1
 8001634:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_MARCH;
 8001638:	2303      	movs	r3, #3
 800163a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800163e:	2301      	movs	r3, #1
 8001640:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x23;
 8001644:	2323      	movs	r3, #35	; 0x23
 8001646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800164a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800164e:	2201      	movs	r2, #1
 8001650:	4619      	mov	r1, r3
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <MX_RTC_Init+0x114>)
 8001654:	f002 ffe0 	bl	8004618 <HAL_RTC_SetDate>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800165e:	f000 f94b 	bl	80018f8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x10;
 8001662:	2310      	movs	r3, #16
 8001664:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x20;
 8001666:	2320      	movs	r3, #32
 8001668:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x55;
 800166a:	2355      	movs	r3, #85	; 0x55
 800166c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES;
 800167a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800167e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001688:	2301      	movs	r3, #1
 800168a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800168e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	2201      	movs	r2, #1
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_RTC_Init+0x114>)
 800169c:	f003 f8a8 	bl	80047f0 <HAL_RTC_SetAlarm_IT>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80016a6:	f000 f927 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3740      	adds	r7, #64	; 0x40
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000250 	.word	0x20000250
 80016b8:	40002800 	.word	0x40002800

080016bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <MX_USART2_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016f4:	f003 fa94 	bl	8004c20 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f000 f8fb 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000270 	.word	0x20000270
 800170c:	40004400 	.word	0x40004400

08001710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_GPIO_Init+0x70>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	4a19      	ldr	r2, [pc, #100]	; (8001780 <MX_GPIO_Init+0x70>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	61d3      	str	r3, [r2, #28]
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <MX_GPIO_Init+0x70>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_GPIO_Init+0x70>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a13      	ldr	r2, [pc, #76]	; (8001780 <MX_GPIO_Init+0x70>)
 8001734:	f043 0320 	orr.w	r3, r3, #32
 8001738:	61d3      	str	r3, [r2, #28]
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_GPIO_Init+0x70>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 0320 	and.w	r3, r3, #32
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_GPIO_Init+0x70>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <MX_GPIO_Init+0x70>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_GPIO_Init+0x70>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_GPIO_Init+0x70>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <MX_GPIO_Init+0x70>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <MX_GPIO_Init+0x70>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]

}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40023800 	.word	0x40023800

08001784 <platform_write>:

/* USER CODE BEGIN 4 */
//
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len){
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af04      	add	r7, sp, #16
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	461a      	mov	r2, r3
 8001790:	460b      	mov	r3, r1
 8001792:	72fb      	strb	r3, [r7, #11]
 8001794:	4613      	mov	r3, r2
 8001796:	813b      	strh	r3, [r7, #8]
	 HAL_I2C_Mem_Write(handle,LPS22HB_I2C_ADD , reg,
 8001798:	7afb      	ldrb	r3, [r7, #11]
 800179a:	b29a      	uxth	r2, r3
 800179c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	893b      	ldrh	r3, [r7, #8]
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2301      	movs	r3, #1
 80017ac:	21b8      	movs	r1, #184	; 0xb8
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f001 f816 	bl	80027e0 <HAL_I2C_Mem_Write>
	                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
}
 80017b4:	bf00      	nop
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b088      	sub	sp, #32
 80017c2:	af04      	add	r7, sp, #16
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	461a      	mov	r2, r3
 80017ca:	460b      	mov	r3, r1
 80017cc:	72fb      	strb	r3, [r7, #11]
 80017ce:	4613      	mov	r3, r2
 80017d0:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle,LPS22HB_I2C_ADD , reg,
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	893b      	ldrh	r3, [r7, #8]
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2301      	movs	r3, #1
 80017e6:	21b8      	movs	r1, #184	; 0xb8
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f001 f8f3 	bl	80029d4 <HAL_I2C_Mem_Read>
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
}
 80017ee:	bf00      	nop
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <platform_init>:
//#if defined(NUCLEO_F411RE) | defined(STEVAL_MKI109V3)
//  HAL_Delay(ms);
//#elif defined(SPC584B_DIS)
//  osalThreadDelayMilliseconds(ms);
//#endif
static void platform_init(void){
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  TIM3->CCR2 = PWM_3V3;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  platform_delay(1000);
#endif
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <lps22hb_read_data_polling>:

void lps22hb_read_data_polling(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <lps22hb_read_data_polling+0xb4>)
 800180c:	4a2b      	ldr	r2, [pc, #172]	; (80018bc <lps22hb_read_data_polling+0xb8>)
 800180e:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <lps22hb_read_data_polling+0xb4>)
 8001812:	4a2b      	ldr	r2, [pc, #172]	; (80018c0 <lps22hb_read_data_polling+0xbc>)
 8001814:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &SENSOR_BUS;
 8001816:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <lps22hb_read_data_polling+0xb4>)
 8001818:	4a2a      	ldr	r2, [pc, #168]	; (80018c4 <lps22hb_read_data_polling+0xc0>)
 800181a:	60da      	str	r2, [r3, #12]
  /* Initialize platform specific hardware */
  platform_init();
 800181c:	f7ff ffec 	bl	80017f8 <platform_init>
  /* Check device ID */
  lps22hb_device_id_get(&dev_ctx, &whoamI);
 8001820:	4929      	ldr	r1, [pc, #164]	; (80018c8 <lps22hb_read_data_polling+0xc4>)
 8001822:	4825      	ldr	r0, [pc, #148]	; (80018b8 <lps22hb_read_data_polling+0xb4>)
 8001824:	f000 fb29 	bl	8001e7a <lps22hb_device_id_get>

  if (whoamI != LPS22HB_ID) {
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <lps22hb_read_data_polling+0xc4>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2bb1      	cmp	r3, #177	; 0xb1
 800182e:	d000      	beq.n	8001832 <lps22hb_read_data_polling+0x2e>
    while (1)/* manage here device not found */;
 8001830:	e7fe      	b.n	8001830 <lps22hb_read_data_polling+0x2c>
  }

  /* Restore default configuration */
  lps22hb_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001832:	2101      	movs	r1, #1
 8001834:	4820      	ldr	r0, [pc, #128]	; (80018b8 <lps22hb_read_data_polling+0xb4>)
 8001836:	f000 fb31 	bl	8001e9c <lps22hb_reset_set>

  do {
    lps22hb_reset_get(&dev_ctx, &rst);
 800183a:	4924      	ldr	r1, [pc, #144]	; (80018cc <lps22hb_read_data_polling+0xc8>)
 800183c:	481e      	ldr	r0, [pc, #120]	; (80018b8 <lps22hb_read_data_polling+0xb4>)
 800183e:	f000 fb53 	bl	8001ee8 <lps22hb_reset_get>
  } while (rst);
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <lps22hb_read_data_polling+0xc8>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f7      	bne.n	800183a <lps22hb_read_data_polling+0x36>

  /* Enable Block Data Update */
  //lps22hb_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
  /* Can be enabled low pass filter on output */
  lps22hb_low_pass_filter_mode_set(&dev_ctx, LPS22HB_LPF_ODR_DIV_2);
 800184a:	2100      	movs	r1, #0
 800184c:	481a      	ldr	r0, [pc, #104]	; (80018b8 <lps22hb_read_data_polling+0xb4>)
 800184e:	f000 fa86 	bl	8001d5e <lps22hb_low_pass_filter_mode_set>
  /* Can be set Data-ready signal on INT_DRDY pin */
  //lps22hb_drdy_on_int_set(&dev_ctx, PROPERTY_ENABLE);
  /* Set Output Data Rate */
  lps22hb_data_rate_set(&dev_ctx, LPS22HB_ODR_10_Hz);
 8001852:	2102      	movs	r1, #2
 8001854:	4818      	ldr	r0, [pc, #96]	; (80018b8 <lps22hb_read_data_polling+0xb4>)
 8001856:	f000 faa8 	bl	8001daa <lps22hb_data_rate_set>

  /* Read samples in polling mode (no int) */

    uint8_t reg;
    /* Read output only if new value is available */
    lps22hb_press_data_ready_get(&dev_ctx, &reg);
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	4619      	mov	r1, r3
 800185e:	4816      	ldr	r0, [pc, #88]	; (80018b8 <lps22hb_read_data_polling+0xb4>)
 8001860:	f000 fac9 	bl	8001df6 <lps22hb_press_data_ready_get>

    if (reg) {
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d021      	beq.n	80018ae <lps22hb_read_data_polling+0xaa>
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <lps22hb_read_data_polling+0xcc>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
      memset(&data_raw_pressure, 0x00, sizeof(int32_t));
      lps22hb_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8001870:	4917      	ldr	r1, [pc, #92]	; (80018d0 <lps22hb_read_data_polling+0xcc>)
 8001872:	4811      	ldr	r0, [pc, #68]	; (80018b8 <lps22hb_read_data_polling+0xb4>)
 8001874:	f000 fad8 	bl	8001e28 <lps22hb_pressure_raw_get>
      pressure_hPa = lps22hb_from_lsb_to_hpa(data_raw_pressure);
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <lps22hb_read_data_polling+0xcc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fa5c 	bl	8001d3a <lps22hb_from_lsb_to_hpa>
 8001882:	4603      	mov	r3, r0
 8001884:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <lps22hb_read_data_polling+0xd0>)
 8001886:	6013      	str	r3, [r2, #0]
      sprintf((char *)tx_buffer, "pressure [hPa]:%6.2f\r\n", pressure_hPa);
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <lps22hb_read_data_polling+0xd0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fde3 	bl	8000458 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4910      	ldr	r1, [pc, #64]	; (80018d8 <lps22hb_read_data_polling+0xd4>)
 8001898:	4810      	ldr	r0, [pc, #64]	; (80018dc <lps22hb_read_data_polling+0xd8>)
 800189a:	f004 fa73 	bl	8005d84 <siprintf>
//      lps22hb_temperature_raw_get(&dev_ctx, &data_raw_temperature);
//      temperature_degC = lps22hb_from_lsb_to_degc(data_raw_temperature);
//      sprintf((char *)tx_buffer, "temperature [degC]:%6.2f\r\n",
//              temperature_degC);
//     atx_com(tx_buffer, strlen((char const *)tx_buffer));
      HAL_UART_Transmit(&huart2,tx_buffer,sizeof(tx_buffer), 1000);
 800189e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018a6:	490d      	ldr	r1, [pc, #52]	; (80018dc <lps22hb_read_data_polling+0xd8>)
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <lps22hb_read_data_polling+0xdc>)
 80018aa:	f003 fa06 	bl	8004cba <HAL_UART_Transmit>
    }

}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000700 	.word	0x20000700
 80018bc:	08001785 	.word	0x08001785
 80018c0:	080017bf 	.word	0x080017bf
 80018c4:	200001fc 	.word	0x200001fc
 80018c8:	20000314 	.word	0x20000314
 80018cc:	20000315 	.word	0x20000315
 80018d0:	2000030c 	.word	0x2000030c
 80018d4:	20000310 	.word	0x20000310
 80018d8:	08009948 	.word	0x08009948
 80018dc:	20000318 	.word	0x20000318
 80018e0:	20000270 	.word	0x20000270

080018e4 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

	  lps22hb_read_data_polling();
 80018ec:	f7ff ff8a 	bl	8001804 <lps22hb_read_data_polling>


}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fc:	b672      	cpsid	i
}
 80018fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001900:	e7fe      	b.n	8001900 <Error_Handler+0x8>
	...

08001904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_MspInit+0x5c>)
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	4a14      	ldr	r2, [pc, #80]	; (8001960 <HAL_MspInit+0x5c>)
 8001910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001914:	6253      	str	r3, [r2, #36]	; 0x24
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_MspInit+0x5c>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_MspInit+0x5c>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_MspInit+0x5c>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_MspInit+0x5c>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_MspInit+0x5c>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_MspInit+0x5c>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6253      	str	r3, [r2, #36]	; 0x24
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_MspInit+0x5c>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001952:	2007      	movs	r0, #7
 8001954:	f000 fc3e 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <HAL_I2C_MspInit+0x7c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d127      	bne.n	80019d6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_I2C_MspInit+0x80>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a16      	ldr	r2, [pc, #88]	; (80019e4 <HAL_I2C_MspInit+0x80>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <HAL_I2C_MspInit+0x80>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800199e:	23c0      	movs	r3, #192	; 0xc0
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a2:	2312      	movs	r3, #18
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ae:	2304      	movs	r3, #4
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	480b      	ldr	r0, [pc, #44]	; (80019e8 <HAL_I2C_MspInit+0x84>)
 80019ba:	f000 fc4d 	bl	8002258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_I2C_MspInit+0x80>)
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_I2C_MspInit+0x80>)
 80019c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c8:	6253      	str	r3, [r2, #36]	; 0x24
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_I2C_MspInit+0x80>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	; 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40005400 	.word	0x40005400
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020400 	.word	0x40020400

080019ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_RTC_MspInit+0x30>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10a      	bne.n	8001a14 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_RTC_MspInit+0x34>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	2029      	movs	r0, #41	; 0x29
 8001a0a:	f000 fbee 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a0e:	2029      	movs	r0, #41	; 0x29
 8001a10:	f000 fc07 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40002800 	.word	0x40002800
 8001a20:	424706d8 	.word	0x424706d8

08001a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_UART_MspInit+0x7c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d127      	bne.n	8001a96 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_UART_MspInit+0x80>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <HAL_UART_MspInit+0x80>)
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	6253      	str	r3, [r2, #36]	; 0x24
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_UART_MspInit+0x80>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_UART_MspInit+0x80>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_UART_MspInit+0x80>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	61d3      	str	r3, [r2, #28]
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_UART_MspInit+0x80>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a76:	230c      	movs	r3, #12
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a86:	2307      	movs	r3, #7
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_UART_MspInit+0x84>)
 8001a92:	f000 fbe1 	bl	8002258 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40004400 	.word	0x40004400
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler+0x4>

08001abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af2:	f000 fa65 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <RTC_Alarm_IRQHandler+0x10>)
 8001b02:	f002 ffad 	bl	8004a60 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000250 	.word	0x20000250

08001b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return 1;
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <_kill>:

int _kill(int pid, int sig)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b28:	f003 fa88 	bl	800503c <__errno>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2216      	movs	r2, #22
 8001b30:	601a      	str	r2, [r3, #0]
  return -1;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_exit>:

void _exit (int status)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b46:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffe7 	bl	8001b1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b50:	e7fe      	b.n	8001b50 <_exit+0x12>

08001b52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	e00a      	b.n	8001b7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b64:	f3af 8000 	nop.w
 8001b68:	4601      	mov	r1, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	60ba      	str	r2, [r7, #8]
 8001b70:	b2ca      	uxtb	r2, r1
 8001b72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbf0      	blt.n	8001b64 <_read+0x12>
  }

  return len;
 8001b82:	687b      	ldr	r3, [r7, #4]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }

	HAL_UART_Transmit(&huart2, (uint8_t *)ptr,len,1000);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <_write+0x28>)
 8001ba4:	f003 f889 	bl	8004cba <HAL_UART_Transmit>
  return len;
 8001ba8:	687b      	ldr	r3, [r7, #4]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000270 	.word	0x20000270

08001bb8 <_close>:

int _close(int file)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bde:	605a      	str	r2, [r3, #4]
  return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <_isatty>:

int _isatty(int file)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f003 f9f8 	bl	800503c <__errno>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20008000 	.word	0x20008000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	20000710 	.word	0x20000710
 8001c80:	20000728 	.word	0x20000728

08001c84 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c92:	490d      	ldr	r1, [pc, #52]	; (8001cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c94:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca8:	4c0a      	ldr	r4, [pc, #40]	; (8001cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cb6:	f7ff ffe5 	bl	8001c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cba:	f003 f9c5 	bl	8005048 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cbe:	f7ff fb85 	bl	80013cc <main>
  bx lr
 8001cc2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ccc:	08009e3c 	.word	0x08009e3c
  ldr r2, =_sbss
 8001cd0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001cd4:	20000728 	.word	0x20000728

08001cd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC1_IRQHandler>

08001cda <lps22hb_read_reg>:
  *
  */
int32_t __weak lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8001cda:	b590      	push	{r4, r7, lr}
 8001cdc:	b087      	sub	sp, #28
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	72fb      	strb	r3, [r7, #11]
 8001cea:	4613      	mov	r3, r2
 8001cec:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	685c      	ldr	r4, [r3, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	68d8      	ldr	r0, [r3, #12]
 8001cf6:	893b      	ldrh	r3, [r7, #8]
 8001cf8:	7af9      	ldrb	r1, [r7, #11]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	47a0      	blx	r4
 8001cfe:	6178      	str	r0, [r7, #20]

  return ret;
 8001d00:	697b      	ldr	r3, [r7, #20]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}

08001d0a <lps22hb_write_reg>:
  *
  */
int32_t __weak lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8001d0a:	b590      	push	{r4, r7, lr}
 8001d0c:	b087      	sub	sp, #28
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	461a      	mov	r2, r3
 8001d16:	460b      	mov	r3, r1
 8001d18:	72fb      	strb	r3, [r7, #11]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681c      	ldr	r4, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	68d8      	ldr	r0, [r3, #12]
 8001d26:	893b      	ldrh	r3, [r7, #8]
 8001d28:	7af9      	ldrb	r1, [r7, #11]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	47a0      	blx	r4
 8001d2e:	6178      	str	r0, [r7, #20]

  return ret;
 8001d30:	697b      	ldr	r3, [r7, #20]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd90      	pop	{r4, r7, pc}

08001d3a <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7fe ffe2 	bl	8000d0c <__aeabi_i2f>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f8e4 	bl	8000f1c <__aeabi_fdiv>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001d6a:	f107 0208 	add.w	r2, r7, #8
 8001d6e:	2301      	movs	r3, #1
 8001d70:	2110      	movs	r1, #16
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ffb1 	bl	8001cda <lps22hb_read_reg>
 8001d78:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10f      	bne.n	8001da0 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	7a3b      	ldrb	r3, [r7, #8]
 8001d8a:	f362 0383 	bfi	r3, r2, #2, #2
 8001d8e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001d90:	f107 0208 	add.w	r2, r7, #8
 8001d94:	2301      	movs	r3, #1
 8001d96:	2110      	movs	r1, #16
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ffb6 	bl	8001d0a <lps22hb_write_reg>
 8001d9e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001da0:	68fb      	ldr	r3, [r7, #12]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001db6:	f107 0208 	add.w	r2, r7, #8
 8001dba:	2301      	movs	r3, #1
 8001dbc:	2110      	movs	r1, #16
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff8b 	bl	8001cda <lps22hb_read_reg>
 8001dc4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10f      	bne.n	8001dec <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	7a3b      	ldrb	r3, [r7, #8]
 8001dd6:	f362 1306 	bfi	r3, r2, #4, #3
 8001dda:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001ddc:	f107 0208 	add.w	r2, r7, #8
 8001de0:	2301      	movs	r3, #1
 8001de2:	2110      	movs	r1, #16
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff90 	bl	8001d0a <lps22hb_write_reg>
 8001dea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001dec:	68fb      	ldr	r3, [r7, #12]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <lps22hb_press_data_ready_get>:
  * @param  val    Change the values of p_da in reg STATUS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_press_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
  lps22hb_status_t status;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t *)&status, 1);
 8001e00:	f107 0208 	add.w	r2, r7, #8
 8001e04:	2301      	movs	r3, #1
 8001e06:	2127      	movs	r1, #39	; 0x27
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff66 	bl	8001cda <lps22hb_read_reg>
 8001e0e:	60f8      	str	r0, [r7, #12]
  *val = status.p_da;
 8001e10:	7a3b      	ldrb	r3, [r7, #8]
 8001e12:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	701a      	strb	r2, [r3, #0]

  return ret;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8001e32:	f107 0208 	add.w	r2, r7, #8
 8001e36:	2303      	movs	r3, #3
 8001e38:	2128      	movs	r1, #40	; 0x28
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ff4d 	bl	8001cda <lps22hb_read_reg>
 8001e40:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8001e42:	7abb      	ldrb	r3, [r7, #10]
 8001e44:	461a      	mov	r2, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	7a7a      	ldrb	r2, [r7, #9]
 8001e52:	441a      	add	r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	021b      	lsls	r3, r3, #8
 8001e5e:	7a3a      	ldrb	r2, [r7, #8]
 8001e60:	441a      	add	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	021a      	lsls	r2, r3, #8
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	601a      	str	r2, [r3, #0]

  return ret;
 8001e70:	68fb      	ldr	r3, [r7, #12]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8001e84:	2301      	movs	r3, #1
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	210f      	movs	r1, #15
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ff25 	bl	8001cda <lps22hb_read_reg>
 8001e90:	60f8      	str	r0, [r7, #12]

  return ret;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <lps22hb_reset_set>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001ea8:	f107 0208 	add.w	r2, r7, #8
 8001eac:	2301      	movs	r3, #1
 8001eae:	2111      	movs	r1, #17
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff12 	bl	8001cda <lps22hb_read_reg>
 8001eb6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <lps22hb_reset_set+0x42>
  {
    ctrl_reg2.swreset = val;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	7a3b      	ldrb	r3, [r7, #8]
 8001ec8:	f362 0382 	bfi	r3, r2, #2, #1
 8001ecc:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001ece:	f107 0208 	add.w	r2, r7, #8
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	2111      	movs	r1, #17
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ff17 	bl	8001d0a <lps22hb_write_reg>
 8001edc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <lps22hb_reset_get>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001ef2:	f107 0208 	add.w	r2, r7, #8
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	2111      	movs	r1, #17
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff feed 	bl	8001cda <lps22hb_read_reg>
 8001f00:	60f8      	str	r0, [r7, #12]
  *val = ctrl_reg2.swreset;
 8001f02:	7a3b      	ldrb	r3, [r7, #8]
 8001f04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	701a      	strb	r2, [r3, #0]

  return ret;
 8001f10:	68fb      	ldr	r3, [r7, #12]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f000 f955 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f000 f80e 	bl	8001f4c <HAL_InitTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	e001      	b.n	8001f40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f3c:	f7ff fce2 	bl	8001904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f40:	79fb      	ldrb	r3, [r7, #7]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <HAL_InitTick+0x68>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d022      	beq.n	8001fa6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f60:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_InitTick+0x6c>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <HAL_InitTick+0x68>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f962 	bl	800223e <HAL_SYSTICK_Config>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10f      	bne.n	8001fa0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	d809      	bhi.n	8001f9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f86:	2200      	movs	r2, #0
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8e:	f000 f92c 	bl	80021ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_InitTick+0x70>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	e007      	b.n	8001faa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
 8001f9e:	e004      	b.n	8001faa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e001      	b.n	8001faa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_IncTick+0x1c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <HAL_IncTick+0x1c>)
 8001fd0:	6013      	str	r3, [r2, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000714 	.word	0x20000714
 8001fe0:	20000008 	.word	0x20000008

08001fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <HAL_GetTick+0x10>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	20000714 	.word	0x20000714

08001ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff fff0 	bl	8001fe4 <HAL_GetTick>
 8002004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d004      	beq.n	800201c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_Delay+0x40>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4413      	add	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800201c:	bf00      	nop
 800201e:	f7ff ffe1 	bl	8001fe4 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	429a      	cmp	r2, r3
 800202c:	d8f7      	bhi.n	800201e <HAL_Delay+0x26>
  {
  }
}
 800202e:	bf00      	nop
 8002030:	bf00      	nop
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000008 	.word	0x20000008

0800203c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206e:	4a04      	ldr	r2, [pc, #16]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60d3      	str	r3, [r2, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <__NVIC_GetPriorityGrouping+0x18>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0307 	and.w	r3, r3, #7
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	db0b      	blt.n	80020ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4906      	ldr	r1, [pc, #24]	; (80020d4 <__NVIC_EnableIRQ+0x34>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2001      	movs	r0, #1
 80020c2:	fa00 f202 	lsl.w	r2, r0, r2
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	; (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf28      	it	cs
 800214a:	2304      	movcs	r3, #4
 800214c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3304      	adds	r3, #4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d902      	bls.n	800215c <NVIC_EncodePriority+0x30>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3b03      	subs	r3, #3
 800215a:	e000      	b.n	800215e <NVIC_EncodePriority+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	f04f 32ff 	mov.w	r2, #4294967295
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43d9      	mvns	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	4313      	orrs	r3, r2
         );
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a0:	d301      	bcc.n	80021a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00f      	b.n	80021c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <SysTick_Config+0x40>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ae:	210f      	movs	r1, #15
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f7ff ff90 	bl	80020d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <SysTick_Config+0x40>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <SysTick_Config+0x40>)
 80021c0:	2207      	movs	r2, #7
 80021c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff2d 	bl	800203c <__NVIC_SetPriorityGrouping>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021fc:	f7ff ff42 	bl	8002084 <__NVIC_GetPriorityGrouping>
 8002200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff ff90 	bl	800212c <NVIC_EncodePriority>
 800220c:	4602      	mov	r2, r0
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff5f 	bl	80020d8 <__NVIC_SetPriority>
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff35 	bl	80020a0 <__NVIC_EnableIRQ>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffa2 	bl	8002190 <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800226e:	e154      	b.n	800251a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2101      	movs	r1, #1
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	4013      	ands	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8146 	beq.w	8002514 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d005      	beq.n	80022a0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800229c:	2b02      	cmp	r3, #2
 800229e:	d130      	bne.n	8002302 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80022d6:	2201      	movs	r2, #1
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 0201 	and.w	r2, r3, #1
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b03      	cmp	r3, #3
 800230c:	d017      	beq.n	800233e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d123      	bne.n	8002392 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002356:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	6939      	ldr	r1, [r7, #16]
 800238e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0203 	and.w	r2, r3, #3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80a0 	beq.w	8002514 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d4:	4b58      	ldr	r3, [pc, #352]	; (8002538 <HAL_GPIO_Init+0x2e0>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a57      	ldr	r2, [pc, #348]	; (8002538 <HAL_GPIO_Init+0x2e0>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	4b55      	ldr	r3, [pc, #340]	; (8002538 <HAL_GPIO_Init+0x2e0>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80023ec:	4a53      	ldr	r2, [pc, #332]	; (800253c <HAL_GPIO_Init+0x2e4>)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a4b      	ldr	r2, [pc, #300]	; (8002540 <HAL_GPIO_Init+0x2e8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d019      	beq.n	800244c <HAL_GPIO_Init+0x1f4>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a4a      	ldr	r2, [pc, #296]	; (8002544 <HAL_GPIO_Init+0x2ec>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d013      	beq.n	8002448 <HAL_GPIO_Init+0x1f0>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a49      	ldr	r2, [pc, #292]	; (8002548 <HAL_GPIO_Init+0x2f0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00d      	beq.n	8002444 <HAL_GPIO_Init+0x1ec>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a48      	ldr	r2, [pc, #288]	; (800254c <HAL_GPIO_Init+0x2f4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d007      	beq.n	8002440 <HAL_GPIO_Init+0x1e8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a47      	ldr	r2, [pc, #284]	; (8002550 <HAL_GPIO_Init+0x2f8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d101      	bne.n	800243c <HAL_GPIO_Init+0x1e4>
 8002438:	2304      	movs	r3, #4
 800243a:	e008      	b.n	800244e <HAL_GPIO_Init+0x1f6>
 800243c:	2305      	movs	r3, #5
 800243e:	e006      	b.n	800244e <HAL_GPIO_Init+0x1f6>
 8002440:	2303      	movs	r3, #3
 8002442:	e004      	b.n	800244e <HAL_GPIO_Init+0x1f6>
 8002444:	2302      	movs	r3, #2
 8002446:	e002      	b.n	800244e <HAL_GPIO_Init+0x1f6>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_GPIO_Init+0x1f6>
 800244c:	2300      	movs	r3, #0
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	f002 0203 	and.w	r2, r2, #3
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	4093      	lsls	r3, r2
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800245e:	4937      	ldr	r1, [pc, #220]	; (800253c <HAL_GPIO_Init+0x2e4>)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800246c:	4b39      	ldr	r3, [pc, #228]	; (8002554 <HAL_GPIO_Init+0x2fc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002490:	4a30      	ldr	r2, [pc, #192]	; (8002554 <HAL_GPIO_Init+0x2fc>)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002496:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <HAL_GPIO_Init+0x2fc>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024ba:	4a26      	ldr	r2, [pc, #152]	; (8002554 <HAL_GPIO_Init+0x2fc>)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c0:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_GPIO_Init+0x2fc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024e4:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <HAL_GPIO_Init+0x2fc>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_GPIO_Init+0x2fc>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_GPIO_Init+0x2fc>)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3301      	adds	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f aea3 	bne.w	8002270 <HAL_GPIO_Init+0x18>
  }
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	40010000 	.word	0x40010000
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400
 8002548:	40020800 	.word	0x40020800
 800254c:	40020c00 	.word	0x40020c00
 8002550:	40021000 	.word	0x40021000
 8002554:	40010400 	.word	0x40010400

08002558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e12b      	b.n	80027c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff f9f0 	bl	8001964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2224      	movs	r2, #36	; 0x24
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025bc:	f001 fcf8 	bl	8003fb0 <HAL_RCC_GetPCLK1Freq>
 80025c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a81      	ldr	r2, [pc, #516]	; (80027cc <HAL_I2C_Init+0x274>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d807      	bhi.n	80025dc <HAL_I2C_Init+0x84>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a80      	ldr	r2, [pc, #512]	; (80027d0 <HAL_I2C_Init+0x278>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e006      	b.n	80025ea <HAL_I2C_Init+0x92>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a7d      	ldr	r2, [pc, #500]	; (80027d4 <HAL_I2C_Init+0x27c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	bf94      	ite	ls
 80025e4:	2301      	movls	r3, #1
 80025e6:	2300      	movhi	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0e7      	b.n	80027c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4a78      	ldr	r2, [pc, #480]	; (80027d8 <HAL_I2C_Init+0x280>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	0c9b      	lsrs	r3, r3, #18
 80025fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a6a      	ldr	r2, [pc, #424]	; (80027cc <HAL_I2C_Init+0x274>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d802      	bhi.n	800262c <HAL_I2C_Init+0xd4>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3301      	adds	r3, #1
 800262a:	e009      	b.n	8002640 <HAL_I2C_Init+0xe8>
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	4a69      	ldr	r2, [pc, #420]	; (80027dc <HAL_I2C_Init+0x284>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	3301      	adds	r3, #1
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	430b      	orrs	r3, r1
 8002646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	495c      	ldr	r1, [pc, #368]	; (80027cc <HAL_I2C_Init+0x274>)
 800265c:	428b      	cmp	r3, r1
 800265e:	d819      	bhi.n	8002694 <HAL_I2C_Init+0x13c>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e59      	subs	r1, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	fbb1 f3f3 	udiv	r3, r1, r3
 800266e:	1c59      	adds	r1, r3, #1
 8002670:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002674:	400b      	ands	r3, r1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_I2C_Init+0x138>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1e59      	subs	r1, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fbb1 f3f3 	udiv	r3, r1, r3
 8002688:	3301      	adds	r3, #1
 800268a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268e:	e051      	b.n	8002734 <HAL_I2C_Init+0x1dc>
 8002690:	2304      	movs	r3, #4
 8002692:	e04f      	b.n	8002734 <HAL_I2C_Init+0x1dc>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d111      	bne.n	80026c0 <HAL_I2C_Init+0x168>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1e58      	subs	r0, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	440b      	add	r3, r1
 80026aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf0c      	ite	eq
 80026b8:	2301      	moveq	r3, #1
 80026ba:	2300      	movne	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	e012      	b.n	80026e6 <HAL_I2C_Init+0x18e>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1e58      	subs	r0, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	0099      	lsls	r1, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Init+0x196>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e022      	b.n	8002734 <HAL_I2C_Init+0x1dc>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10e      	bne.n	8002714 <HAL_I2C_Init+0x1bc>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1e58      	subs	r0, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6859      	ldr	r1, [r3, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	440b      	add	r3, r1
 8002704:	fbb0 f3f3 	udiv	r3, r0, r3
 8002708:	3301      	adds	r3, #1
 800270a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002712:	e00f      	b.n	8002734 <HAL_I2C_Init+0x1dc>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1e58      	subs	r0, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	0099      	lsls	r1, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	fbb0 f3f3 	udiv	r3, r0, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	6809      	ldr	r1, [r1, #0]
 8002738:	4313      	orrs	r3, r2
 800273a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69da      	ldr	r2, [r3, #28]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6911      	ldr	r1, [r2, #16]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68d2      	ldr	r2, [r2, #12]
 800276e:	4311      	orrs	r1, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	430b      	orrs	r3, r1
 8002776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	000186a0 	.word	0x000186a0
 80027d0:	001e847f 	.word	0x001e847f
 80027d4:	003d08ff 	.word	0x003d08ff
 80027d8:	431bde83 	.word	0x431bde83
 80027dc:	10624dd3 	.word	0x10624dd3

080027e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	460b      	mov	r3, r1
 80027f4:	813b      	strh	r3, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027fa:	f7ff fbf3 	bl	8001fe4 <HAL_GetTick>
 80027fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b20      	cmp	r3, #32
 800280a:	f040 80d9 	bne.w	80029c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2319      	movs	r3, #25
 8002814:	2201      	movs	r2, #1
 8002816:	496d      	ldr	r1, [pc, #436]	; (80029cc <HAL_I2C_Mem_Write+0x1ec>)
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fc7f 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
 8002826:	e0cc      	b.n	80029c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Mem_Write+0x56>
 8002832:	2302      	movs	r3, #2
 8002834:	e0c5      	b.n	80029c2 <HAL_I2C_Mem_Write+0x1e2>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d007      	beq.n	800285c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2221      	movs	r2, #33	; 0x21
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2240      	movs	r2, #64	; 0x40
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a3a      	ldr	r2, [r7, #32]
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a4d      	ldr	r2, [pc, #308]	; (80029d0 <HAL_I2C_Mem_Write+0x1f0>)
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800289e:	88f8      	ldrh	r0, [r7, #6]
 80028a0:	893a      	ldrh	r2, [r7, #8]
 80028a2:	8979      	ldrh	r1, [r7, #10]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	4603      	mov	r3, r0
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fab6 	bl	8002e20 <I2C_RequestMemoryWrite>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d052      	beq.n	8002960 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e081      	b.n	80029c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fd00 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d107      	bne.n	80028e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06b      	b.n	80029c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	781a      	ldrb	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b04      	cmp	r3, #4
 8002926:	d11b      	bne.n	8002960 <HAL_I2C_Mem_Write+0x180>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	d017      	beq.n	8002960 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1aa      	bne.n	80028be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fcec 	bl	800334a <I2C_WaitOnBTFFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00d      	beq.n	8002994 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	2b04      	cmp	r3, #4
 800297e:	d107      	bne.n	8002990 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e016      	b.n	80029c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e000      	b.n	80029c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
  }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	00100002 	.word	0x00100002
 80029d0:	ffff0000 	.word	0xffff0000

080029d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08c      	sub	sp, #48	; 0x30
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	4608      	mov	r0, r1
 80029de:	4611      	mov	r1, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	4603      	mov	r3, r0
 80029e4:	817b      	strh	r3, [r7, #10]
 80029e6:	460b      	mov	r3, r1
 80029e8:	813b      	strh	r3, [r7, #8]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ee:	f7ff faf9 	bl	8001fe4 <HAL_GetTick>
 80029f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	f040 8208 	bne.w	8002e12 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	2319      	movs	r3, #25
 8002a08:	2201      	movs	r2, #1
 8002a0a:	497b      	ldr	r1, [pc, #492]	; (8002bf8 <HAL_I2C_Mem_Read+0x224>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fb85 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e1fb      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Mem_Read+0x56>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e1f4      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d007      	beq.n	8002a50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2222      	movs	r2, #34	; 0x22
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a5b      	ldr	r2, [pc, #364]	; (8002bfc <HAL_I2C_Mem_Read+0x228>)
 8002a90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a92:	88f8      	ldrh	r0, [r7, #6]
 8002a94:	893a      	ldrh	r2, [r7, #8]
 8002a96:	8979      	ldrh	r1, [r7, #10]
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fa52 	bl	8002f4c <I2C_RequestMemoryRead>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e1b0      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d113      	bne.n	8002ae2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	623b      	str	r3, [r7, #32]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e184      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d11b      	bne.n	8002b22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e164      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d11b      	bne.n	8002b62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	e144      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b78:	e138      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	f200 80f1 	bhi.w	8002d66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d123      	bne.n	8002bd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fc1b 	bl	80033cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e139      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bd2:	e10b      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d14e      	bne.n	8002c7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be2:	2200      	movs	r2, #0
 8002be4:	4906      	ldr	r1, [pc, #24]	; (8002c00 <HAL_I2C_Mem_Read+0x22c>)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fa98 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e10e      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
 8002bf6:	bf00      	nop
 8002bf8:	00100002 	.word	0x00100002
 8002bfc:	ffff0000 	.word	0xffff0000
 8002c00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c78:	e0b8      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	2200      	movs	r2, #0
 8002c82:	4966      	ldr	r1, [pc, #408]	; (8002e1c <HAL_I2C_Mem_Read+0x448>)
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fa49 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0bf      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cdc:	2200      	movs	r2, #0
 8002cde:	494f      	ldr	r1, [pc, #316]	; (8002e1c <HAL_I2C_Mem_Read+0x448>)
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fa1b 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e091      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d64:	e042      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fb2e 	bl	80033cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e04c      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d118      	bne.n	8002dec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f47f aec2 	bne.w	8002b7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
  }
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3728      	adds	r7, #40	; 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	00010004 	.word	0x00010004

08002e20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	817b      	strh	r3, [r7, #10]
 8002e32:	460b      	mov	r3, r1
 8002e34:	813b      	strh	r3, [r7, #8]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f960 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e70:	d103      	bne.n	8002e7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e05f      	b.n	8002f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	6a3a      	ldr	r2, [r7, #32]
 8002e92:	492d      	ldr	r1, [pc, #180]	; (8002f48 <I2C_RequestMemoryWrite+0x128>)
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f998 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e04c      	b.n	8002f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebc:	6a39      	ldr	r1, [r7, #32]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fa02 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d107      	bne.n	8002ee2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e02b      	b.n	8002f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eec:	893b      	ldrh	r3, [r7, #8]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	611a      	str	r2, [r3, #16]
 8002ef6:	e021      	b.n	8002f3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ef8:	893b      	ldrh	r3, [r7, #8]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f08:	6a39      	ldr	r1, [r7, #32]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f9dc 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d107      	bne.n	8002f2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e005      	b.n	8002f3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f32:	893b      	ldrh	r3, [r7, #8]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	00010002 	.word	0x00010002

08002f4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	4608      	mov	r0, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	813b      	strh	r3, [r7, #8]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f8c2 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00d      	beq.n	8002fba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fac:	d103      	bne.n	8002fb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0aa      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fba:	897b      	ldrh	r3, [r7, #10]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	6a3a      	ldr	r2, [r7, #32]
 8002fce:	4952      	ldr	r1, [pc, #328]	; (8003118 <I2C_RequestMemoryRead+0x1cc>)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f8fa 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e097      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff8:	6a39      	ldr	r1, [r7, #32]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f964 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b04      	cmp	r3, #4
 800300c:	d107      	bne.n	800301e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e076      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003028:	893b      	ldrh	r3, [r7, #8]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	611a      	str	r2, [r3, #16]
 8003032:	e021      	b.n	8003078 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003034:	893b      	ldrh	r3, [r7, #8]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	b29b      	uxth	r3, r3
 800303a:	b2da      	uxtb	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003044:	6a39      	ldr	r1, [r7, #32]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f93e 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b04      	cmp	r3, #4
 8003058:	d107      	bne.n	800306a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003068:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e050      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800306e:	893b      	ldrh	r3, [r7, #8]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307a:	6a39      	ldr	r1, [r7, #32]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f923 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	2b04      	cmp	r3, #4
 800308e:	d107      	bne.n	80030a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e035      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f82b 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030da:	d103      	bne.n	80030e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e013      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030e8:	897b      	ldrh	r3, [r7, #10]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	6a3a      	ldr	r2, [r7, #32]
 80030fc:	4906      	ldr	r1, [pc, #24]	; (8003118 <I2C_RequestMemoryRead+0x1cc>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f863 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	00010002 	.word	0x00010002

0800311c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800312c:	e025      	b.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d021      	beq.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003136:	f7fe ff55 	bl	8001fe4 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d116      	bne.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0220 	orr.w	r2, r3, #32
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e023      	b.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10d      	bne.n	80031a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	e00c      	b.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d0b6      	beq.n	800312e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031d8:	e051      	b.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d123      	bne.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003202:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f043 0204 	orr.w	r2, r3, #4
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e046      	b.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d021      	beq.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe fed3 	bl	8001fe4 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e020      	b.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d10c      	bne.n	80032a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	43da      	mvns	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	e00b      	b.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	43da      	mvns	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4013      	ands	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d18d      	bne.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d4:	e02d      	b.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f8ce 	bl	8003478 <I2C_IsAcknowledgeFailed>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e02d      	b.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d021      	beq.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7fe fe79 	bl	8001fe4 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0220 	orr.w	r2, r3, #32
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e007      	b.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d1ca      	bne.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003356:	e02d      	b.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f88d 	bl	8003478 <I2C_IsAcknowledgeFailed>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e02d      	b.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d021      	beq.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003370:	f7fe fe38 	bl	8001fe4 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	d302      	bcc.n	8003386 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d116      	bne.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e007      	b.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d1ca      	bne.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033d8:	e042      	b.n	8003460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d119      	bne.n	800341c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0210 	mvn.w	r2, #16
 80033f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e029      	b.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341c:	f7fe fde2 	bl	8001fe4 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	429a      	cmp	r2, r3
 800342a:	d302      	bcc.n	8003432 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e007      	b.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d1b5      	bne.n	80033da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d11b      	bne.n	80034c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003498:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f043 0204 	orr.w	r2, r3, #4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e31d      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e6:	4b94      	ldr	r3, [pc, #592]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034f0:	4b91      	ldr	r3, [pc, #580]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d07b      	beq.n	80035fe <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d006      	beq.n	800351a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d10f      	bne.n	8003532 <HAL_RCC_OscConfig+0x5e>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d10b      	bne.n	8003532 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351a:	4b87      	ldr	r3, [pc, #540]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d06a      	beq.n	80035fc <HAL_RCC_OscConfig+0x128>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d166      	bne.n	80035fc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e2f7      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d106      	bne.n	8003548 <HAL_RCC_OscConfig+0x74>
 800353a:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a7e      	ldr	r2, [pc, #504]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e02d      	b.n	80035a4 <HAL_RCC_OscConfig+0xd0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10c      	bne.n	800356a <HAL_RCC_OscConfig+0x96>
 8003550:	4b79      	ldr	r3, [pc, #484]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a78      	ldr	r2, [pc, #480]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b76      	ldr	r3, [pc, #472]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a75      	ldr	r2, [pc, #468]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	e01c      	b.n	80035a4 <HAL_RCC_OscConfig+0xd0>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b05      	cmp	r3, #5
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0xb8>
 8003572:	4b71      	ldr	r3, [pc, #452]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a70      	ldr	r2, [pc, #448]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6e      	ldr	r3, [pc, #440]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6d      	ldr	r2, [pc, #436]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0xd0>
 800358c:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a69      	ldr	r2, [pc, #420]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b67      	ldr	r3, [pc, #412]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a66      	ldr	r2, [pc, #408]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 800359e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fe fd1a 	bl	8001fe4 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b4:	f7fe fd16 	bl	8001fe4 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e2ad      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035c6:	4b5c      	ldr	r3, [pc, #368]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0xe0>
 80035d2:	e014      	b.n	80035fe <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe fd06 	bl	8001fe4 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035dc:	f7fe fd02 	bl	8001fe4 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e299      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035ee:	4b52      	ldr	r3, [pc, #328]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x108>
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d05a      	beq.n	80036c0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b04      	cmp	r3, #4
 800360e:	d005      	beq.n	800361c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b0c      	cmp	r3, #12
 8003614:	d119      	bne.n	800364a <HAL_RCC_OscConfig+0x176>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d116      	bne.n	800364a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361c:	4b46      	ldr	r3, [pc, #280]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_OscConfig+0x160>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d001      	beq.n	8003634 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e276      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b40      	ldr	r3, [pc, #256]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	493d      	ldr	r1, [pc, #244]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003648:	e03a      	b.n	80036c0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d020      	beq.n	8003694 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003652:	4b3a      	ldr	r3, [pc, #232]	; (800373c <HAL_RCC_OscConfig+0x268>)
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fcc4 	bl	8001fe4 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003660:	f7fe fcc0 	bl	8001fe4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e257      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003672:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	492a      	ldr	r1, [pc, #168]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 800368e:	4313      	orrs	r3, r2
 8003690:	604b      	str	r3, [r1, #4]
 8003692:	e015      	b.n	80036c0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003694:	4b29      	ldr	r3, [pc, #164]	; (800373c <HAL_RCC_OscConfig+0x268>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369a:	f7fe fca3 	bl	8001fe4 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a2:	f7fe fc9f 	bl	8001fe4 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e236      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036b4:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f0      	bne.n	80036a2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80b8 	beq.w	800383e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d170      	bne.n	80037b6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036d4:	4b18      	ldr	r3, [pc, #96]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_OscConfig+0x218>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e21a      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1a      	ldr	r2, [r3, #32]
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d921      	bls.n	8003740 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fc7d 	bl	8004000 <RCC_SetFlashLatencyFromMSIRange>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e208      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4906      	ldr	r1, [pc, #24]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	4901      	ldr	r1, [pc, #4]	; (8003738 <HAL_RCC_OscConfig+0x264>)
 8003732:	4313      	orrs	r3, r2
 8003734:	604b      	str	r3, [r1, #4]
 8003736:	e020      	b.n	800377a <HAL_RCC_OscConfig+0x2a6>
 8003738:	40023800 	.word	0x40023800
 800373c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003740:	4b99      	ldr	r3, [pc, #612]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4996      	ldr	r1, [pc, #600]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003752:	4b95      	ldr	r3, [pc, #596]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	061b      	lsls	r3, r3, #24
 8003760:	4991      	ldr	r1, [pc, #580]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fc48 	bl	8004000 <RCC_SetFlashLatencyFromMSIRange>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e1d3      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	0b5b      	lsrs	r3, r3, #13
 8003780:	3301      	adds	r3, #1
 8003782:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800378a:	4a87      	ldr	r2, [pc, #540]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 800378c:	6892      	ldr	r2, [r2, #8]
 800378e:	0912      	lsrs	r2, r2, #4
 8003790:	f002 020f 	and.w	r2, r2, #15
 8003794:	4985      	ldr	r1, [pc, #532]	; (80039ac <HAL_RCC_OscConfig+0x4d8>)
 8003796:	5c8a      	ldrb	r2, [r1, r2]
 8003798:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800379a:	4a85      	ldr	r2, [pc, #532]	; (80039b0 <HAL_RCC_OscConfig+0x4dc>)
 800379c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800379e:	4b85      	ldr	r3, [pc, #532]	; (80039b4 <HAL_RCC_OscConfig+0x4e0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fbd2 	bl	8001f4c <HAL_InitTick>
 80037a8:	4603      	mov	r3, r0
 80037aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d045      	beq.n	800383e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	e1b5      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d029      	beq.n	8003812 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037be:	4b7e      	ldr	r3, [pc, #504]	; (80039b8 <HAL_RCC_OscConfig+0x4e4>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fe fc0e 	bl	8001fe4 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037cc:	f7fe fc0a 	bl	8001fe4 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e1a1      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037de:	4b72      	ldr	r3, [pc, #456]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ea:	4b6f      	ldr	r3, [pc, #444]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	496c      	ldr	r1, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037fc:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	061b      	lsls	r3, r3, #24
 800380a:	4967      	ldr	r1, [pc, #412]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
 8003810:	e015      	b.n	800383e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003812:	4b69      	ldr	r3, [pc, #420]	; (80039b8 <HAL_RCC_OscConfig+0x4e4>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe fbe4 	bl	8001fe4 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003820:	f7fe fbe0 	bl	8001fe4 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e177      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003832:	4b5d      	ldr	r3, [pc, #372]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d030      	beq.n	80038ac <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003852:	4b5a      	ldr	r3, [pc, #360]	; (80039bc <HAL_RCC_OscConfig+0x4e8>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003858:	f7fe fbc4 	bl	8001fe4 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003860:	f7fe fbc0 	bl	8001fe4 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e157      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003872:	4b4d      	ldr	r3, [pc, #308]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x38c>
 800387e:	e015      	b.n	80038ac <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003880:	4b4e      	ldr	r3, [pc, #312]	; (80039bc <HAL_RCC_OscConfig+0x4e8>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003886:	f7fe fbad 	bl	8001fe4 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388e:	f7fe fba9 	bl	8001fe4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e140      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038a0:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 80038a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f0      	bne.n	800388e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80b5 	beq.w	8003a24 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ba:	2300      	movs	r3, #0
 80038bc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038be:	4b3a      	ldr	r3, [pc, #232]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10d      	bne.n	80038e6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	4a36      	ldr	r2, [pc, #216]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 80038d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d4:	6253      	str	r3, [r2, #36]	; 0x24
 80038d6:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e2:	2301      	movs	r3, #1
 80038e4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e6:	4b36      	ldr	r3, [pc, #216]	; (80039c0 <HAL_RCC_OscConfig+0x4ec>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d118      	bne.n	8003924 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f2:	4b33      	ldr	r3, [pc, #204]	; (80039c0 <HAL_RCC_OscConfig+0x4ec>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a32      	ldr	r2, [pc, #200]	; (80039c0 <HAL_RCC_OscConfig+0x4ec>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fe:	f7fe fb71 	bl	8001fe4 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003906:	f7fe fb6d 	bl	8001fe4 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b64      	cmp	r3, #100	; 0x64
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e104      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <HAL_RCC_OscConfig+0x4ec>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d106      	bne.n	800393a <HAL_RCC_OscConfig+0x466>
 800392c:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 800392e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003930:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003936:	6353      	str	r3, [r2, #52]	; 0x34
 8003938:	e02d      	b.n	8003996 <HAL_RCC_OscConfig+0x4c2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x488>
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800394c:	6353      	str	r3, [r2, #52]	; 0x34
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003952:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003958:	6353      	str	r3, [r2, #52]	; 0x34
 800395a:	e01c      	b.n	8003996 <HAL_RCC_OscConfig+0x4c2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b05      	cmp	r3, #5
 8003962:	d10c      	bne.n	800397e <HAL_RCC_OscConfig+0x4aa>
 8003964:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003968:	4a0f      	ldr	r2, [pc, #60]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 800396a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800396e:	6353      	str	r3, [r2, #52]	; 0x34
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	4a0c      	ldr	r2, [pc, #48]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397a:	6353      	str	r3, [r2, #52]	; 0x34
 800397c:	e00b      	b.n	8003996 <HAL_RCC_OscConfig+0x4c2>
 800397e:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003988:	6353      	str	r3, [r2, #52]	; 0x34
 800398a:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	4a06      	ldr	r2, [pc, #24]	; (80039a8 <HAL_RCC_OscConfig+0x4d4>)
 8003990:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003994:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d024      	beq.n	80039e8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399e:	f7fe fb21 	bl	8001fe4 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039a4:	e019      	b.n	80039da <HAL_RCC_OscConfig+0x506>
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	0800996c 	.word	0x0800996c
 80039b0:	20000000 	.word	0x20000000
 80039b4:	20000004 	.word	0x20000004
 80039b8:	42470020 	.word	0x42470020
 80039bc:	42470680 	.word	0x42470680
 80039c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fe fb0e 	bl	8001fe4 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0a3      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039da:	4b54      	ldr	r3, [pc, #336]	; (8003b2c <HAL_RCC_OscConfig+0x658>)
 80039dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0ee      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4f0>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e8:	f7fe fafc 	bl	8001fe4 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fe faf8 	bl	8001fe4 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e08d      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a06:	4b49      	ldr	r3, [pc, #292]	; (8003b2c <HAL_RCC_OscConfig+0x658>)
 8003a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ee      	bne.n	80039f0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a12:	7ffb      	ldrb	r3, [r7, #31]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a18:	4b44      	ldr	r3, [pc, #272]	; (8003b2c <HAL_RCC_OscConfig+0x658>)
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	4a43      	ldr	r2, [pc, #268]	; (8003b2c <HAL_RCC_OscConfig+0x658>)
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a22:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d079      	beq.n	8003b20 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	d056      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d13b      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3a:	4b3d      	ldr	r3, [pc, #244]	; (8003b30 <HAL_RCC_OscConfig+0x65c>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe fad0 	bl	8001fe4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fe facc 	bl	8001fe4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e063      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a5a:	4b34      	ldr	r3, [pc, #208]	; (8003b2c <HAL_RCC_OscConfig+0x658>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a66:	4b31      	ldr	r3, [pc, #196]	; (8003b2c <HAL_RCC_OscConfig+0x658>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	4319      	orrs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	492b      	ldr	r1, [pc, #172]	; (8003b2c <HAL_RCC_OscConfig+0x658>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a84:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <HAL_RCC_OscConfig+0x65c>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fe faab 	bl	8001fe4 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a92:	f7fe faa7 	bl	8001fe4 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e03e      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aa4:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <HAL_RCC_OscConfig+0x658>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x5be>
 8003ab0:	e036      	b.n	8003b20 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <HAL_RCC_OscConfig+0x65c>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fa94 	bl	8001fe4 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe fa90 	bl	8001fe4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e027      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ad2:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <HAL_RCC_OscConfig+0x658>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5ec>
 8003ade:	e01f      	b.n	8003b20 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e01a      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003aec:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <HAL_RCC_OscConfig+0x658>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d10d      	bne.n	8003b1c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d106      	bne.n	8003b1c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	42470060 	.word	0x42470060

08003b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e11a      	b.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b48:	4b8f      	ldr	r3, [pc, #572]	; (8003d88 <HAL_RCC_ClockConfig+0x254>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d919      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x34>
 8003b5c:	4b8a      	ldr	r3, [pc, #552]	; (8003d88 <HAL_RCC_ClockConfig+0x254>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a89      	ldr	r2, [pc, #548]	; (8003d88 <HAL_RCC_ClockConfig+0x254>)
 8003b62:	f043 0304 	orr.w	r3, r3, #4
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b87      	ldr	r3, [pc, #540]	; (8003d88 <HAL_RCC_ClockConfig+0x254>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 0201 	bic.w	r2, r3, #1
 8003b70:	4985      	ldr	r1, [pc, #532]	; (8003d88 <HAL_RCC_ClockConfig+0x254>)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b78:	4b83      	ldr	r3, [pc, #524]	; (8003d88 <HAL_RCC_ClockConfig+0x254>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d001      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e0f9      	b.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b96:	4b7d      	ldr	r3, [pc, #500]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	497a      	ldr	r1, [pc, #488]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 808e 	beq.w	8003cd2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d107      	bne.n	8003bce <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bbe:	4b73      	ldr	r3, [pc, #460]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d121      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0d7      	b.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bd6:	4b6d      	ldr	r3, [pc, #436]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d115      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0cb      	b.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bee:	4b67      	ldr	r3, [pc, #412]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e0bf      	b.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003bfe:	4b63      	ldr	r3, [pc, #396]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e0b7      	b.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0e:	4b5f      	ldr	r3, [pc, #380]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f023 0203 	bic.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	495c      	ldr	r1, [pc, #368]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c20:	f7fe f9e0 	bl	8001fe4 <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d112      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c2e:	e00a      	b.n	8003c46 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c30:	f7fe f9d8 	bl	8001fe4 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e09b      	b.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c46:	4b51      	ldr	r3, [pc, #324]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d1ee      	bne.n	8003c30 <HAL_RCC_ClockConfig+0xfc>
 8003c52:	e03e      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d112      	bne.n	8003c82 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c5e:	f7fe f9c1 	bl	8001fe4 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e084      	b.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c74:	4b45      	ldr	r3, [pc, #276]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b0c      	cmp	r3, #12
 8003c7e:	d1ee      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x12a>
 8003c80:	e027      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d11d      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fe f9aa 	bl	8001fe4 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e06d      	b.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca2:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d1ee      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x158>
 8003cae:	e010      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fe f998 	bl	8001fe4 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e05b      	b.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003cc6:	4b31      	ldr	r3, [pc, #196]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1ee      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd2:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_RCC_ClockConfig+0x254>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d219      	bcs.n	8003d14 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d105      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0x1be>
 8003ce6:	4b28      	ldr	r3, [pc, #160]	; (8003d88 <HAL_RCC_ClockConfig+0x254>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a27      	ldr	r2, [pc, #156]	; (8003d88 <HAL_RCC_ClockConfig+0x254>)
 8003cec:	f043 0304 	orr.w	r3, r3, #4
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <HAL_RCC_ClockConfig+0x254>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	4923      	ldr	r1, [pc, #140]	; (8003d88 <HAL_RCC_ClockConfig+0x254>)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d02:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <HAL_RCC_ClockConfig+0x254>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e034      	b.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4917      	ldr	r1, [pc, #92]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d3e:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	490f      	ldr	r1, [pc, #60]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d52:	f000 f823 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003d56:	4602      	mov	r2, r0
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <HAL_RCC_ClockConfig+0x258>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	490b      	ldr	r1, [pc, #44]	; (8003d90 <HAL_RCC_ClockConfig+0x25c>)
 8003d64:	5ccb      	ldrb	r3, [r1, r3]
 8003d66:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <HAL_RCC_ClockConfig+0x260>)
 8003d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe f8ea 	bl	8001f4c <HAL_InitTick>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023c00 	.word	0x40023c00
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	0800996c 	.word	0x0800996c
 8003d94:	20000000 	.word	0x20000000
 8003d98:	20000004 	.word	0x20000004

08003d9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da0:	b092      	sub	sp, #72	; 0x48
 8003da2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003da4:	4b79      	ldr	r3, [pc, #484]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	d00d      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003db4:	2b0c      	cmp	r3, #12
 8003db6:	f200 80d5 	bhi.w	8003f64 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d002      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x28>
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d003      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0x2e>
 8003dc2:	e0cf      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc4:	4b72      	ldr	r3, [pc, #456]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003dc6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003dc8:	e0da      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dca:	4b72      	ldr	r3, [pc, #456]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003dcc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003dce:	e0d7      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd2:	0c9b      	lsrs	r3, r3, #18
 8003dd4:	f003 020f 	and.w	r2, r3, #15
 8003dd8:	4b6f      	ldr	r3, [pc, #444]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003dda:	5c9b      	ldrb	r3, [r3, r2]
 8003ddc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de0:	0d9b      	lsrs	r3, r3, #22
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	3301      	adds	r3, #1
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dea:	4b68      	ldr	r3, [pc, #416]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d05d      	beq.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4604      	mov	r4, r0
 8003e00:	460d      	mov	r5, r1
 8003e02:	4622      	mov	r2, r4
 8003e04:	462b      	mov	r3, r5
 8003e06:	f04f 0000 	mov.w	r0, #0
 8003e0a:	f04f 0100 	mov.w	r1, #0
 8003e0e:	0159      	lsls	r1, r3, #5
 8003e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e14:	0150      	lsls	r0, r2, #5
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	1a51      	subs	r1, r2, r1
 8003e1e:	6139      	str	r1, [r7, #16]
 8003e20:	4629      	mov	r1, r5
 8003e22:	eb63 0301 	sbc.w	r3, r3, r1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e34:	4659      	mov	r1, fp
 8003e36:	018b      	lsls	r3, r1, #6
 8003e38:	4651      	mov	r1, sl
 8003e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e3e:	4651      	mov	r1, sl
 8003e40:	018a      	lsls	r2, r1, #6
 8003e42:	46d4      	mov	ip, sl
 8003e44:	ebb2 080c 	subs.w	r8, r2, ip
 8003e48:	4659      	mov	r1, fp
 8003e4a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e62:	4690      	mov	r8, r2
 8003e64:	4699      	mov	r9, r3
 8003e66:	4623      	mov	r3, r4
 8003e68:	eb18 0303 	adds.w	r3, r8, r3
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	462b      	mov	r3, r5
 8003e70:	eb49 0303 	adc.w	r3, r9, r3
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e82:	4629      	mov	r1, r5
 8003e84:	024b      	lsls	r3, r1, #9
 8003e86:	4620      	mov	r0, r4
 8003e88:	4629      	mov	r1, r5
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003e90:	4601      	mov	r1, r0
 8003e92:	024a      	lsls	r2, r1, #9
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ea0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ea4:	f7fd f8d6 	bl	8001054 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb0:	e055      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	623b      	str	r3, [r7, #32]
 8003eb8:	627a      	str	r2, [r7, #36]	; 0x24
 8003eba:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ebe:	4642      	mov	r2, r8
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	f04f 0000 	mov.w	r0, #0
 8003ec6:	f04f 0100 	mov.w	r1, #0
 8003eca:	0159      	lsls	r1, r3, #5
 8003ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed0:	0150      	lsls	r0, r2, #5
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	46c4      	mov	ip, r8
 8003ed8:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003edc:	4640      	mov	r0, r8
 8003ede:	4649      	mov	r1, r9
 8003ee0:	468c      	mov	ip, r1
 8003ee2:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ef2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ef6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003efa:	ebb2 040a 	subs.w	r4, r2, sl
 8003efe:	eb63 050b 	sbc.w	r5, r3, fp
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	00eb      	lsls	r3, r5, #3
 8003f0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f10:	00e2      	lsls	r2, r4, #3
 8003f12:	4614      	mov	r4, r2
 8003f14:	461d      	mov	r5, r3
 8003f16:	4603      	mov	r3, r0
 8003f18:	18e3      	adds	r3, r4, r3
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	eb45 0303 	adc.w	r3, r5, r3
 8003f22:	607b      	str	r3, [r7, #4]
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f30:	4629      	mov	r1, r5
 8003f32:	028b      	lsls	r3, r1, #10
 8003f34:	4620      	mov	r0, r4
 8003f36:	4629      	mov	r1, r5
 8003f38:	4604      	mov	r4, r0
 8003f3a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003f3e:	4601      	mov	r1, r0
 8003f40:	028a      	lsls	r2, r1, #10
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	2200      	movs	r2, #0
 8003f4a:	61bb      	str	r3, [r7, #24]
 8003f4c:	61fa      	str	r2, [r7, #28]
 8003f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f52:	f7fd f87f 	bl	8001054 <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8003f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f60:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003f62:	e00d      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	0b5b      	lsrs	r3, r3, #13
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	3301      	adds	r3, #1
 8003f74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003f7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3748      	adds	r7, #72	; 0x48
 8003f86:	46bd      	mov	sp, r7
 8003f88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	00f42400 	.word	0x00f42400
 8003f94:	007a1200 	.word	0x007a1200
 8003f98:	08009960 	.word	0x08009960

08003f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa0:	4b02      	ldr	r3, [pc, #8]	; (8003fac <HAL_RCC_GetHCLKFreq+0x10>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr
 8003fac:	20000000 	.word	0x20000000

08003fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fb4:	f7ff fff2 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	4903      	ldr	r1, [pc, #12]	; (8003fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc6:	5ccb      	ldrb	r3, [r1, r3]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	0800997c 	.word	0x0800997c

08003fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fdc:	f7ff ffde 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	0adb      	lsrs	r3, r3, #11
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	4903      	ldr	r1, [pc, #12]	; (8003ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fee:	5ccb      	ldrb	r3, [r1, r3]
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	0800997c 	.word	0x0800997c

08004000 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004008:	2300      	movs	r3, #0
 800400a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800400c:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d12c      	bne.n	8004072 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004018:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004024:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e016      	b.n	800405e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004030:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	4a1f      	ldr	r2, [pc, #124]	; (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403a:	6253      	str	r3, [r2, #36]	; 0x24
 800403c:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004050:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004052:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800405c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004064:	d105      	bne.n	8004072 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800406c:	d101      	bne.n	8004072 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800406e:	2301      	movs	r3, #1
 8004070:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d105      	bne.n	8004084 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004078:	4b10      	ldr	r3, [pc, #64]	; (80040bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0f      	ldr	r2, [pc, #60]	; (80040bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800407e:	f043 0304 	orr.w	r3, r3, #4
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f023 0201 	bic.w	r2, r3, #1
 800408c:	490b      	ldr	r1, [pc, #44]	; (80040bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d001      	beq.n	80040a6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40007000 	.word	0x40007000
 80040bc:	40023c00 	.word	0x40023c00

080040c0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80ed 	beq.w	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80040e2:	2300      	movs	r3, #0
 80040e4:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e6:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10d      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f2:	4b75      	ldr	r3, [pc, #468]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	4a74      	ldr	r2, [pc, #464]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fc:	6253      	str	r3, [r2, #36]	; 0x24
 80040fe:	4b72      	ldr	r3, [pc, #456]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800410a:	2301      	movs	r3, #1
 800410c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410e:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d118      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800411a:	4b6c      	ldr	r3, [pc, #432]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a6b      	ldr	r2, [pc, #428]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004126:	f7fd ff5d 	bl	8001fe4 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	e008      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800412e:	f7fd ff59 	bl	8001fe4 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b64      	cmp	r3, #100	; 0x64
 800413a:	d901      	bls.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e0be      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004140:	4b62      	ldr	r3, [pc, #392]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800414c:	4b5e      	ldr	r3, [pc, #376]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004154:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	429a      	cmp	r2, r3
 8004162:	d106      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	429a      	cmp	r2, r3
 8004170:	d00f      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800417a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800417e:	d108      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004180:	4b51      	ldr	r3, [pc, #324]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800418c:	d101      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e095      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004192:	4b4d      	ldr	r3, [pc, #308]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800419a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d041      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d005      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10c      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d02d      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d027      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80041d6:	4b3c      	ldr	r3, [pc, #240]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80041de:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041e0:	4b3b      	ldr	r3, [pc, #236]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041e6:	4b3a      	ldr	r3, [pc, #232]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80041ec:	4a36      	ldr	r2, [pc, #216]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d014      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fd fef2 	bl	8001fe4 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004202:	e00a      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fd feee 	bl	8001fe4 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e051      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800421a:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0ee      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800423a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800423e:	d10a      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004240:	4b21      	ldr	r3, [pc, #132]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004250:	491d      	ldr	r1, [pc, #116]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]
 8004256:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004262:	4919      	ldr	r1, [pc, #100]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004264:	4313      	orrs	r3, r2
 8004266:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800427c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004280:	d10a      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004282:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004292:	490d      	ldr	r1, [pc, #52]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004294:	4313      	orrs	r3, r2
 8004296:	600b      	str	r3, [r1, #0]
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800429a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042a4:	4908      	ldr	r1, [pc, #32]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d105      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80042b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ba:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40007000 	.word	0x40007000
 80042d0:	424706dc 	.word	0x424706dc

080042d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e083      	b.n	80043ee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	7f5b      	ldrb	r3, [r3, #29]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d105      	bne.n	80042fc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fd fb78 	bl	80019ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	22ca      	movs	r2, #202	; 0xca
 8004308:	625a      	str	r2, [r3, #36]	; 0x24
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2253      	movs	r2, #83	; 0x53
 8004310:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fc17 	bl	8004b46 <RTC_EnterInitMode>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	22ff      	movs	r2, #255	; 0xff
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2204      	movs	r2, #4
 800432a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e05e      	b.n	80043ee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800433e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004342:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6899      	ldr	r1, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68d2      	ldr	r2, [r2, #12]
 800436a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6919      	ldr	r1, [r3, #16]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	041a      	lsls	r2, r3, #16
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800438e:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10e      	bne.n	80043bc <HAL_RTC_Init+0xe8>
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fba4 	bl	8004aec <HAL_RTC_WaitForSynchro>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d008      	beq.n	80043bc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	22ff      	movs	r2, #255	; 0xff
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2204      	movs	r2, #4
 80043b6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e018      	b.n	80043ee <HAL_RTC_Init+0x11a>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	22ff      	movs	r2, #255	; 0xff
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043f6:	b590      	push	{r4, r7, lr}
 80043f8:	b087      	sub	sp, #28
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	7f1b      	ldrb	r3, [r3, #28]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_RTC_SetTime+0x18>
 800440a:	2302      	movs	r3, #2
 800440c:	e0a3      	b.n	8004556 <HAL_RTC_SetTime+0x160>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2202      	movs	r2, #2
 8004418:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d126      	bne.n	800446e <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2200      	movs	r2, #0
 8004432:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fbae 	bl	8004b9a <RTC_ByteToBcd2>
 800443e:	4603      	mov	r3, r0
 8004440:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fba7 	bl	8004b9a <RTC_ByteToBcd2>
 800444c:	4603      	mov	r3, r0
 800444e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004450:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	789b      	ldrb	r3, [r3, #2]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fb9f 	bl	8004b9a <RTC_ByteToBcd2>
 800445c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800445e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	78db      	ldrb	r3, [r3, #3]
 8004466:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	e018      	b.n	80044a0 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d102      	bne.n	8004482 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	785b      	ldrb	r3, [r3, #1]
 800448c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800448e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004494:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	78db      	ldrb	r3, [r3, #3]
 800449a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	22ca      	movs	r2, #202	; 0xca
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2253      	movs	r2, #83	; 0x53
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fb48 	bl	8004b46 <RTC_EnterInitMode>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00b      	beq.n	80044d4 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	22ff      	movs	r2, #255	; 0xff
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2204      	movs	r2, #4
 80044c8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e040      	b.n	8004556 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6899      	ldr	r1, [r3, #8]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	431a      	orrs	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800451a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fae5 	bl	8004aec <HAL_RTC_WaitForSynchro>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00b      	beq.n	8004540 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	22ff      	movs	r2, #255	; 0xff
 800452e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2204      	movs	r2, #4
 8004534:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e00a      	b.n	8004556 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	22ff      	movs	r2, #255	; 0xff
 8004546:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004554:	2300      	movs	r3, #0
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	bd90      	pop	{r4, r7, pc}

0800455e <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	b29a      	uxth	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800458e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004592:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	0a1b      	lsrs	r3, r3, #8
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d11a      	bne.n	800460e <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fafb 	bl	8004bd8 <RTC_Bcd2ToByte>
 80045e2:	4603      	mov	r3, r0
 80045e4:	461a      	mov	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 faf2 	bl	8004bd8 <RTC_Bcd2ToByte>
 80045f4:	4603      	mov	r3, r0
 80045f6:	461a      	mov	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	789b      	ldrb	r3, [r3, #2]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fae9 	bl	8004bd8 <RTC_Bcd2ToByte>
 8004606:	4603      	mov	r3, r0
 8004608:	461a      	mov	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004618:	b590      	push	{r4, r7, lr}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	7f1b      	ldrb	r3, [r3, #28]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_RTC_SetDate+0x18>
 800462c:	2302      	movs	r3, #2
 800462e:	e08d      	b.n	800474c <HAL_RTC_SetDate+0x134>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2202      	movs	r2, #2
 800463a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10e      	bne.n	8004660 <HAL_RTC_SetDate+0x48>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	785b      	ldrb	r3, [r3, #1]
 8004652:	f023 0310 	bic.w	r3, r3, #16
 8004656:	b2db      	uxtb	r3, r3
 8004658:	330a      	adds	r3, #10
 800465a:	b2da      	uxtb	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d11c      	bne.n	80046a0 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	78db      	ldrb	r3, [r3, #3]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fa95 	bl	8004b9a <RTC_ByteToBcd2>
 8004670:	4603      	mov	r3, r0
 8004672:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fa8e 	bl	8004b9a <RTC_ByteToBcd2>
 800467e:	4603      	mov	r3, r0
 8004680:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004682:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	789b      	ldrb	r3, [r3, #2]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fa86 	bl	8004b9a <RTC_ByteToBcd2>
 800468e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004690:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	e00e      	b.n	80046be <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	78db      	ldrb	r3, [r3, #3]
 80046a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80046ac:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80046b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	22ca      	movs	r2, #202	; 0xca
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2253      	movs	r2, #83	; 0x53
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fa39 	bl	8004b46 <RTC_EnterInitMode>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	22ff      	movs	r2, #255	; 0xff
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2204      	movs	r2, #4
 80046e6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e02c      	b.n	800474c <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004700:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004710:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f9ea 	bl	8004aec <HAL_RTC_WaitForSynchro>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	22ff      	movs	r2, #255	; 0xff
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2204      	movs	r2, #4
 800472a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e00a      	b.n	800474c <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	22ff      	movs	r2, #255	; 0xff
 800473c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800474a:	2300      	movs	r3, #0
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	bd90      	pop	{r4, r7, pc}

08004754 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800476a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800476e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	0c1b      	lsrs	r3, r3, #16
 8004774:	b2da      	uxtb	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	b2db      	uxtb	r3, r3
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	b2da      	uxtb	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004792:	b2da      	uxtb	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	0b5b      	lsrs	r3, r3, #13
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d11a      	bne.n	80047e4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	78db      	ldrb	r3, [r3, #3]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fa10 	bl	8004bd8 <RTC_Bcd2ToByte>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fa07 	bl	8004bd8 <RTC_Bcd2ToByte>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	789b      	ldrb	r3, [r3, #2]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f9fe 	bl	8004bd8 <RTC_Bcd2ToByte>
 80047dc:	4603      	mov	r3, r0
 80047de:	461a      	mov	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80047f0:	b590      	push	{r4, r7, lr}
 80047f2:	b089      	sub	sp, #36	; 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	7f1b      	ldrb	r3, [r3, #28]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_RTC_SetAlarm_IT+0x24>
 8004810:	2302      	movs	r3, #2
 8004812:	e11f      	b.n	8004a54 <HAL_RTC_SetAlarm_IT+0x264>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2202      	movs	r2, #2
 800481e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d137      	bne.n	8004896 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2200      	movs	r2, #0
 8004838:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f9ab 	bl	8004b9a <RTC_ByteToBcd2>
 8004844:	4603      	mov	r3, r0
 8004846:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f9a4 	bl	8004b9a <RTC_ByteToBcd2>
 8004852:	4603      	mov	r3, r0
 8004854:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004856:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	789b      	ldrb	r3, [r3, #2]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 f99c 	bl	8004b9a <RTC_ByteToBcd2>
 8004862:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004864:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	78db      	ldrb	r3, [r3, #3]
 800486c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800486e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 f98e 	bl	8004b9a <RTC_ByteToBcd2>
 800487e:	4603      	mov	r3, r0
 8004880:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004882:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800488a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004890:	4313      	orrs	r3, r2
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	e023      	b.n	80048de <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2200      	movs	r2, #0
 80048a8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048b6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80048bc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	78db      	ldrb	r3, [r3, #3]
 80048c2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80048c4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80048ce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80048d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048da:	4313      	orrs	r3, r2
 80048dc:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	22ca      	movs	r2, #202	; 0xca
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2253      	movs	r2, #83	; 0x53
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004902:	d148      	bne.n	8004996 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004912:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	b2da      	uxtb	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004924:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004926:	f7fd fb5d 	bl	8001fe4 <HAL_GetTick>
 800492a:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800492c:	e013      	b.n	8004956 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800492e:	f7fd fb59 	bl	8001fe4 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800493c:	d90b      	bls.n	8004956 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	22ff      	movs	r2, #255	; 0xff
 8004944:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2203      	movs	r2, #3
 800494a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e07e      	b.n	8004a54 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0e4      	beq.n	800492e <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004982:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	e047      	b.n	8004a26 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049a4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80049b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80049b8:	f7fd fb14 	bl	8001fe4 <HAL_GetTick>
 80049bc:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80049be:	e013      	b.n	80049e8 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80049c0:	f7fd fb10 	bl	8001fe4 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ce:	d90b      	bls.n	80049e8 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	22ff      	movs	r2, #255	; 0xff
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2203      	movs	r2, #3
 80049dc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e035      	b.n	8004a54 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0e4      	beq.n	80049c0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a14:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a24:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004a26:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8004a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a30:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <HAL_RTC_SetAlarm_IT+0x26c>)
 8004a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a3c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	22ff      	movs	r2, #255	; 0xff
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3724      	adds	r7, #36	; 0x24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd90      	pop	{r4, r7, pc}
 8004a5c:	40010400 	.word	0x40010400

08004a60 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d012      	beq.n	8004a9c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fc ff2d 	bl	80018e4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004a9a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d012      	beq.n	8004ad0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f8a8 	bl	8004c0e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004ace:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004ad2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ad6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	775a      	strb	r2, [r3, #29]
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40010400 	.word	0x40010400

08004aec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d11c      	bne.n	8004b3c <HAL_RTC_WaitForSynchro+0x50>
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b10:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004b12:	f7fd fa67 	bl	8001fe4 <HAL_GetTick>
 8004b16:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b18:	e009      	b.n	8004b2e <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004b1a:	f7fd fa63 	bl	8001fe4 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b28:	d901      	bls.n	8004b2e <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e007      	b.n	8004b3e <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ee      	beq.n	8004b1a <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d119      	bne.n	8004b90 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295
 8004b64:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004b66:	f7fd fa3d 	bl	8001fe4 <HAL_GetTick>
 8004b6a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004b6c:	e009      	b.n	8004b82 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004b6e:	f7fd fa39 	bl	8001fe4 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b7c:	d901      	bls.n	8004b82 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e007      	b.n	8004b92 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0ee      	beq.n	8004b6e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8004bac:	e005      	b.n	8004bba <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004bb4:	7afb      	ldrb	r3, [r7, #11]
 8004bb6:	3b0a      	subs	r3, #10
 8004bb8:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8004bba:	7afb      	ldrb	r3, [r7, #11]
 8004bbc:	2b09      	cmp	r3, #9
 8004bbe:	d8f6      	bhi.n	8004bae <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	7afb      	ldrb	r3, [r7, #11]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	b2db      	uxtb	r3, r3
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr

08004bd8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	b2db      	uxtb	r3, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e03f      	b.n	8004cb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc feec 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f905 	bl	8004e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b08a      	sub	sp, #40	; 0x28
 8004cbe:	af02      	add	r7, sp, #8
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d17c      	bne.n	8004dd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_UART_Transmit+0x2c>
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e075      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_UART_Transmit+0x3e>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e06e      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2221      	movs	r2, #33	; 0x21
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d0e:	f7fd f969 	bl	8001fe4 <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	d108      	bne.n	8004d3c <HAL_UART_Transmit+0x82>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	e003      	b.n	8004d44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d4c:	e02a      	b.n	8004da4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2200      	movs	r2, #0
 8004d56:	2180      	movs	r1, #128	; 0x80
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f840 	bl	8004dde <UART_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e036      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	3302      	adds	r3, #2
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	e007      	b.n	8004d96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	781a      	ldrb	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1cf      	bne.n	8004d4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2140      	movs	r1, #64	; 0x40
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f810 	bl	8004dde <UART_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e006      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004dd4:	2302      	movs	r3, #2
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	603b      	str	r3, [r7, #0]
 8004dea:	4613      	mov	r3, r2
 8004dec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dee:	e02c      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d028      	beq.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x30>
 8004dfe:	f7fd f8f1 	bl	8001fe4 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d21d      	bcs.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e1c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e00f      	b.n	8004e6a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4013      	ands	r3, r2
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	bf0c      	ite	eq
 8004e5a:	2301      	moveq	r3, #1
 8004e5c:	2300      	movne	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d0c3      	beq.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004eb4:	f023 030c 	bic.w	r3, r3, #12
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699a      	ldr	r2, [r3, #24]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a55      	ldr	r2, [pc, #340]	; (8005034 <UART_SetConfig+0x1c0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d103      	bne.n	8004eea <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ee2:	f7ff f879 	bl	8003fd8 <HAL_RCC_GetPCLK2Freq>
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	e002      	b.n	8004ef0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004eea:	f7ff f861 	bl	8003fb0 <HAL_RCC_GetPCLK1Freq>
 8004eee:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef8:	d14c      	bne.n	8004f94 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009a      	lsls	r2, r3, #2
 8004f04:	441a      	add	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	4a49      	ldr	r2, [pc, #292]	; (8005038 <UART_SetConfig+0x1c4>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	0119      	lsls	r1, r3, #4
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009a      	lsls	r2, r3, #2
 8004f24:	441a      	add	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f30:	4b41      	ldr	r3, [pc, #260]	; (8005038 <UART_SetConfig+0x1c4>)
 8004f32:	fba3 0302 	umull	r0, r3, r3, r2
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	2064      	movs	r0, #100	; 0x64
 8004f3a:	fb00 f303 	mul.w	r3, r0, r3
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	3332      	adds	r3, #50	; 0x32
 8004f44:	4a3c      	ldr	r2, [pc, #240]	; (8005038 <UART_SetConfig+0x1c4>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f52:	4419      	add	r1, r3
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009a      	lsls	r2, r3, #2
 8004f5e:	441a      	add	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f6a:	4b33      	ldr	r3, [pc, #204]	; (8005038 <UART_SetConfig+0x1c4>)
 8004f6c:	fba3 0302 	umull	r0, r3, r3, r2
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	2064      	movs	r0, #100	; 0x64
 8004f74:	fb00 f303 	mul.w	r3, r0, r3
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	3332      	adds	r3, #50	; 0x32
 8004f7e:	4a2e      	ldr	r2, [pc, #184]	; (8005038 <UART_SetConfig+0x1c4>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	f003 0207 	and.w	r2, r3, #7
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	440a      	add	r2, r1
 8004f90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f92:	e04a      	b.n	800502a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009a      	lsls	r2, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004faa:	4a23      	ldr	r2, [pc, #140]	; (8005038 <UART_SetConfig+0x1c4>)
 8004fac:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	0119      	lsls	r1, r3, #4
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009a      	lsls	r2, r3, #2
 8004fbe:	441a      	add	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fca:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <UART_SetConfig+0x1c4>)
 8004fcc:	fba3 0302 	umull	r0, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	2064      	movs	r0, #100	; 0x64
 8004fd4:	fb00 f303 	mul.w	r3, r0, r3
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	3332      	adds	r3, #50	; 0x32
 8004fde:	4a16      	ldr	r2, [pc, #88]	; (8005038 <UART_SetConfig+0x1c4>)
 8004fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fea:	4419      	add	r1, r3
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009a      	lsls	r2, r3, #2
 8004ff6:	441a      	add	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005002:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <UART_SetConfig+0x1c4>)
 8005004:	fba3 0302 	umull	r0, r3, r3, r2
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	2064      	movs	r0, #100	; 0x64
 800500c:	fb00 f303 	mul.w	r3, r0, r3
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	3332      	adds	r3, #50	; 0x32
 8005016:	4a08      	ldr	r2, [pc, #32]	; (8005038 <UART_SetConfig+0x1c4>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	f003 020f 	and.w	r2, r3, #15
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	440a      	add	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
}
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40013800 	.word	0x40013800
 8005038:	51eb851f 	.word	0x51eb851f

0800503c <__errno>:
 800503c:	4b01      	ldr	r3, [pc, #4]	; (8005044 <__errno+0x8>)
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	2000000c 	.word	0x2000000c

08005048 <__libc_init_array>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	2600      	movs	r6, #0
 800504c:	4d0c      	ldr	r5, [pc, #48]	; (8005080 <__libc_init_array+0x38>)
 800504e:	4c0d      	ldr	r4, [pc, #52]	; (8005084 <__libc_init_array+0x3c>)
 8005050:	1b64      	subs	r4, r4, r5
 8005052:	10a4      	asrs	r4, r4, #2
 8005054:	42a6      	cmp	r6, r4
 8005056:	d109      	bne.n	800506c <__libc_init_array+0x24>
 8005058:	f004 fc50 	bl	80098fc <_init>
 800505c:	2600      	movs	r6, #0
 800505e:	4d0a      	ldr	r5, [pc, #40]	; (8005088 <__libc_init_array+0x40>)
 8005060:	4c0a      	ldr	r4, [pc, #40]	; (800508c <__libc_init_array+0x44>)
 8005062:	1b64      	subs	r4, r4, r5
 8005064:	10a4      	asrs	r4, r4, #2
 8005066:	42a6      	cmp	r6, r4
 8005068:	d105      	bne.n	8005076 <__libc_init_array+0x2e>
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005070:	4798      	blx	r3
 8005072:	3601      	adds	r6, #1
 8005074:	e7ee      	b.n	8005054 <__libc_init_array+0xc>
 8005076:	f855 3b04 	ldr.w	r3, [r5], #4
 800507a:	4798      	blx	r3
 800507c:	3601      	adds	r6, #1
 800507e:	e7f2      	b.n	8005066 <__libc_init_array+0x1e>
 8005080:	08009e34 	.word	0x08009e34
 8005084:	08009e34 	.word	0x08009e34
 8005088:	08009e34 	.word	0x08009e34
 800508c:	08009e38 	.word	0x08009e38

08005090 <memset>:
 8005090:	4603      	mov	r3, r0
 8005092:	4402      	add	r2, r0
 8005094:	4293      	cmp	r3, r2
 8005096:	d100      	bne.n	800509a <memset+0xa>
 8005098:	4770      	bx	lr
 800509a:	f803 1b01 	strb.w	r1, [r3], #1
 800509e:	e7f9      	b.n	8005094 <memset+0x4>

080050a0 <__cvt>:
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a6:	461f      	mov	r7, r3
 80050a8:	bfbb      	ittet	lt
 80050aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80050ae:	461f      	movlt	r7, r3
 80050b0:	2300      	movge	r3, #0
 80050b2:	232d      	movlt	r3, #45	; 0x2d
 80050b4:	b088      	sub	sp, #32
 80050b6:	4614      	mov	r4, r2
 80050b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80050bc:	7013      	strb	r3, [r2, #0]
 80050be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80050c4:	f023 0820 	bic.w	r8, r3, #32
 80050c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050cc:	d005      	beq.n	80050da <__cvt+0x3a>
 80050ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050d2:	d100      	bne.n	80050d6 <__cvt+0x36>
 80050d4:	3501      	adds	r5, #1
 80050d6:	2302      	movs	r3, #2
 80050d8:	e000      	b.n	80050dc <__cvt+0x3c>
 80050da:	2303      	movs	r3, #3
 80050dc:	aa07      	add	r2, sp, #28
 80050de:	9204      	str	r2, [sp, #16]
 80050e0:	aa06      	add	r2, sp, #24
 80050e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050e6:	e9cd 3500 	strd	r3, r5, [sp]
 80050ea:	4622      	mov	r2, r4
 80050ec:	463b      	mov	r3, r7
 80050ee:	f001 fd83 	bl	8006bf8 <_dtoa_r>
 80050f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050f6:	4606      	mov	r6, r0
 80050f8:	d102      	bne.n	8005100 <__cvt+0x60>
 80050fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050fc:	07db      	lsls	r3, r3, #31
 80050fe:	d522      	bpl.n	8005146 <__cvt+0xa6>
 8005100:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005104:	eb06 0905 	add.w	r9, r6, r5
 8005108:	d110      	bne.n	800512c <__cvt+0x8c>
 800510a:	7833      	ldrb	r3, [r6, #0]
 800510c:	2b30      	cmp	r3, #48	; 0x30
 800510e:	d10a      	bne.n	8005126 <__cvt+0x86>
 8005110:	2200      	movs	r2, #0
 8005112:	2300      	movs	r3, #0
 8005114:	4620      	mov	r0, r4
 8005116:	4639      	mov	r1, r7
 8005118:	f7fb fc5e 	bl	80009d8 <__aeabi_dcmpeq>
 800511c:	b918      	cbnz	r0, 8005126 <__cvt+0x86>
 800511e:	f1c5 0501 	rsb	r5, r5, #1
 8005122:	f8ca 5000 	str.w	r5, [sl]
 8005126:	f8da 3000 	ldr.w	r3, [sl]
 800512a:	4499      	add	r9, r3
 800512c:	2200      	movs	r2, #0
 800512e:	2300      	movs	r3, #0
 8005130:	4620      	mov	r0, r4
 8005132:	4639      	mov	r1, r7
 8005134:	f7fb fc50 	bl	80009d8 <__aeabi_dcmpeq>
 8005138:	b108      	cbz	r0, 800513e <__cvt+0x9e>
 800513a:	f8cd 901c 	str.w	r9, [sp, #28]
 800513e:	2230      	movs	r2, #48	; 0x30
 8005140:	9b07      	ldr	r3, [sp, #28]
 8005142:	454b      	cmp	r3, r9
 8005144:	d307      	bcc.n	8005156 <__cvt+0xb6>
 8005146:	4630      	mov	r0, r6
 8005148:	9b07      	ldr	r3, [sp, #28]
 800514a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800514c:	1b9b      	subs	r3, r3, r6
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	b008      	add	sp, #32
 8005152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005156:	1c59      	adds	r1, r3, #1
 8005158:	9107      	str	r1, [sp, #28]
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	e7f0      	b.n	8005140 <__cvt+0xa0>

0800515e <__exponent>:
 800515e:	4603      	mov	r3, r0
 8005160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005162:	2900      	cmp	r1, #0
 8005164:	f803 2b02 	strb.w	r2, [r3], #2
 8005168:	bfb6      	itet	lt
 800516a:	222d      	movlt	r2, #45	; 0x2d
 800516c:	222b      	movge	r2, #43	; 0x2b
 800516e:	4249      	neglt	r1, r1
 8005170:	2909      	cmp	r1, #9
 8005172:	7042      	strb	r2, [r0, #1]
 8005174:	dd2b      	ble.n	80051ce <__exponent+0x70>
 8005176:	f10d 0407 	add.w	r4, sp, #7
 800517a:	46a4      	mov	ip, r4
 800517c:	270a      	movs	r7, #10
 800517e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005182:	460a      	mov	r2, r1
 8005184:	46a6      	mov	lr, r4
 8005186:	fb07 1516 	mls	r5, r7, r6, r1
 800518a:	2a63      	cmp	r2, #99	; 0x63
 800518c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005190:	4631      	mov	r1, r6
 8005192:	f104 34ff 	add.w	r4, r4, #4294967295
 8005196:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800519a:	dcf0      	bgt.n	800517e <__exponent+0x20>
 800519c:	3130      	adds	r1, #48	; 0x30
 800519e:	f1ae 0502 	sub.w	r5, lr, #2
 80051a2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051a6:	4629      	mov	r1, r5
 80051a8:	1c44      	adds	r4, r0, #1
 80051aa:	4561      	cmp	r1, ip
 80051ac:	d30a      	bcc.n	80051c4 <__exponent+0x66>
 80051ae:	f10d 0209 	add.w	r2, sp, #9
 80051b2:	eba2 020e 	sub.w	r2, r2, lr
 80051b6:	4565      	cmp	r5, ip
 80051b8:	bf88      	it	hi
 80051ba:	2200      	movhi	r2, #0
 80051bc:	4413      	add	r3, r2
 80051be:	1a18      	subs	r0, r3, r0
 80051c0:	b003      	add	sp, #12
 80051c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051c8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051cc:	e7ed      	b.n	80051aa <__exponent+0x4c>
 80051ce:	2330      	movs	r3, #48	; 0x30
 80051d0:	3130      	adds	r1, #48	; 0x30
 80051d2:	7083      	strb	r3, [r0, #2]
 80051d4:	70c1      	strb	r1, [r0, #3]
 80051d6:	1d03      	adds	r3, r0, #4
 80051d8:	e7f1      	b.n	80051be <__exponent+0x60>
	...

080051dc <_printf_float>:
 80051dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e0:	b091      	sub	sp, #68	; 0x44
 80051e2:	460c      	mov	r4, r1
 80051e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80051e8:	4616      	mov	r6, r2
 80051ea:	461f      	mov	r7, r3
 80051ec:	4605      	mov	r5, r0
 80051ee:	f002 fe57 	bl	8007ea0 <_localeconv_r>
 80051f2:	6803      	ldr	r3, [r0, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	9309      	str	r3, [sp, #36]	; 0x24
 80051f8:	f7fa ffc2 	bl	8000180 <strlen>
 80051fc:	2300      	movs	r3, #0
 80051fe:	930e      	str	r3, [sp, #56]	; 0x38
 8005200:	f8d8 3000 	ldr.w	r3, [r8]
 8005204:	900a      	str	r0, [sp, #40]	; 0x28
 8005206:	3307      	adds	r3, #7
 8005208:	f023 0307 	bic.w	r3, r3, #7
 800520c:	f103 0208 	add.w	r2, r3, #8
 8005210:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005214:	f8d4 b000 	ldr.w	fp, [r4]
 8005218:	f8c8 2000 	str.w	r2, [r8]
 800521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005220:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005224:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005228:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800522c:	930b      	str	r3, [sp, #44]	; 0x2c
 800522e:	f04f 32ff 	mov.w	r2, #4294967295
 8005232:	4640      	mov	r0, r8
 8005234:	4b9c      	ldr	r3, [pc, #624]	; (80054a8 <_printf_float+0x2cc>)
 8005236:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005238:	f7fb fc00 	bl	8000a3c <__aeabi_dcmpun>
 800523c:	bb70      	cbnz	r0, 800529c <_printf_float+0xc0>
 800523e:	f04f 32ff 	mov.w	r2, #4294967295
 8005242:	4640      	mov	r0, r8
 8005244:	4b98      	ldr	r3, [pc, #608]	; (80054a8 <_printf_float+0x2cc>)
 8005246:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005248:	f7fb fbda 	bl	8000a00 <__aeabi_dcmple>
 800524c:	bb30      	cbnz	r0, 800529c <_printf_float+0xc0>
 800524e:	2200      	movs	r2, #0
 8005250:	2300      	movs	r3, #0
 8005252:	4640      	mov	r0, r8
 8005254:	4651      	mov	r1, sl
 8005256:	f7fb fbc9 	bl	80009ec <__aeabi_dcmplt>
 800525a:	b110      	cbz	r0, 8005262 <_printf_float+0x86>
 800525c:	232d      	movs	r3, #45	; 0x2d
 800525e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005262:	4b92      	ldr	r3, [pc, #584]	; (80054ac <_printf_float+0x2d0>)
 8005264:	4892      	ldr	r0, [pc, #584]	; (80054b0 <_printf_float+0x2d4>)
 8005266:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800526a:	bf94      	ite	ls
 800526c:	4698      	movls	r8, r3
 800526e:	4680      	movhi	r8, r0
 8005270:	2303      	movs	r3, #3
 8005272:	f04f 0a00 	mov.w	sl, #0
 8005276:	6123      	str	r3, [r4, #16]
 8005278:	f02b 0304 	bic.w	r3, fp, #4
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	4633      	mov	r3, r6
 8005280:	4621      	mov	r1, r4
 8005282:	4628      	mov	r0, r5
 8005284:	9700      	str	r7, [sp, #0]
 8005286:	aa0f      	add	r2, sp, #60	; 0x3c
 8005288:	f000 f9d4 	bl	8005634 <_printf_common>
 800528c:	3001      	adds	r0, #1
 800528e:	f040 8090 	bne.w	80053b2 <_printf_float+0x1d6>
 8005292:	f04f 30ff 	mov.w	r0, #4294967295
 8005296:	b011      	add	sp, #68	; 0x44
 8005298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529c:	4642      	mov	r2, r8
 800529e:	4653      	mov	r3, sl
 80052a0:	4640      	mov	r0, r8
 80052a2:	4651      	mov	r1, sl
 80052a4:	f7fb fbca 	bl	8000a3c <__aeabi_dcmpun>
 80052a8:	b148      	cbz	r0, 80052be <_printf_float+0xe2>
 80052aa:	f1ba 0f00 	cmp.w	sl, #0
 80052ae:	bfb8      	it	lt
 80052b0:	232d      	movlt	r3, #45	; 0x2d
 80052b2:	4880      	ldr	r0, [pc, #512]	; (80054b4 <_printf_float+0x2d8>)
 80052b4:	bfb8      	it	lt
 80052b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052ba:	4b7f      	ldr	r3, [pc, #508]	; (80054b8 <_printf_float+0x2dc>)
 80052bc:	e7d3      	b.n	8005266 <_printf_float+0x8a>
 80052be:	6863      	ldr	r3, [r4, #4]
 80052c0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	d142      	bne.n	800534e <_printf_float+0x172>
 80052c8:	2306      	movs	r3, #6
 80052ca:	6063      	str	r3, [r4, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	9206      	str	r2, [sp, #24]
 80052d0:	aa0e      	add	r2, sp, #56	; 0x38
 80052d2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80052d6:	aa0d      	add	r2, sp, #52	; 0x34
 80052d8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80052dc:	9203      	str	r2, [sp, #12]
 80052de:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80052e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052e6:	6023      	str	r3, [r4, #0]
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	4642      	mov	r2, r8
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	4628      	mov	r0, r5
 80052f0:	4653      	mov	r3, sl
 80052f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80052f4:	f7ff fed4 	bl	80050a0 <__cvt>
 80052f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052fa:	4680      	mov	r8, r0
 80052fc:	2947      	cmp	r1, #71	; 0x47
 80052fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005300:	d108      	bne.n	8005314 <_printf_float+0x138>
 8005302:	1cc8      	adds	r0, r1, #3
 8005304:	db02      	blt.n	800530c <_printf_float+0x130>
 8005306:	6863      	ldr	r3, [r4, #4]
 8005308:	4299      	cmp	r1, r3
 800530a:	dd40      	ble.n	800538e <_printf_float+0x1b2>
 800530c:	f1a9 0902 	sub.w	r9, r9, #2
 8005310:	fa5f f989 	uxtb.w	r9, r9
 8005314:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005318:	d81f      	bhi.n	800535a <_printf_float+0x17e>
 800531a:	464a      	mov	r2, r9
 800531c:	3901      	subs	r1, #1
 800531e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005322:	910d      	str	r1, [sp, #52]	; 0x34
 8005324:	f7ff ff1b 	bl	800515e <__exponent>
 8005328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800532a:	4682      	mov	sl, r0
 800532c:	1813      	adds	r3, r2, r0
 800532e:	2a01      	cmp	r2, #1
 8005330:	6123      	str	r3, [r4, #16]
 8005332:	dc02      	bgt.n	800533a <_printf_float+0x15e>
 8005334:	6822      	ldr	r2, [r4, #0]
 8005336:	07d2      	lsls	r2, r2, #31
 8005338:	d501      	bpl.n	800533e <_printf_float+0x162>
 800533a:	3301      	adds	r3, #1
 800533c:	6123      	str	r3, [r4, #16]
 800533e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005342:	2b00      	cmp	r3, #0
 8005344:	d09b      	beq.n	800527e <_printf_float+0xa2>
 8005346:	232d      	movs	r3, #45	; 0x2d
 8005348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800534c:	e797      	b.n	800527e <_printf_float+0xa2>
 800534e:	2947      	cmp	r1, #71	; 0x47
 8005350:	d1bc      	bne.n	80052cc <_printf_float+0xf0>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1ba      	bne.n	80052cc <_printf_float+0xf0>
 8005356:	2301      	movs	r3, #1
 8005358:	e7b7      	b.n	80052ca <_printf_float+0xee>
 800535a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800535e:	d118      	bne.n	8005392 <_printf_float+0x1b6>
 8005360:	2900      	cmp	r1, #0
 8005362:	6863      	ldr	r3, [r4, #4]
 8005364:	dd0b      	ble.n	800537e <_printf_float+0x1a2>
 8005366:	6121      	str	r1, [r4, #16]
 8005368:	b913      	cbnz	r3, 8005370 <_printf_float+0x194>
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	07d0      	lsls	r0, r2, #31
 800536e:	d502      	bpl.n	8005376 <_printf_float+0x19a>
 8005370:	3301      	adds	r3, #1
 8005372:	440b      	add	r3, r1
 8005374:	6123      	str	r3, [r4, #16]
 8005376:	f04f 0a00 	mov.w	sl, #0
 800537a:	65a1      	str	r1, [r4, #88]	; 0x58
 800537c:	e7df      	b.n	800533e <_printf_float+0x162>
 800537e:	b913      	cbnz	r3, 8005386 <_printf_float+0x1aa>
 8005380:	6822      	ldr	r2, [r4, #0]
 8005382:	07d2      	lsls	r2, r2, #31
 8005384:	d501      	bpl.n	800538a <_printf_float+0x1ae>
 8005386:	3302      	adds	r3, #2
 8005388:	e7f4      	b.n	8005374 <_printf_float+0x198>
 800538a:	2301      	movs	r3, #1
 800538c:	e7f2      	b.n	8005374 <_printf_float+0x198>
 800538e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005394:	4299      	cmp	r1, r3
 8005396:	db05      	blt.n	80053a4 <_printf_float+0x1c8>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	6121      	str	r1, [r4, #16]
 800539c:	07d8      	lsls	r0, r3, #31
 800539e:	d5ea      	bpl.n	8005376 <_printf_float+0x19a>
 80053a0:	1c4b      	adds	r3, r1, #1
 80053a2:	e7e7      	b.n	8005374 <_printf_float+0x198>
 80053a4:	2900      	cmp	r1, #0
 80053a6:	bfcc      	ite	gt
 80053a8:	2201      	movgt	r2, #1
 80053aa:	f1c1 0202 	rsble	r2, r1, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	e7e0      	b.n	8005374 <_printf_float+0x198>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	055a      	lsls	r2, r3, #21
 80053b6:	d407      	bmi.n	80053c8 <_printf_float+0x1ec>
 80053b8:	6923      	ldr	r3, [r4, #16]
 80053ba:	4642      	mov	r2, r8
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	47b8      	blx	r7
 80053c2:	3001      	adds	r0, #1
 80053c4:	d12b      	bne.n	800541e <_printf_float+0x242>
 80053c6:	e764      	b.n	8005292 <_printf_float+0xb6>
 80053c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053cc:	f240 80dd 	bls.w	800558a <_printf_float+0x3ae>
 80053d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053d4:	2200      	movs	r2, #0
 80053d6:	2300      	movs	r3, #0
 80053d8:	f7fb fafe 	bl	80009d8 <__aeabi_dcmpeq>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d033      	beq.n	8005448 <_printf_float+0x26c>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4631      	mov	r1, r6
 80053e4:	4628      	mov	r0, r5
 80053e6:	4a35      	ldr	r2, [pc, #212]	; (80054bc <_printf_float+0x2e0>)
 80053e8:	47b8      	blx	r7
 80053ea:	3001      	adds	r0, #1
 80053ec:	f43f af51 	beq.w	8005292 <_printf_float+0xb6>
 80053f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053f4:	429a      	cmp	r2, r3
 80053f6:	db02      	blt.n	80053fe <_printf_float+0x222>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	07d8      	lsls	r0, r3, #31
 80053fc:	d50f      	bpl.n	800541e <_printf_float+0x242>
 80053fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005402:	4631      	mov	r1, r6
 8005404:	4628      	mov	r0, r5
 8005406:	47b8      	blx	r7
 8005408:	3001      	adds	r0, #1
 800540a:	f43f af42 	beq.w	8005292 <_printf_float+0xb6>
 800540e:	f04f 0800 	mov.w	r8, #0
 8005412:	f104 091a 	add.w	r9, r4, #26
 8005416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005418:	3b01      	subs	r3, #1
 800541a:	4543      	cmp	r3, r8
 800541c:	dc09      	bgt.n	8005432 <_printf_float+0x256>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	079b      	lsls	r3, r3, #30
 8005422:	f100 8102 	bmi.w	800562a <_printf_float+0x44e>
 8005426:	68e0      	ldr	r0, [r4, #12]
 8005428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800542a:	4298      	cmp	r0, r3
 800542c:	bfb8      	it	lt
 800542e:	4618      	movlt	r0, r3
 8005430:	e731      	b.n	8005296 <_printf_float+0xba>
 8005432:	2301      	movs	r3, #1
 8005434:	464a      	mov	r2, r9
 8005436:	4631      	mov	r1, r6
 8005438:	4628      	mov	r0, r5
 800543a:	47b8      	blx	r7
 800543c:	3001      	adds	r0, #1
 800543e:	f43f af28 	beq.w	8005292 <_printf_float+0xb6>
 8005442:	f108 0801 	add.w	r8, r8, #1
 8005446:	e7e6      	b.n	8005416 <_printf_float+0x23a>
 8005448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800544a:	2b00      	cmp	r3, #0
 800544c:	dc38      	bgt.n	80054c0 <_printf_float+0x2e4>
 800544e:	2301      	movs	r3, #1
 8005450:	4631      	mov	r1, r6
 8005452:	4628      	mov	r0, r5
 8005454:	4a19      	ldr	r2, [pc, #100]	; (80054bc <_printf_float+0x2e0>)
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	f43f af1a 	beq.w	8005292 <_printf_float+0xb6>
 800545e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005462:	4313      	orrs	r3, r2
 8005464:	d102      	bne.n	800546c <_printf_float+0x290>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	07d9      	lsls	r1, r3, #31
 800546a:	d5d8      	bpl.n	800541e <_printf_float+0x242>
 800546c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005470:	4631      	mov	r1, r6
 8005472:	4628      	mov	r0, r5
 8005474:	47b8      	blx	r7
 8005476:	3001      	adds	r0, #1
 8005478:	f43f af0b 	beq.w	8005292 <_printf_float+0xb6>
 800547c:	f04f 0900 	mov.w	r9, #0
 8005480:	f104 0a1a 	add.w	sl, r4, #26
 8005484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005486:	425b      	negs	r3, r3
 8005488:	454b      	cmp	r3, r9
 800548a:	dc01      	bgt.n	8005490 <_printf_float+0x2b4>
 800548c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800548e:	e794      	b.n	80053ba <_printf_float+0x1de>
 8005490:	2301      	movs	r3, #1
 8005492:	4652      	mov	r2, sl
 8005494:	4631      	mov	r1, r6
 8005496:	4628      	mov	r0, r5
 8005498:	47b8      	blx	r7
 800549a:	3001      	adds	r0, #1
 800549c:	f43f aef9 	beq.w	8005292 <_printf_float+0xb6>
 80054a0:	f109 0901 	add.w	r9, r9, #1
 80054a4:	e7ee      	b.n	8005484 <_printf_float+0x2a8>
 80054a6:	bf00      	nop
 80054a8:	7fefffff 	.word	0x7fefffff
 80054ac:	08009988 	.word	0x08009988
 80054b0:	0800998c 	.word	0x0800998c
 80054b4:	08009994 	.word	0x08009994
 80054b8:	08009990 	.word	0x08009990
 80054bc:	08009998 	.word	0x08009998
 80054c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054c4:	429a      	cmp	r2, r3
 80054c6:	bfa8      	it	ge
 80054c8:	461a      	movge	r2, r3
 80054ca:	2a00      	cmp	r2, #0
 80054cc:	4691      	mov	r9, r2
 80054ce:	dc37      	bgt.n	8005540 <_printf_float+0x364>
 80054d0:	f04f 0b00 	mov.w	fp, #0
 80054d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054d8:	f104 021a 	add.w	r2, r4, #26
 80054dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80054e0:	ebaa 0309 	sub.w	r3, sl, r9
 80054e4:	455b      	cmp	r3, fp
 80054e6:	dc33      	bgt.n	8005550 <_printf_float+0x374>
 80054e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054ec:	429a      	cmp	r2, r3
 80054ee:	db3b      	blt.n	8005568 <_printf_float+0x38c>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	07da      	lsls	r2, r3, #31
 80054f4:	d438      	bmi.n	8005568 <_printf_float+0x38c>
 80054f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054fa:	eba3 020a 	sub.w	r2, r3, sl
 80054fe:	eba3 0901 	sub.w	r9, r3, r1
 8005502:	4591      	cmp	r9, r2
 8005504:	bfa8      	it	ge
 8005506:	4691      	movge	r9, r2
 8005508:	f1b9 0f00 	cmp.w	r9, #0
 800550c:	dc34      	bgt.n	8005578 <_printf_float+0x39c>
 800550e:	f04f 0800 	mov.w	r8, #0
 8005512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005516:	f104 0a1a 	add.w	sl, r4, #26
 800551a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	eba3 0309 	sub.w	r3, r3, r9
 8005524:	4543      	cmp	r3, r8
 8005526:	f77f af7a 	ble.w	800541e <_printf_float+0x242>
 800552a:	2301      	movs	r3, #1
 800552c:	4652      	mov	r2, sl
 800552e:	4631      	mov	r1, r6
 8005530:	4628      	mov	r0, r5
 8005532:	47b8      	blx	r7
 8005534:	3001      	adds	r0, #1
 8005536:	f43f aeac 	beq.w	8005292 <_printf_float+0xb6>
 800553a:	f108 0801 	add.w	r8, r8, #1
 800553e:	e7ec      	b.n	800551a <_printf_float+0x33e>
 8005540:	4613      	mov	r3, r2
 8005542:	4631      	mov	r1, r6
 8005544:	4642      	mov	r2, r8
 8005546:	4628      	mov	r0, r5
 8005548:	47b8      	blx	r7
 800554a:	3001      	adds	r0, #1
 800554c:	d1c0      	bne.n	80054d0 <_printf_float+0x2f4>
 800554e:	e6a0      	b.n	8005292 <_printf_float+0xb6>
 8005550:	2301      	movs	r3, #1
 8005552:	4631      	mov	r1, r6
 8005554:	4628      	mov	r0, r5
 8005556:	920b      	str	r2, [sp, #44]	; 0x2c
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	f43f ae99 	beq.w	8005292 <_printf_float+0xb6>
 8005560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005562:	f10b 0b01 	add.w	fp, fp, #1
 8005566:	e7b9      	b.n	80054dc <_printf_float+0x300>
 8005568:	4631      	mov	r1, r6
 800556a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800556e:	4628      	mov	r0, r5
 8005570:	47b8      	blx	r7
 8005572:	3001      	adds	r0, #1
 8005574:	d1bf      	bne.n	80054f6 <_printf_float+0x31a>
 8005576:	e68c      	b.n	8005292 <_printf_float+0xb6>
 8005578:	464b      	mov	r3, r9
 800557a:	4631      	mov	r1, r6
 800557c:	4628      	mov	r0, r5
 800557e:	eb08 020a 	add.w	r2, r8, sl
 8005582:	47b8      	blx	r7
 8005584:	3001      	adds	r0, #1
 8005586:	d1c2      	bne.n	800550e <_printf_float+0x332>
 8005588:	e683      	b.n	8005292 <_printf_float+0xb6>
 800558a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800558c:	2a01      	cmp	r2, #1
 800558e:	dc01      	bgt.n	8005594 <_printf_float+0x3b8>
 8005590:	07db      	lsls	r3, r3, #31
 8005592:	d537      	bpl.n	8005604 <_printf_float+0x428>
 8005594:	2301      	movs	r3, #1
 8005596:	4642      	mov	r2, r8
 8005598:	4631      	mov	r1, r6
 800559a:	4628      	mov	r0, r5
 800559c:	47b8      	blx	r7
 800559e:	3001      	adds	r0, #1
 80055a0:	f43f ae77 	beq.w	8005292 <_printf_float+0xb6>
 80055a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055a8:	4631      	mov	r1, r6
 80055aa:	4628      	mov	r0, r5
 80055ac:	47b8      	blx	r7
 80055ae:	3001      	adds	r0, #1
 80055b0:	f43f ae6f 	beq.w	8005292 <_printf_float+0xb6>
 80055b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055b8:	2200      	movs	r2, #0
 80055ba:	2300      	movs	r3, #0
 80055bc:	f7fb fa0c 	bl	80009d8 <__aeabi_dcmpeq>
 80055c0:	b9d8      	cbnz	r0, 80055fa <_printf_float+0x41e>
 80055c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055c4:	f108 0201 	add.w	r2, r8, #1
 80055c8:	3b01      	subs	r3, #1
 80055ca:	4631      	mov	r1, r6
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b8      	blx	r7
 80055d0:	3001      	adds	r0, #1
 80055d2:	d10e      	bne.n	80055f2 <_printf_float+0x416>
 80055d4:	e65d      	b.n	8005292 <_printf_float+0xb6>
 80055d6:	2301      	movs	r3, #1
 80055d8:	464a      	mov	r2, r9
 80055da:	4631      	mov	r1, r6
 80055dc:	4628      	mov	r0, r5
 80055de:	47b8      	blx	r7
 80055e0:	3001      	adds	r0, #1
 80055e2:	f43f ae56 	beq.w	8005292 <_printf_float+0xb6>
 80055e6:	f108 0801 	add.w	r8, r8, #1
 80055ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055ec:	3b01      	subs	r3, #1
 80055ee:	4543      	cmp	r3, r8
 80055f0:	dcf1      	bgt.n	80055d6 <_printf_float+0x3fa>
 80055f2:	4653      	mov	r3, sl
 80055f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055f8:	e6e0      	b.n	80053bc <_printf_float+0x1e0>
 80055fa:	f04f 0800 	mov.w	r8, #0
 80055fe:	f104 091a 	add.w	r9, r4, #26
 8005602:	e7f2      	b.n	80055ea <_printf_float+0x40e>
 8005604:	2301      	movs	r3, #1
 8005606:	4642      	mov	r2, r8
 8005608:	e7df      	b.n	80055ca <_printf_float+0x3ee>
 800560a:	2301      	movs	r3, #1
 800560c:	464a      	mov	r2, r9
 800560e:	4631      	mov	r1, r6
 8005610:	4628      	mov	r0, r5
 8005612:	47b8      	blx	r7
 8005614:	3001      	adds	r0, #1
 8005616:	f43f ae3c 	beq.w	8005292 <_printf_float+0xb6>
 800561a:	f108 0801 	add.w	r8, r8, #1
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005622:	1a5b      	subs	r3, r3, r1
 8005624:	4543      	cmp	r3, r8
 8005626:	dcf0      	bgt.n	800560a <_printf_float+0x42e>
 8005628:	e6fd      	b.n	8005426 <_printf_float+0x24a>
 800562a:	f04f 0800 	mov.w	r8, #0
 800562e:	f104 0919 	add.w	r9, r4, #25
 8005632:	e7f4      	b.n	800561e <_printf_float+0x442>

08005634 <_printf_common>:
 8005634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005638:	4616      	mov	r6, r2
 800563a:	4699      	mov	r9, r3
 800563c:	688a      	ldr	r2, [r1, #8]
 800563e:	690b      	ldr	r3, [r1, #16]
 8005640:	4607      	mov	r7, r0
 8005642:	4293      	cmp	r3, r2
 8005644:	bfb8      	it	lt
 8005646:	4613      	movlt	r3, r2
 8005648:	6033      	str	r3, [r6, #0]
 800564a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800564e:	460c      	mov	r4, r1
 8005650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005654:	b10a      	cbz	r2, 800565a <_printf_common+0x26>
 8005656:	3301      	adds	r3, #1
 8005658:	6033      	str	r3, [r6, #0]
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	0699      	lsls	r1, r3, #26
 800565e:	bf42      	ittt	mi
 8005660:	6833      	ldrmi	r3, [r6, #0]
 8005662:	3302      	addmi	r3, #2
 8005664:	6033      	strmi	r3, [r6, #0]
 8005666:	6825      	ldr	r5, [r4, #0]
 8005668:	f015 0506 	ands.w	r5, r5, #6
 800566c:	d106      	bne.n	800567c <_printf_common+0x48>
 800566e:	f104 0a19 	add.w	sl, r4, #25
 8005672:	68e3      	ldr	r3, [r4, #12]
 8005674:	6832      	ldr	r2, [r6, #0]
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	42ab      	cmp	r3, r5
 800567a:	dc28      	bgt.n	80056ce <_printf_common+0x9a>
 800567c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005680:	1e13      	subs	r3, r2, #0
 8005682:	6822      	ldr	r2, [r4, #0]
 8005684:	bf18      	it	ne
 8005686:	2301      	movne	r3, #1
 8005688:	0692      	lsls	r2, r2, #26
 800568a:	d42d      	bmi.n	80056e8 <_printf_common+0xb4>
 800568c:	4649      	mov	r1, r9
 800568e:	4638      	mov	r0, r7
 8005690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005694:	47c0      	blx	r8
 8005696:	3001      	adds	r0, #1
 8005698:	d020      	beq.n	80056dc <_printf_common+0xa8>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	68e5      	ldr	r5, [r4, #12]
 800569e:	f003 0306 	and.w	r3, r3, #6
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	bf18      	it	ne
 80056a6:	2500      	movne	r5, #0
 80056a8:	6832      	ldr	r2, [r6, #0]
 80056aa:	f04f 0600 	mov.w	r6, #0
 80056ae:	68a3      	ldr	r3, [r4, #8]
 80056b0:	bf08      	it	eq
 80056b2:	1aad      	subeq	r5, r5, r2
 80056b4:	6922      	ldr	r2, [r4, #16]
 80056b6:	bf08      	it	eq
 80056b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056bc:	4293      	cmp	r3, r2
 80056be:	bfc4      	itt	gt
 80056c0:	1a9b      	subgt	r3, r3, r2
 80056c2:	18ed      	addgt	r5, r5, r3
 80056c4:	341a      	adds	r4, #26
 80056c6:	42b5      	cmp	r5, r6
 80056c8:	d11a      	bne.n	8005700 <_printf_common+0xcc>
 80056ca:	2000      	movs	r0, #0
 80056cc:	e008      	b.n	80056e0 <_printf_common+0xac>
 80056ce:	2301      	movs	r3, #1
 80056d0:	4652      	mov	r2, sl
 80056d2:	4649      	mov	r1, r9
 80056d4:	4638      	mov	r0, r7
 80056d6:	47c0      	blx	r8
 80056d8:	3001      	adds	r0, #1
 80056da:	d103      	bne.n	80056e4 <_printf_common+0xb0>
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e4:	3501      	adds	r5, #1
 80056e6:	e7c4      	b.n	8005672 <_printf_common+0x3e>
 80056e8:	2030      	movs	r0, #48	; 0x30
 80056ea:	18e1      	adds	r1, r4, r3
 80056ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056f6:	4422      	add	r2, r4
 80056f8:	3302      	adds	r3, #2
 80056fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056fe:	e7c5      	b.n	800568c <_printf_common+0x58>
 8005700:	2301      	movs	r3, #1
 8005702:	4622      	mov	r2, r4
 8005704:	4649      	mov	r1, r9
 8005706:	4638      	mov	r0, r7
 8005708:	47c0      	blx	r8
 800570a:	3001      	adds	r0, #1
 800570c:	d0e6      	beq.n	80056dc <_printf_common+0xa8>
 800570e:	3601      	adds	r6, #1
 8005710:	e7d9      	b.n	80056c6 <_printf_common+0x92>
	...

08005714 <_printf_i>:
 8005714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005718:	7e0f      	ldrb	r7, [r1, #24]
 800571a:	4691      	mov	r9, r2
 800571c:	2f78      	cmp	r7, #120	; 0x78
 800571e:	4680      	mov	r8, r0
 8005720:	460c      	mov	r4, r1
 8005722:	469a      	mov	sl, r3
 8005724:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800572a:	d807      	bhi.n	800573c <_printf_i+0x28>
 800572c:	2f62      	cmp	r7, #98	; 0x62
 800572e:	d80a      	bhi.n	8005746 <_printf_i+0x32>
 8005730:	2f00      	cmp	r7, #0
 8005732:	f000 80d9 	beq.w	80058e8 <_printf_i+0x1d4>
 8005736:	2f58      	cmp	r7, #88	; 0x58
 8005738:	f000 80a4 	beq.w	8005884 <_printf_i+0x170>
 800573c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005744:	e03a      	b.n	80057bc <_printf_i+0xa8>
 8005746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800574a:	2b15      	cmp	r3, #21
 800574c:	d8f6      	bhi.n	800573c <_printf_i+0x28>
 800574e:	a101      	add	r1, pc, #4	; (adr r1, 8005754 <_printf_i+0x40>)
 8005750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005754:	080057ad 	.word	0x080057ad
 8005758:	080057c1 	.word	0x080057c1
 800575c:	0800573d 	.word	0x0800573d
 8005760:	0800573d 	.word	0x0800573d
 8005764:	0800573d 	.word	0x0800573d
 8005768:	0800573d 	.word	0x0800573d
 800576c:	080057c1 	.word	0x080057c1
 8005770:	0800573d 	.word	0x0800573d
 8005774:	0800573d 	.word	0x0800573d
 8005778:	0800573d 	.word	0x0800573d
 800577c:	0800573d 	.word	0x0800573d
 8005780:	080058cf 	.word	0x080058cf
 8005784:	080057f1 	.word	0x080057f1
 8005788:	080058b1 	.word	0x080058b1
 800578c:	0800573d 	.word	0x0800573d
 8005790:	0800573d 	.word	0x0800573d
 8005794:	080058f1 	.word	0x080058f1
 8005798:	0800573d 	.word	0x0800573d
 800579c:	080057f1 	.word	0x080057f1
 80057a0:	0800573d 	.word	0x0800573d
 80057a4:	0800573d 	.word	0x0800573d
 80057a8:	080058b9 	.word	0x080058b9
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	1d1a      	adds	r2, r3, #4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	602a      	str	r2, [r5, #0]
 80057b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057bc:	2301      	movs	r3, #1
 80057be:	e0a4      	b.n	800590a <_printf_i+0x1f6>
 80057c0:	6820      	ldr	r0, [r4, #0]
 80057c2:	6829      	ldr	r1, [r5, #0]
 80057c4:	0606      	lsls	r6, r0, #24
 80057c6:	f101 0304 	add.w	r3, r1, #4
 80057ca:	d50a      	bpl.n	80057e2 <_printf_i+0xce>
 80057cc:	680e      	ldr	r6, [r1, #0]
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	2e00      	cmp	r6, #0
 80057d2:	da03      	bge.n	80057dc <_printf_i+0xc8>
 80057d4:	232d      	movs	r3, #45	; 0x2d
 80057d6:	4276      	negs	r6, r6
 80057d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057dc:	230a      	movs	r3, #10
 80057de:	485e      	ldr	r0, [pc, #376]	; (8005958 <_printf_i+0x244>)
 80057e0:	e019      	b.n	8005816 <_printf_i+0x102>
 80057e2:	680e      	ldr	r6, [r1, #0]
 80057e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057e8:	602b      	str	r3, [r5, #0]
 80057ea:	bf18      	it	ne
 80057ec:	b236      	sxthne	r6, r6
 80057ee:	e7ef      	b.n	80057d0 <_printf_i+0xbc>
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	6820      	ldr	r0, [r4, #0]
 80057f4:	1d19      	adds	r1, r3, #4
 80057f6:	6029      	str	r1, [r5, #0]
 80057f8:	0601      	lsls	r1, r0, #24
 80057fa:	d501      	bpl.n	8005800 <_printf_i+0xec>
 80057fc:	681e      	ldr	r6, [r3, #0]
 80057fe:	e002      	b.n	8005806 <_printf_i+0xf2>
 8005800:	0646      	lsls	r6, r0, #25
 8005802:	d5fb      	bpl.n	80057fc <_printf_i+0xe8>
 8005804:	881e      	ldrh	r6, [r3, #0]
 8005806:	2f6f      	cmp	r7, #111	; 0x6f
 8005808:	bf0c      	ite	eq
 800580a:	2308      	moveq	r3, #8
 800580c:	230a      	movne	r3, #10
 800580e:	4852      	ldr	r0, [pc, #328]	; (8005958 <_printf_i+0x244>)
 8005810:	2100      	movs	r1, #0
 8005812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005816:	6865      	ldr	r5, [r4, #4]
 8005818:	2d00      	cmp	r5, #0
 800581a:	bfa8      	it	ge
 800581c:	6821      	ldrge	r1, [r4, #0]
 800581e:	60a5      	str	r5, [r4, #8]
 8005820:	bfa4      	itt	ge
 8005822:	f021 0104 	bicge.w	r1, r1, #4
 8005826:	6021      	strge	r1, [r4, #0]
 8005828:	b90e      	cbnz	r6, 800582e <_printf_i+0x11a>
 800582a:	2d00      	cmp	r5, #0
 800582c:	d04d      	beq.n	80058ca <_printf_i+0x1b6>
 800582e:	4615      	mov	r5, r2
 8005830:	fbb6 f1f3 	udiv	r1, r6, r3
 8005834:	fb03 6711 	mls	r7, r3, r1, r6
 8005838:	5dc7      	ldrb	r7, [r0, r7]
 800583a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800583e:	4637      	mov	r7, r6
 8005840:	42bb      	cmp	r3, r7
 8005842:	460e      	mov	r6, r1
 8005844:	d9f4      	bls.n	8005830 <_printf_i+0x11c>
 8005846:	2b08      	cmp	r3, #8
 8005848:	d10b      	bne.n	8005862 <_printf_i+0x14e>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	07de      	lsls	r6, r3, #31
 800584e:	d508      	bpl.n	8005862 <_printf_i+0x14e>
 8005850:	6923      	ldr	r3, [r4, #16]
 8005852:	6861      	ldr	r1, [r4, #4]
 8005854:	4299      	cmp	r1, r3
 8005856:	bfde      	ittt	le
 8005858:	2330      	movle	r3, #48	; 0x30
 800585a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800585e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005862:	1b52      	subs	r2, r2, r5
 8005864:	6122      	str	r2, [r4, #16]
 8005866:	464b      	mov	r3, r9
 8005868:	4621      	mov	r1, r4
 800586a:	4640      	mov	r0, r8
 800586c:	f8cd a000 	str.w	sl, [sp]
 8005870:	aa03      	add	r2, sp, #12
 8005872:	f7ff fedf 	bl	8005634 <_printf_common>
 8005876:	3001      	adds	r0, #1
 8005878:	d14c      	bne.n	8005914 <_printf_i+0x200>
 800587a:	f04f 30ff 	mov.w	r0, #4294967295
 800587e:	b004      	add	sp, #16
 8005880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005884:	4834      	ldr	r0, [pc, #208]	; (8005958 <_printf_i+0x244>)
 8005886:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800588a:	6829      	ldr	r1, [r5, #0]
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005892:	6029      	str	r1, [r5, #0]
 8005894:	061d      	lsls	r5, r3, #24
 8005896:	d514      	bpl.n	80058c2 <_printf_i+0x1ae>
 8005898:	07df      	lsls	r7, r3, #31
 800589a:	bf44      	itt	mi
 800589c:	f043 0320 	orrmi.w	r3, r3, #32
 80058a0:	6023      	strmi	r3, [r4, #0]
 80058a2:	b91e      	cbnz	r6, 80058ac <_printf_i+0x198>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	f023 0320 	bic.w	r3, r3, #32
 80058aa:	6023      	str	r3, [r4, #0]
 80058ac:	2310      	movs	r3, #16
 80058ae:	e7af      	b.n	8005810 <_printf_i+0xfc>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	f043 0320 	orr.w	r3, r3, #32
 80058b6:	6023      	str	r3, [r4, #0]
 80058b8:	2378      	movs	r3, #120	; 0x78
 80058ba:	4828      	ldr	r0, [pc, #160]	; (800595c <_printf_i+0x248>)
 80058bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058c0:	e7e3      	b.n	800588a <_printf_i+0x176>
 80058c2:	0659      	lsls	r1, r3, #25
 80058c4:	bf48      	it	mi
 80058c6:	b2b6      	uxthmi	r6, r6
 80058c8:	e7e6      	b.n	8005898 <_printf_i+0x184>
 80058ca:	4615      	mov	r5, r2
 80058cc:	e7bb      	b.n	8005846 <_printf_i+0x132>
 80058ce:	682b      	ldr	r3, [r5, #0]
 80058d0:	6826      	ldr	r6, [r4, #0]
 80058d2:	1d18      	adds	r0, r3, #4
 80058d4:	6961      	ldr	r1, [r4, #20]
 80058d6:	6028      	str	r0, [r5, #0]
 80058d8:	0635      	lsls	r5, r6, #24
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	d501      	bpl.n	80058e2 <_printf_i+0x1ce>
 80058de:	6019      	str	r1, [r3, #0]
 80058e0:	e002      	b.n	80058e8 <_printf_i+0x1d4>
 80058e2:	0670      	lsls	r0, r6, #25
 80058e4:	d5fb      	bpl.n	80058de <_printf_i+0x1ca>
 80058e6:	8019      	strh	r1, [r3, #0]
 80058e8:	2300      	movs	r3, #0
 80058ea:	4615      	mov	r5, r2
 80058ec:	6123      	str	r3, [r4, #16]
 80058ee:	e7ba      	b.n	8005866 <_printf_i+0x152>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	2100      	movs	r1, #0
 80058f4:	1d1a      	adds	r2, r3, #4
 80058f6:	602a      	str	r2, [r5, #0]
 80058f8:	681d      	ldr	r5, [r3, #0]
 80058fa:	6862      	ldr	r2, [r4, #4]
 80058fc:	4628      	mov	r0, r5
 80058fe:	f002 faed 	bl	8007edc <memchr>
 8005902:	b108      	cbz	r0, 8005908 <_printf_i+0x1f4>
 8005904:	1b40      	subs	r0, r0, r5
 8005906:	6060      	str	r0, [r4, #4]
 8005908:	6863      	ldr	r3, [r4, #4]
 800590a:	6123      	str	r3, [r4, #16]
 800590c:	2300      	movs	r3, #0
 800590e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005912:	e7a8      	b.n	8005866 <_printf_i+0x152>
 8005914:	462a      	mov	r2, r5
 8005916:	4649      	mov	r1, r9
 8005918:	4640      	mov	r0, r8
 800591a:	6923      	ldr	r3, [r4, #16]
 800591c:	47d0      	blx	sl
 800591e:	3001      	adds	r0, #1
 8005920:	d0ab      	beq.n	800587a <_printf_i+0x166>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	079b      	lsls	r3, r3, #30
 8005926:	d413      	bmi.n	8005950 <_printf_i+0x23c>
 8005928:	68e0      	ldr	r0, [r4, #12]
 800592a:	9b03      	ldr	r3, [sp, #12]
 800592c:	4298      	cmp	r0, r3
 800592e:	bfb8      	it	lt
 8005930:	4618      	movlt	r0, r3
 8005932:	e7a4      	b.n	800587e <_printf_i+0x16a>
 8005934:	2301      	movs	r3, #1
 8005936:	4632      	mov	r2, r6
 8005938:	4649      	mov	r1, r9
 800593a:	4640      	mov	r0, r8
 800593c:	47d0      	blx	sl
 800593e:	3001      	adds	r0, #1
 8005940:	d09b      	beq.n	800587a <_printf_i+0x166>
 8005942:	3501      	adds	r5, #1
 8005944:	68e3      	ldr	r3, [r4, #12]
 8005946:	9903      	ldr	r1, [sp, #12]
 8005948:	1a5b      	subs	r3, r3, r1
 800594a:	42ab      	cmp	r3, r5
 800594c:	dcf2      	bgt.n	8005934 <_printf_i+0x220>
 800594e:	e7eb      	b.n	8005928 <_printf_i+0x214>
 8005950:	2500      	movs	r5, #0
 8005952:	f104 0619 	add.w	r6, r4, #25
 8005956:	e7f5      	b.n	8005944 <_printf_i+0x230>
 8005958:	0800999a 	.word	0x0800999a
 800595c:	080099ab 	.word	0x080099ab

08005960 <_scanf_float>:
 8005960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005964:	b087      	sub	sp, #28
 8005966:	9303      	str	r3, [sp, #12]
 8005968:	688b      	ldr	r3, [r1, #8]
 800596a:	4617      	mov	r7, r2
 800596c:	1e5a      	subs	r2, r3, #1
 800596e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005972:	bf85      	ittet	hi
 8005974:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005978:	195b      	addhi	r3, r3, r5
 800597a:	2300      	movls	r3, #0
 800597c:	9302      	strhi	r3, [sp, #8]
 800597e:	bf88      	it	hi
 8005980:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005984:	468b      	mov	fp, r1
 8005986:	f04f 0500 	mov.w	r5, #0
 800598a:	bf8c      	ite	hi
 800598c:	608b      	strhi	r3, [r1, #8]
 800598e:	9302      	strls	r3, [sp, #8]
 8005990:	680b      	ldr	r3, [r1, #0]
 8005992:	4680      	mov	r8, r0
 8005994:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005998:	f84b 3b1c 	str.w	r3, [fp], #28
 800599c:	460c      	mov	r4, r1
 800599e:	465e      	mov	r6, fp
 80059a0:	46aa      	mov	sl, r5
 80059a2:	46a9      	mov	r9, r5
 80059a4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80059a8:	9501      	str	r5, [sp, #4]
 80059aa:	68a2      	ldr	r2, [r4, #8]
 80059ac:	b152      	cbz	r2, 80059c4 <_scanf_float+0x64>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b4e      	cmp	r3, #78	; 0x4e
 80059b4:	d864      	bhi.n	8005a80 <_scanf_float+0x120>
 80059b6:	2b40      	cmp	r3, #64	; 0x40
 80059b8:	d83c      	bhi.n	8005a34 <_scanf_float+0xd4>
 80059ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80059be:	b2c8      	uxtb	r0, r1
 80059c0:	280e      	cmp	r0, #14
 80059c2:	d93a      	bls.n	8005a3a <_scanf_float+0xda>
 80059c4:	f1b9 0f00 	cmp.w	r9, #0
 80059c8:	d003      	beq.n	80059d2 <_scanf_float+0x72>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059d6:	f1ba 0f01 	cmp.w	sl, #1
 80059da:	f200 8113 	bhi.w	8005c04 <_scanf_float+0x2a4>
 80059de:	455e      	cmp	r6, fp
 80059e0:	f200 8105 	bhi.w	8005bee <_scanf_float+0x28e>
 80059e4:	2501      	movs	r5, #1
 80059e6:	4628      	mov	r0, r5
 80059e8:	b007      	add	sp, #28
 80059ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80059f2:	2a0d      	cmp	r2, #13
 80059f4:	d8e6      	bhi.n	80059c4 <_scanf_float+0x64>
 80059f6:	a101      	add	r1, pc, #4	; (adr r1, 80059fc <_scanf_float+0x9c>)
 80059f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059fc:	08005b3b 	.word	0x08005b3b
 8005a00:	080059c5 	.word	0x080059c5
 8005a04:	080059c5 	.word	0x080059c5
 8005a08:	080059c5 	.word	0x080059c5
 8005a0c:	08005b9b 	.word	0x08005b9b
 8005a10:	08005b73 	.word	0x08005b73
 8005a14:	080059c5 	.word	0x080059c5
 8005a18:	080059c5 	.word	0x080059c5
 8005a1c:	08005b49 	.word	0x08005b49
 8005a20:	080059c5 	.word	0x080059c5
 8005a24:	080059c5 	.word	0x080059c5
 8005a28:	080059c5 	.word	0x080059c5
 8005a2c:	080059c5 	.word	0x080059c5
 8005a30:	08005b01 	.word	0x08005b01
 8005a34:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005a38:	e7db      	b.n	80059f2 <_scanf_float+0x92>
 8005a3a:	290e      	cmp	r1, #14
 8005a3c:	d8c2      	bhi.n	80059c4 <_scanf_float+0x64>
 8005a3e:	a001      	add	r0, pc, #4	; (adr r0, 8005a44 <_scanf_float+0xe4>)
 8005a40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a44:	08005af3 	.word	0x08005af3
 8005a48:	080059c5 	.word	0x080059c5
 8005a4c:	08005af3 	.word	0x08005af3
 8005a50:	08005b87 	.word	0x08005b87
 8005a54:	080059c5 	.word	0x080059c5
 8005a58:	08005aa1 	.word	0x08005aa1
 8005a5c:	08005add 	.word	0x08005add
 8005a60:	08005add 	.word	0x08005add
 8005a64:	08005add 	.word	0x08005add
 8005a68:	08005add 	.word	0x08005add
 8005a6c:	08005add 	.word	0x08005add
 8005a70:	08005add 	.word	0x08005add
 8005a74:	08005add 	.word	0x08005add
 8005a78:	08005add 	.word	0x08005add
 8005a7c:	08005add 	.word	0x08005add
 8005a80:	2b6e      	cmp	r3, #110	; 0x6e
 8005a82:	d809      	bhi.n	8005a98 <_scanf_float+0x138>
 8005a84:	2b60      	cmp	r3, #96	; 0x60
 8005a86:	d8b2      	bhi.n	80059ee <_scanf_float+0x8e>
 8005a88:	2b54      	cmp	r3, #84	; 0x54
 8005a8a:	d077      	beq.n	8005b7c <_scanf_float+0x21c>
 8005a8c:	2b59      	cmp	r3, #89	; 0x59
 8005a8e:	d199      	bne.n	80059c4 <_scanf_float+0x64>
 8005a90:	2d07      	cmp	r5, #7
 8005a92:	d197      	bne.n	80059c4 <_scanf_float+0x64>
 8005a94:	2508      	movs	r5, #8
 8005a96:	e029      	b.n	8005aec <_scanf_float+0x18c>
 8005a98:	2b74      	cmp	r3, #116	; 0x74
 8005a9a:	d06f      	beq.n	8005b7c <_scanf_float+0x21c>
 8005a9c:	2b79      	cmp	r3, #121	; 0x79
 8005a9e:	e7f6      	b.n	8005a8e <_scanf_float+0x12e>
 8005aa0:	6821      	ldr	r1, [r4, #0]
 8005aa2:	05c8      	lsls	r0, r1, #23
 8005aa4:	d51a      	bpl.n	8005adc <_scanf_float+0x17c>
 8005aa6:	9b02      	ldr	r3, [sp, #8]
 8005aa8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005aac:	6021      	str	r1, [r4, #0]
 8005aae:	f109 0901 	add.w	r9, r9, #1
 8005ab2:	b11b      	cbz	r3, 8005abc <_scanf_float+0x15c>
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	3201      	adds	r2, #1
 8005ab8:	9302      	str	r3, [sp, #8]
 8005aba:	60a2      	str	r2, [r4, #8]
 8005abc:	68a3      	ldr	r3, [r4, #8]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	60a3      	str	r3, [r4, #8]
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	6123      	str	r3, [r4, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	607b      	str	r3, [r7, #4]
 8005ad0:	f340 8084 	ble.w	8005bdc <_scanf_float+0x27c>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	e766      	b.n	80059aa <_scanf_float+0x4a>
 8005adc:	eb1a 0f05 	cmn.w	sl, r5
 8005ae0:	f47f af70 	bne.w	80059c4 <_scanf_float+0x64>
 8005ae4:	6822      	ldr	r2, [r4, #0]
 8005ae6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005aea:	6022      	str	r2, [r4, #0]
 8005aec:	f806 3b01 	strb.w	r3, [r6], #1
 8005af0:	e7e4      	b.n	8005abc <_scanf_float+0x15c>
 8005af2:	6822      	ldr	r2, [r4, #0]
 8005af4:	0610      	lsls	r0, r2, #24
 8005af6:	f57f af65 	bpl.w	80059c4 <_scanf_float+0x64>
 8005afa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005afe:	e7f4      	b.n	8005aea <_scanf_float+0x18a>
 8005b00:	f1ba 0f00 	cmp.w	sl, #0
 8005b04:	d10e      	bne.n	8005b24 <_scanf_float+0x1c4>
 8005b06:	f1b9 0f00 	cmp.w	r9, #0
 8005b0a:	d10e      	bne.n	8005b2a <_scanf_float+0x1ca>
 8005b0c:	6822      	ldr	r2, [r4, #0]
 8005b0e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b12:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b16:	d108      	bne.n	8005b2a <_scanf_float+0x1ca>
 8005b18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b1c:	f04f 0a01 	mov.w	sl, #1
 8005b20:	6022      	str	r2, [r4, #0]
 8005b22:	e7e3      	b.n	8005aec <_scanf_float+0x18c>
 8005b24:	f1ba 0f02 	cmp.w	sl, #2
 8005b28:	d055      	beq.n	8005bd6 <_scanf_float+0x276>
 8005b2a:	2d01      	cmp	r5, #1
 8005b2c:	d002      	beq.n	8005b34 <_scanf_float+0x1d4>
 8005b2e:	2d04      	cmp	r5, #4
 8005b30:	f47f af48 	bne.w	80059c4 <_scanf_float+0x64>
 8005b34:	3501      	adds	r5, #1
 8005b36:	b2ed      	uxtb	r5, r5
 8005b38:	e7d8      	b.n	8005aec <_scanf_float+0x18c>
 8005b3a:	f1ba 0f01 	cmp.w	sl, #1
 8005b3e:	f47f af41 	bne.w	80059c4 <_scanf_float+0x64>
 8005b42:	f04f 0a02 	mov.w	sl, #2
 8005b46:	e7d1      	b.n	8005aec <_scanf_float+0x18c>
 8005b48:	b97d      	cbnz	r5, 8005b6a <_scanf_float+0x20a>
 8005b4a:	f1b9 0f00 	cmp.w	r9, #0
 8005b4e:	f47f af3c 	bne.w	80059ca <_scanf_float+0x6a>
 8005b52:	6822      	ldr	r2, [r4, #0]
 8005b54:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b58:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b5c:	f47f af39 	bne.w	80059d2 <_scanf_float+0x72>
 8005b60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b64:	2501      	movs	r5, #1
 8005b66:	6022      	str	r2, [r4, #0]
 8005b68:	e7c0      	b.n	8005aec <_scanf_float+0x18c>
 8005b6a:	2d03      	cmp	r5, #3
 8005b6c:	d0e2      	beq.n	8005b34 <_scanf_float+0x1d4>
 8005b6e:	2d05      	cmp	r5, #5
 8005b70:	e7de      	b.n	8005b30 <_scanf_float+0x1d0>
 8005b72:	2d02      	cmp	r5, #2
 8005b74:	f47f af26 	bne.w	80059c4 <_scanf_float+0x64>
 8005b78:	2503      	movs	r5, #3
 8005b7a:	e7b7      	b.n	8005aec <_scanf_float+0x18c>
 8005b7c:	2d06      	cmp	r5, #6
 8005b7e:	f47f af21 	bne.w	80059c4 <_scanf_float+0x64>
 8005b82:	2507      	movs	r5, #7
 8005b84:	e7b2      	b.n	8005aec <_scanf_float+0x18c>
 8005b86:	6822      	ldr	r2, [r4, #0]
 8005b88:	0591      	lsls	r1, r2, #22
 8005b8a:	f57f af1b 	bpl.w	80059c4 <_scanf_float+0x64>
 8005b8e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005b92:	6022      	str	r2, [r4, #0]
 8005b94:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b98:	e7a8      	b.n	8005aec <_scanf_float+0x18c>
 8005b9a:	6822      	ldr	r2, [r4, #0]
 8005b9c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005ba0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005ba4:	d006      	beq.n	8005bb4 <_scanf_float+0x254>
 8005ba6:	0550      	lsls	r0, r2, #21
 8005ba8:	f57f af0c 	bpl.w	80059c4 <_scanf_float+0x64>
 8005bac:	f1b9 0f00 	cmp.w	r9, #0
 8005bb0:	f43f af0f 	beq.w	80059d2 <_scanf_float+0x72>
 8005bb4:	0591      	lsls	r1, r2, #22
 8005bb6:	bf58      	it	pl
 8005bb8:	9901      	ldrpl	r1, [sp, #4]
 8005bba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005bbe:	bf58      	it	pl
 8005bc0:	eba9 0101 	subpl.w	r1, r9, r1
 8005bc4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005bc8:	f04f 0900 	mov.w	r9, #0
 8005bcc:	bf58      	it	pl
 8005bce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005bd2:	6022      	str	r2, [r4, #0]
 8005bd4:	e78a      	b.n	8005aec <_scanf_float+0x18c>
 8005bd6:	f04f 0a03 	mov.w	sl, #3
 8005bda:	e787      	b.n	8005aec <_scanf_float+0x18c>
 8005bdc:	4639      	mov	r1, r7
 8005bde:	4640      	mov	r0, r8
 8005be0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005be4:	4798      	blx	r3
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f43f aedf 	beq.w	80059aa <_scanf_float+0x4a>
 8005bec:	e6ea      	b.n	80059c4 <_scanf_float+0x64>
 8005bee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bf2:	463a      	mov	r2, r7
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bfa:	4798      	blx	r3
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	e6ec      	b.n	80059de <_scanf_float+0x7e>
 8005c04:	1e6b      	subs	r3, r5, #1
 8005c06:	2b06      	cmp	r3, #6
 8005c08:	d825      	bhi.n	8005c56 <_scanf_float+0x2f6>
 8005c0a:	2d02      	cmp	r5, #2
 8005c0c:	d836      	bhi.n	8005c7c <_scanf_float+0x31c>
 8005c0e:	455e      	cmp	r6, fp
 8005c10:	f67f aee8 	bls.w	80059e4 <_scanf_float+0x84>
 8005c14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c18:	463a      	mov	r2, r7
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c20:	4798      	blx	r3
 8005c22:	6923      	ldr	r3, [r4, #16]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	6123      	str	r3, [r4, #16]
 8005c28:	e7f1      	b.n	8005c0e <_scanf_float+0x2ae>
 8005c2a:	9802      	ldr	r0, [sp, #8]
 8005c2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005c34:	463a      	mov	r2, r7
 8005c36:	9002      	str	r0, [sp, #8]
 8005c38:	4640      	mov	r0, r8
 8005c3a:	4798      	blx	r3
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	6123      	str	r3, [r4, #16]
 8005c42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c46:	fa5f fa8a 	uxtb.w	sl, sl
 8005c4a:	f1ba 0f02 	cmp.w	sl, #2
 8005c4e:	d1ec      	bne.n	8005c2a <_scanf_float+0x2ca>
 8005c50:	3d03      	subs	r5, #3
 8005c52:	b2ed      	uxtb	r5, r5
 8005c54:	1b76      	subs	r6, r6, r5
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	05da      	lsls	r2, r3, #23
 8005c5a:	d52f      	bpl.n	8005cbc <_scanf_float+0x35c>
 8005c5c:	055b      	lsls	r3, r3, #21
 8005c5e:	d510      	bpl.n	8005c82 <_scanf_float+0x322>
 8005c60:	455e      	cmp	r6, fp
 8005c62:	f67f aebf 	bls.w	80059e4 <_scanf_float+0x84>
 8005c66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c6a:	463a      	mov	r2, r7
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c72:	4798      	blx	r3
 8005c74:	6923      	ldr	r3, [r4, #16]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	6123      	str	r3, [r4, #16]
 8005c7a:	e7f1      	b.n	8005c60 <_scanf_float+0x300>
 8005c7c:	46aa      	mov	sl, r5
 8005c7e:	9602      	str	r6, [sp, #8]
 8005c80:	e7df      	b.n	8005c42 <_scanf_float+0x2e2>
 8005c82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	2965      	cmp	r1, #101	; 0x65
 8005c8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c8e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005c92:	6123      	str	r3, [r4, #16]
 8005c94:	d00c      	beq.n	8005cb0 <_scanf_float+0x350>
 8005c96:	2945      	cmp	r1, #69	; 0x45
 8005c98:	d00a      	beq.n	8005cb0 <_scanf_float+0x350>
 8005c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c9e:	463a      	mov	r2, r7
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	4798      	blx	r3
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	1eb5      	subs	r5, r6, #2
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	463a      	mov	r2, r7
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cb8:	4798      	blx	r3
 8005cba:	462e      	mov	r6, r5
 8005cbc:	6825      	ldr	r5, [r4, #0]
 8005cbe:	f015 0510 	ands.w	r5, r5, #16
 8005cc2:	d155      	bne.n	8005d70 <_scanf_float+0x410>
 8005cc4:	7035      	strb	r5, [r6, #0]
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd0:	d11b      	bne.n	8005d0a <_scanf_float+0x3aa>
 8005cd2:	9b01      	ldr	r3, [sp, #4]
 8005cd4:	454b      	cmp	r3, r9
 8005cd6:	eba3 0209 	sub.w	r2, r3, r9
 8005cda:	d123      	bne.n	8005d24 <_scanf_float+0x3c4>
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4659      	mov	r1, fp
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	f000 fe79 	bl	80069d8 <_strtod_r>
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	9b03      	ldr	r3, [sp, #12]
 8005cea:	f012 0f02 	tst.w	r2, #2
 8005cee:	4606      	mov	r6, r0
 8005cf0:	460f      	mov	r7, r1
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	d021      	beq.n	8005d3a <_scanf_float+0x3da>
 8005cf6:	1d1a      	adds	r2, r3, #4
 8005cf8:	9903      	ldr	r1, [sp, #12]
 8005cfa:	600a      	str	r2, [r1, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	e9c3 6700 	strd	r6, r7, [r3]
 8005d02:	68e3      	ldr	r3, [r4, #12]
 8005d04:	3301      	adds	r3, #1
 8005d06:	60e3      	str	r3, [r4, #12]
 8005d08:	e66d      	b.n	80059e6 <_scanf_float+0x86>
 8005d0a:	9b04      	ldr	r3, [sp, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0e5      	beq.n	8005cdc <_scanf_float+0x37c>
 8005d10:	9905      	ldr	r1, [sp, #20]
 8005d12:	230a      	movs	r3, #10
 8005d14:	462a      	mov	r2, r5
 8005d16:	4640      	mov	r0, r8
 8005d18:	3101      	adds	r1, #1
 8005d1a:	f000 fedf 	bl	8006adc <_strtol_r>
 8005d1e:	9b04      	ldr	r3, [sp, #16]
 8005d20:	9e05      	ldr	r6, [sp, #20]
 8005d22:	1ac2      	subs	r2, r0, r3
 8005d24:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005d28:	429e      	cmp	r6, r3
 8005d2a:	bf28      	it	cs
 8005d2c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005d30:	4630      	mov	r0, r6
 8005d32:	4910      	ldr	r1, [pc, #64]	; (8005d74 <_scanf_float+0x414>)
 8005d34:	f000 f826 	bl	8005d84 <siprintf>
 8005d38:	e7d0      	b.n	8005cdc <_scanf_float+0x37c>
 8005d3a:	f012 0f04 	tst.w	r2, #4
 8005d3e:	f103 0204 	add.w	r2, r3, #4
 8005d42:	d1d9      	bne.n	8005cf8 <_scanf_float+0x398>
 8005d44:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005d48:	f8cc 2000 	str.w	r2, [ip]
 8005d4c:	f8d3 8000 	ldr.w	r8, [r3]
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	f7fa fe72 	bl	8000a3c <__aeabi_dcmpun>
 8005d58:	b128      	cbz	r0, 8005d66 <_scanf_float+0x406>
 8005d5a:	4807      	ldr	r0, [pc, #28]	; (8005d78 <_scanf_float+0x418>)
 8005d5c:	f000 f80e 	bl	8005d7c <nanf>
 8005d60:	f8c8 0000 	str.w	r0, [r8]
 8005d64:	e7cd      	b.n	8005d02 <_scanf_float+0x3a2>
 8005d66:	4630      	mov	r0, r6
 8005d68:	4639      	mov	r1, r7
 8005d6a:	f7fa fec5 	bl	8000af8 <__aeabi_d2f>
 8005d6e:	e7f7      	b.n	8005d60 <_scanf_float+0x400>
 8005d70:	2500      	movs	r5, #0
 8005d72:	e638      	b.n	80059e6 <_scanf_float+0x86>
 8005d74:	080099bc 	.word	0x080099bc
 8005d78:	08009dc8 	.word	0x08009dc8

08005d7c <nanf>:
 8005d7c:	4800      	ldr	r0, [pc, #0]	; (8005d80 <nanf+0x4>)
 8005d7e:	4770      	bx	lr
 8005d80:	7fc00000 	.word	0x7fc00000

08005d84 <siprintf>:
 8005d84:	b40e      	push	{r1, r2, r3}
 8005d86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d8a:	b500      	push	{lr}
 8005d8c:	b09c      	sub	sp, #112	; 0x70
 8005d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d90:	9002      	str	r0, [sp, #8]
 8005d92:	9006      	str	r0, [sp, #24]
 8005d94:	9107      	str	r1, [sp, #28]
 8005d96:	9104      	str	r1, [sp, #16]
 8005d98:	4808      	ldr	r0, [pc, #32]	; (8005dbc <siprintf+0x38>)
 8005d9a:	4909      	ldr	r1, [pc, #36]	; (8005dc0 <siprintf+0x3c>)
 8005d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005da0:	9105      	str	r1, [sp, #20]
 8005da2:	6800      	ldr	r0, [r0, #0]
 8005da4:	a902      	add	r1, sp, #8
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	f002 feb8 	bl	8008b1c <_svfiprintf_r>
 8005dac:	2200      	movs	r2, #0
 8005dae:	9b02      	ldr	r3, [sp, #8]
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	b01c      	add	sp, #112	; 0x70
 8005db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005db8:	b003      	add	sp, #12
 8005dba:	4770      	bx	lr
 8005dbc:	2000000c 	.word	0x2000000c
 8005dc0:	ffff0208 	.word	0xffff0208

08005dc4 <sulp>:
 8005dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc8:	460f      	mov	r7, r1
 8005dca:	4690      	mov	r8, r2
 8005dcc:	f002 fc12 	bl	80085f4 <__ulp>
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	460d      	mov	r5, r1
 8005dd4:	f1b8 0f00 	cmp.w	r8, #0
 8005dd8:	d011      	beq.n	8005dfe <sulp+0x3a>
 8005dda:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005dde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	dd0b      	ble.n	8005dfe <sulp+0x3a>
 8005de6:	2400      	movs	r4, #0
 8005de8:	051b      	lsls	r3, r3, #20
 8005dea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005dee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005df2:	4622      	mov	r2, r4
 8005df4:	462b      	mov	r3, r5
 8005df6:	f7fa fb87 	bl	8000508 <__aeabi_dmul>
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	460d      	mov	r5, r1
 8005dfe:	4620      	mov	r0, r4
 8005e00:	4629      	mov	r1, r5
 8005e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005e08 <_strtod_l>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	469b      	mov	fp, r3
 8005e0e:	2300      	movs	r3, #0
 8005e10:	b09f      	sub	sp, #124	; 0x7c
 8005e12:	931a      	str	r3, [sp, #104]	; 0x68
 8005e14:	4b9e      	ldr	r3, [pc, #632]	; (8006090 <_strtod_l+0x288>)
 8005e16:	4682      	mov	sl, r0
 8005e18:	681f      	ldr	r7, [r3, #0]
 8005e1a:	460e      	mov	r6, r1
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	9215      	str	r2, [sp, #84]	; 0x54
 8005e20:	f7fa f9ae 	bl	8000180 <strlen>
 8005e24:	f04f 0800 	mov.w	r8, #0
 8005e28:	4604      	mov	r4, r0
 8005e2a:	f04f 0900 	mov.w	r9, #0
 8005e2e:	9619      	str	r6, [sp, #100]	; 0x64
 8005e30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	2a2b      	cmp	r2, #43	; 0x2b
 8005e36:	d04c      	beq.n	8005ed2 <_strtod_l+0xca>
 8005e38:	d83a      	bhi.n	8005eb0 <_strtod_l+0xa8>
 8005e3a:	2a0d      	cmp	r2, #13
 8005e3c:	d833      	bhi.n	8005ea6 <_strtod_l+0x9e>
 8005e3e:	2a08      	cmp	r2, #8
 8005e40:	d833      	bhi.n	8005eaa <_strtod_l+0xa2>
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	d03d      	beq.n	8005ec2 <_strtod_l+0xba>
 8005e46:	2300      	movs	r3, #0
 8005e48:	930a      	str	r3, [sp, #40]	; 0x28
 8005e4a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005e4c:	782b      	ldrb	r3, [r5, #0]
 8005e4e:	2b30      	cmp	r3, #48	; 0x30
 8005e50:	f040 80aa 	bne.w	8005fa8 <_strtod_l+0x1a0>
 8005e54:	786b      	ldrb	r3, [r5, #1]
 8005e56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e5a:	2b58      	cmp	r3, #88	; 0x58
 8005e5c:	d166      	bne.n	8005f2c <_strtod_l+0x124>
 8005e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e60:	4650      	mov	r0, sl
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	ab1a      	add	r3, sp, #104	; 0x68
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	4a8a      	ldr	r2, [pc, #552]	; (8006094 <_strtod_l+0x28c>)
 8005e6a:	f8cd b008 	str.w	fp, [sp, #8]
 8005e6e:	ab1b      	add	r3, sp, #108	; 0x6c
 8005e70:	a919      	add	r1, sp, #100	; 0x64
 8005e72:	f001 fd17 	bl	80078a4 <__gethex>
 8005e76:	f010 0607 	ands.w	r6, r0, #7
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	d005      	beq.n	8005e8a <_strtod_l+0x82>
 8005e7e:	2e06      	cmp	r6, #6
 8005e80:	d129      	bne.n	8005ed6 <_strtod_l+0xce>
 8005e82:	2300      	movs	r3, #0
 8005e84:	3501      	adds	r5, #1
 8005e86:	9519      	str	r5, [sp, #100]	; 0x64
 8005e88:	930a      	str	r3, [sp, #40]	; 0x28
 8005e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f040 858a 	bne.w	80069a6 <_strtod_l+0xb9e>
 8005e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e94:	b1d3      	cbz	r3, 8005ecc <_strtod_l+0xc4>
 8005e96:	4642      	mov	r2, r8
 8005e98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	b01f      	add	sp, #124	; 0x7c
 8005ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea6:	2a20      	cmp	r2, #32
 8005ea8:	d1cd      	bne.n	8005e46 <_strtod_l+0x3e>
 8005eaa:	3301      	adds	r3, #1
 8005eac:	9319      	str	r3, [sp, #100]	; 0x64
 8005eae:	e7bf      	b.n	8005e30 <_strtod_l+0x28>
 8005eb0:	2a2d      	cmp	r2, #45	; 0x2d
 8005eb2:	d1c8      	bne.n	8005e46 <_strtod_l+0x3e>
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	920a      	str	r2, [sp, #40]	; 0x28
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	9219      	str	r2, [sp, #100]	; 0x64
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1c3      	bne.n	8005e4a <_strtod_l+0x42>
 8005ec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ec4:	9619      	str	r6, [sp, #100]	; 0x64
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f040 856b 	bne.w	80069a2 <_strtod_l+0xb9a>
 8005ecc:	4642      	mov	r2, r8
 8005ece:	464b      	mov	r3, r9
 8005ed0:	e7e4      	b.n	8005e9c <_strtod_l+0x94>
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	e7ef      	b.n	8005eb6 <_strtod_l+0xae>
 8005ed6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005ed8:	b13a      	cbz	r2, 8005eea <_strtod_l+0xe2>
 8005eda:	2135      	movs	r1, #53	; 0x35
 8005edc:	a81c      	add	r0, sp, #112	; 0x70
 8005ede:	f002 fc8d 	bl	80087fc <__copybits>
 8005ee2:	4650      	mov	r0, sl
 8005ee4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005ee6:	f002 f855 	bl	8007f94 <_Bfree>
 8005eea:	3e01      	subs	r6, #1
 8005eec:	2e04      	cmp	r6, #4
 8005eee:	d806      	bhi.n	8005efe <_strtod_l+0xf6>
 8005ef0:	e8df f006 	tbb	[pc, r6]
 8005ef4:	1714030a 	.word	0x1714030a
 8005ef8:	0a          	.byte	0x0a
 8005ef9:	00          	.byte	0x00
 8005efa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005efe:	0721      	lsls	r1, r4, #28
 8005f00:	d5c3      	bpl.n	8005e8a <_strtod_l+0x82>
 8005f02:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005f06:	e7c0      	b.n	8005e8a <_strtod_l+0x82>
 8005f08:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005f0a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005f0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005f12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f16:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005f1a:	e7f0      	b.n	8005efe <_strtod_l+0xf6>
 8005f1c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006098 <_strtod_l+0x290>
 8005f20:	e7ed      	b.n	8005efe <_strtod_l+0xf6>
 8005f22:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005f26:	f04f 38ff 	mov.w	r8, #4294967295
 8005f2a:	e7e8      	b.n	8005efe <_strtod_l+0xf6>
 8005f2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	9219      	str	r2, [sp, #100]	; 0x64
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b30      	cmp	r3, #48	; 0x30
 8005f36:	d0f9      	beq.n	8005f2c <_strtod_l+0x124>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0a6      	beq.n	8005e8a <_strtod_l+0x82>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	9307      	str	r3, [sp, #28]
 8005f40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f42:	220a      	movs	r2, #10
 8005f44:	9308      	str	r3, [sp, #32]
 8005f46:	2300      	movs	r3, #0
 8005f48:	469b      	mov	fp, r3
 8005f4a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005f4e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005f50:	7805      	ldrb	r5, [r0, #0]
 8005f52:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005f56:	b2d9      	uxtb	r1, r3
 8005f58:	2909      	cmp	r1, #9
 8005f5a:	d927      	bls.n	8005fac <_strtod_l+0x1a4>
 8005f5c:	4622      	mov	r2, r4
 8005f5e:	4639      	mov	r1, r7
 8005f60:	f002 fef2 	bl	8008d48 <strncmp>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d033      	beq.n	8005fd0 <_strtod_l+0x1c8>
 8005f68:	2000      	movs	r0, #0
 8005f6a:	462a      	mov	r2, r5
 8005f6c:	465c      	mov	r4, fp
 8005f6e:	4603      	mov	r3, r0
 8005f70:	9004      	str	r0, [sp, #16]
 8005f72:	2a65      	cmp	r2, #101	; 0x65
 8005f74:	d001      	beq.n	8005f7a <_strtod_l+0x172>
 8005f76:	2a45      	cmp	r2, #69	; 0x45
 8005f78:	d114      	bne.n	8005fa4 <_strtod_l+0x19c>
 8005f7a:	b91c      	cbnz	r4, 8005f84 <_strtod_l+0x17c>
 8005f7c:	9a07      	ldr	r2, [sp, #28]
 8005f7e:	4302      	orrs	r2, r0
 8005f80:	d09f      	beq.n	8005ec2 <_strtod_l+0xba>
 8005f82:	2400      	movs	r4, #0
 8005f84:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005f86:	1c72      	adds	r2, r6, #1
 8005f88:	9219      	str	r2, [sp, #100]	; 0x64
 8005f8a:	7872      	ldrb	r2, [r6, #1]
 8005f8c:	2a2b      	cmp	r2, #43	; 0x2b
 8005f8e:	d079      	beq.n	8006084 <_strtod_l+0x27c>
 8005f90:	2a2d      	cmp	r2, #45	; 0x2d
 8005f92:	f000 8083 	beq.w	800609c <_strtod_l+0x294>
 8005f96:	2700      	movs	r7, #0
 8005f98:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005f9c:	2909      	cmp	r1, #9
 8005f9e:	f240 8083 	bls.w	80060a8 <_strtod_l+0x2a0>
 8005fa2:	9619      	str	r6, [sp, #100]	; 0x64
 8005fa4:	2500      	movs	r5, #0
 8005fa6:	e09f      	b.n	80060e8 <_strtod_l+0x2e0>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e7c8      	b.n	8005f3e <_strtod_l+0x136>
 8005fac:	f1bb 0f08 	cmp.w	fp, #8
 8005fb0:	bfd5      	itete	le
 8005fb2:	9906      	ldrle	r1, [sp, #24]
 8005fb4:	9905      	ldrgt	r1, [sp, #20]
 8005fb6:	fb02 3301 	mlale	r3, r2, r1, r3
 8005fba:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005fbe:	f100 0001 	add.w	r0, r0, #1
 8005fc2:	bfd4      	ite	le
 8005fc4:	9306      	strle	r3, [sp, #24]
 8005fc6:	9305      	strgt	r3, [sp, #20]
 8005fc8:	f10b 0b01 	add.w	fp, fp, #1
 8005fcc:	9019      	str	r0, [sp, #100]	; 0x64
 8005fce:	e7be      	b.n	8005f4e <_strtod_l+0x146>
 8005fd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fd2:	191a      	adds	r2, r3, r4
 8005fd4:	9219      	str	r2, [sp, #100]	; 0x64
 8005fd6:	5d1a      	ldrb	r2, [r3, r4]
 8005fd8:	f1bb 0f00 	cmp.w	fp, #0
 8005fdc:	d036      	beq.n	800604c <_strtod_l+0x244>
 8005fde:	465c      	mov	r4, fp
 8005fe0:	9004      	str	r0, [sp, #16]
 8005fe2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005fe6:	2b09      	cmp	r3, #9
 8005fe8:	d912      	bls.n	8006010 <_strtod_l+0x208>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e7c1      	b.n	8005f72 <_strtod_l+0x16a>
 8005fee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	9219      	str	r2, [sp, #100]	; 0x64
 8005ff6:	785a      	ldrb	r2, [r3, #1]
 8005ff8:	2a30      	cmp	r2, #48	; 0x30
 8005ffa:	d0f8      	beq.n	8005fee <_strtod_l+0x1e6>
 8005ffc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006000:	2b08      	cmp	r3, #8
 8006002:	f200 84d5 	bhi.w	80069b0 <_strtod_l+0xba8>
 8006006:	9004      	str	r0, [sp, #16]
 8006008:	2000      	movs	r0, #0
 800600a:	4604      	mov	r4, r0
 800600c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800600e:	9308      	str	r3, [sp, #32]
 8006010:	3a30      	subs	r2, #48	; 0x30
 8006012:	f100 0301 	add.w	r3, r0, #1
 8006016:	d013      	beq.n	8006040 <_strtod_l+0x238>
 8006018:	9904      	ldr	r1, [sp, #16]
 800601a:	1905      	adds	r5, r0, r4
 800601c:	4419      	add	r1, r3
 800601e:	9104      	str	r1, [sp, #16]
 8006020:	4623      	mov	r3, r4
 8006022:	210a      	movs	r1, #10
 8006024:	42ab      	cmp	r3, r5
 8006026:	d113      	bne.n	8006050 <_strtod_l+0x248>
 8006028:	1823      	adds	r3, r4, r0
 800602a:	2b08      	cmp	r3, #8
 800602c:	f104 0401 	add.w	r4, r4, #1
 8006030:	4404      	add	r4, r0
 8006032:	dc1b      	bgt.n	800606c <_strtod_l+0x264>
 8006034:	230a      	movs	r3, #10
 8006036:	9906      	ldr	r1, [sp, #24]
 8006038:	fb03 2301 	mla	r3, r3, r1, r2
 800603c:	9306      	str	r3, [sp, #24]
 800603e:	2300      	movs	r3, #0
 8006040:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006042:	4618      	mov	r0, r3
 8006044:	1c51      	adds	r1, r2, #1
 8006046:	9119      	str	r1, [sp, #100]	; 0x64
 8006048:	7852      	ldrb	r2, [r2, #1]
 800604a:	e7ca      	b.n	8005fe2 <_strtod_l+0x1da>
 800604c:	4658      	mov	r0, fp
 800604e:	e7d3      	b.n	8005ff8 <_strtod_l+0x1f0>
 8006050:	2b08      	cmp	r3, #8
 8006052:	dc04      	bgt.n	800605e <_strtod_l+0x256>
 8006054:	9f06      	ldr	r7, [sp, #24]
 8006056:	434f      	muls	r7, r1
 8006058:	9706      	str	r7, [sp, #24]
 800605a:	3301      	adds	r3, #1
 800605c:	e7e2      	b.n	8006024 <_strtod_l+0x21c>
 800605e:	1c5f      	adds	r7, r3, #1
 8006060:	2f10      	cmp	r7, #16
 8006062:	bfde      	ittt	le
 8006064:	9f05      	ldrle	r7, [sp, #20]
 8006066:	434f      	mulle	r7, r1
 8006068:	9705      	strle	r7, [sp, #20]
 800606a:	e7f6      	b.n	800605a <_strtod_l+0x252>
 800606c:	2c10      	cmp	r4, #16
 800606e:	bfdf      	itttt	le
 8006070:	230a      	movle	r3, #10
 8006072:	9905      	ldrle	r1, [sp, #20]
 8006074:	fb03 2301 	mlale	r3, r3, r1, r2
 8006078:	9305      	strle	r3, [sp, #20]
 800607a:	e7e0      	b.n	800603e <_strtod_l+0x236>
 800607c:	2300      	movs	r3, #0
 800607e:	9304      	str	r3, [sp, #16]
 8006080:	2301      	movs	r3, #1
 8006082:	e77b      	b.n	8005f7c <_strtod_l+0x174>
 8006084:	2700      	movs	r7, #0
 8006086:	1cb2      	adds	r2, r6, #2
 8006088:	9219      	str	r2, [sp, #100]	; 0x64
 800608a:	78b2      	ldrb	r2, [r6, #2]
 800608c:	e784      	b.n	8005f98 <_strtod_l+0x190>
 800608e:	bf00      	nop
 8006090:	08009c10 	.word	0x08009c10
 8006094:	080099c4 	.word	0x080099c4
 8006098:	7ff00000 	.word	0x7ff00000
 800609c:	2701      	movs	r7, #1
 800609e:	e7f2      	b.n	8006086 <_strtod_l+0x27e>
 80060a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80060a2:	1c51      	adds	r1, r2, #1
 80060a4:	9119      	str	r1, [sp, #100]	; 0x64
 80060a6:	7852      	ldrb	r2, [r2, #1]
 80060a8:	2a30      	cmp	r2, #48	; 0x30
 80060aa:	d0f9      	beq.n	80060a0 <_strtod_l+0x298>
 80060ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80060b0:	2908      	cmp	r1, #8
 80060b2:	f63f af77 	bhi.w	8005fa4 <_strtod_l+0x19c>
 80060b6:	f04f 0e0a 	mov.w	lr, #10
 80060ba:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80060be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80060c0:	9209      	str	r2, [sp, #36]	; 0x24
 80060c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80060c4:	1c51      	adds	r1, r2, #1
 80060c6:	9119      	str	r1, [sp, #100]	; 0x64
 80060c8:	7852      	ldrb	r2, [r2, #1]
 80060ca:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80060ce:	2d09      	cmp	r5, #9
 80060d0:	d935      	bls.n	800613e <_strtod_l+0x336>
 80060d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80060d4:	1b49      	subs	r1, r1, r5
 80060d6:	2908      	cmp	r1, #8
 80060d8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80060dc:	dc02      	bgt.n	80060e4 <_strtod_l+0x2dc>
 80060de:	4565      	cmp	r5, ip
 80060e0:	bfa8      	it	ge
 80060e2:	4665      	movge	r5, ip
 80060e4:	b107      	cbz	r7, 80060e8 <_strtod_l+0x2e0>
 80060e6:	426d      	negs	r5, r5
 80060e8:	2c00      	cmp	r4, #0
 80060ea:	d14c      	bne.n	8006186 <_strtod_l+0x37e>
 80060ec:	9907      	ldr	r1, [sp, #28]
 80060ee:	4301      	orrs	r1, r0
 80060f0:	f47f aecb 	bne.w	8005e8a <_strtod_l+0x82>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f47f aee4 	bne.w	8005ec2 <_strtod_l+0xba>
 80060fa:	2a69      	cmp	r2, #105	; 0x69
 80060fc:	d026      	beq.n	800614c <_strtod_l+0x344>
 80060fe:	dc23      	bgt.n	8006148 <_strtod_l+0x340>
 8006100:	2a49      	cmp	r2, #73	; 0x49
 8006102:	d023      	beq.n	800614c <_strtod_l+0x344>
 8006104:	2a4e      	cmp	r2, #78	; 0x4e
 8006106:	f47f aedc 	bne.w	8005ec2 <_strtod_l+0xba>
 800610a:	499d      	ldr	r1, [pc, #628]	; (8006380 <_strtod_l+0x578>)
 800610c:	a819      	add	r0, sp, #100	; 0x64
 800610e:	f001 fe17 	bl	8007d40 <__match>
 8006112:	2800      	cmp	r0, #0
 8006114:	f43f aed5 	beq.w	8005ec2 <_strtod_l+0xba>
 8006118:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b28      	cmp	r3, #40	; 0x28
 800611e:	d12c      	bne.n	800617a <_strtod_l+0x372>
 8006120:	4998      	ldr	r1, [pc, #608]	; (8006384 <_strtod_l+0x57c>)
 8006122:	aa1c      	add	r2, sp, #112	; 0x70
 8006124:	a819      	add	r0, sp, #100	; 0x64
 8006126:	f001 fe1f 	bl	8007d68 <__hexnan>
 800612a:	2805      	cmp	r0, #5
 800612c:	d125      	bne.n	800617a <_strtod_l+0x372>
 800612e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006130:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006134:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006138:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800613c:	e6a5      	b.n	8005e8a <_strtod_l+0x82>
 800613e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006142:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006146:	e7bc      	b.n	80060c2 <_strtod_l+0x2ba>
 8006148:	2a6e      	cmp	r2, #110	; 0x6e
 800614a:	e7dc      	b.n	8006106 <_strtod_l+0x2fe>
 800614c:	498e      	ldr	r1, [pc, #568]	; (8006388 <_strtod_l+0x580>)
 800614e:	a819      	add	r0, sp, #100	; 0x64
 8006150:	f001 fdf6 	bl	8007d40 <__match>
 8006154:	2800      	cmp	r0, #0
 8006156:	f43f aeb4 	beq.w	8005ec2 <_strtod_l+0xba>
 800615a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800615c:	498b      	ldr	r1, [pc, #556]	; (800638c <_strtod_l+0x584>)
 800615e:	3b01      	subs	r3, #1
 8006160:	a819      	add	r0, sp, #100	; 0x64
 8006162:	9319      	str	r3, [sp, #100]	; 0x64
 8006164:	f001 fdec 	bl	8007d40 <__match>
 8006168:	b910      	cbnz	r0, 8006170 <_strtod_l+0x368>
 800616a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800616c:	3301      	adds	r3, #1
 800616e:	9319      	str	r3, [sp, #100]	; 0x64
 8006170:	f04f 0800 	mov.w	r8, #0
 8006174:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006390 <_strtod_l+0x588>
 8006178:	e687      	b.n	8005e8a <_strtod_l+0x82>
 800617a:	4886      	ldr	r0, [pc, #536]	; (8006394 <_strtod_l+0x58c>)
 800617c:	f002 fdce 	bl	8008d1c <nan>
 8006180:	4680      	mov	r8, r0
 8006182:	4689      	mov	r9, r1
 8006184:	e681      	b.n	8005e8a <_strtod_l+0x82>
 8006186:	9b04      	ldr	r3, [sp, #16]
 8006188:	f1bb 0f00 	cmp.w	fp, #0
 800618c:	bf08      	it	eq
 800618e:	46a3      	moveq	fp, r4
 8006190:	1aeb      	subs	r3, r5, r3
 8006192:	2c10      	cmp	r4, #16
 8006194:	9806      	ldr	r0, [sp, #24]
 8006196:	4626      	mov	r6, r4
 8006198:	9307      	str	r3, [sp, #28]
 800619a:	bfa8      	it	ge
 800619c:	2610      	movge	r6, #16
 800619e:	f7fa f939 	bl	8000414 <__aeabi_ui2d>
 80061a2:	2c09      	cmp	r4, #9
 80061a4:	4680      	mov	r8, r0
 80061a6:	4689      	mov	r9, r1
 80061a8:	dd13      	ble.n	80061d2 <_strtod_l+0x3ca>
 80061aa:	4b7b      	ldr	r3, [pc, #492]	; (8006398 <_strtod_l+0x590>)
 80061ac:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061b0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80061b4:	f7fa f9a8 	bl	8000508 <__aeabi_dmul>
 80061b8:	4680      	mov	r8, r0
 80061ba:	9805      	ldr	r0, [sp, #20]
 80061bc:	4689      	mov	r9, r1
 80061be:	f7fa f929 	bl	8000414 <__aeabi_ui2d>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4640      	mov	r0, r8
 80061c8:	4649      	mov	r1, r9
 80061ca:	f7f9 ffe7 	bl	800019c <__adddf3>
 80061ce:	4680      	mov	r8, r0
 80061d0:	4689      	mov	r9, r1
 80061d2:	2c0f      	cmp	r4, #15
 80061d4:	dc36      	bgt.n	8006244 <_strtod_l+0x43c>
 80061d6:	9b07      	ldr	r3, [sp, #28]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f43f ae56 	beq.w	8005e8a <_strtod_l+0x82>
 80061de:	dd22      	ble.n	8006226 <_strtod_l+0x41e>
 80061e0:	2b16      	cmp	r3, #22
 80061e2:	dc09      	bgt.n	80061f8 <_strtod_l+0x3f0>
 80061e4:	496c      	ldr	r1, [pc, #432]	; (8006398 <_strtod_l+0x590>)
 80061e6:	4642      	mov	r2, r8
 80061e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80061ec:	464b      	mov	r3, r9
 80061ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061f2:	f7fa f989 	bl	8000508 <__aeabi_dmul>
 80061f6:	e7c3      	b.n	8006180 <_strtod_l+0x378>
 80061f8:	9a07      	ldr	r2, [sp, #28]
 80061fa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80061fe:	4293      	cmp	r3, r2
 8006200:	db20      	blt.n	8006244 <_strtod_l+0x43c>
 8006202:	4d65      	ldr	r5, [pc, #404]	; (8006398 <_strtod_l+0x590>)
 8006204:	f1c4 040f 	rsb	r4, r4, #15
 8006208:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800620c:	4642      	mov	r2, r8
 800620e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006212:	464b      	mov	r3, r9
 8006214:	f7fa f978 	bl	8000508 <__aeabi_dmul>
 8006218:	9b07      	ldr	r3, [sp, #28]
 800621a:	1b1c      	subs	r4, r3, r4
 800621c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006220:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006224:	e7e5      	b.n	80061f2 <_strtod_l+0x3ea>
 8006226:	9b07      	ldr	r3, [sp, #28]
 8006228:	3316      	adds	r3, #22
 800622a:	db0b      	blt.n	8006244 <_strtod_l+0x43c>
 800622c:	9b04      	ldr	r3, [sp, #16]
 800622e:	4640      	mov	r0, r8
 8006230:	1b5d      	subs	r5, r3, r5
 8006232:	4b59      	ldr	r3, [pc, #356]	; (8006398 <_strtod_l+0x590>)
 8006234:	4649      	mov	r1, r9
 8006236:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800623a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800623e:	f7fa fa8d 	bl	800075c <__aeabi_ddiv>
 8006242:	e79d      	b.n	8006180 <_strtod_l+0x378>
 8006244:	9b07      	ldr	r3, [sp, #28]
 8006246:	1ba6      	subs	r6, r4, r6
 8006248:	441e      	add	r6, r3
 800624a:	2e00      	cmp	r6, #0
 800624c:	dd74      	ble.n	8006338 <_strtod_l+0x530>
 800624e:	f016 030f 	ands.w	r3, r6, #15
 8006252:	d00a      	beq.n	800626a <_strtod_l+0x462>
 8006254:	4950      	ldr	r1, [pc, #320]	; (8006398 <_strtod_l+0x590>)
 8006256:	4642      	mov	r2, r8
 8006258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800625c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006260:	464b      	mov	r3, r9
 8006262:	f7fa f951 	bl	8000508 <__aeabi_dmul>
 8006266:	4680      	mov	r8, r0
 8006268:	4689      	mov	r9, r1
 800626a:	f036 060f 	bics.w	r6, r6, #15
 800626e:	d052      	beq.n	8006316 <_strtod_l+0x50e>
 8006270:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006274:	dd27      	ble.n	80062c6 <_strtod_l+0x4be>
 8006276:	f04f 0b00 	mov.w	fp, #0
 800627a:	f8cd b010 	str.w	fp, [sp, #16]
 800627e:	f8cd b020 	str.w	fp, [sp, #32]
 8006282:	f8cd b018 	str.w	fp, [sp, #24]
 8006286:	2322      	movs	r3, #34	; 0x22
 8006288:	f04f 0800 	mov.w	r8, #0
 800628c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006390 <_strtod_l+0x588>
 8006290:	f8ca 3000 	str.w	r3, [sl]
 8006294:	9b08      	ldr	r3, [sp, #32]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f43f adf7 	beq.w	8005e8a <_strtod_l+0x82>
 800629c:	4650      	mov	r0, sl
 800629e:	991a      	ldr	r1, [sp, #104]	; 0x68
 80062a0:	f001 fe78 	bl	8007f94 <_Bfree>
 80062a4:	4650      	mov	r0, sl
 80062a6:	9906      	ldr	r1, [sp, #24]
 80062a8:	f001 fe74 	bl	8007f94 <_Bfree>
 80062ac:	4650      	mov	r0, sl
 80062ae:	9904      	ldr	r1, [sp, #16]
 80062b0:	f001 fe70 	bl	8007f94 <_Bfree>
 80062b4:	4650      	mov	r0, sl
 80062b6:	9908      	ldr	r1, [sp, #32]
 80062b8:	f001 fe6c 	bl	8007f94 <_Bfree>
 80062bc:	4659      	mov	r1, fp
 80062be:	4650      	mov	r0, sl
 80062c0:	f001 fe68 	bl	8007f94 <_Bfree>
 80062c4:	e5e1      	b.n	8005e8a <_strtod_l+0x82>
 80062c6:	4b35      	ldr	r3, [pc, #212]	; (800639c <_strtod_l+0x594>)
 80062c8:	4640      	mov	r0, r8
 80062ca:	9305      	str	r3, [sp, #20]
 80062cc:	2300      	movs	r3, #0
 80062ce:	4649      	mov	r1, r9
 80062d0:	461f      	mov	r7, r3
 80062d2:	1136      	asrs	r6, r6, #4
 80062d4:	2e01      	cmp	r6, #1
 80062d6:	dc21      	bgt.n	800631c <_strtod_l+0x514>
 80062d8:	b10b      	cbz	r3, 80062de <_strtod_l+0x4d6>
 80062da:	4680      	mov	r8, r0
 80062dc:	4689      	mov	r9, r1
 80062de:	4b2f      	ldr	r3, [pc, #188]	; (800639c <_strtod_l+0x594>)
 80062e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80062e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80062e8:	4642      	mov	r2, r8
 80062ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062ee:	464b      	mov	r3, r9
 80062f0:	f7fa f90a 	bl	8000508 <__aeabi_dmul>
 80062f4:	4b26      	ldr	r3, [pc, #152]	; (8006390 <_strtod_l+0x588>)
 80062f6:	460a      	mov	r2, r1
 80062f8:	400b      	ands	r3, r1
 80062fa:	4929      	ldr	r1, [pc, #164]	; (80063a0 <_strtod_l+0x598>)
 80062fc:	4680      	mov	r8, r0
 80062fe:	428b      	cmp	r3, r1
 8006300:	d8b9      	bhi.n	8006276 <_strtod_l+0x46e>
 8006302:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006306:	428b      	cmp	r3, r1
 8006308:	bf86      	itte	hi
 800630a:	f04f 38ff 	movhi.w	r8, #4294967295
 800630e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80063a4 <_strtod_l+0x59c>
 8006312:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006316:	2300      	movs	r3, #0
 8006318:	9305      	str	r3, [sp, #20]
 800631a:	e07f      	b.n	800641c <_strtod_l+0x614>
 800631c:	07f2      	lsls	r2, r6, #31
 800631e:	d505      	bpl.n	800632c <_strtod_l+0x524>
 8006320:	9b05      	ldr	r3, [sp, #20]
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	f7fa f8ef 	bl	8000508 <__aeabi_dmul>
 800632a:	2301      	movs	r3, #1
 800632c:	9a05      	ldr	r2, [sp, #20]
 800632e:	3701      	adds	r7, #1
 8006330:	3208      	adds	r2, #8
 8006332:	1076      	asrs	r6, r6, #1
 8006334:	9205      	str	r2, [sp, #20]
 8006336:	e7cd      	b.n	80062d4 <_strtod_l+0x4cc>
 8006338:	d0ed      	beq.n	8006316 <_strtod_l+0x50e>
 800633a:	4276      	negs	r6, r6
 800633c:	f016 020f 	ands.w	r2, r6, #15
 8006340:	d00a      	beq.n	8006358 <_strtod_l+0x550>
 8006342:	4b15      	ldr	r3, [pc, #84]	; (8006398 <_strtod_l+0x590>)
 8006344:	4640      	mov	r0, r8
 8006346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800634a:	4649      	mov	r1, r9
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	f7fa fa04 	bl	800075c <__aeabi_ddiv>
 8006354:	4680      	mov	r8, r0
 8006356:	4689      	mov	r9, r1
 8006358:	1136      	asrs	r6, r6, #4
 800635a:	d0dc      	beq.n	8006316 <_strtod_l+0x50e>
 800635c:	2e1f      	cmp	r6, #31
 800635e:	dd23      	ble.n	80063a8 <_strtod_l+0x5a0>
 8006360:	f04f 0b00 	mov.w	fp, #0
 8006364:	f8cd b010 	str.w	fp, [sp, #16]
 8006368:	f8cd b020 	str.w	fp, [sp, #32]
 800636c:	f8cd b018 	str.w	fp, [sp, #24]
 8006370:	2322      	movs	r3, #34	; 0x22
 8006372:	f04f 0800 	mov.w	r8, #0
 8006376:	f04f 0900 	mov.w	r9, #0
 800637a:	f8ca 3000 	str.w	r3, [sl]
 800637e:	e789      	b.n	8006294 <_strtod_l+0x48c>
 8006380:	08009995 	.word	0x08009995
 8006384:	080099d8 	.word	0x080099d8
 8006388:	0800998d 	.word	0x0800998d
 800638c:	08009b1c 	.word	0x08009b1c
 8006390:	7ff00000 	.word	0x7ff00000
 8006394:	08009dc8 	.word	0x08009dc8
 8006398:	08009ca8 	.word	0x08009ca8
 800639c:	08009c80 	.word	0x08009c80
 80063a0:	7ca00000 	.word	0x7ca00000
 80063a4:	7fefffff 	.word	0x7fefffff
 80063a8:	f016 0310 	ands.w	r3, r6, #16
 80063ac:	bf18      	it	ne
 80063ae:	236a      	movne	r3, #106	; 0x6a
 80063b0:	4640      	mov	r0, r8
 80063b2:	9305      	str	r3, [sp, #20]
 80063b4:	4649      	mov	r1, r9
 80063b6:	2300      	movs	r3, #0
 80063b8:	4fb0      	ldr	r7, [pc, #704]	; (800667c <_strtod_l+0x874>)
 80063ba:	07f2      	lsls	r2, r6, #31
 80063bc:	d504      	bpl.n	80063c8 <_strtod_l+0x5c0>
 80063be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c2:	f7fa f8a1 	bl	8000508 <__aeabi_dmul>
 80063c6:	2301      	movs	r3, #1
 80063c8:	1076      	asrs	r6, r6, #1
 80063ca:	f107 0708 	add.w	r7, r7, #8
 80063ce:	d1f4      	bne.n	80063ba <_strtod_l+0x5b2>
 80063d0:	b10b      	cbz	r3, 80063d6 <_strtod_l+0x5ce>
 80063d2:	4680      	mov	r8, r0
 80063d4:	4689      	mov	r9, r1
 80063d6:	9b05      	ldr	r3, [sp, #20]
 80063d8:	b1c3      	cbz	r3, 800640c <_strtod_l+0x604>
 80063da:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80063de:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	4649      	mov	r1, r9
 80063e6:	dd11      	ble.n	800640c <_strtod_l+0x604>
 80063e8:	2b1f      	cmp	r3, #31
 80063ea:	f340 8127 	ble.w	800663c <_strtod_l+0x834>
 80063ee:	2b34      	cmp	r3, #52	; 0x34
 80063f0:	bfd8      	it	le
 80063f2:	f04f 33ff 	movle.w	r3, #4294967295
 80063f6:	f04f 0800 	mov.w	r8, #0
 80063fa:	bfcf      	iteee	gt
 80063fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006400:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006404:	fa03 f202 	lslle.w	r2, r3, r2
 8006408:	ea02 0901 	andle.w	r9, r2, r1
 800640c:	2200      	movs	r2, #0
 800640e:	2300      	movs	r3, #0
 8006410:	4640      	mov	r0, r8
 8006412:	4649      	mov	r1, r9
 8006414:	f7fa fae0 	bl	80009d8 <__aeabi_dcmpeq>
 8006418:	2800      	cmp	r0, #0
 800641a:	d1a1      	bne.n	8006360 <_strtod_l+0x558>
 800641c:	9b06      	ldr	r3, [sp, #24]
 800641e:	465a      	mov	r2, fp
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	4650      	mov	r0, sl
 8006424:	4623      	mov	r3, r4
 8006426:	9908      	ldr	r1, [sp, #32]
 8006428:	f001 fe1c 	bl	8008064 <__s2b>
 800642c:	9008      	str	r0, [sp, #32]
 800642e:	2800      	cmp	r0, #0
 8006430:	f43f af21 	beq.w	8006276 <_strtod_l+0x46e>
 8006434:	9b04      	ldr	r3, [sp, #16]
 8006436:	f04f 0b00 	mov.w	fp, #0
 800643a:	1b5d      	subs	r5, r3, r5
 800643c:	9b07      	ldr	r3, [sp, #28]
 800643e:	f8cd b010 	str.w	fp, [sp, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	bfb4      	ite	lt
 8006446:	462b      	movlt	r3, r5
 8006448:	2300      	movge	r3, #0
 800644a:	930e      	str	r3, [sp, #56]	; 0x38
 800644c:	9b07      	ldr	r3, [sp, #28]
 800644e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006452:	9314      	str	r3, [sp, #80]	; 0x50
 8006454:	9b08      	ldr	r3, [sp, #32]
 8006456:	4650      	mov	r0, sl
 8006458:	6859      	ldr	r1, [r3, #4]
 800645a:	f001 fd5b 	bl	8007f14 <_Balloc>
 800645e:	9006      	str	r0, [sp, #24]
 8006460:	2800      	cmp	r0, #0
 8006462:	f43f af10 	beq.w	8006286 <_strtod_l+0x47e>
 8006466:	9b08      	ldr	r3, [sp, #32]
 8006468:	300c      	adds	r0, #12
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	f103 010c 	add.w	r1, r3, #12
 8006470:	3202      	adds	r2, #2
 8006472:	0092      	lsls	r2, r2, #2
 8006474:	f001 fd40 	bl	8007ef8 <memcpy>
 8006478:	ab1c      	add	r3, sp, #112	; 0x70
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	ab1b      	add	r3, sp, #108	; 0x6c
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4642      	mov	r2, r8
 8006482:	464b      	mov	r3, r9
 8006484:	4650      	mov	r0, sl
 8006486:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800648a:	f002 f92d 	bl	80086e8 <__d2b>
 800648e:	901a      	str	r0, [sp, #104]	; 0x68
 8006490:	2800      	cmp	r0, #0
 8006492:	f43f aef8 	beq.w	8006286 <_strtod_l+0x47e>
 8006496:	2101      	movs	r1, #1
 8006498:	4650      	mov	r0, sl
 800649a:	f001 fe7b 	bl	8008194 <__i2b>
 800649e:	4603      	mov	r3, r0
 80064a0:	9004      	str	r0, [sp, #16]
 80064a2:	2800      	cmp	r0, #0
 80064a4:	f43f aeef 	beq.w	8006286 <_strtod_l+0x47e>
 80064a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80064aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80064ac:	2d00      	cmp	r5, #0
 80064ae:	bfab      	itete	ge
 80064b0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80064b2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80064b4:	18ee      	addge	r6, r5, r3
 80064b6:	1b5c      	sublt	r4, r3, r5
 80064b8:	9b05      	ldr	r3, [sp, #20]
 80064ba:	bfa8      	it	ge
 80064bc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80064be:	eba5 0503 	sub.w	r5, r5, r3
 80064c2:	4415      	add	r5, r2
 80064c4:	4b6e      	ldr	r3, [pc, #440]	; (8006680 <_strtod_l+0x878>)
 80064c6:	f105 35ff 	add.w	r5, r5, #4294967295
 80064ca:	bfb8      	it	lt
 80064cc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80064ce:	429d      	cmp	r5, r3
 80064d0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80064d4:	f280 80c4 	bge.w	8006660 <_strtod_l+0x858>
 80064d8:	1b5b      	subs	r3, r3, r5
 80064da:	2b1f      	cmp	r3, #31
 80064dc:	f04f 0701 	mov.w	r7, #1
 80064e0:	eba2 0203 	sub.w	r2, r2, r3
 80064e4:	f300 80b1 	bgt.w	800664a <_strtod_l+0x842>
 80064e8:	2500      	movs	r5, #0
 80064ea:	fa07 f303 	lsl.w	r3, r7, r3
 80064ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80064f0:	18b7      	adds	r7, r6, r2
 80064f2:	9b05      	ldr	r3, [sp, #20]
 80064f4:	42be      	cmp	r6, r7
 80064f6:	4414      	add	r4, r2
 80064f8:	441c      	add	r4, r3
 80064fa:	4633      	mov	r3, r6
 80064fc:	bfa8      	it	ge
 80064fe:	463b      	movge	r3, r7
 8006500:	42a3      	cmp	r3, r4
 8006502:	bfa8      	it	ge
 8006504:	4623      	movge	r3, r4
 8006506:	2b00      	cmp	r3, #0
 8006508:	bfc2      	ittt	gt
 800650a:	1aff      	subgt	r7, r7, r3
 800650c:	1ae4      	subgt	r4, r4, r3
 800650e:	1af6      	subgt	r6, r6, r3
 8006510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006512:	2b00      	cmp	r3, #0
 8006514:	dd17      	ble.n	8006546 <_strtod_l+0x73e>
 8006516:	461a      	mov	r2, r3
 8006518:	4650      	mov	r0, sl
 800651a:	9904      	ldr	r1, [sp, #16]
 800651c:	f001 fef8 	bl	8008310 <__pow5mult>
 8006520:	9004      	str	r0, [sp, #16]
 8006522:	2800      	cmp	r0, #0
 8006524:	f43f aeaf 	beq.w	8006286 <_strtod_l+0x47e>
 8006528:	4601      	mov	r1, r0
 800652a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800652c:	4650      	mov	r0, sl
 800652e:	f001 fe47 	bl	80081c0 <__multiply>
 8006532:	9009      	str	r0, [sp, #36]	; 0x24
 8006534:	2800      	cmp	r0, #0
 8006536:	f43f aea6 	beq.w	8006286 <_strtod_l+0x47e>
 800653a:	4650      	mov	r0, sl
 800653c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800653e:	f001 fd29 	bl	8007f94 <_Bfree>
 8006542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006544:	931a      	str	r3, [sp, #104]	; 0x68
 8006546:	2f00      	cmp	r7, #0
 8006548:	f300 808e 	bgt.w	8006668 <_strtod_l+0x860>
 800654c:	9b07      	ldr	r3, [sp, #28]
 800654e:	2b00      	cmp	r3, #0
 8006550:	dd08      	ble.n	8006564 <_strtod_l+0x75c>
 8006552:	4650      	mov	r0, sl
 8006554:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006556:	9906      	ldr	r1, [sp, #24]
 8006558:	f001 feda 	bl	8008310 <__pow5mult>
 800655c:	9006      	str	r0, [sp, #24]
 800655e:	2800      	cmp	r0, #0
 8006560:	f43f ae91 	beq.w	8006286 <_strtod_l+0x47e>
 8006564:	2c00      	cmp	r4, #0
 8006566:	dd08      	ble.n	800657a <_strtod_l+0x772>
 8006568:	4622      	mov	r2, r4
 800656a:	4650      	mov	r0, sl
 800656c:	9906      	ldr	r1, [sp, #24]
 800656e:	f001 ff29 	bl	80083c4 <__lshift>
 8006572:	9006      	str	r0, [sp, #24]
 8006574:	2800      	cmp	r0, #0
 8006576:	f43f ae86 	beq.w	8006286 <_strtod_l+0x47e>
 800657a:	2e00      	cmp	r6, #0
 800657c:	dd08      	ble.n	8006590 <_strtod_l+0x788>
 800657e:	4632      	mov	r2, r6
 8006580:	4650      	mov	r0, sl
 8006582:	9904      	ldr	r1, [sp, #16]
 8006584:	f001 ff1e 	bl	80083c4 <__lshift>
 8006588:	9004      	str	r0, [sp, #16]
 800658a:	2800      	cmp	r0, #0
 800658c:	f43f ae7b 	beq.w	8006286 <_strtod_l+0x47e>
 8006590:	4650      	mov	r0, sl
 8006592:	9a06      	ldr	r2, [sp, #24]
 8006594:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006596:	f001 ffa1 	bl	80084dc <__mdiff>
 800659a:	4683      	mov	fp, r0
 800659c:	2800      	cmp	r0, #0
 800659e:	f43f ae72 	beq.w	8006286 <_strtod_l+0x47e>
 80065a2:	2400      	movs	r4, #0
 80065a4:	68c3      	ldr	r3, [r0, #12]
 80065a6:	9904      	ldr	r1, [sp, #16]
 80065a8:	60c4      	str	r4, [r0, #12]
 80065aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80065ac:	f001 ff7a 	bl	80084a4 <__mcmp>
 80065b0:	42a0      	cmp	r0, r4
 80065b2:	da6b      	bge.n	800668c <_strtod_l+0x884>
 80065b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065b6:	ea53 0308 	orrs.w	r3, r3, r8
 80065ba:	f040 8091 	bne.w	80066e0 <_strtod_l+0x8d8>
 80065be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f040 808c 	bne.w	80066e0 <_strtod_l+0x8d8>
 80065c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065cc:	0d1b      	lsrs	r3, r3, #20
 80065ce:	051b      	lsls	r3, r3, #20
 80065d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80065d4:	f240 8084 	bls.w	80066e0 <_strtod_l+0x8d8>
 80065d8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80065dc:	b91b      	cbnz	r3, 80065e6 <_strtod_l+0x7de>
 80065de:	f8db 3010 	ldr.w	r3, [fp, #16]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	dd7c      	ble.n	80066e0 <_strtod_l+0x8d8>
 80065e6:	4659      	mov	r1, fp
 80065e8:	2201      	movs	r2, #1
 80065ea:	4650      	mov	r0, sl
 80065ec:	f001 feea 	bl	80083c4 <__lshift>
 80065f0:	9904      	ldr	r1, [sp, #16]
 80065f2:	4683      	mov	fp, r0
 80065f4:	f001 ff56 	bl	80084a4 <__mcmp>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	dd71      	ble.n	80066e0 <_strtod_l+0x8d8>
 80065fc:	9905      	ldr	r1, [sp, #20]
 80065fe:	464b      	mov	r3, r9
 8006600:	4a20      	ldr	r2, [pc, #128]	; (8006684 <_strtod_l+0x87c>)
 8006602:	2900      	cmp	r1, #0
 8006604:	f000 808c 	beq.w	8006720 <_strtod_l+0x918>
 8006608:	ea02 0109 	and.w	r1, r2, r9
 800660c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006610:	f300 8086 	bgt.w	8006720 <_strtod_l+0x918>
 8006614:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006618:	f77f aeaa 	ble.w	8006370 <_strtod_l+0x568>
 800661c:	4640      	mov	r0, r8
 800661e:	4649      	mov	r1, r9
 8006620:	4b19      	ldr	r3, [pc, #100]	; (8006688 <_strtod_l+0x880>)
 8006622:	2200      	movs	r2, #0
 8006624:	f7f9 ff70 	bl	8000508 <__aeabi_dmul>
 8006628:	460b      	mov	r3, r1
 800662a:	4303      	orrs	r3, r0
 800662c:	bf08      	it	eq
 800662e:	2322      	moveq	r3, #34	; 0x22
 8006630:	4680      	mov	r8, r0
 8006632:	4689      	mov	r9, r1
 8006634:	bf08      	it	eq
 8006636:	f8ca 3000 	streq.w	r3, [sl]
 800663a:	e62f      	b.n	800629c <_strtod_l+0x494>
 800663c:	f04f 32ff 	mov.w	r2, #4294967295
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	ea03 0808 	and.w	r8, r3, r8
 8006648:	e6e0      	b.n	800640c <_strtod_l+0x604>
 800664a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800664e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006652:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006656:	35e2      	adds	r5, #226	; 0xe2
 8006658:	fa07 f505 	lsl.w	r5, r7, r5
 800665c:	970f      	str	r7, [sp, #60]	; 0x3c
 800665e:	e747      	b.n	80064f0 <_strtod_l+0x6e8>
 8006660:	2301      	movs	r3, #1
 8006662:	2500      	movs	r5, #0
 8006664:	930f      	str	r3, [sp, #60]	; 0x3c
 8006666:	e743      	b.n	80064f0 <_strtod_l+0x6e8>
 8006668:	463a      	mov	r2, r7
 800666a:	4650      	mov	r0, sl
 800666c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800666e:	f001 fea9 	bl	80083c4 <__lshift>
 8006672:	901a      	str	r0, [sp, #104]	; 0x68
 8006674:	2800      	cmp	r0, #0
 8006676:	f47f af69 	bne.w	800654c <_strtod_l+0x744>
 800667a:	e604      	b.n	8006286 <_strtod_l+0x47e>
 800667c:	080099f0 	.word	0x080099f0
 8006680:	fffffc02 	.word	0xfffffc02
 8006684:	7ff00000 	.word	0x7ff00000
 8006688:	39500000 	.word	0x39500000
 800668c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006690:	d165      	bne.n	800675e <_strtod_l+0x956>
 8006692:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006698:	b35a      	cbz	r2, 80066f2 <_strtod_l+0x8ea>
 800669a:	4a99      	ldr	r2, [pc, #612]	; (8006900 <_strtod_l+0xaf8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d12b      	bne.n	80066f8 <_strtod_l+0x8f0>
 80066a0:	9b05      	ldr	r3, [sp, #20]
 80066a2:	4641      	mov	r1, r8
 80066a4:	b303      	cbz	r3, 80066e8 <_strtod_l+0x8e0>
 80066a6:	464a      	mov	r2, r9
 80066a8:	4b96      	ldr	r3, [pc, #600]	; (8006904 <_strtod_l+0xafc>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80066b0:	f04f 32ff 	mov.w	r2, #4294967295
 80066b4:	d81b      	bhi.n	80066ee <_strtod_l+0x8e6>
 80066b6:	0d1b      	lsrs	r3, r3, #20
 80066b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80066bc:	fa02 f303 	lsl.w	r3, r2, r3
 80066c0:	4299      	cmp	r1, r3
 80066c2:	d119      	bne.n	80066f8 <_strtod_l+0x8f0>
 80066c4:	4b90      	ldr	r3, [pc, #576]	; (8006908 <_strtod_l+0xb00>)
 80066c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d102      	bne.n	80066d2 <_strtod_l+0x8ca>
 80066cc:	3101      	adds	r1, #1
 80066ce:	f43f adda 	beq.w	8006286 <_strtod_l+0x47e>
 80066d2:	f04f 0800 	mov.w	r8, #0
 80066d6:	4b8b      	ldr	r3, [pc, #556]	; (8006904 <_strtod_l+0xafc>)
 80066d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066da:	401a      	ands	r2, r3
 80066dc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80066e0:	9b05      	ldr	r3, [sp, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d19a      	bne.n	800661c <_strtod_l+0x814>
 80066e6:	e5d9      	b.n	800629c <_strtod_l+0x494>
 80066e8:	f04f 33ff 	mov.w	r3, #4294967295
 80066ec:	e7e8      	b.n	80066c0 <_strtod_l+0x8b8>
 80066ee:	4613      	mov	r3, r2
 80066f0:	e7e6      	b.n	80066c0 <_strtod_l+0x8b8>
 80066f2:	ea53 0308 	orrs.w	r3, r3, r8
 80066f6:	d081      	beq.n	80065fc <_strtod_l+0x7f4>
 80066f8:	b1e5      	cbz	r5, 8006734 <_strtod_l+0x92c>
 80066fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066fc:	421d      	tst	r5, r3
 80066fe:	d0ef      	beq.n	80066e0 <_strtod_l+0x8d8>
 8006700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006702:	4640      	mov	r0, r8
 8006704:	4649      	mov	r1, r9
 8006706:	9a05      	ldr	r2, [sp, #20]
 8006708:	b1c3      	cbz	r3, 800673c <_strtod_l+0x934>
 800670a:	f7ff fb5b 	bl	8005dc4 <sulp>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006716:	f7f9 fd41 	bl	800019c <__adddf3>
 800671a:	4680      	mov	r8, r0
 800671c:	4689      	mov	r9, r1
 800671e:	e7df      	b.n	80066e0 <_strtod_l+0x8d8>
 8006720:	4013      	ands	r3, r2
 8006722:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006726:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800672a:	f04f 38ff 	mov.w	r8, #4294967295
 800672e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006732:	e7d5      	b.n	80066e0 <_strtod_l+0x8d8>
 8006734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006736:	ea13 0f08 	tst.w	r3, r8
 800673a:	e7e0      	b.n	80066fe <_strtod_l+0x8f6>
 800673c:	f7ff fb42 	bl	8005dc4 <sulp>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006748:	f7f9 fd26 	bl	8000198 <__aeabi_dsub>
 800674c:	2200      	movs	r2, #0
 800674e:	2300      	movs	r3, #0
 8006750:	4680      	mov	r8, r0
 8006752:	4689      	mov	r9, r1
 8006754:	f7fa f940 	bl	80009d8 <__aeabi_dcmpeq>
 8006758:	2800      	cmp	r0, #0
 800675a:	d0c1      	beq.n	80066e0 <_strtod_l+0x8d8>
 800675c:	e608      	b.n	8006370 <_strtod_l+0x568>
 800675e:	4658      	mov	r0, fp
 8006760:	9904      	ldr	r1, [sp, #16]
 8006762:	f002 f81d 	bl	80087a0 <__ratio>
 8006766:	2200      	movs	r2, #0
 8006768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800676c:	4606      	mov	r6, r0
 800676e:	460f      	mov	r7, r1
 8006770:	f7fa f946 	bl	8000a00 <__aeabi_dcmple>
 8006774:	2800      	cmp	r0, #0
 8006776:	d070      	beq.n	800685a <_strtod_l+0xa52>
 8006778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d042      	beq.n	8006804 <_strtod_l+0x9fc>
 800677e:	2600      	movs	r6, #0
 8006780:	4f62      	ldr	r7, [pc, #392]	; (800690c <_strtod_l+0xb04>)
 8006782:	4d62      	ldr	r5, [pc, #392]	; (800690c <_strtod_l+0xb04>)
 8006784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800678a:	0d1b      	lsrs	r3, r3, #20
 800678c:	051b      	lsls	r3, r3, #20
 800678e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006792:	4b5f      	ldr	r3, [pc, #380]	; (8006910 <_strtod_l+0xb08>)
 8006794:	429a      	cmp	r2, r3
 8006796:	f040 80c3 	bne.w	8006920 <_strtod_l+0xb18>
 800679a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679c:	4640      	mov	r0, r8
 800679e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80067a2:	4649      	mov	r1, r9
 80067a4:	f001 ff26 	bl	80085f4 <__ulp>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4630      	mov	r0, r6
 80067ae:	4639      	mov	r1, r7
 80067b0:	f7f9 feaa 	bl	8000508 <__aeabi_dmul>
 80067b4:	4642      	mov	r2, r8
 80067b6:	464b      	mov	r3, r9
 80067b8:	f7f9 fcf0 	bl	800019c <__adddf3>
 80067bc:	460b      	mov	r3, r1
 80067be:	4951      	ldr	r1, [pc, #324]	; (8006904 <_strtod_l+0xafc>)
 80067c0:	4a54      	ldr	r2, [pc, #336]	; (8006914 <_strtod_l+0xb0c>)
 80067c2:	4019      	ands	r1, r3
 80067c4:	4291      	cmp	r1, r2
 80067c6:	4680      	mov	r8, r0
 80067c8:	d95d      	bls.n	8006886 <_strtod_l+0xa7e>
 80067ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067cc:	4b4e      	ldr	r3, [pc, #312]	; (8006908 <_strtod_l+0xb00>)
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d103      	bne.n	80067da <_strtod_l+0x9d2>
 80067d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067d4:	3301      	adds	r3, #1
 80067d6:	f43f ad56 	beq.w	8006286 <_strtod_l+0x47e>
 80067da:	f04f 38ff 	mov.w	r8, #4294967295
 80067de:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006908 <_strtod_l+0xb00>
 80067e2:	4650      	mov	r0, sl
 80067e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80067e6:	f001 fbd5 	bl	8007f94 <_Bfree>
 80067ea:	4650      	mov	r0, sl
 80067ec:	9906      	ldr	r1, [sp, #24]
 80067ee:	f001 fbd1 	bl	8007f94 <_Bfree>
 80067f2:	4650      	mov	r0, sl
 80067f4:	9904      	ldr	r1, [sp, #16]
 80067f6:	f001 fbcd 	bl	8007f94 <_Bfree>
 80067fa:	4659      	mov	r1, fp
 80067fc:	4650      	mov	r0, sl
 80067fe:	f001 fbc9 	bl	8007f94 <_Bfree>
 8006802:	e627      	b.n	8006454 <_strtod_l+0x64c>
 8006804:	f1b8 0f00 	cmp.w	r8, #0
 8006808:	d119      	bne.n	800683e <_strtod_l+0xa36>
 800680a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006810:	b9e3      	cbnz	r3, 800684c <_strtod_l+0xa44>
 8006812:	2200      	movs	r2, #0
 8006814:	4630      	mov	r0, r6
 8006816:	4639      	mov	r1, r7
 8006818:	4b3c      	ldr	r3, [pc, #240]	; (800690c <_strtod_l+0xb04>)
 800681a:	f7fa f8e7 	bl	80009ec <__aeabi_dcmplt>
 800681e:	b9c8      	cbnz	r0, 8006854 <_strtod_l+0xa4c>
 8006820:	2200      	movs	r2, #0
 8006822:	4630      	mov	r0, r6
 8006824:	4639      	mov	r1, r7
 8006826:	4b3c      	ldr	r3, [pc, #240]	; (8006918 <_strtod_l+0xb10>)
 8006828:	f7f9 fe6e 	bl	8000508 <__aeabi_dmul>
 800682c:	4604      	mov	r4, r0
 800682e:	460d      	mov	r5, r1
 8006830:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006834:	9416      	str	r4, [sp, #88]	; 0x58
 8006836:	9317      	str	r3, [sp, #92]	; 0x5c
 8006838:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800683c:	e7a2      	b.n	8006784 <_strtod_l+0x97c>
 800683e:	f1b8 0f01 	cmp.w	r8, #1
 8006842:	d103      	bne.n	800684c <_strtod_l+0xa44>
 8006844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006846:	2b00      	cmp	r3, #0
 8006848:	f43f ad92 	beq.w	8006370 <_strtod_l+0x568>
 800684c:	2600      	movs	r6, #0
 800684e:	2400      	movs	r4, #0
 8006850:	4f32      	ldr	r7, [pc, #200]	; (800691c <_strtod_l+0xb14>)
 8006852:	e796      	b.n	8006782 <_strtod_l+0x97a>
 8006854:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006856:	4d30      	ldr	r5, [pc, #192]	; (8006918 <_strtod_l+0xb10>)
 8006858:	e7ea      	b.n	8006830 <_strtod_l+0xa28>
 800685a:	4b2f      	ldr	r3, [pc, #188]	; (8006918 <_strtod_l+0xb10>)
 800685c:	2200      	movs	r2, #0
 800685e:	4630      	mov	r0, r6
 8006860:	4639      	mov	r1, r7
 8006862:	f7f9 fe51 	bl	8000508 <__aeabi_dmul>
 8006866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006868:	4604      	mov	r4, r0
 800686a:	460d      	mov	r5, r1
 800686c:	b933      	cbnz	r3, 800687c <_strtod_l+0xa74>
 800686e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006872:	9010      	str	r0, [sp, #64]	; 0x40
 8006874:	9311      	str	r3, [sp, #68]	; 0x44
 8006876:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800687a:	e783      	b.n	8006784 <_strtod_l+0x97c>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006884:	e7f7      	b.n	8006876 <_strtod_l+0xa6e>
 8006886:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800688a:	9b05      	ldr	r3, [sp, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1a8      	bne.n	80067e2 <_strtod_l+0x9da>
 8006890:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006894:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006896:	0d1b      	lsrs	r3, r3, #20
 8006898:	051b      	lsls	r3, r3, #20
 800689a:	429a      	cmp	r2, r3
 800689c:	d1a1      	bne.n	80067e2 <_strtod_l+0x9da>
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7fa fbef 	bl	8001084 <__aeabi_d2lz>
 80068a6:	f7f9 fe01 	bl	80004ac <__aeabi_l2d>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4620      	mov	r0, r4
 80068b0:	4629      	mov	r1, r5
 80068b2:	f7f9 fc71 	bl	8000198 <__aeabi_dsub>
 80068b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068bc:	ea43 0308 	orr.w	r3, r3, r8
 80068c0:	4313      	orrs	r3, r2
 80068c2:	4604      	mov	r4, r0
 80068c4:	460d      	mov	r5, r1
 80068c6:	d066      	beq.n	8006996 <_strtod_l+0xb8e>
 80068c8:	a309      	add	r3, pc, #36	; (adr r3, 80068f0 <_strtod_l+0xae8>)
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	f7fa f88d 	bl	80009ec <__aeabi_dcmplt>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	f47f ace2 	bne.w	800629c <_strtod_l+0x494>
 80068d8:	a307      	add	r3, pc, #28	; (adr r3, 80068f8 <_strtod_l+0xaf0>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	4620      	mov	r0, r4
 80068e0:	4629      	mov	r1, r5
 80068e2:	f7fa f8a1 	bl	8000a28 <__aeabi_dcmpgt>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f43f af7b 	beq.w	80067e2 <_strtod_l+0x9da>
 80068ec:	e4d6      	b.n	800629c <_strtod_l+0x494>
 80068ee:	bf00      	nop
 80068f0:	94a03595 	.word	0x94a03595
 80068f4:	3fdfffff 	.word	0x3fdfffff
 80068f8:	35afe535 	.word	0x35afe535
 80068fc:	3fe00000 	.word	0x3fe00000
 8006900:	000fffff 	.word	0x000fffff
 8006904:	7ff00000 	.word	0x7ff00000
 8006908:	7fefffff 	.word	0x7fefffff
 800690c:	3ff00000 	.word	0x3ff00000
 8006910:	7fe00000 	.word	0x7fe00000
 8006914:	7c9fffff 	.word	0x7c9fffff
 8006918:	3fe00000 	.word	0x3fe00000
 800691c:	bff00000 	.word	0xbff00000
 8006920:	9b05      	ldr	r3, [sp, #20]
 8006922:	b313      	cbz	r3, 800696a <_strtod_l+0xb62>
 8006924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006926:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800692a:	d81e      	bhi.n	800696a <_strtod_l+0xb62>
 800692c:	a326      	add	r3, pc, #152	; (adr r3, 80069c8 <_strtod_l+0xbc0>)
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	4620      	mov	r0, r4
 8006934:	4629      	mov	r1, r5
 8006936:	f7fa f863 	bl	8000a00 <__aeabi_dcmple>
 800693a:	b190      	cbz	r0, 8006962 <_strtod_l+0xb5a>
 800693c:	4629      	mov	r1, r5
 800693e:	4620      	mov	r0, r4
 8006940:	f7fa f8ba 	bl	8000ab8 <__aeabi_d2uiz>
 8006944:	2801      	cmp	r0, #1
 8006946:	bf38      	it	cc
 8006948:	2001      	movcc	r0, #1
 800694a:	f7f9 fd63 	bl	8000414 <__aeabi_ui2d>
 800694e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006950:	4604      	mov	r4, r0
 8006952:	460d      	mov	r5, r1
 8006954:	b9d3      	cbnz	r3, 800698c <_strtod_l+0xb84>
 8006956:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800695a:	9012      	str	r0, [sp, #72]	; 0x48
 800695c:	9313      	str	r3, [sp, #76]	; 0x4c
 800695e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006962:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006964:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006968:	1a9f      	subs	r7, r3, r2
 800696a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800696e:	f001 fe41 	bl	80085f4 <__ulp>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4630      	mov	r0, r6
 8006978:	4639      	mov	r1, r7
 800697a:	f7f9 fdc5 	bl	8000508 <__aeabi_dmul>
 800697e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006982:	f7f9 fc0b 	bl	800019c <__adddf3>
 8006986:	4680      	mov	r8, r0
 8006988:	4689      	mov	r9, r1
 800698a:	e77e      	b.n	800688a <_strtod_l+0xa82>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006994:	e7e3      	b.n	800695e <_strtod_l+0xb56>
 8006996:	a30e      	add	r3, pc, #56	; (adr r3, 80069d0 <_strtod_l+0xbc8>)
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	f7fa f826 	bl	80009ec <__aeabi_dcmplt>
 80069a0:	e7a1      	b.n	80068e6 <_strtod_l+0xade>
 80069a2:	2300      	movs	r3, #0
 80069a4:	930a      	str	r3, [sp, #40]	; 0x28
 80069a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	f7ff ba71 	b.w	8005e92 <_strtod_l+0x8a>
 80069b0:	2a65      	cmp	r2, #101	; 0x65
 80069b2:	f43f ab63 	beq.w	800607c <_strtod_l+0x274>
 80069b6:	2a45      	cmp	r2, #69	; 0x45
 80069b8:	f43f ab60 	beq.w	800607c <_strtod_l+0x274>
 80069bc:	2301      	movs	r3, #1
 80069be:	f7ff bb95 	b.w	80060ec <_strtod_l+0x2e4>
 80069c2:	bf00      	nop
 80069c4:	f3af 8000 	nop.w
 80069c8:	ffc00000 	.word	0xffc00000
 80069cc:	41dfffff 	.word	0x41dfffff
 80069d0:	94a03595 	.word	0x94a03595
 80069d4:	3fcfffff 	.word	0x3fcfffff

080069d8 <_strtod_r>:
 80069d8:	4b01      	ldr	r3, [pc, #4]	; (80069e0 <_strtod_r+0x8>)
 80069da:	f7ff ba15 	b.w	8005e08 <_strtod_l>
 80069de:	bf00      	nop
 80069e0:	20000074 	.word	0x20000074

080069e4 <_strtol_l.constprop.0>:
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069ea:	4680      	mov	r8, r0
 80069ec:	d001      	beq.n	80069f2 <_strtol_l.constprop.0+0xe>
 80069ee:	2b24      	cmp	r3, #36	; 0x24
 80069f0:	d906      	bls.n	8006a00 <_strtol_l.constprop.0+0x1c>
 80069f2:	f7fe fb23 	bl	800503c <__errno>
 80069f6:	2316      	movs	r3, #22
 80069f8:	6003      	str	r3, [r0, #0]
 80069fa:	2000      	movs	r0, #0
 80069fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a00:	460d      	mov	r5, r1
 8006a02:	4f35      	ldr	r7, [pc, #212]	; (8006ad8 <_strtol_l.constprop.0+0xf4>)
 8006a04:	4628      	mov	r0, r5
 8006a06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a0a:	5de6      	ldrb	r6, [r4, r7]
 8006a0c:	f016 0608 	ands.w	r6, r6, #8
 8006a10:	d1f8      	bne.n	8006a04 <_strtol_l.constprop.0+0x20>
 8006a12:	2c2d      	cmp	r4, #45	; 0x2d
 8006a14:	d12f      	bne.n	8006a76 <_strtol_l.constprop.0+0x92>
 8006a16:	2601      	movs	r6, #1
 8006a18:	782c      	ldrb	r4, [r5, #0]
 8006a1a:	1c85      	adds	r5, r0, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d057      	beq.n	8006ad0 <_strtol_l.constprop.0+0xec>
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d109      	bne.n	8006a38 <_strtol_l.constprop.0+0x54>
 8006a24:	2c30      	cmp	r4, #48	; 0x30
 8006a26:	d107      	bne.n	8006a38 <_strtol_l.constprop.0+0x54>
 8006a28:	7828      	ldrb	r0, [r5, #0]
 8006a2a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006a2e:	2858      	cmp	r0, #88	; 0x58
 8006a30:	d149      	bne.n	8006ac6 <_strtol_l.constprop.0+0xe2>
 8006a32:	2310      	movs	r3, #16
 8006a34:	786c      	ldrb	r4, [r5, #1]
 8006a36:	3502      	adds	r5, #2
 8006a38:	2700      	movs	r7, #0
 8006a3a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006a3e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006a42:	fbbe f9f3 	udiv	r9, lr, r3
 8006a46:	4638      	mov	r0, r7
 8006a48:	fb03 ea19 	mls	sl, r3, r9, lr
 8006a4c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006a50:	f1bc 0f09 	cmp.w	ip, #9
 8006a54:	d814      	bhi.n	8006a80 <_strtol_l.constprop.0+0x9c>
 8006a56:	4664      	mov	r4, ip
 8006a58:	42a3      	cmp	r3, r4
 8006a5a:	dd22      	ble.n	8006aa2 <_strtol_l.constprop.0+0xbe>
 8006a5c:	2f00      	cmp	r7, #0
 8006a5e:	db1d      	blt.n	8006a9c <_strtol_l.constprop.0+0xb8>
 8006a60:	4581      	cmp	r9, r0
 8006a62:	d31b      	bcc.n	8006a9c <_strtol_l.constprop.0+0xb8>
 8006a64:	d101      	bne.n	8006a6a <_strtol_l.constprop.0+0x86>
 8006a66:	45a2      	cmp	sl, r4
 8006a68:	db18      	blt.n	8006a9c <_strtol_l.constprop.0+0xb8>
 8006a6a:	2701      	movs	r7, #1
 8006a6c:	fb00 4003 	mla	r0, r0, r3, r4
 8006a70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a74:	e7ea      	b.n	8006a4c <_strtol_l.constprop.0+0x68>
 8006a76:	2c2b      	cmp	r4, #43	; 0x2b
 8006a78:	bf04      	itt	eq
 8006a7a:	782c      	ldrbeq	r4, [r5, #0]
 8006a7c:	1c85      	addeq	r5, r0, #2
 8006a7e:	e7cd      	b.n	8006a1c <_strtol_l.constprop.0+0x38>
 8006a80:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006a84:	f1bc 0f19 	cmp.w	ip, #25
 8006a88:	d801      	bhi.n	8006a8e <_strtol_l.constprop.0+0xaa>
 8006a8a:	3c37      	subs	r4, #55	; 0x37
 8006a8c:	e7e4      	b.n	8006a58 <_strtol_l.constprop.0+0x74>
 8006a8e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006a92:	f1bc 0f19 	cmp.w	ip, #25
 8006a96:	d804      	bhi.n	8006aa2 <_strtol_l.constprop.0+0xbe>
 8006a98:	3c57      	subs	r4, #87	; 0x57
 8006a9a:	e7dd      	b.n	8006a58 <_strtol_l.constprop.0+0x74>
 8006a9c:	f04f 37ff 	mov.w	r7, #4294967295
 8006aa0:	e7e6      	b.n	8006a70 <_strtol_l.constprop.0+0x8c>
 8006aa2:	2f00      	cmp	r7, #0
 8006aa4:	da07      	bge.n	8006ab6 <_strtol_l.constprop.0+0xd2>
 8006aa6:	2322      	movs	r3, #34	; 0x22
 8006aa8:	4670      	mov	r0, lr
 8006aaa:	f8c8 3000 	str.w	r3, [r8]
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	d0a4      	beq.n	80069fc <_strtol_l.constprop.0+0x18>
 8006ab2:	1e69      	subs	r1, r5, #1
 8006ab4:	e005      	b.n	8006ac2 <_strtol_l.constprop.0+0xde>
 8006ab6:	b106      	cbz	r6, 8006aba <_strtol_l.constprop.0+0xd6>
 8006ab8:	4240      	negs	r0, r0
 8006aba:	2a00      	cmp	r2, #0
 8006abc:	d09e      	beq.n	80069fc <_strtol_l.constprop.0+0x18>
 8006abe:	2f00      	cmp	r7, #0
 8006ac0:	d1f7      	bne.n	8006ab2 <_strtol_l.constprop.0+0xce>
 8006ac2:	6011      	str	r1, [r2, #0]
 8006ac4:	e79a      	b.n	80069fc <_strtol_l.constprop.0+0x18>
 8006ac6:	2430      	movs	r4, #48	; 0x30
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1b5      	bne.n	8006a38 <_strtol_l.constprop.0+0x54>
 8006acc:	2308      	movs	r3, #8
 8006ace:	e7b3      	b.n	8006a38 <_strtol_l.constprop.0+0x54>
 8006ad0:	2c30      	cmp	r4, #48	; 0x30
 8006ad2:	d0a9      	beq.n	8006a28 <_strtol_l.constprop.0+0x44>
 8006ad4:	230a      	movs	r3, #10
 8006ad6:	e7af      	b.n	8006a38 <_strtol_l.constprop.0+0x54>
 8006ad8:	08009a19 	.word	0x08009a19

08006adc <_strtol_r>:
 8006adc:	f7ff bf82 	b.w	80069e4 <_strtol_l.constprop.0>

08006ae0 <quorem>:
 8006ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	6903      	ldr	r3, [r0, #16]
 8006ae6:	690c      	ldr	r4, [r1, #16]
 8006ae8:	4607      	mov	r7, r0
 8006aea:	42a3      	cmp	r3, r4
 8006aec:	f2c0 8082 	blt.w	8006bf4 <quorem+0x114>
 8006af0:	3c01      	subs	r4, #1
 8006af2:	f100 0514 	add.w	r5, r0, #20
 8006af6:	f101 0814 	add.w	r8, r1, #20
 8006afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b18:	d331      	bcc.n	8006b7e <quorem+0x9e>
 8006b1a:	f04f 0e00 	mov.w	lr, #0
 8006b1e:	4640      	mov	r0, r8
 8006b20:	46ac      	mov	ip, r5
 8006b22:	46f2      	mov	sl, lr
 8006b24:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b28:	b293      	uxth	r3, r2
 8006b2a:	fb06 e303 	mla	r3, r6, r3, lr
 8006b2e:	0c12      	lsrs	r2, r2, #16
 8006b30:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	fb06 e202 	mla	r2, r6, r2, lr
 8006b3a:	ebaa 0303 	sub.w	r3, sl, r3
 8006b3e:	f8dc a000 	ldr.w	sl, [ip]
 8006b42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b46:	fa1f fa8a 	uxth.w	sl, sl
 8006b4a:	4453      	add	r3, sl
 8006b4c:	f8dc a000 	ldr.w	sl, [ip]
 8006b50:	b292      	uxth	r2, r2
 8006b52:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b60:	4581      	cmp	r9, r0
 8006b62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b66:	f84c 3b04 	str.w	r3, [ip], #4
 8006b6a:	d2db      	bcs.n	8006b24 <quorem+0x44>
 8006b6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b70:	b92b      	cbnz	r3, 8006b7e <quorem+0x9e>
 8006b72:	9b01      	ldr	r3, [sp, #4]
 8006b74:	3b04      	subs	r3, #4
 8006b76:	429d      	cmp	r5, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	d32f      	bcc.n	8006bdc <quorem+0xfc>
 8006b7c:	613c      	str	r4, [r7, #16]
 8006b7e:	4638      	mov	r0, r7
 8006b80:	f001 fc90 	bl	80084a4 <__mcmp>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	db25      	blt.n	8006bd4 <quorem+0xf4>
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f04f 0c00 	mov.w	ip, #0
 8006b8e:	3601      	adds	r6, #1
 8006b90:	f858 1b04 	ldr.w	r1, [r8], #4
 8006b94:	f8d0 e000 	ldr.w	lr, [r0]
 8006b98:	b28b      	uxth	r3, r1
 8006b9a:	ebac 0303 	sub.w	r3, ip, r3
 8006b9e:	fa1f f28e 	uxth.w	r2, lr
 8006ba2:	4413      	add	r3, r2
 8006ba4:	0c0a      	lsrs	r2, r1, #16
 8006ba6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006baa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bb4:	45c1      	cmp	r9, r8
 8006bb6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006bba:	f840 3b04 	str.w	r3, [r0], #4
 8006bbe:	d2e7      	bcs.n	8006b90 <quorem+0xb0>
 8006bc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bc8:	b922      	cbnz	r2, 8006bd4 <quorem+0xf4>
 8006bca:	3b04      	subs	r3, #4
 8006bcc:	429d      	cmp	r5, r3
 8006bce:	461a      	mov	r2, r3
 8006bd0:	d30a      	bcc.n	8006be8 <quorem+0x108>
 8006bd2:	613c      	str	r4, [r7, #16]
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	b003      	add	sp, #12
 8006bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bdc:	6812      	ldr	r2, [r2, #0]
 8006bde:	3b04      	subs	r3, #4
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	d1cb      	bne.n	8006b7c <quorem+0x9c>
 8006be4:	3c01      	subs	r4, #1
 8006be6:	e7c6      	b.n	8006b76 <quorem+0x96>
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	3b04      	subs	r3, #4
 8006bec:	2a00      	cmp	r2, #0
 8006bee:	d1f0      	bne.n	8006bd2 <quorem+0xf2>
 8006bf0:	3c01      	subs	r4, #1
 8006bf2:	e7eb      	b.n	8006bcc <quorem+0xec>
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	e7ee      	b.n	8006bd6 <quorem+0xf6>

08006bf8 <_dtoa_r>:
 8006bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	4616      	mov	r6, r2
 8006bfe:	461f      	mov	r7, r3
 8006c00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006c02:	b099      	sub	sp, #100	; 0x64
 8006c04:	4605      	mov	r5, r0
 8006c06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c0a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006c0e:	b974      	cbnz	r4, 8006c2e <_dtoa_r+0x36>
 8006c10:	2010      	movs	r0, #16
 8006c12:	f001 f949 	bl	8007ea8 <malloc>
 8006c16:	4602      	mov	r2, r0
 8006c18:	6268      	str	r0, [r5, #36]	; 0x24
 8006c1a:	b920      	cbnz	r0, 8006c26 <_dtoa_r+0x2e>
 8006c1c:	21ea      	movs	r1, #234	; 0xea
 8006c1e:	4ba8      	ldr	r3, [pc, #672]	; (8006ec0 <_dtoa_r+0x2c8>)
 8006c20:	48a8      	ldr	r0, [pc, #672]	; (8006ec4 <_dtoa_r+0x2cc>)
 8006c22:	f002 f8b3 	bl	8008d8c <__assert_func>
 8006c26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c2a:	6004      	str	r4, [r0, #0]
 8006c2c:	60c4      	str	r4, [r0, #12]
 8006c2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c30:	6819      	ldr	r1, [r3, #0]
 8006c32:	b151      	cbz	r1, 8006c4a <_dtoa_r+0x52>
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	2301      	movs	r3, #1
 8006c38:	4093      	lsls	r3, r2
 8006c3a:	604a      	str	r2, [r1, #4]
 8006c3c:	608b      	str	r3, [r1, #8]
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f001 f9a8 	bl	8007f94 <_Bfree>
 8006c44:	2200      	movs	r2, #0
 8006c46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	1e3b      	subs	r3, r7, #0
 8006c4c:	bfaf      	iteee	ge
 8006c4e:	2300      	movge	r3, #0
 8006c50:	2201      	movlt	r2, #1
 8006c52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c56:	9305      	strlt	r3, [sp, #20]
 8006c58:	bfa8      	it	ge
 8006c5a:	f8c8 3000 	strge.w	r3, [r8]
 8006c5e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006c62:	4b99      	ldr	r3, [pc, #612]	; (8006ec8 <_dtoa_r+0x2d0>)
 8006c64:	bfb8      	it	lt
 8006c66:	f8c8 2000 	strlt.w	r2, [r8]
 8006c6a:	ea33 0309 	bics.w	r3, r3, r9
 8006c6e:	d119      	bne.n	8006ca4 <_dtoa_r+0xac>
 8006c70:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c7c:	4333      	orrs	r3, r6
 8006c7e:	f000 857f 	beq.w	8007780 <_dtoa_r+0xb88>
 8006c82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c84:	b953      	cbnz	r3, 8006c9c <_dtoa_r+0xa4>
 8006c86:	4b91      	ldr	r3, [pc, #580]	; (8006ecc <_dtoa_r+0x2d4>)
 8006c88:	e022      	b.n	8006cd0 <_dtoa_r+0xd8>
 8006c8a:	4b91      	ldr	r3, [pc, #580]	; (8006ed0 <_dtoa_r+0x2d8>)
 8006c8c:	9303      	str	r3, [sp, #12]
 8006c8e:	3308      	adds	r3, #8
 8006c90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	9803      	ldr	r0, [sp, #12]
 8006c96:	b019      	add	sp, #100	; 0x64
 8006c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9c:	4b8b      	ldr	r3, [pc, #556]	; (8006ecc <_dtoa_r+0x2d4>)
 8006c9e:	9303      	str	r3, [sp, #12]
 8006ca0:	3303      	adds	r3, #3
 8006ca2:	e7f5      	b.n	8006c90 <_dtoa_r+0x98>
 8006ca4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ca8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006cac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f7f9 fe90 	bl	80009d8 <__aeabi_dcmpeq>
 8006cb8:	4680      	mov	r8, r0
 8006cba:	b158      	cbz	r0, 8006cd4 <_dtoa_r+0xdc>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8558 	beq.w	800777a <_dtoa_r+0xb82>
 8006cca:	4882      	ldr	r0, [pc, #520]	; (8006ed4 <_dtoa_r+0x2dc>)
 8006ccc:	6018      	str	r0, [r3, #0]
 8006cce:	1e43      	subs	r3, r0, #1
 8006cd0:	9303      	str	r3, [sp, #12]
 8006cd2:	e7df      	b.n	8006c94 <_dtoa_r+0x9c>
 8006cd4:	ab16      	add	r3, sp, #88	; 0x58
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	ab17      	add	r3, sp, #92	; 0x5c
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	4628      	mov	r0, r5
 8006cde:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006ce2:	f001 fd01 	bl	80086e8 <__d2b>
 8006ce6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006cea:	4683      	mov	fp, r0
 8006cec:	2c00      	cmp	r4, #0
 8006cee:	d07f      	beq.n	8006df0 <_dtoa_r+0x1f8>
 8006cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cf6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006cfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cfe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006d02:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006d06:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4b72      	ldr	r3, [pc, #456]	; (8006ed8 <_dtoa_r+0x2e0>)
 8006d0e:	f7f9 fa43 	bl	8000198 <__aeabi_dsub>
 8006d12:	a365      	add	r3, pc, #404	; (adr r3, 8006ea8 <_dtoa_r+0x2b0>)
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f7f9 fbf6 	bl	8000508 <__aeabi_dmul>
 8006d1c:	a364      	add	r3, pc, #400	; (adr r3, 8006eb0 <_dtoa_r+0x2b8>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f7f9 fa3b 	bl	800019c <__adddf3>
 8006d26:	4606      	mov	r6, r0
 8006d28:	4620      	mov	r0, r4
 8006d2a:	460f      	mov	r7, r1
 8006d2c:	f7f9 fb82 	bl	8000434 <__aeabi_i2d>
 8006d30:	a361      	add	r3, pc, #388	; (adr r3, 8006eb8 <_dtoa_r+0x2c0>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 fbe7 	bl	8000508 <__aeabi_dmul>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4630      	mov	r0, r6
 8006d40:	4639      	mov	r1, r7
 8006d42:	f7f9 fa2b 	bl	800019c <__adddf3>
 8006d46:	4606      	mov	r6, r0
 8006d48:	460f      	mov	r7, r1
 8006d4a:	f7f9 fe8d 	bl	8000a68 <__aeabi_d2iz>
 8006d4e:	2200      	movs	r2, #0
 8006d50:	4682      	mov	sl, r0
 8006d52:	2300      	movs	r3, #0
 8006d54:	4630      	mov	r0, r6
 8006d56:	4639      	mov	r1, r7
 8006d58:	f7f9 fe48 	bl	80009ec <__aeabi_dcmplt>
 8006d5c:	b148      	cbz	r0, 8006d72 <_dtoa_r+0x17a>
 8006d5e:	4650      	mov	r0, sl
 8006d60:	f7f9 fb68 	bl	8000434 <__aeabi_i2d>
 8006d64:	4632      	mov	r2, r6
 8006d66:	463b      	mov	r3, r7
 8006d68:	f7f9 fe36 	bl	80009d8 <__aeabi_dcmpeq>
 8006d6c:	b908      	cbnz	r0, 8006d72 <_dtoa_r+0x17a>
 8006d6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d72:	f1ba 0f16 	cmp.w	sl, #22
 8006d76:	d858      	bhi.n	8006e2a <_dtoa_r+0x232>
 8006d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d7c:	4b57      	ldr	r3, [pc, #348]	; (8006edc <_dtoa_r+0x2e4>)
 8006d7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	f7f9 fe31 	bl	80009ec <__aeabi_dcmplt>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d04f      	beq.n	8006e2e <_dtoa_r+0x236>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d94:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d98:	1b1c      	subs	r4, r3, r4
 8006d9a:	1e63      	subs	r3, r4, #1
 8006d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d9e:	bf49      	itett	mi
 8006da0:	f1c4 0301 	rsbmi	r3, r4, #1
 8006da4:	2300      	movpl	r3, #0
 8006da6:	9306      	strmi	r3, [sp, #24]
 8006da8:	2300      	movmi	r3, #0
 8006daa:	bf54      	ite	pl
 8006dac:	9306      	strpl	r3, [sp, #24]
 8006dae:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006db0:	f1ba 0f00 	cmp.w	sl, #0
 8006db4:	db3d      	blt.n	8006e32 <_dtoa_r+0x23a>
 8006db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006dbc:	4453      	add	r3, sl
 8006dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8006dc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dc6:	2b09      	cmp	r3, #9
 8006dc8:	f200 808c 	bhi.w	8006ee4 <_dtoa_r+0x2ec>
 8006dcc:	2b05      	cmp	r3, #5
 8006dce:	bfc4      	itt	gt
 8006dd0:	3b04      	subgt	r3, #4
 8006dd2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dd6:	bfc8      	it	gt
 8006dd8:	2400      	movgt	r4, #0
 8006dda:	f1a3 0302 	sub.w	r3, r3, #2
 8006dde:	bfd8      	it	le
 8006de0:	2401      	movle	r4, #1
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	f200 808a 	bhi.w	8006efc <_dtoa_r+0x304>
 8006de8:	e8df f003 	tbb	[pc, r3]
 8006dec:	5b4d4f2d 	.word	0x5b4d4f2d
 8006df0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006df4:	441c      	add	r4, r3
 8006df6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	bfc3      	ittte	gt
 8006dfe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e02:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006e06:	fa09 f303 	lslgt.w	r3, r9, r3
 8006e0a:	f1c3 0320 	rsble	r3, r3, #32
 8006e0e:	bfc6      	itte	gt
 8006e10:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006e14:	4318      	orrgt	r0, r3
 8006e16:	fa06 f003 	lslle.w	r0, r6, r3
 8006e1a:	f7f9 fafb 	bl	8000414 <__aeabi_ui2d>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006e24:	3c01      	subs	r4, #1
 8006e26:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e28:	e76f      	b.n	8006d0a <_dtoa_r+0x112>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e7b2      	b.n	8006d94 <_dtoa_r+0x19c>
 8006e2e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006e30:	e7b1      	b.n	8006d96 <_dtoa_r+0x19e>
 8006e32:	9b06      	ldr	r3, [sp, #24]
 8006e34:	eba3 030a 	sub.w	r3, r3, sl
 8006e38:	9306      	str	r3, [sp, #24]
 8006e3a:	f1ca 0300 	rsb	r3, sl, #0
 8006e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e40:	2300      	movs	r3, #0
 8006e42:	930e      	str	r3, [sp, #56]	; 0x38
 8006e44:	e7be      	b.n	8006dc4 <_dtoa_r+0x1cc>
 8006e46:	2300      	movs	r3, #0
 8006e48:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dc58      	bgt.n	8006f02 <_dtoa_r+0x30a>
 8006e50:	f04f 0901 	mov.w	r9, #1
 8006e54:	464b      	mov	r3, r9
 8006e56:	f8cd 9020 	str.w	r9, [sp, #32]
 8006e5a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006e5e:	2200      	movs	r2, #0
 8006e60:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006e62:	6042      	str	r2, [r0, #4]
 8006e64:	2204      	movs	r2, #4
 8006e66:	f102 0614 	add.w	r6, r2, #20
 8006e6a:	429e      	cmp	r6, r3
 8006e6c:	6841      	ldr	r1, [r0, #4]
 8006e6e:	d94e      	bls.n	8006f0e <_dtoa_r+0x316>
 8006e70:	4628      	mov	r0, r5
 8006e72:	f001 f84f 	bl	8007f14 <_Balloc>
 8006e76:	9003      	str	r0, [sp, #12]
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d14c      	bne.n	8006f16 <_dtoa_r+0x31e>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e82:	4b17      	ldr	r3, [pc, #92]	; (8006ee0 <_dtoa_r+0x2e8>)
 8006e84:	e6cc      	b.n	8006c20 <_dtoa_r+0x28>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e7de      	b.n	8006e48 <_dtoa_r+0x250>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e90:	eb0a 0903 	add.w	r9, sl, r3
 8006e94:	f109 0301 	add.w	r3, r9, #1
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	9308      	str	r3, [sp, #32]
 8006e9c:	bfb8      	it	lt
 8006e9e:	2301      	movlt	r3, #1
 8006ea0:	e7dd      	b.n	8006e5e <_dtoa_r+0x266>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e7f2      	b.n	8006e8c <_dtoa_r+0x294>
 8006ea6:	bf00      	nop
 8006ea8:	636f4361 	.word	0x636f4361
 8006eac:	3fd287a7 	.word	0x3fd287a7
 8006eb0:	8b60c8b3 	.word	0x8b60c8b3
 8006eb4:	3fc68a28 	.word	0x3fc68a28
 8006eb8:	509f79fb 	.word	0x509f79fb
 8006ebc:	3fd34413 	.word	0x3fd34413
 8006ec0:	08009b26 	.word	0x08009b26
 8006ec4:	08009b3d 	.word	0x08009b3d
 8006ec8:	7ff00000 	.word	0x7ff00000
 8006ecc:	08009b22 	.word	0x08009b22
 8006ed0:	08009b19 	.word	0x08009b19
 8006ed4:	08009999 	.word	0x08009999
 8006ed8:	3ff80000 	.word	0x3ff80000
 8006edc:	08009ca8 	.word	0x08009ca8
 8006ee0:	08009b98 	.word	0x08009b98
 8006ee4:	2401      	movs	r4, #1
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	940b      	str	r4, [sp, #44]	; 0x2c
 8006eea:	9322      	str	r3, [sp, #136]	; 0x88
 8006eec:	f04f 39ff 	mov.w	r9, #4294967295
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2312      	movs	r3, #18
 8006ef4:	f8cd 9020 	str.w	r9, [sp, #32]
 8006ef8:	9223      	str	r2, [sp, #140]	; 0x8c
 8006efa:	e7b0      	b.n	8006e5e <_dtoa_r+0x266>
 8006efc:	2301      	movs	r3, #1
 8006efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f00:	e7f4      	b.n	8006eec <_dtoa_r+0x2f4>
 8006f02:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006f06:	464b      	mov	r3, r9
 8006f08:	f8cd 9020 	str.w	r9, [sp, #32]
 8006f0c:	e7a7      	b.n	8006e5e <_dtoa_r+0x266>
 8006f0e:	3101      	adds	r1, #1
 8006f10:	6041      	str	r1, [r0, #4]
 8006f12:	0052      	lsls	r2, r2, #1
 8006f14:	e7a7      	b.n	8006e66 <_dtoa_r+0x26e>
 8006f16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f18:	9a03      	ldr	r2, [sp, #12]
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	9b08      	ldr	r3, [sp, #32]
 8006f1e:	2b0e      	cmp	r3, #14
 8006f20:	f200 80a8 	bhi.w	8007074 <_dtoa_r+0x47c>
 8006f24:	2c00      	cmp	r4, #0
 8006f26:	f000 80a5 	beq.w	8007074 <_dtoa_r+0x47c>
 8006f2a:	f1ba 0f00 	cmp.w	sl, #0
 8006f2e:	dd34      	ble.n	8006f9a <_dtoa_r+0x3a2>
 8006f30:	4a9a      	ldr	r2, [pc, #616]	; (800719c <_dtoa_r+0x5a4>)
 8006f32:	f00a 030f 	and.w	r3, sl, #15
 8006f36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f3a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006f3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f46:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006f4a:	d016      	beq.n	8006f7a <_dtoa_r+0x382>
 8006f4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f50:	4b93      	ldr	r3, [pc, #588]	; (80071a0 <_dtoa_r+0x5a8>)
 8006f52:	2703      	movs	r7, #3
 8006f54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f58:	f7f9 fc00 	bl	800075c <__aeabi_ddiv>
 8006f5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f60:	f004 040f 	and.w	r4, r4, #15
 8006f64:	4e8e      	ldr	r6, [pc, #568]	; (80071a0 <_dtoa_r+0x5a8>)
 8006f66:	b954      	cbnz	r4, 8006f7e <_dtoa_r+0x386>
 8006f68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f70:	f7f9 fbf4 	bl	800075c <__aeabi_ddiv>
 8006f74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f78:	e029      	b.n	8006fce <_dtoa_r+0x3d6>
 8006f7a:	2702      	movs	r7, #2
 8006f7c:	e7f2      	b.n	8006f64 <_dtoa_r+0x36c>
 8006f7e:	07e1      	lsls	r1, r4, #31
 8006f80:	d508      	bpl.n	8006f94 <_dtoa_r+0x39c>
 8006f82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f8a:	f7f9 fabd 	bl	8000508 <__aeabi_dmul>
 8006f8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f92:	3701      	adds	r7, #1
 8006f94:	1064      	asrs	r4, r4, #1
 8006f96:	3608      	adds	r6, #8
 8006f98:	e7e5      	b.n	8006f66 <_dtoa_r+0x36e>
 8006f9a:	f000 80a5 	beq.w	80070e8 <_dtoa_r+0x4f0>
 8006f9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fa2:	f1ca 0400 	rsb	r4, sl, #0
 8006fa6:	4b7d      	ldr	r3, [pc, #500]	; (800719c <_dtoa_r+0x5a4>)
 8006fa8:	f004 020f 	and.w	r2, r4, #15
 8006fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7f9 faa8 	bl	8000508 <__aeabi_dmul>
 8006fb8:	2702      	movs	r7, #2
 8006fba:	2300      	movs	r3, #0
 8006fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fc0:	4e77      	ldr	r6, [pc, #476]	; (80071a0 <_dtoa_r+0x5a8>)
 8006fc2:	1124      	asrs	r4, r4, #4
 8006fc4:	2c00      	cmp	r4, #0
 8006fc6:	f040 8084 	bne.w	80070d2 <_dtoa_r+0x4da>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1d2      	bne.n	8006f74 <_dtoa_r+0x37c>
 8006fce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 808b 	beq.w	80070ec <_dtoa_r+0x4f4>
 8006fd6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006fda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006fde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4b6f      	ldr	r3, [pc, #444]	; (80071a4 <_dtoa_r+0x5ac>)
 8006fe6:	f7f9 fd01 	bl	80009ec <__aeabi_dcmplt>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d07e      	beq.n	80070ec <_dtoa_r+0x4f4>
 8006fee:	9b08      	ldr	r3, [sp, #32]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d07b      	beq.n	80070ec <_dtoa_r+0x4f4>
 8006ff4:	f1b9 0f00 	cmp.w	r9, #0
 8006ff8:	dd38      	ble.n	800706c <_dtoa_r+0x474>
 8006ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ffe:	2200      	movs	r2, #0
 8007000:	4b69      	ldr	r3, [pc, #420]	; (80071a8 <_dtoa_r+0x5b0>)
 8007002:	f7f9 fa81 	bl	8000508 <__aeabi_dmul>
 8007006:	464c      	mov	r4, r9
 8007008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800700c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007010:	3701      	adds	r7, #1
 8007012:	4638      	mov	r0, r7
 8007014:	f7f9 fa0e 	bl	8000434 <__aeabi_i2d>
 8007018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800701c:	f7f9 fa74 	bl	8000508 <__aeabi_dmul>
 8007020:	2200      	movs	r2, #0
 8007022:	4b62      	ldr	r3, [pc, #392]	; (80071ac <_dtoa_r+0x5b4>)
 8007024:	f7f9 f8ba 	bl	800019c <__adddf3>
 8007028:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800702c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007030:	9611      	str	r6, [sp, #68]	; 0x44
 8007032:	2c00      	cmp	r4, #0
 8007034:	d15d      	bne.n	80070f2 <_dtoa_r+0x4fa>
 8007036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800703a:	2200      	movs	r2, #0
 800703c:	4b5c      	ldr	r3, [pc, #368]	; (80071b0 <_dtoa_r+0x5b8>)
 800703e:	f7f9 f8ab 	bl	8000198 <__aeabi_dsub>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800704a:	4633      	mov	r3, r6
 800704c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800704e:	f7f9 fceb 	bl	8000a28 <__aeabi_dcmpgt>
 8007052:	2800      	cmp	r0, #0
 8007054:	f040 829c 	bne.w	8007590 <_dtoa_r+0x998>
 8007058:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800705c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800705e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007062:	f7f9 fcc3 	bl	80009ec <__aeabi_dcmplt>
 8007066:	2800      	cmp	r0, #0
 8007068:	f040 8290 	bne.w	800758c <_dtoa_r+0x994>
 800706c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007070:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007074:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007076:	2b00      	cmp	r3, #0
 8007078:	f2c0 8152 	blt.w	8007320 <_dtoa_r+0x728>
 800707c:	f1ba 0f0e 	cmp.w	sl, #14
 8007080:	f300 814e 	bgt.w	8007320 <_dtoa_r+0x728>
 8007084:	4b45      	ldr	r3, [pc, #276]	; (800719c <_dtoa_r+0x5a4>)
 8007086:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800708a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800708e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007092:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007094:	2b00      	cmp	r3, #0
 8007096:	f280 80db 	bge.w	8007250 <_dtoa_r+0x658>
 800709a:	9b08      	ldr	r3, [sp, #32]
 800709c:	2b00      	cmp	r3, #0
 800709e:	f300 80d7 	bgt.w	8007250 <_dtoa_r+0x658>
 80070a2:	f040 8272 	bne.w	800758a <_dtoa_r+0x992>
 80070a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070aa:	2200      	movs	r2, #0
 80070ac:	4b40      	ldr	r3, [pc, #256]	; (80071b0 <_dtoa_r+0x5b8>)
 80070ae:	f7f9 fa2b 	bl	8000508 <__aeabi_dmul>
 80070b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070b6:	f7f9 fcad 	bl	8000a14 <__aeabi_dcmpge>
 80070ba:	9c08      	ldr	r4, [sp, #32]
 80070bc:	4626      	mov	r6, r4
 80070be:	2800      	cmp	r0, #0
 80070c0:	f040 8248 	bne.w	8007554 <_dtoa_r+0x95c>
 80070c4:	2331      	movs	r3, #49	; 0x31
 80070c6:	9f03      	ldr	r7, [sp, #12]
 80070c8:	f10a 0a01 	add.w	sl, sl, #1
 80070cc:	f807 3b01 	strb.w	r3, [r7], #1
 80070d0:	e244      	b.n	800755c <_dtoa_r+0x964>
 80070d2:	07e2      	lsls	r2, r4, #31
 80070d4:	d505      	bpl.n	80070e2 <_dtoa_r+0x4ea>
 80070d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070da:	f7f9 fa15 	bl	8000508 <__aeabi_dmul>
 80070de:	2301      	movs	r3, #1
 80070e0:	3701      	adds	r7, #1
 80070e2:	1064      	asrs	r4, r4, #1
 80070e4:	3608      	adds	r6, #8
 80070e6:	e76d      	b.n	8006fc4 <_dtoa_r+0x3cc>
 80070e8:	2702      	movs	r7, #2
 80070ea:	e770      	b.n	8006fce <_dtoa_r+0x3d6>
 80070ec:	46d0      	mov	r8, sl
 80070ee:	9c08      	ldr	r4, [sp, #32]
 80070f0:	e78f      	b.n	8007012 <_dtoa_r+0x41a>
 80070f2:	9903      	ldr	r1, [sp, #12]
 80070f4:	4b29      	ldr	r3, [pc, #164]	; (800719c <_dtoa_r+0x5a4>)
 80070f6:	4421      	add	r1, r4
 80070f8:	9112      	str	r1, [sp, #72]	; 0x48
 80070fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007100:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007104:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007108:	2900      	cmp	r1, #0
 800710a:	d055      	beq.n	80071b8 <_dtoa_r+0x5c0>
 800710c:	2000      	movs	r0, #0
 800710e:	4929      	ldr	r1, [pc, #164]	; (80071b4 <_dtoa_r+0x5bc>)
 8007110:	f7f9 fb24 	bl	800075c <__aeabi_ddiv>
 8007114:	463b      	mov	r3, r7
 8007116:	4632      	mov	r2, r6
 8007118:	f7f9 f83e 	bl	8000198 <__aeabi_dsub>
 800711c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007120:	9f03      	ldr	r7, [sp, #12]
 8007122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007126:	f7f9 fc9f 	bl	8000a68 <__aeabi_d2iz>
 800712a:	4604      	mov	r4, r0
 800712c:	f7f9 f982 	bl	8000434 <__aeabi_i2d>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007138:	f7f9 f82e 	bl	8000198 <__aeabi_dsub>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	3430      	adds	r4, #48	; 0x30
 8007142:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007146:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800714a:	f807 4b01 	strb.w	r4, [r7], #1
 800714e:	f7f9 fc4d 	bl	80009ec <__aeabi_dcmplt>
 8007152:	2800      	cmp	r0, #0
 8007154:	d174      	bne.n	8007240 <_dtoa_r+0x648>
 8007156:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800715a:	2000      	movs	r0, #0
 800715c:	4911      	ldr	r1, [pc, #68]	; (80071a4 <_dtoa_r+0x5ac>)
 800715e:	f7f9 f81b 	bl	8000198 <__aeabi_dsub>
 8007162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007166:	f7f9 fc41 	bl	80009ec <__aeabi_dcmplt>
 800716a:	2800      	cmp	r0, #0
 800716c:	f040 80b7 	bne.w	80072de <_dtoa_r+0x6e6>
 8007170:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007172:	429f      	cmp	r7, r3
 8007174:	f43f af7a 	beq.w	800706c <_dtoa_r+0x474>
 8007178:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800717c:	2200      	movs	r2, #0
 800717e:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <_dtoa_r+0x5b0>)
 8007180:	f7f9 f9c2 	bl	8000508 <__aeabi_dmul>
 8007184:	2200      	movs	r2, #0
 8007186:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800718a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800718e:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <_dtoa_r+0x5b0>)
 8007190:	f7f9 f9ba 	bl	8000508 <__aeabi_dmul>
 8007194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007198:	e7c3      	b.n	8007122 <_dtoa_r+0x52a>
 800719a:	bf00      	nop
 800719c:	08009ca8 	.word	0x08009ca8
 80071a0:	08009c80 	.word	0x08009c80
 80071a4:	3ff00000 	.word	0x3ff00000
 80071a8:	40240000 	.word	0x40240000
 80071ac:	401c0000 	.word	0x401c0000
 80071b0:	40140000 	.word	0x40140000
 80071b4:	3fe00000 	.word	0x3fe00000
 80071b8:	4630      	mov	r0, r6
 80071ba:	4639      	mov	r1, r7
 80071bc:	f7f9 f9a4 	bl	8000508 <__aeabi_dmul>
 80071c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071c6:	9c03      	ldr	r4, [sp, #12]
 80071c8:	9314      	str	r3, [sp, #80]	; 0x50
 80071ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071ce:	f7f9 fc4b 	bl	8000a68 <__aeabi_d2iz>
 80071d2:	9015      	str	r0, [sp, #84]	; 0x54
 80071d4:	f7f9 f92e 	bl	8000434 <__aeabi_i2d>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071e0:	f7f8 ffda 	bl	8000198 <__aeabi_dsub>
 80071e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071e6:	4606      	mov	r6, r0
 80071e8:	3330      	adds	r3, #48	; 0x30
 80071ea:	f804 3b01 	strb.w	r3, [r4], #1
 80071ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071f0:	460f      	mov	r7, r1
 80071f2:	429c      	cmp	r4, r3
 80071f4:	f04f 0200 	mov.w	r2, #0
 80071f8:	d124      	bne.n	8007244 <_dtoa_r+0x64c>
 80071fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071fe:	4bb0      	ldr	r3, [pc, #704]	; (80074c0 <_dtoa_r+0x8c8>)
 8007200:	f7f8 ffcc 	bl	800019c <__adddf3>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4630      	mov	r0, r6
 800720a:	4639      	mov	r1, r7
 800720c:	f7f9 fc0c 	bl	8000a28 <__aeabi_dcmpgt>
 8007210:	2800      	cmp	r0, #0
 8007212:	d163      	bne.n	80072dc <_dtoa_r+0x6e4>
 8007214:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007218:	2000      	movs	r0, #0
 800721a:	49a9      	ldr	r1, [pc, #676]	; (80074c0 <_dtoa_r+0x8c8>)
 800721c:	f7f8 ffbc 	bl	8000198 <__aeabi_dsub>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4630      	mov	r0, r6
 8007226:	4639      	mov	r1, r7
 8007228:	f7f9 fbe0 	bl	80009ec <__aeabi_dcmplt>
 800722c:	2800      	cmp	r0, #0
 800722e:	f43f af1d 	beq.w	800706c <_dtoa_r+0x474>
 8007232:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007234:	1e7b      	subs	r3, r7, #1
 8007236:	9314      	str	r3, [sp, #80]	; 0x50
 8007238:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800723c:	2b30      	cmp	r3, #48	; 0x30
 800723e:	d0f8      	beq.n	8007232 <_dtoa_r+0x63a>
 8007240:	46c2      	mov	sl, r8
 8007242:	e03b      	b.n	80072bc <_dtoa_r+0x6c4>
 8007244:	4b9f      	ldr	r3, [pc, #636]	; (80074c4 <_dtoa_r+0x8cc>)
 8007246:	f7f9 f95f 	bl	8000508 <__aeabi_dmul>
 800724a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800724e:	e7bc      	b.n	80071ca <_dtoa_r+0x5d2>
 8007250:	9f03      	ldr	r7, [sp, #12]
 8007252:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007256:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800725a:	4640      	mov	r0, r8
 800725c:	4649      	mov	r1, r9
 800725e:	f7f9 fa7d 	bl	800075c <__aeabi_ddiv>
 8007262:	f7f9 fc01 	bl	8000a68 <__aeabi_d2iz>
 8007266:	4604      	mov	r4, r0
 8007268:	f7f9 f8e4 	bl	8000434 <__aeabi_i2d>
 800726c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007270:	f7f9 f94a 	bl	8000508 <__aeabi_dmul>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4640      	mov	r0, r8
 800727a:	4649      	mov	r1, r9
 800727c:	f7f8 ff8c 	bl	8000198 <__aeabi_dsub>
 8007280:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007284:	f807 6b01 	strb.w	r6, [r7], #1
 8007288:	9e03      	ldr	r6, [sp, #12]
 800728a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800728e:	1bbe      	subs	r6, r7, r6
 8007290:	45b4      	cmp	ip, r6
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	d136      	bne.n	8007306 <_dtoa_r+0x70e>
 8007298:	f7f8 ff80 	bl	800019c <__adddf3>
 800729c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072a0:	4680      	mov	r8, r0
 80072a2:	4689      	mov	r9, r1
 80072a4:	f7f9 fbc0 	bl	8000a28 <__aeabi_dcmpgt>
 80072a8:	bb58      	cbnz	r0, 8007302 <_dtoa_r+0x70a>
 80072aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072ae:	4640      	mov	r0, r8
 80072b0:	4649      	mov	r1, r9
 80072b2:	f7f9 fb91 	bl	80009d8 <__aeabi_dcmpeq>
 80072b6:	b108      	cbz	r0, 80072bc <_dtoa_r+0x6c4>
 80072b8:	07e1      	lsls	r1, r4, #31
 80072ba:	d422      	bmi.n	8007302 <_dtoa_r+0x70a>
 80072bc:	4628      	mov	r0, r5
 80072be:	4659      	mov	r1, fp
 80072c0:	f000 fe68 	bl	8007f94 <_Bfree>
 80072c4:	2300      	movs	r3, #0
 80072c6:	703b      	strb	r3, [r7, #0]
 80072c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80072ca:	f10a 0001 	add.w	r0, sl, #1
 80072ce:	6018      	str	r0, [r3, #0]
 80072d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f43f acde 	beq.w	8006c94 <_dtoa_r+0x9c>
 80072d8:	601f      	str	r7, [r3, #0]
 80072da:	e4db      	b.n	8006c94 <_dtoa_r+0x9c>
 80072dc:	4627      	mov	r7, r4
 80072de:	463b      	mov	r3, r7
 80072e0:	461f      	mov	r7, r3
 80072e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072e6:	2a39      	cmp	r2, #57	; 0x39
 80072e8:	d107      	bne.n	80072fa <_dtoa_r+0x702>
 80072ea:	9a03      	ldr	r2, [sp, #12]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d1f7      	bne.n	80072e0 <_dtoa_r+0x6e8>
 80072f0:	2230      	movs	r2, #48	; 0x30
 80072f2:	9903      	ldr	r1, [sp, #12]
 80072f4:	f108 0801 	add.w	r8, r8, #1
 80072f8:	700a      	strb	r2, [r1, #0]
 80072fa:	781a      	ldrb	r2, [r3, #0]
 80072fc:	3201      	adds	r2, #1
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	e79e      	b.n	8007240 <_dtoa_r+0x648>
 8007302:	46d0      	mov	r8, sl
 8007304:	e7eb      	b.n	80072de <_dtoa_r+0x6e6>
 8007306:	2200      	movs	r2, #0
 8007308:	4b6e      	ldr	r3, [pc, #440]	; (80074c4 <_dtoa_r+0x8cc>)
 800730a:	f7f9 f8fd 	bl	8000508 <__aeabi_dmul>
 800730e:	2200      	movs	r2, #0
 8007310:	2300      	movs	r3, #0
 8007312:	4680      	mov	r8, r0
 8007314:	4689      	mov	r9, r1
 8007316:	f7f9 fb5f 	bl	80009d8 <__aeabi_dcmpeq>
 800731a:	2800      	cmp	r0, #0
 800731c:	d09b      	beq.n	8007256 <_dtoa_r+0x65e>
 800731e:	e7cd      	b.n	80072bc <_dtoa_r+0x6c4>
 8007320:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007322:	2a00      	cmp	r2, #0
 8007324:	f000 80d0 	beq.w	80074c8 <_dtoa_r+0x8d0>
 8007328:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800732a:	2a01      	cmp	r2, #1
 800732c:	f300 80ae 	bgt.w	800748c <_dtoa_r+0x894>
 8007330:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007332:	2a00      	cmp	r2, #0
 8007334:	f000 80a6 	beq.w	8007484 <_dtoa_r+0x88c>
 8007338:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800733c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800733e:	9f06      	ldr	r7, [sp, #24]
 8007340:	9a06      	ldr	r2, [sp, #24]
 8007342:	2101      	movs	r1, #1
 8007344:	441a      	add	r2, r3
 8007346:	9206      	str	r2, [sp, #24]
 8007348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800734a:	4628      	mov	r0, r5
 800734c:	441a      	add	r2, r3
 800734e:	9209      	str	r2, [sp, #36]	; 0x24
 8007350:	f000 ff20 	bl	8008194 <__i2b>
 8007354:	4606      	mov	r6, r0
 8007356:	2f00      	cmp	r7, #0
 8007358:	dd0c      	ble.n	8007374 <_dtoa_r+0x77c>
 800735a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735c:	2b00      	cmp	r3, #0
 800735e:	dd09      	ble.n	8007374 <_dtoa_r+0x77c>
 8007360:	42bb      	cmp	r3, r7
 8007362:	bfa8      	it	ge
 8007364:	463b      	movge	r3, r7
 8007366:	9a06      	ldr	r2, [sp, #24]
 8007368:	1aff      	subs	r7, r7, r3
 800736a:	1ad2      	subs	r2, r2, r3
 800736c:	9206      	str	r2, [sp, #24]
 800736e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	9309      	str	r3, [sp, #36]	; 0x24
 8007374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007376:	b1f3      	cbz	r3, 80073b6 <_dtoa_r+0x7be>
 8007378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 80a8 	beq.w	80074d0 <_dtoa_r+0x8d8>
 8007380:	2c00      	cmp	r4, #0
 8007382:	dd10      	ble.n	80073a6 <_dtoa_r+0x7ae>
 8007384:	4631      	mov	r1, r6
 8007386:	4622      	mov	r2, r4
 8007388:	4628      	mov	r0, r5
 800738a:	f000 ffc1 	bl	8008310 <__pow5mult>
 800738e:	465a      	mov	r2, fp
 8007390:	4601      	mov	r1, r0
 8007392:	4606      	mov	r6, r0
 8007394:	4628      	mov	r0, r5
 8007396:	f000 ff13 	bl	80081c0 <__multiply>
 800739a:	4680      	mov	r8, r0
 800739c:	4659      	mov	r1, fp
 800739e:	4628      	mov	r0, r5
 80073a0:	f000 fdf8 	bl	8007f94 <_Bfree>
 80073a4:	46c3      	mov	fp, r8
 80073a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a8:	1b1a      	subs	r2, r3, r4
 80073aa:	d004      	beq.n	80073b6 <_dtoa_r+0x7be>
 80073ac:	4659      	mov	r1, fp
 80073ae:	4628      	mov	r0, r5
 80073b0:	f000 ffae 	bl	8008310 <__pow5mult>
 80073b4:	4683      	mov	fp, r0
 80073b6:	2101      	movs	r1, #1
 80073b8:	4628      	mov	r0, r5
 80073ba:	f000 feeb 	bl	8008194 <__i2b>
 80073be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073c0:	4604      	mov	r4, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f340 8086 	ble.w	80074d4 <_dtoa_r+0x8dc>
 80073c8:	461a      	mov	r2, r3
 80073ca:	4601      	mov	r1, r0
 80073cc:	4628      	mov	r0, r5
 80073ce:	f000 ff9f 	bl	8008310 <__pow5mult>
 80073d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073d4:	4604      	mov	r4, r0
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	dd7f      	ble.n	80074da <_dtoa_r+0x8e2>
 80073da:	f04f 0800 	mov.w	r8, #0
 80073de:	6923      	ldr	r3, [r4, #16]
 80073e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073e4:	6918      	ldr	r0, [r3, #16]
 80073e6:	f000 fe87 	bl	80080f8 <__hi0bits>
 80073ea:	f1c0 0020 	rsb	r0, r0, #32
 80073ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f0:	4418      	add	r0, r3
 80073f2:	f010 001f 	ands.w	r0, r0, #31
 80073f6:	f000 8092 	beq.w	800751e <_dtoa_r+0x926>
 80073fa:	f1c0 0320 	rsb	r3, r0, #32
 80073fe:	2b04      	cmp	r3, #4
 8007400:	f340 808a 	ble.w	8007518 <_dtoa_r+0x920>
 8007404:	f1c0 001c 	rsb	r0, r0, #28
 8007408:	9b06      	ldr	r3, [sp, #24]
 800740a:	4407      	add	r7, r0
 800740c:	4403      	add	r3, r0
 800740e:	9306      	str	r3, [sp, #24]
 8007410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007412:	4403      	add	r3, r0
 8007414:	9309      	str	r3, [sp, #36]	; 0x24
 8007416:	9b06      	ldr	r3, [sp, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	dd05      	ble.n	8007428 <_dtoa_r+0x830>
 800741c:	4659      	mov	r1, fp
 800741e:	461a      	mov	r2, r3
 8007420:	4628      	mov	r0, r5
 8007422:	f000 ffcf 	bl	80083c4 <__lshift>
 8007426:	4683      	mov	fp, r0
 8007428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742a:	2b00      	cmp	r3, #0
 800742c:	dd05      	ble.n	800743a <_dtoa_r+0x842>
 800742e:	4621      	mov	r1, r4
 8007430:	461a      	mov	r2, r3
 8007432:	4628      	mov	r0, r5
 8007434:	f000 ffc6 	bl	80083c4 <__lshift>
 8007438:	4604      	mov	r4, r0
 800743a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800743c:	2b00      	cmp	r3, #0
 800743e:	d070      	beq.n	8007522 <_dtoa_r+0x92a>
 8007440:	4621      	mov	r1, r4
 8007442:	4658      	mov	r0, fp
 8007444:	f001 f82e 	bl	80084a4 <__mcmp>
 8007448:	2800      	cmp	r0, #0
 800744a:	da6a      	bge.n	8007522 <_dtoa_r+0x92a>
 800744c:	2300      	movs	r3, #0
 800744e:	4659      	mov	r1, fp
 8007450:	220a      	movs	r2, #10
 8007452:	4628      	mov	r0, r5
 8007454:	f000 fdc0 	bl	8007fd8 <__multadd>
 8007458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800745a:	4683      	mov	fp, r0
 800745c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8194 	beq.w	800778e <_dtoa_r+0xb96>
 8007466:	4631      	mov	r1, r6
 8007468:	2300      	movs	r3, #0
 800746a:	220a      	movs	r2, #10
 800746c:	4628      	mov	r0, r5
 800746e:	f000 fdb3 	bl	8007fd8 <__multadd>
 8007472:	f1b9 0f00 	cmp.w	r9, #0
 8007476:	4606      	mov	r6, r0
 8007478:	f300 8093 	bgt.w	80075a2 <_dtoa_r+0x9aa>
 800747c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800747e:	2b02      	cmp	r3, #2
 8007480:	dc57      	bgt.n	8007532 <_dtoa_r+0x93a>
 8007482:	e08e      	b.n	80075a2 <_dtoa_r+0x9aa>
 8007484:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007486:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800748a:	e757      	b.n	800733c <_dtoa_r+0x744>
 800748c:	9b08      	ldr	r3, [sp, #32]
 800748e:	1e5c      	subs	r4, r3, #1
 8007490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007492:	42a3      	cmp	r3, r4
 8007494:	bfb7      	itett	lt
 8007496:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007498:	1b1c      	subge	r4, r3, r4
 800749a:	1ae2      	sublt	r2, r4, r3
 800749c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800749e:	bfbe      	ittt	lt
 80074a0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80074a2:	189b      	addlt	r3, r3, r2
 80074a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80074a6:	9b08      	ldr	r3, [sp, #32]
 80074a8:	bfb8      	it	lt
 80074aa:	2400      	movlt	r4, #0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	bfbb      	ittet	lt
 80074b0:	9b06      	ldrlt	r3, [sp, #24]
 80074b2:	9a08      	ldrlt	r2, [sp, #32]
 80074b4:	9f06      	ldrge	r7, [sp, #24]
 80074b6:	1a9f      	sublt	r7, r3, r2
 80074b8:	bfac      	ite	ge
 80074ba:	9b08      	ldrge	r3, [sp, #32]
 80074bc:	2300      	movlt	r3, #0
 80074be:	e73f      	b.n	8007340 <_dtoa_r+0x748>
 80074c0:	3fe00000 	.word	0x3fe00000
 80074c4:	40240000 	.word	0x40240000
 80074c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074ca:	9f06      	ldr	r7, [sp, #24]
 80074cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80074ce:	e742      	b.n	8007356 <_dtoa_r+0x75e>
 80074d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074d2:	e76b      	b.n	80073ac <_dtoa_r+0x7b4>
 80074d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	dc19      	bgt.n	800750e <_dtoa_r+0x916>
 80074da:	9b04      	ldr	r3, [sp, #16]
 80074dc:	b9bb      	cbnz	r3, 800750e <_dtoa_r+0x916>
 80074de:	9b05      	ldr	r3, [sp, #20]
 80074e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074e4:	b99b      	cbnz	r3, 800750e <_dtoa_r+0x916>
 80074e6:	9b05      	ldr	r3, [sp, #20]
 80074e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074ec:	0d1b      	lsrs	r3, r3, #20
 80074ee:	051b      	lsls	r3, r3, #20
 80074f0:	b183      	cbz	r3, 8007514 <_dtoa_r+0x91c>
 80074f2:	f04f 0801 	mov.w	r8, #1
 80074f6:	9b06      	ldr	r3, [sp, #24]
 80074f8:	3301      	adds	r3, #1
 80074fa:	9306      	str	r3, [sp, #24]
 80074fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074fe:	3301      	adds	r3, #1
 8007500:	9309      	str	r3, [sp, #36]	; 0x24
 8007502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007504:	2b00      	cmp	r3, #0
 8007506:	f47f af6a 	bne.w	80073de <_dtoa_r+0x7e6>
 800750a:	2001      	movs	r0, #1
 800750c:	e76f      	b.n	80073ee <_dtoa_r+0x7f6>
 800750e:	f04f 0800 	mov.w	r8, #0
 8007512:	e7f6      	b.n	8007502 <_dtoa_r+0x90a>
 8007514:	4698      	mov	r8, r3
 8007516:	e7f4      	b.n	8007502 <_dtoa_r+0x90a>
 8007518:	f43f af7d 	beq.w	8007416 <_dtoa_r+0x81e>
 800751c:	4618      	mov	r0, r3
 800751e:	301c      	adds	r0, #28
 8007520:	e772      	b.n	8007408 <_dtoa_r+0x810>
 8007522:	9b08      	ldr	r3, [sp, #32]
 8007524:	2b00      	cmp	r3, #0
 8007526:	dc36      	bgt.n	8007596 <_dtoa_r+0x99e>
 8007528:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800752a:	2b02      	cmp	r3, #2
 800752c:	dd33      	ble.n	8007596 <_dtoa_r+0x99e>
 800752e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007532:	f1b9 0f00 	cmp.w	r9, #0
 8007536:	d10d      	bne.n	8007554 <_dtoa_r+0x95c>
 8007538:	4621      	mov	r1, r4
 800753a:	464b      	mov	r3, r9
 800753c:	2205      	movs	r2, #5
 800753e:	4628      	mov	r0, r5
 8007540:	f000 fd4a 	bl	8007fd8 <__multadd>
 8007544:	4601      	mov	r1, r0
 8007546:	4604      	mov	r4, r0
 8007548:	4658      	mov	r0, fp
 800754a:	f000 ffab 	bl	80084a4 <__mcmp>
 800754e:	2800      	cmp	r0, #0
 8007550:	f73f adb8 	bgt.w	80070c4 <_dtoa_r+0x4cc>
 8007554:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007556:	9f03      	ldr	r7, [sp, #12]
 8007558:	ea6f 0a03 	mvn.w	sl, r3
 800755c:	f04f 0800 	mov.w	r8, #0
 8007560:	4621      	mov	r1, r4
 8007562:	4628      	mov	r0, r5
 8007564:	f000 fd16 	bl	8007f94 <_Bfree>
 8007568:	2e00      	cmp	r6, #0
 800756a:	f43f aea7 	beq.w	80072bc <_dtoa_r+0x6c4>
 800756e:	f1b8 0f00 	cmp.w	r8, #0
 8007572:	d005      	beq.n	8007580 <_dtoa_r+0x988>
 8007574:	45b0      	cmp	r8, r6
 8007576:	d003      	beq.n	8007580 <_dtoa_r+0x988>
 8007578:	4641      	mov	r1, r8
 800757a:	4628      	mov	r0, r5
 800757c:	f000 fd0a 	bl	8007f94 <_Bfree>
 8007580:	4631      	mov	r1, r6
 8007582:	4628      	mov	r0, r5
 8007584:	f000 fd06 	bl	8007f94 <_Bfree>
 8007588:	e698      	b.n	80072bc <_dtoa_r+0x6c4>
 800758a:	2400      	movs	r4, #0
 800758c:	4626      	mov	r6, r4
 800758e:	e7e1      	b.n	8007554 <_dtoa_r+0x95c>
 8007590:	46c2      	mov	sl, r8
 8007592:	4626      	mov	r6, r4
 8007594:	e596      	b.n	80070c4 <_dtoa_r+0x4cc>
 8007596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80fd 	beq.w	800779c <_dtoa_r+0xba4>
 80075a2:	2f00      	cmp	r7, #0
 80075a4:	dd05      	ble.n	80075b2 <_dtoa_r+0x9ba>
 80075a6:	4631      	mov	r1, r6
 80075a8:	463a      	mov	r2, r7
 80075aa:	4628      	mov	r0, r5
 80075ac:	f000 ff0a 	bl	80083c4 <__lshift>
 80075b0:	4606      	mov	r6, r0
 80075b2:	f1b8 0f00 	cmp.w	r8, #0
 80075b6:	d05c      	beq.n	8007672 <_dtoa_r+0xa7a>
 80075b8:	4628      	mov	r0, r5
 80075ba:	6871      	ldr	r1, [r6, #4]
 80075bc:	f000 fcaa 	bl	8007f14 <_Balloc>
 80075c0:	4607      	mov	r7, r0
 80075c2:	b928      	cbnz	r0, 80075d0 <_dtoa_r+0x9d8>
 80075c4:	4602      	mov	r2, r0
 80075c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80075ca:	4b7f      	ldr	r3, [pc, #508]	; (80077c8 <_dtoa_r+0xbd0>)
 80075cc:	f7ff bb28 	b.w	8006c20 <_dtoa_r+0x28>
 80075d0:	6932      	ldr	r2, [r6, #16]
 80075d2:	f106 010c 	add.w	r1, r6, #12
 80075d6:	3202      	adds	r2, #2
 80075d8:	0092      	lsls	r2, r2, #2
 80075da:	300c      	adds	r0, #12
 80075dc:	f000 fc8c 	bl	8007ef8 <memcpy>
 80075e0:	2201      	movs	r2, #1
 80075e2:	4639      	mov	r1, r7
 80075e4:	4628      	mov	r0, r5
 80075e6:	f000 feed 	bl	80083c4 <__lshift>
 80075ea:	46b0      	mov	r8, r6
 80075ec:	4606      	mov	r6, r0
 80075ee:	9b03      	ldr	r3, [sp, #12]
 80075f0:	3301      	adds	r3, #1
 80075f2:	9308      	str	r3, [sp, #32]
 80075f4:	9b03      	ldr	r3, [sp, #12]
 80075f6:	444b      	add	r3, r9
 80075f8:	930a      	str	r3, [sp, #40]	; 0x28
 80075fa:	9b04      	ldr	r3, [sp, #16]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	9309      	str	r3, [sp, #36]	; 0x24
 8007602:	9b08      	ldr	r3, [sp, #32]
 8007604:	4621      	mov	r1, r4
 8007606:	3b01      	subs	r3, #1
 8007608:	4658      	mov	r0, fp
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	f7ff fa68 	bl	8006ae0 <quorem>
 8007610:	4603      	mov	r3, r0
 8007612:	4641      	mov	r1, r8
 8007614:	3330      	adds	r3, #48	; 0x30
 8007616:	9006      	str	r0, [sp, #24]
 8007618:	4658      	mov	r0, fp
 800761a:	930b      	str	r3, [sp, #44]	; 0x2c
 800761c:	f000 ff42 	bl	80084a4 <__mcmp>
 8007620:	4632      	mov	r2, r6
 8007622:	4681      	mov	r9, r0
 8007624:	4621      	mov	r1, r4
 8007626:	4628      	mov	r0, r5
 8007628:	f000 ff58 	bl	80084dc <__mdiff>
 800762c:	68c2      	ldr	r2, [r0, #12]
 800762e:	4607      	mov	r7, r0
 8007630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007632:	bb02      	cbnz	r2, 8007676 <_dtoa_r+0xa7e>
 8007634:	4601      	mov	r1, r0
 8007636:	4658      	mov	r0, fp
 8007638:	f000 ff34 	bl	80084a4 <__mcmp>
 800763c:	4602      	mov	r2, r0
 800763e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007640:	4639      	mov	r1, r7
 8007642:	4628      	mov	r0, r5
 8007644:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007648:	f000 fca4 	bl	8007f94 <_Bfree>
 800764c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800764e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007650:	9f08      	ldr	r7, [sp, #32]
 8007652:	ea43 0102 	orr.w	r1, r3, r2
 8007656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007658:	430b      	orrs	r3, r1
 800765a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800765c:	d10d      	bne.n	800767a <_dtoa_r+0xa82>
 800765e:	2b39      	cmp	r3, #57	; 0x39
 8007660:	d029      	beq.n	80076b6 <_dtoa_r+0xabe>
 8007662:	f1b9 0f00 	cmp.w	r9, #0
 8007666:	dd01      	ble.n	800766c <_dtoa_r+0xa74>
 8007668:	9b06      	ldr	r3, [sp, #24]
 800766a:	3331      	adds	r3, #49	; 0x31
 800766c:	9a04      	ldr	r2, [sp, #16]
 800766e:	7013      	strb	r3, [r2, #0]
 8007670:	e776      	b.n	8007560 <_dtoa_r+0x968>
 8007672:	4630      	mov	r0, r6
 8007674:	e7b9      	b.n	80075ea <_dtoa_r+0x9f2>
 8007676:	2201      	movs	r2, #1
 8007678:	e7e2      	b.n	8007640 <_dtoa_r+0xa48>
 800767a:	f1b9 0f00 	cmp.w	r9, #0
 800767e:	db06      	blt.n	800768e <_dtoa_r+0xa96>
 8007680:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007682:	ea41 0909 	orr.w	r9, r1, r9
 8007686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007688:	ea59 0101 	orrs.w	r1, r9, r1
 800768c:	d120      	bne.n	80076d0 <_dtoa_r+0xad8>
 800768e:	2a00      	cmp	r2, #0
 8007690:	ddec      	ble.n	800766c <_dtoa_r+0xa74>
 8007692:	4659      	mov	r1, fp
 8007694:	2201      	movs	r2, #1
 8007696:	4628      	mov	r0, r5
 8007698:	9308      	str	r3, [sp, #32]
 800769a:	f000 fe93 	bl	80083c4 <__lshift>
 800769e:	4621      	mov	r1, r4
 80076a0:	4683      	mov	fp, r0
 80076a2:	f000 feff 	bl	80084a4 <__mcmp>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	9b08      	ldr	r3, [sp, #32]
 80076aa:	dc02      	bgt.n	80076b2 <_dtoa_r+0xaba>
 80076ac:	d1de      	bne.n	800766c <_dtoa_r+0xa74>
 80076ae:	07da      	lsls	r2, r3, #31
 80076b0:	d5dc      	bpl.n	800766c <_dtoa_r+0xa74>
 80076b2:	2b39      	cmp	r3, #57	; 0x39
 80076b4:	d1d8      	bne.n	8007668 <_dtoa_r+0xa70>
 80076b6:	2339      	movs	r3, #57	; 0x39
 80076b8:	9a04      	ldr	r2, [sp, #16]
 80076ba:	7013      	strb	r3, [r2, #0]
 80076bc:	463b      	mov	r3, r7
 80076be:	461f      	mov	r7, r3
 80076c0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	2a39      	cmp	r2, #57	; 0x39
 80076c8:	d050      	beq.n	800776c <_dtoa_r+0xb74>
 80076ca:	3201      	adds	r2, #1
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	e747      	b.n	8007560 <_dtoa_r+0x968>
 80076d0:	2a00      	cmp	r2, #0
 80076d2:	dd03      	ble.n	80076dc <_dtoa_r+0xae4>
 80076d4:	2b39      	cmp	r3, #57	; 0x39
 80076d6:	d0ee      	beq.n	80076b6 <_dtoa_r+0xabe>
 80076d8:	3301      	adds	r3, #1
 80076da:	e7c7      	b.n	800766c <_dtoa_r+0xa74>
 80076dc:	9a08      	ldr	r2, [sp, #32]
 80076de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80076e4:	428a      	cmp	r2, r1
 80076e6:	d02a      	beq.n	800773e <_dtoa_r+0xb46>
 80076e8:	4659      	mov	r1, fp
 80076ea:	2300      	movs	r3, #0
 80076ec:	220a      	movs	r2, #10
 80076ee:	4628      	mov	r0, r5
 80076f0:	f000 fc72 	bl	8007fd8 <__multadd>
 80076f4:	45b0      	cmp	r8, r6
 80076f6:	4683      	mov	fp, r0
 80076f8:	f04f 0300 	mov.w	r3, #0
 80076fc:	f04f 020a 	mov.w	r2, #10
 8007700:	4641      	mov	r1, r8
 8007702:	4628      	mov	r0, r5
 8007704:	d107      	bne.n	8007716 <_dtoa_r+0xb1e>
 8007706:	f000 fc67 	bl	8007fd8 <__multadd>
 800770a:	4680      	mov	r8, r0
 800770c:	4606      	mov	r6, r0
 800770e:	9b08      	ldr	r3, [sp, #32]
 8007710:	3301      	adds	r3, #1
 8007712:	9308      	str	r3, [sp, #32]
 8007714:	e775      	b.n	8007602 <_dtoa_r+0xa0a>
 8007716:	f000 fc5f 	bl	8007fd8 <__multadd>
 800771a:	4631      	mov	r1, r6
 800771c:	4680      	mov	r8, r0
 800771e:	2300      	movs	r3, #0
 8007720:	220a      	movs	r2, #10
 8007722:	4628      	mov	r0, r5
 8007724:	f000 fc58 	bl	8007fd8 <__multadd>
 8007728:	4606      	mov	r6, r0
 800772a:	e7f0      	b.n	800770e <_dtoa_r+0xb16>
 800772c:	f1b9 0f00 	cmp.w	r9, #0
 8007730:	bfcc      	ite	gt
 8007732:	464f      	movgt	r7, r9
 8007734:	2701      	movle	r7, #1
 8007736:	f04f 0800 	mov.w	r8, #0
 800773a:	9a03      	ldr	r2, [sp, #12]
 800773c:	4417      	add	r7, r2
 800773e:	4659      	mov	r1, fp
 8007740:	2201      	movs	r2, #1
 8007742:	4628      	mov	r0, r5
 8007744:	9308      	str	r3, [sp, #32]
 8007746:	f000 fe3d 	bl	80083c4 <__lshift>
 800774a:	4621      	mov	r1, r4
 800774c:	4683      	mov	fp, r0
 800774e:	f000 fea9 	bl	80084a4 <__mcmp>
 8007752:	2800      	cmp	r0, #0
 8007754:	dcb2      	bgt.n	80076bc <_dtoa_r+0xac4>
 8007756:	d102      	bne.n	800775e <_dtoa_r+0xb66>
 8007758:	9b08      	ldr	r3, [sp, #32]
 800775a:	07db      	lsls	r3, r3, #31
 800775c:	d4ae      	bmi.n	80076bc <_dtoa_r+0xac4>
 800775e:	463b      	mov	r3, r7
 8007760:	461f      	mov	r7, r3
 8007762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007766:	2a30      	cmp	r2, #48	; 0x30
 8007768:	d0fa      	beq.n	8007760 <_dtoa_r+0xb68>
 800776a:	e6f9      	b.n	8007560 <_dtoa_r+0x968>
 800776c:	9a03      	ldr	r2, [sp, #12]
 800776e:	429a      	cmp	r2, r3
 8007770:	d1a5      	bne.n	80076be <_dtoa_r+0xac6>
 8007772:	2331      	movs	r3, #49	; 0x31
 8007774:	f10a 0a01 	add.w	sl, sl, #1
 8007778:	e779      	b.n	800766e <_dtoa_r+0xa76>
 800777a:	4b14      	ldr	r3, [pc, #80]	; (80077cc <_dtoa_r+0xbd4>)
 800777c:	f7ff baa8 	b.w	8006cd0 <_dtoa_r+0xd8>
 8007780:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007782:	2b00      	cmp	r3, #0
 8007784:	f47f aa81 	bne.w	8006c8a <_dtoa_r+0x92>
 8007788:	4b11      	ldr	r3, [pc, #68]	; (80077d0 <_dtoa_r+0xbd8>)
 800778a:	f7ff baa1 	b.w	8006cd0 <_dtoa_r+0xd8>
 800778e:	f1b9 0f00 	cmp.w	r9, #0
 8007792:	dc03      	bgt.n	800779c <_dtoa_r+0xba4>
 8007794:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007796:	2b02      	cmp	r3, #2
 8007798:	f73f aecb 	bgt.w	8007532 <_dtoa_r+0x93a>
 800779c:	9f03      	ldr	r7, [sp, #12]
 800779e:	4621      	mov	r1, r4
 80077a0:	4658      	mov	r0, fp
 80077a2:	f7ff f99d 	bl	8006ae0 <quorem>
 80077a6:	9a03      	ldr	r2, [sp, #12]
 80077a8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80077ac:	f807 3b01 	strb.w	r3, [r7], #1
 80077b0:	1aba      	subs	r2, r7, r2
 80077b2:	4591      	cmp	r9, r2
 80077b4:	ddba      	ble.n	800772c <_dtoa_r+0xb34>
 80077b6:	4659      	mov	r1, fp
 80077b8:	2300      	movs	r3, #0
 80077ba:	220a      	movs	r2, #10
 80077bc:	4628      	mov	r0, r5
 80077be:	f000 fc0b 	bl	8007fd8 <__multadd>
 80077c2:	4683      	mov	fp, r0
 80077c4:	e7eb      	b.n	800779e <_dtoa_r+0xba6>
 80077c6:	bf00      	nop
 80077c8:	08009b98 	.word	0x08009b98
 80077cc:	08009998 	.word	0x08009998
 80077d0:	08009b19 	.word	0x08009b19

080077d4 <rshift>:
 80077d4:	6903      	ldr	r3, [r0, #16]
 80077d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80077de:	f100 0414 	add.w	r4, r0, #20
 80077e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80077e6:	dd46      	ble.n	8007876 <rshift+0xa2>
 80077e8:	f011 011f 	ands.w	r1, r1, #31
 80077ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80077f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80077f4:	d10c      	bne.n	8007810 <rshift+0x3c>
 80077f6:	4629      	mov	r1, r5
 80077f8:	f100 0710 	add.w	r7, r0, #16
 80077fc:	42b1      	cmp	r1, r6
 80077fe:	d335      	bcc.n	800786c <rshift+0x98>
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	1eea      	subs	r2, r5, #3
 8007806:	4296      	cmp	r6, r2
 8007808:	bf38      	it	cc
 800780a:	2300      	movcc	r3, #0
 800780c:	4423      	add	r3, r4
 800780e:	e015      	b.n	800783c <rshift+0x68>
 8007810:	46a1      	mov	r9, r4
 8007812:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007816:	f1c1 0820 	rsb	r8, r1, #32
 800781a:	40cf      	lsrs	r7, r1
 800781c:	f105 0e04 	add.w	lr, r5, #4
 8007820:	4576      	cmp	r6, lr
 8007822:	46f4      	mov	ip, lr
 8007824:	d816      	bhi.n	8007854 <rshift+0x80>
 8007826:	1a9a      	subs	r2, r3, r2
 8007828:	0092      	lsls	r2, r2, #2
 800782a:	3a04      	subs	r2, #4
 800782c:	3501      	adds	r5, #1
 800782e:	42ae      	cmp	r6, r5
 8007830:	bf38      	it	cc
 8007832:	2200      	movcc	r2, #0
 8007834:	18a3      	adds	r3, r4, r2
 8007836:	50a7      	str	r7, [r4, r2]
 8007838:	b107      	cbz	r7, 800783c <rshift+0x68>
 800783a:	3304      	adds	r3, #4
 800783c:	42a3      	cmp	r3, r4
 800783e:	eba3 0204 	sub.w	r2, r3, r4
 8007842:	bf08      	it	eq
 8007844:	2300      	moveq	r3, #0
 8007846:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800784a:	6102      	str	r2, [r0, #16]
 800784c:	bf08      	it	eq
 800784e:	6143      	streq	r3, [r0, #20]
 8007850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007854:	f8dc c000 	ldr.w	ip, [ip]
 8007858:	fa0c fc08 	lsl.w	ip, ip, r8
 800785c:	ea4c 0707 	orr.w	r7, ip, r7
 8007860:	f849 7b04 	str.w	r7, [r9], #4
 8007864:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007868:	40cf      	lsrs	r7, r1
 800786a:	e7d9      	b.n	8007820 <rshift+0x4c>
 800786c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007870:	f847 cf04 	str.w	ip, [r7, #4]!
 8007874:	e7c2      	b.n	80077fc <rshift+0x28>
 8007876:	4623      	mov	r3, r4
 8007878:	e7e0      	b.n	800783c <rshift+0x68>

0800787a <__hexdig_fun>:
 800787a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800787e:	2b09      	cmp	r3, #9
 8007880:	d802      	bhi.n	8007888 <__hexdig_fun+0xe>
 8007882:	3820      	subs	r0, #32
 8007884:	b2c0      	uxtb	r0, r0
 8007886:	4770      	bx	lr
 8007888:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800788c:	2b05      	cmp	r3, #5
 800788e:	d801      	bhi.n	8007894 <__hexdig_fun+0x1a>
 8007890:	3847      	subs	r0, #71	; 0x47
 8007892:	e7f7      	b.n	8007884 <__hexdig_fun+0xa>
 8007894:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007898:	2b05      	cmp	r3, #5
 800789a:	d801      	bhi.n	80078a0 <__hexdig_fun+0x26>
 800789c:	3827      	subs	r0, #39	; 0x27
 800789e:	e7f1      	b.n	8007884 <__hexdig_fun+0xa>
 80078a0:	2000      	movs	r0, #0
 80078a2:	4770      	bx	lr

080078a4 <__gethex>:
 80078a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	b08b      	sub	sp, #44	; 0x2c
 80078aa:	9305      	str	r3, [sp, #20]
 80078ac:	4bb2      	ldr	r3, [pc, #712]	; (8007b78 <__gethex+0x2d4>)
 80078ae:	9002      	str	r0, [sp, #8]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	468b      	mov	fp, r1
 80078b4:	4618      	mov	r0, r3
 80078b6:	4690      	mov	r8, r2
 80078b8:	9303      	str	r3, [sp, #12]
 80078ba:	f7f8 fc61 	bl	8000180 <strlen>
 80078be:	4682      	mov	sl, r0
 80078c0:	9b03      	ldr	r3, [sp, #12]
 80078c2:	f8db 2000 	ldr.w	r2, [fp]
 80078c6:	4403      	add	r3, r0
 80078c8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80078cc:	9306      	str	r3, [sp, #24]
 80078ce:	1c93      	adds	r3, r2, #2
 80078d0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80078d4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80078d8:	32fe      	adds	r2, #254	; 0xfe
 80078da:	18d1      	adds	r1, r2, r3
 80078dc:	461f      	mov	r7, r3
 80078de:	f813 0b01 	ldrb.w	r0, [r3], #1
 80078e2:	9101      	str	r1, [sp, #4]
 80078e4:	2830      	cmp	r0, #48	; 0x30
 80078e6:	d0f8      	beq.n	80078da <__gethex+0x36>
 80078e8:	f7ff ffc7 	bl	800787a <__hexdig_fun>
 80078ec:	4604      	mov	r4, r0
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d13a      	bne.n	8007968 <__gethex+0xc4>
 80078f2:	4652      	mov	r2, sl
 80078f4:	4638      	mov	r0, r7
 80078f6:	9903      	ldr	r1, [sp, #12]
 80078f8:	f001 fa26 	bl	8008d48 <strncmp>
 80078fc:	4605      	mov	r5, r0
 80078fe:	2800      	cmp	r0, #0
 8007900:	d166      	bne.n	80079d0 <__gethex+0x12c>
 8007902:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007906:	eb07 060a 	add.w	r6, r7, sl
 800790a:	f7ff ffb6 	bl	800787a <__hexdig_fun>
 800790e:	2800      	cmp	r0, #0
 8007910:	d060      	beq.n	80079d4 <__gethex+0x130>
 8007912:	4633      	mov	r3, r6
 8007914:	7818      	ldrb	r0, [r3, #0]
 8007916:	461f      	mov	r7, r3
 8007918:	2830      	cmp	r0, #48	; 0x30
 800791a:	f103 0301 	add.w	r3, r3, #1
 800791e:	d0f9      	beq.n	8007914 <__gethex+0x70>
 8007920:	f7ff ffab 	bl	800787a <__hexdig_fun>
 8007924:	2301      	movs	r3, #1
 8007926:	fab0 f480 	clz	r4, r0
 800792a:	4635      	mov	r5, r6
 800792c:	0964      	lsrs	r4, r4, #5
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	463a      	mov	r2, r7
 8007932:	4616      	mov	r6, r2
 8007934:	7830      	ldrb	r0, [r6, #0]
 8007936:	3201      	adds	r2, #1
 8007938:	f7ff ff9f 	bl	800787a <__hexdig_fun>
 800793c:	2800      	cmp	r0, #0
 800793e:	d1f8      	bne.n	8007932 <__gethex+0x8e>
 8007940:	4652      	mov	r2, sl
 8007942:	4630      	mov	r0, r6
 8007944:	9903      	ldr	r1, [sp, #12]
 8007946:	f001 f9ff 	bl	8008d48 <strncmp>
 800794a:	b980      	cbnz	r0, 800796e <__gethex+0xca>
 800794c:	b94d      	cbnz	r5, 8007962 <__gethex+0xbe>
 800794e:	eb06 050a 	add.w	r5, r6, sl
 8007952:	462a      	mov	r2, r5
 8007954:	4616      	mov	r6, r2
 8007956:	7830      	ldrb	r0, [r6, #0]
 8007958:	3201      	adds	r2, #1
 800795a:	f7ff ff8e 	bl	800787a <__hexdig_fun>
 800795e:	2800      	cmp	r0, #0
 8007960:	d1f8      	bne.n	8007954 <__gethex+0xb0>
 8007962:	1bad      	subs	r5, r5, r6
 8007964:	00ad      	lsls	r5, r5, #2
 8007966:	e004      	b.n	8007972 <__gethex+0xce>
 8007968:	2400      	movs	r4, #0
 800796a:	4625      	mov	r5, r4
 800796c:	e7e0      	b.n	8007930 <__gethex+0x8c>
 800796e:	2d00      	cmp	r5, #0
 8007970:	d1f7      	bne.n	8007962 <__gethex+0xbe>
 8007972:	7833      	ldrb	r3, [r6, #0]
 8007974:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007978:	2b50      	cmp	r3, #80	; 0x50
 800797a:	d139      	bne.n	80079f0 <__gethex+0x14c>
 800797c:	7873      	ldrb	r3, [r6, #1]
 800797e:	2b2b      	cmp	r3, #43	; 0x2b
 8007980:	d02a      	beq.n	80079d8 <__gethex+0x134>
 8007982:	2b2d      	cmp	r3, #45	; 0x2d
 8007984:	d02c      	beq.n	80079e0 <__gethex+0x13c>
 8007986:	f04f 0900 	mov.w	r9, #0
 800798a:	1c71      	adds	r1, r6, #1
 800798c:	7808      	ldrb	r0, [r1, #0]
 800798e:	f7ff ff74 	bl	800787a <__hexdig_fun>
 8007992:	1e43      	subs	r3, r0, #1
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b18      	cmp	r3, #24
 8007998:	d82a      	bhi.n	80079f0 <__gethex+0x14c>
 800799a:	f1a0 0210 	sub.w	r2, r0, #16
 800799e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80079a2:	f7ff ff6a 	bl	800787a <__hexdig_fun>
 80079a6:	1e43      	subs	r3, r0, #1
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b18      	cmp	r3, #24
 80079ac:	d91b      	bls.n	80079e6 <__gethex+0x142>
 80079ae:	f1b9 0f00 	cmp.w	r9, #0
 80079b2:	d000      	beq.n	80079b6 <__gethex+0x112>
 80079b4:	4252      	negs	r2, r2
 80079b6:	4415      	add	r5, r2
 80079b8:	f8cb 1000 	str.w	r1, [fp]
 80079bc:	b1d4      	cbz	r4, 80079f4 <__gethex+0x150>
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	bf14      	ite	ne
 80079c4:	2700      	movne	r7, #0
 80079c6:	2706      	moveq	r7, #6
 80079c8:	4638      	mov	r0, r7
 80079ca:	b00b      	add	sp, #44	; 0x2c
 80079cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d0:	463e      	mov	r6, r7
 80079d2:	4625      	mov	r5, r4
 80079d4:	2401      	movs	r4, #1
 80079d6:	e7cc      	b.n	8007972 <__gethex+0xce>
 80079d8:	f04f 0900 	mov.w	r9, #0
 80079dc:	1cb1      	adds	r1, r6, #2
 80079de:	e7d5      	b.n	800798c <__gethex+0xe8>
 80079e0:	f04f 0901 	mov.w	r9, #1
 80079e4:	e7fa      	b.n	80079dc <__gethex+0x138>
 80079e6:	230a      	movs	r3, #10
 80079e8:	fb03 0202 	mla	r2, r3, r2, r0
 80079ec:	3a10      	subs	r2, #16
 80079ee:	e7d6      	b.n	800799e <__gethex+0xfa>
 80079f0:	4631      	mov	r1, r6
 80079f2:	e7e1      	b.n	80079b8 <__gethex+0x114>
 80079f4:	4621      	mov	r1, r4
 80079f6:	1bf3      	subs	r3, r6, r7
 80079f8:	3b01      	subs	r3, #1
 80079fa:	2b07      	cmp	r3, #7
 80079fc:	dc0a      	bgt.n	8007a14 <__gethex+0x170>
 80079fe:	9802      	ldr	r0, [sp, #8]
 8007a00:	f000 fa88 	bl	8007f14 <_Balloc>
 8007a04:	4604      	mov	r4, r0
 8007a06:	b940      	cbnz	r0, 8007a1a <__gethex+0x176>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	21de      	movs	r1, #222	; 0xde
 8007a0c:	4b5b      	ldr	r3, [pc, #364]	; (8007b7c <__gethex+0x2d8>)
 8007a0e:	485c      	ldr	r0, [pc, #368]	; (8007b80 <__gethex+0x2dc>)
 8007a10:	f001 f9bc 	bl	8008d8c <__assert_func>
 8007a14:	3101      	adds	r1, #1
 8007a16:	105b      	asrs	r3, r3, #1
 8007a18:	e7ef      	b.n	80079fa <__gethex+0x156>
 8007a1a:	f04f 0b00 	mov.w	fp, #0
 8007a1e:	f100 0914 	add.w	r9, r0, #20
 8007a22:	f1ca 0301 	rsb	r3, sl, #1
 8007a26:	f8cd 9010 	str.w	r9, [sp, #16]
 8007a2a:	f8cd b004 	str.w	fp, [sp, #4]
 8007a2e:	9308      	str	r3, [sp, #32]
 8007a30:	42b7      	cmp	r7, r6
 8007a32:	d33f      	bcc.n	8007ab4 <__gethex+0x210>
 8007a34:	9f04      	ldr	r7, [sp, #16]
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	f847 3b04 	str.w	r3, [r7], #4
 8007a3c:	eba7 0709 	sub.w	r7, r7, r9
 8007a40:	10bf      	asrs	r7, r7, #2
 8007a42:	6127      	str	r7, [r4, #16]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 fb57 	bl	80080f8 <__hi0bits>
 8007a4a:	017f      	lsls	r7, r7, #5
 8007a4c:	f8d8 6000 	ldr.w	r6, [r8]
 8007a50:	1a3f      	subs	r7, r7, r0
 8007a52:	42b7      	cmp	r7, r6
 8007a54:	dd62      	ble.n	8007b1c <__gethex+0x278>
 8007a56:	1bbf      	subs	r7, r7, r6
 8007a58:	4639      	mov	r1, r7
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fef1 	bl	8008842 <__any_on>
 8007a60:	4682      	mov	sl, r0
 8007a62:	b1a8      	cbz	r0, 8007a90 <__gethex+0x1ec>
 8007a64:	f04f 0a01 	mov.w	sl, #1
 8007a68:	1e7b      	subs	r3, r7, #1
 8007a6a:	1159      	asrs	r1, r3, #5
 8007a6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007a70:	f003 021f 	and.w	r2, r3, #31
 8007a74:	fa0a f202 	lsl.w	r2, sl, r2
 8007a78:	420a      	tst	r2, r1
 8007a7a:	d009      	beq.n	8007a90 <__gethex+0x1ec>
 8007a7c:	4553      	cmp	r3, sl
 8007a7e:	dd05      	ble.n	8007a8c <__gethex+0x1e8>
 8007a80:	4620      	mov	r0, r4
 8007a82:	1eb9      	subs	r1, r7, #2
 8007a84:	f000 fedd 	bl	8008842 <__any_on>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d144      	bne.n	8007b16 <__gethex+0x272>
 8007a8c:	f04f 0a02 	mov.w	sl, #2
 8007a90:	4639      	mov	r1, r7
 8007a92:	4620      	mov	r0, r4
 8007a94:	f7ff fe9e 	bl	80077d4 <rshift>
 8007a98:	443d      	add	r5, r7
 8007a9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a9e:	42ab      	cmp	r3, r5
 8007aa0:	da4a      	bge.n	8007b38 <__gethex+0x294>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	9802      	ldr	r0, [sp, #8]
 8007aa6:	f000 fa75 	bl	8007f94 <_Bfree>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007aae:	27a3      	movs	r7, #163	; 0xa3
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	e789      	b.n	80079c8 <__gethex+0x124>
 8007ab4:	1e73      	subs	r3, r6, #1
 8007ab6:	9a06      	ldr	r2, [sp, #24]
 8007ab8:	9307      	str	r3, [sp, #28]
 8007aba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d019      	beq.n	8007af6 <__gethex+0x252>
 8007ac2:	f1bb 0f20 	cmp.w	fp, #32
 8007ac6:	d107      	bne.n	8007ad8 <__gethex+0x234>
 8007ac8:	9b04      	ldr	r3, [sp, #16]
 8007aca:	9a01      	ldr	r2, [sp, #4]
 8007acc:	f843 2b04 	str.w	r2, [r3], #4
 8007ad0:	9304      	str	r3, [sp, #16]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	469b      	mov	fp, r3
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007adc:	f7ff fecd 	bl	800787a <__hexdig_fun>
 8007ae0:	9b01      	ldr	r3, [sp, #4]
 8007ae2:	f000 000f 	and.w	r0, r0, #15
 8007ae6:	fa00 f00b 	lsl.w	r0, r0, fp
 8007aea:	4303      	orrs	r3, r0
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	f10b 0b04 	add.w	fp, fp, #4
 8007af2:	9b07      	ldr	r3, [sp, #28]
 8007af4:	e00d      	b.n	8007b12 <__gethex+0x26e>
 8007af6:	9a08      	ldr	r2, [sp, #32]
 8007af8:	1e73      	subs	r3, r6, #1
 8007afa:	4413      	add	r3, r2
 8007afc:	42bb      	cmp	r3, r7
 8007afe:	d3e0      	bcc.n	8007ac2 <__gethex+0x21e>
 8007b00:	4618      	mov	r0, r3
 8007b02:	4652      	mov	r2, sl
 8007b04:	9903      	ldr	r1, [sp, #12]
 8007b06:	9309      	str	r3, [sp, #36]	; 0x24
 8007b08:	f001 f91e 	bl	8008d48 <strncmp>
 8007b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d1d7      	bne.n	8007ac2 <__gethex+0x21e>
 8007b12:	461e      	mov	r6, r3
 8007b14:	e78c      	b.n	8007a30 <__gethex+0x18c>
 8007b16:	f04f 0a03 	mov.w	sl, #3
 8007b1a:	e7b9      	b.n	8007a90 <__gethex+0x1ec>
 8007b1c:	da09      	bge.n	8007b32 <__gethex+0x28e>
 8007b1e:	1bf7      	subs	r7, r6, r7
 8007b20:	4621      	mov	r1, r4
 8007b22:	463a      	mov	r2, r7
 8007b24:	9802      	ldr	r0, [sp, #8]
 8007b26:	f000 fc4d 	bl	80083c4 <__lshift>
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	1bed      	subs	r5, r5, r7
 8007b2e:	f100 0914 	add.w	r9, r0, #20
 8007b32:	f04f 0a00 	mov.w	sl, #0
 8007b36:	e7b0      	b.n	8007a9a <__gethex+0x1f6>
 8007b38:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007b3c:	42a8      	cmp	r0, r5
 8007b3e:	dd72      	ble.n	8007c26 <__gethex+0x382>
 8007b40:	1b45      	subs	r5, r0, r5
 8007b42:	42ae      	cmp	r6, r5
 8007b44:	dc35      	bgt.n	8007bb2 <__gethex+0x30e>
 8007b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d029      	beq.n	8007ba2 <__gethex+0x2fe>
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d02b      	beq.n	8007baa <__gethex+0x306>
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d11c      	bne.n	8007b90 <__gethex+0x2ec>
 8007b56:	42ae      	cmp	r6, r5
 8007b58:	d11a      	bne.n	8007b90 <__gethex+0x2ec>
 8007b5a:	2e01      	cmp	r6, #1
 8007b5c:	d112      	bne.n	8007b84 <__gethex+0x2e0>
 8007b5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007b62:	9a05      	ldr	r2, [sp, #20]
 8007b64:	2762      	movs	r7, #98	; 0x62
 8007b66:	6013      	str	r3, [r2, #0]
 8007b68:	2301      	movs	r3, #1
 8007b6a:	6123      	str	r3, [r4, #16]
 8007b6c:	f8c9 3000 	str.w	r3, [r9]
 8007b70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b72:	601c      	str	r4, [r3, #0]
 8007b74:	e728      	b.n	80079c8 <__gethex+0x124>
 8007b76:	bf00      	nop
 8007b78:	08009c10 	.word	0x08009c10
 8007b7c:	08009b98 	.word	0x08009b98
 8007b80:	08009ba9 	.word	0x08009ba9
 8007b84:	4620      	mov	r0, r4
 8007b86:	1e71      	subs	r1, r6, #1
 8007b88:	f000 fe5b 	bl	8008842 <__any_on>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d1e6      	bne.n	8007b5e <__gethex+0x2ba>
 8007b90:	4621      	mov	r1, r4
 8007b92:	9802      	ldr	r0, [sp, #8]
 8007b94:	f000 f9fe 	bl	8007f94 <_Bfree>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b9c:	2750      	movs	r7, #80	; 0x50
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	e712      	b.n	80079c8 <__gethex+0x124>
 8007ba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1f3      	bne.n	8007b90 <__gethex+0x2ec>
 8007ba8:	e7d9      	b.n	8007b5e <__gethex+0x2ba>
 8007baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1d6      	bne.n	8007b5e <__gethex+0x2ba>
 8007bb0:	e7ee      	b.n	8007b90 <__gethex+0x2ec>
 8007bb2:	1e6f      	subs	r7, r5, #1
 8007bb4:	f1ba 0f00 	cmp.w	sl, #0
 8007bb8:	d132      	bne.n	8007c20 <__gethex+0x37c>
 8007bba:	b127      	cbz	r7, 8007bc6 <__gethex+0x322>
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f000 fe3f 	bl	8008842 <__any_on>
 8007bc4:	4682      	mov	sl, r0
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	117b      	asrs	r3, r7, #5
 8007bca:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007bce:	f007 071f 	and.w	r7, r7, #31
 8007bd2:	fa01 f707 	lsl.w	r7, r1, r7
 8007bd6:	421f      	tst	r7, r3
 8007bd8:	f04f 0702 	mov.w	r7, #2
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4620      	mov	r0, r4
 8007be0:	bf18      	it	ne
 8007be2:	f04a 0a02 	orrne.w	sl, sl, #2
 8007be6:	1b76      	subs	r6, r6, r5
 8007be8:	f7ff fdf4 	bl	80077d4 <rshift>
 8007bec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007bf0:	f1ba 0f00 	cmp.w	sl, #0
 8007bf4:	d048      	beq.n	8007c88 <__gethex+0x3e4>
 8007bf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d015      	beq.n	8007c2a <__gethex+0x386>
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d017      	beq.n	8007c32 <__gethex+0x38e>
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d109      	bne.n	8007c1a <__gethex+0x376>
 8007c06:	f01a 0f02 	tst.w	sl, #2
 8007c0a:	d006      	beq.n	8007c1a <__gethex+0x376>
 8007c0c:	f8d9 0000 	ldr.w	r0, [r9]
 8007c10:	ea4a 0a00 	orr.w	sl, sl, r0
 8007c14:	f01a 0f01 	tst.w	sl, #1
 8007c18:	d10e      	bne.n	8007c38 <__gethex+0x394>
 8007c1a:	f047 0710 	orr.w	r7, r7, #16
 8007c1e:	e033      	b.n	8007c88 <__gethex+0x3e4>
 8007c20:	f04f 0a01 	mov.w	sl, #1
 8007c24:	e7cf      	b.n	8007bc6 <__gethex+0x322>
 8007c26:	2701      	movs	r7, #1
 8007c28:	e7e2      	b.n	8007bf0 <__gethex+0x34c>
 8007c2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c2c:	f1c3 0301 	rsb	r3, r3, #1
 8007c30:	9315      	str	r3, [sp, #84]	; 0x54
 8007c32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0f0      	beq.n	8007c1a <__gethex+0x376>
 8007c38:	f04f 0c00 	mov.w	ip, #0
 8007c3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c40:	f104 0314 	add.w	r3, r4, #20
 8007c44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007c48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c52:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007c56:	d01c      	beq.n	8007c92 <__gethex+0x3ee>
 8007c58:	3201      	adds	r2, #1
 8007c5a:	6002      	str	r2, [r0, #0]
 8007c5c:	2f02      	cmp	r7, #2
 8007c5e:	f104 0314 	add.w	r3, r4, #20
 8007c62:	d13d      	bne.n	8007ce0 <__gethex+0x43c>
 8007c64:	f8d8 2000 	ldr.w	r2, [r8]
 8007c68:	3a01      	subs	r2, #1
 8007c6a:	42b2      	cmp	r2, r6
 8007c6c:	d10a      	bne.n	8007c84 <__gethex+0x3e0>
 8007c6e:	2201      	movs	r2, #1
 8007c70:	1171      	asrs	r1, r6, #5
 8007c72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c76:	f006 061f 	and.w	r6, r6, #31
 8007c7a:	fa02 f606 	lsl.w	r6, r2, r6
 8007c7e:	421e      	tst	r6, r3
 8007c80:	bf18      	it	ne
 8007c82:	4617      	movne	r7, r2
 8007c84:	f047 0720 	orr.w	r7, r7, #32
 8007c88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c8a:	601c      	str	r4, [r3, #0]
 8007c8c:	9b05      	ldr	r3, [sp, #20]
 8007c8e:	601d      	str	r5, [r3, #0]
 8007c90:	e69a      	b.n	80079c8 <__gethex+0x124>
 8007c92:	4299      	cmp	r1, r3
 8007c94:	f843 cc04 	str.w	ip, [r3, #-4]
 8007c98:	d8d8      	bhi.n	8007c4c <__gethex+0x3a8>
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	459b      	cmp	fp, r3
 8007c9e:	db17      	blt.n	8007cd0 <__gethex+0x42c>
 8007ca0:	6861      	ldr	r1, [r4, #4]
 8007ca2:	9802      	ldr	r0, [sp, #8]
 8007ca4:	3101      	adds	r1, #1
 8007ca6:	f000 f935 	bl	8007f14 <_Balloc>
 8007caa:	4681      	mov	r9, r0
 8007cac:	b918      	cbnz	r0, 8007cb6 <__gethex+0x412>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	2184      	movs	r1, #132	; 0x84
 8007cb2:	4b19      	ldr	r3, [pc, #100]	; (8007d18 <__gethex+0x474>)
 8007cb4:	e6ab      	b.n	8007a0e <__gethex+0x16a>
 8007cb6:	6922      	ldr	r2, [r4, #16]
 8007cb8:	f104 010c 	add.w	r1, r4, #12
 8007cbc:	3202      	adds	r2, #2
 8007cbe:	0092      	lsls	r2, r2, #2
 8007cc0:	300c      	adds	r0, #12
 8007cc2:	f000 f919 	bl	8007ef8 <memcpy>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	9802      	ldr	r0, [sp, #8]
 8007cca:	f000 f963 	bl	8007f94 <_Bfree>
 8007cce:	464c      	mov	r4, r9
 8007cd0:	6923      	ldr	r3, [r4, #16]
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	6122      	str	r2, [r4, #16]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007cdc:	615a      	str	r2, [r3, #20]
 8007cde:	e7bd      	b.n	8007c5c <__gethex+0x3b8>
 8007ce0:	6922      	ldr	r2, [r4, #16]
 8007ce2:	455a      	cmp	r2, fp
 8007ce4:	dd0b      	ble.n	8007cfe <__gethex+0x45a>
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f7ff fd73 	bl	80077d4 <rshift>
 8007cee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cf2:	3501      	adds	r5, #1
 8007cf4:	42ab      	cmp	r3, r5
 8007cf6:	f6ff aed4 	blt.w	8007aa2 <__gethex+0x1fe>
 8007cfa:	2701      	movs	r7, #1
 8007cfc:	e7c2      	b.n	8007c84 <__gethex+0x3e0>
 8007cfe:	f016 061f 	ands.w	r6, r6, #31
 8007d02:	d0fa      	beq.n	8007cfa <__gethex+0x456>
 8007d04:	4453      	add	r3, sl
 8007d06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d0a:	f000 f9f5 	bl	80080f8 <__hi0bits>
 8007d0e:	f1c6 0620 	rsb	r6, r6, #32
 8007d12:	42b0      	cmp	r0, r6
 8007d14:	dbe7      	blt.n	8007ce6 <__gethex+0x442>
 8007d16:	e7f0      	b.n	8007cfa <__gethex+0x456>
 8007d18:	08009b98 	.word	0x08009b98

08007d1c <L_shift>:
 8007d1c:	f1c2 0208 	rsb	r2, r2, #8
 8007d20:	0092      	lsls	r2, r2, #2
 8007d22:	b570      	push	{r4, r5, r6, lr}
 8007d24:	f1c2 0620 	rsb	r6, r2, #32
 8007d28:	6843      	ldr	r3, [r0, #4]
 8007d2a:	6804      	ldr	r4, [r0, #0]
 8007d2c:	fa03 f506 	lsl.w	r5, r3, r6
 8007d30:	432c      	orrs	r4, r5
 8007d32:	40d3      	lsrs	r3, r2
 8007d34:	6004      	str	r4, [r0, #0]
 8007d36:	f840 3f04 	str.w	r3, [r0, #4]!
 8007d3a:	4288      	cmp	r0, r1
 8007d3c:	d3f4      	bcc.n	8007d28 <L_shift+0xc>
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}

08007d40 <__match>:
 8007d40:	b530      	push	{r4, r5, lr}
 8007d42:	6803      	ldr	r3, [r0, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d4a:	b914      	cbnz	r4, 8007d52 <__match+0x12>
 8007d4c:	6003      	str	r3, [r0, #0]
 8007d4e:	2001      	movs	r0, #1
 8007d50:	bd30      	pop	{r4, r5, pc}
 8007d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007d5a:	2d19      	cmp	r5, #25
 8007d5c:	bf98      	it	ls
 8007d5e:	3220      	addls	r2, #32
 8007d60:	42a2      	cmp	r2, r4
 8007d62:	d0f0      	beq.n	8007d46 <__match+0x6>
 8007d64:	2000      	movs	r0, #0
 8007d66:	e7f3      	b.n	8007d50 <__match+0x10>

08007d68 <__hexnan>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	2500      	movs	r5, #0
 8007d6e:	680b      	ldr	r3, [r1, #0]
 8007d70:	4682      	mov	sl, r0
 8007d72:	115e      	asrs	r6, r3, #5
 8007d74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d78:	f013 031f 	ands.w	r3, r3, #31
 8007d7c:	bf18      	it	ne
 8007d7e:	3604      	addne	r6, #4
 8007d80:	1f37      	subs	r7, r6, #4
 8007d82:	46b9      	mov	r9, r7
 8007d84:	463c      	mov	r4, r7
 8007d86:	46ab      	mov	fp, r5
 8007d88:	b087      	sub	sp, #28
 8007d8a:	4690      	mov	r8, r2
 8007d8c:	6802      	ldr	r2, [r0, #0]
 8007d8e:	9301      	str	r3, [sp, #4]
 8007d90:	f846 5c04 	str.w	r5, [r6, #-4]
 8007d94:	9502      	str	r5, [sp, #8]
 8007d96:	7851      	ldrb	r1, [r2, #1]
 8007d98:	1c53      	adds	r3, r2, #1
 8007d9a:	9303      	str	r3, [sp, #12]
 8007d9c:	b341      	cbz	r1, 8007df0 <__hexnan+0x88>
 8007d9e:	4608      	mov	r0, r1
 8007da0:	9205      	str	r2, [sp, #20]
 8007da2:	9104      	str	r1, [sp, #16]
 8007da4:	f7ff fd69 	bl	800787a <__hexdig_fun>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d14f      	bne.n	8007e4c <__hexnan+0xe4>
 8007dac:	9904      	ldr	r1, [sp, #16]
 8007dae:	9a05      	ldr	r2, [sp, #20]
 8007db0:	2920      	cmp	r1, #32
 8007db2:	d818      	bhi.n	8007de6 <__hexnan+0x7e>
 8007db4:	9b02      	ldr	r3, [sp, #8]
 8007db6:	459b      	cmp	fp, r3
 8007db8:	dd13      	ble.n	8007de2 <__hexnan+0x7a>
 8007dba:	454c      	cmp	r4, r9
 8007dbc:	d206      	bcs.n	8007dcc <__hexnan+0x64>
 8007dbe:	2d07      	cmp	r5, #7
 8007dc0:	dc04      	bgt.n	8007dcc <__hexnan+0x64>
 8007dc2:	462a      	mov	r2, r5
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f7ff ffa8 	bl	8007d1c <L_shift>
 8007dcc:	4544      	cmp	r4, r8
 8007dce:	d950      	bls.n	8007e72 <__hexnan+0x10a>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f1a4 0904 	sub.w	r9, r4, #4
 8007dd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007dda:	461d      	mov	r5, r3
 8007ddc:	464c      	mov	r4, r9
 8007dde:	f8cd b008 	str.w	fp, [sp, #8]
 8007de2:	9a03      	ldr	r2, [sp, #12]
 8007de4:	e7d7      	b.n	8007d96 <__hexnan+0x2e>
 8007de6:	2929      	cmp	r1, #41	; 0x29
 8007de8:	d156      	bne.n	8007e98 <__hexnan+0x130>
 8007dea:	3202      	adds	r2, #2
 8007dec:	f8ca 2000 	str.w	r2, [sl]
 8007df0:	f1bb 0f00 	cmp.w	fp, #0
 8007df4:	d050      	beq.n	8007e98 <__hexnan+0x130>
 8007df6:	454c      	cmp	r4, r9
 8007df8:	d206      	bcs.n	8007e08 <__hexnan+0xa0>
 8007dfa:	2d07      	cmp	r5, #7
 8007dfc:	dc04      	bgt.n	8007e08 <__hexnan+0xa0>
 8007dfe:	462a      	mov	r2, r5
 8007e00:	4649      	mov	r1, r9
 8007e02:	4620      	mov	r0, r4
 8007e04:	f7ff ff8a 	bl	8007d1c <L_shift>
 8007e08:	4544      	cmp	r4, r8
 8007e0a:	d934      	bls.n	8007e76 <__hexnan+0x10e>
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	f1a8 0204 	sub.w	r2, r8, #4
 8007e12:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e16:	429f      	cmp	r7, r3
 8007e18:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e1c:	d2f9      	bcs.n	8007e12 <__hexnan+0xaa>
 8007e1e:	1b3b      	subs	r3, r7, r4
 8007e20:	f023 0303 	bic.w	r3, r3, #3
 8007e24:	3304      	adds	r3, #4
 8007e26:	3401      	adds	r4, #1
 8007e28:	3e03      	subs	r6, #3
 8007e2a:	42b4      	cmp	r4, r6
 8007e2c:	bf88      	it	hi
 8007e2e:	2304      	movhi	r3, #4
 8007e30:	2200      	movs	r2, #0
 8007e32:	4443      	add	r3, r8
 8007e34:	f843 2b04 	str.w	r2, [r3], #4
 8007e38:	429f      	cmp	r7, r3
 8007e3a:	d2fb      	bcs.n	8007e34 <__hexnan+0xcc>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	b91b      	cbnz	r3, 8007e48 <__hexnan+0xe0>
 8007e40:	4547      	cmp	r7, r8
 8007e42:	d127      	bne.n	8007e94 <__hexnan+0x12c>
 8007e44:	2301      	movs	r3, #1
 8007e46:	603b      	str	r3, [r7, #0]
 8007e48:	2005      	movs	r0, #5
 8007e4a:	e026      	b.n	8007e9a <__hexnan+0x132>
 8007e4c:	3501      	adds	r5, #1
 8007e4e:	2d08      	cmp	r5, #8
 8007e50:	f10b 0b01 	add.w	fp, fp, #1
 8007e54:	dd06      	ble.n	8007e64 <__hexnan+0xfc>
 8007e56:	4544      	cmp	r4, r8
 8007e58:	d9c3      	bls.n	8007de2 <__hexnan+0x7a>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2501      	movs	r5, #1
 8007e5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e62:	3c04      	subs	r4, #4
 8007e64:	6822      	ldr	r2, [r4, #0]
 8007e66:	f000 000f 	and.w	r0, r0, #15
 8007e6a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007e6e:	6022      	str	r2, [r4, #0]
 8007e70:	e7b7      	b.n	8007de2 <__hexnan+0x7a>
 8007e72:	2508      	movs	r5, #8
 8007e74:	e7b5      	b.n	8007de2 <__hexnan+0x7a>
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0df      	beq.n	8007e3c <__hexnan+0xd4>
 8007e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e80:	f1c3 0320 	rsb	r3, r3, #32
 8007e84:	fa22 f303 	lsr.w	r3, r2, r3
 8007e88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e8c:	401a      	ands	r2, r3
 8007e8e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007e92:	e7d3      	b.n	8007e3c <__hexnan+0xd4>
 8007e94:	3f04      	subs	r7, #4
 8007e96:	e7d1      	b.n	8007e3c <__hexnan+0xd4>
 8007e98:	2004      	movs	r0, #4
 8007e9a:	b007      	add	sp, #28
 8007e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ea0 <_localeconv_r>:
 8007ea0:	4800      	ldr	r0, [pc, #0]	; (8007ea4 <_localeconv_r+0x4>)
 8007ea2:	4770      	bx	lr
 8007ea4:	20000164 	.word	0x20000164

08007ea8 <malloc>:
 8007ea8:	4b02      	ldr	r3, [pc, #8]	; (8007eb4 <malloc+0xc>)
 8007eaa:	4601      	mov	r1, r0
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	f000 bd65 	b.w	800897c <_malloc_r>
 8007eb2:	bf00      	nop
 8007eb4:	2000000c 	.word	0x2000000c

08007eb8 <__ascii_mbtowc>:
 8007eb8:	b082      	sub	sp, #8
 8007eba:	b901      	cbnz	r1, 8007ebe <__ascii_mbtowc+0x6>
 8007ebc:	a901      	add	r1, sp, #4
 8007ebe:	b142      	cbz	r2, 8007ed2 <__ascii_mbtowc+0x1a>
 8007ec0:	b14b      	cbz	r3, 8007ed6 <__ascii_mbtowc+0x1e>
 8007ec2:	7813      	ldrb	r3, [r2, #0]
 8007ec4:	600b      	str	r3, [r1, #0]
 8007ec6:	7812      	ldrb	r2, [r2, #0]
 8007ec8:	1e10      	subs	r0, r2, #0
 8007eca:	bf18      	it	ne
 8007ecc:	2001      	movne	r0, #1
 8007ece:	b002      	add	sp, #8
 8007ed0:	4770      	bx	lr
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	e7fb      	b.n	8007ece <__ascii_mbtowc+0x16>
 8007ed6:	f06f 0001 	mvn.w	r0, #1
 8007eda:	e7f8      	b.n	8007ece <__ascii_mbtowc+0x16>

08007edc <memchr>:
 8007edc:	4603      	mov	r3, r0
 8007ede:	b510      	push	{r4, lr}
 8007ee0:	b2c9      	uxtb	r1, r1
 8007ee2:	4402      	add	r2, r0
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	d101      	bne.n	8007eee <memchr+0x12>
 8007eea:	2000      	movs	r0, #0
 8007eec:	e003      	b.n	8007ef6 <memchr+0x1a>
 8007eee:	7804      	ldrb	r4, [r0, #0]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	428c      	cmp	r4, r1
 8007ef4:	d1f6      	bne.n	8007ee4 <memchr+0x8>
 8007ef6:	bd10      	pop	{r4, pc}

08007ef8 <memcpy>:
 8007ef8:	440a      	add	r2, r1
 8007efa:	4291      	cmp	r1, r2
 8007efc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f00:	d100      	bne.n	8007f04 <memcpy+0xc>
 8007f02:	4770      	bx	lr
 8007f04:	b510      	push	{r4, lr}
 8007f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f0a:	4291      	cmp	r1, r2
 8007f0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f10:	d1f9      	bne.n	8007f06 <memcpy+0xe>
 8007f12:	bd10      	pop	{r4, pc}

08007f14 <_Balloc>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f18:	4604      	mov	r4, r0
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	b976      	cbnz	r6, 8007f3c <_Balloc+0x28>
 8007f1e:	2010      	movs	r0, #16
 8007f20:	f7ff ffc2 	bl	8007ea8 <malloc>
 8007f24:	4602      	mov	r2, r0
 8007f26:	6260      	str	r0, [r4, #36]	; 0x24
 8007f28:	b920      	cbnz	r0, 8007f34 <_Balloc+0x20>
 8007f2a:	2166      	movs	r1, #102	; 0x66
 8007f2c:	4b17      	ldr	r3, [pc, #92]	; (8007f8c <_Balloc+0x78>)
 8007f2e:	4818      	ldr	r0, [pc, #96]	; (8007f90 <_Balloc+0x7c>)
 8007f30:	f000 ff2c 	bl	8008d8c <__assert_func>
 8007f34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f38:	6006      	str	r6, [r0, #0]
 8007f3a:	60c6      	str	r6, [r0, #12]
 8007f3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f3e:	68f3      	ldr	r3, [r6, #12]
 8007f40:	b183      	cbz	r3, 8007f64 <_Balloc+0x50>
 8007f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f4a:	b9b8      	cbnz	r0, 8007f7c <_Balloc+0x68>
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	fa01 f605 	lsl.w	r6, r1, r5
 8007f52:	1d72      	adds	r2, r6, #5
 8007f54:	4620      	mov	r0, r4
 8007f56:	0092      	lsls	r2, r2, #2
 8007f58:	f000 fc94 	bl	8008884 <_calloc_r>
 8007f5c:	b160      	cbz	r0, 8007f78 <_Balloc+0x64>
 8007f5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f62:	e00e      	b.n	8007f82 <_Balloc+0x6e>
 8007f64:	2221      	movs	r2, #33	; 0x21
 8007f66:	2104      	movs	r1, #4
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 fc8b 	bl	8008884 <_calloc_r>
 8007f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f70:	60f0      	str	r0, [r6, #12]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e4      	bne.n	8007f42 <_Balloc+0x2e>
 8007f78:	2000      	movs	r0, #0
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	6802      	ldr	r2, [r0, #0]
 8007f7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f82:	2300      	movs	r3, #0
 8007f84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f88:	e7f7      	b.n	8007f7a <_Balloc+0x66>
 8007f8a:	bf00      	nop
 8007f8c:	08009b26 	.word	0x08009b26
 8007f90:	08009c24 	.word	0x08009c24

08007f94 <_Bfree>:
 8007f94:	b570      	push	{r4, r5, r6, lr}
 8007f96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f98:	4605      	mov	r5, r0
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	b976      	cbnz	r6, 8007fbc <_Bfree+0x28>
 8007f9e:	2010      	movs	r0, #16
 8007fa0:	f7ff ff82 	bl	8007ea8 <malloc>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	6268      	str	r0, [r5, #36]	; 0x24
 8007fa8:	b920      	cbnz	r0, 8007fb4 <_Bfree+0x20>
 8007faa:	218a      	movs	r1, #138	; 0x8a
 8007fac:	4b08      	ldr	r3, [pc, #32]	; (8007fd0 <_Bfree+0x3c>)
 8007fae:	4809      	ldr	r0, [pc, #36]	; (8007fd4 <_Bfree+0x40>)
 8007fb0:	f000 feec 	bl	8008d8c <__assert_func>
 8007fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fb8:	6006      	str	r6, [r0, #0]
 8007fba:	60c6      	str	r6, [r0, #12]
 8007fbc:	b13c      	cbz	r4, 8007fce <_Bfree+0x3a>
 8007fbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007fc0:	6862      	ldr	r2, [r4, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fc8:	6021      	str	r1, [r4, #0]
 8007fca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fce:	bd70      	pop	{r4, r5, r6, pc}
 8007fd0:	08009b26 	.word	0x08009b26
 8007fd4:	08009c24 	.word	0x08009c24

08007fd8 <__multadd>:
 8007fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fdc:	4607      	mov	r7, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	461e      	mov	r6, r3
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	690d      	ldr	r5, [r1, #16]
 8007fe6:	f101 0c14 	add.w	ip, r1, #20
 8007fea:	f8dc 3000 	ldr.w	r3, [ip]
 8007fee:	3001      	adds	r0, #1
 8007ff0:	b299      	uxth	r1, r3
 8007ff2:	fb02 6101 	mla	r1, r2, r1, r6
 8007ff6:	0c1e      	lsrs	r6, r3, #16
 8007ff8:	0c0b      	lsrs	r3, r1, #16
 8007ffa:	fb02 3306 	mla	r3, r2, r6, r3
 8007ffe:	b289      	uxth	r1, r1
 8008000:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008004:	4285      	cmp	r5, r0
 8008006:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800800a:	f84c 1b04 	str.w	r1, [ip], #4
 800800e:	dcec      	bgt.n	8007fea <__multadd+0x12>
 8008010:	b30e      	cbz	r6, 8008056 <__multadd+0x7e>
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	42ab      	cmp	r3, r5
 8008016:	dc19      	bgt.n	800804c <__multadd+0x74>
 8008018:	6861      	ldr	r1, [r4, #4]
 800801a:	4638      	mov	r0, r7
 800801c:	3101      	adds	r1, #1
 800801e:	f7ff ff79 	bl	8007f14 <_Balloc>
 8008022:	4680      	mov	r8, r0
 8008024:	b928      	cbnz	r0, 8008032 <__multadd+0x5a>
 8008026:	4602      	mov	r2, r0
 8008028:	21b5      	movs	r1, #181	; 0xb5
 800802a:	4b0c      	ldr	r3, [pc, #48]	; (800805c <__multadd+0x84>)
 800802c:	480c      	ldr	r0, [pc, #48]	; (8008060 <__multadd+0x88>)
 800802e:	f000 fead 	bl	8008d8c <__assert_func>
 8008032:	6922      	ldr	r2, [r4, #16]
 8008034:	f104 010c 	add.w	r1, r4, #12
 8008038:	3202      	adds	r2, #2
 800803a:	0092      	lsls	r2, r2, #2
 800803c:	300c      	adds	r0, #12
 800803e:	f7ff ff5b 	bl	8007ef8 <memcpy>
 8008042:	4621      	mov	r1, r4
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff ffa5 	bl	8007f94 <_Bfree>
 800804a:	4644      	mov	r4, r8
 800804c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008050:	3501      	adds	r5, #1
 8008052:	615e      	str	r6, [r3, #20]
 8008054:	6125      	str	r5, [r4, #16]
 8008056:	4620      	mov	r0, r4
 8008058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800805c:	08009b98 	.word	0x08009b98
 8008060:	08009c24 	.word	0x08009c24

08008064 <__s2b>:
 8008064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008068:	4615      	mov	r5, r2
 800806a:	2209      	movs	r2, #9
 800806c:	461f      	mov	r7, r3
 800806e:	3308      	adds	r3, #8
 8008070:	460c      	mov	r4, r1
 8008072:	fb93 f3f2 	sdiv	r3, r3, r2
 8008076:	4606      	mov	r6, r0
 8008078:	2201      	movs	r2, #1
 800807a:	2100      	movs	r1, #0
 800807c:	429a      	cmp	r2, r3
 800807e:	db09      	blt.n	8008094 <__s2b+0x30>
 8008080:	4630      	mov	r0, r6
 8008082:	f7ff ff47 	bl	8007f14 <_Balloc>
 8008086:	b940      	cbnz	r0, 800809a <__s2b+0x36>
 8008088:	4602      	mov	r2, r0
 800808a:	21ce      	movs	r1, #206	; 0xce
 800808c:	4b18      	ldr	r3, [pc, #96]	; (80080f0 <__s2b+0x8c>)
 800808e:	4819      	ldr	r0, [pc, #100]	; (80080f4 <__s2b+0x90>)
 8008090:	f000 fe7c 	bl	8008d8c <__assert_func>
 8008094:	0052      	lsls	r2, r2, #1
 8008096:	3101      	adds	r1, #1
 8008098:	e7f0      	b.n	800807c <__s2b+0x18>
 800809a:	9b08      	ldr	r3, [sp, #32]
 800809c:	2d09      	cmp	r5, #9
 800809e:	6143      	str	r3, [r0, #20]
 80080a0:	f04f 0301 	mov.w	r3, #1
 80080a4:	6103      	str	r3, [r0, #16]
 80080a6:	dd16      	ble.n	80080d6 <__s2b+0x72>
 80080a8:	f104 0909 	add.w	r9, r4, #9
 80080ac:	46c8      	mov	r8, r9
 80080ae:	442c      	add	r4, r5
 80080b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080b4:	4601      	mov	r1, r0
 80080b6:	220a      	movs	r2, #10
 80080b8:	4630      	mov	r0, r6
 80080ba:	3b30      	subs	r3, #48	; 0x30
 80080bc:	f7ff ff8c 	bl	8007fd8 <__multadd>
 80080c0:	45a0      	cmp	r8, r4
 80080c2:	d1f5      	bne.n	80080b0 <__s2b+0x4c>
 80080c4:	f1a5 0408 	sub.w	r4, r5, #8
 80080c8:	444c      	add	r4, r9
 80080ca:	1b2d      	subs	r5, r5, r4
 80080cc:	1963      	adds	r3, r4, r5
 80080ce:	42bb      	cmp	r3, r7
 80080d0:	db04      	blt.n	80080dc <__s2b+0x78>
 80080d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080d6:	2509      	movs	r5, #9
 80080d8:	340a      	adds	r4, #10
 80080da:	e7f6      	b.n	80080ca <__s2b+0x66>
 80080dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080e0:	4601      	mov	r1, r0
 80080e2:	220a      	movs	r2, #10
 80080e4:	4630      	mov	r0, r6
 80080e6:	3b30      	subs	r3, #48	; 0x30
 80080e8:	f7ff ff76 	bl	8007fd8 <__multadd>
 80080ec:	e7ee      	b.n	80080cc <__s2b+0x68>
 80080ee:	bf00      	nop
 80080f0:	08009b98 	.word	0x08009b98
 80080f4:	08009c24 	.word	0x08009c24

080080f8 <__hi0bits>:
 80080f8:	0c02      	lsrs	r2, r0, #16
 80080fa:	0412      	lsls	r2, r2, #16
 80080fc:	4603      	mov	r3, r0
 80080fe:	b9ca      	cbnz	r2, 8008134 <__hi0bits+0x3c>
 8008100:	0403      	lsls	r3, r0, #16
 8008102:	2010      	movs	r0, #16
 8008104:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008108:	bf04      	itt	eq
 800810a:	021b      	lsleq	r3, r3, #8
 800810c:	3008      	addeq	r0, #8
 800810e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008112:	bf04      	itt	eq
 8008114:	011b      	lsleq	r3, r3, #4
 8008116:	3004      	addeq	r0, #4
 8008118:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800811c:	bf04      	itt	eq
 800811e:	009b      	lsleq	r3, r3, #2
 8008120:	3002      	addeq	r0, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	db05      	blt.n	8008132 <__hi0bits+0x3a>
 8008126:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800812a:	f100 0001 	add.w	r0, r0, #1
 800812e:	bf08      	it	eq
 8008130:	2020      	moveq	r0, #32
 8008132:	4770      	bx	lr
 8008134:	2000      	movs	r0, #0
 8008136:	e7e5      	b.n	8008104 <__hi0bits+0xc>

08008138 <__lo0bits>:
 8008138:	6803      	ldr	r3, [r0, #0]
 800813a:	4602      	mov	r2, r0
 800813c:	f013 0007 	ands.w	r0, r3, #7
 8008140:	d00b      	beq.n	800815a <__lo0bits+0x22>
 8008142:	07d9      	lsls	r1, r3, #31
 8008144:	d421      	bmi.n	800818a <__lo0bits+0x52>
 8008146:	0798      	lsls	r0, r3, #30
 8008148:	bf49      	itett	mi
 800814a:	085b      	lsrmi	r3, r3, #1
 800814c:	089b      	lsrpl	r3, r3, #2
 800814e:	2001      	movmi	r0, #1
 8008150:	6013      	strmi	r3, [r2, #0]
 8008152:	bf5c      	itt	pl
 8008154:	2002      	movpl	r0, #2
 8008156:	6013      	strpl	r3, [r2, #0]
 8008158:	4770      	bx	lr
 800815a:	b299      	uxth	r1, r3
 800815c:	b909      	cbnz	r1, 8008162 <__lo0bits+0x2a>
 800815e:	2010      	movs	r0, #16
 8008160:	0c1b      	lsrs	r3, r3, #16
 8008162:	b2d9      	uxtb	r1, r3
 8008164:	b909      	cbnz	r1, 800816a <__lo0bits+0x32>
 8008166:	3008      	adds	r0, #8
 8008168:	0a1b      	lsrs	r3, r3, #8
 800816a:	0719      	lsls	r1, r3, #28
 800816c:	bf04      	itt	eq
 800816e:	091b      	lsreq	r3, r3, #4
 8008170:	3004      	addeq	r0, #4
 8008172:	0799      	lsls	r1, r3, #30
 8008174:	bf04      	itt	eq
 8008176:	089b      	lsreq	r3, r3, #2
 8008178:	3002      	addeq	r0, #2
 800817a:	07d9      	lsls	r1, r3, #31
 800817c:	d403      	bmi.n	8008186 <__lo0bits+0x4e>
 800817e:	085b      	lsrs	r3, r3, #1
 8008180:	f100 0001 	add.w	r0, r0, #1
 8008184:	d003      	beq.n	800818e <__lo0bits+0x56>
 8008186:	6013      	str	r3, [r2, #0]
 8008188:	4770      	bx	lr
 800818a:	2000      	movs	r0, #0
 800818c:	4770      	bx	lr
 800818e:	2020      	movs	r0, #32
 8008190:	4770      	bx	lr
	...

08008194 <__i2b>:
 8008194:	b510      	push	{r4, lr}
 8008196:	460c      	mov	r4, r1
 8008198:	2101      	movs	r1, #1
 800819a:	f7ff febb 	bl	8007f14 <_Balloc>
 800819e:	4602      	mov	r2, r0
 80081a0:	b928      	cbnz	r0, 80081ae <__i2b+0x1a>
 80081a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80081a6:	4b04      	ldr	r3, [pc, #16]	; (80081b8 <__i2b+0x24>)
 80081a8:	4804      	ldr	r0, [pc, #16]	; (80081bc <__i2b+0x28>)
 80081aa:	f000 fdef 	bl	8008d8c <__assert_func>
 80081ae:	2301      	movs	r3, #1
 80081b0:	6144      	str	r4, [r0, #20]
 80081b2:	6103      	str	r3, [r0, #16]
 80081b4:	bd10      	pop	{r4, pc}
 80081b6:	bf00      	nop
 80081b8:	08009b98 	.word	0x08009b98
 80081bc:	08009c24 	.word	0x08009c24

080081c0 <__multiply>:
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	4691      	mov	r9, r2
 80081c6:	690a      	ldr	r2, [r1, #16]
 80081c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081cc:	460c      	mov	r4, r1
 80081ce:	429a      	cmp	r2, r3
 80081d0:	bfbe      	ittt	lt
 80081d2:	460b      	movlt	r3, r1
 80081d4:	464c      	movlt	r4, r9
 80081d6:	4699      	movlt	r9, r3
 80081d8:	6927      	ldr	r7, [r4, #16]
 80081da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081de:	68a3      	ldr	r3, [r4, #8]
 80081e0:	6861      	ldr	r1, [r4, #4]
 80081e2:	eb07 060a 	add.w	r6, r7, sl
 80081e6:	42b3      	cmp	r3, r6
 80081e8:	b085      	sub	sp, #20
 80081ea:	bfb8      	it	lt
 80081ec:	3101      	addlt	r1, #1
 80081ee:	f7ff fe91 	bl	8007f14 <_Balloc>
 80081f2:	b930      	cbnz	r0, 8008202 <__multiply+0x42>
 80081f4:	4602      	mov	r2, r0
 80081f6:	f240 115d 	movw	r1, #349	; 0x15d
 80081fa:	4b43      	ldr	r3, [pc, #268]	; (8008308 <__multiply+0x148>)
 80081fc:	4843      	ldr	r0, [pc, #268]	; (800830c <__multiply+0x14c>)
 80081fe:	f000 fdc5 	bl	8008d8c <__assert_func>
 8008202:	f100 0514 	add.w	r5, r0, #20
 8008206:	462b      	mov	r3, r5
 8008208:	2200      	movs	r2, #0
 800820a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800820e:	4543      	cmp	r3, r8
 8008210:	d321      	bcc.n	8008256 <__multiply+0x96>
 8008212:	f104 0314 	add.w	r3, r4, #20
 8008216:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800821a:	f109 0314 	add.w	r3, r9, #20
 800821e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008222:	9202      	str	r2, [sp, #8]
 8008224:	1b3a      	subs	r2, r7, r4
 8008226:	3a15      	subs	r2, #21
 8008228:	f022 0203 	bic.w	r2, r2, #3
 800822c:	3204      	adds	r2, #4
 800822e:	f104 0115 	add.w	r1, r4, #21
 8008232:	428f      	cmp	r7, r1
 8008234:	bf38      	it	cc
 8008236:	2204      	movcc	r2, #4
 8008238:	9201      	str	r2, [sp, #4]
 800823a:	9a02      	ldr	r2, [sp, #8]
 800823c:	9303      	str	r3, [sp, #12]
 800823e:	429a      	cmp	r2, r3
 8008240:	d80c      	bhi.n	800825c <__multiply+0x9c>
 8008242:	2e00      	cmp	r6, #0
 8008244:	dd03      	ble.n	800824e <__multiply+0x8e>
 8008246:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800824a:	2b00      	cmp	r3, #0
 800824c:	d059      	beq.n	8008302 <__multiply+0x142>
 800824e:	6106      	str	r6, [r0, #16]
 8008250:	b005      	add	sp, #20
 8008252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008256:	f843 2b04 	str.w	r2, [r3], #4
 800825a:	e7d8      	b.n	800820e <__multiply+0x4e>
 800825c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008260:	f1ba 0f00 	cmp.w	sl, #0
 8008264:	d023      	beq.n	80082ae <__multiply+0xee>
 8008266:	46a9      	mov	r9, r5
 8008268:	f04f 0c00 	mov.w	ip, #0
 800826c:	f104 0e14 	add.w	lr, r4, #20
 8008270:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008274:	f8d9 1000 	ldr.w	r1, [r9]
 8008278:	fa1f fb82 	uxth.w	fp, r2
 800827c:	b289      	uxth	r1, r1
 800827e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008282:	4461      	add	r1, ip
 8008284:	f8d9 c000 	ldr.w	ip, [r9]
 8008288:	0c12      	lsrs	r2, r2, #16
 800828a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800828e:	fb0a c202 	mla	r2, sl, r2, ip
 8008292:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008296:	b289      	uxth	r1, r1
 8008298:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800829c:	4577      	cmp	r7, lr
 800829e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082a2:	f849 1b04 	str.w	r1, [r9], #4
 80082a6:	d8e3      	bhi.n	8008270 <__multiply+0xb0>
 80082a8:	9a01      	ldr	r2, [sp, #4]
 80082aa:	f845 c002 	str.w	ip, [r5, r2]
 80082ae:	9a03      	ldr	r2, [sp, #12]
 80082b0:	3304      	adds	r3, #4
 80082b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082b6:	f1b9 0f00 	cmp.w	r9, #0
 80082ba:	d020      	beq.n	80082fe <__multiply+0x13e>
 80082bc:	46ae      	mov	lr, r5
 80082be:	f04f 0a00 	mov.w	sl, #0
 80082c2:	6829      	ldr	r1, [r5, #0]
 80082c4:	f104 0c14 	add.w	ip, r4, #20
 80082c8:	f8bc b000 	ldrh.w	fp, [ip]
 80082cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082d0:	b289      	uxth	r1, r1
 80082d2:	fb09 220b 	mla	r2, r9, fp, r2
 80082d6:	4492      	add	sl, r2
 80082d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80082dc:	f84e 1b04 	str.w	r1, [lr], #4
 80082e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80082e4:	f8be 1000 	ldrh.w	r1, [lr]
 80082e8:	0c12      	lsrs	r2, r2, #16
 80082ea:	fb09 1102 	mla	r1, r9, r2, r1
 80082ee:	4567      	cmp	r7, ip
 80082f0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80082f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082f8:	d8e6      	bhi.n	80082c8 <__multiply+0x108>
 80082fa:	9a01      	ldr	r2, [sp, #4]
 80082fc:	50a9      	str	r1, [r5, r2]
 80082fe:	3504      	adds	r5, #4
 8008300:	e79b      	b.n	800823a <__multiply+0x7a>
 8008302:	3e01      	subs	r6, #1
 8008304:	e79d      	b.n	8008242 <__multiply+0x82>
 8008306:	bf00      	nop
 8008308:	08009b98 	.word	0x08009b98
 800830c:	08009c24 	.word	0x08009c24

08008310 <__pow5mult>:
 8008310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008314:	4615      	mov	r5, r2
 8008316:	f012 0203 	ands.w	r2, r2, #3
 800831a:	4606      	mov	r6, r0
 800831c:	460f      	mov	r7, r1
 800831e:	d007      	beq.n	8008330 <__pow5mult+0x20>
 8008320:	4c25      	ldr	r4, [pc, #148]	; (80083b8 <__pow5mult+0xa8>)
 8008322:	3a01      	subs	r2, #1
 8008324:	2300      	movs	r3, #0
 8008326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800832a:	f7ff fe55 	bl	8007fd8 <__multadd>
 800832e:	4607      	mov	r7, r0
 8008330:	10ad      	asrs	r5, r5, #2
 8008332:	d03d      	beq.n	80083b0 <__pow5mult+0xa0>
 8008334:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008336:	b97c      	cbnz	r4, 8008358 <__pow5mult+0x48>
 8008338:	2010      	movs	r0, #16
 800833a:	f7ff fdb5 	bl	8007ea8 <malloc>
 800833e:	4602      	mov	r2, r0
 8008340:	6270      	str	r0, [r6, #36]	; 0x24
 8008342:	b928      	cbnz	r0, 8008350 <__pow5mult+0x40>
 8008344:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008348:	4b1c      	ldr	r3, [pc, #112]	; (80083bc <__pow5mult+0xac>)
 800834a:	481d      	ldr	r0, [pc, #116]	; (80083c0 <__pow5mult+0xb0>)
 800834c:	f000 fd1e 	bl	8008d8c <__assert_func>
 8008350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008354:	6004      	str	r4, [r0, #0]
 8008356:	60c4      	str	r4, [r0, #12]
 8008358:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800835c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008360:	b94c      	cbnz	r4, 8008376 <__pow5mult+0x66>
 8008362:	f240 2171 	movw	r1, #625	; 0x271
 8008366:	4630      	mov	r0, r6
 8008368:	f7ff ff14 	bl	8008194 <__i2b>
 800836c:	2300      	movs	r3, #0
 800836e:	4604      	mov	r4, r0
 8008370:	f8c8 0008 	str.w	r0, [r8, #8]
 8008374:	6003      	str	r3, [r0, #0]
 8008376:	f04f 0900 	mov.w	r9, #0
 800837a:	07eb      	lsls	r3, r5, #31
 800837c:	d50a      	bpl.n	8008394 <__pow5mult+0x84>
 800837e:	4639      	mov	r1, r7
 8008380:	4622      	mov	r2, r4
 8008382:	4630      	mov	r0, r6
 8008384:	f7ff ff1c 	bl	80081c0 <__multiply>
 8008388:	4680      	mov	r8, r0
 800838a:	4639      	mov	r1, r7
 800838c:	4630      	mov	r0, r6
 800838e:	f7ff fe01 	bl	8007f94 <_Bfree>
 8008392:	4647      	mov	r7, r8
 8008394:	106d      	asrs	r5, r5, #1
 8008396:	d00b      	beq.n	80083b0 <__pow5mult+0xa0>
 8008398:	6820      	ldr	r0, [r4, #0]
 800839a:	b938      	cbnz	r0, 80083ac <__pow5mult+0x9c>
 800839c:	4622      	mov	r2, r4
 800839e:	4621      	mov	r1, r4
 80083a0:	4630      	mov	r0, r6
 80083a2:	f7ff ff0d 	bl	80081c0 <__multiply>
 80083a6:	6020      	str	r0, [r4, #0]
 80083a8:	f8c0 9000 	str.w	r9, [r0]
 80083ac:	4604      	mov	r4, r0
 80083ae:	e7e4      	b.n	800837a <__pow5mult+0x6a>
 80083b0:	4638      	mov	r0, r7
 80083b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b6:	bf00      	nop
 80083b8:	08009d70 	.word	0x08009d70
 80083bc:	08009b26 	.word	0x08009b26
 80083c0:	08009c24 	.word	0x08009c24

080083c4 <__lshift>:
 80083c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c8:	460c      	mov	r4, r1
 80083ca:	4607      	mov	r7, r0
 80083cc:	4691      	mov	r9, r2
 80083ce:	6923      	ldr	r3, [r4, #16]
 80083d0:	6849      	ldr	r1, [r1, #4]
 80083d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083d6:	68a3      	ldr	r3, [r4, #8]
 80083d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083dc:	f108 0601 	add.w	r6, r8, #1
 80083e0:	42b3      	cmp	r3, r6
 80083e2:	db0b      	blt.n	80083fc <__lshift+0x38>
 80083e4:	4638      	mov	r0, r7
 80083e6:	f7ff fd95 	bl	8007f14 <_Balloc>
 80083ea:	4605      	mov	r5, r0
 80083ec:	b948      	cbnz	r0, 8008402 <__lshift+0x3e>
 80083ee:	4602      	mov	r2, r0
 80083f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80083f4:	4b29      	ldr	r3, [pc, #164]	; (800849c <__lshift+0xd8>)
 80083f6:	482a      	ldr	r0, [pc, #168]	; (80084a0 <__lshift+0xdc>)
 80083f8:	f000 fcc8 	bl	8008d8c <__assert_func>
 80083fc:	3101      	adds	r1, #1
 80083fe:	005b      	lsls	r3, r3, #1
 8008400:	e7ee      	b.n	80083e0 <__lshift+0x1c>
 8008402:	2300      	movs	r3, #0
 8008404:	f100 0114 	add.w	r1, r0, #20
 8008408:	f100 0210 	add.w	r2, r0, #16
 800840c:	4618      	mov	r0, r3
 800840e:	4553      	cmp	r3, sl
 8008410:	db37      	blt.n	8008482 <__lshift+0xbe>
 8008412:	6920      	ldr	r0, [r4, #16]
 8008414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008418:	f104 0314 	add.w	r3, r4, #20
 800841c:	f019 091f 	ands.w	r9, r9, #31
 8008420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008424:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008428:	d02f      	beq.n	800848a <__lshift+0xc6>
 800842a:	468a      	mov	sl, r1
 800842c:	f04f 0c00 	mov.w	ip, #0
 8008430:	f1c9 0e20 	rsb	lr, r9, #32
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	fa02 f209 	lsl.w	r2, r2, r9
 800843a:	ea42 020c 	orr.w	r2, r2, ip
 800843e:	f84a 2b04 	str.w	r2, [sl], #4
 8008442:	f853 2b04 	ldr.w	r2, [r3], #4
 8008446:	4298      	cmp	r0, r3
 8008448:	fa22 fc0e 	lsr.w	ip, r2, lr
 800844c:	d8f2      	bhi.n	8008434 <__lshift+0x70>
 800844e:	1b03      	subs	r3, r0, r4
 8008450:	3b15      	subs	r3, #21
 8008452:	f023 0303 	bic.w	r3, r3, #3
 8008456:	3304      	adds	r3, #4
 8008458:	f104 0215 	add.w	r2, r4, #21
 800845c:	4290      	cmp	r0, r2
 800845e:	bf38      	it	cc
 8008460:	2304      	movcc	r3, #4
 8008462:	f841 c003 	str.w	ip, [r1, r3]
 8008466:	f1bc 0f00 	cmp.w	ip, #0
 800846a:	d001      	beq.n	8008470 <__lshift+0xac>
 800846c:	f108 0602 	add.w	r6, r8, #2
 8008470:	3e01      	subs	r6, #1
 8008472:	4638      	mov	r0, r7
 8008474:	4621      	mov	r1, r4
 8008476:	612e      	str	r6, [r5, #16]
 8008478:	f7ff fd8c 	bl	8007f94 <_Bfree>
 800847c:	4628      	mov	r0, r5
 800847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008482:	f842 0f04 	str.w	r0, [r2, #4]!
 8008486:	3301      	adds	r3, #1
 8008488:	e7c1      	b.n	800840e <__lshift+0x4a>
 800848a:	3904      	subs	r1, #4
 800848c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008490:	4298      	cmp	r0, r3
 8008492:	f841 2f04 	str.w	r2, [r1, #4]!
 8008496:	d8f9      	bhi.n	800848c <__lshift+0xc8>
 8008498:	e7ea      	b.n	8008470 <__lshift+0xac>
 800849a:	bf00      	nop
 800849c:	08009b98 	.word	0x08009b98
 80084a0:	08009c24 	.word	0x08009c24

080084a4 <__mcmp>:
 80084a4:	4603      	mov	r3, r0
 80084a6:	690a      	ldr	r2, [r1, #16]
 80084a8:	6900      	ldr	r0, [r0, #16]
 80084aa:	b530      	push	{r4, r5, lr}
 80084ac:	1a80      	subs	r0, r0, r2
 80084ae:	d10d      	bne.n	80084cc <__mcmp+0x28>
 80084b0:	3314      	adds	r3, #20
 80084b2:	3114      	adds	r1, #20
 80084b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084c4:	4295      	cmp	r5, r2
 80084c6:	d002      	beq.n	80084ce <__mcmp+0x2a>
 80084c8:	d304      	bcc.n	80084d4 <__mcmp+0x30>
 80084ca:	2001      	movs	r0, #1
 80084cc:	bd30      	pop	{r4, r5, pc}
 80084ce:	42a3      	cmp	r3, r4
 80084d0:	d3f4      	bcc.n	80084bc <__mcmp+0x18>
 80084d2:	e7fb      	b.n	80084cc <__mcmp+0x28>
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	e7f8      	b.n	80084cc <__mcmp+0x28>
	...

080084dc <__mdiff>:
 80084dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	460d      	mov	r5, r1
 80084e2:	4607      	mov	r7, r0
 80084e4:	4611      	mov	r1, r2
 80084e6:	4628      	mov	r0, r5
 80084e8:	4614      	mov	r4, r2
 80084ea:	f7ff ffdb 	bl	80084a4 <__mcmp>
 80084ee:	1e06      	subs	r6, r0, #0
 80084f0:	d111      	bne.n	8008516 <__mdiff+0x3a>
 80084f2:	4631      	mov	r1, r6
 80084f4:	4638      	mov	r0, r7
 80084f6:	f7ff fd0d 	bl	8007f14 <_Balloc>
 80084fa:	4602      	mov	r2, r0
 80084fc:	b928      	cbnz	r0, 800850a <__mdiff+0x2e>
 80084fe:	f240 2132 	movw	r1, #562	; 0x232
 8008502:	4b3a      	ldr	r3, [pc, #232]	; (80085ec <__mdiff+0x110>)
 8008504:	483a      	ldr	r0, [pc, #232]	; (80085f0 <__mdiff+0x114>)
 8008506:	f000 fc41 	bl	8008d8c <__assert_func>
 800850a:	2301      	movs	r3, #1
 800850c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008510:	4610      	mov	r0, r2
 8008512:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008516:	bfa4      	itt	ge
 8008518:	4623      	movge	r3, r4
 800851a:	462c      	movge	r4, r5
 800851c:	4638      	mov	r0, r7
 800851e:	6861      	ldr	r1, [r4, #4]
 8008520:	bfa6      	itte	ge
 8008522:	461d      	movge	r5, r3
 8008524:	2600      	movge	r6, #0
 8008526:	2601      	movlt	r6, #1
 8008528:	f7ff fcf4 	bl	8007f14 <_Balloc>
 800852c:	4602      	mov	r2, r0
 800852e:	b918      	cbnz	r0, 8008538 <__mdiff+0x5c>
 8008530:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008534:	4b2d      	ldr	r3, [pc, #180]	; (80085ec <__mdiff+0x110>)
 8008536:	e7e5      	b.n	8008504 <__mdiff+0x28>
 8008538:	f102 0814 	add.w	r8, r2, #20
 800853c:	46c2      	mov	sl, r8
 800853e:	f04f 0c00 	mov.w	ip, #0
 8008542:	6927      	ldr	r7, [r4, #16]
 8008544:	60c6      	str	r6, [r0, #12]
 8008546:	692e      	ldr	r6, [r5, #16]
 8008548:	f104 0014 	add.w	r0, r4, #20
 800854c:	f105 0914 	add.w	r9, r5, #20
 8008550:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008554:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008558:	3410      	adds	r4, #16
 800855a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800855e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008562:	fa1f f18b 	uxth.w	r1, fp
 8008566:	448c      	add	ip, r1
 8008568:	b299      	uxth	r1, r3
 800856a:	0c1b      	lsrs	r3, r3, #16
 800856c:	ebac 0101 	sub.w	r1, ip, r1
 8008570:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008574:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008578:	b289      	uxth	r1, r1
 800857a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800857e:	454e      	cmp	r6, r9
 8008580:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008584:	f84a 3b04 	str.w	r3, [sl], #4
 8008588:	d8e7      	bhi.n	800855a <__mdiff+0x7e>
 800858a:	1b73      	subs	r3, r6, r5
 800858c:	3b15      	subs	r3, #21
 800858e:	f023 0303 	bic.w	r3, r3, #3
 8008592:	3515      	adds	r5, #21
 8008594:	3304      	adds	r3, #4
 8008596:	42ae      	cmp	r6, r5
 8008598:	bf38      	it	cc
 800859a:	2304      	movcc	r3, #4
 800859c:	4418      	add	r0, r3
 800859e:	4443      	add	r3, r8
 80085a0:	461e      	mov	r6, r3
 80085a2:	4605      	mov	r5, r0
 80085a4:	4575      	cmp	r5, lr
 80085a6:	d30e      	bcc.n	80085c6 <__mdiff+0xea>
 80085a8:	f10e 0103 	add.w	r1, lr, #3
 80085ac:	1a09      	subs	r1, r1, r0
 80085ae:	f021 0103 	bic.w	r1, r1, #3
 80085b2:	3803      	subs	r0, #3
 80085b4:	4586      	cmp	lr, r0
 80085b6:	bf38      	it	cc
 80085b8:	2100      	movcc	r1, #0
 80085ba:	4419      	add	r1, r3
 80085bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80085c0:	b18b      	cbz	r3, 80085e6 <__mdiff+0x10a>
 80085c2:	6117      	str	r7, [r2, #16]
 80085c4:	e7a4      	b.n	8008510 <__mdiff+0x34>
 80085c6:	f855 8b04 	ldr.w	r8, [r5], #4
 80085ca:	fa1f f188 	uxth.w	r1, r8
 80085ce:	4461      	add	r1, ip
 80085d0:	140c      	asrs	r4, r1, #16
 80085d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80085d6:	b289      	uxth	r1, r1
 80085d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80085dc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80085e0:	f846 1b04 	str.w	r1, [r6], #4
 80085e4:	e7de      	b.n	80085a4 <__mdiff+0xc8>
 80085e6:	3f01      	subs	r7, #1
 80085e8:	e7e8      	b.n	80085bc <__mdiff+0xe0>
 80085ea:	bf00      	nop
 80085ec:	08009b98 	.word	0x08009b98
 80085f0:	08009c24 	.word	0x08009c24

080085f4 <__ulp>:
 80085f4:	4b11      	ldr	r3, [pc, #68]	; (800863c <__ulp+0x48>)
 80085f6:	400b      	ands	r3, r1
 80085f8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	dd02      	ble.n	8008606 <__ulp+0x12>
 8008600:	2000      	movs	r0, #0
 8008602:	4619      	mov	r1, r3
 8008604:	4770      	bx	lr
 8008606:	425b      	negs	r3, r3
 8008608:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800860c:	f04f 0000 	mov.w	r0, #0
 8008610:	f04f 0100 	mov.w	r1, #0
 8008614:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008618:	da04      	bge.n	8008624 <__ulp+0x30>
 800861a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800861e:	fa43 f102 	asr.w	r1, r3, r2
 8008622:	4770      	bx	lr
 8008624:	f1a2 0314 	sub.w	r3, r2, #20
 8008628:	2b1e      	cmp	r3, #30
 800862a:	bfd6      	itet	le
 800862c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008630:	2301      	movgt	r3, #1
 8008632:	fa22 f303 	lsrle.w	r3, r2, r3
 8008636:	4618      	mov	r0, r3
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	7ff00000 	.word	0x7ff00000

08008640 <__b2d>:
 8008640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008644:	6907      	ldr	r7, [r0, #16]
 8008646:	f100 0914 	add.w	r9, r0, #20
 800864a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800864e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008652:	f1a7 0804 	sub.w	r8, r7, #4
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff fd4e 	bl	80080f8 <__hi0bits>
 800865c:	f1c0 0320 	rsb	r3, r0, #32
 8008660:	280a      	cmp	r0, #10
 8008662:	600b      	str	r3, [r1, #0]
 8008664:	491f      	ldr	r1, [pc, #124]	; (80086e4 <__b2d+0xa4>)
 8008666:	dc17      	bgt.n	8008698 <__b2d+0x58>
 8008668:	45c1      	cmp	r9, r8
 800866a:	bf28      	it	cs
 800866c:	2200      	movcs	r2, #0
 800866e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008672:	fa26 f30c 	lsr.w	r3, r6, ip
 8008676:	bf38      	it	cc
 8008678:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800867c:	ea43 0501 	orr.w	r5, r3, r1
 8008680:	f100 0315 	add.w	r3, r0, #21
 8008684:	fa06 f303 	lsl.w	r3, r6, r3
 8008688:	fa22 f20c 	lsr.w	r2, r2, ip
 800868c:	ea43 0402 	orr.w	r4, r3, r2
 8008690:	4620      	mov	r0, r4
 8008692:	4629      	mov	r1, r5
 8008694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008698:	45c1      	cmp	r9, r8
 800869a:	bf2e      	itee	cs
 800869c:	2200      	movcs	r2, #0
 800869e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80086a2:	f1a7 0808 	subcc.w	r8, r7, #8
 80086a6:	f1b0 030b 	subs.w	r3, r0, #11
 80086aa:	d016      	beq.n	80086da <__b2d+0x9a>
 80086ac:	f1c3 0720 	rsb	r7, r3, #32
 80086b0:	fa22 f107 	lsr.w	r1, r2, r7
 80086b4:	45c8      	cmp	r8, r9
 80086b6:	fa06 f603 	lsl.w	r6, r6, r3
 80086ba:	ea46 0601 	orr.w	r6, r6, r1
 80086be:	bf94      	ite	ls
 80086c0:	2100      	movls	r1, #0
 80086c2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80086c6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80086ca:	fa02 f003 	lsl.w	r0, r2, r3
 80086ce:	40f9      	lsrs	r1, r7
 80086d0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80086d4:	ea40 0401 	orr.w	r4, r0, r1
 80086d8:	e7da      	b.n	8008690 <__b2d+0x50>
 80086da:	4614      	mov	r4, r2
 80086dc:	ea46 0501 	orr.w	r5, r6, r1
 80086e0:	e7d6      	b.n	8008690 <__b2d+0x50>
 80086e2:	bf00      	nop
 80086e4:	3ff00000 	.word	0x3ff00000

080086e8 <__d2b>:
 80086e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80086ec:	2101      	movs	r1, #1
 80086ee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80086f2:	4690      	mov	r8, r2
 80086f4:	461d      	mov	r5, r3
 80086f6:	f7ff fc0d 	bl	8007f14 <_Balloc>
 80086fa:	4604      	mov	r4, r0
 80086fc:	b930      	cbnz	r0, 800870c <__d2b+0x24>
 80086fe:	4602      	mov	r2, r0
 8008700:	f240 310a 	movw	r1, #778	; 0x30a
 8008704:	4b24      	ldr	r3, [pc, #144]	; (8008798 <__d2b+0xb0>)
 8008706:	4825      	ldr	r0, [pc, #148]	; (800879c <__d2b+0xb4>)
 8008708:	f000 fb40 	bl	8008d8c <__assert_func>
 800870c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008710:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008714:	bb2d      	cbnz	r5, 8008762 <__d2b+0x7a>
 8008716:	9301      	str	r3, [sp, #4]
 8008718:	f1b8 0300 	subs.w	r3, r8, #0
 800871c:	d026      	beq.n	800876c <__d2b+0x84>
 800871e:	4668      	mov	r0, sp
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	f7ff fd09 	bl	8008138 <__lo0bits>
 8008726:	9900      	ldr	r1, [sp, #0]
 8008728:	b1f0      	cbz	r0, 8008768 <__d2b+0x80>
 800872a:	9a01      	ldr	r2, [sp, #4]
 800872c:	f1c0 0320 	rsb	r3, r0, #32
 8008730:	fa02 f303 	lsl.w	r3, r2, r3
 8008734:	430b      	orrs	r3, r1
 8008736:	40c2      	lsrs	r2, r0
 8008738:	6163      	str	r3, [r4, #20]
 800873a:	9201      	str	r2, [sp, #4]
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	bf14      	ite	ne
 8008742:	2102      	movne	r1, #2
 8008744:	2101      	moveq	r1, #1
 8008746:	61a3      	str	r3, [r4, #24]
 8008748:	6121      	str	r1, [r4, #16]
 800874a:	b1c5      	cbz	r5, 800877e <__d2b+0x96>
 800874c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008750:	4405      	add	r5, r0
 8008752:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008756:	603d      	str	r5, [r7, #0]
 8008758:	6030      	str	r0, [r6, #0]
 800875a:	4620      	mov	r0, r4
 800875c:	b002      	add	sp, #8
 800875e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008766:	e7d6      	b.n	8008716 <__d2b+0x2e>
 8008768:	6161      	str	r1, [r4, #20]
 800876a:	e7e7      	b.n	800873c <__d2b+0x54>
 800876c:	a801      	add	r0, sp, #4
 800876e:	f7ff fce3 	bl	8008138 <__lo0bits>
 8008772:	2101      	movs	r1, #1
 8008774:	9b01      	ldr	r3, [sp, #4]
 8008776:	6121      	str	r1, [r4, #16]
 8008778:	6163      	str	r3, [r4, #20]
 800877a:	3020      	adds	r0, #32
 800877c:	e7e5      	b.n	800874a <__d2b+0x62>
 800877e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008782:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008786:	6038      	str	r0, [r7, #0]
 8008788:	6918      	ldr	r0, [r3, #16]
 800878a:	f7ff fcb5 	bl	80080f8 <__hi0bits>
 800878e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008792:	6031      	str	r1, [r6, #0]
 8008794:	e7e1      	b.n	800875a <__d2b+0x72>
 8008796:	bf00      	nop
 8008798:	08009b98 	.word	0x08009b98
 800879c:	08009c24 	.word	0x08009c24

080087a0 <__ratio>:
 80087a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a4:	4688      	mov	r8, r1
 80087a6:	4669      	mov	r1, sp
 80087a8:	4681      	mov	r9, r0
 80087aa:	f7ff ff49 	bl	8008640 <__b2d>
 80087ae:	460f      	mov	r7, r1
 80087b0:	4604      	mov	r4, r0
 80087b2:	460d      	mov	r5, r1
 80087b4:	4640      	mov	r0, r8
 80087b6:	a901      	add	r1, sp, #4
 80087b8:	f7ff ff42 	bl	8008640 <__b2d>
 80087bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80087c4:	468b      	mov	fp, r1
 80087c6:	eba3 0c02 	sub.w	ip, r3, r2
 80087ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 80087ce:	1a9b      	subs	r3, r3, r2
 80087d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	bfd5      	itete	le
 80087d8:	460a      	movle	r2, r1
 80087da:	462a      	movgt	r2, r5
 80087dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087e0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80087e4:	bfd8      	it	le
 80087e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80087ea:	465b      	mov	r3, fp
 80087ec:	4602      	mov	r2, r0
 80087ee:	4639      	mov	r1, r7
 80087f0:	4620      	mov	r0, r4
 80087f2:	f7f7 ffb3 	bl	800075c <__aeabi_ddiv>
 80087f6:	b003      	add	sp, #12
 80087f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087fc <__copybits>:
 80087fc:	3901      	subs	r1, #1
 80087fe:	b570      	push	{r4, r5, r6, lr}
 8008800:	1149      	asrs	r1, r1, #5
 8008802:	6914      	ldr	r4, [r2, #16]
 8008804:	3101      	adds	r1, #1
 8008806:	f102 0314 	add.w	r3, r2, #20
 800880a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800880e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008812:	1f05      	subs	r5, r0, #4
 8008814:	42a3      	cmp	r3, r4
 8008816:	d30c      	bcc.n	8008832 <__copybits+0x36>
 8008818:	1aa3      	subs	r3, r4, r2
 800881a:	3b11      	subs	r3, #17
 800881c:	f023 0303 	bic.w	r3, r3, #3
 8008820:	3211      	adds	r2, #17
 8008822:	42a2      	cmp	r2, r4
 8008824:	bf88      	it	hi
 8008826:	2300      	movhi	r3, #0
 8008828:	4418      	add	r0, r3
 800882a:	2300      	movs	r3, #0
 800882c:	4288      	cmp	r0, r1
 800882e:	d305      	bcc.n	800883c <__copybits+0x40>
 8008830:	bd70      	pop	{r4, r5, r6, pc}
 8008832:	f853 6b04 	ldr.w	r6, [r3], #4
 8008836:	f845 6f04 	str.w	r6, [r5, #4]!
 800883a:	e7eb      	b.n	8008814 <__copybits+0x18>
 800883c:	f840 3b04 	str.w	r3, [r0], #4
 8008840:	e7f4      	b.n	800882c <__copybits+0x30>

08008842 <__any_on>:
 8008842:	f100 0214 	add.w	r2, r0, #20
 8008846:	6900      	ldr	r0, [r0, #16]
 8008848:	114b      	asrs	r3, r1, #5
 800884a:	4298      	cmp	r0, r3
 800884c:	b510      	push	{r4, lr}
 800884e:	db11      	blt.n	8008874 <__any_on+0x32>
 8008850:	dd0a      	ble.n	8008868 <__any_on+0x26>
 8008852:	f011 011f 	ands.w	r1, r1, #31
 8008856:	d007      	beq.n	8008868 <__any_on+0x26>
 8008858:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800885c:	fa24 f001 	lsr.w	r0, r4, r1
 8008860:	fa00 f101 	lsl.w	r1, r0, r1
 8008864:	428c      	cmp	r4, r1
 8008866:	d10b      	bne.n	8008880 <__any_on+0x3e>
 8008868:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800886c:	4293      	cmp	r3, r2
 800886e:	d803      	bhi.n	8008878 <__any_on+0x36>
 8008870:	2000      	movs	r0, #0
 8008872:	bd10      	pop	{r4, pc}
 8008874:	4603      	mov	r3, r0
 8008876:	e7f7      	b.n	8008868 <__any_on+0x26>
 8008878:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800887c:	2900      	cmp	r1, #0
 800887e:	d0f5      	beq.n	800886c <__any_on+0x2a>
 8008880:	2001      	movs	r0, #1
 8008882:	e7f6      	b.n	8008872 <__any_on+0x30>

08008884 <_calloc_r>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	fba1 5402 	umull	r5, r4, r1, r2
 800888a:	b934      	cbnz	r4, 800889a <_calloc_r+0x16>
 800888c:	4629      	mov	r1, r5
 800888e:	f000 f875 	bl	800897c <_malloc_r>
 8008892:	4606      	mov	r6, r0
 8008894:	b928      	cbnz	r0, 80088a2 <_calloc_r+0x1e>
 8008896:	4630      	mov	r0, r6
 8008898:	bd70      	pop	{r4, r5, r6, pc}
 800889a:	220c      	movs	r2, #12
 800889c:	2600      	movs	r6, #0
 800889e:	6002      	str	r2, [r0, #0]
 80088a0:	e7f9      	b.n	8008896 <_calloc_r+0x12>
 80088a2:	462a      	mov	r2, r5
 80088a4:	4621      	mov	r1, r4
 80088a6:	f7fc fbf3 	bl	8005090 <memset>
 80088aa:	e7f4      	b.n	8008896 <_calloc_r+0x12>

080088ac <_free_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4605      	mov	r5, r0
 80088b0:	2900      	cmp	r1, #0
 80088b2:	d040      	beq.n	8008936 <_free_r+0x8a>
 80088b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088b8:	1f0c      	subs	r4, r1, #4
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	bfb8      	it	lt
 80088be:	18e4      	addlt	r4, r4, r3
 80088c0:	f000 faae 	bl	8008e20 <__malloc_lock>
 80088c4:	4a1c      	ldr	r2, [pc, #112]	; (8008938 <_free_r+0x8c>)
 80088c6:	6813      	ldr	r3, [r2, #0]
 80088c8:	b933      	cbnz	r3, 80088d8 <_free_r+0x2c>
 80088ca:	6063      	str	r3, [r4, #4]
 80088cc:	6014      	str	r4, [r2, #0]
 80088ce:	4628      	mov	r0, r5
 80088d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088d4:	f000 baaa 	b.w	8008e2c <__malloc_unlock>
 80088d8:	42a3      	cmp	r3, r4
 80088da:	d908      	bls.n	80088ee <_free_r+0x42>
 80088dc:	6820      	ldr	r0, [r4, #0]
 80088de:	1821      	adds	r1, r4, r0
 80088e0:	428b      	cmp	r3, r1
 80088e2:	bf01      	itttt	eq
 80088e4:	6819      	ldreq	r1, [r3, #0]
 80088e6:	685b      	ldreq	r3, [r3, #4]
 80088e8:	1809      	addeq	r1, r1, r0
 80088ea:	6021      	streq	r1, [r4, #0]
 80088ec:	e7ed      	b.n	80088ca <_free_r+0x1e>
 80088ee:	461a      	mov	r2, r3
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	b10b      	cbz	r3, 80088f8 <_free_r+0x4c>
 80088f4:	42a3      	cmp	r3, r4
 80088f6:	d9fa      	bls.n	80088ee <_free_r+0x42>
 80088f8:	6811      	ldr	r1, [r2, #0]
 80088fa:	1850      	adds	r0, r2, r1
 80088fc:	42a0      	cmp	r0, r4
 80088fe:	d10b      	bne.n	8008918 <_free_r+0x6c>
 8008900:	6820      	ldr	r0, [r4, #0]
 8008902:	4401      	add	r1, r0
 8008904:	1850      	adds	r0, r2, r1
 8008906:	4283      	cmp	r3, r0
 8008908:	6011      	str	r1, [r2, #0]
 800890a:	d1e0      	bne.n	80088ce <_free_r+0x22>
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	4401      	add	r1, r0
 8008912:	6011      	str	r1, [r2, #0]
 8008914:	6053      	str	r3, [r2, #4]
 8008916:	e7da      	b.n	80088ce <_free_r+0x22>
 8008918:	d902      	bls.n	8008920 <_free_r+0x74>
 800891a:	230c      	movs	r3, #12
 800891c:	602b      	str	r3, [r5, #0]
 800891e:	e7d6      	b.n	80088ce <_free_r+0x22>
 8008920:	6820      	ldr	r0, [r4, #0]
 8008922:	1821      	adds	r1, r4, r0
 8008924:	428b      	cmp	r3, r1
 8008926:	bf01      	itttt	eq
 8008928:	6819      	ldreq	r1, [r3, #0]
 800892a:	685b      	ldreq	r3, [r3, #4]
 800892c:	1809      	addeq	r1, r1, r0
 800892e:	6021      	streq	r1, [r4, #0]
 8008930:	6063      	str	r3, [r4, #4]
 8008932:	6054      	str	r4, [r2, #4]
 8008934:	e7cb      	b.n	80088ce <_free_r+0x22>
 8008936:	bd38      	pop	{r3, r4, r5, pc}
 8008938:	20000718 	.word	0x20000718

0800893c <sbrk_aligned>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	4e0e      	ldr	r6, [pc, #56]	; (8008978 <sbrk_aligned+0x3c>)
 8008940:	460c      	mov	r4, r1
 8008942:	6831      	ldr	r1, [r6, #0]
 8008944:	4605      	mov	r5, r0
 8008946:	b911      	cbnz	r1, 800894e <sbrk_aligned+0x12>
 8008948:	f000 f9ee 	bl	8008d28 <_sbrk_r>
 800894c:	6030      	str	r0, [r6, #0]
 800894e:	4621      	mov	r1, r4
 8008950:	4628      	mov	r0, r5
 8008952:	f000 f9e9 	bl	8008d28 <_sbrk_r>
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	d00a      	beq.n	8008970 <sbrk_aligned+0x34>
 800895a:	1cc4      	adds	r4, r0, #3
 800895c:	f024 0403 	bic.w	r4, r4, #3
 8008960:	42a0      	cmp	r0, r4
 8008962:	d007      	beq.n	8008974 <sbrk_aligned+0x38>
 8008964:	1a21      	subs	r1, r4, r0
 8008966:	4628      	mov	r0, r5
 8008968:	f000 f9de 	bl	8008d28 <_sbrk_r>
 800896c:	3001      	adds	r0, #1
 800896e:	d101      	bne.n	8008974 <sbrk_aligned+0x38>
 8008970:	f04f 34ff 	mov.w	r4, #4294967295
 8008974:	4620      	mov	r0, r4
 8008976:	bd70      	pop	{r4, r5, r6, pc}
 8008978:	2000071c 	.word	0x2000071c

0800897c <_malloc_r>:
 800897c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008980:	1ccd      	adds	r5, r1, #3
 8008982:	f025 0503 	bic.w	r5, r5, #3
 8008986:	3508      	adds	r5, #8
 8008988:	2d0c      	cmp	r5, #12
 800898a:	bf38      	it	cc
 800898c:	250c      	movcc	r5, #12
 800898e:	2d00      	cmp	r5, #0
 8008990:	4607      	mov	r7, r0
 8008992:	db01      	blt.n	8008998 <_malloc_r+0x1c>
 8008994:	42a9      	cmp	r1, r5
 8008996:	d905      	bls.n	80089a4 <_malloc_r+0x28>
 8008998:	230c      	movs	r3, #12
 800899a:	2600      	movs	r6, #0
 800899c:	603b      	str	r3, [r7, #0]
 800899e:	4630      	mov	r0, r6
 80089a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a4:	4e2e      	ldr	r6, [pc, #184]	; (8008a60 <_malloc_r+0xe4>)
 80089a6:	f000 fa3b 	bl	8008e20 <__malloc_lock>
 80089aa:	6833      	ldr	r3, [r6, #0]
 80089ac:	461c      	mov	r4, r3
 80089ae:	bb34      	cbnz	r4, 80089fe <_malloc_r+0x82>
 80089b0:	4629      	mov	r1, r5
 80089b2:	4638      	mov	r0, r7
 80089b4:	f7ff ffc2 	bl	800893c <sbrk_aligned>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	4604      	mov	r4, r0
 80089bc:	d14d      	bne.n	8008a5a <_malloc_r+0xde>
 80089be:	6834      	ldr	r4, [r6, #0]
 80089c0:	4626      	mov	r6, r4
 80089c2:	2e00      	cmp	r6, #0
 80089c4:	d140      	bne.n	8008a48 <_malloc_r+0xcc>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	4631      	mov	r1, r6
 80089ca:	4638      	mov	r0, r7
 80089cc:	eb04 0803 	add.w	r8, r4, r3
 80089d0:	f000 f9aa 	bl	8008d28 <_sbrk_r>
 80089d4:	4580      	cmp	r8, r0
 80089d6:	d13a      	bne.n	8008a4e <_malloc_r+0xd2>
 80089d8:	6821      	ldr	r1, [r4, #0]
 80089da:	3503      	adds	r5, #3
 80089dc:	1a6d      	subs	r5, r5, r1
 80089de:	f025 0503 	bic.w	r5, r5, #3
 80089e2:	3508      	adds	r5, #8
 80089e4:	2d0c      	cmp	r5, #12
 80089e6:	bf38      	it	cc
 80089e8:	250c      	movcc	r5, #12
 80089ea:	4638      	mov	r0, r7
 80089ec:	4629      	mov	r1, r5
 80089ee:	f7ff ffa5 	bl	800893c <sbrk_aligned>
 80089f2:	3001      	adds	r0, #1
 80089f4:	d02b      	beq.n	8008a4e <_malloc_r+0xd2>
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	442b      	add	r3, r5
 80089fa:	6023      	str	r3, [r4, #0]
 80089fc:	e00e      	b.n	8008a1c <_malloc_r+0xa0>
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	1b52      	subs	r2, r2, r5
 8008a02:	d41e      	bmi.n	8008a42 <_malloc_r+0xc6>
 8008a04:	2a0b      	cmp	r2, #11
 8008a06:	d916      	bls.n	8008a36 <_malloc_r+0xba>
 8008a08:	1961      	adds	r1, r4, r5
 8008a0a:	42a3      	cmp	r3, r4
 8008a0c:	6025      	str	r5, [r4, #0]
 8008a0e:	bf18      	it	ne
 8008a10:	6059      	strne	r1, [r3, #4]
 8008a12:	6863      	ldr	r3, [r4, #4]
 8008a14:	bf08      	it	eq
 8008a16:	6031      	streq	r1, [r6, #0]
 8008a18:	5162      	str	r2, [r4, r5]
 8008a1a:	604b      	str	r3, [r1, #4]
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	f104 060b 	add.w	r6, r4, #11
 8008a22:	f000 fa03 	bl	8008e2c <__malloc_unlock>
 8008a26:	f026 0607 	bic.w	r6, r6, #7
 8008a2a:	1d23      	adds	r3, r4, #4
 8008a2c:	1af2      	subs	r2, r6, r3
 8008a2e:	d0b6      	beq.n	800899e <_malloc_r+0x22>
 8008a30:	1b9b      	subs	r3, r3, r6
 8008a32:	50a3      	str	r3, [r4, r2]
 8008a34:	e7b3      	b.n	800899e <_malloc_r+0x22>
 8008a36:	6862      	ldr	r2, [r4, #4]
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	bf0c      	ite	eq
 8008a3c:	6032      	streq	r2, [r6, #0]
 8008a3e:	605a      	strne	r2, [r3, #4]
 8008a40:	e7ec      	b.n	8008a1c <_malloc_r+0xa0>
 8008a42:	4623      	mov	r3, r4
 8008a44:	6864      	ldr	r4, [r4, #4]
 8008a46:	e7b2      	b.n	80089ae <_malloc_r+0x32>
 8008a48:	4634      	mov	r4, r6
 8008a4a:	6876      	ldr	r6, [r6, #4]
 8008a4c:	e7b9      	b.n	80089c2 <_malloc_r+0x46>
 8008a4e:	230c      	movs	r3, #12
 8008a50:	4638      	mov	r0, r7
 8008a52:	603b      	str	r3, [r7, #0]
 8008a54:	f000 f9ea 	bl	8008e2c <__malloc_unlock>
 8008a58:	e7a1      	b.n	800899e <_malloc_r+0x22>
 8008a5a:	6025      	str	r5, [r4, #0]
 8008a5c:	e7de      	b.n	8008a1c <_malloc_r+0xa0>
 8008a5e:	bf00      	nop
 8008a60:	20000718 	.word	0x20000718

08008a64 <__ssputs_r>:
 8008a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a68:	688e      	ldr	r6, [r1, #8]
 8008a6a:	4682      	mov	sl, r0
 8008a6c:	429e      	cmp	r6, r3
 8008a6e:	460c      	mov	r4, r1
 8008a70:	4690      	mov	r8, r2
 8008a72:	461f      	mov	r7, r3
 8008a74:	d838      	bhi.n	8008ae8 <__ssputs_r+0x84>
 8008a76:	898a      	ldrh	r2, [r1, #12]
 8008a78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a7c:	d032      	beq.n	8008ae4 <__ssputs_r+0x80>
 8008a7e:	6825      	ldr	r5, [r4, #0]
 8008a80:	6909      	ldr	r1, [r1, #16]
 8008a82:	3301      	adds	r3, #1
 8008a84:	eba5 0901 	sub.w	r9, r5, r1
 8008a88:	6965      	ldr	r5, [r4, #20]
 8008a8a:	444b      	add	r3, r9
 8008a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a94:	106d      	asrs	r5, r5, #1
 8008a96:	429d      	cmp	r5, r3
 8008a98:	bf38      	it	cc
 8008a9a:	461d      	movcc	r5, r3
 8008a9c:	0553      	lsls	r3, r2, #21
 8008a9e:	d531      	bpl.n	8008b04 <__ssputs_r+0xa0>
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	f7ff ff6b 	bl	800897c <_malloc_r>
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	b950      	cbnz	r0, 8008ac0 <__ssputs_r+0x5c>
 8008aaa:	230c      	movs	r3, #12
 8008aac:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab0:	f8ca 3000 	str.w	r3, [sl]
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aba:	81a3      	strh	r3, [r4, #12]
 8008abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac0:	464a      	mov	r2, r9
 8008ac2:	6921      	ldr	r1, [r4, #16]
 8008ac4:	f7ff fa18 	bl	8007ef8 <memcpy>
 8008ac8:	89a3      	ldrh	r3, [r4, #12]
 8008aca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad2:	81a3      	strh	r3, [r4, #12]
 8008ad4:	6126      	str	r6, [r4, #16]
 8008ad6:	444e      	add	r6, r9
 8008ad8:	6026      	str	r6, [r4, #0]
 8008ada:	463e      	mov	r6, r7
 8008adc:	6165      	str	r5, [r4, #20]
 8008ade:	eba5 0509 	sub.w	r5, r5, r9
 8008ae2:	60a5      	str	r5, [r4, #8]
 8008ae4:	42be      	cmp	r6, r7
 8008ae6:	d900      	bls.n	8008aea <__ssputs_r+0x86>
 8008ae8:	463e      	mov	r6, r7
 8008aea:	4632      	mov	r2, r6
 8008aec:	4641      	mov	r1, r8
 8008aee:	6820      	ldr	r0, [r4, #0]
 8008af0:	f000 f97c 	bl	8008dec <memmove>
 8008af4:	68a3      	ldr	r3, [r4, #8]
 8008af6:	2000      	movs	r0, #0
 8008af8:	1b9b      	subs	r3, r3, r6
 8008afa:	60a3      	str	r3, [r4, #8]
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	4433      	add	r3, r6
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	e7db      	b.n	8008abc <__ssputs_r+0x58>
 8008b04:	462a      	mov	r2, r5
 8008b06:	f000 f997 	bl	8008e38 <_realloc_r>
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d1e1      	bne.n	8008ad4 <__ssputs_r+0x70>
 8008b10:	4650      	mov	r0, sl
 8008b12:	6921      	ldr	r1, [r4, #16]
 8008b14:	f7ff feca 	bl	80088ac <_free_r>
 8008b18:	e7c7      	b.n	8008aaa <__ssputs_r+0x46>
	...

08008b1c <_svfiprintf_r>:
 8008b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b20:	4698      	mov	r8, r3
 8008b22:	898b      	ldrh	r3, [r1, #12]
 8008b24:	4607      	mov	r7, r0
 8008b26:	061b      	lsls	r3, r3, #24
 8008b28:	460d      	mov	r5, r1
 8008b2a:	4614      	mov	r4, r2
 8008b2c:	b09d      	sub	sp, #116	; 0x74
 8008b2e:	d50e      	bpl.n	8008b4e <_svfiprintf_r+0x32>
 8008b30:	690b      	ldr	r3, [r1, #16]
 8008b32:	b963      	cbnz	r3, 8008b4e <_svfiprintf_r+0x32>
 8008b34:	2140      	movs	r1, #64	; 0x40
 8008b36:	f7ff ff21 	bl	800897c <_malloc_r>
 8008b3a:	6028      	str	r0, [r5, #0]
 8008b3c:	6128      	str	r0, [r5, #16]
 8008b3e:	b920      	cbnz	r0, 8008b4a <_svfiprintf_r+0x2e>
 8008b40:	230c      	movs	r3, #12
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295
 8008b48:	e0d1      	b.n	8008cee <_svfiprintf_r+0x1d2>
 8008b4a:	2340      	movs	r3, #64	; 0x40
 8008b4c:	616b      	str	r3, [r5, #20]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	9309      	str	r3, [sp, #36]	; 0x24
 8008b52:	2320      	movs	r3, #32
 8008b54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b58:	2330      	movs	r3, #48	; 0x30
 8008b5a:	f04f 0901 	mov.w	r9, #1
 8008b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d08 <_svfiprintf_r+0x1ec>
 8008b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b6a:	4623      	mov	r3, r4
 8008b6c:	469a      	mov	sl, r3
 8008b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b72:	b10a      	cbz	r2, 8008b78 <_svfiprintf_r+0x5c>
 8008b74:	2a25      	cmp	r2, #37	; 0x25
 8008b76:	d1f9      	bne.n	8008b6c <_svfiprintf_r+0x50>
 8008b78:	ebba 0b04 	subs.w	fp, sl, r4
 8008b7c:	d00b      	beq.n	8008b96 <_svfiprintf_r+0x7a>
 8008b7e:	465b      	mov	r3, fp
 8008b80:	4622      	mov	r2, r4
 8008b82:	4629      	mov	r1, r5
 8008b84:	4638      	mov	r0, r7
 8008b86:	f7ff ff6d 	bl	8008a64 <__ssputs_r>
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	f000 80aa 	beq.w	8008ce4 <_svfiprintf_r+0x1c8>
 8008b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b92:	445a      	add	r2, fp
 8008b94:	9209      	str	r2, [sp, #36]	; 0x24
 8008b96:	f89a 3000 	ldrb.w	r3, [sl]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 80a2 	beq.w	8008ce4 <_svfiprintf_r+0x1c8>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008baa:	f10a 0a01 	add.w	sl, sl, #1
 8008bae:	9304      	str	r3, [sp, #16]
 8008bb0:	9307      	str	r3, [sp, #28]
 8008bb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bb6:	931a      	str	r3, [sp, #104]	; 0x68
 8008bb8:	4654      	mov	r4, sl
 8008bba:	2205      	movs	r2, #5
 8008bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc0:	4851      	ldr	r0, [pc, #324]	; (8008d08 <_svfiprintf_r+0x1ec>)
 8008bc2:	f7ff f98b 	bl	8007edc <memchr>
 8008bc6:	9a04      	ldr	r2, [sp, #16]
 8008bc8:	b9d8      	cbnz	r0, 8008c02 <_svfiprintf_r+0xe6>
 8008bca:	06d0      	lsls	r0, r2, #27
 8008bcc:	bf44      	itt	mi
 8008bce:	2320      	movmi	r3, #32
 8008bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bd4:	0711      	lsls	r1, r2, #28
 8008bd6:	bf44      	itt	mi
 8008bd8:	232b      	movmi	r3, #43	; 0x2b
 8008bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bde:	f89a 3000 	ldrb.w	r3, [sl]
 8008be2:	2b2a      	cmp	r3, #42	; 0x2a
 8008be4:	d015      	beq.n	8008c12 <_svfiprintf_r+0xf6>
 8008be6:	4654      	mov	r4, sl
 8008be8:	2000      	movs	r0, #0
 8008bea:	f04f 0c0a 	mov.w	ip, #10
 8008bee:	9a07      	ldr	r2, [sp, #28]
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bf6:	3b30      	subs	r3, #48	; 0x30
 8008bf8:	2b09      	cmp	r3, #9
 8008bfa:	d94e      	bls.n	8008c9a <_svfiprintf_r+0x17e>
 8008bfc:	b1b0      	cbz	r0, 8008c2c <_svfiprintf_r+0x110>
 8008bfe:	9207      	str	r2, [sp, #28]
 8008c00:	e014      	b.n	8008c2c <_svfiprintf_r+0x110>
 8008c02:	eba0 0308 	sub.w	r3, r0, r8
 8008c06:	fa09 f303 	lsl.w	r3, r9, r3
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	46a2      	mov	sl, r4
 8008c0e:	9304      	str	r3, [sp, #16]
 8008c10:	e7d2      	b.n	8008bb8 <_svfiprintf_r+0x9c>
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	1d19      	adds	r1, r3, #4
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	9103      	str	r1, [sp, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	bfbb      	ittet	lt
 8008c1e:	425b      	neglt	r3, r3
 8008c20:	f042 0202 	orrlt.w	r2, r2, #2
 8008c24:	9307      	strge	r3, [sp, #28]
 8008c26:	9307      	strlt	r3, [sp, #28]
 8008c28:	bfb8      	it	lt
 8008c2a:	9204      	strlt	r2, [sp, #16]
 8008c2c:	7823      	ldrb	r3, [r4, #0]
 8008c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8008c30:	d10c      	bne.n	8008c4c <_svfiprintf_r+0x130>
 8008c32:	7863      	ldrb	r3, [r4, #1]
 8008c34:	2b2a      	cmp	r3, #42	; 0x2a
 8008c36:	d135      	bne.n	8008ca4 <_svfiprintf_r+0x188>
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	3402      	adds	r4, #2
 8008c3c:	1d1a      	adds	r2, r3, #4
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	9203      	str	r2, [sp, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	bfb8      	it	lt
 8008c46:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c4a:	9305      	str	r3, [sp, #20]
 8008c4c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008d0c <_svfiprintf_r+0x1f0>
 8008c50:	2203      	movs	r2, #3
 8008c52:	4650      	mov	r0, sl
 8008c54:	7821      	ldrb	r1, [r4, #0]
 8008c56:	f7ff f941 	bl	8007edc <memchr>
 8008c5a:	b140      	cbz	r0, 8008c6e <_svfiprintf_r+0x152>
 8008c5c:	2340      	movs	r3, #64	; 0x40
 8008c5e:	eba0 000a 	sub.w	r0, r0, sl
 8008c62:	fa03 f000 	lsl.w	r0, r3, r0
 8008c66:	9b04      	ldr	r3, [sp, #16]
 8008c68:	3401      	adds	r4, #1
 8008c6a:	4303      	orrs	r3, r0
 8008c6c:	9304      	str	r3, [sp, #16]
 8008c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c72:	2206      	movs	r2, #6
 8008c74:	4826      	ldr	r0, [pc, #152]	; (8008d10 <_svfiprintf_r+0x1f4>)
 8008c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c7a:	f7ff f92f 	bl	8007edc <memchr>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d038      	beq.n	8008cf4 <_svfiprintf_r+0x1d8>
 8008c82:	4b24      	ldr	r3, [pc, #144]	; (8008d14 <_svfiprintf_r+0x1f8>)
 8008c84:	bb1b      	cbnz	r3, 8008cce <_svfiprintf_r+0x1b2>
 8008c86:	9b03      	ldr	r3, [sp, #12]
 8008c88:	3307      	adds	r3, #7
 8008c8a:	f023 0307 	bic.w	r3, r3, #7
 8008c8e:	3308      	adds	r3, #8
 8008c90:	9303      	str	r3, [sp, #12]
 8008c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c94:	4433      	add	r3, r6
 8008c96:	9309      	str	r3, [sp, #36]	; 0x24
 8008c98:	e767      	b.n	8008b6a <_svfiprintf_r+0x4e>
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	2001      	movs	r0, #1
 8008c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ca2:	e7a5      	b.n	8008bf0 <_svfiprintf_r+0xd4>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f04f 0c0a 	mov.w	ip, #10
 8008caa:	4619      	mov	r1, r3
 8008cac:	3401      	adds	r4, #1
 8008cae:	9305      	str	r3, [sp, #20]
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cb6:	3a30      	subs	r2, #48	; 0x30
 8008cb8:	2a09      	cmp	r2, #9
 8008cba:	d903      	bls.n	8008cc4 <_svfiprintf_r+0x1a8>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0c5      	beq.n	8008c4c <_svfiprintf_r+0x130>
 8008cc0:	9105      	str	r1, [sp, #20]
 8008cc2:	e7c3      	b.n	8008c4c <_svfiprintf_r+0x130>
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ccc:	e7f0      	b.n	8008cb0 <_svfiprintf_r+0x194>
 8008cce:	ab03      	add	r3, sp, #12
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	462a      	mov	r2, r5
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	4b10      	ldr	r3, [pc, #64]	; (8008d18 <_svfiprintf_r+0x1fc>)
 8008cd8:	a904      	add	r1, sp, #16
 8008cda:	f7fc fa7f 	bl	80051dc <_printf_float>
 8008cde:	1c42      	adds	r2, r0, #1
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	d1d6      	bne.n	8008c92 <_svfiprintf_r+0x176>
 8008ce4:	89ab      	ldrh	r3, [r5, #12]
 8008ce6:	065b      	lsls	r3, r3, #25
 8008ce8:	f53f af2c 	bmi.w	8008b44 <_svfiprintf_r+0x28>
 8008cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cee:	b01d      	add	sp, #116	; 0x74
 8008cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf4:	ab03      	add	r3, sp, #12
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	462a      	mov	r2, r5
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <_svfiprintf_r+0x1fc>)
 8008cfe:	a904      	add	r1, sp, #16
 8008d00:	f7fc fd08 	bl	8005714 <_printf_i>
 8008d04:	e7eb      	b.n	8008cde <_svfiprintf_r+0x1c2>
 8008d06:	bf00      	nop
 8008d08:	08009d7c 	.word	0x08009d7c
 8008d0c:	08009d82 	.word	0x08009d82
 8008d10:	08009d86 	.word	0x08009d86
 8008d14:	080051dd 	.word	0x080051dd
 8008d18:	08008a65 	.word	0x08008a65

08008d1c <nan>:
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	4901      	ldr	r1, [pc, #4]	; (8008d24 <nan+0x8>)
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	7ff80000 	.word	0x7ff80000

08008d28 <_sbrk_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	4d05      	ldr	r5, [pc, #20]	; (8008d44 <_sbrk_r+0x1c>)
 8008d2e:	4604      	mov	r4, r0
 8008d30:	4608      	mov	r0, r1
 8008d32:	602b      	str	r3, [r5, #0]
 8008d34:	f7f8 ff70 	bl	8001c18 <_sbrk>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d102      	bne.n	8008d42 <_sbrk_r+0x1a>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	b103      	cbz	r3, 8008d42 <_sbrk_r+0x1a>
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	20000720 	.word	0x20000720

08008d48 <strncmp>:
 8008d48:	4603      	mov	r3, r0
 8008d4a:	b510      	push	{r4, lr}
 8008d4c:	b172      	cbz	r2, 8008d6c <strncmp+0x24>
 8008d4e:	3901      	subs	r1, #1
 8008d50:	1884      	adds	r4, r0, r2
 8008d52:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008d5a:	4290      	cmp	r0, r2
 8008d5c:	d101      	bne.n	8008d62 <strncmp+0x1a>
 8008d5e:	42a3      	cmp	r3, r4
 8008d60:	d101      	bne.n	8008d66 <strncmp+0x1e>
 8008d62:	1a80      	subs	r0, r0, r2
 8008d64:	bd10      	pop	{r4, pc}
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d1f3      	bne.n	8008d52 <strncmp+0xa>
 8008d6a:	e7fa      	b.n	8008d62 <strncmp+0x1a>
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	e7f9      	b.n	8008d64 <strncmp+0x1c>

08008d70 <__ascii_wctomb>:
 8008d70:	4603      	mov	r3, r0
 8008d72:	4608      	mov	r0, r1
 8008d74:	b141      	cbz	r1, 8008d88 <__ascii_wctomb+0x18>
 8008d76:	2aff      	cmp	r2, #255	; 0xff
 8008d78:	d904      	bls.n	8008d84 <__ascii_wctomb+0x14>
 8008d7a:	228a      	movs	r2, #138	; 0x8a
 8008d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	4770      	bx	lr
 8008d84:	2001      	movs	r0, #1
 8008d86:	700a      	strb	r2, [r1, #0]
 8008d88:	4770      	bx	lr
	...

08008d8c <__assert_func>:
 8008d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d8e:	4614      	mov	r4, r2
 8008d90:	461a      	mov	r2, r3
 8008d92:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <__assert_func+0x2c>)
 8008d94:	4605      	mov	r5, r0
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68d8      	ldr	r0, [r3, #12]
 8008d9a:	b14c      	cbz	r4, 8008db0 <__assert_func+0x24>
 8008d9c:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <__assert_func+0x30>)
 8008d9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008da2:	9100      	str	r1, [sp, #0]
 8008da4:	462b      	mov	r3, r5
 8008da6:	4906      	ldr	r1, [pc, #24]	; (8008dc0 <__assert_func+0x34>)
 8008da8:	f000 f80e 	bl	8008dc8 <fiprintf>
 8008dac:	f000 fa8a 	bl	80092c4 <abort>
 8008db0:	4b04      	ldr	r3, [pc, #16]	; (8008dc4 <__assert_func+0x38>)
 8008db2:	461c      	mov	r4, r3
 8008db4:	e7f3      	b.n	8008d9e <__assert_func+0x12>
 8008db6:	bf00      	nop
 8008db8:	2000000c 	.word	0x2000000c
 8008dbc:	08009d8d 	.word	0x08009d8d
 8008dc0:	08009d9a 	.word	0x08009d9a
 8008dc4:	08009dc8 	.word	0x08009dc8

08008dc8 <fiprintf>:
 8008dc8:	b40e      	push	{r1, r2, r3}
 8008dca:	b503      	push	{r0, r1, lr}
 8008dcc:	4601      	mov	r1, r0
 8008dce:	ab03      	add	r3, sp, #12
 8008dd0:	4805      	ldr	r0, [pc, #20]	; (8008de8 <fiprintf+0x20>)
 8008dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd6:	6800      	ldr	r0, [r0, #0]
 8008dd8:	9301      	str	r3, [sp, #4]
 8008dda:	f000 f883 	bl	8008ee4 <_vfiprintf_r>
 8008dde:	b002      	add	sp, #8
 8008de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008de4:	b003      	add	sp, #12
 8008de6:	4770      	bx	lr
 8008de8:	2000000c 	.word	0x2000000c

08008dec <memmove>:
 8008dec:	4288      	cmp	r0, r1
 8008dee:	b510      	push	{r4, lr}
 8008df0:	eb01 0402 	add.w	r4, r1, r2
 8008df4:	d902      	bls.n	8008dfc <memmove+0x10>
 8008df6:	4284      	cmp	r4, r0
 8008df8:	4623      	mov	r3, r4
 8008dfa:	d807      	bhi.n	8008e0c <memmove+0x20>
 8008dfc:	1e43      	subs	r3, r0, #1
 8008dfe:	42a1      	cmp	r1, r4
 8008e00:	d008      	beq.n	8008e14 <memmove+0x28>
 8008e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e0a:	e7f8      	b.n	8008dfe <memmove+0x12>
 8008e0c:	4601      	mov	r1, r0
 8008e0e:	4402      	add	r2, r0
 8008e10:	428a      	cmp	r2, r1
 8008e12:	d100      	bne.n	8008e16 <memmove+0x2a>
 8008e14:	bd10      	pop	{r4, pc}
 8008e16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e1e:	e7f7      	b.n	8008e10 <memmove+0x24>

08008e20 <__malloc_lock>:
 8008e20:	4801      	ldr	r0, [pc, #4]	; (8008e28 <__malloc_lock+0x8>)
 8008e22:	f000 bc0b 	b.w	800963c <__retarget_lock_acquire_recursive>
 8008e26:	bf00      	nop
 8008e28:	20000724 	.word	0x20000724

08008e2c <__malloc_unlock>:
 8008e2c:	4801      	ldr	r0, [pc, #4]	; (8008e34 <__malloc_unlock+0x8>)
 8008e2e:	f000 bc06 	b.w	800963e <__retarget_lock_release_recursive>
 8008e32:	bf00      	nop
 8008e34:	20000724 	.word	0x20000724

08008e38 <_realloc_r>:
 8008e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3c:	4680      	mov	r8, r0
 8008e3e:	4614      	mov	r4, r2
 8008e40:	460e      	mov	r6, r1
 8008e42:	b921      	cbnz	r1, 8008e4e <_realloc_r+0x16>
 8008e44:	4611      	mov	r1, r2
 8008e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4a:	f7ff bd97 	b.w	800897c <_malloc_r>
 8008e4e:	b92a      	cbnz	r2, 8008e5c <_realloc_r+0x24>
 8008e50:	f7ff fd2c 	bl	80088ac <_free_r>
 8008e54:	4625      	mov	r5, r4
 8008e56:	4628      	mov	r0, r5
 8008e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5c:	f000 fc56 	bl	800970c <_malloc_usable_size_r>
 8008e60:	4284      	cmp	r4, r0
 8008e62:	4607      	mov	r7, r0
 8008e64:	d802      	bhi.n	8008e6c <_realloc_r+0x34>
 8008e66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e6a:	d812      	bhi.n	8008e92 <_realloc_r+0x5a>
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	4640      	mov	r0, r8
 8008e70:	f7ff fd84 	bl	800897c <_malloc_r>
 8008e74:	4605      	mov	r5, r0
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d0ed      	beq.n	8008e56 <_realloc_r+0x1e>
 8008e7a:	42bc      	cmp	r4, r7
 8008e7c:	4622      	mov	r2, r4
 8008e7e:	4631      	mov	r1, r6
 8008e80:	bf28      	it	cs
 8008e82:	463a      	movcs	r2, r7
 8008e84:	f7ff f838 	bl	8007ef8 <memcpy>
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	f7ff fd0e 	bl	80088ac <_free_r>
 8008e90:	e7e1      	b.n	8008e56 <_realloc_r+0x1e>
 8008e92:	4635      	mov	r5, r6
 8008e94:	e7df      	b.n	8008e56 <_realloc_r+0x1e>

08008e96 <__sfputc_r>:
 8008e96:	6893      	ldr	r3, [r2, #8]
 8008e98:	b410      	push	{r4}
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	6093      	str	r3, [r2, #8]
 8008ea0:	da07      	bge.n	8008eb2 <__sfputc_r+0x1c>
 8008ea2:	6994      	ldr	r4, [r2, #24]
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	db01      	blt.n	8008eac <__sfputc_r+0x16>
 8008ea8:	290a      	cmp	r1, #10
 8008eaa:	d102      	bne.n	8008eb2 <__sfputc_r+0x1c>
 8008eac:	bc10      	pop	{r4}
 8008eae:	f000 b949 	b.w	8009144 <__swbuf_r>
 8008eb2:	6813      	ldr	r3, [r2, #0]
 8008eb4:	1c58      	adds	r0, r3, #1
 8008eb6:	6010      	str	r0, [r2, #0]
 8008eb8:	7019      	strb	r1, [r3, #0]
 8008eba:	4608      	mov	r0, r1
 8008ebc:	bc10      	pop	{r4}
 8008ebe:	4770      	bx	lr

08008ec0 <__sfputs_r>:
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	460f      	mov	r7, r1
 8008ec6:	4614      	mov	r4, r2
 8008ec8:	18d5      	adds	r5, r2, r3
 8008eca:	42ac      	cmp	r4, r5
 8008ecc:	d101      	bne.n	8008ed2 <__sfputs_r+0x12>
 8008ece:	2000      	movs	r0, #0
 8008ed0:	e007      	b.n	8008ee2 <__sfputs_r+0x22>
 8008ed2:	463a      	mov	r2, r7
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eda:	f7ff ffdc 	bl	8008e96 <__sfputc_r>
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	d1f3      	bne.n	8008eca <__sfputs_r+0xa>
 8008ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ee4 <_vfiprintf_r>:
 8008ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee8:	460d      	mov	r5, r1
 8008eea:	4614      	mov	r4, r2
 8008eec:	4698      	mov	r8, r3
 8008eee:	4606      	mov	r6, r0
 8008ef0:	b09d      	sub	sp, #116	; 0x74
 8008ef2:	b118      	cbz	r0, 8008efc <_vfiprintf_r+0x18>
 8008ef4:	6983      	ldr	r3, [r0, #24]
 8008ef6:	b90b      	cbnz	r3, 8008efc <_vfiprintf_r+0x18>
 8008ef8:	f000 fb02 	bl	8009500 <__sinit>
 8008efc:	4b89      	ldr	r3, [pc, #548]	; (8009124 <_vfiprintf_r+0x240>)
 8008efe:	429d      	cmp	r5, r3
 8008f00:	d11b      	bne.n	8008f3a <_vfiprintf_r+0x56>
 8008f02:	6875      	ldr	r5, [r6, #4]
 8008f04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f06:	07d9      	lsls	r1, r3, #31
 8008f08:	d405      	bmi.n	8008f16 <_vfiprintf_r+0x32>
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	059a      	lsls	r2, r3, #22
 8008f0e:	d402      	bmi.n	8008f16 <_vfiprintf_r+0x32>
 8008f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f12:	f000 fb93 	bl	800963c <__retarget_lock_acquire_recursive>
 8008f16:	89ab      	ldrh	r3, [r5, #12]
 8008f18:	071b      	lsls	r3, r3, #28
 8008f1a:	d501      	bpl.n	8008f20 <_vfiprintf_r+0x3c>
 8008f1c:	692b      	ldr	r3, [r5, #16]
 8008f1e:	b9eb      	cbnz	r3, 8008f5c <_vfiprintf_r+0x78>
 8008f20:	4629      	mov	r1, r5
 8008f22:	4630      	mov	r0, r6
 8008f24:	f000 f960 	bl	80091e8 <__swsetup_r>
 8008f28:	b1c0      	cbz	r0, 8008f5c <_vfiprintf_r+0x78>
 8008f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f2c:	07dc      	lsls	r4, r3, #31
 8008f2e:	d50e      	bpl.n	8008f4e <_vfiprintf_r+0x6a>
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	b01d      	add	sp, #116	; 0x74
 8008f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3a:	4b7b      	ldr	r3, [pc, #492]	; (8009128 <_vfiprintf_r+0x244>)
 8008f3c:	429d      	cmp	r5, r3
 8008f3e:	d101      	bne.n	8008f44 <_vfiprintf_r+0x60>
 8008f40:	68b5      	ldr	r5, [r6, #8]
 8008f42:	e7df      	b.n	8008f04 <_vfiprintf_r+0x20>
 8008f44:	4b79      	ldr	r3, [pc, #484]	; (800912c <_vfiprintf_r+0x248>)
 8008f46:	429d      	cmp	r5, r3
 8008f48:	bf08      	it	eq
 8008f4a:	68f5      	ldreq	r5, [r6, #12]
 8008f4c:	e7da      	b.n	8008f04 <_vfiprintf_r+0x20>
 8008f4e:	89ab      	ldrh	r3, [r5, #12]
 8008f50:	0598      	lsls	r0, r3, #22
 8008f52:	d4ed      	bmi.n	8008f30 <_vfiprintf_r+0x4c>
 8008f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f56:	f000 fb72 	bl	800963e <__retarget_lock_release_recursive>
 8008f5a:	e7e9      	b.n	8008f30 <_vfiprintf_r+0x4c>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f60:	2320      	movs	r3, #32
 8008f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f66:	2330      	movs	r3, #48	; 0x30
 8008f68:	f04f 0901 	mov.w	r9, #1
 8008f6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f70:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009130 <_vfiprintf_r+0x24c>
 8008f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f78:	4623      	mov	r3, r4
 8008f7a:	469a      	mov	sl, r3
 8008f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f80:	b10a      	cbz	r2, 8008f86 <_vfiprintf_r+0xa2>
 8008f82:	2a25      	cmp	r2, #37	; 0x25
 8008f84:	d1f9      	bne.n	8008f7a <_vfiprintf_r+0x96>
 8008f86:	ebba 0b04 	subs.w	fp, sl, r4
 8008f8a:	d00b      	beq.n	8008fa4 <_vfiprintf_r+0xc0>
 8008f8c:	465b      	mov	r3, fp
 8008f8e:	4622      	mov	r2, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7ff ff94 	bl	8008ec0 <__sfputs_r>
 8008f98:	3001      	adds	r0, #1
 8008f9a:	f000 80aa 	beq.w	80090f2 <_vfiprintf_r+0x20e>
 8008f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fa0:	445a      	add	r2, fp
 8008fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 80a2 	beq.w	80090f2 <_vfiprintf_r+0x20e>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fb8:	f10a 0a01 	add.w	sl, sl, #1
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	9307      	str	r3, [sp, #28]
 8008fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fc6:	4654      	mov	r4, sl
 8008fc8:	2205      	movs	r2, #5
 8008fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fce:	4858      	ldr	r0, [pc, #352]	; (8009130 <_vfiprintf_r+0x24c>)
 8008fd0:	f7fe ff84 	bl	8007edc <memchr>
 8008fd4:	9a04      	ldr	r2, [sp, #16]
 8008fd6:	b9d8      	cbnz	r0, 8009010 <_vfiprintf_r+0x12c>
 8008fd8:	06d1      	lsls	r1, r2, #27
 8008fda:	bf44      	itt	mi
 8008fdc:	2320      	movmi	r3, #32
 8008fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe2:	0713      	lsls	r3, r2, #28
 8008fe4:	bf44      	itt	mi
 8008fe6:	232b      	movmi	r3, #43	; 0x2b
 8008fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fec:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff2:	d015      	beq.n	8009020 <_vfiprintf_r+0x13c>
 8008ff4:	4654      	mov	r4, sl
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	f04f 0c0a 	mov.w	ip, #10
 8008ffc:	9a07      	ldr	r2, [sp, #28]
 8008ffe:	4621      	mov	r1, r4
 8009000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009004:	3b30      	subs	r3, #48	; 0x30
 8009006:	2b09      	cmp	r3, #9
 8009008:	d94e      	bls.n	80090a8 <_vfiprintf_r+0x1c4>
 800900a:	b1b0      	cbz	r0, 800903a <_vfiprintf_r+0x156>
 800900c:	9207      	str	r2, [sp, #28]
 800900e:	e014      	b.n	800903a <_vfiprintf_r+0x156>
 8009010:	eba0 0308 	sub.w	r3, r0, r8
 8009014:	fa09 f303 	lsl.w	r3, r9, r3
 8009018:	4313      	orrs	r3, r2
 800901a:	46a2      	mov	sl, r4
 800901c:	9304      	str	r3, [sp, #16]
 800901e:	e7d2      	b.n	8008fc6 <_vfiprintf_r+0xe2>
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	1d19      	adds	r1, r3, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	9103      	str	r1, [sp, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfbb      	ittet	lt
 800902c:	425b      	neglt	r3, r3
 800902e:	f042 0202 	orrlt.w	r2, r2, #2
 8009032:	9307      	strge	r3, [sp, #28]
 8009034:	9307      	strlt	r3, [sp, #28]
 8009036:	bfb8      	it	lt
 8009038:	9204      	strlt	r2, [sp, #16]
 800903a:	7823      	ldrb	r3, [r4, #0]
 800903c:	2b2e      	cmp	r3, #46	; 0x2e
 800903e:	d10c      	bne.n	800905a <_vfiprintf_r+0x176>
 8009040:	7863      	ldrb	r3, [r4, #1]
 8009042:	2b2a      	cmp	r3, #42	; 0x2a
 8009044:	d135      	bne.n	80090b2 <_vfiprintf_r+0x1ce>
 8009046:	9b03      	ldr	r3, [sp, #12]
 8009048:	3402      	adds	r4, #2
 800904a:	1d1a      	adds	r2, r3, #4
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	9203      	str	r2, [sp, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	bfb8      	it	lt
 8009054:	f04f 33ff 	movlt.w	r3, #4294967295
 8009058:	9305      	str	r3, [sp, #20]
 800905a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009134 <_vfiprintf_r+0x250>
 800905e:	2203      	movs	r2, #3
 8009060:	4650      	mov	r0, sl
 8009062:	7821      	ldrb	r1, [r4, #0]
 8009064:	f7fe ff3a 	bl	8007edc <memchr>
 8009068:	b140      	cbz	r0, 800907c <_vfiprintf_r+0x198>
 800906a:	2340      	movs	r3, #64	; 0x40
 800906c:	eba0 000a 	sub.w	r0, r0, sl
 8009070:	fa03 f000 	lsl.w	r0, r3, r0
 8009074:	9b04      	ldr	r3, [sp, #16]
 8009076:	3401      	adds	r4, #1
 8009078:	4303      	orrs	r3, r0
 800907a:	9304      	str	r3, [sp, #16]
 800907c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009080:	2206      	movs	r2, #6
 8009082:	482d      	ldr	r0, [pc, #180]	; (8009138 <_vfiprintf_r+0x254>)
 8009084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009088:	f7fe ff28 	bl	8007edc <memchr>
 800908c:	2800      	cmp	r0, #0
 800908e:	d03f      	beq.n	8009110 <_vfiprintf_r+0x22c>
 8009090:	4b2a      	ldr	r3, [pc, #168]	; (800913c <_vfiprintf_r+0x258>)
 8009092:	bb1b      	cbnz	r3, 80090dc <_vfiprintf_r+0x1f8>
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	3307      	adds	r3, #7
 8009098:	f023 0307 	bic.w	r3, r3, #7
 800909c:	3308      	adds	r3, #8
 800909e:	9303      	str	r3, [sp, #12]
 80090a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a2:	443b      	add	r3, r7
 80090a4:	9309      	str	r3, [sp, #36]	; 0x24
 80090a6:	e767      	b.n	8008f78 <_vfiprintf_r+0x94>
 80090a8:	460c      	mov	r4, r1
 80090aa:	2001      	movs	r0, #1
 80090ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80090b0:	e7a5      	b.n	8008ffe <_vfiprintf_r+0x11a>
 80090b2:	2300      	movs	r3, #0
 80090b4:	f04f 0c0a 	mov.w	ip, #10
 80090b8:	4619      	mov	r1, r3
 80090ba:	3401      	adds	r4, #1
 80090bc:	9305      	str	r3, [sp, #20]
 80090be:	4620      	mov	r0, r4
 80090c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090c4:	3a30      	subs	r2, #48	; 0x30
 80090c6:	2a09      	cmp	r2, #9
 80090c8:	d903      	bls.n	80090d2 <_vfiprintf_r+0x1ee>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d0c5      	beq.n	800905a <_vfiprintf_r+0x176>
 80090ce:	9105      	str	r1, [sp, #20]
 80090d0:	e7c3      	b.n	800905a <_vfiprintf_r+0x176>
 80090d2:	4604      	mov	r4, r0
 80090d4:	2301      	movs	r3, #1
 80090d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80090da:	e7f0      	b.n	80090be <_vfiprintf_r+0x1da>
 80090dc:	ab03      	add	r3, sp, #12
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	462a      	mov	r2, r5
 80090e2:	4630      	mov	r0, r6
 80090e4:	4b16      	ldr	r3, [pc, #88]	; (8009140 <_vfiprintf_r+0x25c>)
 80090e6:	a904      	add	r1, sp, #16
 80090e8:	f7fc f878 	bl	80051dc <_printf_float>
 80090ec:	4607      	mov	r7, r0
 80090ee:	1c78      	adds	r0, r7, #1
 80090f0:	d1d6      	bne.n	80090a0 <_vfiprintf_r+0x1bc>
 80090f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090f4:	07d9      	lsls	r1, r3, #31
 80090f6:	d405      	bmi.n	8009104 <_vfiprintf_r+0x220>
 80090f8:	89ab      	ldrh	r3, [r5, #12]
 80090fa:	059a      	lsls	r2, r3, #22
 80090fc:	d402      	bmi.n	8009104 <_vfiprintf_r+0x220>
 80090fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009100:	f000 fa9d 	bl	800963e <__retarget_lock_release_recursive>
 8009104:	89ab      	ldrh	r3, [r5, #12]
 8009106:	065b      	lsls	r3, r3, #25
 8009108:	f53f af12 	bmi.w	8008f30 <_vfiprintf_r+0x4c>
 800910c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800910e:	e711      	b.n	8008f34 <_vfiprintf_r+0x50>
 8009110:	ab03      	add	r3, sp, #12
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	462a      	mov	r2, r5
 8009116:	4630      	mov	r0, r6
 8009118:	4b09      	ldr	r3, [pc, #36]	; (8009140 <_vfiprintf_r+0x25c>)
 800911a:	a904      	add	r1, sp, #16
 800911c:	f7fc fafa 	bl	8005714 <_printf_i>
 8009120:	e7e4      	b.n	80090ec <_vfiprintf_r+0x208>
 8009122:	bf00      	nop
 8009124:	08009dec 	.word	0x08009dec
 8009128:	08009e0c 	.word	0x08009e0c
 800912c:	08009dcc 	.word	0x08009dcc
 8009130:	08009d7c 	.word	0x08009d7c
 8009134:	08009d82 	.word	0x08009d82
 8009138:	08009d86 	.word	0x08009d86
 800913c:	080051dd 	.word	0x080051dd
 8009140:	08008ec1 	.word	0x08008ec1

08009144 <__swbuf_r>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	460e      	mov	r6, r1
 8009148:	4614      	mov	r4, r2
 800914a:	4605      	mov	r5, r0
 800914c:	b118      	cbz	r0, 8009156 <__swbuf_r+0x12>
 800914e:	6983      	ldr	r3, [r0, #24]
 8009150:	b90b      	cbnz	r3, 8009156 <__swbuf_r+0x12>
 8009152:	f000 f9d5 	bl	8009500 <__sinit>
 8009156:	4b21      	ldr	r3, [pc, #132]	; (80091dc <__swbuf_r+0x98>)
 8009158:	429c      	cmp	r4, r3
 800915a:	d12b      	bne.n	80091b4 <__swbuf_r+0x70>
 800915c:	686c      	ldr	r4, [r5, #4]
 800915e:	69a3      	ldr	r3, [r4, #24]
 8009160:	60a3      	str	r3, [r4, #8]
 8009162:	89a3      	ldrh	r3, [r4, #12]
 8009164:	071a      	lsls	r2, r3, #28
 8009166:	d52f      	bpl.n	80091c8 <__swbuf_r+0x84>
 8009168:	6923      	ldr	r3, [r4, #16]
 800916a:	b36b      	cbz	r3, 80091c8 <__swbuf_r+0x84>
 800916c:	6923      	ldr	r3, [r4, #16]
 800916e:	6820      	ldr	r0, [r4, #0]
 8009170:	b2f6      	uxtb	r6, r6
 8009172:	1ac0      	subs	r0, r0, r3
 8009174:	6963      	ldr	r3, [r4, #20]
 8009176:	4637      	mov	r7, r6
 8009178:	4283      	cmp	r3, r0
 800917a:	dc04      	bgt.n	8009186 <__swbuf_r+0x42>
 800917c:	4621      	mov	r1, r4
 800917e:	4628      	mov	r0, r5
 8009180:	f000 f92a 	bl	80093d8 <_fflush_r>
 8009184:	bb30      	cbnz	r0, 80091d4 <__swbuf_r+0x90>
 8009186:	68a3      	ldr	r3, [r4, #8]
 8009188:	3001      	adds	r0, #1
 800918a:	3b01      	subs	r3, #1
 800918c:	60a3      	str	r3, [r4, #8]
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	6022      	str	r2, [r4, #0]
 8009194:	701e      	strb	r6, [r3, #0]
 8009196:	6963      	ldr	r3, [r4, #20]
 8009198:	4283      	cmp	r3, r0
 800919a:	d004      	beq.n	80091a6 <__swbuf_r+0x62>
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	07db      	lsls	r3, r3, #31
 80091a0:	d506      	bpl.n	80091b0 <__swbuf_r+0x6c>
 80091a2:	2e0a      	cmp	r6, #10
 80091a4:	d104      	bne.n	80091b0 <__swbuf_r+0x6c>
 80091a6:	4621      	mov	r1, r4
 80091a8:	4628      	mov	r0, r5
 80091aa:	f000 f915 	bl	80093d8 <_fflush_r>
 80091ae:	b988      	cbnz	r0, 80091d4 <__swbuf_r+0x90>
 80091b0:	4638      	mov	r0, r7
 80091b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b4:	4b0a      	ldr	r3, [pc, #40]	; (80091e0 <__swbuf_r+0x9c>)
 80091b6:	429c      	cmp	r4, r3
 80091b8:	d101      	bne.n	80091be <__swbuf_r+0x7a>
 80091ba:	68ac      	ldr	r4, [r5, #8]
 80091bc:	e7cf      	b.n	800915e <__swbuf_r+0x1a>
 80091be:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <__swbuf_r+0xa0>)
 80091c0:	429c      	cmp	r4, r3
 80091c2:	bf08      	it	eq
 80091c4:	68ec      	ldreq	r4, [r5, #12]
 80091c6:	e7ca      	b.n	800915e <__swbuf_r+0x1a>
 80091c8:	4621      	mov	r1, r4
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 f80c 	bl	80091e8 <__swsetup_r>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d0cb      	beq.n	800916c <__swbuf_r+0x28>
 80091d4:	f04f 37ff 	mov.w	r7, #4294967295
 80091d8:	e7ea      	b.n	80091b0 <__swbuf_r+0x6c>
 80091da:	bf00      	nop
 80091dc:	08009dec 	.word	0x08009dec
 80091e0:	08009e0c 	.word	0x08009e0c
 80091e4:	08009dcc 	.word	0x08009dcc

080091e8 <__swsetup_r>:
 80091e8:	4b32      	ldr	r3, [pc, #200]	; (80092b4 <__swsetup_r+0xcc>)
 80091ea:	b570      	push	{r4, r5, r6, lr}
 80091ec:	681d      	ldr	r5, [r3, #0]
 80091ee:	4606      	mov	r6, r0
 80091f0:	460c      	mov	r4, r1
 80091f2:	b125      	cbz	r5, 80091fe <__swsetup_r+0x16>
 80091f4:	69ab      	ldr	r3, [r5, #24]
 80091f6:	b913      	cbnz	r3, 80091fe <__swsetup_r+0x16>
 80091f8:	4628      	mov	r0, r5
 80091fa:	f000 f981 	bl	8009500 <__sinit>
 80091fe:	4b2e      	ldr	r3, [pc, #184]	; (80092b8 <__swsetup_r+0xd0>)
 8009200:	429c      	cmp	r4, r3
 8009202:	d10f      	bne.n	8009224 <__swsetup_r+0x3c>
 8009204:	686c      	ldr	r4, [r5, #4]
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800920c:	0719      	lsls	r1, r3, #28
 800920e:	d42c      	bmi.n	800926a <__swsetup_r+0x82>
 8009210:	06dd      	lsls	r5, r3, #27
 8009212:	d411      	bmi.n	8009238 <__swsetup_r+0x50>
 8009214:	2309      	movs	r3, #9
 8009216:	6033      	str	r3, [r6, #0]
 8009218:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	e03e      	b.n	80092a2 <__swsetup_r+0xba>
 8009224:	4b25      	ldr	r3, [pc, #148]	; (80092bc <__swsetup_r+0xd4>)
 8009226:	429c      	cmp	r4, r3
 8009228:	d101      	bne.n	800922e <__swsetup_r+0x46>
 800922a:	68ac      	ldr	r4, [r5, #8]
 800922c:	e7eb      	b.n	8009206 <__swsetup_r+0x1e>
 800922e:	4b24      	ldr	r3, [pc, #144]	; (80092c0 <__swsetup_r+0xd8>)
 8009230:	429c      	cmp	r4, r3
 8009232:	bf08      	it	eq
 8009234:	68ec      	ldreq	r4, [r5, #12]
 8009236:	e7e6      	b.n	8009206 <__swsetup_r+0x1e>
 8009238:	0758      	lsls	r0, r3, #29
 800923a:	d512      	bpl.n	8009262 <__swsetup_r+0x7a>
 800923c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800923e:	b141      	cbz	r1, 8009252 <__swsetup_r+0x6a>
 8009240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009244:	4299      	cmp	r1, r3
 8009246:	d002      	beq.n	800924e <__swsetup_r+0x66>
 8009248:	4630      	mov	r0, r6
 800924a:	f7ff fb2f 	bl	80088ac <_free_r>
 800924e:	2300      	movs	r3, #0
 8009250:	6363      	str	r3, [r4, #52]	; 0x34
 8009252:	89a3      	ldrh	r3, [r4, #12]
 8009254:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009258:	81a3      	strh	r3, [r4, #12]
 800925a:	2300      	movs	r3, #0
 800925c:	6063      	str	r3, [r4, #4]
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	f043 0308 	orr.w	r3, r3, #8
 8009268:	81a3      	strh	r3, [r4, #12]
 800926a:	6923      	ldr	r3, [r4, #16]
 800926c:	b94b      	cbnz	r3, 8009282 <__swsetup_r+0x9a>
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009278:	d003      	beq.n	8009282 <__swsetup_r+0x9a>
 800927a:	4621      	mov	r1, r4
 800927c:	4630      	mov	r0, r6
 800927e:	f000 fa05 	bl	800968c <__smakebuf_r>
 8009282:	89a0      	ldrh	r0, [r4, #12]
 8009284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009288:	f010 0301 	ands.w	r3, r0, #1
 800928c:	d00a      	beq.n	80092a4 <__swsetup_r+0xbc>
 800928e:	2300      	movs	r3, #0
 8009290:	60a3      	str	r3, [r4, #8]
 8009292:	6963      	ldr	r3, [r4, #20]
 8009294:	425b      	negs	r3, r3
 8009296:	61a3      	str	r3, [r4, #24]
 8009298:	6923      	ldr	r3, [r4, #16]
 800929a:	b943      	cbnz	r3, 80092ae <__swsetup_r+0xc6>
 800929c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092a0:	d1ba      	bne.n	8009218 <__swsetup_r+0x30>
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
 80092a4:	0781      	lsls	r1, r0, #30
 80092a6:	bf58      	it	pl
 80092a8:	6963      	ldrpl	r3, [r4, #20]
 80092aa:	60a3      	str	r3, [r4, #8]
 80092ac:	e7f4      	b.n	8009298 <__swsetup_r+0xb0>
 80092ae:	2000      	movs	r0, #0
 80092b0:	e7f7      	b.n	80092a2 <__swsetup_r+0xba>
 80092b2:	bf00      	nop
 80092b4:	2000000c 	.word	0x2000000c
 80092b8:	08009dec 	.word	0x08009dec
 80092bc:	08009e0c 	.word	0x08009e0c
 80092c0:	08009dcc 	.word	0x08009dcc

080092c4 <abort>:
 80092c4:	2006      	movs	r0, #6
 80092c6:	b508      	push	{r3, lr}
 80092c8:	f000 fa50 	bl	800976c <raise>
 80092cc:	2001      	movs	r0, #1
 80092ce:	f7f8 fc36 	bl	8001b3e <_exit>
	...

080092d4 <__sflush_r>:
 80092d4:	898a      	ldrh	r2, [r1, #12]
 80092d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d8:	4605      	mov	r5, r0
 80092da:	0710      	lsls	r0, r2, #28
 80092dc:	460c      	mov	r4, r1
 80092de:	d457      	bmi.n	8009390 <__sflush_r+0xbc>
 80092e0:	684b      	ldr	r3, [r1, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	dc04      	bgt.n	80092f0 <__sflush_r+0x1c>
 80092e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	dc01      	bgt.n	80092f0 <__sflush_r+0x1c>
 80092ec:	2000      	movs	r0, #0
 80092ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092f2:	2e00      	cmp	r6, #0
 80092f4:	d0fa      	beq.n	80092ec <__sflush_r+0x18>
 80092f6:	2300      	movs	r3, #0
 80092f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092fc:	682f      	ldr	r7, [r5, #0]
 80092fe:	602b      	str	r3, [r5, #0]
 8009300:	d032      	beq.n	8009368 <__sflush_r+0x94>
 8009302:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	075a      	lsls	r2, r3, #29
 8009308:	d505      	bpl.n	8009316 <__sflush_r+0x42>
 800930a:	6863      	ldr	r3, [r4, #4]
 800930c:	1ac0      	subs	r0, r0, r3
 800930e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009310:	b10b      	cbz	r3, 8009316 <__sflush_r+0x42>
 8009312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009314:	1ac0      	subs	r0, r0, r3
 8009316:	2300      	movs	r3, #0
 8009318:	4602      	mov	r2, r0
 800931a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800931c:	4628      	mov	r0, r5
 800931e:	6a21      	ldr	r1, [r4, #32]
 8009320:	47b0      	blx	r6
 8009322:	1c43      	adds	r3, r0, #1
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	d106      	bne.n	8009336 <__sflush_r+0x62>
 8009328:	6829      	ldr	r1, [r5, #0]
 800932a:	291d      	cmp	r1, #29
 800932c:	d82c      	bhi.n	8009388 <__sflush_r+0xb4>
 800932e:	4a29      	ldr	r2, [pc, #164]	; (80093d4 <__sflush_r+0x100>)
 8009330:	40ca      	lsrs	r2, r1
 8009332:	07d6      	lsls	r6, r2, #31
 8009334:	d528      	bpl.n	8009388 <__sflush_r+0xb4>
 8009336:	2200      	movs	r2, #0
 8009338:	6062      	str	r2, [r4, #4]
 800933a:	6922      	ldr	r2, [r4, #16]
 800933c:	04d9      	lsls	r1, r3, #19
 800933e:	6022      	str	r2, [r4, #0]
 8009340:	d504      	bpl.n	800934c <__sflush_r+0x78>
 8009342:	1c42      	adds	r2, r0, #1
 8009344:	d101      	bne.n	800934a <__sflush_r+0x76>
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	b903      	cbnz	r3, 800934c <__sflush_r+0x78>
 800934a:	6560      	str	r0, [r4, #84]	; 0x54
 800934c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800934e:	602f      	str	r7, [r5, #0]
 8009350:	2900      	cmp	r1, #0
 8009352:	d0cb      	beq.n	80092ec <__sflush_r+0x18>
 8009354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009358:	4299      	cmp	r1, r3
 800935a:	d002      	beq.n	8009362 <__sflush_r+0x8e>
 800935c:	4628      	mov	r0, r5
 800935e:	f7ff faa5 	bl	80088ac <_free_r>
 8009362:	2000      	movs	r0, #0
 8009364:	6360      	str	r0, [r4, #52]	; 0x34
 8009366:	e7c2      	b.n	80092ee <__sflush_r+0x1a>
 8009368:	6a21      	ldr	r1, [r4, #32]
 800936a:	2301      	movs	r3, #1
 800936c:	4628      	mov	r0, r5
 800936e:	47b0      	blx	r6
 8009370:	1c41      	adds	r1, r0, #1
 8009372:	d1c7      	bne.n	8009304 <__sflush_r+0x30>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0c4      	beq.n	8009304 <__sflush_r+0x30>
 800937a:	2b1d      	cmp	r3, #29
 800937c:	d001      	beq.n	8009382 <__sflush_r+0xae>
 800937e:	2b16      	cmp	r3, #22
 8009380:	d101      	bne.n	8009386 <__sflush_r+0xb2>
 8009382:	602f      	str	r7, [r5, #0]
 8009384:	e7b2      	b.n	80092ec <__sflush_r+0x18>
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	e7ae      	b.n	80092ee <__sflush_r+0x1a>
 8009390:	690f      	ldr	r7, [r1, #16]
 8009392:	2f00      	cmp	r7, #0
 8009394:	d0aa      	beq.n	80092ec <__sflush_r+0x18>
 8009396:	0793      	lsls	r3, r2, #30
 8009398:	bf18      	it	ne
 800939a:	2300      	movne	r3, #0
 800939c:	680e      	ldr	r6, [r1, #0]
 800939e:	bf08      	it	eq
 80093a0:	694b      	ldreq	r3, [r1, #20]
 80093a2:	1bf6      	subs	r6, r6, r7
 80093a4:	600f      	str	r7, [r1, #0]
 80093a6:	608b      	str	r3, [r1, #8]
 80093a8:	2e00      	cmp	r6, #0
 80093aa:	dd9f      	ble.n	80092ec <__sflush_r+0x18>
 80093ac:	4633      	mov	r3, r6
 80093ae:	463a      	mov	r2, r7
 80093b0:	4628      	mov	r0, r5
 80093b2:	6a21      	ldr	r1, [r4, #32]
 80093b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80093b8:	47e0      	blx	ip
 80093ba:	2800      	cmp	r0, #0
 80093bc:	dc06      	bgt.n	80093cc <__sflush_r+0xf8>
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	f04f 30ff 	mov.w	r0, #4294967295
 80093c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	e790      	b.n	80092ee <__sflush_r+0x1a>
 80093cc:	4407      	add	r7, r0
 80093ce:	1a36      	subs	r6, r6, r0
 80093d0:	e7ea      	b.n	80093a8 <__sflush_r+0xd4>
 80093d2:	bf00      	nop
 80093d4:	20400001 	.word	0x20400001

080093d8 <_fflush_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	690b      	ldr	r3, [r1, #16]
 80093dc:	4605      	mov	r5, r0
 80093de:	460c      	mov	r4, r1
 80093e0:	b913      	cbnz	r3, 80093e8 <_fflush_r+0x10>
 80093e2:	2500      	movs	r5, #0
 80093e4:	4628      	mov	r0, r5
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	b118      	cbz	r0, 80093f2 <_fflush_r+0x1a>
 80093ea:	6983      	ldr	r3, [r0, #24]
 80093ec:	b90b      	cbnz	r3, 80093f2 <_fflush_r+0x1a>
 80093ee:	f000 f887 	bl	8009500 <__sinit>
 80093f2:	4b14      	ldr	r3, [pc, #80]	; (8009444 <_fflush_r+0x6c>)
 80093f4:	429c      	cmp	r4, r3
 80093f6:	d11b      	bne.n	8009430 <_fflush_r+0x58>
 80093f8:	686c      	ldr	r4, [r5, #4]
 80093fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d0ef      	beq.n	80093e2 <_fflush_r+0xa>
 8009402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009404:	07d0      	lsls	r0, r2, #31
 8009406:	d404      	bmi.n	8009412 <_fflush_r+0x3a>
 8009408:	0599      	lsls	r1, r3, #22
 800940a:	d402      	bmi.n	8009412 <_fflush_r+0x3a>
 800940c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800940e:	f000 f915 	bl	800963c <__retarget_lock_acquire_recursive>
 8009412:	4628      	mov	r0, r5
 8009414:	4621      	mov	r1, r4
 8009416:	f7ff ff5d 	bl	80092d4 <__sflush_r>
 800941a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800941c:	4605      	mov	r5, r0
 800941e:	07da      	lsls	r2, r3, #31
 8009420:	d4e0      	bmi.n	80093e4 <_fflush_r+0xc>
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	059b      	lsls	r3, r3, #22
 8009426:	d4dd      	bmi.n	80093e4 <_fflush_r+0xc>
 8009428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800942a:	f000 f908 	bl	800963e <__retarget_lock_release_recursive>
 800942e:	e7d9      	b.n	80093e4 <_fflush_r+0xc>
 8009430:	4b05      	ldr	r3, [pc, #20]	; (8009448 <_fflush_r+0x70>)
 8009432:	429c      	cmp	r4, r3
 8009434:	d101      	bne.n	800943a <_fflush_r+0x62>
 8009436:	68ac      	ldr	r4, [r5, #8]
 8009438:	e7df      	b.n	80093fa <_fflush_r+0x22>
 800943a:	4b04      	ldr	r3, [pc, #16]	; (800944c <_fflush_r+0x74>)
 800943c:	429c      	cmp	r4, r3
 800943e:	bf08      	it	eq
 8009440:	68ec      	ldreq	r4, [r5, #12]
 8009442:	e7da      	b.n	80093fa <_fflush_r+0x22>
 8009444:	08009dec 	.word	0x08009dec
 8009448:	08009e0c 	.word	0x08009e0c
 800944c:	08009dcc 	.word	0x08009dcc

08009450 <std>:
 8009450:	2300      	movs	r3, #0
 8009452:	b510      	push	{r4, lr}
 8009454:	4604      	mov	r4, r0
 8009456:	e9c0 3300 	strd	r3, r3, [r0]
 800945a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800945e:	6083      	str	r3, [r0, #8]
 8009460:	8181      	strh	r1, [r0, #12]
 8009462:	6643      	str	r3, [r0, #100]	; 0x64
 8009464:	81c2      	strh	r2, [r0, #14]
 8009466:	6183      	str	r3, [r0, #24]
 8009468:	4619      	mov	r1, r3
 800946a:	2208      	movs	r2, #8
 800946c:	305c      	adds	r0, #92	; 0x5c
 800946e:	f7fb fe0f 	bl	8005090 <memset>
 8009472:	4b05      	ldr	r3, [pc, #20]	; (8009488 <std+0x38>)
 8009474:	6224      	str	r4, [r4, #32]
 8009476:	6263      	str	r3, [r4, #36]	; 0x24
 8009478:	4b04      	ldr	r3, [pc, #16]	; (800948c <std+0x3c>)
 800947a:	62a3      	str	r3, [r4, #40]	; 0x28
 800947c:	4b04      	ldr	r3, [pc, #16]	; (8009490 <std+0x40>)
 800947e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009480:	4b04      	ldr	r3, [pc, #16]	; (8009494 <std+0x44>)
 8009482:	6323      	str	r3, [r4, #48]	; 0x30
 8009484:	bd10      	pop	{r4, pc}
 8009486:	bf00      	nop
 8009488:	080097a5 	.word	0x080097a5
 800948c:	080097c7 	.word	0x080097c7
 8009490:	080097ff 	.word	0x080097ff
 8009494:	08009823 	.word	0x08009823

08009498 <_cleanup_r>:
 8009498:	4901      	ldr	r1, [pc, #4]	; (80094a0 <_cleanup_r+0x8>)
 800949a:	f000 b8af 	b.w	80095fc <_fwalk_reent>
 800949e:	bf00      	nop
 80094a0:	080093d9 	.word	0x080093d9

080094a4 <__sfmoreglue>:
 80094a4:	2268      	movs	r2, #104	; 0x68
 80094a6:	b570      	push	{r4, r5, r6, lr}
 80094a8:	1e4d      	subs	r5, r1, #1
 80094aa:	4355      	muls	r5, r2
 80094ac:	460e      	mov	r6, r1
 80094ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094b2:	f7ff fa63 	bl	800897c <_malloc_r>
 80094b6:	4604      	mov	r4, r0
 80094b8:	b140      	cbz	r0, 80094cc <__sfmoreglue+0x28>
 80094ba:	2100      	movs	r1, #0
 80094bc:	e9c0 1600 	strd	r1, r6, [r0]
 80094c0:	300c      	adds	r0, #12
 80094c2:	60a0      	str	r0, [r4, #8]
 80094c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094c8:	f7fb fde2 	bl	8005090 <memset>
 80094cc:	4620      	mov	r0, r4
 80094ce:	bd70      	pop	{r4, r5, r6, pc}

080094d0 <__sfp_lock_acquire>:
 80094d0:	4801      	ldr	r0, [pc, #4]	; (80094d8 <__sfp_lock_acquire+0x8>)
 80094d2:	f000 b8b3 	b.w	800963c <__retarget_lock_acquire_recursive>
 80094d6:	bf00      	nop
 80094d8:	20000725 	.word	0x20000725

080094dc <__sfp_lock_release>:
 80094dc:	4801      	ldr	r0, [pc, #4]	; (80094e4 <__sfp_lock_release+0x8>)
 80094de:	f000 b8ae 	b.w	800963e <__retarget_lock_release_recursive>
 80094e2:	bf00      	nop
 80094e4:	20000725 	.word	0x20000725

080094e8 <__sinit_lock_acquire>:
 80094e8:	4801      	ldr	r0, [pc, #4]	; (80094f0 <__sinit_lock_acquire+0x8>)
 80094ea:	f000 b8a7 	b.w	800963c <__retarget_lock_acquire_recursive>
 80094ee:	bf00      	nop
 80094f0:	20000726 	.word	0x20000726

080094f4 <__sinit_lock_release>:
 80094f4:	4801      	ldr	r0, [pc, #4]	; (80094fc <__sinit_lock_release+0x8>)
 80094f6:	f000 b8a2 	b.w	800963e <__retarget_lock_release_recursive>
 80094fa:	bf00      	nop
 80094fc:	20000726 	.word	0x20000726

08009500 <__sinit>:
 8009500:	b510      	push	{r4, lr}
 8009502:	4604      	mov	r4, r0
 8009504:	f7ff fff0 	bl	80094e8 <__sinit_lock_acquire>
 8009508:	69a3      	ldr	r3, [r4, #24]
 800950a:	b11b      	cbz	r3, 8009514 <__sinit+0x14>
 800950c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009510:	f7ff bff0 	b.w	80094f4 <__sinit_lock_release>
 8009514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009518:	6523      	str	r3, [r4, #80]	; 0x50
 800951a:	4b13      	ldr	r3, [pc, #76]	; (8009568 <__sinit+0x68>)
 800951c:	4a13      	ldr	r2, [pc, #76]	; (800956c <__sinit+0x6c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	62a2      	str	r2, [r4, #40]	; 0x28
 8009522:	42a3      	cmp	r3, r4
 8009524:	bf08      	it	eq
 8009526:	2301      	moveq	r3, #1
 8009528:	4620      	mov	r0, r4
 800952a:	bf08      	it	eq
 800952c:	61a3      	streq	r3, [r4, #24]
 800952e:	f000 f81f 	bl	8009570 <__sfp>
 8009532:	6060      	str	r0, [r4, #4]
 8009534:	4620      	mov	r0, r4
 8009536:	f000 f81b 	bl	8009570 <__sfp>
 800953a:	60a0      	str	r0, [r4, #8]
 800953c:	4620      	mov	r0, r4
 800953e:	f000 f817 	bl	8009570 <__sfp>
 8009542:	2200      	movs	r2, #0
 8009544:	2104      	movs	r1, #4
 8009546:	60e0      	str	r0, [r4, #12]
 8009548:	6860      	ldr	r0, [r4, #4]
 800954a:	f7ff ff81 	bl	8009450 <std>
 800954e:	2201      	movs	r2, #1
 8009550:	2109      	movs	r1, #9
 8009552:	68a0      	ldr	r0, [r4, #8]
 8009554:	f7ff ff7c 	bl	8009450 <std>
 8009558:	2202      	movs	r2, #2
 800955a:	2112      	movs	r1, #18
 800955c:	68e0      	ldr	r0, [r4, #12]
 800955e:	f7ff ff77 	bl	8009450 <std>
 8009562:	2301      	movs	r3, #1
 8009564:	61a3      	str	r3, [r4, #24]
 8009566:	e7d1      	b.n	800950c <__sinit+0xc>
 8009568:	08009984 	.word	0x08009984
 800956c:	08009499 	.word	0x08009499

08009570 <__sfp>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	4607      	mov	r7, r0
 8009574:	f7ff ffac 	bl	80094d0 <__sfp_lock_acquire>
 8009578:	4b1e      	ldr	r3, [pc, #120]	; (80095f4 <__sfp+0x84>)
 800957a:	681e      	ldr	r6, [r3, #0]
 800957c:	69b3      	ldr	r3, [r6, #24]
 800957e:	b913      	cbnz	r3, 8009586 <__sfp+0x16>
 8009580:	4630      	mov	r0, r6
 8009582:	f7ff ffbd 	bl	8009500 <__sinit>
 8009586:	3648      	adds	r6, #72	; 0x48
 8009588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800958c:	3b01      	subs	r3, #1
 800958e:	d503      	bpl.n	8009598 <__sfp+0x28>
 8009590:	6833      	ldr	r3, [r6, #0]
 8009592:	b30b      	cbz	r3, 80095d8 <__sfp+0x68>
 8009594:	6836      	ldr	r6, [r6, #0]
 8009596:	e7f7      	b.n	8009588 <__sfp+0x18>
 8009598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800959c:	b9d5      	cbnz	r5, 80095d4 <__sfp+0x64>
 800959e:	4b16      	ldr	r3, [pc, #88]	; (80095f8 <__sfp+0x88>)
 80095a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095a4:	60e3      	str	r3, [r4, #12]
 80095a6:	6665      	str	r5, [r4, #100]	; 0x64
 80095a8:	f000 f847 	bl	800963a <__retarget_lock_init_recursive>
 80095ac:	f7ff ff96 	bl	80094dc <__sfp_lock_release>
 80095b0:	2208      	movs	r2, #8
 80095b2:	4629      	mov	r1, r5
 80095b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095bc:	6025      	str	r5, [r4, #0]
 80095be:	61a5      	str	r5, [r4, #24]
 80095c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095c4:	f7fb fd64 	bl	8005090 <memset>
 80095c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095d0:	4620      	mov	r0, r4
 80095d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d4:	3468      	adds	r4, #104	; 0x68
 80095d6:	e7d9      	b.n	800958c <__sfp+0x1c>
 80095d8:	2104      	movs	r1, #4
 80095da:	4638      	mov	r0, r7
 80095dc:	f7ff ff62 	bl	80094a4 <__sfmoreglue>
 80095e0:	4604      	mov	r4, r0
 80095e2:	6030      	str	r0, [r6, #0]
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d1d5      	bne.n	8009594 <__sfp+0x24>
 80095e8:	f7ff ff78 	bl	80094dc <__sfp_lock_release>
 80095ec:	230c      	movs	r3, #12
 80095ee:	603b      	str	r3, [r7, #0]
 80095f0:	e7ee      	b.n	80095d0 <__sfp+0x60>
 80095f2:	bf00      	nop
 80095f4:	08009984 	.word	0x08009984
 80095f8:	ffff0001 	.word	0xffff0001

080095fc <_fwalk_reent>:
 80095fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009600:	4606      	mov	r6, r0
 8009602:	4688      	mov	r8, r1
 8009604:	2700      	movs	r7, #0
 8009606:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800960a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800960e:	f1b9 0901 	subs.w	r9, r9, #1
 8009612:	d505      	bpl.n	8009620 <_fwalk_reent+0x24>
 8009614:	6824      	ldr	r4, [r4, #0]
 8009616:	2c00      	cmp	r4, #0
 8009618:	d1f7      	bne.n	800960a <_fwalk_reent+0xe>
 800961a:	4638      	mov	r0, r7
 800961c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009620:	89ab      	ldrh	r3, [r5, #12]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d907      	bls.n	8009636 <_fwalk_reent+0x3a>
 8009626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800962a:	3301      	adds	r3, #1
 800962c:	d003      	beq.n	8009636 <_fwalk_reent+0x3a>
 800962e:	4629      	mov	r1, r5
 8009630:	4630      	mov	r0, r6
 8009632:	47c0      	blx	r8
 8009634:	4307      	orrs	r7, r0
 8009636:	3568      	adds	r5, #104	; 0x68
 8009638:	e7e9      	b.n	800960e <_fwalk_reent+0x12>

0800963a <__retarget_lock_init_recursive>:
 800963a:	4770      	bx	lr

0800963c <__retarget_lock_acquire_recursive>:
 800963c:	4770      	bx	lr

0800963e <__retarget_lock_release_recursive>:
 800963e:	4770      	bx	lr

08009640 <__swhatbuf_r>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	460e      	mov	r6, r1
 8009644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009648:	4614      	mov	r4, r2
 800964a:	2900      	cmp	r1, #0
 800964c:	461d      	mov	r5, r3
 800964e:	b096      	sub	sp, #88	; 0x58
 8009650:	da08      	bge.n	8009664 <__swhatbuf_r+0x24>
 8009652:	2200      	movs	r2, #0
 8009654:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009658:	602a      	str	r2, [r5, #0]
 800965a:	061a      	lsls	r2, r3, #24
 800965c:	d410      	bmi.n	8009680 <__swhatbuf_r+0x40>
 800965e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009662:	e00e      	b.n	8009682 <__swhatbuf_r+0x42>
 8009664:	466a      	mov	r2, sp
 8009666:	f000 f903 	bl	8009870 <_fstat_r>
 800966a:	2800      	cmp	r0, #0
 800966c:	dbf1      	blt.n	8009652 <__swhatbuf_r+0x12>
 800966e:	9a01      	ldr	r2, [sp, #4]
 8009670:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009674:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009678:	425a      	negs	r2, r3
 800967a:	415a      	adcs	r2, r3
 800967c:	602a      	str	r2, [r5, #0]
 800967e:	e7ee      	b.n	800965e <__swhatbuf_r+0x1e>
 8009680:	2340      	movs	r3, #64	; 0x40
 8009682:	2000      	movs	r0, #0
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	b016      	add	sp, #88	; 0x58
 8009688:	bd70      	pop	{r4, r5, r6, pc}
	...

0800968c <__smakebuf_r>:
 800968c:	898b      	ldrh	r3, [r1, #12]
 800968e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009690:	079d      	lsls	r5, r3, #30
 8009692:	4606      	mov	r6, r0
 8009694:	460c      	mov	r4, r1
 8009696:	d507      	bpl.n	80096a8 <__smakebuf_r+0x1c>
 8009698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	6123      	str	r3, [r4, #16]
 80096a0:	2301      	movs	r3, #1
 80096a2:	6163      	str	r3, [r4, #20]
 80096a4:	b002      	add	sp, #8
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	466a      	mov	r2, sp
 80096aa:	ab01      	add	r3, sp, #4
 80096ac:	f7ff ffc8 	bl	8009640 <__swhatbuf_r>
 80096b0:	9900      	ldr	r1, [sp, #0]
 80096b2:	4605      	mov	r5, r0
 80096b4:	4630      	mov	r0, r6
 80096b6:	f7ff f961 	bl	800897c <_malloc_r>
 80096ba:	b948      	cbnz	r0, 80096d0 <__smakebuf_r+0x44>
 80096bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c0:	059a      	lsls	r2, r3, #22
 80096c2:	d4ef      	bmi.n	80096a4 <__smakebuf_r+0x18>
 80096c4:	f023 0303 	bic.w	r3, r3, #3
 80096c8:	f043 0302 	orr.w	r3, r3, #2
 80096cc:	81a3      	strh	r3, [r4, #12]
 80096ce:	e7e3      	b.n	8009698 <__smakebuf_r+0xc>
 80096d0:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <__smakebuf_r+0x7c>)
 80096d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	6020      	str	r0, [r4, #0]
 80096d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096dc:	81a3      	strh	r3, [r4, #12]
 80096de:	9b00      	ldr	r3, [sp, #0]
 80096e0:	6120      	str	r0, [r4, #16]
 80096e2:	6163      	str	r3, [r4, #20]
 80096e4:	9b01      	ldr	r3, [sp, #4]
 80096e6:	b15b      	cbz	r3, 8009700 <__smakebuf_r+0x74>
 80096e8:	4630      	mov	r0, r6
 80096ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096ee:	f000 f8d1 	bl	8009894 <_isatty_r>
 80096f2:	b128      	cbz	r0, 8009700 <__smakebuf_r+0x74>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	f023 0303 	bic.w	r3, r3, #3
 80096fa:	f043 0301 	orr.w	r3, r3, #1
 80096fe:	81a3      	strh	r3, [r4, #12]
 8009700:	89a0      	ldrh	r0, [r4, #12]
 8009702:	4305      	orrs	r5, r0
 8009704:	81a5      	strh	r5, [r4, #12]
 8009706:	e7cd      	b.n	80096a4 <__smakebuf_r+0x18>
 8009708:	08009499 	.word	0x08009499

0800970c <_malloc_usable_size_r>:
 800970c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009710:	1f18      	subs	r0, r3, #4
 8009712:	2b00      	cmp	r3, #0
 8009714:	bfbc      	itt	lt
 8009716:	580b      	ldrlt	r3, [r1, r0]
 8009718:	18c0      	addlt	r0, r0, r3
 800971a:	4770      	bx	lr

0800971c <_raise_r>:
 800971c:	291f      	cmp	r1, #31
 800971e:	b538      	push	{r3, r4, r5, lr}
 8009720:	4604      	mov	r4, r0
 8009722:	460d      	mov	r5, r1
 8009724:	d904      	bls.n	8009730 <_raise_r+0x14>
 8009726:	2316      	movs	r3, #22
 8009728:	6003      	str	r3, [r0, #0]
 800972a:	f04f 30ff 	mov.w	r0, #4294967295
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009732:	b112      	cbz	r2, 800973a <_raise_r+0x1e>
 8009734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009738:	b94b      	cbnz	r3, 800974e <_raise_r+0x32>
 800973a:	4620      	mov	r0, r4
 800973c:	f000 f830 	bl	80097a0 <_getpid_r>
 8009740:	462a      	mov	r2, r5
 8009742:	4601      	mov	r1, r0
 8009744:	4620      	mov	r0, r4
 8009746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800974a:	f000 b817 	b.w	800977c <_kill_r>
 800974e:	2b01      	cmp	r3, #1
 8009750:	d00a      	beq.n	8009768 <_raise_r+0x4c>
 8009752:	1c59      	adds	r1, r3, #1
 8009754:	d103      	bne.n	800975e <_raise_r+0x42>
 8009756:	2316      	movs	r3, #22
 8009758:	6003      	str	r3, [r0, #0]
 800975a:	2001      	movs	r0, #1
 800975c:	e7e7      	b.n	800972e <_raise_r+0x12>
 800975e:	2400      	movs	r4, #0
 8009760:	4628      	mov	r0, r5
 8009762:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009766:	4798      	blx	r3
 8009768:	2000      	movs	r0, #0
 800976a:	e7e0      	b.n	800972e <_raise_r+0x12>

0800976c <raise>:
 800976c:	4b02      	ldr	r3, [pc, #8]	; (8009778 <raise+0xc>)
 800976e:	4601      	mov	r1, r0
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	f7ff bfd3 	b.w	800971c <_raise_r>
 8009776:	bf00      	nop
 8009778:	2000000c 	.word	0x2000000c

0800977c <_kill_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	2300      	movs	r3, #0
 8009780:	4d06      	ldr	r5, [pc, #24]	; (800979c <_kill_r+0x20>)
 8009782:	4604      	mov	r4, r0
 8009784:	4608      	mov	r0, r1
 8009786:	4611      	mov	r1, r2
 8009788:	602b      	str	r3, [r5, #0]
 800978a:	f7f8 f9c8 	bl	8001b1e <_kill>
 800978e:	1c43      	adds	r3, r0, #1
 8009790:	d102      	bne.n	8009798 <_kill_r+0x1c>
 8009792:	682b      	ldr	r3, [r5, #0]
 8009794:	b103      	cbz	r3, 8009798 <_kill_r+0x1c>
 8009796:	6023      	str	r3, [r4, #0]
 8009798:	bd38      	pop	{r3, r4, r5, pc}
 800979a:	bf00      	nop
 800979c:	20000720 	.word	0x20000720

080097a0 <_getpid_r>:
 80097a0:	f7f8 b9b6 	b.w	8001b10 <_getpid>

080097a4 <__sread>:
 80097a4:	b510      	push	{r4, lr}
 80097a6:	460c      	mov	r4, r1
 80097a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ac:	f000 f894 	bl	80098d8 <_read_r>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	bfab      	itete	ge
 80097b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097b6:	89a3      	ldrhlt	r3, [r4, #12]
 80097b8:	181b      	addge	r3, r3, r0
 80097ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097be:	bfac      	ite	ge
 80097c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80097c2:	81a3      	strhlt	r3, [r4, #12]
 80097c4:	bd10      	pop	{r4, pc}

080097c6 <__swrite>:
 80097c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ca:	461f      	mov	r7, r3
 80097cc:	898b      	ldrh	r3, [r1, #12]
 80097ce:	4605      	mov	r5, r0
 80097d0:	05db      	lsls	r3, r3, #23
 80097d2:	460c      	mov	r4, r1
 80097d4:	4616      	mov	r6, r2
 80097d6:	d505      	bpl.n	80097e4 <__swrite+0x1e>
 80097d8:	2302      	movs	r3, #2
 80097da:	2200      	movs	r2, #0
 80097dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e0:	f000 f868 	bl	80098b4 <_lseek_r>
 80097e4:	89a3      	ldrh	r3, [r4, #12]
 80097e6:	4632      	mov	r2, r6
 80097e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097ec:	81a3      	strh	r3, [r4, #12]
 80097ee:	4628      	mov	r0, r5
 80097f0:	463b      	mov	r3, r7
 80097f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097fa:	f000 b817 	b.w	800982c <_write_r>

080097fe <__sseek>:
 80097fe:	b510      	push	{r4, lr}
 8009800:	460c      	mov	r4, r1
 8009802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009806:	f000 f855 	bl	80098b4 <_lseek_r>
 800980a:	1c43      	adds	r3, r0, #1
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	bf15      	itete	ne
 8009810:	6560      	strne	r0, [r4, #84]	; 0x54
 8009812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800981a:	81a3      	strheq	r3, [r4, #12]
 800981c:	bf18      	it	ne
 800981e:	81a3      	strhne	r3, [r4, #12]
 8009820:	bd10      	pop	{r4, pc}

08009822 <__sclose>:
 8009822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009826:	f000 b813 	b.w	8009850 <_close_r>
	...

0800982c <_write_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4604      	mov	r4, r0
 8009830:	4608      	mov	r0, r1
 8009832:	4611      	mov	r1, r2
 8009834:	2200      	movs	r2, #0
 8009836:	4d05      	ldr	r5, [pc, #20]	; (800984c <_write_r+0x20>)
 8009838:	602a      	str	r2, [r5, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	f7f8 f9a6 	bl	8001b8c <_write>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d102      	bne.n	800984a <_write_r+0x1e>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	b103      	cbz	r3, 800984a <_write_r+0x1e>
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	20000720 	.word	0x20000720

08009850 <_close_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	2300      	movs	r3, #0
 8009854:	4d05      	ldr	r5, [pc, #20]	; (800986c <_close_r+0x1c>)
 8009856:	4604      	mov	r4, r0
 8009858:	4608      	mov	r0, r1
 800985a:	602b      	str	r3, [r5, #0]
 800985c:	f7f8 f9ac 	bl	8001bb8 <_close>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_close_r+0x1a>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	b103      	cbz	r3, 800986a <_close_r+0x1a>
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	20000720 	.word	0x20000720

08009870 <_fstat_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	2300      	movs	r3, #0
 8009874:	4d06      	ldr	r5, [pc, #24]	; (8009890 <_fstat_r+0x20>)
 8009876:	4604      	mov	r4, r0
 8009878:	4608      	mov	r0, r1
 800987a:	4611      	mov	r1, r2
 800987c:	602b      	str	r3, [r5, #0]
 800987e:	f7f8 f9a6 	bl	8001bce <_fstat>
 8009882:	1c43      	adds	r3, r0, #1
 8009884:	d102      	bne.n	800988c <_fstat_r+0x1c>
 8009886:	682b      	ldr	r3, [r5, #0]
 8009888:	b103      	cbz	r3, 800988c <_fstat_r+0x1c>
 800988a:	6023      	str	r3, [r4, #0]
 800988c:	bd38      	pop	{r3, r4, r5, pc}
 800988e:	bf00      	nop
 8009890:	20000720 	.word	0x20000720

08009894 <_isatty_r>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	2300      	movs	r3, #0
 8009898:	4d05      	ldr	r5, [pc, #20]	; (80098b0 <_isatty_r+0x1c>)
 800989a:	4604      	mov	r4, r0
 800989c:	4608      	mov	r0, r1
 800989e:	602b      	str	r3, [r5, #0]
 80098a0:	f7f8 f9a4 	bl	8001bec <_isatty>
 80098a4:	1c43      	adds	r3, r0, #1
 80098a6:	d102      	bne.n	80098ae <_isatty_r+0x1a>
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	b103      	cbz	r3, 80098ae <_isatty_r+0x1a>
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	bd38      	pop	{r3, r4, r5, pc}
 80098b0:	20000720 	.word	0x20000720

080098b4 <_lseek_r>:
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	4604      	mov	r4, r0
 80098b8:	4608      	mov	r0, r1
 80098ba:	4611      	mov	r1, r2
 80098bc:	2200      	movs	r2, #0
 80098be:	4d05      	ldr	r5, [pc, #20]	; (80098d4 <_lseek_r+0x20>)
 80098c0:	602a      	str	r2, [r5, #0]
 80098c2:	461a      	mov	r2, r3
 80098c4:	f7f8 f99c 	bl	8001c00 <_lseek>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d102      	bne.n	80098d2 <_lseek_r+0x1e>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b103      	cbz	r3, 80098d2 <_lseek_r+0x1e>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	20000720 	.word	0x20000720

080098d8 <_read_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4604      	mov	r4, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	4611      	mov	r1, r2
 80098e0:	2200      	movs	r2, #0
 80098e2:	4d05      	ldr	r5, [pc, #20]	; (80098f8 <_read_r+0x20>)
 80098e4:	602a      	str	r2, [r5, #0]
 80098e6:	461a      	mov	r2, r3
 80098e8:	f7f8 f933 	bl	8001b52 <_read>
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d102      	bne.n	80098f6 <_read_r+0x1e>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	b103      	cbz	r3, 80098f6 <_read_r+0x1e>
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	20000720 	.word	0x20000720

080098fc <_init>:
 80098fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fe:	bf00      	nop
 8009900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009902:	bc08      	pop	{r3}
 8009904:	469e      	mov	lr, r3
 8009906:	4770      	bx	lr

08009908 <_fini>:
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990a:	bf00      	nop
 800990c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800990e:	bc08      	pop	{r3}
 8009910:	469e      	mov	lr, r3
 8009912:	4770      	bx	lr
