
SPI_INTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e14  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f74  08002f74  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f7c  08002f7c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f7c  08002f7c  00012f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f80  08002f80  00012f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000018  08002f9c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002f9c  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e21  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001758  00000000  00000000  00027e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  000295c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  00029e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001459c  00000000  00000000  0002a638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d17  00000000  00000000  0003ebd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f530  00000000  00000000  000478eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6e1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002270  00000000  00000000  000c6e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000018 	.word	0x20000018
 8000158:	00000000 	.word	0x00000000
 800015c:	08002f38 	.word	0x08002f38

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000001c 	.word	0x2000001c
 8000178:	08002f38 	.word	0x08002f38

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fa47 	bl	800091a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f814 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f8c0 	bl	8000614 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000494:	f000 f85e 	bl	8000554 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000498:	f000 f892 	bl	80005c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   HAL_SPI_TransmitReceive_IT(&hspi2, buff_tx,buff_rx,10);
 800049c:	230a      	movs	r3, #10
 800049e:	4a03      	ldr	r2, [pc, #12]	; (80004ac <main+0x28>)
 80004a0:	4903      	ldr	r1, [pc, #12]	; (80004b0 <main+0x2c>)
 80004a2:	4804      	ldr	r0, [pc, #16]	; (80004b4 <main+0x30>)
 80004a4:	f001 fc34 	bl	8001d10 <HAL_SPI_TransmitReceive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <main+0x24>
 80004aa:	bf00      	nop
 80004ac:	200000d0 	.word	0x200000d0
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000034 	.word	0x20000034

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b092      	sub	sp, #72	; 0x48
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2234      	movs	r2, #52	; 0x34
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fd2e 	bl	8002f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	463b      	mov	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <SystemClock_Config+0x98>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004e2:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <SystemClock_Config+0x98>)
 80004e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004e8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ea:	2302      	movs	r3, #2
 80004ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ee:	2301      	movs	r3, #1
 80004f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f2:	2310      	movs	r3, #16
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f6:	2302      	movs	r3, #2
 80004f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004fa:	2300      	movs	r3, #0
 80004fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000502:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000504:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000508:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fd7e 	bl	8001010 <HAL_RCC_OscConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800051a:	f000 f8c9 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051e:	230f      	movs	r3, #15
 8000520:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000522:	2303      	movs	r3, #3
 8000524:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000532:	463b      	mov	r3, r7
 8000534:	2101      	movs	r1, #1
 8000536:	4618      	mov	r0, r3
 8000538:	f001 f89a 	bl	8001670 <HAL_RCC_ClockConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000542:	f000 f8b5 	bl	80006b0 <Error_Handler>
  }
}
 8000546:	bf00      	nop
 8000548:	3748      	adds	r7, #72	; 0x48
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40007000 	.word	0x40007000

08000554 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <MX_SPI2_Init+0x64>)
 800055a:	4a18      	ldr	r2, [pc, #96]	; (80005bc <MX_SPI2_Init+0x68>)
 800055c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_SPI2_Init+0x64>)
 8000560:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000564:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_SPI2_Init+0x64>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_SPI2_Init+0x64>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_SPI2_Init+0x64>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_SPI2_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_SPI2_Init+0x64>)
 8000580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000584:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_SPI2_Init+0x64>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <MX_SPI2_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_SPI2_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <MX_SPI2_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_SPI2_Init+0x64>)
 80005a0:	220a      	movs	r2, #10
 80005a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <MX_SPI2_Init+0x64>)
 80005a6:	f001 fb29 	bl	8001bfc <HAL_SPI_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80005b0:	f000 f87e 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000034 	.word	0x20000034
 80005bc:	40003800 	.word	0x40003800

080005c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <MX_USART2_UART_Init+0x50>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_USART2_UART_Init+0x4c>)
 80005f8:	f001 ff44 	bl	8002484 <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000602:	f000 f855 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000008c 	.word	0x2000008c
 8000610:	40004400 	.word	0x40004400

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_GPIO_Init+0x70>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a19      	ldr	r2, [pc, #100]	; (8000684 <MX_GPIO_Init+0x70>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_GPIO_Init+0x70>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_GPIO_Init+0x70>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_GPIO_Init+0x70>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	61d3      	str	r3, [r2, #28]
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_GPIO_Init+0x70>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_GPIO_Init+0x70>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <MX_GPIO_Init+0x70>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_GPIO_Init+0x70>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_GPIO_Init+0x70>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a07      	ldr	r2, [pc, #28]	; (8000684 <MX_GPIO_Init+0x70>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <MX_GPIO_Init+0x70>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	40023800 	.word	0x40023800

08000688 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, buff_rx,sizeof(buff_rx),1000);
 8000690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000694:	220a      	movs	r2, #10
 8000696:	4904      	ldr	r1, [pc, #16]	; (80006a8 <HAL_SPI_TxRxCpltCallback+0x20>)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <HAL_SPI_TxRxCpltCallback+0x24>)
 800069a:	f001 ff40 	bl	800251e <HAL_UART_Transmit>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000d0 	.word	0x200000d0
 80006ac:	2000008c 	.word	0x2000008c

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_MspInit+0x5c>)
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <HAL_MspInit+0x5c>)
 80006c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006cc:	6253      	str	r3, [r2, #36]	; 0x24
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_MspInit+0x5c>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x5c>)
 80006dc:	6a1b      	ldr	r3, [r3, #32]
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_MspInit+0x5c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6213      	str	r3, [r2, #32]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x5c>)
 80006e8:	6a1b      	ldr	r3, [r3, #32]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x5c>)
 80006f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x5c>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6253      	str	r3, [r2, #36]	; 0x24
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x5c>)
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800070a:	2007      	movs	r0, #7
 800070c:	f000 fa40 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800

0800071c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <HAL_SPI_MspInit+0x8c>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d130      	bne.n	80007a0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <HAL_SPI_MspInit+0x90>)
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <HAL_SPI_MspInit+0x90>)
 8000744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000748:	6253      	str	r3, [r2, #36]	; 0x24
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_SPI_MspInit+0x90>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_SPI_MspInit+0x90>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <HAL_SPI_MspInit+0x90>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_SPI_MspInit+0x90>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800076e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000780:	2305      	movs	r3, #5
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4809      	ldr	r0, [pc, #36]	; (80007b0 <HAL_SPI_MspInit+0x94>)
 800078c:	f000 fac0 	bl	8000d10 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2024      	movs	r0, #36	; 0x24
 8000796:	f000 fa06 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800079a:	2024      	movs	r0, #36	; 0x24
 800079c:	f000 fa1f 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40003800 	.word	0x40003800
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020400 	.word	0x40020400

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <HAL_UART_MspInit+0x8c>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d12f      	bne.n	8000836 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <HAL_UART_MspInit+0x90>)
 80007d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007da:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <HAL_UART_MspInit+0x90>)
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	6253      	str	r3, [r2, #36]	; 0x24
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_UART_MspInit+0x90>)
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_UART_MspInit+0x90>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <HAL_UART_MspInit+0x90>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_UART_MspInit+0x90>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000806:	230c      	movs	r3, #12
 8000808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000816:	2307      	movs	r3, #7
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <HAL_UART_MspInit+0x94>)
 8000822:	f000 fa75 	bl	8000d10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2026      	movs	r0, #38	; 0x26
 800082c:	f000 f9bb 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000830:	2026      	movs	r0, #38	; 0x26
 8000832:	f000 f9d4 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40004400 	.word	0x40004400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 f895 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <SPI2_IRQHandler+0x10>)
 80008a2:	f001 fac9 	bl	8001e38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000034 	.word	0x20000034

080008b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <USART2_IRQHandler+0x10>)
 80008b6:	f001 fec5 	bl	8002644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000008c 	.word	0x2000008c

080008c4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	; (8000908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	; (8000914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008f6:	f7ff ffe5 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fa:	f002 faf1 	bl	8002ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fe:	f7ff fdc1 	bl	8000484 <main>
  bx lr
 8000902:	4770      	bx	lr
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800090c:	08002f84 	.word	0x08002f84
  ldr r2, =_sbss
 8000910:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000914:	200000e0 	.word	0x200000e0

08000918 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_IRQHandler>

0800091a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 f933 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f80e 	bl	800094c <HAL_InitTick>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	71fb      	strb	r3, [r7, #7]
 800093a:	e001      	b.n	8000940 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800093c:	f7ff febe 	bl	80006bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000940:	79fb      	ldrb	r3, [r7, #7]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_InitTick+0x68>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d022      	beq.n	80009a6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_InitTick+0x6c>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <HAL_InitTick+0x68>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800096c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000970:	fbb2 f3f3 	udiv	r3, r2, r3
 8000974:	4618      	mov	r0, r3
 8000976:	f000 f940 	bl	8000bfa <HAL_SYSTICK_Config>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d10f      	bne.n	80009a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b0f      	cmp	r3, #15
 8000984:	d809      	bhi.n	800099a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000986:	2200      	movs	r2, #0
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	f04f 30ff 	mov.w	r0, #4294967295
 800098e:	f000 f90a 	bl	8000ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_InitTick+0x70>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	e007      	b.n	80009aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	e004      	b.n	80009aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e001      	b.n	80009aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000014 	.word	0x20000014
 80009b8:	2000000c 	.word	0x2000000c
 80009bc:	20000010 	.word	0x20000010

080009c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x1c>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x20>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a03      	ldr	r2, [pc, #12]	; (80009dc <HAL_IncTick+0x1c>)
 80009d0:	6013      	str	r3, [r2, #0]
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	200000dc 	.word	0x200000dc
 80009e0:	20000014 	.word	0x20000014

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <HAL_GetTick+0x10>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	200000dc 	.word	0x200000dc

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	db0b      	blt.n	8000a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 021f 	and.w	r2, r3, #31
 8000a74:	4906      	ldr	r1, [pc, #24]	; (8000a90 <__NVIC_EnableIRQ+0x34>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	095b      	lsrs	r3, r3, #5
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff ff90 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff2d 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff42 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff90 	bl	8000ae8 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5f 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff35 	bl	8000a5c <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffa2 	bl	8000b4c <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b085      	sub	sp, #20
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d008      	beq.n	8000c3c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e022      	b.n	8000c82 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 020e 	bic.w	r2, r2, #14
 8000c4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0201 	bic.w	r2, r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	f003 021c 	and.w	r2, r3, #28
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c68:	2101      	movs	r1, #1
 8000c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d005      	beq.n	8000cb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e029      	b.n	8000d04 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 020e 	bic.w	r2, r2, #14
 8000cbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f022 0201 	bic.w	r2, r2, #1
 8000cce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f003 021c 	and.w	r2, r3, #28
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	4798      	blx	r3
    }
  }
  return status;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d26:	e154      	b.n	8000fd2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8146 	beq.w	8000fcc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d005      	beq.n	8000d58 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 0201 	and.w	r2, r3, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d017      	beq.n	8000df6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d123      	bne.n	8000e4a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3208      	adds	r2, #8
 8000e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	691a      	ldr	r2, [r3, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	6939      	ldr	r1, [r7, #16]
 8000e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0203 	and.w	r2, r3, #3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80a0 	beq.w	8000fcc <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8c:	4b58      	ldr	r3, [pc, #352]	; (8000ff0 <HAL_GPIO_Init+0x2e0>)
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4a57      	ldr	r2, [pc, #348]	; (8000ff0 <HAL_GPIO_Init+0x2e0>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6213      	str	r3, [r2, #32]
 8000e98:	4b55      	ldr	r3, [pc, #340]	; (8000ff0 <HAL_GPIO_Init+0x2e0>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ea4:	4a53      	ldr	r2, [pc, #332]	; (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a4b      	ldr	r2, [pc, #300]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d019      	beq.n	8000f04 <HAL_GPIO_Init+0x1f4>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a4a      	ldr	r2, [pc, #296]	; (8000ffc <HAL_GPIO_Init+0x2ec>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d013      	beq.n	8000f00 <HAL_GPIO_Init+0x1f0>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a49      	ldr	r2, [pc, #292]	; (8001000 <HAL_GPIO_Init+0x2f0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00d      	beq.n	8000efc <HAL_GPIO_Init+0x1ec>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a48      	ldr	r2, [pc, #288]	; (8001004 <HAL_GPIO_Init+0x2f4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d007      	beq.n	8000ef8 <HAL_GPIO_Init+0x1e8>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a47      	ldr	r2, [pc, #284]	; (8001008 <HAL_GPIO_Init+0x2f8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d101      	bne.n	8000ef4 <HAL_GPIO_Init+0x1e4>
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	e008      	b.n	8000f06 <HAL_GPIO_Init+0x1f6>
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x1f6>
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e004      	b.n	8000f06 <HAL_GPIO_Init+0x1f6>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e002      	b.n	8000f06 <HAL_GPIO_Init+0x1f6>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_GPIO_Init+0x1f6>
 8000f04:	2300      	movs	r3, #0
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f16:	4937      	ldr	r1, [pc, #220]	; (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f24:	4b39      	ldr	r3, [pc, #228]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f48:	4a30      	ldr	r2, [pc, #192]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f4e:	4b2f      	ldr	r3, [pc, #188]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f72:	4a26      	ldr	r2, [pc, #152]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f9c:	4a1b      	ldr	r2, [pc, #108]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fc6:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f47f aea3 	bne.w	8000d28 <HAL_GPIO_Init+0x18>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	40020400 	.word	0x40020400
 8001000:	40020800 	.word	0x40020800
 8001004:	40020c00 	.word	0x40020c00
 8001008:	40021000 	.word	0x40021000
 800100c:	40010400 	.word	0x40010400

08001010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e31d      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001022:	4b94      	ldr	r3, [pc, #592]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800102c:	4b91      	ldr	r3, [pc, #580]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001034:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	2b00      	cmp	r3, #0
 8001040:	d07b      	beq.n	800113a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2b08      	cmp	r3, #8
 8001046:	d006      	beq.n	8001056 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	2b0c      	cmp	r3, #12
 800104c:	d10f      	bne.n	800106e <HAL_RCC_OscConfig+0x5e>
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001054:	d10b      	bne.n	800106e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001056:	4b87      	ldr	r3, [pc, #540]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d06a      	beq.n	8001138 <HAL_RCC_OscConfig+0x128>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d166      	bne.n	8001138 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e2f7      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d106      	bne.n	8001084 <HAL_RCC_OscConfig+0x74>
 8001076:	4b7f      	ldr	r3, [pc, #508]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a7e      	ldr	r2, [pc, #504]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e02d      	b.n	80010e0 <HAL_RCC_OscConfig+0xd0>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10c      	bne.n	80010a6 <HAL_RCC_OscConfig+0x96>
 800108c:	4b79      	ldr	r3, [pc, #484]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a78      	ldr	r2, [pc, #480]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 8001092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b76      	ldr	r3, [pc, #472]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a75      	ldr	r2, [pc, #468]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 800109e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	e01c      	b.n	80010e0 <HAL_RCC_OscConfig+0xd0>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0xb8>
 80010ae:	4b71      	ldr	r3, [pc, #452]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a70      	ldr	r2, [pc, #448]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b6e      	ldr	r3, [pc, #440]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a6d      	ldr	r2, [pc, #436]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e00b      	b.n	80010e0 <HAL_RCC_OscConfig+0xd0>
 80010c8:	4b6a      	ldr	r3, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a69      	ldr	r2, [pc, #420]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 80010ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b67      	ldr	r3, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a66      	ldr	r2, [pc, #408]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 80010da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d013      	beq.n	8001110 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fc7c 	bl	80009e4 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fc78 	bl	80009e4 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e2ad      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001102:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0xe0>
 800110e:	e014      	b.n	800113a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fc68 	bl	80009e4 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001118:	f7ff fc64 	bl	80009e4 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b64      	cmp	r3, #100	; 0x64
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e299      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800112a:	4b52      	ldr	r3, [pc, #328]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x108>
 8001136:	e000      	b.n	800113a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d05a      	beq.n	80011fc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b04      	cmp	r3, #4
 800114a:	d005      	beq.n	8001158 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2b0c      	cmp	r3, #12
 8001150:	d119      	bne.n	8001186 <HAL_RCC_OscConfig+0x176>
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d116      	bne.n	8001186 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001158:	4b46      	ldr	r3, [pc, #280]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_RCC_OscConfig+0x160>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d001      	beq.n	8001170 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e276      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4b40      	ldr	r3, [pc, #256]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	493d      	ldr	r1, [pc, #244]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001184:	e03a      	b.n	80011fc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d020      	beq.n	80011d0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800118e:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <HAL_RCC_OscConfig+0x268>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fc26 	bl	80009e4 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fc22 	bl	80009e4 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e257      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011ae:	4b31      	ldr	r3, [pc, #196]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ba:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	492a      	ldr	r1, [pc, #168]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]
 80011ce:	e015      	b.n	80011fc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011d0:	4b29      	ldr	r3, [pc, #164]	; (8001278 <HAL_RCC_OscConfig+0x268>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fc05 	bl	80009e4 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fc01 	bl	80009e4 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e236      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f0      	bne.n	80011de <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80b8 	beq.w	800137a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d170      	bne.n	80012f2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_OscConfig+0x218>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e21a      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1a      	ldr	r2, [r3, #32]
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001234:	429a      	cmp	r2, r3
 8001236:	d921      	bls.n	800127c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fc7d 	bl	8001b3c <RCC_SetFlashLatencyFromMSIRange>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e208      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	4906      	ldr	r1, [pc, #24]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 800125a:	4313      	orrs	r3, r2
 800125c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	061b      	lsls	r3, r3, #24
 800126c:	4901      	ldr	r1, [pc, #4]	; (8001274 <HAL_RCC_OscConfig+0x264>)
 800126e:	4313      	orrs	r3, r2
 8001270:	604b      	str	r3, [r1, #4]
 8001272:	e020      	b.n	80012b6 <HAL_RCC_OscConfig+0x2a6>
 8001274:	40023800 	.word	0x40023800
 8001278:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800127c:	4b99      	ldr	r3, [pc, #612]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4996      	ldr	r1, [pc, #600]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800128e:	4b95      	ldr	r3, [pc, #596]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	061b      	lsls	r3, r3, #24
 800129c:	4991      	ldr	r1, [pc, #580]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fc48 	bl	8001b3c <RCC_SetFlashLatencyFromMSIRange>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e1d3      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	0b5b      	lsrs	r3, r3, #13
 80012bc:	3301      	adds	r3, #1
 80012be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80012c6:	4a87      	ldr	r2, [pc, #540]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80012c8:	6892      	ldr	r2, [r2, #8]
 80012ca:	0912      	lsrs	r2, r2, #4
 80012cc:	f002 020f 	and.w	r2, r2, #15
 80012d0:	4985      	ldr	r1, [pc, #532]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 80012d2:	5c8a      	ldrb	r2, [r1, r2]
 80012d4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012d6:	4a85      	ldr	r2, [pc, #532]	; (80014ec <HAL_RCC_OscConfig+0x4dc>)
 80012d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012da:	4b85      	ldr	r3, [pc, #532]	; (80014f0 <HAL_RCC_OscConfig+0x4e0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fb34 	bl	800094c <HAL_InitTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d045      	beq.n	800137a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	e1b5      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d029      	beq.n	800134e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012fa:	4b7e      	ldr	r3, [pc, #504]	; (80014f4 <HAL_RCC_OscConfig+0x4e4>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fb70 	bl	80009e4 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001308:	f7ff fb6c 	bl	80009e4 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e1a1      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800131a:	4b72      	ldr	r3, [pc, #456]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001326:	4b6f      	ldr	r3, [pc, #444]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	496c      	ldr	r1, [pc, #432]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001338:	4b6a      	ldr	r3, [pc, #424]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	061b      	lsls	r3, r3, #24
 8001346:	4967      	ldr	r1, [pc, #412]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
 800134c:	e015      	b.n	800137a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800134e:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <HAL_RCC_OscConfig+0x4e4>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fb46 	bl	80009e4 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800135c:	f7ff fb42 	bl	80009e4 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e177      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800136e:	4b5d      	ldr	r3, [pc, #372]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d030      	beq.n	80013e8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d016      	beq.n	80013bc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138e:	4b5a      	ldr	r3, [pc, #360]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001394:	f7ff fb26 	bl	80009e4 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff fb22 	bl	80009e4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e157      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013ae:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80013b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x38c>
 80013ba:	e015      	b.n	80013e8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013bc:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fb0f 	bl	80009e4 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ca:	f7ff fb0b 	bl	80009e4 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e140      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013dc:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80013de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80b5 	beq.w	8001560 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fa:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10d      	bne.n	8001422 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	4a36      	ldr	r2, [pc, #216]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6253      	str	r3, [r2, #36]	; 0x24
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b36      	ldr	r3, [pc, #216]	; (80014fc <HAL_RCC_OscConfig+0x4ec>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d118      	bne.n	8001460 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b33      	ldr	r3, [pc, #204]	; (80014fc <HAL_RCC_OscConfig+0x4ec>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a32      	ldr	r2, [pc, #200]	; (80014fc <HAL_RCC_OscConfig+0x4ec>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff fad3 	bl	80009e4 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001442:	f7ff facf 	bl	80009e4 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b64      	cmp	r3, #100	; 0x64
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e104      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <HAL_RCC_OscConfig+0x4ec>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x466>
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 800146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 800146e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001472:	6353      	str	r3, [r2, #52]	; 0x34
 8001474:	e02d      	b.n	80014d2 <HAL_RCC_OscConfig+0x4c2>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x488>
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 8001480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001482:	4a18      	ldr	r2, [pc, #96]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 8001484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001488:	6353      	str	r3, [r2, #52]	; 0x34
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 800148c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148e:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 8001490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001494:	6353      	str	r3, [r2, #52]	; 0x34
 8001496:	e01c      	b.n	80014d2 <HAL_RCC_OscConfig+0x4c2>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b05      	cmp	r3, #5
 800149e:	d10c      	bne.n	80014ba <HAL_RCC_OscConfig+0x4aa>
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80014a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014aa:	6353      	str	r3, [r2, #52]	; 0x34
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80014ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b0:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6353      	str	r3, [r2, #52]	; 0x34
 80014b8:	e00b      	b.n	80014d2 <HAL_RCC_OscConfig+0x4c2>
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80014bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80014c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014c4:	6353      	str	r3, [r2, #52]	; 0x34
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80014c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ca:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80014cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014d0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d024      	beq.n	8001524 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fa83 	bl	80009e4 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014e0:	e019      	b.n	8001516 <HAL_RCC_OscConfig+0x506>
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	08002f5c 	.word	0x08002f5c
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	20000010 	.word	0x20000010
 80014f4:	42470020 	.word	0x42470020
 80014f8:	42470680 	.word	0x42470680
 80014fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001500:	f7ff fa70 	bl	80009e4 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	; 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e0a3      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001516:	4b54      	ldr	r3, [pc, #336]	; (8001668 <HAL_RCC_OscConfig+0x658>)
 8001518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0ee      	beq.n	8001500 <HAL_RCC_OscConfig+0x4f0>
 8001522:	e014      	b.n	800154e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001524:	f7ff fa5e 	bl	80009e4 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800152a:	e00a      	b.n	8001542 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152c:	f7ff fa5a 	bl	80009e4 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	; 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e08d      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001542:	4b49      	ldr	r3, [pc, #292]	; (8001668 <HAL_RCC_OscConfig+0x658>)
 8001544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1ee      	bne.n	800152c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800154e:	7ffb      	ldrb	r3, [r7, #31]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d105      	bne.n	8001560 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001554:	4b44      	ldr	r3, [pc, #272]	; (8001668 <HAL_RCC_OscConfig+0x658>)
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	4a43      	ldr	r2, [pc, #268]	; (8001668 <HAL_RCC_OscConfig+0x658>)
 800155a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800155e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	2b00      	cmp	r3, #0
 8001566:	d079      	beq.n	800165c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b0c      	cmp	r3, #12
 800156c:	d056      	beq.n	800161c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	2b02      	cmp	r3, #2
 8001574:	d13b      	bne.n	80015ee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001576:	4b3d      	ldr	r3, [pc, #244]	; (800166c <HAL_RCC_OscConfig+0x65c>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fa32 	bl	80009e4 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff fa2e 	bl	80009e4 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e063      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001596:	4b34      	ldr	r3, [pc, #208]	; (8001668 <HAL_RCC_OscConfig+0x658>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a2:	4b31      	ldr	r3, [pc, #196]	; (8001668 <HAL_RCC_OscConfig+0x658>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	4319      	orrs	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	430b      	orrs	r3, r1
 80015ba:	492b      	ldr	r1, [pc, #172]	; (8001668 <HAL_RCC_OscConfig+0x658>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_RCC_OscConfig+0x65c>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fa0d 	bl	80009e4 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fa09 	bl	80009e4 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e03e      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015e0:	4b21      	ldr	r3, [pc, #132]	; (8001668 <HAL_RCC_OscConfig+0x658>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x5be>
 80015ec:	e036      	b.n	800165c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_RCC_OscConfig+0x65c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff f9f6 	bl	80009e4 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff f9f2 	bl	80009e4 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e027      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_RCC_OscConfig+0x658>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x5ec>
 800161a:	e01f      	b.n	800165c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e01a      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_RCC_OscConfig+0x658>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	429a      	cmp	r2, r3
 800163a:	d10d      	bne.n	8001658 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d106      	bne.n	8001658 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3720      	adds	r7, #32
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	42470060 	.word	0x42470060

08001670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e11a      	b.n	80018ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001684:	4b8f      	ldr	r3, [pc, #572]	; (80018c4 <HAL_RCC_ClockConfig+0x254>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d919      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x34>
 8001698:	4b8a      	ldr	r3, [pc, #552]	; (80018c4 <HAL_RCC_ClockConfig+0x254>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a89      	ldr	r2, [pc, #548]	; (80018c4 <HAL_RCC_ClockConfig+0x254>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b87      	ldr	r3, [pc, #540]	; (80018c4 <HAL_RCC_ClockConfig+0x254>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 0201 	bic.w	r2, r3, #1
 80016ac:	4985      	ldr	r1, [pc, #532]	; (80018c4 <HAL_RCC_ClockConfig+0x254>)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b4:	4b83      	ldr	r3, [pc, #524]	; (80018c4 <HAL_RCC_ClockConfig+0x254>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0f9      	b.n	80018ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d2:	4b7d      	ldr	r3, [pc, #500]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	497a      	ldr	r1, [pc, #488]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 808e 	beq.w	800180e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016fa:	4b73      	ldr	r3, [pc, #460]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d121      	bne.n	800174a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0d7      	b.n	80018ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d107      	bne.n	8001722 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001712:	4b6d      	ldr	r3, [pc, #436]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d115      	bne.n	800174a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0cb      	b.n	80018ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d107      	bne.n	800173a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800172a:	4b67      	ldr	r3, [pc, #412]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0bf      	b.n	80018ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0b7      	b.n	80018ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800174a:	4b5f      	ldr	r3, [pc, #380]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f023 0203 	bic.w	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	495c      	ldr	r1, [pc, #368]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 8001758:	4313      	orrs	r3, r2
 800175a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800175c:	f7ff f942 	bl	80009e4 <HAL_GetTick>
 8001760:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d112      	bne.n	8001790 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff f93a 	bl	80009e4 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e09b      	b.n	80018ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001782:	4b51      	ldr	r3, [pc, #324]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b08      	cmp	r3, #8
 800178c:	d1ee      	bne.n	800176c <HAL_RCC_ClockConfig+0xfc>
 800178e:	e03e      	b.n	800180e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d112      	bne.n	80017be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179a:	f7ff f923 	bl	80009e4 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e084      	b.n	80018ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b0:	4b45      	ldr	r3, [pc, #276]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b0c      	cmp	r3, #12
 80017ba:	d1ee      	bne.n	800179a <HAL_RCC_ClockConfig+0x12a>
 80017bc:	e027      	b.n	800180e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d11d      	bne.n	8001802 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017c6:	e00a      	b.n	80017de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7ff f90c 	bl	80009e4 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e06d      	b.n	80018ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017de:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d1ee      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x158>
 80017ea:	e010      	b.n	800180e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff f8fa 	bl	80009e4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e05b      	b.n	80018ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001802:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1ee      	bne.n	80017ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_RCC_ClockConfig+0x254>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d219      	bcs.n	8001850 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d105      	bne.n	800182e <HAL_RCC_ClockConfig+0x1be>
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <HAL_RCC_ClockConfig+0x254>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a27      	ldr	r2, [pc, #156]	; (80018c4 <HAL_RCC_ClockConfig+0x254>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_RCC_ClockConfig+0x254>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 0201 	bic.w	r2, r3, #1
 8001836:	4923      	ldr	r1, [pc, #140]	; (80018c4 <HAL_RCC_ClockConfig+0x254>)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_RCC_ClockConfig+0x254>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e034      	b.n	80018ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4917      	ldr	r1, [pc, #92]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	490f      	ldr	r1, [pc, #60]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800188e:	f000 f823 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8001892:	4602      	mov	r2, r0
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_RCC_ClockConfig+0x258>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	490b      	ldr	r1, [pc, #44]	; (80018cc <HAL_RCC_ClockConfig+0x25c>)
 80018a0:	5ccb      	ldrb	r3, [r1, r3]
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_RCC_ClockConfig+0x260>)
 80018a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_RCC_ClockConfig+0x264>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f84c 	bl	800094c <HAL_InitTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80018b8:	7afb      	ldrb	r3, [r7, #11]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00
 80018c8:	40023800 	.word	0x40023800
 80018cc:	08002f5c 	.word	0x08002f5c
 80018d0:	2000000c 	.word	0x2000000c
 80018d4:	20000010 	.word	0x20000010

080018d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018dc:	b092      	sub	sp, #72	; 0x48
 80018de:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80018e0:	4b79      	ldr	r3, [pc, #484]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d00d      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x34>
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	f200 80d5 	bhi.w	8001aa0 <HAL_RCC_GetSysClockFreq+0x1c8>
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d002      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x28>
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x2e>
 80018fe:	e0cf      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001900:	4b72      	ldr	r3, [pc, #456]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001902:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001904:	e0da      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001906:	4b72      	ldr	r3, [pc, #456]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001908:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800190a:	e0d7      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800190c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800190e:	0c9b      	lsrs	r3, r3, #18
 8001910:	f003 020f 	and.w	r2, r3, #15
 8001914:	4b6f      	ldr	r3, [pc, #444]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001916:	5c9b      	ldrb	r3, [r3, r2]
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800191a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191c:	0d9b      	lsrs	r3, r3, #22
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	3301      	adds	r3, #1
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001926:	4b68      	ldr	r3, [pc, #416]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d05d      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001934:	2200      	movs	r2, #0
 8001936:	4618      	mov	r0, r3
 8001938:	4611      	mov	r1, r2
 800193a:	4604      	mov	r4, r0
 800193c:	460d      	mov	r5, r1
 800193e:	4622      	mov	r2, r4
 8001940:	462b      	mov	r3, r5
 8001942:	f04f 0000 	mov.w	r0, #0
 8001946:	f04f 0100 	mov.w	r1, #0
 800194a:	0159      	lsls	r1, r3, #5
 800194c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001950:	0150      	lsls	r0, r2, #5
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4621      	mov	r1, r4
 8001958:	1a51      	subs	r1, r2, r1
 800195a:	6139      	str	r1, [r7, #16]
 800195c:	4629      	mov	r1, r5
 800195e:	eb63 0301 	sbc.w	r3, r3, r1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001970:	4659      	mov	r1, fp
 8001972:	018b      	lsls	r3, r1, #6
 8001974:	4651      	mov	r1, sl
 8001976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800197a:	4651      	mov	r1, sl
 800197c:	018a      	lsls	r2, r1, #6
 800197e:	46d4      	mov	ip, sl
 8001980:	ebb2 080c 	subs.w	r8, r2, ip
 8001984:	4659      	mov	r1, fp
 8001986:	eb63 0901 	sbc.w	r9, r3, r1
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800199a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800199e:	4690      	mov	r8, r2
 80019a0:	4699      	mov	r9, r3
 80019a2:	4623      	mov	r3, r4
 80019a4:	eb18 0303 	adds.w	r3, r8, r3
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	462b      	mov	r3, r5
 80019ac:	eb49 0303 	adc.w	r3, r9, r3
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019be:	4629      	mov	r1, r5
 80019c0:	024b      	lsls	r3, r1, #9
 80019c2:	4620      	mov	r0, r4
 80019c4:	4629      	mov	r1, r5
 80019c6:	4604      	mov	r4, r0
 80019c8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80019cc:	4601      	mov	r1, r0
 80019ce:	024a      	lsls	r2, r1, #9
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d6:	2200      	movs	r2, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019e0:	f7fe fbcc 	bl	800017c <__aeabi_uldivmod>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4613      	mov	r3, r2
 80019ea:	647b      	str	r3, [r7, #68]	; 0x44
 80019ec:	e055      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f0:	2200      	movs	r2, #0
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	627a      	str	r2, [r7, #36]	; 0x24
 80019f6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019fa:	4642      	mov	r2, r8
 80019fc:	464b      	mov	r3, r9
 80019fe:	f04f 0000 	mov.w	r0, #0
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	0159      	lsls	r1, r3, #5
 8001a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a0c:	0150      	lsls	r0, r2, #5
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	46c4      	mov	ip, r8
 8001a14:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001a18:	4640      	mov	r0, r8
 8001a1a:	4649      	mov	r1, r9
 8001a1c:	468c      	mov	ip, r1
 8001a1e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a2e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a32:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a36:	ebb2 040a 	subs.w	r4, r2, sl
 8001a3a:	eb63 050b 	sbc.w	r5, r3, fp
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	00eb      	lsls	r3, r5, #3
 8001a48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a4c:	00e2      	lsls	r2, r4, #3
 8001a4e:	4614      	mov	r4, r2
 8001a50:	461d      	mov	r5, r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	18e3      	adds	r3, r4, r3
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	eb45 0303 	adc.w	r3, r5, r3
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	028b      	lsls	r3, r1, #10
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	4604      	mov	r4, r0
 8001a76:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	028a      	lsls	r2, r1, #10
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a84:	2200      	movs	r2, #0
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	61fa      	str	r2, [r7, #28]
 8001a8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a8e:	f7fe fb75 	bl	800017c <__aeabi_uldivmod>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4613      	mov	r3, r2
 8001a98:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a9e:	e00d      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	0b5b      	lsrs	r3, r3, #13
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001aba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3748      	adds	r7, #72	; 0x48
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	00f42400 	.word	0x00f42400
 8001ad0:	007a1200 	.word	0x007a1200
 8001ad4:	08002f50 	.word	0x08002f50

08001ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	2000000c 	.word	0x2000000c

08001aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001af0:	f7ff fff2 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	4903      	ldr	r1, [pc, #12]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	08002f6c 	.word	0x08002f6c

08001b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	0adb      	lsrs	r3, r3, #11
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4903      	ldr	r1, [pc, #12]	; (8001b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	08002f6c 	.word	0x08002f6c

08001b3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b48:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d12c      	bne.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b54:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e016      	b.n	8001b9a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	4a1f      	ldr	r2, [pc, #124]	; (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b76:	6253      	str	r3, [r2, #36]	; 0x24
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b8c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001ba0:	d105      	bne.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001ba8:	d101      	bne.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001baa:	2301      	movs	r3, #1
 8001bac:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0f      	ldr	r2, [pc, #60]	; (8001bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 0201 	bic.w	r2, r3, #1
 8001bc8:	490b      	ldr	r1, [pc, #44]	; (8001bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e07b      	b.n	8001d06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d108      	bne.n	8001c28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c1e:	d009      	beq.n	8001c34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
 8001c26:	e005      	b.n	8001c34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe fd64 	bl	800071c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	ea42 0103 	orr.w	r1, r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	f003 0104 	and.w	r1, r3, #4
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	f003 0210 	and.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	69da      	ldr	r2, [r3, #28]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_SPI_TransmitReceive_IT+0x20>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e075      	b.n	8001e1c <HAL_SPI_TransmitReceive_IT+0x10c>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d3e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d46:	7dbb      	ldrb	r3, [r7, #22]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d00d      	beq.n	8001d68 <HAL_SPI_TransmitReceive_IT+0x58>
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d52:	d106      	bne.n	8001d62 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <HAL_SPI_TransmitReceive_IT+0x52>
 8001d5c:	7dbb      	ldrb	r3, [r7, #22]
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d002      	beq.n	8001d68 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
 8001d64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d66:	e054      	b.n	8001e12 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_SPI_TransmitReceive_IT+0x6a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <HAL_SPI_TransmitReceive_IT+0x6a>
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d102      	bne.n	8001d80 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d7e:	e048      	b.n	8001e12 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d003      	beq.n	8001d94 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2205      	movs	r2, #5
 8001d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	887a      	ldrh	r2, [r7, #2]
 8001daa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	887a      	ldrh	r2, [r7, #2]
 8001db6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <HAL_SPI_TransmitReceive_IT+0x118>)
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
 8001dd2:	e005      	b.n	8001de0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4a16      	ldr	r2, [pc, #88]	; (8001e30 <HAL_SPI_TransmitReceive_IT+0x120>)
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <HAL_SPI_TransmitReceive_IT+0x124>)
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001dee:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfa:	2b40      	cmp	r3, #64	; 0x40
 8001dfc:	d008      	beq.n	8001e10 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e000      	b.n	8001e12 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8001e10:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	08002149 	.word	0x08002149
 8001e2c:	080021a9 	.word	0x080021a9
 8001e30:	08002085 	.word	0x08002085
 8001e34:	080020e9 	.word	0x080020e9

08001e38 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	099b      	lsrs	r3, r3, #6
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10f      	bne.n	8001e7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	099b      	lsrs	r3, r3, #6
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d004      	beq.n	8001e7c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	4798      	blx	r3
    return;
 8001e7a:	e0d7      	b.n	800202c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	085b      	lsrs	r3, r3, #1
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00a      	beq.n	8001e9e <HAL_SPI_IRQHandler+0x66>
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	09db      	lsrs	r3, r3, #7
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
    return;
 8001e9c:	e0c6      	b.n	800202c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_SPI_IRQHandler+0x8c>
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	099b      	lsrs	r3, r3, #6
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80b4 	beq.w	800202c <HAL_SPI_IRQHandler+0x1f4>
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80ad 	beq.w	800202c <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d023      	beq.n	8001f26 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d011      	beq.n	8001f0e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	f043 0204 	orr.w	r2, r3, #4
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	e00b      	b.n	8001f26 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]
        return;
 8001f24:	e082      	b.n	800202c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d014      	beq.n	8001f5c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00c      	beq.n	8001f82 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f043 0208 	orr.w	r2, r3, #8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d04f      	beq.n	800202a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f98:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d104      	bne.n	8001fb6 <HAL_SPI_IRQHandler+0x17e>
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d034      	beq.n	8002020 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0203 	bic.w	r2, r2, #3
 8001fc4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d011      	beq.n	8001ff2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	4a18      	ldr	r2, [pc, #96]	; (8002034 <HAL_SPI_IRQHandler+0x1fc>)
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fe56 	bl	8000c8c <HAL_DMA_Abort_IT>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d016      	beq.n	8002028 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffe:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <HAL_SPI_IRQHandler+0x1fc>)
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fe40 	bl	8000c8c <HAL_DMA_Abort_IT>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800201e:	e003      	b.n	8002028 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f812 	bl	800204a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002026:	e000      	b.n	800202a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002028:	bf00      	nop
    return;
 800202a:	bf00      	nop
  }
}
 800202c:	3720      	adds	r7, #32
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	0800205d 	.word	0x0800205d

08002038 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f7ff ffe7 	bl	800204a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f103 020c 	add.w	r2, r3, #12
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002098:	7812      	ldrb	r2, [r2, #0]
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10f      	bne.n	80020e0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020ce:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f95e 	bl	800239c <SPI_CloseRxTx_ISR>
    }
  }
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	330c      	adds	r3, #12
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10f      	bne.n	8002140 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800212e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f92e 	bl	800239c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	b292      	uxth	r2, r2
 800215c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	1c9a      	adds	r2, r3, #2
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10f      	bne.n	80021a0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800218e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f8fe 	bl	800239c <SPI_CloseRxTx_ISR>
    }
  }
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	881a      	ldrh	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	1c9a      	adds	r2, r3, #2
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10f      	bne.n	80021fe <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ec:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f8cf 	bl	800239c <SPI_CloseRxTx_ISR>
    }
  }
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002218:	f7fe fbe4 	bl	80009e4 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	4413      	add	r3, r2
 8002226:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002228:	f7fe fbdc 	bl	80009e4 <HAL_GetTick>
 800222c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800222e:	4b39      	ldr	r3, [pc, #228]	; (8002314 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	015b      	lsls	r3, r3, #5
 8002234:	0d1b      	lsrs	r3, r3, #20
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	fb02 f303 	mul.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800223e:	e054      	b.n	80022ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002246:	d050      	beq.n	80022ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002248:	f7fe fbcc 	bl	80009e4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	429a      	cmp	r2, r3
 8002256:	d902      	bls.n	800225e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d13d      	bne.n	80022da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800226c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002276:	d111      	bne.n	800229c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002280:	d004      	beq.n	800228c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228a:	d107      	bne.n	800229c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a4:	d10f      	bne.n	80022c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e017      	b.n	800230a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4013      	ands	r3, r2
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	bf0c      	ite	eq
 80022fa:	2301      	moveq	r3, #1
 80022fc:	2300      	movne	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	429a      	cmp	r2, r3
 8002306:	d19b      	bne.n	8002240 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000000c 	.word	0x2000000c

08002318 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <SPI_EndRxTxTransaction+0x7c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <SPI_EndRxTxTransaction+0x80>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0d5b      	lsrs	r3, r3, #21
 8002330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002342:	d112      	bne.n	800236a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2200      	movs	r2, #0
 800234c:	2180      	movs	r1, #128	; 0x80
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff ff5a 	bl	8002208 <SPI_WaitFlagStateUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	f043 0220 	orr.w	r2, r3, #32
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e00f      	b.n	800238a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3b01      	subs	r3, #1
 8002374:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002380:	2b80      	cmp	r3, #128	; 0x80
 8002382:	d0f2      	beq.n	800236a <SPI_EndRxTxTransaction+0x52>
 8002384:	e000      	b.n	8002388 <SPI_EndRxTxTransaction+0x70>
        break;
 8002386:	bf00      	nop
  }

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000000c 	.word	0x2000000c
 8002398:	165e9f81 	.word	0x165e9f81

0800239c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80023a4:	4b35      	ldr	r3, [pc, #212]	; (800247c <SPI_CloseRxTx_ISR+0xe0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a35      	ldr	r2, [pc, #212]	; (8002480 <SPI_CloseRxTx_ISR+0xe4>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0a5b      	lsrs	r3, r3, #9
 80023b0:	2264      	movs	r2, #100	; 0x64
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80023b8:	f7fe fb14 	bl	80009e4 <HAL_GetTick>
 80023bc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0220 	bic.w	r2, r2, #32
 80023cc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d106      	bne.n	80023e2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d8:	f043 0220 	orr.w	r2, r3, #32
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80023e0:	e009      	b.n	80023f6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0eb      	beq.n	80023ce <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	2164      	movs	r1, #100	; 0x64
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ff8c 	bl	8002318 <SPI_EndRxTxTransaction>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	f043 0220 	orr.w	r2, r3, #32
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10a      	bne.n	8002430 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	2b00      	cmp	r3, #0
 8002436:	d115      	bne.n	8002464 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b04      	cmp	r3, #4
 8002442:	d107      	bne.n	8002454 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff fdf3 	bl	8002038 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002452:	e00e      	b.n	8002472 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7fe f913 	bl	8000688 <HAL_SPI_TxRxCpltCallback>
}
 8002462:	e006      	b.n	8002472 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff fdec 	bl	800204a <HAL_SPI_ErrorCallback>
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2000000c 	.word	0x2000000c
 8002480:	057619f1 	.word	0x057619f1

08002484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e03f      	b.n	8002516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe f982 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2224      	movs	r2, #36	; 0x24
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 fc25 	bl	8002d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b08a      	sub	sp, #40	; 0x28
 8002522:	af02      	add	r7, sp, #8
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b20      	cmp	r3, #32
 800253c:	d17c      	bne.n	8002638 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_UART_Transmit+0x2c>
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e075      	b.n	800263a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_UART_Transmit+0x3e>
 8002558:	2302      	movs	r3, #2
 800255a:	e06e      	b.n	800263a <HAL_UART_Transmit+0x11c>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2221      	movs	r2, #33	; 0x21
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002572:	f7fe fa37 	bl	80009e4 <HAL_GetTick>
 8002576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	88fa      	ldrh	r2, [r7, #6]
 800257c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	88fa      	ldrh	r2, [r7, #6]
 8002582:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258c:	d108      	bne.n	80025a0 <HAL_UART_Transmit+0x82>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d104      	bne.n	80025a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	e003      	b.n	80025a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025b0:	e02a      	b.n	8002608 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2200      	movs	r2, #0
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fa11 	bl	80029e4 <UART_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e036      	b.n	800263a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10b      	bne.n	80025ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	3302      	adds	r3, #2
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	e007      	b.n	80025fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	3301      	adds	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1cf      	bne.n	80025b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2200      	movs	r2, #0
 800261a:	2140      	movs	r1, #64	; 0x40
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f9e1 	bl	80029e4 <UART_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e006      	b.n	800263a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
  }
}
 800263a:	4618      	mov	r0, r3
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002664:	2300      	movs	r3, #0
 8002666:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10d      	bne.n	8002696 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_UART_IRQHandler+0x52>
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa99 	bl	8002bc6 <UART_Receive_IT>
      return;
 8002694:	e17b      	b.n	800298e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80b1 	beq.w	8002800 <HAL_UART_IRQHandler+0x1bc>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_UART_IRQHandler+0x70>
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80a6 	beq.w	8002800 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_UART_IRQHandler+0x90>
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f043 0201 	orr.w	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_UART_IRQHandler+0xb0>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f043 0202 	orr.w	r2, r3, #2
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_UART_IRQHandler+0xd0>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f043 0204 	orr.w	r2, r3, #4
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00f      	beq.n	800273e <HAL_UART_IRQHandler+0xfa>
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d104      	bne.n	8002732 <HAL_UART_IRQHandler+0xee>
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f043 0208 	orr.w	r2, r3, #8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 811e 	beq.w	8002984 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b00      	cmp	r3, #0
 8002750:	d007      	beq.n	8002762 <HAL_UART_IRQHandler+0x11e>
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fa32 	bl	8002bc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276c:	2b40      	cmp	r3, #64	; 0x40
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <HAL_UART_IRQHandler+0x146>
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d031      	beq.n	80027ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f974 	bl	8002a78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	d123      	bne.n	80027e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d013      	beq.n	80027de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	4a76      	ldr	r2, [pc, #472]	; (8002994 <HAL_UART_IRQHandler+0x350>)
 80027bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fa62 	bl	8000c8c <HAL_DMA_Abort_IT>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d016      	beq.n	80027fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027d8:	4610      	mov	r0, r2
 80027da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027dc:	e00e      	b.n	80027fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f8ec 	bl	80029bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e4:	e00a      	b.n	80027fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f8e8 	bl	80029bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ec:	e006      	b.n	80027fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8e4 	bl	80029bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027fa:	e0c3      	b.n	8002984 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027fc:	bf00      	nop
    return;
 80027fe:	e0c1      	b.n	8002984 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	2b01      	cmp	r3, #1
 8002806:	f040 80a1 	bne.w	800294c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 809b 	beq.w	800294c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8095 	beq.w	800294c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	2b40      	cmp	r3, #64	; 0x40
 8002844:	d14e      	bne.n	80028e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002850:	8a3b      	ldrh	r3, [r7, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8098 	beq.w	8002988 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800285c:	8a3a      	ldrh	r2, [r7, #16]
 800285e:	429a      	cmp	r2, r3
 8002860:	f080 8092 	bcs.w	8002988 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8a3a      	ldrh	r2, [r7, #16]
 8002868:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b20      	cmp	r3, #32
 8002872:	d02b      	beq.n	80028cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002882:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0210 	bic.w	r2, r2, #16
 80028c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe f9a3 	bl	8000c12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	b29b      	uxth	r3, r3
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f876 	bl	80029ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80028e2:	e051      	b.n	8002988 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d047      	beq.n	800298c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80028fc:	8a7b      	ldrh	r3, [r7, #18]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d044      	beq.n	800298c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002910:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0210 	bic.w	r2, r2, #16
 800293e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002940:	8a7b      	ldrh	r3, [r7, #18]
 8002942:	4619      	mov	r1, r3
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f842 	bl	80029ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800294a:	e01f      	b.n	800298c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_UART_IRQHandler+0x324>
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f8c9 	bl	8002af8 <UART_Transmit_IT>
    return;
 8002966:	e012      	b.n	800298e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00d      	beq.n	800298e <HAL_UART_IRQHandler+0x34a>
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f90a 	bl	8002b96 <UART_EndTransmit_IT>
    return;
 8002982:	e004      	b.n	800298e <HAL_UART_IRQHandler+0x34a>
    return;
 8002984:	bf00      	nop
 8002986:	e002      	b.n	800298e <HAL_UART_IRQHandler+0x34a>
      return;
 8002988:	bf00      	nop
 800298a:	e000      	b.n	800298e <HAL_UART_IRQHandler+0x34a>
      return;
 800298c:	bf00      	nop
  }
}
 800298e:	3728      	adds	r7, #40	; 0x28
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	08002ad1 	.word	0x08002ad1

08002998 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f4:	e02c      	b.n	8002a50 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d028      	beq.n	8002a50 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a04:	f7fd ffee 	bl	80009e4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d21d      	bcs.n	8002a50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a22:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0201 	bic.w	r2, r2, #1
 8002a32:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e00f      	b.n	8002a70 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d0c3      	beq.n	80029f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d107      	bne.n	8002ab8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0210 	bic.w	r2, r2, #16
 8002ab6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f7ff ff66 	bl	80029bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b21      	cmp	r3, #33	; 0x21
 8002b0a:	d13e      	bne.n	8002b8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b14:	d114      	bne.n	8002b40 <UART_Transmit_IT+0x48>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d110      	bne.n	8002b40 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	1c9a      	adds	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	621a      	str	r2, [r3, #32]
 8002b3e:	e008      	b.n	8002b52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	1c59      	adds	r1, r3, #1
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6211      	str	r1, [r2, #32]
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e000      	b.n	8002b8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b8a:	2302      	movs	r3, #2
  }
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff feee 	bl	8002998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b22      	cmp	r3, #34	; 0x22
 8002bd8:	f040 8099 	bne.w	8002d0e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be4:	d117      	bne.n	8002c16 <UART_Receive_IT+0x50>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d113      	bne.n	8002c16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	1c9a      	adds	r2, r3, #2
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
 8002c14:	e026      	b.n	8002c64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c28:	d007      	beq.n	8002c3a <UART_Receive_IT+0x74>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <UART_Receive_IT+0x82>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e008      	b.n	8002c5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	4619      	mov	r1, r3
 8002c72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d148      	bne.n	8002d0a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0220 	bic.w	r2, r2, #32
 8002c86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d123      	bne.n	8002d00 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0210 	bic.w	r2, r2, #16
 8002ccc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d10a      	bne.n	8002cf2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fe68 	bl	80029ce <HAL_UARTEx_RxEventCallback>
 8002cfe:	e002      	b.n	8002d06 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff fe52 	bl	80029aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e002      	b.n	8002d10 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d58:	f023 030c 	bic.w	r3, r3, #12
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	430b      	orrs	r3, r1
 8002d64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a55      	ldr	r2, [pc, #340]	; (8002ed8 <UART_SetConfig+0x1c0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d103      	bne.n	8002d8e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d86:	f7fe fec5 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	e002      	b.n	8002d94 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d8e:	f7fe fead 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8002d92:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d9c:	d14c      	bne.n	8002e38 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009a      	lsls	r2, r3, #2
 8002da8:	441a      	add	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	4a49      	ldr	r2, [pc, #292]	; (8002edc <UART_SetConfig+0x1c4>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	0119      	lsls	r1, r3, #4
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009a      	lsls	r2, r3, #2
 8002dc8:	441a      	add	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dd4:	4b41      	ldr	r3, [pc, #260]	; (8002edc <UART_SetConfig+0x1c4>)
 8002dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2064      	movs	r0, #100	; 0x64
 8002dde:	fb00 f303 	mul.w	r3, r0, r3
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	3332      	adds	r3, #50	; 0x32
 8002de8:	4a3c      	ldr	r2, [pc, #240]	; (8002edc <UART_SetConfig+0x1c4>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002df6:	4419      	add	r1, r3
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	009a      	lsls	r2, r3, #2
 8002e02:	441a      	add	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e0e:	4b33      	ldr	r3, [pc, #204]	; (8002edc <UART_SetConfig+0x1c4>)
 8002e10:	fba3 0302 	umull	r0, r3, r3, r2
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	2064      	movs	r0, #100	; 0x64
 8002e18:	fb00 f303 	mul.w	r3, r0, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	3332      	adds	r3, #50	; 0x32
 8002e22:	4a2e      	ldr	r2, [pc, #184]	; (8002edc <UART_SetConfig+0x1c4>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	f003 0207 	and.w	r2, r3, #7
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	440a      	add	r2, r1
 8002e34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e36:	e04a      	b.n	8002ece <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009a      	lsls	r2, r3, #2
 8002e42:	441a      	add	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4e:	4a23      	ldr	r2, [pc, #140]	; (8002edc <UART_SetConfig+0x1c4>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	0119      	lsls	r1, r3, #4
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009a      	lsls	r2, r3, #2
 8002e62:	441a      	add	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <UART_SetConfig+0x1c4>)
 8002e70:	fba3 0302 	umull	r0, r3, r3, r2
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	2064      	movs	r0, #100	; 0x64
 8002e78:	fb00 f303 	mul.w	r3, r0, r3
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	3332      	adds	r3, #50	; 0x32
 8002e82:	4a16      	ldr	r2, [pc, #88]	; (8002edc <UART_SetConfig+0x1c4>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e8e:	4419      	add	r1, r3
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	009a      	lsls	r2, r3, #2
 8002e9a:	441a      	add	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <UART_SetConfig+0x1c4>)
 8002ea8:	fba3 0302 	umull	r0, r3, r3, r2
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	2064      	movs	r0, #100	; 0x64
 8002eb0:	fb00 f303 	mul.w	r3, r0, r3
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	3332      	adds	r3, #50	; 0x32
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <UART_SetConfig+0x1c4>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	f003 020f 	and.w	r2, r3, #15
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	440a      	add	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40013800 	.word	0x40013800
 8002edc:	51eb851f 	.word	0x51eb851f

08002ee0 <__libc_init_array>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	2600      	movs	r6, #0
 8002ee4:	4d0c      	ldr	r5, [pc, #48]	; (8002f18 <__libc_init_array+0x38>)
 8002ee6:	4c0d      	ldr	r4, [pc, #52]	; (8002f1c <__libc_init_array+0x3c>)
 8002ee8:	1b64      	subs	r4, r4, r5
 8002eea:	10a4      	asrs	r4, r4, #2
 8002eec:	42a6      	cmp	r6, r4
 8002eee:	d109      	bne.n	8002f04 <__libc_init_array+0x24>
 8002ef0:	f000 f822 	bl	8002f38 <_init>
 8002ef4:	2600      	movs	r6, #0
 8002ef6:	4d0a      	ldr	r5, [pc, #40]	; (8002f20 <__libc_init_array+0x40>)
 8002ef8:	4c0a      	ldr	r4, [pc, #40]	; (8002f24 <__libc_init_array+0x44>)
 8002efa:	1b64      	subs	r4, r4, r5
 8002efc:	10a4      	asrs	r4, r4, #2
 8002efe:	42a6      	cmp	r6, r4
 8002f00:	d105      	bne.n	8002f0e <__libc_init_array+0x2e>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f08:	4798      	blx	r3
 8002f0a:	3601      	adds	r6, #1
 8002f0c:	e7ee      	b.n	8002eec <__libc_init_array+0xc>
 8002f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f12:	4798      	blx	r3
 8002f14:	3601      	adds	r6, #1
 8002f16:	e7f2      	b.n	8002efe <__libc_init_array+0x1e>
 8002f18:	08002f7c 	.word	0x08002f7c
 8002f1c:	08002f7c 	.word	0x08002f7c
 8002f20:	08002f7c 	.word	0x08002f7c
 8002f24:	08002f80 	.word	0x08002f80

08002f28 <memset>:
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4402      	add	r2, r0
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d100      	bne.n	8002f32 <memset+0xa>
 8002f30:	4770      	bx	lr
 8002f32:	f803 1b01 	strb.w	r1, [r3], #1
 8002f36:	e7f9      	b.n	8002f2c <memset+0x4>

08002f38 <_init>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	bf00      	nop
 8002f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3e:	bc08      	pop	{r3}
 8002f40:	469e      	mov	lr, r3
 8002f42:	4770      	bx	lr

08002f44 <_fini>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr
