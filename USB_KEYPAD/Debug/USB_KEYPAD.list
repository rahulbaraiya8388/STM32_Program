
USB_KEYPAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08008ad8  08008ad8  00018ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008be8  08008be8  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08008be8  08008be8  00018be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bf0  08008bf0  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf0  08008bf0  00018bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bf4  08008bf4  00018bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08008bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000158  08008d50  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  08008d50  000209dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c08  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b47  00000000  00000000  00030d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  000338d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00034550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163d4  00000000  00000000  000350b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112f1  00000000  00000000  0004b48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c443  00000000  00000000  0005c77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b6c  00000000  00000000  000d8c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000158 	.word	0x20000158
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008ac0 	.word	0x08008ac0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000015c 	.word	0x2000015c
 8000104:	08008ac0 	.word	0x08008ac0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <read_keypad>:
#define C4_PIN GPIO_PIN_0

uint8_t key;

char read_keypad (void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);  //Pull the R1 low
 80004ac:	23a0      	movs	r3, #160	; 0xa0
 80004ae:	05db      	lsls	r3, r3, #23
 80004b0:	2200      	movs	r2, #0
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 ff0a 	bl	80012ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 80004ba:	23a0      	movs	r3, #160	; 0xa0
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	2201      	movs	r2, #1
 80004c0:	2140      	movs	r1, #64	; 0x40
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 ff03 	bl	80012ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 80004c8:	23a0      	movs	r3, #160	; 0xa0
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	2201      	movs	r2, #1
 80004ce:	2120      	movs	r1, #32
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 fefc 	bl	80012ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 80004d6:	23a0      	movs	r3, #160	; 0xa0
 80004d8:	05db      	lsls	r3, r3, #23
 80004da:	2201      	movs	r2, #1
 80004dc:	2110      	movs	r1, #16
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fef5 	bl	80012ce <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80004e4:	23a0      	movs	r3, #160	; 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2108      	movs	r1, #8
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fed2 	bl	8001294 <HAL_GPIO_ReadPin>
 80004f0:	1e03      	subs	r3, r0, #0
 80004f2:	d10a      	bne.n	800050a <read_keypad+0x62>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	23a0      	movs	r3, #160	; 0xa0
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	2108      	movs	r1, #8
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fec9 	bl	8001294 <HAL_GPIO_ReadPin>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d0f7      	beq.n	80004f6 <read_keypad+0x4e>
		return '1';
 8000506:	2331      	movs	r3, #49	; 0x31
 8000508:	e170      	b.n	80007ec <read_keypad+0x344>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 800050a:	23a0      	movs	r3, #160	; 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2104      	movs	r1, #4
 8000510:	0018      	movs	r0, r3
 8000512:	f000 febf 	bl	8001294 <HAL_GPIO_ReadPin>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d10a      	bne.n	8000530 <read_keypad+0x88>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	23a0      	movs	r3, #160	; 0xa0
 800051e:	05db      	lsls	r3, r3, #23
 8000520:	2104      	movs	r1, #4
 8000522:	0018      	movs	r0, r3
 8000524:	f000 feb6 	bl	8001294 <HAL_GPIO_ReadPin>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d0f7      	beq.n	800051c <read_keypad+0x74>
		return '2';
 800052c:	2332      	movs	r3, #50	; 0x32
 800052e:	e15d      	b.n	80007ec <read_keypad+0x344>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8000530:	23a0      	movs	r3, #160	; 0xa0
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	2102      	movs	r1, #2
 8000536:	0018      	movs	r0, r3
 8000538:	f000 feac 	bl	8001294 <HAL_GPIO_ReadPin>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d10a      	bne.n	8000556 <read_keypad+0xae>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	23a0      	movs	r3, #160	; 0xa0
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	2102      	movs	r1, #2
 8000548:	0018      	movs	r0, r3
 800054a:	f000 fea3 	bl	8001294 <HAL_GPIO_ReadPin>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d0f7      	beq.n	8000542 <read_keypad+0x9a>
		return '3';
 8000552:	2333      	movs	r3, #51	; 0x33
 8000554:	e14a      	b.n	80007ec <read_keypad+0x344>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	2101      	movs	r1, #1
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fe99 	bl	8001294 <HAL_GPIO_ReadPin>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d10a      	bne.n	800057c <read_keypad+0xd4>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	23a0      	movs	r3, #160	; 0xa0
 800056a:	05db      	lsls	r3, r3, #23
 800056c:	2101      	movs	r1, #1
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fe90 	bl	8001294 <HAL_GPIO_ReadPin>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d0f7      	beq.n	8000568 <read_keypad+0xc0>
		return 'A';
 8000578:	2341      	movs	r3, #65	; 0x41
 800057a:	e137      	b.n	80007ec <read_keypad+0x344>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 800057c:	23a0      	movs	r3, #160	; 0xa0
 800057e:	05db      	lsls	r3, r3, #23
 8000580:	2201      	movs	r2, #1
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fea2 	bl	80012ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);  // Pull the R2 High
 800058a:	23a0      	movs	r3, #160	; 0xa0
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	2200      	movs	r2, #0
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fe9b 	bl	80012ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000598:	23a0      	movs	r3, #160	; 0xa0
 800059a:	05db      	lsls	r3, r3, #23
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fe94 	bl	80012ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 80005a6:	23a0      	movs	r3, #160	; 0xa0
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	2201      	movs	r2, #1
 80005ac:	2110      	movs	r1, #16
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 fe8d 	bl	80012ce <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80005b4:	23a0      	movs	r3, #160	; 0xa0
 80005b6:	05db      	lsls	r3, r3, #23
 80005b8:	2108      	movs	r1, #8
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fe6a 	bl	8001294 <HAL_GPIO_ReadPin>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d10a      	bne.n	80005da <read_keypad+0x132>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2108      	movs	r1, #8
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 fe61 	bl	8001294 <HAL_GPIO_ReadPin>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d0f7      	beq.n	80005c6 <read_keypad+0x11e>
		return '4';
 80005d6:	2334      	movs	r3, #52	; 0x34
 80005d8:	e108      	b.n	80007ec <read_keypad+0x344>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80005da:	23a0      	movs	r3, #160	; 0xa0
 80005dc:	05db      	lsls	r3, r3, #23
 80005de:	2104      	movs	r1, #4
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 fe57 	bl	8001294 <HAL_GPIO_ReadPin>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d10a      	bne.n	8000600 <read_keypad+0x158>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	23a0      	movs	r3, #160	; 0xa0
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	2104      	movs	r1, #4
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 fe4e 	bl	8001294 <HAL_GPIO_ReadPin>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d0f7      	beq.n	80005ec <read_keypad+0x144>
		return '5';
 80005fc:	2335      	movs	r3, #53	; 0x35
 80005fe:	e0f5      	b.n	80007ec <read_keypad+0x344>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8000600:	23a0      	movs	r3, #160	; 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	2102      	movs	r1, #2
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fe44 	bl	8001294 <HAL_GPIO_ReadPin>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d10a      	bne.n	8000626 <read_keypad+0x17e>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	23a0      	movs	r3, #160	; 0xa0
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	2102      	movs	r1, #2
 8000618:	0018      	movs	r0, r3
 800061a:	f000 fe3b 	bl	8001294 <HAL_GPIO_ReadPin>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d0f7      	beq.n	8000612 <read_keypad+0x16a>
		return '6';
 8000622:	2336      	movs	r3, #54	; 0x36
 8000624:	e0e2      	b.n	80007ec <read_keypad+0x344>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8000626:	23a0      	movs	r3, #160	; 0xa0
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	2101      	movs	r1, #1
 800062c:	0018      	movs	r0, r3
 800062e:	f000 fe31 	bl	8001294 <HAL_GPIO_ReadPin>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d10a      	bne.n	800064c <read_keypad+0x1a4>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	23a0      	movs	r3, #160	; 0xa0
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	2101      	movs	r1, #1
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fe28 	bl	8001294 <HAL_GPIO_ReadPin>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d0f7      	beq.n	8000638 <read_keypad+0x190>
		return 'B';
 8000648:	2342      	movs	r3, #66	; 0x42
 800064a:	e0cf      	b.n	80007ec <read_keypad+0x344>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 800064c:	23a0      	movs	r3, #160	; 0xa0
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	2201      	movs	r2, #1
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fe3a 	bl	80012ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 800065a:	23a0      	movs	r3, #160	; 0xa0
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	2201      	movs	r2, #1
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	0018      	movs	r0, r3
 8000664:	f000 fe33 	bl	80012ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);  // Pull the R3 High
 8000668:	23a0      	movs	r3, #160	; 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	2200      	movs	r2, #0
 800066e:	2120      	movs	r1, #32
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fe2c 	bl	80012ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 8000676:	23a0      	movs	r3, #160	; 0xa0
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	2201      	movs	r2, #1
 800067c:	2110      	movs	r1, #16
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fe25 	bl	80012ce <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000684:	23a0      	movs	r3, #160	; 0xa0
 8000686:	05db      	lsls	r3, r3, #23
 8000688:	2108      	movs	r1, #8
 800068a:	0018      	movs	r0, r3
 800068c:	f000 fe02 	bl	8001294 <HAL_GPIO_ReadPin>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d10a      	bne.n	80006aa <read_keypad+0x202>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	23a0      	movs	r3, #160	; 0xa0
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2108      	movs	r1, #8
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fdf9 	bl	8001294 <HAL_GPIO_ReadPin>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d0f7      	beq.n	8000696 <read_keypad+0x1ee>
		return '7';
 80006a6:	2337      	movs	r3, #55	; 0x37
 80006a8:	e0a0      	b.n	80007ec <read_keypad+0x344>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80006aa:	23a0      	movs	r3, #160	; 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2104      	movs	r1, #4
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fdef 	bl	8001294 <HAL_GPIO_ReadPin>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d10a      	bne.n	80006d0 <read_keypad+0x228>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	23a0      	movs	r3, #160	; 0xa0
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	2104      	movs	r1, #4
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fde6 	bl	8001294 <HAL_GPIO_ReadPin>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d0f7      	beq.n	80006bc <read_keypad+0x214>
		return '8';
 80006cc:	2338      	movs	r3, #56	; 0x38
 80006ce:	e08d      	b.n	80007ec <read_keypad+0x344>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80006d0:	23a0      	movs	r3, #160	; 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2102      	movs	r1, #2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fddc 	bl	8001294 <HAL_GPIO_ReadPin>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d10a      	bne.n	80006f6 <read_keypad+0x24e>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	23a0      	movs	r3, #160	; 0xa0
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	2102      	movs	r1, #2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fdd3 	bl	8001294 <HAL_GPIO_ReadPin>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d0f7      	beq.n	80006e2 <read_keypad+0x23a>
		return '9';
 80006f2:	2339      	movs	r3, #57	; 0x39
 80006f4:	e07a      	b.n	80007ec <read_keypad+0x344>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 80006f6:	23a0      	movs	r3, #160	; 0xa0
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	2101      	movs	r1, #1
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fdc9 	bl	8001294 <HAL_GPIO_ReadPin>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d10a      	bne.n	800071c <read_keypad+0x274>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	23a0      	movs	r3, #160	; 0xa0
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	2101      	movs	r1, #1
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fdc0 	bl	8001294 <HAL_GPIO_ReadPin>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d0f7      	beq.n	8000708 <read_keypad+0x260>
		return 'C';
 8000718:	2343      	movs	r3, #67	; 0x43
 800071a:	e067      	b.n	80007ec <read_keypad+0x344>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	2201      	movs	r2, #1
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fdd2 	bl	80012ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 800072a:	23a0      	movs	r3, #160	; 0xa0
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	2201      	movs	r2, #1
 8000730:	2140      	movs	r1, #64	; 0x40
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fdcb 	bl	80012ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000738:	23a0      	movs	r3, #160	; 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	2201      	movs	r2, #1
 800073e:	2120      	movs	r1, #32
 8000740:	0018      	movs	r0, r3
 8000742:	f000 fdc4 	bl	80012ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);  // Pull the R4 High
 8000746:	23a0      	movs	r3, #160	; 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	2200      	movs	r2, #0
 800074c:	2110      	movs	r1, #16
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fdbd 	bl	80012ce <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	2108      	movs	r1, #8
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fd9a 	bl	8001294 <HAL_GPIO_ReadPin>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d10a      	bne.n	800077a <read_keypad+0x2d2>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	23a0      	movs	r3, #160	; 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	2108      	movs	r1, #8
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fd91 	bl	8001294 <HAL_GPIO_ReadPin>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d0f7      	beq.n	8000766 <read_keypad+0x2be>
		return '*';
 8000776:	232a      	movs	r3, #42	; 0x2a
 8000778:	e038      	b.n	80007ec <read_keypad+0x344>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 800077a:	23a0      	movs	r3, #160	; 0xa0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	2104      	movs	r1, #4
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fd87 	bl	8001294 <HAL_GPIO_ReadPin>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d10a      	bne.n	80007a0 <read_keypad+0x2f8>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	23a0      	movs	r3, #160	; 0xa0
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	2104      	movs	r1, #4
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fd7e 	bl	8001294 <HAL_GPIO_ReadPin>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d0f7      	beq.n	800078c <read_keypad+0x2e4>
		return '0';
 800079c:	2330      	movs	r3, #48	; 0x30
 800079e:	e025      	b.n	80007ec <read_keypad+0x344>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80007a0:	23a0      	movs	r3, #160	; 0xa0
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	2102      	movs	r1, #2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fd74 	bl	8001294 <HAL_GPIO_ReadPin>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d10a      	bne.n	80007c6 <read_keypad+0x31e>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	23a0      	movs	r3, #160	; 0xa0
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	2102      	movs	r1, #2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fd6b 	bl	8001294 <HAL_GPIO_ReadPin>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d0f7      	beq.n	80007b2 <read_keypad+0x30a>
		return '#';
 80007c2:	2323      	movs	r3, #35	; 0x23
 80007c4:	e012      	b.n	80007ec <read_keypad+0x344>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 80007c6:	23a0      	movs	r3, #160	; 0xa0
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	2101      	movs	r1, #1
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fd61 	bl	8001294 <HAL_GPIO_ReadPin>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d10a      	bne.n	80007ec <read_keypad+0x344>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	23a0      	movs	r3, #160	; 0xa0
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	2101      	movs	r1, #1
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fd58 	bl	8001294 <HAL_GPIO_ReadPin>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d0f7      	beq.n	80007d8 <read_keypad+0x330>
		return 'D';
 80007e8:	2344      	movs	r3, #68	; 0x44
 80007ea:	e7ff      	b.n	80007ec <read_keypad+0x344>
	}

}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 fa64 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f8b2 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f000 f95a 	bl	8000ab8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000804:	f007 fcae 	bl	8008164 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000808:	f000 f926 	bl	8000a58 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 key = read_keypad ();
 800080c:	f7ff fe4c 	bl	80004a8 <read_keypad>
 8000810:	0003      	movs	r3, r0
 8000812:	001a      	movs	r2, r3
 8000814:	4b50      	ldr	r3, [pc, #320]	; (8000958 <main+0x164>)
 8000816:	701a      	strb	r2, [r3, #0]

      if (key != 0x01){
 8000818:	4b4f      	ldr	r3, [pc, #316]	; (8000958 <main+0x164>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d0f5      	beq.n	800080c <main+0x18>

	  if (key == '1')  Keypadhid.KEYCODE1 = 0x1E;
 8000820:	4b4d      	ldr	r3, [pc, #308]	; (8000958 <main+0x164>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b31      	cmp	r3, #49	; 0x31
 8000826:	d102      	bne.n	800082e <main+0x3a>
 8000828:	4b4c      	ldr	r3, [pc, #304]	; (800095c <main+0x168>)
 800082a:	221e      	movs	r2, #30
 800082c:	709a      	strb	r2, [r3, #2]
	  if (key == '2')  Keypadhid.KEYCODE1 = 0x1F;
 800082e:	4b4a      	ldr	r3, [pc, #296]	; (8000958 <main+0x164>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b32      	cmp	r3, #50	; 0x32
 8000834:	d102      	bne.n	800083c <main+0x48>
 8000836:	4b49      	ldr	r3, [pc, #292]	; (800095c <main+0x168>)
 8000838:	221f      	movs	r2, #31
 800083a:	709a      	strb	r2, [r3, #2]
	  if (key == '3')  Keypadhid.KEYCODE1 = 0x20;
 800083c:	4b46      	ldr	r3, [pc, #280]	; (8000958 <main+0x164>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b33      	cmp	r3, #51	; 0x33
 8000842:	d102      	bne.n	800084a <main+0x56>
 8000844:	4b45      	ldr	r3, [pc, #276]	; (800095c <main+0x168>)
 8000846:	2220      	movs	r2, #32
 8000848:	709a      	strb	r2, [r3, #2]
	  if (key == '4')  Keypadhid.KEYCODE1 = 0x21;
 800084a:	4b43      	ldr	r3, [pc, #268]	; (8000958 <main+0x164>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b34      	cmp	r3, #52	; 0x34
 8000850:	d102      	bne.n	8000858 <main+0x64>
 8000852:	4b42      	ldr	r3, [pc, #264]	; (800095c <main+0x168>)
 8000854:	2221      	movs	r2, #33	; 0x21
 8000856:	709a      	strb	r2, [r3, #2]
	  if (key == '5')  Keypadhid.KEYCODE1 = 0x22;
 8000858:	4b3f      	ldr	r3, [pc, #252]	; (8000958 <main+0x164>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b35      	cmp	r3, #53	; 0x35
 800085e:	d102      	bne.n	8000866 <main+0x72>
 8000860:	4b3e      	ldr	r3, [pc, #248]	; (800095c <main+0x168>)
 8000862:	2222      	movs	r2, #34	; 0x22
 8000864:	709a      	strb	r2, [r3, #2]
	  if (key == '6')  Keypadhid.KEYCODE1 = 0x23;
 8000866:	4b3c      	ldr	r3, [pc, #240]	; (8000958 <main+0x164>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b36      	cmp	r3, #54	; 0x36
 800086c:	d102      	bne.n	8000874 <main+0x80>
 800086e:	4b3b      	ldr	r3, [pc, #236]	; (800095c <main+0x168>)
 8000870:	2223      	movs	r2, #35	; 0x23
 8000872:	709a      	strb	r2, [r3, #2]
	  if (key == '7')  Keypadhid.KEYCODE1 = 0x24;
 8000874:	4b38      	ldr	r3, [pc, #224]	; (8000958 <main+0x164>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b37      	cmp	r3, #55	; 0x37
 800087a:	d102      	bne.n	8000882 <main+0x8e>
 800087c:	4b37      	ldr	r3, [pc, #220]	; (800095c <main+0x168>)
 800087e:	2224      	movs	r2, #36	; 0x24
 8000880:	709a      	strb	r2, [r3, #2]
	  if (key == '8')  Keypadhid.KEYCODE1 = 0x25;
 8000882:	4b35      	ldr	r3, [pc, #212]	; (8000958 <main+0x164>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b38      	cmp	r3, #56	; 0x38
 8000888:	d102      	bne.n	8000890 <main+0x9c>
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <main+0x168>)
 800088c:	2225      	movs	r2, #37	; 0x25
 800088e:	709a      	strb	r2, [r3, #2]
	  if (key == '9')  Keypadhid.KEYCODE1 = 0x26;
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <main+0x164>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b39      	cmp	r3, #57	; 0x39
 8000896:	d102      	bne.n	800089e <main+0xaa>
 8000898:	4b30      	ldr	r3, [pc, #192]	; (800095c <main+0x168>)
 800089a:	2226      	movs	r2, #38	; 0x26
 800089c:	709a      	strb	r2, [r3, #2]
	  if (key == '0')  Keypadhid.KEYCODE1 = 0x27;
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <main+0x164>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b30      	cmp	r3, #48	; 0x30
 80008a4:	d102      	bne.n	80008ac <main+0xb8>
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <main+0x168>)
 80008a8:	2227      	movs	r2, #39	; 0x27
 80008aa:	709a      	strb	r2, [r3, #2]

	  if (key == 'A')
 80008ac:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <main+0x164>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b41      	cmp	r3, #65	; 0x41
 80008b2:	d105      	bne.n	80008c0 <main+0xcc>
	  {
		  Keypadhid.MODIFIER = 0x02;  // left shift pressed
 80008b4:	4b29      	ldr	r3, [pc, #164]	; (800095c <main+0x168>)
 80008b6:	2202      	movs	r2, #2
 80008b8:	701a      	strb	r2, [r3, #0]
		  Keypadhid.KEYCODE1 = 0x04;  // press 'a'
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <main+0x168>)
 80008bc:	2204      	movs	r2, #4
 80008be:	709a      	strb	r2, [r3, #2]
//		  HAL_UART_Transmit(&huart1,"hi\r\n",5,1000);
	  }
	  if (key == 'B')
 80008c0:	4b25      	ldr	r3, [pc, #148]	; (8000958 <main+0x164>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b42      	cmp	r3, #66	; 0x42
 80008c6:	d105      	bne.n	80008d4 <main+0xe0>
	  {
		  Keypadhid.MODIFIER = 0x02;  // left shift pressed
 80008c8:	4b24      	ldr	r3, [pc, #144]	; (800095c <main+0x168>)
 80008ca:	2202      	movs	r2, #2
 80008cc:	701a      	strb	r2, [r3, #0]
		  Keypadhid.KEYCODE1 = 0x05;  // press 'B'
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <main+0x168>)
 80008d0:	2205      	movs	r2, #5
 80008d2:	709a      	strb	r2, [r3, #2]
	  }
	  if (key == 'C')
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <main+0x164>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b43      	cmp	r3, #67	; 0x43
 80008da:	d105      	bne.n	80008e8 <main+0xf4>
	  {
		  Keypadhid.MODIFIER = 0x02;  // left shift pressed
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <main+0x168>)
 80008de:	2202      	movs	r2, #2
 80008e0:	701a      	strb	r2, [r3, #0]
		  Keypadhid.KEYCODE1 = 0x06;  // press 'C'
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <main+0x168>)
 80008e4:	2206      	movs	r2, #6
 80008e6:	709a      	strb	r2, [r3, #2]
	  }
	  if (key == 'D')
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <main+0x164>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b44      	cmp	r3, #68	; 0x44
 80008ee:	d105      	bne.n	80008fc <main+0x108>
	  {
		  Keypadhid.MODIFIER = 0x02;  // left shift pressed
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <main+0x168>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	701a      	strb	r2, [r3, #0]
		  Keypadhid.KEYCODE1 = 0x07;  // press 'D'
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <main+0x168>)
 80008f8:	2207      	movs	r2, #7
 80008fa:	709a      	strb	r2, [r3, #2]
	  }

	  if (key == '*')
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <main+0x164>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b2a      	cmp	r3, #42	; 0x2a
 8000902:	d105      	bne.n	8000910 <main+0x11c>
	  {
		  Keypadhid.MODIFIER = 0x02;  // left shift pressed
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <main+0x168>)
 8000906:	2202      	movs	r2, #2
 8000908:	701a      	strb	r2, [r3, #0]
		  Keypadhid.KEYCODE1 = 0x25;  // press '*'
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <main+0x168>)
 800090c:	2225      	movs	r2, #37	; 0x25
 800090e:	709a      	strb	r2, [r3, #2]
	  }

	  if (key == '#')
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <main+0x164>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b23      	cmp	r3, #35	; 0x23
 8000916:	d105      	bne.n	8000924 <main+0x130>
	  {
		  Keypadhid.MODIFIER = 0x02;  // left shift pressed
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <main+0x168>)
 800091a:	2202      	movs	r2, #2
 800091c:	701a      	strb	r2, [r3, #0]
		  Keypadhid.KEYCODE1 = 0x20;  // press '#'
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <main+0x168>)
 8000920:	2220      	movs	r2, #32
 8000922:	709a      	strb	r2, [r3, #2]
	  }

	  USBD_HID_SendReport(&hUsbDeviceFS,&Keypadhid,sizeof(Keypadhid));
 8000924:	490d      	ldr	r1, [pc, #52]	; (800095c <main+0x168>)
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <main+0x16c>)
 8000928:	2208      	movs	r2, #8
 800092a:	0018      	movs	r0, r3
 800092c:	f006 f9c0 	bl	8006cb0 <USBD_HID_SendReport>
	  HAL_Delay (50);
 8000930:	2032      	movs	r0, #50	; 0x32
 8000932:	f000 fa37 	bl	8000da4 <HAL_Delay>
	  Keypadhid.MODIFIER = 0x00;  // shift release
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <main+0x168>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
	  Keypadhid.KEYCODE1 = 0x00;  // release key
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <main+0x168>)
 800093e:	2200      	movs	r2, #0
 8000940:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS,&Keypadhid,sizeof(Keypadhid));
 8000942:	4906      	ldr	r1, [pc, #24]	; (800095c <main+0x168>)
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <main+0x16c>)
 8000946:	2208      	movs	r2, #8
 8000948:	0018      	movs	r0, r3
 800094a:	f006 f9b1 	bl	8006cb0 <USBD_HID_SendReport>
	  HAL_Delay (100);
 800094e:	2064      	movs	r0, #100	; 0x64
 8000950:	f000 fa28 	bl	8000da4 <HAL_Delay>
	 key = read_keypad ();
 8000954:	e75a      	b.n	800080c <main+0x18>
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	20000204 	.word	0x20000204
 800095c:	200001fc 	.word	0x200001fc
 8000960:	20000210 	.word	0x20000210

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b09d      	sub	sp, #116	; 0x74
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	2438      	movs	r4, #56	; 0x38
 800096c:	193b      	adds	r3, r7, r4
 800096e:	0018      	movs	r0, r3
 8000970:	2338      	movs	r3, #56	; 0x38
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f008 f89b 	bl	8008ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097a:	2324      	movs	r3, #36	; 0x24
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	0018      	movs	r0, r3
 8000980:	2314      	movs	r3, #20
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f008 f893 	bl	8008ab0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098a:	003b      	movs	r3, r7
 800098c:	0018      	movs	r0, r3
 800098e:	2324      	movs	r3, #36	; 0x24
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f008 f88c 	bl	8008ab0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <SystemClock_Config+0xec>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a2d      	ldr	r2, [pc, #180]	; (8000a54 <SystemClock_Config+0xf0>)
 800099e:	401a      	ands	r2, r3
 80009a0:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <SystemClock_Config+0xec>)
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	0109      	lsls	r1, r1, #4
 80009a6:	430a      	orrs	r2, r1
 80009a8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80009aa:	0021      	movs	r1, r4
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2222      	movs	r2, #34	; 0x22
 80009b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2201      	movs	r2, #1
 80009b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2210      	movs	r2, #16
 80009bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2201      	movs	r2, #1
 80009c2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2202      	movs	r2, #2
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	02d2      	lsls	r2, r2, #11
 80009d6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	03d2      	lsls	r2, r2, #15
 80009de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	0018      	movs	r0, r3
 80009e4:	f002 fac8 	bl	8002f78 <HAL_RCC_OscConfig>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009ec:	f000 f8b8 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	2124      	movs	r1, #36	; 0x24
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	220f      	movs	r2, #15
 80009f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2203      	movs	r2, #3
 80009fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2101      	movs	r1, #1
 8000a14:	0018      	movs	r0, r3
 8000a16:	f002 fe73 	bl	8003700 <HAL_RCC_ClockConfig>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a1e:	f000 f89f 	bl	8000b60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 8000a22:	003b      	movs	r3, r7
 8000a24:	2241      	movs	r2, #65	; 0x41
 8000a26:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a28:	003b      	movs	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a2e:	003b      	movs	r3, r7
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	04d2      	lsls	r2, r2, #19
 8000a34:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a36:	003b      	movs	r3, r7
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f003 f885 	bl	8003b48 <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000a42:	f000 f88d 	bl	8000b60 <Error_Handler>
  }
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b01d      	add	sp, #116	; 0x74
 8000a4c:	bd90      	pop	{r4, r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40007000 	.word	0x40007000
 8000a54:	ffffe7ff 	.word	0xffffe7ff

08000a58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_USART1_UART_Init+0x58>)
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_USART1_UART_Init+0x5c>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_USART1_UART_Init+0x58>)
 8000a64:	22e1      	movs	r2, #225	; 0xe1
 8000a66:	0252      	lsls	r2, r2, #9
 8000a68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART1_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_USART1_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART1_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART1_UART_Init+0x58>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART1_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART1_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART1_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART1_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <MX_USART1_UART_Init+0x58>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f003 f9e1 	bl	8003e64 <HAL_UART_Init>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 f85b 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000174 	.word	0x20000174
 8000ab4:	40013800 	.word	0x40013800

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	240c      	movs	r4, #12
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2314      	movs	r3, #20
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f007 fff1 	bl	8008ab0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <MX_GPIO_Init+0xa4>)
 8000ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MX_GPIO_Init+0xa4>)
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <MX_GPIO_Init+0xa4>)
 8000adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_GPIO_Init+0xa4>)
 8000ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MX_GPIO_Init+0xa4>)
 8000aec:	2101      	movs	r1, #1
 8000aee:	430a      	orrs	r2, r1
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_GPIO_Init+0xa4>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	2201      	movs	r2, #1
 8000af8:	4013      	ands	r3, r2
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000afe:	23a0      	movs	r3, #160	; 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	2200      	movs	r2, #0
 8000b04:	21f0      	movs	r1, #240	; 0xf0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fbe1 	bl	80012ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	220f      	movs	r2, #15
 8000b10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	193a      	adds	r2, r7, r4
 8000b20:	23a0      	movs	r3, #160	; 0xa0
 8000b22:	05db      	lsls	r3, r3, #23
 8000b24:	0011      	movs	r1, r2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fa3e 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b2c:	0021      	movs	r1, r4
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	22f0      	movs	r2, #240	; 0xf0
 8000b32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2201      	movs	r2, #1
 8000b38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	187a      	adds	r2, r7, r1
 8000b48:	23a0      	movs	r3, #160	; 0xa0
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 fa2a 	bl	8000fa8 <HAL_GPIO_Init>

}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b009      	add	sp, #36	; 0x24
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	40021000 	.word	0x40021000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <HAL_MspInit+0x24>)
 8000b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x24>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <HAL_MspInit+0x24>)
 8000b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_MspInit+0x24>)
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	0549      	lsls	r1, r1, #21
 8000b86:	430a      	orrs	r2, r1
 8000b88:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	240c      	movs	r4, #12
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	2314      	movs	r3, #20
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f007 ff82 	bl	8008ab0 <memset>
  if(huart->Instance==USART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <HAL_UART_MspInit+0x80>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12a      	bne.n	8000c0c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	01c9      	lsls	r1, r1, #7
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bca:	2101      	movs	r1, #1
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	22c0      	movs	r2, #192	; 0xc0
 8000be0:	00d2      	lsls	r2, r2, #3
 8000be2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	0021      	movs	r1, r4
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2202      	movs	r2, #2
 8000bea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	187a      	adds	r2, r7, r1
 8000c00:	23a0      	movs	r3, #160	; 0xa0
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	0011      	movs	r1, r2
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f9ce 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b009      	add	sp, #36	; 0x24
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	40013800 	.word	0x40013800
 8000c18:	40021000 	.word	0x40021000

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 f894 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <USB_IRQHandler+0x14>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fc7e 	bl	8001554 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	200006d4 	.word	0x200006d4

08000c64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c72:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c74:	f7ff fff6 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	; (8000cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	; (8000cbc <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f007 fee3 	bl	8008a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fda7 	bl	80007f4 <main>

08000ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
  ldr   r0, =_estack
 8000ca8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000cb4:	08008bf8 	.word	0x08008bf8
  ldr r2, =_sbss
 8000cb8:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000cbc:	200009dc 	.word	0x200009dc

08000cc0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_COMP_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_Init+0x3c>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_Init+0x3c>)
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 f811 	bl	8000d04 <HAL_InitTick>
 8000ce2:	1e03      	subs	r3, r0, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e001      	b.n	8000cf2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cee:	f7ff ff3d 	bl	8000b6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_InitTick+0x5c>)
 8000d0e:	681c      	ldr	r4, [r3, #0]
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_InitTick+0x60>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	0019      	movs	r1, r3
 8000d16:	23fa      	movs	r3, #250	; 0xfa
 8000d18:	0098      	lsls	r0, r3, #2
 8000d1a:	f7ff f9f5 	bl	8000108 <__udivsi3>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	0019      	movs	r1, r3
 8000d22:	0020      	movs	r0, r4
 8000d24:	f7ff f9f0 	bl	8000108 <__udivsi3>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 f92f 	bl	8000f8e <HAL_SYSTICK_Config>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e00f      	b.n	8000d58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d80b      	bhi.n	8000d56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	2301      	movs	r3, #1
 8000d42:	425b      	negs	r3, r3
 8000d44:	2200      	movs	r2, #0
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 f8fc 	bl	8000f44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_InitTick+0x64>)
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b003      	add	sp, #12
 8000d5e:	bd90      	pop	{r4, r7, pc}
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_IncTick+0x1c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	001a      	movs	r2, r3
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x20>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	18d2      	adds	r2, r2, r3
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <HAL_IncTick+0x20>)
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000208 	.word	0x20000208

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <HAL_GetTick+0x10>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	20000208 	.word	0x20000208

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff fff0 	bl	8000d90 <HAL_GetTick>
 8000db0:	0003      	movs	r3, r0
 8000db2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	189b      	adds	r3, r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	f7ff ffe0 	bl	8000d90 <HAL_GetTick>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b004      	add	sp, #16
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000008 	.word	0x20000008

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	0002      	movs	r2, r0
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dfe:	d809      	bhi.n	8000e14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	001a      	movs	r2, r3
 8000e06:	231f      	movs	r3, #31
 8000e08:	401a      	ands	r2, r3
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_EnableIRQ+0x30>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4091      	lsls	r1, r2
 8000e10:	000a      	movs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
  }
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	0002      	movs	r2, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b7f      	cmp	r3, #127	; 0x7f
 8000e34:	d828      	bhi.n	8000e88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e36:	4a2f      	ldr	r2, [pc, #188]	; (8000ef4 <__NVIC_SetPriority+0xd4>)
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	33c0      	adds	r3, #192	; 0xc0
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	589b      	ldr	r3, [r3, r2]
 8000e46:	1dfa      	adds	r2, r7, #7
 8000e48:	7812      	ldrb	r2, [r2, #0]
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	400a      	ands	r2, r1
 8000e50:	00d2      	lsls	r2, r2, #3
 8000e52:	21ff      	movs	r1, #255	; 0xff
 8000e54:	4091      	lsls	r1, r2
 8000e56:	000a      	movs	r2, r1
 8000e58:	43d2      	mvns	r2, r2
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	019b      	lsls	r3, r3, #6
 8000e62:	22ff      	movs	r2, #255	; 0xff
 8000e64:	401a      	ands	r2, r3
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	4003      	ands	r3, r0
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e74:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <__NVIC_SetPriority+0xd4>)
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	33c0      	adds	r3, #192	; 0xc0
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e86:	e031      	b.n	8000eec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e88:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <__NVIC_SetPriority+0xd8>)
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	0019      	movs	r1, r3
 8000e90:	230f      	movs	r3, #15
 8000e92:	400b      	ands	r3, r1
 8000e94:	3b08      	subs	r3, #8
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3306      	adds	r3, #6
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	18d3      	adds	r3, r2, r3
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	1dfa      	adds	r2, r7, #7
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	400a      	ands	r2, r1
 8000eac:	00d2      	lsls	r2, r2, #3
 8000eae:	21ff      	movs	r1, #255	; 0xff
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	000a      	movs	r2, r1
 8000eb4:	43d2      	mvns	r2, r2
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	019b      	lsls	r3, r3, #6
 8000ebe:	22ff      	movs	r2, #255	; 0xff
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	2303      	movs	r3, #3
 8000eca:	4003      	ands	r3, r0
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <__NVIC_SetPriority+0xd8>)
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	001c      	movs	r4, r3
 8000ed8:	230f      	movs	r3, #15
 8000eda:	4023      	ands	r3, r4
 8000edc:	3b08      	subs	r3, #8
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	3306      	adds	r3, #6
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	18c3      	adds	r3, r0, r3
 8000ee8:	3304      	adds	r3, #4
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b003      	add	sp, #12
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	1e5a      	subs	r2, r3, #1
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	045b      	lsls	r3, r3, #17
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d301      	bcc.n	8000f14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f10:	2301      	movs	r3, #1
 8000f12:	e010      	b.n	8000f36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <SysTick_Config+0x44>)
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	3a01      	subs	r2, #1
 8000f1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	425b      	negs	r3, r3
 8000f20:	2103      	movs	r1, #3
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff ff7c 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x44>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x44>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b002      	add	sp, #8
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	210f      	movs	r1, #15
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	1c02      	adds	r2, r0, #0
 8000f54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff ff5d 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b004      	add	sp, #16
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	0002      	movs	r2, r0
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff ff33 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff ffaf 	bl	8000efc <SysTick_Config>
 8000f9e:	0003      	movs	r3, r0
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fbe:	e14f      	b.n	8001260 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4091      	lsls	r1, r2
 8000fca:	000a      	movs	r2, r1
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d100      	bne.n	8000fd8 <HAL_GPIO_Init+0x30>
 8000fd6:	e140      	b.n	800125a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2203      	movs	r2, #3
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d005      	beq.n	8000ff0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d130      	bne.n	8001052 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	0013      	movs	r3, r2
 8001000:	43da      	mvns	r2, r3
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	409a      	lsls	r2, r3
 8001012:	0013      	movs	r3, r2
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001026:	2201      	movs	r2, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	2201      	movs	r2, #1
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2203      	movs	r2, #3
 8001058:	4013      	ands	r3, r2
 800105a:	2b03      	cmp	r3, #3
 800105c:	d017      	beq.n	800108e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	43da      	mvns	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2203      	movs	r2, #3
 8001094:	4013      	ands	r3, r2
 8001096:	2b02      	cmp	r3, #2
 8001098:	d123      	bne.n	80010e2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	58d3      	ldr	r3, [r2, r3]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2207      	movs	r2, #7
 80010ac:	4013      	ands	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	409a      	lsls	r2, r3
 80010b4:	0013      	movs	r3, r2
 80010b6:	43da      	mvns	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	691a      	ldr	r2, [r3, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2107      	movs	r1, #7
 80010c6:	400b      	ands	r3, r1
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	409a      	lsls	r2, r3
 80010cc:	0013      	movs	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	6939      	ldr	r1, [r7, #16]
 80010e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2203      	movs	r2, #3
 8001100:	401a      	ands	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	23c0      	movs	r3, #192	; 0xc0
 800111c:	029b      	lsls	r3, r3, #10
 800111e:	4013      	ands	r3, r2
 8001120:	d100      	bne.n	8001124 <HAL_GPIO_Init+0x17c>
 8001122:	e09a      	b.n	800125a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001124:	4b54      	ldr	r3, [pc, #336]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 8001126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001128:	4b53      	ldr	r3, [pc, #332]	; (8001278 <HAL_GPIO_Init+0x2d0>)
 800112a:	2101      	movs	r1, #1
 800112c:	430a      	orrs	r2, r1
 800112e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001130:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_GPIO_Init+0x2d4>)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	589b      	ldr	r3, [r3, r2]
 800113c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2203      	movs	r2, #3
 8001142:	4013      	ands	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220f      	movs	r2, #15
 8001148:	409a      	lsls	r2, r3
 800114a:	0013      	movs	r3, r2
 800114c:	43da      	mvns	r2, r3
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	23a0      	movs	r3, #160	; 0xa0
 8001158:	05db      	lsls	r3, r3, #23
 800115a:	429a      	cmp	r2, r3
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x1ea>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a47      	ldr	r2, [pc, #284]	; (8001280 <HAL_GPIO_Init+0x2d8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x1e6>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a46      	ldr	r2, [pc, #280]	; (8001284 <HAL_GPIO_Init+0x2dc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x1e2>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a45      	ldr	r2, [pc, #276]	; (8001288 <HAL_GPIO_Init+0x2e0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x1de>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a44      	ldr	r2, [pc, #272]	; (800128c <HAL_GPIO_Init+0x2e4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x1da>
 800117e:	2305      	movs	r3, #5
 8001180:	e008      	b.n	8001194 <HAL_GPIO_Init+0x1ec>
 8001182:	2306      	movs	r3, #6
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x1ec>
 8001186:	2303      	movs	r3, #3
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x1ec>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x1ec>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x1ec>
 8001192:	2300      	movs	r3, #0
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	2103      	movs	r1, #3
 8001198:	400a      	ands	r2, r1
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a4:	4935      	ldr	r1, [pc, #212]	; (800127c <HAL_GPIO_Init+0x2d4>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43da      	mvns	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	035b      	lsls	r3, r3, #13
 80011ca:	4013      	ands	r3, r2
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011d6:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011dc:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	039b      	lsls	r3, r3, #14
 80011f4:	4013      	ands	r3, r2
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	029b      	lsls	r3, r3, #10
 800121e:	4013      	ands	r3, r2
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	025b      	lsls	r3, r3, #9
 8001248:	4013      	ands	r3, r2
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	40da      	lsrs	r2, r3
 8001268:	1e13      	subs	r3, r2, #0
 800126a:	d000      	beq.n	800126e <HAL_GPIO_Init+0x2c6>
 800126c:	e6a8      	b.n	8000fc0 <HAL_GPIO_Init+0x18>
  }
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b006      	add	sp, #24
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000
 8001280:	50000400 	.word	0x50000400
 8001284:	50000800 	.word	0x50000800
 8001288:	50000c00 	.word	0x50000c00
 800128c:	50001c00 	.word	0x50001c00
 8001290:	40010400 	.word	0x40010400

08001294 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	000a      	movs	r2, r1
 800129e:	1cbb      	adds	r3, r7, #2
 80012a0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	1cba      	adds	r2, r7, #2
 80012a8:	8812      	ldrh	r2, [r2, #0]
 80012aa:	4013      	ands	r3, r2
 80012ac:	d004      	beq.n	80012b8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012ae:	230f      	movs	r3, #15
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e003      	b.n	80012c0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012b8:	230f      	movs	r3, #15
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012c0:	230f      	movs	r3, #15
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	781b      	ldrb	r3, [r3, #0]
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	0008      	movs	r0, r1
 80012d8:	0011      	movs	r1, r2
 80012da:	1cbb      	adds	r3, r7, #2
 80012dc:	1c02      	adds	r2, r0, #0
 80012de:	801a      	strh	r2, [r3, #0]
 80012e0:	1c7b      	adds	r3, r7, #1
 80012e2:	1c0a      	adds	r2, r1, #0
 80012e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e6:	1c7b      	adds	r3, r7, #1
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d004      	beq.n	80012f8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ee:	1cbb      	adds	r3, r7, #2
 80012f0:	881a      	ldrh	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80012f6:	e003      	b.n	8001300 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80012f8:	1cbb      	adds	r3, r7, #2
 80012fa:	881a      	ldrh	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b002      	add	sp, #8
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	b08b      	sub	sp, #44	; 0x2c
 800130c:	af06      	add	r7, sp, #24
 800130e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e0f0      	b.n	80014fc <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a79      	ldr	r2, [pc, #484]	; (8001504 <HAL_PCD_Init+0x1fc>)
 800131e:	5c9b      	ldrb	r3, [r3, r2]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d108      	bne.n	8001338 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	23aa      	movs	r3, #170	; 0xaa
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	2100      	movs	r1, #0
 800132e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	0018      	movs	r0, r3
 8001334:	f007 f86c 	bl	8008410 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a72      	ldr	r2, [pc, #456]	; (8001504 <HAL_PCD_Init+0x1fc>)
 800133c:	2103      	movs	r1, #3
 800133e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0018      	movs	r0, r3
 8001346:	f003 faa5 	bl	8004894 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800134a:	230f      	movs	r3, #15
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e049      	b.n	80013e8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001354:	200f      	movs	r0, #15
 8001356:	183b      	adds	r3, r7, r0
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	0013      	movs	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	189b      	adds	r3, r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	18cb      	adds	r3, r1, r3
 8001368:	3301      	adds	r3, #1
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800136e:	183b      	adds	r3, r7, r0
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	0013      	movs	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	189b      	adds	r3, r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	183a      	adds	r2, r7, r0
 8001380:	7812      	ldrb	r2, [r2, #0]
 8001382:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001384:	183b      	adds	r3, r7, r0
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	0013      	movs	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	189b      	adds	r3, r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	18cb      	adds	r3, r1, r3
 8001396:	3303      	adds	r3, #3
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800139c:	183b      	adds	r3, r7, r0
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	0013      	movs	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	189b      	adds	r3, r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	18cb      	adds	r3, r1, r3
 80013ac:	3338      	adds	r3, #56	; 0x38
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013b2:	183b      	adds	r3, r7, r0
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	0013      	movs	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	189b      	adds	r3, r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	18cb      	adds	r3, r1, r3
 80013c2:	333c      	adds	r3, #60	; 0x3c
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013c8:	183b      	adds	r3, r7, r0
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	0013      	movs	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	189b      	adds	r3, r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	18cb      	adds	r3, r1, r3
 80013d8:	3340      	adds	r3, #64	; 0x40
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013de:	183b      	adds	r3, r7, r0
 80013e0:	781a      	ldrb	r2, [r3, #0]
 80013e2:	183b      	adds	r3, r7, r0
 80013e4:	3201      	adds	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	210f      	movs	r1, #15
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d3ae      	bcc.n	8001354 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	e056      	b.n	80014ac <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013fe:	240f      	movs	r4, #15
 8001400:	193b      	adds	r3, r7, r4
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	236a      	movs	r3, #106	; 0x6a
 8001408:	33ff      	adds	r3, #255	; 0xff
 800140a:	0019      	movs	r1, r3
 800140c:	0013      	movs	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	189b      	adds	r3, r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	18c3      	adds	r3, r0, r3
 8001416:	185b      	adds	r3, r3, r1
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800141c:	193b      	adds	r3, r7, r4
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	23b4      	movs	r3, #180	; 0xb4
 8001424:	0059      	lsls	r1, r3, #1
 8001426:	0013      	movs	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	189b      	adds	r3, r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	18c3      	adds	r3, r0, r3
 8001430:	185b      	adds	r3, r3, r1
 8001432:	193a      	adds	r2, r7, r4
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001438:	193b      	adds	r3, r7, r4
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	236c      	movs	r3, #108	; 0x6c
 8001440:	33ff      	adds	r3, #255	; 0xff
 8001442:	0019      	movs	r1, r3
 8001444:	0013      	movs	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	189b      	adds	r3, r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	18c3      	adds	r3, r0, r3
 800144e:	185b      	adds	r3, r3, r1
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001454:	193b      	adds	r3, r7, r4
 8001456:	781a      	ldrb	r2, [r3, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	23bc      	movs	r3, #188	; 0xbc
 800145c:	0059      	lsls	r1, r3, #1
 800145e:	0013      	movs	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	189b      	adds	r3, r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	18c3      	adds	r3, r0, r3
 8001468:	185b      	adds	r3, r3, r1
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800146e:	193b      	adds	r3, r7, r4
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	23be      	movs	r3, #190	; 0xbe
 8001476:	0059      	lsls	r1, r3, #1
 8001478:	0013      	movs	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	189b      	adds	r3, r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	18c3      	adds	r3, r0, r3
 8001482:	185b      	adds	r3, r3, r1
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001488:	193b      	adds	r3, r7, r4
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	23c0      	movs	r3, #192	; 0xc0
 8001490:	0059      	lsls	r1, r3, #1
 8001492:	0013      	movs	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	189b      	adds	r3, r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	18c3      	adds	r3, r0, r3
 800149c:	185b      	adds	r3, r3, r1
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	781a      	ldrb	r2, [r3, #0]
 80014a6:	193b      	adds	r3, r7, r4
 80014a8:	3201      	adds	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	230f      	movs	r3, #15
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d3a1      	bcc.n	80013fe <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	466a      	mov	r2, sp
 80014c2:	0011      	movs	r1, r2
 80014c4:	001a      	movs	r2, r3
 80014c6:	3210      	adds	r2, #16
 80014c8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80014ca:	c170      	stmia	r1!, {r4, r5, r6}
 80014cc:	ca30      	ldmia	r2!, {r4, r5}
 80014ce:	c130      	stmia	r1!, {r4, r5}
 80014d0:	6859      	ldr	r1, [r3, #4]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f003 f9f7 	bl	80048c8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2224      	movs	r2, #36	; 0x24
 80014de:	2100      	movs	r1, #0
 80014e0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_PCD_Init+0x1fc>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d103      	bne.n	80014fa <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	0018      	movs	r0, r3
 80014f6:	f001 fd09 	bl	8002f0c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	0018      	movs	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	b005      	add	sp, #20
 8001502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001504:	000002a9 	.word	0x000002a9

08001508 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	23aa      	movs	r3, #170	; 0xaa
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	5cd3      	ldrb	r3, [r2, r3]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_PCD_Start+0x18>
 800151c:	2302      	movs	r3, #2
 800151e:	e014      	b.n	800154a <HAL_PCD_Start+0x42>
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	23aa      	movs	r3, #170	; 0xaa
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	2101      	movs	r1, #1
 8001528:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0018      	movs	r0, r3
 8001530:	f003 f99a 	bl	8004868 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0018      	movs	r0, r3
 800153a:	f005 f99d 	bl	8006878 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	23aa      	movs	r3, #170	; 0xaa
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	2100      	movs	r1, #0
 8001546:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	b002      	add	sp, #8
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0018      	movs	r0, r3
 8001562:	f005 f99f 	bl	80068a4 <USB_ReadInterrupts>
 8001566:	0003      	movs	r3, r0
 8001568:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	4013      	ands	r3, r2
 8001572:	d004      	beq.n	800157e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	0018      	movs	r0, r3
 8001578:	f000 fb48 	bl	8001c0c <PCD_EP_ISR_Handler>

    return;
 800157c:	e11d      	b.n	80017ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4013      	ands	r3, r2
 8001586:	d015      	beq.n	80015b4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2244      	movs	r2, #68	; 0x44
 800158e:	5a9b      	ldrh	r3, [r3, r2]
 8001590:	b29a      	uxth	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	498a      	ldr	r1, [pc, #552]	; (80017c0 <HAL_PCD_IRQHandler+0x26c>)
 8001598:	400a      	ands	r2, r1
 800159a:	b291      	uxth	r1, r2
 800159c:	2244      	movs	r2, #68	; 0x44
 800159e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	0018      	movs	r0, r3
 80015a4:	f006 ffb7 	bl	8008516 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2100      	movs	r1, #0
 80015ac:	0018      	movs	r0, r3
 80015ae:	f000 f915 	bl	80017dc <HAL_PCD_SetAddress>

    return;
 80015b2:	e102      	b.n	80017ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	01db      	lsls	r3, r3, #7
 80015ba:	4013      	ands	r3, r2
 80015bc:	d00c      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2244      	movs	r2, #68	; 0x44
 80015c4:	5a9b      	ldrh	r3, [r3, r2]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	497d      	ldr	r1, [pc, #500]	; (80017c4 <HAL_PCD_IRQHandler+0x270>)
 80015ce:	400a      	ands	r2, r1
 80015d0:	b291      	uxth	r1, r2
 80015d2:	2244      	movs	r2, #68	; 0x44
 80015d4:	5299      	strh	r1, [r3, r2]

    return;
 80015d6:	e0f0      	b.n	80017ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	019b      	lsls	r3, r3, #6
 80015de:	4013      	ands	r3, r2
 80015e0:	d00c      	beq.n	80015fc <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2244      	movs	r2, #68	; 0x44
 80015e8:	5a9b      	ldrh	r3, [r3, r2]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4975      	ldr	r1, [pc, #468]	; (80017c8 <HAL_PCD_IRQHandler+0x274>)
 80015f2:	400a      	ands	r2, r1
 80015f4:	b291      	uxth	r1, r2
 80015f6:	2244      	movs	r2, #68	; 0x44
 80015f8:	5299      	strh	r1, [r3, r2]

    return;
 80015fa:	e0de      	b.n	80017ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	4013      	ands	r3, r2
 8001604:	d038      	beq.n	8001678 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2240      	movs	r2, #64	; 0x40
 800160c:	5a9b      	ldrh	r3, [r3, r2]
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2104      	movs	r1, #4
 8001616:	438a      	bics	r2, r1
 8001618:	b291      	uxth	r1, r2
 800161a:	2240      	movs	r2, #64	; 0x40
 800161c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2240      	movs	r2, #64	; 0x40
 8001624:	5a9b      	ldrh	r3, [r3, r2]
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2108      	movs	r1, #8
 800162e:	438a      	bics	r2, r1
 8001630:	b291      	uxth	r1, r2
 8001632:	2240      	movs	r2, #64	; 0x40
 8001634:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	23b8      	movs	r3, #184	; 0xb8
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	5cd3      	ldrb	r3, [r2, r3]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d109      	bne.n	8001656 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	23b8      	movs	r3, #184	; 0xb8
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	2100      	movs	r1, #0
 800164a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2100      	movs	r1, #0
 8001650:	0018      	movs	r0, r3
 8001652:	f001 fc85 	bl	8002f60 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	0018      	movs	r0, r3
 800165a:	f006 ff9d 	bl	8008598 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2244      	movs	r2, #68	; 0x44
 8001664:	5a9b      	ldrh	r3, [r3, r2]
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4957      	ldr	r1, [pc, #348]	; (80017cc <HAL_PCD_IRQHandler+0x278>)
 800166e:	400a      	ands	r2, r1
 8001670:	b291      	uxth	r1, r2
 8001672:	2244      	movs	r2, #68	; 0x44
 8001674:	5299      	strh	r1, [r3, r2]

    return;
 8001676:	e0a0      	b.n	80017ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	4013      	ands	r3, r2
 8001680:	d028      	beq.n	80016d4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2240      	movs	r2, #64	; 0x40
 8001688:	5a9b      	ldrh	r3, [r3, r2]
 800168a:	b29a      	uxth	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2108      	movs	r1, #8
 8001692:	430a      	orrs	r2, r1
 8001694:	b291      	uxth	r1, r2
 8001696:	2240      	movs	r2, #64	; 0x40
 8001698:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2244      	movs	r2, #68	; 0x44
 80016a0:	5a9b      	ldrh	r3, [r3, r2]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4949      	ldr	r1, [pc, #292]	; (80017d0 <HAL_PCD_IRQHandler+0x27c>)
 80016aa:	400a      	ands	r2, r1
 80016ac:	b291      	uxth	r1, r2
 80016ae:	2244      	movs	r2, #68	; 0x44
 80016b0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2240      	movs	r2, #64	; 0x40
 80016b8:	5a9b      	ldrh	r3, [r3, r2]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2104      	movs	r1, #4
 80016c2:	430a      	orrs	r2, r1
 80016c4:	b291      	uxth	r1, r2
 80016c6:	2240      	movs	r2, #64	; 0x40
 80016c8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	0018      	movs	r0, r3
 80016ce:	f006 ff47 	bl	8008560 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016d2:	e072      	b.n	80017ba <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2280      	movs	r2, #128	; 0x80
 80016d8:	4013      	ands	r3, r2
 80016da:	d046      	beq.n	800176a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2244      	movs	r2, #68	; 0x44
 80016e2:	5a9b      	ldrh	r3, [r3, r2]
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	438a      	bics	r2, r1
 80016ee:	b291      	uxth	r1, r2
 80016f0:	2244      	movs	r2, #68	; 0x44
 80016f2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	23b8      	movs	r3, #184	; 0xb8
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	5cd3      	ldrb	r3, [r2, r3]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d12f      	bne.n	8001760 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2240      	movs	r2, #64	; 0x40
 8001706:	5a9b      	ldrh	r3, [r3, r2]
 8001708:	b29a      	uxth	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2104      	movs	r1, #4
 8001710:	430a      	orrs	r2, r1
 8001712:	b291      	uxth	r1, r2
 8001714:	2240      	movs	r2, #64	; 0x40
 8001716:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	5a9b      	ldrh	r3, [r3, r2]
 8001720:	b29a      	uxth	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2108      	movs	r1, #8
 8001728:	430a      	orrs	r2, r1
 800172a:	b291      	uxth	r1, r2
 800172c:	2240      	movs	r2, #64	; 0x40
 800172e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	23b8      	movs	r3, #184	; 0xb8
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	2101      	movs	r1, #1
 8001738:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2254      	movs	r2, #84	; 0x54
 8001740:	5a9b      	ldrh	r3, [r3, r2]
 8001742:	b29b      	uxth	r3, r3
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	223c      	movs	r2, #60	; 0x3c
 8001748:	4013      	ands	r3, r2
 800174a:	0019      	movs	r1, r3
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	23b9      	movs	r3, #185	; 0xb9
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2101      	movs	r1, #1
 8001758:	0018      	movs	r0, r3
 800175a:	f001 fc01 	bl	8002f60 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800175e:	e02c      	b.n	80017ba <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	0018      	movs	r0, r3
 8001764:	f006 fefc 	bl	8008560 <HAL_PCD_SuspendCallback>
    return;
 8001768:	e027      	b.n	80017ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d010      	beq.n	8001796 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2244      	movs	r2, #68	; 0x44
 800177a:	5a9b      	ldrh	r3, [r3, r2]
 800177c:	b29a      	uxth	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4914      	ldr	r1, [pc, #80]	; (80017d4 <HAL_PCD_IRQHandler+0x280>)
 8001784:	400a      	ands	r2, r1
 8001786:	b291      	uxth	r1, r2
 8001788:	2244      	movs	r2, #68	; 0x44
 800178a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	0018      	movs	r0, r3
 8001790:	f006 feb2 	bl	80084f8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001794:	e011      	b.n	80017ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4013      	ands	r3, r2
 800179e:	d00c      	beq.n	80017ba <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2244      	movs	r2, #68	; 0x44
 80017a6:	5a9b      	ldrh	r3, [r3, r2]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	490a      	ldr	r1, [pc, #40]	; (80017d8 <HAL_PCD_IRQHandler+0x284>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	b291      	uxth	r1, r2
 80017b4:	2244      	movs	r2, #68	; 0x44
 80017b6:	5299      	strh	r1, [r3, r2]

    return;
 80017b8:	46c0      	nop			; (mov r8, r8)
  }
}
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b004      	add	sp, #16
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	fffffbff 	.word	0xfffffbff
 80017c4:	ffffbfff 	.word	0xffffbfff
 80017c8:	ffffdfff 	.word	0xffffdfff
 80017cc:	ffffefff 	.word	0xffffefff
 80017d0:	fffff7ff 	.word	0xfffff7ff
 80017d4:	fffffdff 	.word	0xfffffdff
 80017d8:	fffffeff 	.word	0xfffffeff

080017dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	000a      	movs	r2, r1
 80017e6:	1cfb      	adds	r3, r7, #3
 80017e8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	23aa      	movs	r3, #170	; 0xaa
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_PCD_SetAddress+0x1e>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e017      	b.n	800182a <HAL_PCD_SetAddress+0x4e>
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	23aa      	movs	r3, #170	; 0xaa
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	2101      	movs	r1, #1
 8001802:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	1cfa      	adds	r2, r7, #3
 8001808:	2124      	movs	r1, #36	; 0x24
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	1cfb      	adds	r3, r7, #3
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	0019      	movs	r1, r3
 8001818:	0010      	movs	r0, r2
 800181a:	f005 f819 	bl	8006850 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	23aa      	movs	r3, #170	; 0xaa
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	2100      	movs	r1, #0
 8001826:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001832:	b590      	push	{r4, r7, lr}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	000c      	movs	r4, r1
 800183c:	0010      	movs	r0, r2
 800183e:	0019      	movs	r1, r3
 8001840:	1cfb      	adds	r3, r7, #3
 8001842:	1c22      	adds	r2, r4, #0
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	003b      	movs	r3, r7
 8001848:	1c02      	adds	r2, r0, #0
 800184a:	801a      	strh	r2, [r3, #0]
 800184c:	1cbb      	adds	r3, r7, #2
 800184e:	1c0a      	adds	r2, r1, #0
 8001850:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001852:	230b      	movs	r3, #11
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800185a:	1cfb      	adds	r3, r7, #3
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b25b      	sxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	da0f      	bge.n	8001884 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001864:	1cfb      	adds	r3, r7, #3
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2207      	movs	r2, #7
 800186a:	4013      	ands	r3, r2
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	0013      	movs	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	189b      	adds	r3, r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	18d3      	adds	r3, r2, r3
 800187a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2201      	movs	r2, #1
 8001880:	705a      	strb	r2, [r3, #1]
 8001882:	e00f      	b.n	80018a4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001884:	1cfb      	adds	r3, r7, #3
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2207      	movs	r2, #7
 800188a:	401a      	ands	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	189b      	adds	r3, r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	3369      	adds	r3, #105	; 0x69
 8001896:	33ff      	adds	r3, #255	; 0xff
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	18d3      	adds	r3, r2, r3
 800189c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018a4:	1cfb      	adds	r3, r7, #3
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2207      	movs	r2, #7
 80018aa:	4013      	ands	r3, r2
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018b2:	003b      	movs	r3, r7
 80018b4:	881a      	ldrh	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1cba      	adds	r2, r7, #2
 80018be:	7812      	ldrb	r2, [r2, #0]
 80018c0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018c2:	1cbb      	adds	r3, r7, #2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d102      	bne.n	80018d0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	23aa      	movs	r3, #170	; 0xaa
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_PCD_EP_Open+0xae>
 80018dc:	2302      	movs	r3, #2
 80018de:	e013      	b.n	8001908 <HAL_PCD_EP_Open+0xd6>
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	23aa      	movs	r3, #170	; 0xaa
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	2101      	movs	r1, #1
 80018e8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	0011      	movs	r1, r2
 80018f2:	0018      	movs	r0, r3
 80018f4:	f003 f810 	bl	8004918 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	23aa      	movs	r3, #170	; 0xaa
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	2100      	movs	r1, #0
 8001900:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001902:	230b      	movs	r3, #11
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	781b      	ldrb	r3, [r3, #0]
}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b005      	add	sp, #20
 800190e:	bd90      	pop	{r4, r7, pc}

08001910 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	000a      	movs	r2, r1
 800191a:	1cfb      	adds	r3, r7, #3
 800191c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800191e:	1cfb      	adds	r3, r7, #3
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b25b      	sxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	da0f      	bge.n	8001948 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001928:	1cfb      	adds	r3, r7, #3
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2207      	movs	r2, #7
 800192e:	4013      	ands	r3, r2
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	0013      	movs	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	189b      	adds	r3, r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	18d3      	adds	r3, r2, r3
 800193e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2201      	movs	r2, #1
 8001944:	705a      	strb	r2, [r3, #1]
 8001946:	e00f      	b.n	8001968 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001948:	1cfb      	adds	r3, r7, #3
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2207      	movs	r2, #7
 800194e:	401a      	ands	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	189b      	adds	r3, r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	3369      	adds	r3, #105	; 0x69
 800195a:	33ff      	adds	r3, #255	; 0xff
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	18d3      	adds	r3, r2, r3
 8001960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001968:	1cfb      	adds	r3, r7, #3
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2207      	movs	r2, #7
 800196e:	4013      	ands	r3, r2
 8001970:	b2da      	uxtb	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	23aa      	movs	r3, #170	; 0xaa
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_PCD_EP_Close+0x76>
 8001982:	2302      	movs	r3, #2
 8001984:	e011      	b.n	80019aa <HAL_PCD_EP_Close+0x9a>
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	23aa      	movs	r3, #170	; 0xaa
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	2101      	movs	r1, #1
 800198e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	0011      	movs	r1, r2
 8001998:	0018      	movs	r0, r3
 800199a:	f003 fb5f 	bl	800505c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	23aa      	movs	r3, #170	; 0xaa
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	2100      	movs	r1, #0
 80019a6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b004      	add	sp, #16
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	200b      	movs	r0, #11
 80019c0:	183b      	adds	r3, r7, r0
 80019c2:	1c0a      	adds	r2, r1, #0
 80019c4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019c6:	0001      	movs	r1, r0
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2207      	movs	r2, #7
 80019ce:	401a      	ands	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	189b      	adds	r3, r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	3369      	adds	r3, #105	; 0x69
 80019da:	33ff      	adds	r3, #255	; 0xff
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	18d3      	adds	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2200      	movs	r2, #0
 80019f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2200      	movs	r2, #0
 80019f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2207      	movs	r2, #7
 8001a00:	4013      	ands	r3, r2
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	0011      	movs	r1, r2
 8001a10:	0018      	movs	r0, r3
 8001a12:	f003 fce3 	bl	80053dc <USB_EPStartXfer>

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b006      	add	sp, #24
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	200b      	movs	r0, #11
 8001a2e:	183b      	adds	r3, r7, r0
 8001a30:	1c0a      	adds	r2, r1, #0
 8001a32:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a34:	183b      	adds	r3, r7, r0
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2207      	movs	r2, #7
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	0013      	movs	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	189b      	adds	r3, r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	18d3      	adds	r3, r2, r3
 8001a4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2224      	movs	r2, #36	; 0x24
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2207      	movs	r2, #7
 8001a78:	4013      	ands	r3, r2
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	0011      	movs	r1, r2
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f003 fca7 	bl	80053dc <USB_EPStartXfer>

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b006      	add	sp, #24
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	000a      	movs	r2, r1
 8001aa2:	1cfb      	adds	r3, r7, #3
 8001aa4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001aa6:	1cfb      	adds	r3, r7, #3
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2207      	movs	r2, #7
 8001aac:	401a      	ands	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d901      	bls.n	8001aba <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e046      	b.n	8001b48 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aba:	1cfb      	adds	r3, r7, #3
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	b25b      	sxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	da0f      	bge.n	8001ae4 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac4:	1cfb      	adds	r3, r7, #3
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2207      	movs	r2, #7
 8001aca:	4013      	ands	r3, r2
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	0013      	movs	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	189b      	adds	r3, r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	18d3      	adds	r3, r2, r3
 8001ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	705a      	strb	r2, [r3, #1]
 8001ae2:	e00d      	b.n	8001b00 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ae4:	1cfb      	adds	r3, r7, #3
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	0013      	movs	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	189b      	adds	r3, r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	3369      	adds	r3, #105	; 0x69
 8001af2:	33ff      	adds	r3, #255	; 0xff
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	18d3      	adds	r3, r2, r3
 8001af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b06:	1cfb      	adds	r3, r7, #3
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2207      	movs	r2, #7
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	23aa      	movs	r3, #170	; 0xaa
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_PCD_EP_SetStall+0x8c>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e011      	b.n	8001b48 <HAL_PCD_EP_SetStall+0xb0>
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	23aa      	movs	r3, #170	; 0xaa
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	0011      	movs	r1, r2
 8001b36:	0018      	movs	r0, r3
 8001b38:	f004 fd88 	bl	800664c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	23aa      	movs	r3, #170	; 0xaa
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	2100      	movs	r1, #0
 8001b44:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b004      	add	sp, #16
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	000a      	movs	r2, r1
 8001b5a:	1cfb      	adds	r3, r7, #3
 8001b5c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b5e:	1cfb      	adds	r3, r7, #3
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	220f      	movs	r2, #15
 8001b64:	401a      	ands	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d901      	bls.n	8001b72 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e048      	b.n	8001c04 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b72:	1cfb      	adds	r3, r7, #3
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	da0f      	bge.n	8001b9c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b7c:	1cfb      	adds	r3, r7, #3
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2207      	movs	r2, #7
 8001b82:	4013      	ands	r3, r2
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	0013      	movs	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	189b      	adds	r3, r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	18d3      	adds	r3, r2, r3
 8001b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	705a      	strb	r2, [r3, #1]
 8001b9a:	e00f      	b.n	8001bbc <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9c:	1cfb      	adds	r3, r7, #3
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	189b      	adds	r3, r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	3369      	adds	r3, #105	; 0x69
 8001bae:	33ff      	adds	r3, #255	; 0xff
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	18d3      	adds	r3, r2, r3
 8001bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc2:	1cfb      	adds	r3, r7, #3
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	4013      	ands	r3, r2
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	23aa      	movs	r3, #170	; 0xaa
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_PCD_EP_ClrStall+0x90>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e011      	b.n	8001c04 <HAL_PCD_EP_ClrStall+0xb4>
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	23aa      	movs	r3, #170	; 0xaa
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	2101      	movs	r1, #1
 8001be8:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	0011      	movs	r1, r2
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f004 fd7a 	bl	80066ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	23aa      	movs	r3, #170	; 0xaa
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	2100      	movs	r1, #0
 8001c00:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b004      	add	sp, #16
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c0c:	b5b0      	push	{r4, r5, r7, lr}
 8001c0e:	b096      	sub	sp, #88	; 0x58
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c14:	f000 fbec 	bl	80023f0 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	204e      	movs	r0, #78	; 0x4e
 8001c1e:	183b      	adds	r3, r7, r0
 8001c20:	2144      	movs	r1, #68	; 0x44
 8001c22:	5a52      	ldrh	r2, [r2, r1]
 8001c24:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c26:	183b      	adds	r3, r7, r0
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	244d      	movs	r4, #77	; 0x4d
 8001c2e:	193b      	adds	r3, r7, r4
 8001c30:	210f      	movs	r1, #15
 8001c32:	400a      	ands	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001c36:	193b      	adds	r3, r7, r4
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d000      	beq.n	8001c40 <PCD_EP_ISR_Handler+0x34>
 8001c3e:	e18f      	b.n	8001f60 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c40:	183b      	adds	r3, r7, r0
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	2210      	movs	r2, #16
 8001c46:	4013      	ands	r3, r2
 8001c48:	d155      	bne.n	8001cf6 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	200e      	movs	r0, #14
 8001c54:	183b      	adds	r3, r7, r0
 8001c56:	49bb      	ldr	r1, [pc, #748]	; (8001f44 <PCD_EP_ISR_Handler+0x338>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	801a      	strh	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	183a      	adds	r2, r7, r0
 8001c62:	8812      	ldrh	r2, [r2, #0]
 8001c64:	49b8      	ldr	r1, [pc, #736]	; (8001f48 <PCD_EP_ISR_Handler+0x33c>)
 8001c66:	430a      	orrs	r2, r1
 8001c68:	b292      	uxth	r2, r2
 8001c6a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3328      	adds	r3, #40	; 0x28
 8001c70:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2250      	movs	r2, #80	; 0x50
 8001c78:	5a9b      	ldrh	r3, [r3, r2]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	18d2      	adds	r2, r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	18d3      	adds	r3, r2, r3
 8001c8c:	4aaf      	ldr	r2, [pc, #700]	; (8001f4c <PCD_EP_ISR_Handler+0x340>)
 8001c8e:	4694      	mov	ip, r2
 8001c90:	4463      	add	r3, ip
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	059b      	lsls	r3, r3, #22
 8001c96:	0d9a      	lsrs	r2, r3, #22
 8001c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	18d2      	adds	r2, r2, r3
 8001ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2100      	movs	r1, #0
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f006 fc04 	bl	80084bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2224      	movs	r2, #36	; 0x24
 8001cb8:	5c9b      	ldrb	r3, [r3, r2]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <PCD_EP_ISR_Handler+0xb8>
 8001cc0:	f000 fb96 	bl	80023f0 <PCD_EP_ISR_Handler+0x7e4>
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <PCD_EP_ISR_Handler+0xc4>
 8001ccc:	f000 fb90 	bl	80023f0 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2224      	movs	r2, #36	; 0x24
 8001cd4:	5c9b      	ldrb	r3, [r3, r2]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	4252      	negs	r2, r2
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	b291      	uxth	r1, r2
 8001ce6:	224c      	movs	r2, #76	; 0x4c
 8001ce8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2224      	movs	r2, #36	; 0x24
 8001cee:	2100      	movs	r1, #0
 8001cf0:	5499      	strb	r1, [r3, r2]
 8001cf2:	f000 fb7d 	bl	80023f0 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3369      	adds	r3, #105	; 0x69
 8001cfa:	33ff      	adds	r3, #255	; 0xff
 8001cfc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	214a      	movs	r1, #74	; 0x4a
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	8812      	ldrh	r2, [r2, #0]
 8001d08:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	881a      	ldrh	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4013      	ands	r3, r2
 8001d14:	d037      	beq.n	8001d86 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2250      	movs	r2, #80	; 0x50
 8001d1c:	5a9b      	ldrh	r3, [r3, r2]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	001a      	movs	r2, r3
 8001d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	18d2      	adds	r2, r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	18d3      	adds	r3, r2, r3
 8001d30:	4a87      	ldr	r2, [pc, #540]	; (8001f50 <PCD_EP_ISR_Handler+0x344>)
 8001d32:	4694      	mov	ip, r2
 8001d34:	4463      	add	r3, ip
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	059b      	lsls	r3, r3, #22
 8001d3a:	0d9a      	lsrs	r2, r3, #22
 8001d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	22ac      	movs	r2, #172	; 0xac
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	1899      	adds	r1, r3, r2
 8001d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d52:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	f004 fdfc 	bl	8006952 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	2010      	movs	r0, #16
 8001d64:	183b      	adds	r3, r7, r0
 8001d66:	497b      	ldr	r1, [pc, #492]	; (8001f54 <PCD_EP_ISR_Handler+0x348>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	801a      	strh	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	183a      	adds	r2, r7, r0
 8001d72:	8812      	ldrh	r2, [r2, #0]
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	430a      	orrs	r2, r1
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f006 fb66 	bl	8008450 <HAL_PCD_SetupStageCallback>
 8001d84:	e334      	b.n	80023f0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d86:	234a      	movs	r3, #74	; 0x4a
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	5e9b      	ldrsh	r3, [r3, r2]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db00      	blt.n	8001d94 <PCD_EP_ISR_Handler+0x188>
 8001d92:	e32d      	b.n	80023f0 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	201e      	movs	r0, #30
 8001d9e:	183b      	adds	r3, r7, r0
 8001da0:	496c      	ldr	r1, [pc, #432]	; (8001f54 <PCD_EP_ISR_Handler+0x348>)
 8001da2:	400a      	ands	r2, r1
 8001da4:	801a      	strh	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	183a      	adds	r2, r7, r0
 8001dac:	8812      	ldrh	r2, [r2, #0]
 8001dae:	2180      	movs	r1, #128	; 0x80
 8001db0:	430a      	orrs	r2, r1
 8001db2:	b292      	uxth	r2, r2
 8001db4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2250      	movs	r2, #80	; 0x50
 8001dbc:	5a9b      	ldrh	r3, [r3, r2]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	18d2      	adds	r2, r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	18d3      	adds	r3, r2, r3
 8001dd0:	4a5f      	ldr	r2, [pc, #380]	; (8001f50 <PCD_EP_ISR_Handler+0x344>)
 8001dd2:	4694      	mov	ip, r2
 8001dd4:	4463      	add	r3, ip
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	059b      	lsls	r3, r3, #22
 8001dda:	0d9a      	lsrs	r2, r3, #22
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dde:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01a      	beq.n	8001e1e <PCD_EP_ISR_Handler+0x212>
 8001de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d016      	beq.n	8001e1e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df6:	6959      	ldr	r1, [r3, #20]
 8001df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dfa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dfe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	f004 fda6 	bl	8006952 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	18d2      	adds	r2, r2, r3
 8001e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e12:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2100      	movs	r1, #0
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f006 fb2e 	bl	800847a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	214a      	movs	r1, #74	; 0x4a
 8001e24:	187b      	adds	r3, r7, r1
 8001e26:	8812      	ldrh	r2, [r2, #0]
 8001e28:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001e2a:	187b      	adds	r3, r7, r1
 8001e2c:	881a      	ldrh	r2, [r3, #0]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	4013      	ands	r3, r2
 8001e34:	d000      	beq.n	8001e38 <PCD_EP_ISR_Handler+0x22c>
 8001e36:	e2db      	b.n	80023f0 <PCD_EP_ISR_Handler+0x7e4>
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	881a      	ldrh	r2, [r3, #0]
 8001e3c:	23c0      	movs	r3, #192	; 0xc0
 8001e3e:	019b      	lsls	r3, r3, #6
 8001e40:	401a      	ands	r2, r3
 8001e42:	23c0      	movs	r3, #192	; 0xc0
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d100      	bne.n	8001e4c <PCD_EP_ISR_Handler+0x240>
 8001e4a:	e2d1      	b.n	80023f0 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2250      	movs	r2, #80	; 0x50
 8001e58:	5a9b      	ldrh	r3, [r3, r2]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	189b      	adds	r3, r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	4a3a      	ldr	r2, [pc, #232]	; (8001f50 <PCD_EP_ISR_Handler+0x344>)
 8001e68:	4694      	mov	ip, r2
 8001e6a:	4463      	add	r3, ip
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	059b      	lsls	r3, r3, #22
 8001e76:	0d9b      	lsrs	r3, r3, #22
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2b3e      	cmp	r3, #62	; 0x3e
 8001e84:	d91a      	bls.n	8001ebc <PCD_EP_ISR_Handler+0x2b0>
 8001e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	221f      	movs	r2, #31
 8001e94:	4013      	ands	r3, r2
 8001e96:	d102      	bne.n	8001e9e <PCD_EP_ISR_Handler+0x292>
 8001e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	029b      	lsls	r3, r3, #10
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	4313      	orrs	r3, r2
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4a25      	ldr	r2, [pc, #148]	; (8001f48 <PCD_EP_ISR_Handler+0x33c>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	801a      	strh	r2, [r3, #0]
 8001eba:	e023      	b.n	8001f04 <PCD_EP_ISR_Handler+0x2f8>
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d108      	bne.n	8001ed6 <PCD_EP_ISR_Handler+0x2ca>
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4a1f      	ldr	r2, [pc, #124]	; (8001f48 <PCD_EP_ISR_Handler+0x33c>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	801a      	strh	r2, [r3, #0]
 8001ed4:	e016      	b.n	8001f04 <PCD_EP_ISR_Handler+0x2f8>
 8001ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	085b      	lsrs	r3, r3, #1
 8001edc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d002      	beq.n	8001eee <PCD_EP_ISR_Handler+0x2e2>
 8001ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eea:	3301      	adds	r3, #1
 8001eec:	647b      	str	r3, [r7, #68]	; 0x44
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	029b      	lsls	r3, r3, #10
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	2012      	movs	r0, #18
 8001f0e:	183b      	adds	r3, r7, r0
 8001f10:	4911      	ldr	r1, [pc, #68]	; (8001f58 <PCD_EP_ISR_Handler+0x34c>)
 8001f12:	400a      	ands	r2, r1
 8001f14:	801a      	strh	r2, [r3, #0]
 8001f16:	183b      	adds	r3, r7, r0
 8001f18:	183a      	adds	r2, r7, r0
 8001f1a:	8812      	ldrh	r2, [r2, #0]
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0149      	lsls	r1, r1, #5
 8001f20:	404a      	eors	r2, r1
 8001f22:	801a      	strh	r2, [r3, #0]
 8001f24:	183b      	adds	r3, r7, r0
 8001f26:	183a      	adds	r2, r7, r0
 8001f28:	8812      	ldrh	r2, [r2, #0]
 8001f2a:	2180      	movs	r1, #128	; 0x80
 8001f2c:	0189      	lsls	r1, r1, #6
 8001f2e:	404a      	eors	r2, r1
 8001f30:	801a      	strh	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	183a      	adds	r2, r7, r0
 8001f38:	8812      	ldrh	r2, [r2, #0]
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <PCD_EP_ISR_Handler+0x350>)
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	801a      	strh	r2, [r3, #0]
 8001f42:	e255      	b.n	80023f0 <PCD_EP_ISR_Handler+0x7e4>
 8001f44:	ffff8f0f 	.word	0xffff8f0f
 8001f48:	ffff8000 	.word	0xffff8000
 8001f4c:	00000402 	.word	0x00000402
 8001f50:	00000406 	.word	0x00000406
 8001f54:	00000f8f 	.word	0x00000f8f
 8001f58:	ffffbf8f 	.word	0xffffbf8f
 8001f5c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	001a      	movs	r2, r3
 8001f66:	204d      	movs	r0, #77	; 0x4d
 8001f68:	183b      	adds	r3, r7, r0
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	18d2      	adds	r2, r2, r3
 8001f70:	214a      	movs	r1, #74	; 0x4a
 8001f72:	187b      	adds	r3, r7, r1
 8001f74:	8812      	ldrh	r2, [r2, #0]
 8001f76:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	5e9b      	ldrsh	r3, [r3, r2]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db00      	blt.n	8001f84 <PCD_EP_ISR_Handler+0x378>
 8001f82:	e0fa      	b.n	800217a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	001a      	movs	r2, r3
 8001f8a:	183b      	adds	r3, r7, r0
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	18d3      	adds	r3, r2, r3
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	2448      	movs	r4, #72	; 0x48
 8001f98:	193b      	adds	r3, r7, r4
 8001f9a:	49d1      	ldr	r1, [pc, #836]	; (80022e0 <PCD_EP_ISR_Handler+0x6d4>)
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	801a      	strh	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	001a      	movs	r2, r3
 8001fa6:	183b      	adds	r3, r7, r0
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	18d3      	adds	r3, r2, r3
 8001fae:	193a      	adds	r2, r7, r4
 8001fb0:	8812      	ldrh	r2, [r2, #0]
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	b292      	uxth	r2, r2
 8001fb8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fba:	183b      	adds	r3, r7, r0
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	0013      	movs	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	189b      	adds	r3, r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	3369      	adds	r3, #105	; 0x69
 8001fc8:	33ff      	adds	r3, #255	; 0xff
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	18d3      	adds	r3, r2, r3
 8001fce:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd2:	7b1b      	ldrb	r3, [r3, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d125      	bne.n	8002024 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2250      	movs	r2, #80	; 0x50
 8001fde:	5a9b      	ldrh	r3, [r3, r2]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	001a      	movs	r2, r3
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	18d2      	adds	r2, r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	18d3      	adds	r3, r2, r3
 8001ff2:	4abc      	ldr	r2, [pc, #752]	; (80022e4 <PCD_EP_ISR_Handler+0x6d8>)
 8001ff4:	4694      	mov	ip, r2
 8001ff6:	4463      	add	r3, ip
 8001ff8:	881a      	ldrh	r2, [r3, #0]
 8001ffa:	2450      	movs	r4, #80	; 0x50
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	0592      	lsls	r2, r2, #22
 8002000:	0d92      	lsrs	r2, r2, #22
 8002002:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8002004:	193b      	adds	r3, r7, r4
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d100      	bne.n	800200e <PCD_EP_ISR_Handler+0x402>
 800200c:	e08d      	b.n	800212a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002014:	6959      	ldr	r1, [r3, #20]
 8002016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002018:	88da      	ldrh	r2, [r3, #6]
 800201a:	193b      	adds	r3, r7, r4
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	f004 fc98 	bl	8006952 <USB_ReadPMA>
 8002022:	e082      	b.n	800212a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002026:	78db      	ldrb	r3, [r3, #3]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d10c      	bne.n	8002046 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800202c:	2350      	movs	r3, #80	; 0x50
 800202e:	18fc      	adds	r4, r7, r3
 8002030:	234a      	movs	r3, #74	; 0x4a
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	881a      	ldrh	r2, [r3, #0]
 8002036:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	0018      	movs	r0, r3
 800203c:	f000 f9ec 	bl	8002418 <HAL_PCD_EP_DB_Receive>
 8002040:	0003      	movs	r3, r0
 8002042:	8023      	strh	r3, [r4, #0]
 8002044:	e071      	b.n	800212a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	001a      	movs	r2, r3
 800204c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	18d3      	adds	r3, r2, r3
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b29a      	uxth	r2, r3
 8002058:	2052      	movs	r0, #82	; 0x52
 800205a:	183b      	adds	r3, r7, r0
 800205c:	49a2      	ldr	r1, [pc, #648]	; (80022e8 <PCD_EP_ISR_Handler+0x6dc>)
 800205e:	400a      	ands	r2, r1
 8002060:	801a      	strh	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	001a      	movs	r2, r3
 8002068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	18d3      	adds	r3, r2, r3
 8002070:	183a      	adds	r2, r7, r0
 8002072:	8812      	ldrh	r2, [r2, #0]
 8002074:	499d      	ldr	r1, [pc, #628]	; (80022ec <PCD_EP_ISR_Handler+0x6e0>)
 8002076:	430a      	orrs	r2, r1
 8002078:	b292      	uxth	r2, r2
 800207a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	001a      	movs	r2, r3
 8002082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	18d3      	adds	r3, r2, r3
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	001a      	movs	r2, r3
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	01db      	lsls	r3, r3, #7
 8002094:	4013      	ands	r3, r2
 8002096:	d024      	beq.n	80020e2 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2250      	movs	r2, #80	; 0x50
 800209e:	5a9b      	ldrh	r3, [r3, r2]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	001a      	movs	r2, r3
 80020a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	18d2      	adds	r2, r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	18d3      	adds	r3, r2, r3
 80020b2:	4a8f      	ldr	r2, [pc, #572]	; (80022f0 <PCD_EP_ISR_Handler+0x6e4>)
 80020b4:	4694      	mov	ip, r2
 80020b6:	4463      	add	r3, ip
 80020b8:	881a      	ldrh	r2, [r3, #0]
 80020ba:	2450      	movs	r4, #80	; 0x50
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	0592      	lsls	r2, r2, #22
 80020c0:	0d92      	lsrs	r2, r2, #22
 80020c2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80020c4:	193b      	adds	r3, r7, r4
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d02e      	beq.n	800212a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d2:	6959      	ldr	r1, [r3, #20]
 80020d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d6:	891a      	ldrh	r2, [r3, #8]
 80020d8:	193b      	adds	r3, r7, r4
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	f004 fc39 	bl	8006952 <USB_ReadPMA>
 80020e0:	e023      	b.n	800212a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2250      	movs	r2, #80	; 0x50
 80020e8:	5a9b      	ldrh	r3, [r3, r2]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	001a      	movs	r2, r3
 80020ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	18d2      	adds	r2, r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	18d3      	adds	r3, r2, r3
 80020fc:	4a79      	ldr	r2, [pc, #484]	; (80022e4 <PCD_EP_ISR_Handler+0x6d8>)
 80020fe:	4694      	mov	ip, r2
 8002100:	4463      	add	r3, ip
 8002102:	881a      	ldrh	r2, [r3, #0]
 8002104:	2450      	movs	r4, #80	; 0x50
 8002106:	193b      	adds	r3, r7, r4
 8002108:	0592      	lsls	r2, r2, #22
 800210a:	0d92      	lsrs	r2, r2, #22
 800210c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800210e:	193b      	adds	r3, r7, r4
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800211c:	6959      	ldr	r1, [r3, #20]
 800211e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002120:	895a      	ldrh	r2, [r3, #10]
 8002122:	193b      	adds	r3, r7, r4
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	f004 fc14 	bl	8006952 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800212a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	2150      	movs	r1, #80	; 0x50
 8002130:	187b      	adds	r3, r7, r1
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	18d2      	adds	r2, r2, r3
 8002136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002138:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800213a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	187b      	adds	r3, r7, r1
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	18d2      	adds	r2, r2, r3
 8002144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002146:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <PCD_EP_ISR_Handler+0x550>
 8002150:	187b      	adds	r3, r7, r1
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	429a      	cmp	r2, r3
 800215a:	d207      	bcs.n	800216c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800215c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	0011      	movs	r1, r2
 8002164:	0018      	movs	r0, r3
 8002166:	f006 f988 	bl	800847a <HAL_PCD_DataOutStageCallback>
 800216a:	e006      	b.n	800217a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002172:	0011      	movs	r1, r2
 8002174:	0018      	movs	r0, r3
 8002176:	f003 f931 	bl	80053dc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800217a:	244a      	movs	r4, #74	; 0x4a
 800217c:	193b      	adds	r3, r7, r4
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	4013      	ands	r3, r2
 8002184:	d100      	bne.n	8002188 <PCD_EP_ISR_Handler+0x57c>
 8002186:	e133      	b.n	80023f0 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002188:	204d      	movs	r0, #77	; 0x4d
 800218a:	183b      	adds	r3, r7, r0
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	0013      	movs	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	189b      	adds	r3, r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	18d3      	adds	r3, r2, r3
 800219c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	001a      	movs	r2, r3
 80021a4:	183b      	adds	r3, r7, r0
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	18d3      	adds	r3, r2, r3
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	2542      	movs	r5, #66	; 0x42
 80021b2:	197b      	adds	r3, r7, r5
 80021b4:	494f      	ldr	r1, [pc, #316]	; (80022f4 <PCD_EP_ISR_Handler+0x6e8>)
 80021b6:	400a      	ands	r2, r1
 80021b8:	801a      	strh	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	001a      	movs	r2, r3
 80021c0:	183b      	adds	r3, r7, r0
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	18d3      	adds	r3, r2, r3
 80021c8:	197a      	adds	r2, r7, r5
 80021ca:	8812      	ldrh	r2, [r2, #0]
 80021cc:	494a      	ldr	r1, [pc, #296]	; (80022f8 <PCD_EP_ISR_Handler+0x6ec>)
 80021ce:	430a      	orrs	r2, r1
 80021d0:	b292      	uxth	r2, r2
 80021d2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80021d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d6:	78db      	ldrb	r3, [r3, #3]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d000      	beq.n	80021de <PCD_EP_ISR_Handler+0x5d2>
 80021dc:	e0af      	b.n	800233e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80021de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80021e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e6:	7b1b      	ldrb	r3, [r3, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d100      	bne.n	80021ee <PCD_EP_ISR_Handler+0x5e2>
 80021ec:	e09f      	b.n	800232e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021ee:	193b      	adds	r3, r7, r4
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	2240      	movs	r2, #64	; 0x40
 80021f4:	4013      	ands	r3, r2
 80021f6:	d046      	beq.n	8002286 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d125      	bne.n	800224c <PCD_EP_ISR_Handler+0x640>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2250      	movs	r2, #80	; 0x50
 800220c:	5a9b      	ldrh	r3, [r3, r2]
 800220e:	b29b      	uxth	r3, r3
 8002210:	001a      	movs	r2, r3
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	189b      	adds	r3, r3, r2
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
 8002218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	00da      	lsls	r2, r3, #3
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	18d3      	adds	r3, r2, r3
 8002222:	4a33      	ldr	r2, [pc, #204]	; (80022f0 <PCD_EP_ISR_Handler+0x6e4>)
 8002224:	4694      	mov	ip, r2
 8002226:	4463      	add	r3, ip
 8002228:	623b      	str	r3, [r7, #32]
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	059b      	lsls	r3, r3, #22
 8002232:	0d9b      	lsrs	r3, r3, #22
 8002234:	b29a      	uxth	r2, r3
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	801a      	strh	r2, [r3, #0]
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4a2d      	ldr	r2, [pc, #180]	; (80022f8 <PCD_EP_ISR_Handler+0x6ec>)
 8002242:	4313      	orrs	r3, r2
 8002244:	b29a      	uxth	r2, r3
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	801a      	strh	r2, [r3, #0]
 800224a:	e070      	b.n	800232e <PCD_EP_ISR_Handler+0x722>
 800224c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d16c      	bne.n	800232e <PCD_EP_ISR_Handler+0x722>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2250      	movs	r2, #80	; 0x50
 8002260:	5a9b      	ldrh	r3, [r3, r2]
 8002262:	b29b      	uxth	r3, r3
 8002264:	001a      	movs	r2, r3
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	189b      	adds	r3, r3, r2
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	00da      	lsls	r2, r3, #3
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	18d3      	adds	r3, r2, r3
 8002276:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <PCD_EP_ISR_Handler+0x6e4>)
 8002278:	4694      	mov	ip, r2
 800227a:	4463      	add	r3, ip
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
 800227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002280:	2200      	movs	r2, #0
 8002282:	801a      	strh	r2, [r3, #0]
 8002284:	e053      	b.n	800232e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228e:	785b      	ldrb	r3, [r3, #1]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d133      	bne.n	80022fc <PCD_EP_ISR_Handler+0x6f0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2250      	movs	r2, #80	; 0x50
 80022a0:	5a9b      	ldrh	r3, [r3, r2]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	001a      	movs	r2, r3
 80022a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a8:	189b      	adds	r3, r3, r2
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
 80022ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	00da      	lsls	r2, r3, #3
 80022b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b4:	18d3      	adds	r3, r2, r3
 80022b6:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <PCD_EP_ISR_Handler+0x6d8>)
 80022b8:	4694      	mov	ip, r2
 80022ba:	4463      	add	r3, ip
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	059b      	lsls	r3, r3, #22
 80022c6:	0d9b      	lsrs	r3, r3, #22
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	801a      	strh	r2, [r3, #0]
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <PCD_EP_ISR_Handler+0x6ec>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	b29a      	uxth	r2, r3
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	801a      	strh	r2, [r3, #0]
 80022de:	e026      	b.n	800232e <PCD_EP_ISR_Handler+0x722>
 80022e0:	00000f8f 	.word	0x00000f8f
 80022e4:	00000406 	.word	0x00000406
 80022e8:	ffff8f8f 	.word	0xffff8f8f
 80022ec:	ffff80c0 	.word	0xffff80c0
 80022f0:	00000402 	.word	0x00000402
 80022f4:	ffff8f0f 	.word	0xffff8f0f
 80022f8:	ffff8000 	.word	0xffff8000
 80022fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fe:	785b      	ldrb	r3, [r3, #1]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d114      	bne.n	800232e <PCD_EP_ISR_Handler+0x722>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2250      	movs	r2, #80	; 0x50
 800230a:	5a9b      	ldrh	r3, [r3, r2]
 800230c:	b29b      	uxth	r3, r3
 800230e:	001a      	movs	r2, r3
 8002310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002312:	189b      	adds	r3, r3, r2
 8002314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	00da      	lsls	r2, r3, #3
 800231c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231e:	18d3      	adds	r3, r2, r3
 8002320:	4a3b      	ldr	r2, [pc, #236]	; (8002410 <PCD_EP_ISR_Handler+0x804>)
 8002322:	4694      	mov	ip, r2
 8002324:	4463      	add	r3, ip
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
 8002328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232a:	2200      	movs	r2, #0
 800232c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800232e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002330:	781a      	ldrb	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0011      	movs	r1, r2
 8002336:	0018      	movs	r0, r3
 8002338:	f006 f8c0 	bl	80084bc <HAL_PCD_DataInStageCallback>
 800233c:	e058      	b.n	80023f0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800233e:	234a      	movs	r3, #74	; 0x4a
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	881a      	ldrh	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4013      	ands	r3, r2
 800234a:	d149      	bne.n	80023e0 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2250      	movs	r2, #80	; 0x50
 8002352:	5a9b      	ldrh	r3, [r3, r2]
 8002354:	b29b      	uxth	r3, r3
 8002356:	001a      	movs	r2, r3
 8002358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	18d2      	adds	r2, r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	18d3      	adds	r3, r2, r3
 8002366:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <PCD_EP_ISR_Handler+0x808>)
 8002368:	4694      	mov	ip, r2
 800236a:	4463      	add	r3, ip
 800236c:	881a      	ldrh	r2, [r3, #0]
 800236e:	2140      	movs	r1, #64	; 0x40
 8002370:	187b      	adds	r3, r7, r1
 8002372:	0592      	lsls	r2, r2, #22
 8002374:	0d92      	lsrs	r2, r2, #22
 8002376:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8002378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	187b      	adds	r3, r7, r1
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d907      	bls.n	8002394 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8002384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	187b      	adds	r3, r7, r1
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	1ad2      	subs	r2, r2, r3
 800238e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002390:	619a      	str	r2, [r3, #24]
 8002392:	e002      	b.n	800239a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8002394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800239a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0011      	movs	r1, r2
 80023aa:	0018      	movs	r0, r3
 80023ac:	f006 f886 	bl	80084bc <HAL_PCD_DataInStageCallback>
 80023b0:	e01e      	b.n	80023f0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80023b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	2140      	movs	r1, #64	; 0x40
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	18d2      	adds	r2, r2, r3
 80023be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80023c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c4:	69da      	ldr	r2, [r3, #28]
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	18d2      	adds	r2, r2, r3
 80023cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ce:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023d6:	0011      	movs	r1, r2
 80023d8:	0018      	movs	r0, r3
 80023da:	f002 ffff 	bl	80053dc <USB_EPStartXfer>
 80023de:	e007      	b.n	80023f0 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80023e0:	234a      	movs	r3, #74	; 0x4a
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	881a      	ldrh	r2, [r3, #0]
 80023e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0018      	movs	r0, r3
 80023ec:	f000 f930 	bl	8002650 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2244      	movs	r2, #68	; 0x44
 80023f6:	5a9b      	ldrh	r3, [r3, r2]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	da01      	bge.n	8002404 <PCD_EP_ISR_Handler+0x7f8>
 8002400:	f7ff fc0a 	bl	8001c18 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b016      	add	sp, #88	; 0x58
 800240c:	bdb0      	pop	{r4, r5, r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	00000406 	.word	0x00000406
 8002414:	00000402 	.word	0x00000402

08002418 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	1dbb      	adds	r3, r7, #6
 8002424:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002426:	1dbb      	adds	r3, r7, #6
 8002428:	881a      	ldrh	r2, [r3, #0]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	01db      	lsls	r3, r3, #7
 800242e:	4013      	ands	r3, r2
 8002430:	d100      	bne.n	8002434 <HAL_PCD_EP_DB_Receive+0x1c>
 8002432:	e07d      	b.n	8002530 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2250      	movs	r2, #80	; 0x50
 800243a:	5a9b      	ldrh	r3, [r3, r2]
 800243c:	b29b      	uxth	r3, r3
 800243e:	001a      	movs	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	18d2      	adds	r2, r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	18d3      	adds	r3, r2, r3
 800244e:	4a7a      	ldr	r2, [pc, #488]	; (8002638 <HAL_PCD_EP_DB_Receive+0x220>)
 8002450:	4694      	mov	ip, r2
 8002452:	4463      	add	r3, ip
 8002454:	881a      	ldrh	r2, [r3, #0]
 8002456:	211a      	movs	r1, #26
 8002458:	187b      	adds	r3, r7, r1
 800245a:	0592      	lsls	r2, r2, #22
 800245c:	0d92      	lsrs	r2, r2, #22
 800245e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	699a      	ldr	r2, [r3, #24]
 8002464:	187b      	adds	r3, r7, r1
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d307      	bcc.n	800247c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	699a      	ldr	r2, [r3, #24]
 8002470:	187b      	adds	r3, r7, r1
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	1ad2      	subs	r2, r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	619a      	str	r2, [r3, #24]
 800247a:	e002      	b.n	8002482 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d121      	bne.n	80024ce <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	001a      	movs	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	18d3      	adds	r3, r2, r3
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29a      	uxth	r2, r3
 800249c:	2018      	movs	r0, #24
 800249e:	183b      	adds	r3, r7, r0
 80024a0:	4966      	ldr	r1, [pc, #408]	; (800263c <HAL_PCD_EP_DB_Receive+0x224>)
 80024a2:	400a      	ands	r2, r1
 80024a4:	801a      	strh	r2, [r3, #0]
 80024a6:	183b      	adds	r3, r7, r0
 80024a8:	183a      	adds	r2, r7, r0
 80024aa:	8812      	ldrh	r2, [r2, #0]
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	0189      	lsls	r1, r1, #6
 80024b0:	404a      	eors	r2, r1
 80024b2:	801a      	strh	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	001a      	movs	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	18d3      	adds	r3, r2, r3
 80024c2:	183a      	adds	r2, r7, r0
 80024c4:	8812      	ldrh	r2, [r2, #0]
 80024c6:	495e      	ldr	r1, [pc, #376]	; (8002640 <HAL_PCD_EP_DB_Receive+0x228>)
 80024c8:	430a      	orrs	r2, r1
 80024ca:	b292      	uxth	r2, r2
 80024cc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024ce:	1dbb      	adds	r3, r7, #6
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	2240      	movs	r2, #64	; 0x40
 80024d4:	4013      	ands	r3, r2
 80024d6:	d01a      	beq.n	800250e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	001a      	movs	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	18d3      	adds	r3, r2, r3
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	2016      	movs	r0, #22
 80024ec:	183b      	adds	r3, r7, r0
 80024ee:	4955      	ldr	r1, [pc, #340]	; (8002644 <HAL_PCD_EP_DB_Receive+0x22c>)
 80024f0:	400a      	ands	r2, r1
 80024f2:	801a      	strh	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	001a      	movs	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	18d3      	adds	r3, r2, r3
 8002502:	183a      	adds	r2, r7, r0
 8002504:	8812      	ldrh	r2, [r2, #0]
 8002506:	4950      	ldr	r1, [pc, #320]	; (8002648 <HAL_PCD_EP_DB_Receive+0x230>)
 8002508:	430a      	orrs	r2, r1
 800250a:	b292      	uxth	r2, r2
 800250c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800250e:	241a      	movs	r4, #26
 8002510:	193b      	adds	r3, r7, r4
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d100      	bne.n	800251a <HAL_PCD_EP_DB_Receive+0x102>
 8002518:	e086      	b.n	8002628 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	6959      	ldr	r1, [r3, #20]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	891a      	ldrh	r2, [r3, #8]
 8002526:	193b      	adds	r3, r7, r4
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	f004 fa12 	bl	8006952 <USB_ReadPMA>
 800252e:	e07b      	b.n	8002628 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2250      	movs	r2, #80	; 0x50
 8002536:	5a9b      	ldrh	r3, [r3, r2]
 8002538:	b29b      	uxth	r3, r3
 800253a:	001a      	movs	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	18d2      	adds	r2, r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	18d3      	adds	r3, r2, r3
 800254a:	4a40      	ldr	r2, [pc, #256]	; (800264c <HAL_PCD_EP_DB_Receive+0x234>)
 800254c:	4694      	mov	ip, r2
 800254e:	4463      	add	r3, ip
 8002550:	881a      	ldrh	r2, [r3, #0]
 8002552:	211a      	movs	r1, #26
 8002554:	187b      	adds	r3, r7, r1
 8002556:	0592      	lsls	r2, r2, #22
 8002558:	0d92      	lsrs	r2, r2, #22
 800255a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	699a      	ldr	r2, [r3, #24]
 8002560:	187b      	adds	r3, r7, r1
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d307      	bcc.n	8002578 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	187b      	adds	r3, r7, r1
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	1ad2      	subs	r2, r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	619a      	str	r2, [r3, #24]
 8002576:	e002      	b.n	800257e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d121      	bne.n	80025ca <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	001a      	movs	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	18d3      	adds	r3, r2, r3
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29a      	uxth	r2, r3
 8002598:	201e      	movs	r0, #30
 800259a:	183b      	adds	r3, r7, r0
 800259c:	4927      	ldr	r1, [pc, #156]	; (800263c <HAL_PCD_EP_DB_Receive+0x224>)
 800259e:	400a      	ands	r2, r1
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	183b      	adds	r3, r7, r0
 80025a4:	183a      	adds	r2, r7, r0
 80025a6:	8812      	ldrh	r2, [r2, #0]
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	0189      	lsls	r1, r1, #6
 80025ac:	404a      	eors	r2, r1
 80025ae:	801a      	strh	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	001a      	movs	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	18d3      	adds	r3, r2, r3
 80025be:	183a      	adds	r2, r7, r0
 80025c0:	8812      	ldrh	r2, [r2, #0]
 80025c2:	491f      	ldr	r1, [pc, #124]	; (8002640 <HAL_PCD_EP_DB_Receive+0x228>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	b292      	uxth	r2, r2
 80025c8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025ca:	1dbb      	adds	r3, r7, #6
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	2240      	movs	r2, #64	; 0x40
 80025d0:	4013      	ands	r3, r2
 80025d2:	d11a      	bne.n	800260a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	001a      	movs	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	18d3      	adds	r3, r2, r3
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	201c      	movs	r0, #28
 80025e8:	183b      	adds	r3, r7, r0
 80025ea:	4916      	ldr	r1, [pc, #88]	; (8002644 <HAL_PCD_EP_DB_Receive+0x22c>)
 80025ec:	400a      	ands	r2, r1
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	001a      	movs	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	18d3      	adds	r3, r2, r3
 80025fe:	183a      	adds	r2, r7, r0
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	4911      	ldr	r1, [pc, #68]	; (8002648 <HAL_PCD_EP_DB_Receive+0x230>)
 8002604:	430a      	orrs	r2, r1
 8002606:	b292      	uxth	r2, r2
 8002608:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800260a:	241a      	movs	r4, #26
 800260c:	193b      	adds	r3, r7, r4
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d009      	beq.n	8002628 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	6959      	ldr	r1, [r3, #20]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	895a      	ldrh	r2, [r3, #10]
 8002620:	193b      	adds	r3, r7, r4
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	f004 f995 	bl	8006952 <USB_ReadPMA>
    }
  }

  return count;
 8002628:	231a      	movs	r3, #26
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	881b      	ldrh	r3, [r3, #0]
}
 800262e:	0018      	movs	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	b009      	add	sp, #36	; 0x24
 8002634:	bd90      	pop	{r4, r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	00000402 	.word	0x00000402
 800263c:	ffffbf8f 	.word	0xffffbf8f
 8002640:	ffff8080 	.word	0xffff8080
 8002644:	ffff8f8f 	.word	0xffff8f8f
 8002648:	ffff80c0 	.word	0xffff80c0
 800264c:	00000406 	.word	0x00000406

08002650 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b0a4      	sub	sp, #144	; 0x90
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	1dbb      	adds	r3, r7, #6
 800265c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800265e:	1dbb      	adds	r3, r7, #6
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	2240      	movs	r2, #64	; 0x40
 8002664:	4013      	ands	r3, r2
 8002666:	d100      	bne.n	800266a <HAL_PCD_EP_DB_Transmit+0x1a>
 8002668:	e1e4      	b.n	8002a34 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2250      	movs	r2, #80	; 0x50
 8002670:	5a9b      	ldrh	r3, [r3, r2]
 8002672:	b29b      	uxth	r3, r3
 8002674:	001a      	movs	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	18d2      	adds	r2, r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	18d3      	adds	r3, r2, r3
 8002684:	4ad0      	ldr	r2, [pc, #832]	; (80029c8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002686:	4694      	mov	ip, r2
 8002688:	4463      	add	r3, ip
 800268a:	881a      	ldrh	r2, [r3, #0]
 800268c:	2186      	movs	r1, #134	; 0x86
 800268e:	187b      	adds	r3, r7, r1
 8002690:	0592      	lsls	r2, r2, #22
 8002692:	0d92      	lsrs	r2, r2, #22
 8002694:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	187b      	adds	r3, r7, r1
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d907      	bls.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	1ad2      	subs	r2, r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	619a      	str	r2, [r3, #24]
 80026b0:	e002      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d000      	beq.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x72>
 80026c0:	e0b5      	b.n	800282e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	785b      	ldrb	r3, [r3, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d125      	bne.n	8002716 <HAL_PCD_EP_DB_Transmit+0xc6>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2250      	movs	r2, #80	; 0x50
 80026d6:	5a9b      	ldrh	r3, [r3, r2]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	001a      	movs	r2, r3
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	189b      	adds	r3, r3, r2
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	00da      	lsls	r2, r3, #3
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	18d3      	adds	r3, r2, r3
 80026ec:	4ab6      	ldr	r2, [pc, #728]	; (80029c8 <HAL_PCD_EP_DB_Transmit+0x378>)
 80026ee:	4694      	mov	ip, r2
 80026f0:	4463      	add	r3, ip
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	059b      	lsls	r3, r3, #22
 80026fc:	0d9b      	lsrs	r3, r3, #22
 80026fe:	b29a      	uxth	r2, r3
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	4ab0      	ldr	r2, [pc, #704]	; (80029cc <HAL_PCD_EP_DB_Transmit+0x37c>)
 800270c:	4313      	orrs	r3, r2
 800270e:	b29a      	uxth	r2, r3
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	801a      	strh	r2, [r3, #0]
 8002714:	e01b      	b.n	800274e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	785b      	ldrb	r3, [r3, #1]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d117      	bne.n	800274e <HAL_PCD_EP_DB_Transmit+0xfe>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2250      	movs	r2, #80	; 0x50
 800272a:	5a9b      	ldrh	r3, [r3, r2]
 800272c:	b29b      	uxth	r3, r3
 800272e:	001a      	movs	r2, r3
 8002730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002732:	189b      	adds	r3, r3, r2
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	00da      	lsls	r2, r3, #3
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	18d3      	adds	r3, r2, r3
 8002740:	4aa1      	ldr	r2, [pc, #644]	; (80029c8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002742:	4694      	mov	ip, r2
 8002744:	4463      	add	r3, ip
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	2200      	movs	r2, #0
 800274c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d125      	bne.n	80027a8 <HAL_PCD_EP_DB_Transmit+0x158>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2250      	movs	r2, #80	; 0x50
 8002768:	5a9b      	ldrh	r3, [r3, r2]
 800276a:	b29b      	uxth	r3, r3
 800276c:	001a      	movs	r2, r3
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	189b      	adds	r3, r3, r2
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	00da      	lsls	r2, r3, #3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	18d3      	adds	r3, r2, r3
 800277e:	4a94      	ldr	r2, [pc, #592]	; (80029d0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8002780:	4694      	mov	ip, r2
 8002782:	4463      	add	r3, ip
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	059b      	lsls	r3, r3, #22
 800278e:	0d9b      	lsrs	r3, r3, #22
 8002790:	b29a      	uxth	r2, r3
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4a8b      	ldr	r2, [pc, #556]	; (80029cc <HAL_PCD_EP_DB_Transmit+0x37c>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	e018      	b.n	80027da <HAL_PCD_EP_DB_Transmit+0x18a>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	785b      	ldrb	r3, [r3, #1]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d114      	bne.n	80027da <HAL_PCD_EP_DB_Transmit+0x18a>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2250      	movs	r2, #80	; 0x50
 80027b6:	5a9b      	ldrh	r3, [r3, r2]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	001a      	movs	r2, r3
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	189b      	adds	r3, r3, r2
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	00da      	lsls	r2, r3, #3
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	18d3      	adds	r3, r2, r3
 80027cc:	4a80      	ldr	r2, [pc, #512]	; (80029d0 <HAL_PCD_EP_DB_Transmit+0x380>)
 80027ce:	4694      	mov	ip, r2
 80027d0:	4463      	add	r3, ip
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	2200      	movs	r2, #0
 80027d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	0011      	movs	r1, r2
 80027e2:	0018      	movs	r0, r3
 80027e4:	f005 fe6a 	bl	80084bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027e8:	1dbb      	adds	r3, r7, #6
 80027ea:	881a      	ldrh	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	01db      	lsls	r3, r3, #7
 80027f0:	4013      	ands	r3, r2
 80027f2:	d100      	bne.n	80027f6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80027f4:	e309      	b.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	001a      	movs	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	18d3      	adds	r3, r2, r3
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29a      	uxth	r2, r3
 8002808:	2016      	movs	r0, #22
 800280a:	183b      	adds	r3, r7, r0
 800280c:	4971      	ldr	r1, [pc, #452]	; (80029d4 <HAL_PCD_EP_DB_Transmit+0x384>)
 800280e:	400a      	ands	r2, r1
 8002810:	801a      	strh	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	001a      	movs	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	18d3      	adds	r3, r2, r3
 8002820:	183a      	adds	r2, r7, r0
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	496c      	ldr	r1, [pc, #432]	; (80029d8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8002826:	430a      	orrs	r2, r1
 8002828:	b292      	uxth	r2, r2
 800282a:	801a      	strh	r2, [r3, #0]
 800282c:	e2ed      	b.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800282e:	1dbb      	adds	r3, r7, #6
 8002830:	881a      	ldrh	r2, [r3, #0]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	01db      	lsls	r3, r3, #7
 8002836:	4013      	ands	r3, r2
 8002838:	d01a      	beq.n	8002870 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	001a      	movs	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	18d3      	adds	r3, r2, r3
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29a      	uxth	r2, r3
 800284c:	208a      	movs	r0, #138	; 0x8a
 800284e:	183b      	adds	r3, r7, r0
 8002850:	4960      	ldr	r1, [pc, #384]	; (80029d4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002852:	400a      	ands	r2, r1
 8002854:	801a      	strh	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	001a      	movs	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	18d3      	adds	r3, r2, r3
 8002864:	183a      	adds	r2, r7, r0
 8002866:	8812      	ldrh	r2, [r2, #0]
 8002868:	495b      	ldr	r1, [pc, #364]	; (80029d8 <HAL_PCD_EP_DB_Transmit+0x388>)
 800286a:	430a      	orrs	r2, r1
 800286c:	b292      	uxth	r2, r2
 800286e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	5c9b      	ldrb	r3, [r3, r2]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d000      	beq.n	800287c <HAL_PCD_EP_DB_Transmit+0x22c>
 800287a:	e2c6      	b.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	2186      	movs	r1, #134	; 0x86
 8002882:	187b      	adds	r3, r7, r1
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	18d2      	adds	r2, r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	69da      	ldr	r2, [r3, #28]
 8002890:	187b      	adds	r3, r7, r1
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	18d2      	adds	r2, r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	6a1a      	ldr	r2, [r3, #32]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d30c      	bcc.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	218c      	movs	r1, #140	; 0x8c
 80028ac:	187a      	adds	r2, r7, r1
 80028ae:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	6a1a      	ldr	r2, [r3, #32]
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	1ad2      	subs	r2, r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	621a      	str	r2, [r3, #32]
 80028be:	e01a      	b.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80028c8:	2386      	movs	r3, #134	; 0x86
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	228c      	movs	r2, #140	; 0x8c
 80028d0:	18ba      	adds	r2, r7, r2
 80028d2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2224      	movs	r2, #36	; 0x24
 80028d8:	2100      	movs	r1, #0
 80028da:	5499      	strb	r1, [r3, r2]
 80028dc:	e00b      	b.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2224      	movs	r2, #36	; 0x24
 80028e2:	2100      	movs	r1, #0
 80028e4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	228c      	movs	r2, #140	; 0x8c
 80028ec:	18ba      	adds	r2, r7, r2
 80028ee:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2200      	movs	r2, #0
 80028f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	785b      	ldrb	r3, [r3, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d000      	beq.n	8002900 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80028fe:	e06d      	b.n	80029dc <HAL_PCD_EP_DB_Transmit+0x38c>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2250      	movs	r2, #80	; 0x50
 800290c:	5a9b      	ldrh	r3, [r3, r2]
 800290e:	b29b      	uxth	r3, r3
 8002910:	001a      	movs	r2, r3
 8002912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002914:	189b      	adds	r3, r3, r2
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	00da      	lsls	r2, r3, #3
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	18d3      	adds	r3, r2, r3
 8002922:	4a29      	ldr	r2, [pc, #164]	; (80029c8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002924:	4694      	mov	ip, r2
 8002926:	4463      	add	r3, ip
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
 800292a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	059b      	lsls	r3, r3, #22
 8002932:	0d9b      	lsrs	r3, r3, #22
 8002934:	b29a      	uxth	r2, r3
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	801a      	strh	r2, [r3, #0]
 800293a:	228c      	movs	r2, #140	; 0x8c
 800293c:	18bb      	adds	r3, r7, r2
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b3e      	cmp	r3, #62	; 0x3e
 8002942:	d91a      	bls.n	800297a <HAL_PCD_EP_DB_Transmit+0x32a>
 8002944:	18bb      	adds	r3, r7, r2
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	64bb      	str	r3, [r7, #72]	; 0x48
 800294c:	18bb      	adds	r3, r7, r2
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	221f      	movs	r2, #31
 8002952:	4013      	ands	r3, r2
 8002954:	d102      	bne.n	800295c <HAL_PCD_EP_DB_Transmit+0x30c>
 8002956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002958:	3b01      	subs	r3, #1
 800295a:	64bb      	str	r3, [r7, #72]	; 0x48
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b29a      	uxth	r2, r3
 8002962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002964:	b29b      	uxth	r3, r3
 8002966:	029b      	lsls	r3, r3, #10
 8002968:	b29b      	uxth	r3, r3
 800296a:	4313      	orrs	r3, r2
 800296c:	b29b      	uxth	r3, r3
 800296e:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002970:	4313      	orrs	r3, r2
 8002972:	b29a      	uxth	r2, r3
 8002974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002976:	801a      	strh	r2, [r3, #0]
 8002978:	e04f      	b.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800297a:	238c      	movs	r3, #140	; 0x8c
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d108      	bne.n	8002996 <HAL_PCD_EP_DB_Transmit+0x346>
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_PCD_EP_DB_Transmit+0x37c>)
 800298c:	4313      	orrs	r3, r2
 800298e:	b29a      	uxth	r2, r3
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	801a      	strh	r2, [r3, #0]
 8002994:	e041      	b.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002996:	228c      	movs	r2, #140	; 0x8c
 8002998:	18bb      	adds	r3, r7, r2
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	64bb      	str	r3, [r7, #72]	; 0x48
 80029a0:	18bb      	adds	r3, r7, r2
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2201      	movs	r2, #1
 80029a6:	4013      	ands	r3, r2
 80029a8:	d002      	beq.n	80029b0 <HAL_PCD_EP_DB_Transmit+0x360>
 80029aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ac:	3301      	adds	r3, #1
 80029ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4313      	orrs	r3, r2
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	801a      	strh	r2, [r3, #0]
 80029c6:	e028      	b.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80029c8:	00000402 	.word	0x00000402
 80029cc:	ffff8000 	.word	0xffff8000
 80029d0:	00000406 	.word	0x00000406
 80029d4:	ffff8f8f 	.word	0xffff8f8f
 80029d8:	ffffc080 	.word	0xffffc080
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	785b      	ldrb	r3, [r3, #1]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d11a      	bne.n	8002a1a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2250      	movs	r2, #80	; 0x50
 80029f0:	5a9b      	ldrh	r3, [r3, r2]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	001a      	movs	r2, r3
 80029f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f8:	189b      	adds	r3, r3, r2
 80029fa:	647b      	str	r3, [r7, #68]	; 0x44
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	00da      	lsls	r2, r3, #3
 8002a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a04:	18d3      	adds	r3, r2, r3
 8002a06:	4adb      	ldr	r2, [pc, #876]	; (8002d74 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002a08:	4694      	mov	ip, r2
 8002a0a:	4463      	add	r3, ip
 8002a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a0e:	238c      	movs	r3, #140	; 0x8c
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a18:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	6959      	ldr	r1, [r3, #20]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	891a      	ldrh	r2, [r3, #8]
 8002a26:	238c      	movs	r3, #140	; 0x8c
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f003 ff47 	bl	80068c0 <USB_WritePMA>
 8002a32:	e1ea      	b.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2250      	movs	r2, #80	; 0x50
 8002a3a:	5a9b      	ldrh	r3, [r3, r2]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	001a      	movs	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	18d2      	adds	r2, r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	18d3      	adds	r3, r2, r3
 8002a4e:	4aca      	ldr	r2, [pc, #808]	; (8002d78 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002a50:	4694      	mov	ip, r2
 8002a52:	4463      	add	r3, ip
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	2186      	movs	r1, #134	; 0x86
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	0592      	lsls	r2, r2, #22
 8002a5c:	0d92      	lsrs	r2, r2, #22
 8002a5e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	699a      	ldr	r2, [r3, #24]
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d307      	bcc.n	8002a7c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	699a      	ldr	r2, [r3, #24]
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	1ad2      	subs	r2, r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	619a      	str	r2, [r3, #24]
 8002a7a:	e002      	b.n	8002a82 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d000      	beq.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x43c>
 8002a8a:	e0bb      	b.n	8002c04 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d125      	bne.n	8002ae0 <HAL_PCD_EP_DB_Transmit+0x490>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2250      	movs	r2, #80	; 0x50
 8002aa0:	5a9b      	ldrh	r3, [r3, r2]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	001a      	movs	r2, r3
 8002aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aa8:	189b      	adds	r3, r3, r2
 8002aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	00da      	lsls	r2, r3, #3
 8002ab2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ab4:	18d3      	adds	r3, r2, r3
 8002ab6:	4aaf      	ldr	r2, [pc, #700]	; (8002d74 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002ab8:	4694      	mov	ip, r2
 8002aba:	4463      	add	r3, ip
 8002abc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	059b      	lsls	r3, r3, #22
 8002ac6:	0d9b      	lsrs	r3, r3, #22
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	4aa9      	ldr	r2, [pc, #676]	; (8002d7c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002adc:	801a      	strh	r2, [r3, #0]
 8002ade:	e01b      	b.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	785b      	ldrb	r3, [r3, #1]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d117      	bne.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	667b      	str	r3, [r7, #100]	; 0x64
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2250      	movs	r2, #80	; 0x50
 8002af4:	5a9b      	ldrh	r3, [r3, r2]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	001a      	movs	r2, r3
 8002afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002afc:	189b      	adds	r3, r3, r2
 8002afe:	667b      	str	r3, [r7, #100]	; 0x64
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	00da      	lsls	r2, r3, #3
 8002b06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b08:	18d3      	adds	r3, r2, r3
 8002b0a:	4a9a      	ldr	r2, [pc, #616]	; (8002d74 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002b0c:	4694      	mov	ip, r2
 8002b0e:	4463      	add	r3, ip
 8002b10:	663b      	str	r3, [r7, #96]	; 0x60
 8002b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b14:	2200      	movs	r2, #0
 8002b16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	677b      	str	r3, [r7, #116]	; 0x74
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d12b      	bne.n	8002b7e <HAL_PCD_EP_DB_Transmit+0x52e>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2250      	movs	r2, #80	; 0x50
 8002b32:	5a9b      	ldrh	r3, [r3, r2]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	001a      	movs	r2, r3
 8002b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3a:	189b      	adds	r3, r3, r2
 8002b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	00da      	lsls	r2, r3, #3
 8002b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b46:	18d3      	adds	r3, r2, r3
 8002b48:	4a8b      	ldr	r2, [pc, #556]	; (8002d78 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	4463      	add	r3, ip
 8002b4e:	2180      	movs	r1, #128	; 0x80
 8002b50:	187a      	adds	r2, r7, r1
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	059b      	lsls	r3, r3, #22
 8002b5e:	0d9b      	lsrs	r3, r3, #22
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	187b      	adds	r3, r7, r1
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4a82      	ldr	r2, [pc, #520]	; (8002d7c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	187b      	adds	r3, r7, r1
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	e018      	b.n	8002bb0 <HAL_PCD_EP_DB_Transmit+0x560>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	785b      	ldrb	r3, [r3, #1]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d114      	bne.n	8002bb0 <HAL_PCD_EP_DB_Transmit+0x560>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2250      	movs	r2, #80	; 0x50
 8002b8c:	5a9b      	ldrh	r3, [r3, r2]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	001a      	movs	r2, r3
 8002b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b94:	189b      	adds	r3, r3, r2
 8002b96:	677b      	str	r3, [r7, #116]	; 0x74
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	00da      	lsls	r2, r3, #3
 8002b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba0:	18d3      	adds	r3, r2, r3
 8002ba2:	4a75      	ldr	r2, [pc, #468]	; (8002d78 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002ba4:	4694      	mov	ip, r2
 8002ba6:	4463      	add	r3, ip
 8002ba8:	673b      	str	r3, [r7, #112]	; 0x70
 8002baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bac:	2200      	movs	r2, #0
 8002bae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	781a      	ldrb	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f005 fc7f 	bl	80084bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bbe:	1dbb      	adds	r3, r7, #6
 8002bc0:	881a      	ldrh	r2, [r3, #0]
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	01db      	lsls	r3, r3, #7
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d000      	beq.n	8002bcc <HAL_PCD_EP_DB_Transmit+0x57c>
 8002bca:	e11e      	b.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	18d3      	adds	r3, r2, r3
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	2088      	movs	r0, #136	; 0x88
 8002be0:	183b      	adds	r3, r7, r0
 8002be2:	4967      	ldr	r1, [pc, #412]	; (8002d80 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002be4:	400a      	ands	r2, r1
 8002be6:	801a      	strh	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	001a      	movs	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	18d3      	adds	r3, r2, r3
 8002bf6:	183a      	adds	r2, r7, r0
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	4962      	ldr	r1, [pc, #392]	; (8002d84 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	b292      	uxth	r2, r2
 8002c00:	801a      	strh	r2, [r3, #0]
 8002c02:	e102      	b.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c04:	1dbb      	adds	r3, r7, #6
 8002c06:	881a      	ldrh	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	01db      	lsls	r3, r3, #7
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d11a      	bne.n	8002c46 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	001a      	movs	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	18d3      	adds	r3, r2, r3
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	204e      	movs	r0, #78	; 0x4e
 8002c24:	183b      	adds	r3, r7, r0
 8002c26:	4956      	ldr	r1, [pc, #344]	; (8002d80 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002c28:	400a      	ands	r2, r1
 8002c2a:	801a      	strh	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	001a      	movs	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	18d3      	adds	r3, r2, r3
 8002c3a:	183a      	adds	r2, r7, r0
 8002c3c:	8812      	ldrh	r2, [r2, #0]
 8002c3e:	4951      	ldr	r1, [pc, #324]	; (8002d84 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002c40:	430a      	orrs	r2, r1
 8002c42:	b292      	uxth	r2, r2
 8002c44:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2224      	movs	r2, #36	; 0x24
 8002c4a:	5c9b      	ldrb	r3, [r3, r2]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d000      	beq.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x602>
 8002c50:	e0db      	b.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	2186      	movs	r1, #134	; 0x86
 8002c58:	187b      	adds	r3, r7, r1
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	18d2      	adds	r2, r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	18d2      	adds	r2, r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	6a1a      	ldr	r2, [r3, #32]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d30c      	bcc.n	8002c96 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	218c      	movs	r1, #140	; 0x8c
 8002c82:	187a      	adds	r2, r7, r1
 8002c84:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	6a1a      	ldr	r2, [r3, #32]
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	1ad2      	subs	r2, r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	621a      	str	r2, [r3, #32]
 8002c94:	e01a      	b.n	8002ccc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8002c9e:	2386      	movs	r3, #134	; 0x86
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	228c      	movs	r2, #140	; 0x8c
 8002ca6:	18ba      	adds	r2, r7, r2
 8002ca8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2224      	movs	r2, #36	; 0x24
 8002cae:	2100      	movs	r1, #0
 8002cb0:	5499      	strb	r1, [r3, r2]
 8002cb2:	e00b      	b.n	8002ccc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	228c      	movs	r2, #140	; 0x8c
 8002cba:	18ba      	adds	r2, r7, r2
 8002cbc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2224      	movs	r2, #36	; 0x24
 8002cc8:	2100      	movs	r1, #0
 8002cca:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	657b      	str	r3, [r7, #84]	; 0x54
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d000      	beq.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x68c>
 8002cda:	e06e      	b.n	8002dba <HAL_PCD_EP_DB_Transmit+0x76a>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2250      	movs	r2, #80	; 0x50
 8002ce8:	5a9b      	ldrh	r3, [r3, r2]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	001a      	movs	r2, r3
 8002cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf0:	189b      	adds	r3, r3, r2
 8002cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	00da      	lsls	r2, r3, #3
 8002cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfc:	18d3      	adds	r3, r2, r3
 8002cfe:	4a1e      	ldr	r2, [pc, #120]	; (8002d78 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002d00:	4694      	mov	ip, r2
 8002d02:	4463      	add	r3, ip
 8002d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	059b      	lsls	r3, r3, #22
 8002d0e:	0d9b      	lsrs	r3, r3, #22
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d14:	801a      	strh	r2, [r3, #0]
 8002d16:	228c      	movs	r2, #140	; 0x8c
 8002d18:	18bb      	adds	r3, r7, r2
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d1e:	d91a      	bls.n	8002d56 <HAL_PCD_EP_DB_Transmit+0x706>
 8002d20:	18bb      	adds	r3, r7, r2
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d28:	18bb      	adds	r3, r7, r2
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	221f      	movs	r2, #31
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d102      	bne.n	8002d38 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8002d32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d34:	3b01      	subs	r3, #1
 8002d36:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	029b      	lsls	r3, r3, #10
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4313      	orrs	r3, r2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	4a0c      	ldr	r2, [pc, #48]	; (8002d7c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	e04d      	b.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002d56:	238c      	movs	r3, #140	; 0x8c
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d113      	bne.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x738>
 8002d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d6e:	801a      	strh	r2, [r3, #0]
 8002d70:	e03f      	b.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	00000402 	.word	0x00000402
 8002d78:	00000406 	.word	0x00000406
 8002d7c:	ffff8000 	.word	0xffff8000
 8002d80:	ffff8f8f 	.word	0xffff8f8f
 8002d84:	ffffc080 	.word	0xffffc080
 8002d88:	228c      	movs	r2, #140	; 0x8c
 8002d8a:	18bb      	adds	r3, r7, r2
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d92:	18bb      	adds	r3, r7, r2
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2201      	movs	r2, #1
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d002      	beq.n	8002da2 <HAL_PCD_EP_DB_Transmit+0x752>
 8002d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d9e:	3301      	adds	r3, #1
 8002da0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	029b      	lsls	r3, r3, #10
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4313      	orrs	r3, r2
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db6:	801a      	strh	r2, [r3, #0]
 8002db8:	e01b      	b.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d117      	bne.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2250      	movs	r2, #80	; 0x50
 8002dc8:	5a9b      	ldrh	r3, [r3, r2]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	001a      	movs	r2, r3
 8002dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd0:	189b      	adds	r3, r3, r2
 8002dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	00da      	lsls	r2, r3, #3
 8002dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ddc:	18d3      	adds	r3, r2, r3
 8002dde:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <HAL_PCD_EP_DB_Transmit+0x814>)
 8002de0:	4694      	mov	ip, r2
 8002de2:	4463      	add	r3, ip
 8002de4:	653b      	str	r3, [r7, #80]	; 0x50
 8002de6:	238c      	movs	r3, #140	; 0x8c
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	6959      	ldr	r1, [r3, #20]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	895a      	ldrh	r2, [r3, #10]
 8002dfe:	238c      	movs	r3, #140	; 0x8c
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f003 fd5b 	bl	80068c0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	001a      	movs	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	18d3      	adds	r3, r2, r3
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	2014      	movs	r0, #20
 8002e1e:	183b      	adds	r3, r7, r0
 8002e20:	4911      	ldr	r1, [pc, #68]	; (8002e68 <HAL_PCD_EP_DB_Transmit+0x818>)
 8002e22:	400a      	ands	r2, r1
 8002e24:	801a      	strh	r2, [r3, #0]
 8002e26:	183b      	adds	r3, r7, r0
 8002e28:	183a      	adds	r2, r7, r0
 8002e2a:	8812      	ldrh	r2, [r2, #0]
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	404a      	eors	r2, r1
 8002e30:	801a      	strh	r2, [r3, #0]
 8002e32:	183b      	adds	r3, r7, r0
 8002e34:	183a      	adds	r2, r7, r0
 8002e36:	8812      	ldrh	r2, [r2, #0]
 8002e38:	2120      	movs	r1, #32
 8002e3a:	404a      	eors	r2, r1
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	001a      	movs	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	18d3      	adds	r3, r2, r3
 8002e4c:	183a      	adds	r2, r7, r0
 8002e4e:	8812      	ldrh	r2, [r2, #0]
 8002e50:	4906      	ldr	r1, [pc, #24]	; (8002e6c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8002e52:	430a      	orrs	r2, r1
 8002e54:	b292      	uxth	r2, r2
 8002e56:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b024      	add	sp, #144	; 0x90
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	00000406 	.word	0x00000406
 8002e68:	ffff8fbf 	.word	0xffff8fbf
 8002e6c:	ffff8080 	.word	0xffff8080

08002e70 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	0008      	movs	r0, r1
 8002e7a:	0011      	movs	r1, r2
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	240a      	movs	r4, #10
 8002e80:	193b      	adds	r3, r7, r4
 8002e82:	1c02      	adds	r2, r0, #0
 8002e84:	801a      	strh	r2, [r3, #0]
 8002e86:	2308      	movs	r3, #8
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	1c0a      	adds	r2, r1, #0
 8002e8c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e8e:	0021      	movs	r1, r4
 8002e90:	187b      	adds	r3, r7, r1
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	4013      	ands	r3, r2
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	189b      	adds	r3, r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	18d3      	adds	r3, r2, r3
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eb8:	230a      	movs	r3, #10
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	881a      	ldrh	r2, [r3, #0]
 8002ebe:	0013      	movs	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	3369      	adds	r3, #105	; 0x69
 8002ec8:	33ff      	adds	r3, #255	; 0xff
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	18d3      	adds	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d107      	bne.n	8002eea <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2200      	movs	r2, #0
 8002ede:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	80da      	strh	r2, [r3, #6]
 8002ee8:	e00b      	b.n	8002f02 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2201      	movs	r2, #1
 8002eee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	0c1b      	lsrs	r3, r3, #16
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b007      	add	sp, #28
 8002f0a:	bd90      	pop	{r4, r7, pc}

08002f0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	23ba      	movs	r3, #186	; 0xba
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	2101      	movs	r1, #1
 8002f22:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	23b8      	movs	r3, #184	; 0xb8
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2254      	movs	r2, #84	; 0x54
 8002f32:	5a9b      	ldrh	r3, [r3, r2]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2201      	movs	r2, #1
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	b299      	uxth	r1, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2254      	movs	r2, #84	; 0x54
 8002f40:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2254      	movs	r2, #84	; 0x54
 8002f46:	5a9b      	ldrh	r3, [r3, r2]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	b299      	uxth	r1, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2254      	movs	r2, #84	; 0x54
 8002f54:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b004      	add	sp, #16
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	000a      	movs	r2, r1
 8002f6a:	1cfb      	adds	r3, r7, #3
 8002f6c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b002      	add	sp, #8
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f78:	b5b0      	push	{r4, r5, r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f000 fbaf 	bl	80036ea <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8c:	4bcf      	ldr	r3, [pc, #828]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	220c      	movs	r2, #12
 8002f92:	4013      	ands	r3, r2
 8002f94:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f96:	4bcd      	ldr	r3, [pc, #820]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	025b      	lsls	r3, r3, #9
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d100      	bne.n	8002fae <HAL_RCC_OscConfig+0x36>
 8002fac:	e07e      	b.n	80030ac <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d007      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d112      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x68>
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	025b      	lsls	r3, r3, #9
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d10d      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc4:	4bc1      	ldr	r3, [pc, #772]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	029b      	lsls	r3, r3, #10
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d100      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x5a>
 8002fd0:	e06b      	b.n	80030aa <HAL_RCC_OscConfig+0x132>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d167      	bne.n	80030aa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f000 fb85 	bl	80036ea <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	025b      	lsls	r3, r3, #9
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_OscConfig+0x84>
 8002fec:	4bb7      	ldr	r3, [pc, #732]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4bb6      	ldr	r3, [pc, #728]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	0249      	lsls	r1, r1, #9
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e027      	b.n	800304c <HAL_RCC_OscConfig+0xd4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	23a0      	movs	r3, #160	; 0xa0
 8003002:	02db      	lsls	r3, r3, #11
 8003004:	429a      	cmp	r2, r3
 8003006:	d10e      	bne.n	8003026 <HAL_RCC_OscConfig+0xae>
 8003008:	4bb0      	ldr	r3, [pc, #704]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4baf      	ldr	r3, [pc, #700]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	02c9      	lsls	r1, r1, #11
 8003012:	430a      	orrs	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	4bad      	ldr	r3, [pc, #692]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4bac      	ldr	r3, [pc, #688]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	0249      	lsls	r1, r1, #9
 8003020:	430a      	orrs	r2, r1
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e012      	b.n	800304c <HAL_RCC_OscConfig+0xd4>
 8003026:	4ba9      	ldr	r3, [pc, #676]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4ba8      	ldr	r3, [pc, #672]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 800302c:	49a8      	ldr	r1, [pc, #672]	; (80032d0 <HAL_RCC_OscConfig+0x358>)
 800302e:	400a      	ands	r2, r1
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	4ba6      	ldr	r3, [pc, #664]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	025b      	lsls	r3, r3, #9
 800303a:	4013      	ands	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4ba2      	ldr	r3, [pc, #648]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4ba1      	ldr	r3, [pc, #644]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003046:	49a3      	ldr	r1, [pc, #652]	; (80032d4 <HAL_RCC_OscConfig+0x35c>)
 8003048:	400a      	ands	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d015      	beq.n	8003080 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fd fe9c 	bl	8000d90 <HAL_GetTick>
 8003058:	0003      	movs	r3, r0
 800305a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800305c:	e009      	b.n	8003072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800305e:	f7fd fe97 	bl	8000d90 <HAL_GetTick>
 8003062:	0002      	movs	r2, r0
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b64      	cmp	r3, #100	; 0x64
 800306a:	d902      	bls.n	8003072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	f000 fb3c 	bl	80036ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003072:	4b96      	ldr	r3, [pc, #600]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	029b      	lsls	r3, r3, #10
 800307a:	4013      	ands	r3, r2
 800307c:	d0ef      	beq.n	800305e <HAL_RCC_OscConfig+0xe6>
 800307e:	e015      	b.n	80030ac <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fd fe86 	bl	8000d90 <HAL_GetTick>
 8003084:	0003      	movs	r3, r0
 8003086:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800308a:	f7fd fe81 	bl	8000d90 <HAL_GetTick>
 800308e:	0002      	movs	r2, r0
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b64      	cmp	r3, #100	; 0x64
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e326      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800309c:	4b8b      	ldr	r3, [pc, #556]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	029b      	lsls	r3, r3, #10
 80030a4:	4013      	ands	r3, r2
 80030a6:	d1f0      	bne.n	800308a <HAL_RCC_OscConfig+0x112>
 80030a8:	e000      	b.n	80030ac <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2202      	movs	r2, #2
 80030b2:	4013      	ands	r3, r2
 80030b4:	d100      	bne.n	80030b8 <HAL_RCC_OscConfig+0x140>
 80030b6:	e08b      	b.n	80031d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	2b0c      	cmp	r3, #12
 80030c8:	d13e      	bne.n	8003148 <HAL_RCC_OscConfig+0x1d0>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d13b      	bne.n	8003148 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80030d0:	4b7e      	ldr	r3, [pc, #504]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2204      	movs	r2, #4
 80030d6:	4013      	ands	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_RCC_OscConfig+0x16c>
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e302      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b79      	ldr	r3, [pc, #484]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a7b      	ldr	r2, [pc, #492]	; (80032d8 <HAL_RCC_OscConfig+0x360>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	021a      	lsls	r2, r3, #8
 80030f4:	4b75      	ldr	r3, [pc, #468]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80030fa:	4b74      	ldr	r3, [pc, #464]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2209      	movs	r2, #9
 8003100:	4393      	bics	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	4b71      	ldr	r3, [pc, #452]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800310c:	f000 fc40 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8003110:	0001      	movs	r1, r0
 8003112:	4b6e      	ldr	r3, [pc, #440]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	220f      	movs	r2, #15
 800311a:	4013      	ands	r3, r2
 800311c:	4a6f      	ldr	r2, [pc, #444]	; (80032dc <HAL_RCC_OscConfig+0x364>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	000a      	movs	r2, r1
 8003122:	40da      	lsrs	r2, r3
 8003124:	4b6e      	ldr	r3, [pc, #440]	; (80032e0 <HAL_RCC_OscConfig+0x368>)
 8003126:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003128:	4b6e      	ldr	r3, [pc, #440]	; (80032e4 <HAL_RCC_OscConfig+0x36c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2513      	movs	r5, #19
 800312e:	197c      	adds	r4, r7, r5
 8003130:	0018      	movs	r0, r3
 8003132:	f7fd fde7 	bl	8000d04 <HAL_InitTick>
 8003136:	0003      	movs	r3, r0
 8003138:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800313a:	197b      	adds	r3, r7, r5
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d046      	beq.n	80031d0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003142:	197b      	adds	r3, r7, r5
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	e2d0      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d027      	beq.n	800319e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800314e:	4b5f      	ldr	r3, [pc, #380]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2209      	movs	r2, #9
 8003154:	4393      	bics	r3, r2
 8003156:	0019      	movs	r1, r3
 8003158:	4b5c      	ldr	r3, [pc, #368]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fd fe16 	bl	8000d90 <HAL_GetTick>
 8003164:	0003      	movs	r3, r0
 8003166:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316a:	f7fd fe11 	bl	8000d90 <HAL_GetTick>
 800316e:	0002      	movs	r2, r0
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e2b6      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800317c:	4b53      	ldr	r3, [pc, #332]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2204      	movs	r2, #4
 8003182:	4013      	ands	r3, r2
 8003184:	d0f1      	beq.n	800316a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003186:	4b51      	ldr	r3, [pc, #324]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4a53      	ldr	r2, [pc, #332]	; (80032d8 <HAL_RCC_OscConfig+0x360>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	021a      	lsls	r2, r3, #8
 8003196:	4b4d      	ldr	r3, [pc, #308]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	e018      	b.n	80031d0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319e:	4b4b      	ldr	r3, [pc, #300]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4b4a      	ldr	r3, [pc, #296]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	438a      	bics	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031aa:	f7fd fdf1 	bl	8000d90 <HAL_GetTick>
 80031ae:	0003      	movs	r3, r0
 80031b0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fd fdec 	bl	8000d90 <HAL_GetTick>
 80031b8:	0002      	movs	r2, r0
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e291      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031c6:	4b41      	ldr	r3, [pc, #260]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2204      	movs	r2, #4
 80031cc:	4013      	ands	r3, r2
 80031ce:	d1f1      	bne.n	80031b4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2210      	movs	r2, #16
 80031d6:	4013      	ands	r3, r2
 80031d8:	d100      	bne.n	80031dc <HAL_RCC_OscConfig+0x264>
 80031da:	e0a1      	b.n	8003320 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d140      	bne.n	8003264 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031e2:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4013      	ands	r3, r2
 80031ec:	d005      	beq.n	80031fa <HAL_RCC_OscConfig+0x282>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e277      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a3a      	ldr	r2, [pc, #232]	; (80032e8 <HAL_RCC_OscConfig+0x370>)
 8003200:	4013      	ands	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003208:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800320e:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	0a19      	lsrs	r1, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	061a      	lsls	r2, r3, #24
 800321c:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	0b5b      	lsrs	r3, r3, #13
 8003228:	3301      	adds	r3, #1
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	0212      	lsls	r2, r2, #8
 800322e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003230:	4b26      	ldr	r3, [pc, #152]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	210f      	movs	r1, #15
 8003238:	400b      	ands	r3, r1
 800323a:	4928      	ldr	r1, [pc, #160]	; (80032dc <HAL_RCC_OscConfig+0x364>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003240:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <HAL_RCC_OscConfig+0x368>)
 8003242:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCC_OscConfig+0x36c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2513      	movs	r5, #19
 800324a:	197c      	adds	r4, r7, r5
 800324c:	0018      	movs	r0, r3
 800324e:	f7fd fd59 	bl	8000d04 <HAL_InitTick>
 8003252:	0003      	movs	r3, r0
 8003254:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003256:	197b      	adds	r3, r7, r5
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d060      	beq.n	8003320 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800325e:	197b      	adds	r3, r7, r5
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	e242      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d03f      	beq.n	80032ec <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800326c:	4b17      	ldr	r3, [pc, #92]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b16      	ldr	r3, [pc, #88]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003272:	2180      	movs	r1, #128	; 0x80
 8003274:	0049      	lsls	r1, r1, #1
 8003276:	430a      	orrs	r2, r1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fd fd89 	bl	8000d90 <HAL_GetTick>
 800327e:	0003      	movs	r3, r0
 8003280:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003284:	f7fd fd84 	bl	8000d90 <HAL_GetTick>
 8003288:	0002      	movs	r2, r0
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e229      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4013      	ands	r3, r2
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_RCC_OscConfig+0x370>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	0019      	movs	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	0a19      	lsrs	r1, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	061a      	lsls	r2, r3, #24
 80032c4:	4b01      	ldr	r3, [pc, #4]	; (80032cc <HAL_RCC_OscConfig+0x354>)
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	e029      	b.n	8003320 <HAL_RCC_OscConfig+0x3a8>
 80032cc:	40021000 	.word	0x40021000
 80032d0:	fffeffff 	.word	0xfffeffff
 80032d4:	fffbffff 	.word	0xfffbffff
 80032d8:	ffffe0ff 	.word	0xffffe0ff
 80032dc:	08008b1c 	.word	0x08008b1c
 80032e0:	20000000 	.word	0x20000000
 80032e4:	20000004 	.word	0x20000004
 80032e8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032ec:	4bbd      	ldr	r3, [pc, #756]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4bbc      	ldr	r3, [pc, #752]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 80032f2:	49bd      	ldr	r1, [pc, #756]	; (80035e8 <HAL_RCC_OscConfig+0x670>)
 80032f4:	400a      	ands	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fd fd4a 	bl	8000d90 <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003302:	f7fd fd45 	bl	8000d90 <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e1ea      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003314:	4bb3      	ldr	r3, [pc, #716]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4013      	ands	r3, r2
 800331e:	d1f0      	bne.n	8003302 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2208      	movs	r2, #8
 8003326:	4013      	ands	r3, r2
 8003328:	d036      	beq.n	8003398 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d019      	beq.n	8003366 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003332:	4bac      	ldr	r3, [pc, #688]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003336:	4bab      	ldr	r3, [pc, #684]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003338:	2101      	movs	r1, #1
 800333a:	430a      	orrs	r2, r1
 800333c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333e:	f7fd fd27 	bl	8000d90 <HAL_GetTick>
 8003342:	0003      	movs	r3, r0
 8003344:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003348:	f7fd fd22 	bl	8000d90 <HAL_GetTick>
 800334c:	0002      	movs	r2, r0
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e1c7      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800335a:	4ba2      	ldr	r3, [pc, #648]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 800335c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335e:	2202      	movs	r2, #2
 8003360:	4013      	ands	r3, r2
 8003362:	d0f1      	beq.n	8003348 <HAL_RCC_OscConfig+0x3d0>
 8003364:	e018      	b.n	8003398 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003366:	4b9f      	ldr	r3, [pc, #636]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800336a:	4b9e      	ldr	r3, [pc, #632]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 800336c:	2101      	movs	r1, #1
 800336e:	438a      	bics	r2, r1
 8003370:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003372:	f7fd fd0d 	bl	8000d90 <HAL_GetTick>
 8003376:	0003      	movs	r3, r0
 8003378:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800337c:	f7fd fd08 	bl	8000d90 <HAL_GetTick>
 8003380:	0002      	movs	r2, r0
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e1ad      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800338e:	4b95      	ldr	r3, [pc, #596]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003392:	2202      	movs	r2, #2
 8003394:	4013      	ands	r3, r2
 8003396:	d1f1      	bne.n	800337c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2204      	movs	r2, #4
 800339e:	4013      	ands	r3, r2
 80033a0:	d100      	bne.n	80033a4 <HAL_RCC_OscConfig+0x42c>
 80033a2:	e0ae      	b.n	8003502 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a4:	2027      	movs	r0, #39	; 0x27
 80033a6:	183b      	adds	r3, r7, r0
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ac:	4b8d      	ldr	r3, [pc, #564]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	055b      	lsls	r3, r3, #21
 80033b4:	4013      	ands	r3, r2
 80033b6:	d109      	bne.n	80033cc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b8:	4b8a      	ldr	r3, [pc, #552]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 80033ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033bc:	4b89      	ldr	r3, [pc, #548]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	0549      	lsls	r1, r1, #21
 80033c2:	430a      	orrs	r2, r1
 80033c4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80033c6:	183b      	adds	r3, r7, r0
 80033c8:	2201      	movs	r2, #1
 80033ca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	4b87      	ldr	r3, [pc, #540]	; (80035ec <HAL_RCC_OscConfig+0x674>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	4013      	ands	r3, r2
 80033d6:	d11a      	bne.n	800340e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d8:	4b84      	ldr	r3, [pc, #528]	; (80035ec <HAL_RCC_OscConfig+0x674>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b83      	ldr	r3, [pc, #524]	; (80035ec <HAL_RCC_OscConfig+0x674>)
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	0049      	lsls	r1, r1, #1
 80033e2:	430a      	orrs	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fd fcd3 	bl	8000d90 <HAL_GetTick>
 80033ea:	0003      	movs	r3, r0
 80033ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7fd fcce 	bl	8000d90 <HAL_GetTick>
 80033f4:	0002      	movs	r2, r0
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e173      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003402:	4b7a      	ldr	r3, [pc, #488]	; (80035ec <HAL_RCC_OscConfig+0x674>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4013      	ands	r3, r2
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	429a      	cmp	r2, r3
 8003418:	d107      	bne.n	800342a <HAL_RCC_OscConfig+0x4b2>
 800341a:	4b72      	ldr	r3, [pc, #456]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 800341c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800341e:	4b71      	ldr	r3, [pc, #452]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003420:	2180      	movs	r1, #128	; 0x80
 8003422:	0049      	lsls	r1, r1, #1
 8003424:	430a      	orrs	r2, r1
 8003426:	651a      	str	r2, [r3, #80]	; 0x50
 8003428:	e031      	b.n	800348e <HAL_RCC_OscConfig+0x516>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x4d4>
 8003432:	4b6c      	ldr	r3, [pc, #432]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003434:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003436:	4b6b      	ldr	r3, [pc, #428]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003438:	496b      	ldr	r1, [pc, #428]	; (80035e8 <HAL_RCC_OscConfig+0x670>)
 800343a:	400a      	ands	r2, r1
 800343c:	651a      	str	r2, [r3, #80]	; 0x50
 800343e:	4b69      	ldr	r3, [pc, #420]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003440:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003442:	4b68      	ldr	r3, [pc, #416]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003444:	496a      	ldr	r1, [pc, #424]	; (80035f0 <HAL_RCC_OscConfig+0x678>)
 8003446:	400a      	ands	r2, r1
 8003448:	651a      	str	r2, [r3, #80]	; 0x50
 800344a:	e020      	b.n	800348e <HAL_RCC_OscConfig+0x516>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	23a0      	movs	r3, #160	; 0xa0
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	429a      	cmp	r2, r3
 8003456:	d10e      	bne.n	8003476 <HAL_RCC_OscConfig+0x4fe>
 8003458:	4b62      	ldr	r3, [pc, #392]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 800345a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800345c:	4b61      	ldr	r3, [pc, #388]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 800345e:	2180      	movs	r1, #128	; 0x80
 8003460:	00c9      	lsls	r1, r1, #3
 8003462:	430a      	orrs	r2, r1
 8003464:	651a      	str	r2, [r3, #80]	; 0x50
 8003466:	4b5f      	ldr	r3, [pc, #380]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800346a:	4b5e      	ldr	r3, [pc, #376]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	0049      	lsls	r1, r1, #1
 8003470:	430a      	orrs	r2, r1
 8003472:	651a      	str	r2, [r3, #80]	; 0x50
 8003474:	e00b      	b.n	800348e <HAL_RCC_OscConfig+0x516>
 8003476:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800347a:	4b5a      	ldr	r3, [pc, #360]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 800347c:	495a      	ldr	r1, [pc, #360]	; (80035e8 <HAL_RCC_OscConfig+0x670>)
 800347e:	400a      	ands	r2, r1
 8003480:	651a      	str	r2, [r3, #80]	; 0x50
 8003482:	4b58      	ldr	r3, [pc, #352]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003486:	4b57      	ldr	r3, [pc, #348]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003488:	4959      	ldr	r1, [pc, #356]	; (80035f0 <HAL_RCC_OscConfig+0x678>)
 800348a:	400a      	ands	r2, r1
 800348c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d015      	beq.n	80034c2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003496:	f7fd fc7b 	bl	8000d90 <HAL_GetTick>
 800349a:	0003      	movs	r3, r0
 800349c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800349e:	e009      	b.n	80034b4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fd fc76 	bl	8000d90 <HAL_GetTick>
 80034a4:	0002      	movs	r2, r0
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <HAL_RCC_OscConfig+0x67c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e11a      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034b4:	4b4b      	ldr	r3, [pc, #300]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 80034b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4013      	ands	r3, r2
 80034be:	d0ef      	beq.n	80034a0 <HAL_RCC_OscConfig+0x528>
 80034c0:	e014      	b.n	80034ec <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fd fc65 	bl	8000d90 <HAL_GetTick>
 80034c6:	0003      	movs	r3, r0
 80034c8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034ca:	e009      	b.n	80034e0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fd fc60 	bl	8000d90 <HAL_GetTick>
 80034d0:	0002      	movs	r2, r0
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	4a47      	ldr	r2, [pc, #284]	; (80035f4 <HAL_RCC_OscConfig+0x67c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e104      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034e0:	4b40      	ldr	r3, [pc, #256]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 80034e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4013      	ands	r3, r2
 80034ea:	d1ef      	bne.n	80034cc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034ec:	2327      	movs	r3, #39	; 0x27
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d105      	bne.n	8003502 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f6:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 80034f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fa:	4b3a      	ldr	r3, [pc, #232]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 80034fc:	493e      	ldr	r1, [pc, #248]	; (80035f8 <HAL_RCC_OscConfig+0x680>)
 80034fe:	400a      	ands	r2, r1
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2220      	movs	r2, #32
 8003508:	4013      	ands	r3, r2
 800350a:	d049      	beq.n	80035a0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d026      	beq.n	8003562 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003514:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	4b32      	ldr	r3, [pc, #200]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 800351a:	2101      	movs	r1, #1
 800351c:	430a      	orrs	r2, r1
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003524:	4b2f      	ldr	r3, [pc, #188]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003526:	2101      	movs	r1, #1
 8003528:	430a      	orrs	r2, r1
 800352a:	635a      	str	r2, [r3, #52]	; 0x34
 800352c:	4b33      	ldr	r3, [pc, #204]	; (80035fc <HAL_RCC_OscConfig+0x684>)
 800352e:	6a1a      	ldr	r2, [r3, #32]
 8003530:	4b32      	ldr	r3, [pc, #200]	; (80035fc <HAL_RCC_OscConfig+0x684>)
 8003532:	2180      	movs	r1, #128	; 0x80
 8003534:	0189      	lsls	r1, r1, #6
 8003536:	430a      	orrs	r2, r1
 8003538:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fd fc29 	bl	8000d90 <HAL_GetTick>
 800353e:	0003      	movs	r3, r0
 8003540:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003544:	f7fd fc24 	bl	8000d90 <HAL_GetTick>
 8003548:	0002      	movs	r2, r0
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0c9      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003556:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2202      	movs	r2, #2
 800355c:	4013      	ands	r3, r2
 800355e:	d0f1      	beq.n	8003544 <HAL_RCC_OscConfig+0x5cc>
 8003560:	e01e      	b.n	80035a0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003562:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	4b1f      	ldr	r3, [pc, #124]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003568:	2101      	movs	r1, #1
 800356a:	438a      	bics	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	4b23      	ldr	r3, [pc, #140]	; (80035fc <HAL_RCC_OscConfig+0x684>)
 8003570:	6a1a      	ldr	r2, [r3, #32]
 8003572:	4b22      	ldr	r3, [pc, #136]	; (80035fc <HAL_RCC_OscConfig+0x684>)
 8003574:	4922      	ldr	r1, [pc, #136]	; (8003600 <HAL_RCC_OscConfig+0x688>)
 8003576:	400a      	ands	r2, r1
 8003578:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fd fc09 	bl	8000d90 <HAL_GetTick>
 800357e:	0003      	movs	r3, r0
 8003580:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003584:	f7fd fc04 	bl	8000d90 <HAL_GetTick>
 8003588:	0002      	movs	r2, r0
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0a9      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003596:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2202      	movs	r2, #2
 800359c:	4013      	ands	r3, r2
 800359e:	d1f1      	bne.n	8003584 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d100      	bne.n	80035aa <HAL_RCC_OscConfig+0x632>
 80035a8:	e09e      	b.n	80036e8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	2b0c      	cmp	r3, #12
 80035ae:	d100      	bne.n	80035b2 <HAL_RCC_OscConfig+0x63a>
 80035b0:	e077      	b.n	80036a2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d158      	bne.n	800366c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_OscConfig+0x66c>)
 80035c0:	4910      	ldr	r1, [pc, #64]	; (8003604 <HAL_RCC_OscConfig+0x68c>)
 80035c2:	400a      	ands	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7fd fbe3 	bl	8000d90 <HAL_GetTick>
 80035ca:	0003      	movs	r3, r0
 80035cc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035ce:	e01b      	b.n	8003608 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fd fbde 	bl	8000d90 <HAL_GetTick>
 80035d4:	0002      	movs	r2, r0
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d914      	bls.n	8003608 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e083      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	40021000 	.word	0x40021000
 80035e8:	fffffeff 	.word	0xfffffeff
 80035ec:	40007000 	.word	0x40007000
 80035f0:	fffffbff 	.word	0xfffffbff
 80035f4:	00001388 	.word	0x00001388
 80035f8:	efffffff 	.word	0xefffffff
 80035fc:	40010000 	.word	0x40010000
 8003600:	ffffdfff 	.word	0xffffdfff
 8003604:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003608:	4b3a      	ldr	r3, [pc, #232]	; (80036f4 <HAL_RCC_OscConfig+0x77c>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	049b      	lsls	r3, r3, #18
 8003610:	4013      	ands	r3, r2
 8003612:	d1dd      	bne.n	80035d0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003614:	4b37      	ldr	r3, [pc, #220]	; (80036f4 <HAL_RCC_OscConfig+0x77c>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4a37      	ldr	r2, [pc, #220]	; (80036f8 <HAL_RCC_OscConfig+0x780>)
 800361a:	4013      	ands	r3, r2
 800361c:	0019      	movs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	431a      	orrs	r2, r3
 800362e:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <HAL_RCC_OscConfig+0x77c>)
 8003630:	430a      	orrs	r2, r1
 8003632:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003634:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <HAL_RCC_OscConfig+0x77c>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <HAL_RCC_OscConfig+0x77c>)
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	0449      	lsls	r1, r1, #17
 800363e:	430a      	orrs	r2, r1
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fd fba5 	bl	8000d90 <HAL_GetTick>
 8003646:	0003      	movs	r3, r0
 8003648:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7fd fba0 	bl	8000d90 <HAL_GetTick>
 8003650:	0002      	movs	r2, r0
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e045      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800365e:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <HAL_RCC_OscConfig+0x77c>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	049b      	lsls	r3, r3, #18
 8003666:	4013      	ands	r3, r2
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x6d4>
 800366a:	e03d      	b.n	80036e8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366c:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <HAL_RCC_OscConfig+0x77c>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_RCC_OscConfig+0x77c>)
 8003672:	4922      	ldr	r1, [pc, #136]	; (80036fc <HAL_RCC_OscConfig+0x784>)
 8003674:	400a      	ands	r2, r1
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fd fb8a 	bl	8000d90 <HAL_GetTick>
 800367c:	0003      	movs	r3, r0
 800367e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003682:	f7fd fb85 	bl	8000d90 <HAL_GetTick>
 8003686:	0002      	movs	r2, r0
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e02a      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003694:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <HAL_RCC_OscConfig+0x77c>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	049b      	lsls	r3, r3, #18
 800369c:	4013      	ands	r3, r2
 800369e:	d1f0      	bne.n	8003682 <HAL_RCC_OscConfig+0x70a>
 80036a0:	e022      	b.n	80036e8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e01d      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <HAL_RCC_OscConfig+0x77c>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	025b      	lsls	r3, r3, #9
 80036ba:	401a      	ands	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d10f      	bne.n	80036e4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	23f0      	movs	r3, #240	; 0xf0
 80036c8:	039b      	lsls	r3, r3, #14
 80036ca:	401a      	ands	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d107      	bne.n	80036e4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	23c0      	movs	r3, #192	; 0xc0
 80036d8:	041b      	lsls	r3, r3, #16
 80036da:	401a      	ands	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b00a      	add	sp, #40	; 0x28
 80036f0:	bdb0      	pop	{r4, r5, r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	40021000 	.word	0x40021000
 80036f8:	ff02ffff 	.word	0xff02ffff
 80036fc:	feffffff 	.word	0xfeffffff

08003700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003700:	b5b0      	push	{r4, r5, r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e128      	b.n	8003966 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003714:	4b96      	ldr	r3, [pc, #600]	; (8003970 <HAL_RCC_ClockConfig+0x270>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2201      	movs	r2, #1
 800371a:	4013      	ands	r3, r2
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d91e      	bls.n	8003760 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b93      	ldr	r3, [pc, #588]	; (8003970 <HAL_RCC_ClockConfig+0x270>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2201      	movs	r2, #1
 8003728:	4393      	bics	r3, r2
 800372a:	0019      	movs	r1, r3
 800372c:	4b90      	ldr	r3, [pc, #576]	; (8003970 <HAL_RCC_ClockConfig+0x270>)
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003734:	f7fd fb2c 	bl	8000d90 <HAL_GetTick>
 8003738:	0003      	movs	r3, r0
 800373a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373c:	e009      	b.n	8003752 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373e:	f7fd fb27 	bl	8000d90 <HAL_GetTick>
 8003742:	0002      	movs	r2, r0
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	4a8a      	ldr	r2, [pc, #552]	; (8003974 <HAL_RCC_ClockConfig+0x274>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e109      	b.n	8003966 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b87      	ldr	r3, [pc, #540]	; (8003970 <HAL_RCC_ClockConfig+0x270>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2201      	movs	r2, #1
 8003758:	4013      	ands	r3, r2
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d1ee      	bne.n	800373e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2202      	movs	r2, #2
 8003766:	4013      	ands	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800376a:	4b83      	ldr	r3, [pc, #524]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	22f0      	movs	r2, #240	; 0xf0
 8003770:	4393      	bics	r3, r2
 8003772:	0019      	movs	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	4b7f      	ldr	r3, [pc, #508]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 800377a:	430a      	orrs	r2, r1
 800377c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2201      	movs	r2, #1
 8003784:	4013      	ands	r3, r2
 8003786:	d100      	bne.n	800378a <HAL_RCC_ClockConfig+0x8a>
 8003788:	e089      	b.n	800389e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003792:	4b79      	ldr	r3, [pc, #484]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	029b      	lsls	r3, r3, #10
 800379a:	4013      	ands	r3, r2
 800379c:	d120      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e0e1      	b.n	8003966 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037aa:	4b73      	ldr	r3, [pc, #460]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	049b      	lsls	r3, r3, #18
 80037b2:	4013      	ands	r3, r2
 80037b4:	d114      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0d5      	b.n	8003966 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d106      	bne.n	80037d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037c2:	4b6d      	ldr	r3, [pc, #436]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2204      	movs	r2, #4
 80037c8:	4013      	ands	r3, r2
 80037ca:	d109      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0ca      	b.n	8003966 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037d0:	4b69      	ldr	r3, [pc, #420]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0c2      	b.n	8003966 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e0:	4b65      	ldr	r3, [pc, #404]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2203      	movs	r2, #3
 80037e6:	4393      	bics	r3, r2
 80037e8:	0019      	movs	r1, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	4b62      	ldr	r3, [pc, #392]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 80037f0:	430a      	orrs	r2, r1
 80037f2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f4:	f7fd facc 	bl	8000d90 <HAL_GetTick>
 80037f8:	0003      	movs	r3, r0
 80037fa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d111      	bne.n	8003828 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003804:	e009      	b.n	800381a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003806:	f7fd fac3 	bl	8000d90 <HAL_GetTick>
 800380a:	0002      	movs	r2, r0
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	4a58      	ldr	r2, [pc, #352]	; (8003974 <HAL_RCC_ClockConfig+0x274>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0a5      	b.n	8003966 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800381a:	4b57      	ldr	r3, [pc, #348]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	220c      	movs	r2, #12
 8003820:	4013      	ands	r3, r2
 8003822:	2b08      	cmp	r3, #8
 8003824:	d1ef      	bne.n	8003806 <HAL_RCC_ClockConfig+0x106>
 8003826:	e03a      	b.n	800389e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d111      	bne.n	8003854 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003830:	e009      	b.n	8003846 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003832:	f7fd faad 	bl	8000d90 <HAL_GetTick>
 8003836:	0002      	movs	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	4a4d      	ldr	r2, [pc, #308]	; (8003974 <HAL_RCC_ClockConfig+0x274>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e08f      	b.n	8003966 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003846:	4b4c      	ldr	r3, [pc, #304]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	220c      	movs	r2, #12
 800384c:	4013      	ands	r3, r2
 800384e:	2b0c      	cmp	r3, #12
 8003850:	d1ef      	bne.n	8003832 <HAL_RCC_ClockConfig+0x132>
 8003852:	e024      	b.n	800389e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d11b      	bne.n	8003894 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800385c:	e009      	b.n	8003872 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385e:	f7fd fa97 	bl	8000d90 <HAL_GetTick>
 8003862:	0002      	movs	r2, r0
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	4a42      	ldr	r2, [pc, #264]	; (8003974 <HAL_RCC_ClockConfig+0x274>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e079      	b.n	8003966 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	220c      	movs	r2, #12
 8003878:	4013      	ands	r3, r2
 800387a:	2b04      	cmp	r3, #4
 800387c:	d1ef      	bne.n	800385e <HAL_RCC_ClockConfig+0x15e>
 800387e:	e00e      	b.n	800389e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fd fa86 	bl	8000d90 <HAL_GetTick>
 8003884:	0002      	movs	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	4a3a      	ldr	r2, [pc, #232]	; (8003974 <HAL_RCC_ClockConfig+0x274>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e068      	b.n	8003966 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003894:	4b38      	ldr	r3, [pc, #224]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	220c      	movs	r2, #12
 800389a:	4013      	ands	r3, r2
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389e:	4b34      	ldr	r3, [pc, #208]	; (8003970 <HAL_RCC_ClockConfig+0x270>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	4013      	ands	r3, r2
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d21e      	bcs.n	80038ea <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ac:	4b30      	ldr	r3, [pc, #192]	; (8003970 <HAL_RCC_ClockConfig+0x270>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2201      	movs	r2, #1
 80038b2:	4393      	bics	r3, r2
 80038b4:	0019      	movs	r1, r3
 80038b6:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <HAL_RCC_ClockConfig+0x270>)
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038be:	f7fd fa67 	bl	8000d90 <HAL_GetTick>
 80038c2:	0003      	movs	r3, r0
 80038c4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	e009      	b.n	80038dc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c8:	f7fd fa62 	bl	8000d90 <HAL_GetTick>
 80038cc:	0002      	movs	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	4a28      	ldr	r2, [pc, #160]	; (8003974 <HAL_RCC_ClockConfig+0x274>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e044      	b.n	8003966 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038dc:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_RCC_ClockConfig+0x270>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2201      	movs	r2, #1
 80038e2:	4013      	ands	r3, r2
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d1ee      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2204      	movs	r2, #4
 80038f0:	4013      	ands	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f4:	4b20      	ldr	r3, [pc, #128]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a20      	ldr	r2, [pc, #128]	; (800397c <HAL_RCC_ClockConfig+0x27c>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	0019      	movs	r1, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 8003904:	430a      	orrs	r2, r1
 8003906:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2208      	movs	r2, #8
 800390e:	4013      	ands	r3, r2
 8003910:	d00a      	beq.n	8003928 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003912:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	4a1a      	ldr	r2, [pc, #104]	; (8003980 <HAL_RCC_ClockConfig+0x280>)
 8003918:	4013      	ands	r3, r2
 800391a:	0019      	movs	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	00da      	lsls	r2, r3, #3
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 8003924:	430a      	orrs	r2, r1
 8003926:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003928:	f000 f832 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800392c:	0001      	movs	r1, r0
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <HAL_RCC_ClockConfig+0x278>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	091b      	lsrs	r3, r3, #4
 8003934:	220f      	movs	r2, #15
 8003936:	4013      	ands	r3, r2
 8003938:	4a12      	ldr	r2, [pc, #72]	; (8003984 <HAL_RCC_ClockConfig+0x284>)
 800393a:	5cd3      	ldrb	r3, [r2, r3]
 800393c:	000a      	movs	r2, r1
 800393e:	40da      	lsrs	r2, r3
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_RCC_ClockConfig+0x288>)
 8003942:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_RCC_ClockConfig+0x28c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	250b      	movs	r5, #11
 800394a:	197c      	adds	r4, r7, r5
 800394c:	0018      	movs	r0, r3
 800394e:	f7fd f9d9 	bl	8000d04 <HAL_InitTick>
 8003952:	0003      	movs	r3, r0
 8003954:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003956:	197b      	adds	r3, r7, r5
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800395e:	197b      	adds	r3, r7, r5
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	e000      	b.n	8003966 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	0018      	movs	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	b004      	add	sp, #16
 800396c:	bdb0      	pop	{r4, r5, r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	40022000 	.word	0x40022000
 8003974:	00001388 	.word	0x00001388
 8003978:	40021000 	.word	0x40021000
 800397c:	fffff8ff 	.word	0xfffff8ff
 8003980:	ffffc7ff 	.word	0xffffc7ff
 8003984:	08008b1c 	.word	0x08008b1c
 8003988:	20000000 	.word	0x20000000
 800398c:	20000004 	.word	0x20000004

08003990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	b08e      	sub	sp, #56	; 0x38
 8003994:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003996:	4b4c      	ldr	r3, [pc, #304]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800399c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800399e:	230c      	movs	r3, #12
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b0c      	cmp	r3, #12
 80039a4:	d014      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x40>
 80039a6:	d900      	bls.n	80039aa <HAL_RCC_GetSysClockFreq+0x1a>
 80039a8:	e07b      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x112>
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d002      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x24>
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d00b      	beq.n	80039ca <HAL_RCC_GetSysClockFreq+0x3a>
 80039b2:	e076      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80039b4:	4b44      	ldr	r3, [pc, #272]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2210      	movs	r2, #16
 80039ba:	4013      	ands	r3, r2
 80039bc:	d002      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80039be:	4b43      	ldr	r3, [pc, #268]	; (8003acc <HAL_RCC_GetSysClockFreq+0x13c>)
 80039c0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80039c2:	e07c      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80039c4:	4b42      	ldr	r3, [pc, #264]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x140>)
 80039c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039c8:	e079      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039ca:	4b42      	ldr	r3, [pc, #264]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x144>)
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039ce:	e076      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	0c9a      	lsrs	r2, r3, #18
 80039d4:	230f      	movs	r3, #15
 80039d6:	401a      	ands	r2, r3
 80039d8:	4b3f      	ldr	r3, [pc, #252]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x148>)
 80039da:	5c9b      	ldrb	r3, [r3, r2]
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	0d9a      	lsrs	r2, r3, #22
 80039e2:	2303      	movs	r3, #3
 80039e4:	4013      	ands	r3, r2
 80039e6:	3301      	adds	r3, #1
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ea:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	025b      	lsls	r3, r3, #9
 80039f2:	4013      	ands	r3, r2
 80039f4:	d01a      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	4a35      	ldr	r2, [pc, #212]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x144>)
 8003a00:	2300      	movs	r3, #0
 8003a02:	69b8      	ldr	r0, [r7, #24]
 8003a04:	69f9      	ldr	r1, [r7, #28]
 8003a06:	f7fc fc2b 	bl	8000260 <__aeabi_lmul>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	000b      	movs	r3, r1
 8003a0e:	0010      	movs	r0, r2
 8003a10:	0019      	movs	r1, r3
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f7fc fbff 	bl	8000220 <__aeabi_uldivmod>
 8003a22:	0002      	movs	r2, r0
 8003a24:	000b      	movs	r3, r1
 8003a26:	0013      	movs	r3, r2
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
 8003a2a:	e037      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a2c:	4b26      	ldr	r3, [pc, #152]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2210      	movs	r2, #16
 8003a32:	4013      	ands	r3, r2
 8003a34:	d01a      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	4a23      	ldr	r2, [pc, #140]	; (8003acc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a40:	2300      	movs	r3, #0
 8003a42:	68b8      	ldr	r0, [r7, #8]
 8003a44:	68f9      	ldr	r1, [r7, #12]
 8003a46:	f7fc fc0b 	bl	8000260 <__aeabi_lmul>
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	000b      	movs	r3, r1
 8003a4e:	0010      	movs	r0, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f7fc fbdf 	bl	8000220 <__aeabi_uldivmod>
 8003a62:	0002      	movs	r2, r0
 8003a64:	000b      	movs	r3, r1
 8003a66:	0013      	movs	r3, r2
 8003a68:	637b      	str	r3, [r7, #52]	; 0x34
 8003a6a:	e017      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	0018      	movs	r0, r3
 8003a70:	2300      	movs	r3, #0
 8003a72:	0019      	movs	r1, r3
 8003a74:	4a16      	ldr	r2, [pc, #88]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003a76:	2300      	movs	r3, #0
 8003a78:	f7fc fbf2 	bl	8000260 <__aeabi_lmul>
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	000b      	movs	r3, r1
 8003a80:	0010      	movs	r0, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	001c      	movs	r4, r3
 8003a88:	2300      	movs	r3, #0
 8003a8a:	001d      	movs	r5, r3
 8003a8c:	0022      	movs	r2, r4
 8003a8e:	002b      	movs	r3, r5
 8003a90:	f7fc fbc6 	bl	8000220 <__aeabi_uldivmod>
 8003a94:	0002      	movs	r2, r0
 8003a96:	000b      	movs	r3, r1
 8003a98:	0013      	movs	r3, r2
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003aa0:	e00d      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003aa2:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	0b5b      	lsrs	r3, r3, #13
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	4013      	ands	r3, r2
 8003aac:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	2280      	movs	r2, #128	; 0x80
 8003ab4:	0212      	lsls	r2, r2, #8
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	0013      	movs	r3, r2
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003abc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b00e      	add	sp, #56	; 0x38
 8003ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	003d0900 	.word	0x003d0900
 8003ad0:	00f42400 	.word	0x00f42400
 8003ad4:	007a1200 	.word	0x007a1200
 8003ad8:	08008b34 	.word	0x08008b34

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b02      	ldr	r3, [pc, #8]	; (8003aec <HAL_RCC_GetHCLKFreq+0x10>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	20000000 	.word	0x20000000

08003af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003af4:	f7ff fff2 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003af8:	0001      	movs	r1, r0
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	2207      	movs	r2, #7
 8003b02:	4013      	ands	r3, r2
 8003b04:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b06:	5cd3      	ldrb	r3, [r2, r3]
 8003b08:	40d9      	lsrs	r1, r3
 8003b0a:	000b      	movs	r3, r1
}
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	40021000 	.word	0x40021000
 8003b18:	08008b2c 	.word	0x08008b2c

08003b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b20:	f7ff ffdc 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b24:	0001      	movs	r1, r0
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	0adb      	lsrs	r3, r3, #11
 8003b2c:	2207      	movs	r2, #7
 8003b2e:	4013      	ands	r3, r2
 8003b30:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b32:	5cd3      	ldrb	r3, [r2, r3]
 8003b34:	40d9      	lsrs	r1, r3
 8003b36:	000b      	movs	r3, r1
}
 8003b38:	0018      	movs	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	40021000 	.word	0x40021000
 8003b44:	08008b2c 	.word	0x08008b2c

08003b48 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003b50:	2317      	movs	r3, #23
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d106      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d100      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003b6e:	e104      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b70:	4bb1      	ldr	r3, [pc, #708]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	055b      	lsls	r3, r3, #21
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d10a      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7c:	4bae      	ldr	r3, [pc, #696]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b80:	4bad      	ldr	r3, [pc, #692]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b82:	2180      	movs	r1, #128	; 0x80
 8003b84:	0549      	lsls	r1, r1, #21
 8003b86:	430a      	orrs	r2, r1
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003b8a:	2317      	movs	r3, #23
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	2201      	movs	r2, #1
 8003b90:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b92:	4baa      	ldr	r3, [pc, #680]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d11a      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9e:	4ba7      	ldr	r3, [pc, #668]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4ba6      	ldr	r3, [pc, #664]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ba4:	2180      	movs	r1, #128	; 0x80
 8003ba6:	0049      	lsls	r1, r1, #1
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bac:	f7fd f8f0 	bl	8000d90 <HAL_GetTick>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fd f8eb 	bl	8000d90 <HAL_GetTick>
 8003bba:	0002      	movs	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b64      	cmp	r3, #100	; 0x64
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e133      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b9c      	ldr	r3, [pc, #624]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003bd4:	4b98      	ldr	r3, [pc, #608]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	23c0      	movs	r3, #192	; 0xc0
 8003bda:	039b      	lsls	r3, r3, #14
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	23c0      	movs	r3, #192	; 0xc0
 8003be6:	039b      	lsls	r3, r3, #14
 8003be8:	4013      	ands	r3, r2
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d107      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	23c0      	movs	r3, #192	; 0xc0
 8003bf6:	039b      	lsls	r3, r3, #14
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d013      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	23c0      	movs	r3, #192	; 0xc0
 8003c06:	029b      	lsls	r3, r3, #10
 8003c08:	401a      	ands	r2, r3
 8003c0a:	23c0      	movs	r3, #192	; 0xc0
 8003c0c:	029b      	lsls	r3, r3, #10
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d10a      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c12:	4b89      	ldr	r3, [pc, #548]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	029b      	lsls	r3, r3, #10
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	029b      	lsls	r3, r3, #10
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d101      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e103      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003c28:	4b83      	ldr	r3, [pc, #524]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c2c:	23c0      	movs	r3, #192	; 0xc0
 8003c2e:	029b      	lsls	r3, r3, #10
 8003c30:	4013      	ands	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d049      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	23c0      	movs	r3, #192	; 0xc0
 8003c40:	029b      	lsls	r3, r3, #10
 8003c42:	4013      	ands	r3, r2
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d004      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	4013      	ands	r3, r2
 8003c52:	d10d      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	23c0      	movs	r3, #192	; 0xc0
 8003c5a:	029b      	lsls	r3, r3, #10
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d034      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d02e      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003c70:	4b71      	ldr	r3, [pc, #452]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c74:	4a72      	ldr	r2, [pc, #456]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c7a:	4b6f      	ldr	r3, [pc, #444]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c7e:	4b6e      	ldr	r3, [pc, #440]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c80:	2180      	movs	r1, #128	; 0x80
 8003c82:	0309      	lsls	r1, r1, #12
 8003c84:	430a      	orrs	r2, r1
 8003c86:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c88:	4b6b      	ldr	r3, [pc, #428]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c8c:	4b6a      	ldr	r3, [pc, #424]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c8e:	496d      	ldr	r1, [pc, #436]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003c90:	400a      	ands	r2, r1
 8003c92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003c94:	4b68      	ldr	r3, [pc, #416]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d014      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd f874 	bl	8000d90 <HAL_GetTick>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cac:	e009      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fd f86f 	bl	8000d90 <HAL_GetTick>
 8003cb2:	0002      	movs	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	4a63      	ldr	r2, [pc, #396]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e0b6      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc2:	4b5d      	ldr	r3, [pc, #372]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d0ef      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d01f      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	23c0      	movs	r3, #192	; 0xc0
 8003ce0:	029b      	lsls	r3, r3, #10
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	23c0      	movs	r3, #192	; 0xc0
 8003ce6:	029b      	lsls	r3, r3, #10
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d10c      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003cec:	4b52      	ldr	r3, [pc, #328]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a56      	ldr	r2, [pc, #344]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	0019      	movs	r1, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	23c0      	movs	r3, #192	; 0xc0
 8003cfc:	039b      	lsls	r3, r3, #14
 8003cfe:	401a      	ands	r2, r3
 8003d00:	4b4d      	ldr	r3, [pc, #308]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d02:	430a      	orrs	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	4b4c      	ldr	r3, [pc, #304]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d08:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	23c0      	movs	r3, #192	; 0xc0
 8003d10:	029b      	lsls	r3, r3, #10
 8003d12:	401a      	ands	r2, r3
 8003d14:	4b48      	ldr	r3, [pc, #288]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d16:	430a      	orrs	r2, r1
 8003d18:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	4013      	ands	r3, r2
 8003d22:	d01f      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	23c0      	movs	r3, #192	; 0xc0
 8003d2a:	029b      	lsls	r3, r3, #10
 8003d2c:	401a      	ands	r2, r3
 8003d2e:	23c0      	movs	r3, #192	; 0xc0
 8003d30:	029b      	lsls	r3, r3, #10
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d36:	4b40      	ldr	r3, [pc, #256]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a44      	ldr	r2, [pc, #272]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	0019      	movs	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	23c0      	movs	r3, #192	; 0xc0
 8003d46:	039b      	lsls	r3, r3, #14
 8003d48:	401a      	ands	r2, r3
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	4b39      	ldr	r3, [pc, #228]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d52:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	23c0      	movs	r3, #192	; 0xc0
 8003d5a:	029b      	lsls	r3, r3, #10
 8003d5c:	401a      	ands	r2, r3
 8003d5e:	4b36      	ldr	r3, [pc, #216]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d60:	430a      	orrs	r2, r1
 8003d62:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d64:	2317      	movs	r3, #23
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d105      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6e:	4b32      	ldr	r3, [pc, #200]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d72:	4b31      	ldr	r3, [pc, #196]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d74:	4936      	ldr	r1, [pc, #216]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d76:	400a      	ands	r2, r1
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	4013      	ands	r3, r2
 8003d82:	d009      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d84:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d88:	2203      	movs	r2, #3
 8003d8a:	4393      	bics	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d94:	430a      	orrs	r2, r1
 8003d96:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d009      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da2:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da6:	220c      	movs	r2, #12
 8003da8:	4393      	bics	r3, r2
 8003daa:	0019      	movs	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003db2:	430a      	orrs	r2, r1
 8003db4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2204      	movs	r2, #4
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d009      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc4:	4a23      	ldr	r2, [pc, #140]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	0019      	movs	r1, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2208      	movs	r2, #8
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dde:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	0019      	movs	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dee:	430a      	orrs	r2, r1
 8003df0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2240      	movs	r2, #64	; 0x40
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d009      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e00:	4a16      	ldr	r2, [pc, #88]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	0019      	movs	r1, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1a      	ldr	r2, [r3, #32]
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2280      	movs	r2, #128	; 0x80
 8003e16:	4013      	ands	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003e1a:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1e:	4a10      	ldr	r2, [pc, #64]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	0019      	movs	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	0018      	movs	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b006      	add	sp, #24
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	fffcffff 	.word	0xfffcffff
 8003e44:	fff7ffff 	.word	0xfff7ffff
 8003e48:	00001388 	.word	0x00001388
 8003e4c:	ffcfffff 	.word	0xffcfffff
 8003e50:	efffffff 	.word	0xefffffff
 8003e54:	fffff3ff 	.word	0xfffff3ff
 8003e58:	ffffcfff 	.word	0xffffcfff
 8003e5c:	fbffffff 	.word	0xfbffffff
 8003e60:	fff3ffff 	.word	0xfff3ffff

08003e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e044      	b.n	8003f00 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d107      	bne.n	8003e8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2278      	movs	r2, #120	; 0x78
 8003e82:	2100      	movs	r1, #0
 8003e84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7fc fe83 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2224      	movs	r2, #36	; 0x24
 8003e92:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 f830 	bl	8003f0c <UART_SetConfig>
 8003eac:	0003      	movs	r3, r0
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e024      	b.n	8003f00 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f000 faa7 	bl	8004414 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	490d      	ldr	r1, [pc, #52]	; (8003f08 <HAL_UART_Init+0xa4>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	212a      	movs	r1, #42	; 0x2a
 8003ee2:	438a      	bics	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f000 fb3f 	bl	800457c <UART_CheckIdleState>
 8003efe:	0003      	movs	r3, r0
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b002      	add	sp, #8
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	ffffb7ff 	.word	0xffffb7ff

08003f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f0c:	b5b0      	push	{r4, r5, r7, lr}
 8003f0e:	b08e      	sub	sp, #56	; 0x38
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f14:	231a      	movs	r3, #26
 8003f16:	2218      	movs	r2, #24
 8003f18:	189b      	adds	r3, r3, r2
 8003f1a:	19db      	adds	r3, r3, r7
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4ac6      	ldr	r2, [pc, #792]	; (8004258 <UART_SetConfig+0x34c>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	0019      	movs	r1, r3
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4ac1      	ldr	r2, [pc, #772]	; (800425c <UART_SetConfig+0x350>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	0019      	movs	r1, r3
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4abb      	ldr	r2, [pc, #748]	; (8004260 <UART_SetConfig+0x354>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d004      	beq.n	8003f80 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	4ab7      	ldr	r2, [pc, #732]	; (8004264 <UART_SetConfig+0x358>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f92:	430a      	orrs	r2, r1
 8003f94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4ab3      	ldr	r2, [pc, #716]	; (8004268 <UART_SetConfig+0x35c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d131      	bne.n	8004004 <UART_SetConfig+0xf8>
 8003fa0:	4bb2      	ldr	r3, [pc, #712]	; (800426c <UART_SetConfig+0x360>)
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d01d      	beq.n	8003fe8 <UART_SetConfig+0xdc>
 8003fac:	d823      	bhi.n	8003ff6 <UART_SetConfig+0xea>
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d00c      	beq.n	8003fcc <UART_SetConfig+0xc0>
 8003fb2:	d820      	bhi.n	8003ff6 <UART_SetConfig+0xea>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <UART_SetConfig+0xb2>
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d00e      	beq.n	8003fda <UART_SetConfig+0xce>
 8003fbc:	e01b      	b.n	8003ff6 <UART_SetConfig+0xea>
 8003fbe:	231b      	movs	r3, #27
 8003fc0:	2218      	movs	r2, #24
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	19db      	adds	r3, r3, r7
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e09c      	b.n	8004106 <UART_SetConfig+0x1fa>
 8003fcc:	231b      	movs	r3, #27
 8003fce:	2218      	movs	r2, #24
 8003fd0:	189b      	adds	r3, r3, r2
 8003fd2:	19db      	adds	r3, r3, r7
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	e095      	b.n	8004106 <UART_SetConfig+0x1fa>
 8003fda:	231b      	movs	r3, #27
 8003fdc:	2218      	movs	r2, #24
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	19db      	adds	r3, r3, r7
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	e08e      	b.n	8004106 <UART_SetConfig+0x1fa>
 8003fe8:	231b      	movs	r3, #27
 8003fea:	2218      	movs	r2, #24
 8003fec:	189b      	adds	r3, r3, r2
 8003fee:	19db      	adds	r3, r3, r7
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	e087      	b.n	8004106 <UART_SetConfig+0x1fa>
 8003ff6:	231b      	movs	r3, #27
 8003ff8:	2218      	movs	r2, #24
 8003ffa:	189b      	adds	r3, r3, r2
 8003ffc:	19db      	adds	r3, r3, r7
 8003ffe:	2210      	movs	r2, #16
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	e080      	b.n	8004106 <UART_SetConfig+0x1fa>
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a99      	ldr	r2, [pc, #612]	; (8004270 <UART_SetConfig+0x364>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d131      	bne.n	8004072 <UART_SetConfig+0x166>
 800400e:	4b97      	ldr	r3, [pc, #604]	; (800426c <UART_SetConfig+0x360>)
 8004010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004012:	220c      	movs	r2, #12
 8004014:	4013      	ands	r3, r2
 8004016:	2b0c      	cmp	r3, #12
 8004018:	d01d      	beq.n	8004056 <UART_SetConfig+0x14a>
 800401a:	d823      	bhi.n	8004064 <UART_SetConfig+0x158>
 800401c:	2b08      	cmp	r3, #8
 800401e:	d00c      	beq.n	800403a <UART_SetConfig+0x12e>
 8004020:	d820      	bhi.n	8004064 <UART_SetConfig+0x158>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <UART_SetConfig+0x120>
 8004026:	2b04      	cmp	r3, #4
 8004028:	d00e      	beq.n	8004048 <UART_SetConfig+0x13c>
 800402a:	e01b      	b.n	8004064 <UART_SetConfig+0x158>
 800402c:	231b      	movs	r3, #27
 800402e:	2218      	movs	r2, #24
 8004030:	189b      	adds	r3, r3, r2
 8004032:	19db      	adds	r3, r3, r7
 8004034:	2200      	movs	r2, #0
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	e065      	b.n	8004106 <UART_SetConfig+0x1fa>
 800403a:	231b      	movs	r3, #27
 800403c:	2218      	movs	r2, #24
 800403e:	189b      	adds	r3, r3, r2
 8004040:	19db      	adds	r3, r3, r7
 8004042:	2202      	movs	r2, #2
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e05e      	b.n	8004106 <UART_SetConfig+0x1fa>
 8004048:	231b      	movs	r3, #27
 800404a:	2218      	movs	r2, #24
 800404c:	189b      	adds	r3, r3, r2
 800404e:	19db      	adds	r3, r3, r7
 8004050:	2204      	movs	r2, #4
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	e057      	b.n	8004106 <UART_SetConfig+0x1fa>
 8004056:	231b      	movs	r3, #27
 8004058:	2218      	movs	r2, #24
 800405a:	189b      	adds	r3, r3, r2
 800405c:	19db      	adds	r3, r3, r7
 800405e:	2208      	movs	r2, #8
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	e050      	b.n	8004106 <UART_SetConfig+0x1fa>
 8004064:	231b      	movs	r3, #27
 8004066:	2218      	movs	r2, #24
 8004068:	189b      	adds	r3, r3, r2
 800406a:	19db      	adds	r3, r3, r7
 800406c:	2210      	movs	r2, #16
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	e049      	b.n	8004106 <UART_SetConfig+0x1fa>
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a7a      	ldr	r2, [pc, #488]	; (8004260 <UART_SetConfig+0x354>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d13e      	bne.n	80040fa <UART_SetConfig+0x1ee>
 800407c:	4b7b      	ldr	r3, [pc, #492]	; (800426c <UART_SetConfig+0x360>)
 800407e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004080:	23c0      	movs	r3, #192	; 0xc0
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	4013      	ands	r3, r2
 8004086:	22c0      	movs	r2, #192	; 0xc0
 8004088:	0112      	lsls	r2, r2, #4
 800408a:	4293      	cmp	r3, r2
 800408c:	d027      	beq.n	80040de <UART_SetConfig+0x1d2>
 800408e:	22c0      	movs	r2, #192	; 0xc0
 8004090:	0112      	lsls	r2, r2, #4
 8004092:	4293      	cmp	r3, r2
 8004094:	d82a      	bhi.n	80040ec <UART_SetConfig+0x1e0>
 8004096:	2280      	movs	r2, #128	; 0x80
 8004098:	0112      	lsls	r2, r2, #4
 800409a:	4293      	cmp	r3, r2
 800409c:	d011      	beq.n	80040c2 <UART_SetConfig+0x1b6>
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	0112      	lsls	r2, r2, #4
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d822      	bhi.n	80040ec <UART_SetConfig+0x1e0>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <UART_SetConfig+0x1a8>
 80040aa:	2280      	movs	r2, #128	; 0x80
 80040ac:	00d2      	lsls	r2, r2, #3
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00e      	beq.n	80040d0 <UART_SetConfig+0x1c4>
 80040b2:	e01b      	b.n	80040ec <UART_SetConfig+0x1e0>
 80040b4:	231b      	movs	r3, #27
 80040b6:	2218      	movs	r2, #24
 80040b8:	189b      	adds	r3, r3, r2
 80040ba:	19db      	adds	r3, r3, r7
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	e021      	b.n	8004106 <UART_SetConfig+0x1fa>
 80040c2:	231b      	movs	r3, #27
 80040c4:	2218      	movs	r2, #24
 80040c6:	189b      	adds	r3, r3, r2
 80040c8:	19db      	adds	r3, r3, r7
 80040ca:	2202      	movs	r2, #2
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	e01a      	b.n	8004106 <UART_SetConfig+0x1fa>
 80040d0:	231b      	movs	r3, #27
 80040d2:	2218      	movs	r2, #24
 80040d4:	189b      	adds	r3, r3, r2
 80040d6:	19db      	adds	r3, r3, r7
 80040d8:	2204      	movs	r2, #4
 80040da:	701a      	strb	r2, [r3, #0]
 80040dc:	e013      	b.n	8004106 <UART_SetConfig+0x1fa>
 80040de:	231b      	movs	r3, #27
 80040e0:	2218      	movs	r2, #24
 80040e2:	189b      	adds	r3, r3, r2
 80040e4:	19db      	adds	r3, r3, r7
 80040e6:	2208      	movs	r2, #8
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e00c      	b.n	8004106 <UART_SetConfig+0x1fa>
 80040ec:	231b      	movs	r3, #27
 80040ee:	2218      	movs	r2, #24
 80040f0:	189b      	adds	r3, r3, r2
 80040f2:	19db      	adds	r3, r3, r7
 80040f4:	2210      	movs	r2, #16
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e005      	b.n	8004106 <UART_SetConfig+0x1fa>
 80040fa:	231b      	movs	r3, #27
 80040fc:	2218      	movs	r2, #24
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	19db      	adds	r3, r3, r7
 8004102:	2210      	movs	r2, #16
 8004104:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a55      	ldr	r2, [pc, #340]	; (8004260 <UART_SetConfig+0x354>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d000      	beq.n	8004112 <UART_SetConfig+0x206>
 8004110:	e084      	b.n	800421c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004112:	231b      	movs	r3, #27
 8004114:	2218      	movs	r2, #24
 8004116:	189b      	adds	r3, r3, r2
 8004118:	19db      	adds	r3, r3, r7
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b08      	cmp	r3, #8
 800411e:	d01d      	beq.n	800415c <UART_SetConfig+0x250>
 8004120:	dc20      	bgt.n	8004164 <UART_SetConfig+0x258>
 8004122:	2b04      	cmp	r3, #4
 8004124:	d015      	beq.n	8004152 <UART_SetConfig+0x246>
 8004126:	dc1d      	bgt.n	8004164 <UART_SetConfig+0x258>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <UART_SetConfig+0x226>
 800412c:	2b02      	cmp	r3, #2
 800412e:	d005      	beq.n	800413c <UART_SetConfig+0x230>
 8004130:	e018      	b.n	8004164 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004132:	f7ff fcdd 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8004136:	0003      	movs	r3, r0
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800413a:	e01c      	b.n	8004176 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800413c:	4b4b      	ldr	r3, [pc, #300]	; (800426c <UART_SetConfig+0x360>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2210      	movs	r2, #16
 8004142:	4013      	ands	r3, r2
 8004144:	d002      	beq.n	800414c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004146:	4b4b      	ldr	r3, [pc, #300]	; (8004274 <UART_SetConfig+0x368>)
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800414a:	e014      	b.n	8004176 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800414c:	4b4a      	ldr	r3, [pc, #296]	; (8004278 <UART_SetConfig+0x36c>)
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004150:	e011      	b.n	8004176 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004152:	f7ff fc1d 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8004156:	0003      	movs	r3, r0
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800415a:	e00c      	b.n	8004176 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004162:	e008      	b.n	8004176 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004168:	231a      	movs	r3, #26
 800416a:	2218      	movs	r2, #24
 800416c:	189b      	adds	r3, r3, r2
 800416e:	19db      	adds	r3, r3, r7
 8004170:	2201      	movs	r2, #1
 8004172:	701a      	strb	r2, [r3, #0]
        break;
 8004174:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d100      	bne.n	800417e <UART_SetConfig+0x272>
 800417c:	e132      	b.n	80043e4 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	0013      	movs	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	189b      	adds	r3, r3, r2
 8004188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800418a:	429a      	cmp	r2, r3
 800418c:	d305      	bcc.n	800419a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004196:	429a      	cmp	r2, r3
 8004198:	d906      	bls.n	80041a8 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800419a:	231a      	movs	r3, #26
 800419c:	2218      	movs	r2, #24
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	19db      	adds	r3, r3, r7
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	e11d      	b.n	80043e4 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	6939      	ldr	r1, [r7, #16]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	000b      	movs	r3, r1
 80041b6:	0e1b      	lsrs	r3, r3, #24
 80041b8:	0010      	movs	r0, r2
 80041ba:	0205      	lsls	r5, r0, #8
 80041bc:	431d      	orrs	r5, r3
 80041be:	000b      	movs	r3, r1
 80041c0:	021c      	lsls	r4, r3, #8
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	68b8      	ldr	r0, [r7, #8]
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	1900      	adds	r0, r0, r4
 80041d4:	4169      	adcs	r1, r5
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	2300      	movs	r3, #0
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f7fc f81c 	bl	8000220 <__aeabi_uldivmod>
 80041e8:	0002      	movs	r2, r0
 80041ea:	000b      	movs	r3, r1
 80041ec:	0013      	movs	r3, r2
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f2:	23c0      	movs	r3, #192	; 0xc0
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d309      	bcc.n	800420e <UART_SetConfig+0x302>
 80041fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	035b      	lsls	r3, r3, #13
 8004200:	429a      	cmp	r2, r3
 8004202:	d204      	bcs.n	800420e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800420a:	60da      	str	r2, [r3, #12]
 800420c:	e0ea      	b.n	80043e4 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800420e:	231a      	movs	r3, #26
 8004210:	2218      	movs	r2, #24
 8004212:	189b      	adds	r3, r3, r2
 8004214:	19db      	adds	r3, r3, r7
 8004216:	2201      	movs	r2, #1
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e0e3      	b.n	80043e4 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	429a      	cmp	r2, r3
 8004226:	d000      	beq.n	800422a <UART_SetConfig+0x31e>
 8004228:	e085      	b.n	8004336 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800422a:	231b      	movs	r3, #27
 800422c:	2218      	movs	r2, #24
 800422e:	189b      	adds	r3, r3, r2
 8004230:	19db      	adds	r3, r3, r7
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b08      	cmp	r3, #8
 8004236:	d837      	bhi.n	80042a8 <UART_SetConfig+0x39c>
 8004238:	009a      	lsls	r2, r3, #2
 800423a:	4b10      	ldr	r3, [pc, #64]	; (800427c <UART_SetConfig+0x370>)
 800423c:	18d3      	adds	r3, r2, r3
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004242:	f7ff fc55 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8004246:	0003      	movs	r3, r0
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800424a:	e036      	b.n	80042ba <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7ff fc66 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 8004250:	0003      	movs	r3, r0
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004254:	e031      	b.n	80042ba <UART_SetConfig+0x3ae>
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	efff69f3 	.word	0xefff69f3
 800425c:	ffffcfff 	.word	0xffffcfff
 8004260:	40004800 	.word	0x40004800
 8004264:	fffff4ff 	.word	0xfffff4ff
 8004268:	40013800 	.word	0x40013800
 800426c:	40021000 	.word	0x40021000
 8004270:	40004400 	.word	0x40004400
 8004274:	003d0900 	.word	0x003d0900
 8004278:	00f42400 	.word	0x00f42400
 800427c:	08008b40 	.word	0x08008b40
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004280:	4b60      	ldr	r3, [pc, #384]	; (8004404 <UART_SetConfig+0x4f8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2210      	movs	r2, #16
 8004286:	4013      	ands	r3, r2
 8004288:	d002      	beq.n	8004290 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800428a:	4b5f      	ldr	r3, [pc, #380]	; (8004408 <UART_SetConfig+0x4fc>)
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800428e:	e014      	b.n	80042ba <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004290:	4b5e      	ldr	r3, [pc, #376]	; (800440c <UART_SetConfig+0x500>)
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004294:	e011      	b.n	80042ba <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004296:	f7ff fb7b 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800429a:	0003      	movs	r3, r0
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800429e:	e00c      	b.n	80042ba <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042a6:	e008      	b.n	80042ba <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80042ac:	231a      	movs	r3, #26
 80042ae:	2218      	movs	r2, #24
 80042b0:	189b      	adds	r3, r3, r2
 80042b2:	19db      	adds	r3, r3, r7
 80042b4:	2201      	movs	r2, #1
 80042b6:	701a      	strb	r2, [r3, #0]
        break;
 80042b8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d100      	bne.n	80042c2 <UART_SetConfig+0x3b6>
 80042c0:	e090      	b.n	80043e4 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c4:	005a      	lsls	r2, r3, #1
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	18d2      	adds	r2, r2, r3
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	0019      	movs	r1, r3
 80042d4:	0010      	movs	r0, r2
 80042d6:	f7fb ff17 	bl	8000108 <__udivsi3>
 80042da:	0003      	movs	r3, r0
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	2b0f      	cmp	r3, #15
 80042e2:	d921      	bls.n	8004328 <UART_SetConfig+0x41c>
 80042e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	025b      	lsls	r3, r3, #9
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d21c      	bcs.n	8004328 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	200e      	movs	r0, #14
 80042f4:	2418      	movs	r4, #24
 80042f6:	1903      	adds	r3, r0, r4
 80042f8:	19db      	adds	r3, r3, r7
 80042fa:	210f      	movs	r1, #15
 80042fc:	438a      	bics	r2, r1
 80042fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	b29b      	uxth	r3, r3
 8004306:	2207      	movs	r2, #7
 8004308:	4013      	ands	r3, r2
 800430a:	b299      	uxth	r1, r3
 800430c:	1903      	adds	r3, r0, r4
 800430e:	19db      	adds	r3, r3, r7
 8004310:	1902      	adds	r2, r0, r4
 8004312:	19d2      	adds	r2, r2, r7
 8004314:	8812      	ldrh	r2, [r2, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	1902      	adds	r2, r0, r4
 8004320:	19d2      	adds	r2, r2, r7
 8004322:	8812      	ldrh	r2, [r2, #0]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	e05d      	b.n	80043e4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004328:	231a      	movs	r3, #26
 800432a:	2218      	movs	r2, #24
 800432c:	189b      	adds	r3, r3, r2
 800432e:	19db      	adds	r3, r3, r7
 8004330:	2201      	movs	r2, #1
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	e056      	b.n	80043e4 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004336:	231b      	movs	r3, #27
 8004338:	2218      	movs	r2, #24
 800433a:	189b      	adds	r3, r3, r2
 800433c:	19db      	adds	r3, r3, r7
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d822      	bhi.n	800438a <UART_SetConfig+0x47e>
 8004344:	009a      	lsls	r2, r3, #2
 8004346:	4b32      	ldr	r3, [pc, #200]	; (8004410 <UART_SetConfig+0x504>)
 8004348:	18d3      	adds	r3, r2, r3
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800434e:	f7ff fbcf 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8004352:	0003      	movs	r3, r0
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004356:	e021      	b.n	800439c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004358:	f7ff fbe0 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 800435c:	0003      	movs	r3, r0
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004360:	e01c      	b.n	800439c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004362:	4b28      	ldr	r3, [pc, #160]	; (8004404 <UART_SetConfig+0x4f8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2210      	movs	r2, #16
 8004368:	4013      	ands	r3, r2
 800436a:	d002      	beq.n	8004372 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800436c:	4b26      	ldr	r3, [pc, #152]	; (8004408 <UART_SetConfig+0x4fc>)
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004370:	e014      	b.n	800439c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <UART_SetConfig+0x500>)
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004376:	e011      	b.n	800439c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004378:	f7ff fb0a 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800437c:	0003      	movs	r3, r0
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004380:	e00c      	b.n	800439c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004388:	e008      	b.n	800439c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800438e:	231a      	movs	r3, #26
 8004390:	2218      	movs	r2, #24
 8004392:	189b      	adds	r3, r3, r2
 8004394:	19db      	adds	r3, r3, r7
 8004396:	2201      	movs	r2, #1
 8004398:	701a      	strb	r2, [r3, #0]
        break;
 800439a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d020      	beq.n	80043e4 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	085a      	lsrs	r2, r3, #1
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	18d2      	adds	r2, r2, r3
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	0019      	movs	r1, r3
 80043b2:	0010      	movs	r0, r2
 80043b4:	f7fb fea8 	bl	8000108 <__udivsi3>
 80043b8:	0003      	movs	r3, r0
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	2b0f      	cmp	r3, #15
 80043c0:	d90a      	bls.n	80043d8 <UART_SetConfig+0x4cc>
 80043c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	025b      	lsls	r3, r3, #9
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d205      	bcs.n	80043d8 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	e005      	b.n	80043e4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80043d8:	231a      	movs	r3, #26
 80043da:	2218      	movs	r2, #24
 80043dc:	189b      	adds	r3, r3, r2
 80043de:	19db      	adds	r3, r3, r7
 80043e0:	2201      	movs	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2200      	movs	r2, #0
 80043e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	2200      	movs	r2, #0
 80043ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043f0:	231a      	movs	r3, #26
 80043f2:	2218      	movs	r2, #24
 80043f4:	189b      	adds	r3, r3, r2
 80043f6:	19db      	adds	r3, r3, r7
 80043f8:	781b      	ldrb	r3, [r3, #0]
}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b00e      	add	sp, #56	; 0x38
 8004400:	bdb0      	pop	{r4, r5, r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	40021000 	.word	0x40021000
 8004408:	003d0900 	.word	0x003d0900
 800440c:	00f42400 	.word	0x00f42400
 8004410:	08008b64 	.word	0x08008b64

08004414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	2201      	movs	r2, #1
 8004422:	4013      	ands	r3, r2
 8004424:	d00b      	beq.n	800443e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4a4a      	ldr	r2, [pc, #296]	; (8004558 <UART_AdvFeatureConfig+0x144>)
 800442e:	4013      	ands	r3, r2
 8004430:	0019      	movs	r1, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2202      	movs	r2, #2
 8004444:	4013      	ands	r3, r2
 8004446:	d00b      	beq.n	8004460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4a43      	ldr	r2, [pc, #268]	; (800455c <UART_AdvFeatureConfig+0x148>)
 8004450:	4013      	ands	r3, r2
 8004452:	0019      	movs	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	2204      	movs	r2, #4
 8004466:	4013      	ands	r3, r2
 8004468:	d00b      	beq.n	8004482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4a3b      	ldr	r2, [pc, #236]	; (8004560 <UART_AdvFeatureConfig+0x14c>)
 8004472:	4013      	ands	r3, r2
 8004474:	0019      	movs	r1, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	2208      	movs	r2, #8
 8004488:	4013      	ands	r3, r2
 800448a:	d00b      	beq.n	80044a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4a34      	ldr	r2, [pc, #208]	; (8004564 <UART_AdvFeatureConfig+0x150>)
 8004494:	4013      	ands	r3, r2
 8004496:	0019      	movs	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	2210      	movs	r2, #16
 80044aa:	4013      	ands	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a2c      	ldr	r2, [pc, #176]	; (8004568 <UART_AdvFeatureConfig+0x154>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	0019      	movs	r1, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2220      	movs	r2, #32
 80044cc:	4013      	ands	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	4a25      	ldr	r2, [pc, #148]	; (800456c <UART_AdvFeatureConfig+0x158>)
 80044d8:	4013      	ands	r3, r2
 80044da:	0019      	movs	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	2240      	movs	r2, #64	; 0x40
 80044ee:	4013      	ands	r3, r2
 80044f0:	d01d      	beq.n	800452e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4a1d      	ldr	r2, [pc, #116]	; (8004570 <UART_AdvFeatureConfig+0x15c>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	0019      	movs	r1, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	035b      	lsls	r3, r3, #13
 8004512:	429a      	cmp	r2, r3
 8004514:	d10b      	bne.n	800452e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4a15      	ldr	r2, [pc, #84]	; (8004574 <UART_AdvFeatureConfig+0x160>)
 800451e:	4013      	ands	r3, r2
 8004520:	0019      	movs	r1, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	4013      	ands	r3, r2
 8004536:	d00b      	beq.n	8004550 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4a0e      	ldr	r2, [pc, #56]	; (8004578 <UART_AdvFeatureConfig+0x164>)
 8004540:	4013      	ands	r3, r2
 8004542:	0019      	movs	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	605a      	str	r2, [r3, #4]
  }
}
 8004550:	46c0      	nop			; (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b002      	add	sp, #8
 8004556:	bd80      	pop	{r7, pc}
 8004558:	fffdffff 	.word	0xfffdffff
 800455c:	fffeffff 	.word	0xfffeffff
 8004560:	fffbffff 	.word	0xfffbffff
 8004564:	ffff7fff 	.word	0xffff7fff
 8004568:	ffffefff 	.word	0xffffefff
 800456c:	ffffdfff 	.word	0xffffdfff
 8004570:	ffefffff 	.word	0xffefffff
 8004574:	ff9fffff 	.word	0xff9fffff
 8004578:	fff7ffff 	.word	0xfff7ffff

0800457c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b092      	sub	sp, #72	; 0x48
 8004580:	af02      	add	r7, sp, #8
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2284      	movs	r2, #132	; 0x84
 8004588:	2100      	movs	r1, #0
 800458a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800458c:	f7fc fc00 	bl	8000d90 <HAL_GetTick>
 8004590:	0003      	movs	r3, r0
 8004592:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2208      	movs	r2, #8
 800459c:	4013      	ands	r3, r2
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d12c      	bne.n	80045fc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a4:	2280      	movs	r2, #128	; 0x80
 80045a6:	0391      	lsls	r1, r2, #14
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4a46      	ldr	r2, [pc, #280]	; (80046c4 <UART_CheckIdleState+0x148>)
 80045ac:	9200      	str	r2, [sp, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f000 f88c 	bl	80046cc <UART_WaitOnFlagUntilTimeout>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d021      	beq.n	80045fc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b8:	f3ef 8310 	mrs	r3, PRIMASK
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80045c2:	2301      	movs	r3, #1
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	f383 8810 	msr	PRIMASK, r3
}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2180      	movs	r1, #128	; 0x80
 80045da:	438a      	bics	r2, r1
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	f383 8810 	msr	PRIMASK, r3
}
 80045e8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2278      	movs	r2, #120	; 0x78
 80045f4:	2100      	movs	r1, #0
 80045f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e05f      	b.n	80046bc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2204      	movs	r2, #4
 8004604:	4013      	ands	r3, r2
 8004606:	2b04      	cmp	r3, #4
 8004608:	d146      	bne.n	8004698 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800460a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460c:	2280      	movs	r2, #128	; 0x80
 800460e:	03d1      	lsls	r1, r2, #15
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4a2c      	ldr	r2, [pc, #176]	; (80046c4 <UART_CheckIdleState+0x148>)
 8004614:	9200      	str	r2, [sp, #0]
 8004616:	2200      	movs	r2, #0
 8004618:	f000 f858 	bl	80046cc <UART_WaitOnFlagUntilTimeout>
 800461c:	1e03      	subs	r3, r0, #0
 800461e:	d03b      	beq.n	8004698 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004620:	f3ef 8310 	mrs	r3, PRIMASK
 8004624:	60fb      	str	r3, [r7, #12]
  return(result);
 8004626:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
 800462a:	2301      	movs	r3, #1
 800462c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f383 8810 	msr	PRIMASK, r3
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4921      	ldr	r1, [pc, #132]	; (80046c8 <UART_CheckIdleState+0x14c>)
 8004642:	400a      	ands	r2, r1
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004648:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f383 8810 	msr	PRIMASK, r3
}
 8004650:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004652:	f3ef 8310 	mrs	r3, PRIMASK
 8004656:	61bb      	str	r3, [r7, #24]
  return(result);
 8004658:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465a:	633b      	str	r3, [r7, #48]	; 0x30
 800465c:	2301      	movs	r3, #1
 800465e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f383 8810 	msr	PRIMASK, r3
}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2101      	movs	r1, #1
 8004674:	438a      	bics	r2, r1
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	f383 8810 	msr	PRIMASK, r3
}
 8004682:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2280      	movs	r2, #128	; 0x80
 8004688:	2120      	movs	r1, #32
 800468a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2278      	movs	r2, #120	; 0x78
 8004690:	2100      	movs	r1, #0
 8004692:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e011      	b.n	80046bc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2280      	movs	r2, #128	; 0x80
 80046a2:	2120      	movs	r1, #32
 80046a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2278      	movs	r2, #120	; 0x78
 80046b6:	2100      	movs	r1, #0
 80046b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	0018      	movs	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	b010      	add	sp, #64	; 0x40
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	01ffffff 	.word	0x01ffffff
 80046c8:	fffffedf 	.word	0xfffffedf

080046cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	1dfb      	adds	r3, r7, #7
 80046da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046dc:	e04b      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	3301      	adds	r3, #1
 80046e2:	d048      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e4:	f7fc fb54 	bl	8000d90 <HAL_GetTick>
 80046e8:	0002      	movs	r2, r0
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d302      	bcc.n	80046fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e04b      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2204      	movs	r2, #4
 8004706:	4013      	ands	r3, r2
 8004708:	d035      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	2208      	movs	r2, #8
 8004712:	4013      	ands	r3, r2
 8004714:	2b08      	cmp	r3, #8
 8004716:	d111      	bne.n	800473c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2208      	movs	r2, #8
 800471e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	0018      	movs	r0, r3
 8004724:	f000 f83c 	bl	80047a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2284      	movs	r2, #132	; 0x84
 800472c:	2108      	movs	r1, #8
 800472e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2278      	movs	r2, #120	; 0x78
 8004734:	2100      	movs	r1, #0
 8004736:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e02c      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	401a      	ands	r2, r3
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	429a      	cmp	r2, r3
 800474e:	d112      	bne.n	8004776 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2280      	movs	r2, #128	; 0x80
 8004756:	0112      	lsls	r2, r2, #4
 8004758:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	0018      	movs	r0, r3
 800475e:	f000 f81f 	bl	80047a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2284      	movs	r2, #132	; 0x84
 8004766:	2120      	movs	r1, #32
 8004768:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2278      	movs	r2, #120	; 0x78
 800476e:	2100      	movs	r1, #0
 8004770:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e00f      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	4013      	ands	r3, r2
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	425a      	negs	r2, r3
 8004786:	4153      	adcs	r3, r2
 8004788:	b2db      	uxtb	r3, r3
 800478a:	001a      	movs	r2, r3
 800478c:	1dfb      	adds	r3, r7, #7
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d0a4      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b004      	add	sp, #16
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08e      	sub	sp, #56	; 0x38
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a8:	f3ef 8310 	mrs	r3, PRIMASK
 80047ac:	617b      	str	r3, [r7, #20]
  return(result);
 80047ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
 80047b2:	2301      	movs	r3, #1
 80047b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f383 8810 	msr	PRIMASK, r3
}
 80047bc:	46c0      	nop			; (mov r8, r8)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4926      	ldr	r1, [pc, #152]	; (8004864 <UART_EndRxTransfer+0xc4>)
 80047ca:	400a      	ands	r2, r1
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f383 8810 	msr	PRIMASK, r3
}
 80047d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047da:	f3ef 8310 	mrs	r3, PRIMASK
 80047de:	623b      	str	r3, [r7, #32]
  return(result);
 80047e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	633b      	str	r3, [r7, #48]	; 0x30
 80047e4:	2301      	movs	r3, #1
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	f383 8810 	msr	PRIMASK, r3
}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2101      	movs	r1, #1
 80047fc:	438a      	bics	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	f383 8810 	msr	PRIMASK, r3
}
 800480a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004810:	2b01      	cmp	r3, #1
 8004812:	d118      	bne.n	8004846 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004814:	f3ef 8310 	mrs	r3, PRIMASK
 8004818:	60bb      	str	r3, [r7, #8]
  return(result);
 800481a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481e:	2301      	movs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f383 8810 	msr	PRIMASK, r3
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2110      	movs	r1, #16
 8004836:	438a      	bics	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f383 8810 	msr	PRIMASK, r3
}
 8004844:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2280      	movs	r2, #128	; 0x80
 800484a:	2120      	movs	r1, #32
 800484c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	669a      	str	r2, [r3, #104]	; 0x68
}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	46bd      	mov	sp, r7
 800485e:	b00e      	add	sp, #56	; 0x38
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	fffffedf 	.word	0xfffffedf

08004868 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2244      	movs	r2, #68	; 0x44
 8004874:	2100      	movs	r1, #0
 8004876:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <USB_EnableGlobalInt+0x28>)
 800487a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	b299      	uxth	r1, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2240      	movs	r2, #64	; 0x40
 8004884:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	b004      	add	sp, #16
 800488e:	bd80      	pop	{r7, pc}
 8004890:	0000bf80 	.word	0x0000bf80

08004894 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <USB_DisableGlobalInt+0x30>)
 800489e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2240      	movs	r2, #64	; 0x40
 80048a4:	5a9b      	ldrh	r3, [r3, r2]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	b292      	uxth	r2, r2
 80048ac:	43d2      	mvns	r2, r2
 80048ae:	b292      	uxth	r2, r2
 80048b0:	4013      	ands	r3, r2
 80048b2:	b299      	uxth	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2240      	movs	r2, #64	; 0x40
 80048b8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	0018      	movs	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	b004      	add	sp, #16
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	0000bf80 	.word	0x0000bf80

080048c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048c8:	b084      	sub	sp, #16
 80048ca:	b590      	push	{r4, r7, lr}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	2004      	movs	r0, #4
 80048d4:	2410      	movs	r4, #16
 80048d6:	1900      	adds	r0, r0, r4
 80048d8:	2408      	movs	r4, #8
 80048da:	46a4      	mov	ip, r4
 80048dc:	44bc      	add	ip, r7
 80048de:	4460      	add	r0, ip
 80048e0:	6001      	str	r1, [r0, #0]
 80048e2:	6042      	str	r2, [r0, #4]
 80048e4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2240      	movs	r2, #64	; 0x40
 80048ea:	2101      	movs	r1, #1
 80048ec:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2240      	movs	r2, #64	; 0x40
 80048f2:	2100      	movs	r1, #0
 80048f4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2244      	movs	r2, #68	; 0x44
 80048fa:	2100      	movs	r1, #0
 80048fc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2250      	movs	r2, #80	; 0x50
 8004902:	2100      	movs	r1, #0
 8004904:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	0018      	movs	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	b003      	add	sp, #12
 800490e:	bc90      	pop	{r4, r7}
 8004910:	bc08      	pop	{r3}
 8004912:	b004      	add	sp, #16
 8004914:	4718      	bx	r3
	...

08004918 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b09c      	sub	sp, #112	; 0x70
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004922:	236f      	movs	r3, #111	; 0x6f
 8004924:	18fb      	adds	r3, r7, r3
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	18d3      	adds	r3, r2, r3
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29a      	uxth	r2, r3
 8004938:	236c      	movs	r3, #108	; 0x6c
 800493a:	18fb      	adds	r3, r7, r3
 800493c:	49a3      	ldr	r1, [pc, #652]	; (8004bcc <USB_ActivateEndpoint+0x2b4>)
 800493e:	400a      	ands	r2, r1
 8004940:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	78db      	ldrb	r3, [r3, #3]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d017      	beq.n	800497a <USB_ActivateEndpoint+0x62>
 800494a:	dc28      	bgt.n	800499e <USB_ActivateEndpoint+0x86>
 800494c:	2b02      	cmp	r3, #2
 800494e:	d00e      	beq.n	800496e <USB_ActivateEndpoint+0x56>
 8004950:	dc25      	bgt.n	800499e <USB_ActivateEndpoint+0x86>
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <USB_ActivateEndpoint+0x44>
 8004956:	2b01      	cmp	r3, #1
 8004958:	d018      	beq.n	800498c <USB_ActivateEndpoint+0x74>
 800495a:	e020      	b.n	800499e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800495c:	226c      	movs	r2, #108	; 0x6c
 800495e:	18bb      	adds	r3, r7, r2
 8004960:	18ba      	adds	r2, r7, r2
 8004962:	8812      	ldrh	r2, [r2, #0]
 8004964:	2180      	movs	r1, #128	; 0x80
 8004966:	0089      	lsls	r1, r1, #2
 8004968:	430a      	orrs	r2, r1
 800496a:	801a      	strh	r2, [r3, #0]
      break;
 800496c:	e01c      	b.n	80049a8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800496e:	226c      	movs	r2, #108	; 0x6c
 8004970:	18bb      	adds	r3, r7, r2
 8004972:	18ba      	adds	r2, r7, r2
 8004974:	8812      	ldrh	r2, [r2, #0]
 8004976:	801a      	strh	r2, [r3, #0]
      break;
 8004978:	e016      	b.n	80049a8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800497a:	226c      	movs	r2, #108	; 0x6c
 800497c:	18bb      	adds	r3, r7, r2
 800497e:	18ba      	adds	r2, r7, r2
 8004980:	8812      	ldrh	r2, [r2, #0]
 8004982:	21c0      	movs	r1, #192	; 0xc0
 8004984:	00c9      	lsls	r1, r1, #3
 8004986:	430a      	orrs	r2, r1
 8004988:	801a      	strh	r2, [r3, #0]
      break;
 800498a:	e00d      	b.n	80049a8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800498c:	226c      	movs	r2, #108	; 0x6c
 800498e:	18bb      	adds	r3, r7, r2
 8004990:	18ba      	adds	r2, r7, r2
 8004992:	8812      	ldrh	r2, [r2, #0]
 8004994:	2180      	movs	r1, #128	; 0x80
 8004996:	00c9      	lsls	r1, r1, #3
 8004998:	430a      	orrs	r2, r1
 800499a:	801a      	strh	r2, [r3, #0]
      break;
 800499c:	e004      	b.n	80049a8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800499e:	236f      	movs	r3, #111	; 0x6f
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
      break;
 80049a6:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	18d3      	adds	r3, r2, r3
 80049b2:	226c      	movs	r2, #108	; 0x6c
 80049b4:	18ba      	adds	r2, r7, r2
 80049b6:	8812      	ldrh	r2, [r2, #0]
 80049b8:	4985      	ldr	r1, [pc, #532]	; (8004bd0 <USB_ActivateEndpoint+0x2b8>)
 80049ba:	430a      	orrs	r2, r1
 80049bc:	b292      	uxth	r2, r2
 80049be:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	18d3      	adds	r3, r2, r3
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	b21b      	sxth	r3, r3
 80049d0:	4a80      	ldr	r2, [pc, #512]	; (8004bd4 <USB_ActivateEndpoint+0x2bc>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	b21a      	sxth	r2, r3
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	b21b      	sxth	r3, r3
 80049dc:	4313      	orrs	r3, r2
 80049de:	b21a      	sxth	r2, r3
 80049e0:	2166      	movs	r1, #102	; 0x66
 80049e2:	187b      	adds	r3, r7, r1
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	18d3      	adds	r3, r2, r3
 80049f0:	187a      	adds	r2, r7, r1
 80049f2:	8812      	ldrh	r2, [r2, #0]
 80049f4:	4976      	ldr	r1, [pc, #472]	; (8004bd0 <USB_ActivateEndpoint+0x2b8>)
 80049f6:	430a      	orrs	r2, r1
 80049f8:	b292      	uxth	r2, r2
 80049fa:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	7b1b      	ldrb	r3, [r3, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d000      	beq.n	8004a06 <USB_ActivateEndpoint+0xee>
 8004a04:	e178      	b.n	8004cf8 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d100      	bne.n	8004a10 <USB_ActivateEndpoint+0xf8>
 8004a0e:	e07a      	b.n	8004b06 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2250      	movs	r2, #80	; 0x50
 8004a18:	5a9b      	ldrh	r3, [r3, r2]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	189b      	adds	r3, r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	00da      	lsls	r2, r3, #3
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	18d3      	adds	r3, r2, r3
 8004a2e:	2280      	movs	r2, #128	; 0x80
 8004a30:	00d2      	lsls	r2, r2, #3
 8004a32:	4694      	mov	ip, r2
 8004a34:	4463      	add	r3, ip
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	88db      	ldrh	r3, [r3, #6]
 8004a3c:	085b      	lsrs	r3, r3, #1
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	18db      	adds	r3, r3, r3
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	18d2      	adds	r2, r2, r3
 8004a52:	2112      	movs	r1, #18
 8004a54:	187b      	adds	r3, r7, r1
 8004a56:	8812      	ldrh	r2, [r2, #0]
 8004a58:	801a      	strh	r2, [r3, #0]
 8004a5a:	187b      	adds	r3, r7, r1
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	2240      	movs	r2, #64	; 0x40
 8004a60:	4013      	ands	r3, r2
 8004a62:	d016      	beq.n	8004a92 <USB_ActivateEndpoint+0x17a>
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	18d3      	adds	r3, r2, r3
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	2010      	movs	r0, #16
 8004a74:	183b      	adds	r3, r7, r0
 8004a76:	4957      	ldr	r1, [pc, #348]	; (8004bd4 <USB_ActivateEndpoint+0x2bc>)
 8004a78:	400a      	ands	r2, r1
 8004a7a:	801a      	strh	r2, [r3, #0]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	18d3      	adds	r3, r2, r3
 8004a86:	183a      	adds	r2, r7, r0
 8004a88:	8812      	ldrh	r2, [r2, #0]
 8004a8a:	4953      	ldr	r1, [pc, #332]	; (8004bd8 <USB_ActivateEndpoint+0x2c0>)
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	b292      	uxth	r2, r2
 8004a90:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	78db      	ldrb	r3, [r3, #3]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d01d      	beq.n	8004ad6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	18d3      	adds	r3, r2, r3
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	200c      	movs	r0, #12
 8004aaa:	183b      	adds	r3, r7, r0
 8004aac:	494b      	ldr	r1, [pc, #300]	; (8004bdc <USB_ActivateEndpoint+0x2c4>)
 8004aae:	400a      	ands	r2, r1
 8004ab0:	801a      	strh	r2, [r3, #0]
 8004ab2:	183b      	adds	r3, r7, r0
 8004ab4:	183a      	adds	r2, r7, r0
 8004ab6:	8812      	ldrh	r2, [r2, #0]
 8004ab8:	2120      	movs	r1, #32
 8004aba:	404a      	eors	r2, r1
 8004abc:	801a      	strh	r2, [r3, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	18d3      	adds	r3, r2, r3
 8004ac8:	183a      	adds	r2, r7, r0
 8004aca:	8812      	ldrh	r2, [r2, #0]
 8004acc:	4940      	ldr	r1, [pc, #256]	; (8004bd0 <USB_ActivateEndpoint+0x2b8>)
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	e2b4      	b.n	8005040 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	18d3      	adds	r3, r2, r3
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	200e      	movs	r0, #14
 8004ae6:	183b      	adds	r3, r7, r0
 8004ae8:	493c      	ldr	r1, [pc, #240]	; (8004bdc <USB_ActivateEndpoint+0x2c4>)
 8004aea:	400a      	ands	r2, r1
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	18d3      	adds	r3, r2, r3
 8004af8:	183a      	adds	r2, r7, r0
 8004afa:	8812      	ldrh	r2, [r2, #0]
 8004afc:	4934      	ldr	r1, [pc, #208]	; (8004bd0 <USB_ActivateEndpoint+0x2b8>)
 8004afe:	430a      	orrs	r2, r1
 8004b00:	b292      	uxth	r2, r2
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	e29c      	b.n	8005040 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2250      	movs	r2, #80	; 0x50
 8004b0e:	5a9b      	ldrh	r3, [r3, r2]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	001a      	movs	r2, r3
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	189b      	adds	r3, r3, r2
 8004b18:	633b      	str	r3, [r7, #48]	; 0x30
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	00da      	lsls	r2, r3, #3
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	18d3      	adds	r3, r2, r3
 8004b24:	4a2e      	ldr	r2, [pc, #184]	; (8004be0 <USB_ActivateEndpoint+0x2c8>)
 8004b26:	4694      	mov	ip, r2
 8004b28:	4463      	add	r3, ip
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	88db      	ldrh	r3, [r3, #6]
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	18db      	adds	r3, r3, r3
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2250      	movs	r2, #80	; 0x50
 8004b44:	5a9b      	ldrh	r3, [r3, r2]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	001a      	movs	r2, r3
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	189b      	adds	r3, r3, r2
 8004b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	00da      	lsls	r2, r3, #3
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	18d3      	adds	r3, r2, r3
 8004b5a:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <USB_ActivateEndpoint+0x2cc>)
 8004b5c:	4694      	mov	ip, r2
 8004b5e:	4463      	add	r3, ip
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	059b      	lsls	r3, r3, #22
 8004b6a:	0d9b      	lsrs	r3, r3, #22
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	801a      	strh	r2, [r3, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b3e      	cmp	r3, #62	; 0x3e
 8004b78:	d91a      	bls.n	8004bb0 <USB_ActivateEndpoint+0x298>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	221f      	movs	r2, #31
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d102      	bne.n	8004b92 <USB_ActivateEndpoint+0x27a>
 8004b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	029b      	lsls	r3, r3, #10
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	4a10      	ldr	r2, [pc, #64]	; (8004be8 <USB_ActivateEndpoint+0x2d0>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	e034      	b.n	8004c1a <USB_ActivateEndpoint+0x302>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d119      	bne.n	8004bec <USB_ActivateEndpoint+0x2d4>
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <USB_ActivateEndpoint+0x2d0>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	e027      	b.n	8004c1a <USB_ActivateEndpoint+0x302>
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	ffff898f 	.word	0xffff898f
 8004bd0:	ffff8080 	.word	0xffff8080
 8004bd4:	ffff8f8f 	.word	0xffff8f8f
 8004bd8:	ffff80c0 	.word	0xffff80c0
 8004bdc:	ffff8fbf 	.word	0xffff8fbf
 8004be0:	00000404 	.word	0x00000404
 8004be4:	00000406 	.word	0x00000406
 8004be8:	ffff8000 	.word	0xffff8000
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	085b      	lsrs	r3, r3, #1
 8004bf2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d002      	beq.n	8004c04 <USB_ActivateEndpoint+0x2ec>
 8004bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c00:	3301      	adds	r3, #1
 8004c02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	029b      	lsls	r3, r3, #10
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	4313      	orrs	r3, r2
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	18d2      	adds	r2, r2, r3
 8004c24:	2122      	movs	r1, #34	; 0x22
 8004c26:	187b      	adds	r3, r7, r1
 8004c28:	8812      	ldrh	r2, [r2, #0]
 8004c2a:	801a      	strh	r2, [r3, #0]
 8004c2c:	187b      	adds	r3, r7, r1
 8004c2e:	881a      	ldrh	r2, [r3, #0]
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	01db      	lsls	r3, r3, #7
 8004c34:	4013      	ands	r3, r2
 8004c36:	d016      	beq.n	8004c66 <USB_ActivateEndpoint+0x34e>
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	18d3      	adds	r3, r2, r3
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	2020      	movs	r0, #32
 8004c48:	183b      	adds	r3, r7, r0
 8004c4a:	49dd      	ldr	r1, [pc, #884]	; (8004fc0 <USB_ActivateEndpoint+0x6a8>)
 8004c4c:	400a      	ands	r2, r1
 8004c4e:	801a      	strh	r2, [r3, #0]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	18d3      	adds	r3, r2, r3
 8004c5a:	183a      	adds	r2, r7, r0
 8004c5c:	8812      	ldrh	r2, [r2, #0]
 8004c5e:	49d9      	ldr	r1, [pc, #868]	; (8004fc4 <USB_ActivateEndpoint+0x6ac>)
 8004c60:	430a      	orrs	r2, r1
 8004c62:	b292      	uxth	r2, r2
 8004c64:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d125      	bne.n	8004cba <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	18d3      	adds	r3, r2, r3
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	201c      	movs	r0, #28
 8004c7e:	183b      	adds	r3, r7, r0
 8004c80:	49d1      	ldr	r1, [pc, #836]	; (8004fc8 <USB_ActivateEndpoint+0x6b0>)
 8004c82:	400a      	ands	r2, r1
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	183b      	adds	r3, r7, r0
 8004c88:	183a      	adds	r2, r7, r0
 8004c8a:	8812      	ldrh	r2, [r2, #0]
 8004c8c:	2180      	movs	r1, #128	; 0x80
 8004c8e:	0149      	lsls	r1, r1, #5
 8004c90:	404a      	eors	r2, r1
 8004c92:	801a      	strh	r2, [r3, #0]
 8004c94:	183b      	adds	r3, r7, r0
 8004c96:	183a      	adds	r2, r7, r0
 8004c98:	8812      	ldrh	r2, [r2, #0]
 8004c9a:	2180      	movs	r1, #128	; 0x80
 8004c9c:	0189      	lsls	r1, r1, #6
 8004c9e:	404a      	eors	r2, r1
 8004ca0:	801a      	strh	r2, [r3, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	18d3      	adds	r3, r2, r3
 8004cac:	183a      	adds	r2, r7, r0
 8004cae:	8812      	ldrh	r2, [r2, #0]
 8004cb0:	49c6      	ldr	r1, [pc, #792]	; (8004fcc <USB_ActivateEndpoint+0x6b4>)
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	b292      	uxth	r2, r2
 8004cb6:	801a      	strh	r2, [r3, #0]
 8004cb8:	e1c2      	b.n	8005040 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	18d3      	adds	r3, r2, r3
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	201e      	movs	r0, #30
 8004cca:	183b      	adds	r3, r7, r0
 8004ccc:	49be      	ldr	r1, [pc, #760]	; (8004fc8 <USB_ActivateEndpoint+0x6b0>)
 8004cce:	400a      	ands	r2, r1
 8004cd0:	801a      	strh	r2, [r3, #0]
 8004cd2:	183b      	adds	r3, r7, r0
 8004cd4:	183a      	adds	r2, r7, r0
 8004cd6:	8812      	ldrh	r2, [r2, #0]
 8004cd8:	2180      	movs	r1, #128	; 0x80
 8004cda:	0189      	lsls	r1, r1, #6
 8004cdc:	404a      	eors	r2, r1
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	18d3      	adds	r3, r2, r3
 8004cea:	183a      	adds	r2, r7, r0
 8004cec:	8812      	ldrh	r2, [r2, #0]
 8004cee:	49b7      	ldr	r1, [pc, #732]	; (8004fcc <USB_ActivateEndpoint+0x6b4>)
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	b292      	uxth	r2, r2
 8004cf4:	801a      	strh	r2, [r3, #0]
 8004cf6:	e1a3      	b.n	8005040 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	78db      	ldrb	r3, [r3, #3]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d117      	bne.n	8004d30 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	18d3      	adds	r3, r2, r3
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	2062      	movs	r0, #98	; 0x62
 8004d10:	183b      	adds	r3, r7, r0
 8004d12:	49ab      	ldr	r1, [pc, #684]	; (8004fc0 <USB_ActivateEndpoint+0x6a8>)
 8004d14:	400a      	ands	r2, r1
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	18d3      	adds	r3, r2, r3
 8004d22:	183a      	adds	r2, r7, r0
 8004d24:	8812      	ldrh	r2, [r2, #0]
 8004d26:	49aa      	ldr	r1, [pc, #680]	; (8004fd0 <USB_ActivateEndpoint+0x6b8>)
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	b292      	uxth	r2, r2
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	e016      	b.n	8004d5e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	18d3      	adds	r3, r2, r3
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	2064      	movs	r0, #100	; 0x64
 8004d40:	183b      	adds	r3, r7, r0
 8004d42:	49a4      	ldr	r1, [pc, #656]	; (8004fd4 <USB_ActivateEndpoint+0x6bc>)
 8004d44:	400a      	ands	r2, r1
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	18d3      	adds	r3, r2, r3
 8004d52:	183a      	adds	r2, r7, r0
 8004d54:	8812      	ldrh	r2, [r2, #0]
 8004d56:	499d      	ldr	r1, [pc, #628]	; (8004fcc <USB_ActivateEndpoint+0x6b4>)
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	b292      	uxth	r2, r2
 8004d5c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2250      	movs	r2, #80	; 0x50
 8004d66:	5a9b      	ldrh	r3, [r3, r2]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d6e:	189b      	adds	r3, r3, r2
 8004d70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	00da      	lsls	r2, r3, #3
 8004d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d7a:	18d3      	adds	r3, r2, r3
 8004d7c:	2280      	movs	r2, #128	; 0x80
 8004d7e:	00d2      	lsls	r2, r2, #3
 8004d80:	4694      	mov	ip, r2
 8004d82:	4463      	add	r3, ip
 8004d84:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	891b      	ldrh	r3, [r3, #8]
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	18db      	adds	r3, r3, r3
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d94:	801a      	strh	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	657b      	str	r3, [r7, #84]	; 0x54
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2250      	movs	r2, #80	; 0x50
 8004d9e:	5a9b      	ldrh	r3, [r3, r2]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	001a      	movs	r2, r3
 8004da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da6:	189b      	adds	r3, r3, r2
 8004da8:	657b      	str	r3, [r7, #84]	; 0x54
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	00da      	lsls	r2, r3, #3
 8004db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db2:	18d3      	adds	r3, r2, r3
 8004db4:	4a88      	ldr	r2, [pc, #544]	; (8004fd8 <USB_ActivateEndpoint+0x6c0>)
 8004db6:	4694      	mov	ip, r2
 8004db8:	4463      	add	r3, ip
 8004dba:	653b      	str	r3, [r7, #80]	; 0x50
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	895b      	ldrh	r3, [r3, #10]
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	18db      	adds	r3, r3, r3
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d000      	beq.n	8004dd6 <USB_ActivateEndpoint+0x4be>
 8004dd4:	e087      	b.n	8004ee6 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	18d2      	adds	r2, r2, r3
 8004de0:	2140      	movs	r1, #64	; 0x40
 8004de2:	187b      	adds	r3, r7, r1
 8004de4:	8812      	ldrh	r2, [r2, #0]
 8004de6:	801a      	strh	r2, [r3, #0]
 8004de8:	187b      	adds	r3, r7, r1
 8004dea:	881a      	ldrh	r2, [r3, #0]
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	01db      	lsls	r3, r3, #7
 8004df0:	4013      	ands	r3, r2
 8004df2:	d016      	beq.n	8004e22 <USB_ActivateEndpoint+0x50a>
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	18d3      	adds	r3, r2, r3
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	203e      	movs	r0, #62	; 0x3e
 8004e04:	183b      	adds	r3, r7, r0
 8004e06:	496e      	ldr	r1, [pc, #440]	; (8004fc0 <USB_ActivateEndpoint+0x6a8>)
 8004e08:	400a      	ands	r2, r1
 8004e0a:	801a      	strh	r2, [r3, #0]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	18d3      	adds	r3, r2, r3
 8004e16:	183a      	adds	r2, r7, r0
 8004e18:	8812      	ldrh	r2, [r2, #0]
 8004e1a:	496a      	ldr	r1, [pc, #424]	; (8004fc4 <USB_ActivateEndpoint+0x6ac>)
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	b292      	uxth	r2, r2
 8004e20:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	18d2      	adds	r2, r2, r3
 8004e2c:	213c      	movs	r1, #60	; 0x3c
 8004e2e:	187b      	adds	r3, r7, r1
 8004e30:	8812      	ldrh	r2, [r2, #0]
 8004e32:	801a      	strh	r2, [r3, #0]
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	2240      	movs	r2, #64	; 0x40
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d016      	beq.n	8004e6c <USB_ActivateEndpoint+0x554>
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	18d3      	adds	r3, r2, r3
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	203a      	movs	r0, #58	; 0x3a
 8004e4e:	183b      	adds	r3, r7, r0
 8004e50:	495b      	ldr	r1, [pc, #364]	; (8004fc0 <USB_ActivateEndpoint+0x6a8>)
 8004e52:	400a      	ands	r2, r1
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	18d3      	adds	r3, r2, r3
 8004e60:	183a      	adds	r2, r7, r0
 8004e62:	8812      	ldrh	r2, [r2, #0]
 8004e64:	495d      	ldr	r1, [pc, #372]	; (8004fdc <USB_ActivateEndpoint+0x6c4>)
 8004e66:	430a      	orrs	r2, r1
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	18d3      	adds	r3, r2, r3
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	2038      	movs	r0, #56	; 0x38
 8004e7c:	183b      	adds	r3, r7, r0
 8004e7e:	4952      	ldr	r1, [pc, #328]	; (8004fc8 <USB_ActivateEndpoint+0x6b0>)
 8004e80:	400a      	ands	r2, r1
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	183b      	adds	r3, r7, r0
 8004e86:	183a      	adds	r2, r7, r0
 8004e88:	8812      	ldrh	r2, [r2, #0]
 8004e8a:	2180      	movs	r1, #128	; 0x80
 8004e8c:	0149      	lsls	r1, r1, #5
 8004e8e:	404a      	eors	r2, r1
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	183b      	adds	r3, r7, r0
 8004e94:	183a      	adds	r2, r7, r0
 8004e96:	8812      	ldrh	r2, [r2, #0]
 8004e98:	2180      	movs	r1, #128	; 0x80
 8004e9a:	0189      	lsls	r1, r1, #6
 8004e9c:	404a      	eors	r2, r1
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	18d3      	adds	r3, r2, r3
 8004eaa:	183a      	adds	r2, r7, r0
 8004eac:	8812      	ldrh	r2, [r2, #0]
 8004eae:	4947      	ldr	r1, [pc, #284]	; (8004fcc <USB_ActivateEndpoint+0x6b4>)
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	b292      	uxth	r2, r2
 8004eb4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	18d3      	adds	r3, r2, r3
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	2036      	movs	r0, #54	; 0x36
 8004ec6:	183b      	adds	r3, r7, r0
 8004ec8:	4945      	ldr	r1, [pc, #276]	; (8004fe0 <USB_ActivateEndpoint+0x6c8>)
 8004eca:	400a      	ands	r2, r1
 8004ecc:	801a      	strh	r2, [r3, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	18d3      	adds	r3, r2, r3
 8004ed8:	183a      	adds	r2, r7, r0
 8004eda:	8812      	ldrh	r2, [r2, #0]
 8004edc:	493b      	ldr	r1, [pc, #236]	; (8004fcc <USB_ActivateEndpoint+0x6b4>)
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	b292      	uxth	r2, r2
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	e0ac      	b.n	8005040 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	18d2      	adds	r2, r2, r3
 8004ef0:	214e      	movs	r1, #78	; 0x4e
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	8812      	ldrh	r2, [r2, #0]
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	01db      	lsls	r3, r3, #7
 8004f00:	4013      	ands	r3, r2
 8004f02:	d016      	beq.n	8004f32 <USB_ActivateEndpoint+0x61a>
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	18d3      	adds	r3, r2, r3
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	204c      	movs	r0, #76	; 0x4c
 8004f14:	183b      	adds	r3, r7, r0
 8004f16:	492a      	ldr	r1, [pc, #168]	; (8004fc0 <USB_ActivateEndpoint+0x6a8>)
 8004f18:	400a      	ands	r2, r1
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	18d3      	adds	r3, r2, r3
 8004f26:	183a      	adds	r2, r7, r0
 8004f28:	8812      	ldrh	r2, [r2, #0]
 8004f2a:	4926      	ldr	r1, [pc, #152]	; (8004fc4 <USB_ActivateEndpoint+0x6ac>)
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	b292      	uxth	r2, r2
 8004f30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	18d2      	adds	r2, r2, r3
 8004f3c:	214a      	movs	r1, #74	; 0x4a
 8004f3e:	187b      	adds	r3, r7, r1
 8004f40:	8812      	ldrh	r2, [r2, #0]
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	187b      	adds	r3, r7, r1
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	2240      	movs	r2, #64	; 0x40
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d016      	beq.n	8004f7c <USB_ActivateEndpoint+0x664>
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	18d3      	adds	r3, r2, r3
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	2048      	movs	r0, #72	; 0x48
 8004f5e:	183b      	adds	r3, r7, r0
 8004f60:	4917      	ldr	r1, [pc, #92]	; (8004fc0 <USB_ActivateEndpoint+0x6a8>)
 8004f62:	400a      	ands	r2, r1
 8004f64:	801a      	strh	r2, [r3, #0]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	18d3      	adds	r3, r2, r3
 8004f70:	183a      	adds	r2, r7, r0
 8004f72:	8812      	ldrh	r2, [r2, #0]
 8004f74:	4919      	ldr	r1, [pc, #100]	; (8004fdc <USB_ActivateEndpoint+0x6c4>)
 8004f76:	430a      	orrs	r2, r1
 8004f78:	b292      	uxth	r2, r2
 8004f7a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	78db      	ldrb	r3, [r3, #3]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d02f      	beq.n	8004fe4 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	18d3      	adds	r3, r2, r3
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	2044      	movs	r0, #68	; 0x44
 8004f94:	183b      	adds	r3, r7, r0
 8004f96:	4912      	ldr	r1, [pc, #72]	; (8004fe0 <USB_ActivateEndpoint+0x6c8>)
 8004f98:	400a      	ands	r2, r1
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	183b      	adds	r3, r7, r0
 8004f9e:	183a      	adds	r2, r7, r0
 8004fa0:	8812      	ldrh	r2, [r2, #0]
 8004fa2:	2120      	movs	r1, #32
 8004fa4:	404a      	eors	r2, r1
 8004fa6:	801a      	strh	r2, [r3, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	18d3      	adds	r3, r2, r3
 8004fb2:	183a      	adds	r2, r7, r0
 8004fb4:	8812      	ldrh	r2, [r2, #0]
 8004fb6:	4905      	ldr	r1, [pc, #20]	; (8004fcc <USB_ActivateEndpoint+0x6b4>)
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	b292      	uxth	r2, r2
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	e028      	b.n	8005012 <USB_ActivateEndpoint+0x6fa>
 8004fc0:	ffff8f8f 	.word	0xffff8f8f
 8004fc4:	ffffc080 	.word	0xffffc080
 8004fc8:	ffffbf8f 	.word	0xffffbf8f
 8004fcc:	ffff8080 	.word	0xffff8080
 8004fd0:	ffff8180 	.word	0xffff8180
 8004fd4:	ffff8e8f 	.word	0xffff8e8f
 8004fd8:	00000404 	.word	0x00000404
 8004fdc:	ffff80c0 	.word	0xffff80c0
 8004fe0:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	18d3      	adds	r3, r2, r3
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	2046      	movs	r0, #70	; 0x46
 8004ff4:	183b      	adds	r3, r7, r0
 8004ff6:	4916      	ldr	r1, [pc, #88]	; (8005050 <USB_ActivateEndpoint+0x738>)
 8004ff8:	400a      	ands	r2, r1
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	18d3      	adds	r3, r2, r3
 8005006:	183a      	adds	r2, r7, r0
 8005008:	8812      	ldrh	r2, [r2, #0]
 800500a:	4912      	ldr	r1, [pc, #72]	; (8005054 <USB_ActivateEndpoint+0x73c>)
 800500c:	430a      	orrs	r2, r1
 800500e:	b292      	uxth	r2, r2
 8005010:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	18d3      	adds	r3, r2, r3
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29a      	uxth	r2, r3
 8005020:	2042      	movs	r0, #66	; 0x42
 8005022:	183b      	adds	r3, r7, r0
 8005024:	490c      	ldr	r1, [pc, #48]	; (8005058 <USB_ActivateEndpoint+0x740>)
 8005026:	400a      	ands	r2, r1
 8005028:	801a      	strh	r2, [r3, #0]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	18d3      	adds	r3, r2, r3
 8005034:	183a      	adds	r2, r7, r0
 8005036:	8812      	ldrh	r2, [r2, #0]
 8005038:	4906      	ldr	r1, [pc, #24]	; (8005054 <USB_ActivateEndpoint+0x73c>)
 800503a:	430a      	orrs	r2, r1
 800503c:	b292      	uxth	r2, r2
 800503e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005040:	236f      	movs	r3, #111	; 0x6f
 8005042:	18fb      	adds	r3, r7, r3
 8005044:	781b      	ldrb	r3, [r3, #0]
}
 8005046:	0018      	movs	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	b01c      	add	sp, #112	; 0x70
 800504c:	bd80      	pop	{r7, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	ffff8fbf 	.word	0xffff8fbf
 8005054:	ffff8080 	.word	0xffff8080
 8005058:	ffffbf8f 	.word	0xffffbf8f

0800505c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08c      	sub	sp, #48	; 0x30
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	7b1b      	ldrb	r3, [r3, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d000      	beq.n	8005070 <USB_DeactivateEndpoint+0x14>
 800506e:	e07e      	b.n	800516e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	785b      	ldrb	r3, [r3, #1]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d03c      	beq.n	80050f2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	18d2      	adds	r2, r2, r3
 8005082:	210c      	movs	r1, #12
 8005084:	187b      	adds	r3, r7, r1
 8005086:	8812      	ldrh	r2, [r2, #0]
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	187b      	adds	r3, r7, r1
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	2240      	movs	r2, #64	; 0x40
 8005090:	4013      	ands	r3, r2
 8005092:	d016      	beq.n	80050c2 <USB_DeactivateEndpoint+0x66>
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	18d3      	adds	r3, r2, r3
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	200a      	movs	r0, #10
 80050a4:	183b      	adds	r3, r7, r0
 80050a6:	49c7      	ldr	r1, [pc, #796]	; (80053c4 <USB_DeactivateEndpoint+0x368>)
 80050a8:	400a      	ands	r2, r1
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	18d3      	adds	r3, r2, r3
 80050b6:	183a      	adds	r2, r7, r0
 80050b8:	8812      	ldrh	r2, [r2, #0]
 80050ba:	49c3      	ldr	r1, [pc, #780]	; (80053c8 <USB_DeactivateEndpoint+0x36c>)
 80050bc:	430a      	orrs	r2, r1
 80050be:	b292      	uxth	r2, r2
 80050c0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	18d3      	adds	r3, r2, r3
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	2008      	movs	r0, #8
 80050d2:	183b      	adds	r3, r7, r0
 80050d4:	49bd      	ldr	r1, [pc, #756]	; (80053cc <USB_DeactivateEndpoint+0x370>)
 80050d6:	400a      	ands	r2, r1
 80050d8:	801a      	strh	r2, [r3, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	18d3      	adds	r3, r2, r3
 80050e4:	183a      	adds	r2, r7, r0
 80050e6:	8812      	ldrh	r2, [r2, #0]
 80050e8:	49b9      	ldr	r1, [pc, #740]	; (80053d0 <USB_DeactivateEndpoint+0x374>)
 80050ea:	430a      	orrs	r2, r1
 80050ec:	b292      	uxth	r2, r2
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	e163      	b.n	80053ba <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	18d2      	adds	r2, r2, r3
 80050fc:	2112      	movs	r1, #18
 80050fe:	187b      	adds	r3, r7, r1
 8005100:	8812      	ldrh	r2, [r2, #0]
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	187b      	adds	r3, r7, r1
 8005106:	881a      	ldrh	r2, [r3, #0]
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	01db      	lsls	r3, r3, #7
 800510c:	4013      	ands	r3, r2
 800510e:	d016      	beq.n	800513e <USB_DeactivateEndpoint+0xe2>
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	18d3      	adds	r3, r2, r3
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	b29a      	uxth	r2, r3
 800511e:	2010      	movs	r0, #16
 8005120:	183b      	adds	r3, r7, r0
 8005122:	49a8      	ldr	r1, [pc, #672]	; (80053c4 <USB_DeactivateEndpoint+0x368>)
 8005124:	400a      	ands	r2, r1
 8005126:	801a      	strh	r2, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	18d3      	adds	r3, r2, r3
 8005132:	183a      	adds	r2, r7, r0
 8005134:	8812      	ldrh	r2, [r2, #0]
 8005136:	49a7      	ldr	r1, [pc, #668]	; (80053d4 <USB_DeactivateEndpoint+0x378>)
 8005138:	430a      	orrs	r2, r1
 800513a:	b292      	uxth	r2, r2
 800513c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	18d3      	adds	r3, r2, r3
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29a      	uxth	r2, r3
 800514c:	200e      	movs	r0, #14
 800514e:	183b      	adds	r3, r7, r0
 8005150:	49a1      	ldr	r1, [pc, #644]	; (80053d8 <USB_DeactivateEndpoint+0x37c>)
 8005152:	400a      	ands	r2, r1
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	18d3      	adds	r3, r2, r3
 8005160:	183a      	adds	r2, r7, r0
 8005162:	8812      	ldrh	r2, [r2, #0]
 8005164:	499a      	ldr	r1, [pc, #616]	; (80053d0 <USB_DeactivateEndpoint+0x374>)
 8005166:	430a      	orrs	r2, r1
 8005168:	b292      	uxth	r2, r2
 800516a:	801a      	strh	r2, [r3, #0]
 800516c:	e125      	b.n	80053ba <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d000      	beq.n	8005178 <USB_DeactivateEndpoint+0x11c>
 8005176:	e090      	b.n	800529a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	18d2      	adds	r2, r2, r3
 8005182:	2120      	movs	r1, #32
 8005184:	187b      	adds	r3, r7, r1
 8005186:	8812      	ldrh	r2, [r2, #0]
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	187b      	adds	r3, r7, r1
 800518c:	881a      	ldrh	r2, [r3, #0]
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	01db      	lsls	r3, r3, #7
 8005192:	4013      	ands	r3, r2
 8005194:	d016      	beq.n	80051c4 <USB_DeactivateEndpoint+0x168>
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	18d3      	adds	r3, r2, r3
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	201e      	movs	r0, #30
 80051a6:	183b      	adds	r3, r7, r0
 80051a8:	4986      	ldr	r1, [pc, #536]	; (80053c4 <USB_DeactivateEndpoint+0x368>)
 80051aa:	400a      	ands	r2, r1
 80051ac:	801a      	strh	r2, [r3, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	18d3      	adds	r3, r2, r3
 80051b8:	183a      	adds	r2, r7, r0
 80051ba:	8812      	ldrh	r2, [r2, #0]
 80051bc:	4985      	ldr	r1, [pc, #532]	; (80053d4 <USB_DeactivateEndpoint+0x378>)
 80051be:	430a      	orrs	r2, r1
 80051c0:	b292      	uxth	r2, r2
 80051c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	18d2      	adds	r2, r2, r3
 80051ce:	211c      	movs	r1, #28
 80051d0:	187b      	adds	r3, r7, r1
 80051d2:	8812      	ldrh	r2, [r2, #0]
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	187b      	adds	r3, r7, r1
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	2240      	movs	r2, #64	; 0x40
 80051dc:	4013      	ands	r3, r2
 80051de:	d016      	beq.n	800520e <USB_DeactivateEndpoint+0x1b2>
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	18d3      	adds	r3, r2, r3
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	201a      	movs	r0, #26
 80051f0:	183b      	adds	r3, r7, r0
 80051f2:	4974      	ldr	r1, [pc, #464]	; (80053c4 <USB_DeactivateEndpoint+0x368>)
 80051f4:	400a      	ands	r2, r1
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	18d3      	adds	r3, r2, r3
 8005202:	183a      	adds	r2, r7, r0
 8005204:	8812      	ldrh	r2, [r2, #0]
 8005206:	4970      	ldr	r1, [pc, #448]	; (80053c8 <USB_DeactivateEndpoint+0x36c>)
 8005208:	430a      	orrs	r2, r1
 800520a:	b292      	uxth	r2, r2
 800520c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	18d3      	adds	r3, r2, r3
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29a      	uxth	r2, r3
 800521c:	2018      	movs	r0, #24
 800521e:	183b      	adds	r3, r7, r0
 8005220:	4968      	ldr	r1, [pc, #416]	; (80053c4 <USB_DeactivateEndpoint+0x368>)
 8005222:	400a      	ands	r2, r1
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	18d3      	adds	r3, r2, r3
 8005230:	183a      	adds	r2, r7, r0
 8005232:	8812      	ldrh	r2, [r2, #0]
 8005234:	4964      	ldr	r1, [pc, #400]	; (80053c8 <USB_DeactivateEndpoint+0x36c>)
 8005236:	430a      	orrs	r2, r1
 8005238:	b292      	uxth	r2, r2
 800523a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	18d3      	adds	r3, r2, r3
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	b29a      	uxth	r2, r3
 800524a:	2016      	movs	r0, #22
 800524c:	183b      	adds	r3, r7, r0
 800524e:	4962      	ldr	r1, [pc, #392]	; (80053d8 <USB_DeactivateEndpoint+0x37c>)
 8005250:	400a      	ands	r2, r1
 8005252:	801a      	strh	r2, [r3, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	18d3      	adds	r3, r2, r3
 800525e:	183a      	adds	r2, r7, r0
 8005260:	8812      	ldrh	r2, [r2, #0]
 8005262:	495b      	ldr	r1, [pc, #364]	; (80053d0 <USB_DeactivateEndpoint+0x374>)
 8005264:	430a      	orrs	r2, r1
 8005266:	b292      	uxth	r2, r2
 8005268:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	18d3      	adds	r3, r2, r3
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29a      	uxth	r2, r3
 8005278:	2014      	movs	r0, #20
 800527a:	183b      	adds	r3, r7, r0
 800527c:	4953      	ldr	r1, [pc, #332]	; (80053cc <USB_DeactivateEndpoint+0x370>)
 800527e:	400a      	ands	r2, r1
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	18d3      	adds	r3, r2, r3
 800528c:	183a      	adds	r2, r7, r0
 800528e:	8812      	ldrh	r2, [r2, #0]
 8005290:	494f      	ldr	r1, [pc, #316]	; (80053d0 <USB_DeactivateEndpoint+0x374>)
 8005292:	430a      	orrs	r2, r1
 8005294:	b292      	uxth	r2, r2
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	e08f      	b.n	80053ba <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	18d2      	adds	r2, r2, r3
 80052a4:	212e      	movs	r1, #46	; 0x2e
 80052a6:	187b      	adds	r3, r7, r1
 80052a8:	8812      	ldrh	r2, [r2, #0]
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	187b      	adds	r3, r7, r1
 80052ae:	881a      	ldrh	r2, [r3, #0]
 80052b0:	2380      	movs	r3, #128	; 0x80
 80052b2:	01db      	lsls	r3, r3, #7
 80052b4:	4013      	ands	r3, r2
 80052b6:	d016      	beq.n	80052e6 <USB_DeactivateEndpoint+0x28a>
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	18d3      	adds	r3, r2, r3
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	202c      	movs	r0, #44	; 0x2c
 80052c8:	183b      	adds	r3, r7, r0
 80052ca:	493e      	ldr	r1, [pc, #248]	; (80053c4 <USB_DeactivateEndpoint+0x368>)
 80052cc:	400a      	ands	r2, r1
 80052ce:	801a      	strh	r2, [r3, #0]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	18d3      	adds	r3, r2, r3
 80052da:	183a      	adds	r2, r7, r0
 80052dc:	8812      	ldrh	r2, [r2, #0]
 80052de:	493d      	ldr	r1, [pc, #244]	; (80053d4 <USB_DeactivateEndpoint+0x378>)
 80052e0:	430a      	orrs	r2, r1
 80052e2:	b292      	uxth	r2, r2
 80052e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	18d2      	adds	r2, r2, r3
 80052f0:	212a      	movs	r1, #42	; 0x2a
 80052f2:	187b      	adds	r3, r7, r1
 80052f4:	8812      	ldrh	r2, [r2, #0]
 80052f6:	801a      	strh	r2, [r3, #0]
 80052f8:	187b      	adds	r3, r7, r1
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	2240      	movs	r2, #64	; 0x40
 80052fe:	4013      	ands	r3, r2
 8005300:	d016      	beq.n	8005330 <USB_DeactivateEndpoint+0x2d4>
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	18d3      	adds	r3, r2, r3
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29a      	uxth	r2, r3
 8005310:	2028      	movs	r0, #40	; 0x28
 8005312:	183b      	adds	r3, r7, r0
 8005314:	492b      	ldr	r1, [pc, #172]	; (80053c4 <USB_DeactivateEndpoint+0x368>)
 8005316:	400a      	ands	r2, r1
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	18d3      	adds	r3, r2, r3
 8005324:	183a      	adds	r2, r7, r0
 8005326:	8812      	ldrh	r2, [r2, #0]
 8005328:	4927      	ldr	r1, [pc, #156]	; (80053c8 <USB_DeactivateEndpoint+0x36c>)
 800532a:	430a      	orrs	r2, r1
 800532c:	b292      	uxth	r2, r2
 800532e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	18d3      	adds	r3, r2, r3
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29a      	uxth	r2, r3
 800533e:	2026      	movs	r0, #38	; 0x26
 8005340:	183b      	adds	r3, r7, r0
 8005342:	4920      	ldr	r1, [pc, #128]	; (80053c4 <USB_DeactivateEndpoint+0x368>)
 8005344:	400a      	ands	r2, r1
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	18d3      	adds	r3, r2, r3
 8005352:	183a      	adds	r2, r7, r0
 8005354:	8812      	ldrh	r2, [r2, #0]
 8005356:	491f      	ldr	r1, [pc, #124]	; (80053d4 <USB_DeactivateEndpoint+0x378>)
 8005358:	430a      	orrs	r2, r1
 800535a:	b292      	uxth	r2, r2
 800535c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	18d3      	adds	r3, r2, r3
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29a      	uxth	r2, r3
 800536c:	2024      	movs	r0, #36	; 0x24
 800536e:	183b      	adds	r3, r7, r0
 8005370:	4916      	ldr	r1, [pc, #88]	; (80053cc <USB_DeactivateEndpoint+0x370>)
 8005372:	400a      	ands	r2, r1
 8005374:	801a      	strh	r2, [r3, #0]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	18d3      	adds	r3, r2, r3
 8005380:	183a      	adds	r2, r7, r0
 8005382:	8812      	ldrh	r2, [r2, #0]
 8005384:	4912      	ldr	r1, [pc, #72]	; (80053d0 <USB_DeactivateEndpoint+0x374>)
 8005386:	430a      	orrs	r2, r1
 8005388:	b292      	uxth	r2, r2
 800538a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	18d3      	adds	r3, r2, r3
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29a      	uxth	r2, r3
 800539a:	2022      	movs	r0, #34	; 0x22
 800539c:	183b      	adds	r3, r7, r0
 800539e:	490e      	ldr	r1, [pc, #56]	; (80053d8 <USB_DeactivateEndpoint+0x37c>)
 80053a0:	400a      	ands	r2, r1
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	18d3      	adds	r3, r2, r3
 80053ae:	183a      	adds	r2, r7, r0
 80053b0:	8812      	ldrh	r2, [r2, #0]
 80053b2:	4907      	ldr	r1, [pc, #28]	; (80053d0 <USB_DeactivateEndpoint+0x374>)
 80053b4:	430a      	orrs	r2, r1
 80053b6:	b292      	uxth	r2, r2
 80053b8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	0018      	movs	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	b00c      	add	sp, #48	; 0x30
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	ffff8f8f 	.word	0xffff8f8f
 80053c8:	ffff80c0 	.word	0xffff80c0
 80053cc:	ffff8fbf 	.word	0xffff8fbf
 80053d0:	ffff8080 	.word	0xffff8080
 80053d4:	ffffc080 	.word	0xffffc080
 80053d8:	ffffbf8f 	.word	0xffffbf8f

080053dc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b0c3      	sub	sp, #268	; 0x10c
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	785b      	ldrb	r3, [r3, #1]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d001      	beq.n	80053f2 <USB_EPStartXfer+0x16>
 80053ee:	f000 fd2d 	bl	8005e4c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d905      	bls.n	800540a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	1d7a      	adds	r2, r7, #5
 8005404:	32ff      	adds	r2, #255	; 0xff
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	e004      	b.n	8005414 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	1d7a      	adds	r2, r7, #5
 8005410:	32ff      	adds	r2, #255	; 0xff
 8005412:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	7b1b      	ldrb	r3, [r3, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d125      	bne.n	8005468 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	6959      	ldr	r1, [r3, #20]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	88da      	ldrh	r2, [r3, #6]
 8005424:	1d7b      	adds	r3, r7, #5
 8005426:	33ff      	adds	r3, #255	; 0xff
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 fa47 	bl	80068c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2250      	movs	r2, #80	; 0x50
 800543a:	5a9b      	ldrh	r3, [r3, r2]
 800543c:	b29b      	uxth	r3, r3
 800543e:	001a      	movs	r2, r3
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	189b      	adds	r3, r3, r2
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	00da      	lsls	r2, r3, #3
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	18d3      	adds	r3, r2, r3
 8005450:	4ad7      	ldr	r2, [pc, #860]	; (80057b0 <USB_EPStartXfer+0x3d4>)
 8005452:	4694      	mov	ip, r2
 8005454:	4463      	add	r3, ip
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	1d7b      	adds	r3, r7, #5
 800545a:	33ff      	adds	r3, #255	; 0xff
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	801a      	strh	r2, [r3, #0]
 8005464:	f000 fccd 	bl	8005e02 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	78db      	ldrb	r3, [r3, #3]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d000      	beq.n	8005472 <USB_EPStartXfer+0x96>
 8005470:	e362      	b.n	8005b38 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6a1a      	ldr	r2, [r3, #32]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	429a      	cmp	r2, r3
 800547c:	d800      	bhi.n	8005480 <USB_EPStartXfer+0xa4>
 800547e:	e309      	b.n	8005a94 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	18d3      	adds	r3, r2, r3
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29a      	uxth	r2, r3
 800548e:	2056      	movs	r0, #86	; 0x56
 8005490:	183b      	adds	r3, r7, r0
 8005492:	49c8      	ldr	r1, [pc, #800]	; (80057b4 <USB_EPStartXfer+0x3d8>)
 8005494:	400a      	ands	r2, r1
 8005496:	801a      	strh	r2, [r3, #0]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	18d3      	adds	r3, r2, r3
 80054a2:	183a      	adds	r2, r7, r0
 80054a4:	8812      	ldrh	r2, [r2, #0]
 80054a6:	49c4      	ldr	r1, [pc, #784]	; (80057b8 <USB_EPStartXfer+0x3dc>)
 80054a8:	430a      	orrs	r2, r1
 80054aa:	b292      	uxth	r2, r2
 80054ac:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	6a1a      	ldr	r2, [r3, #32]
 80054b2:	1d7b      	adds	r3, r7, #5
 80054b4:	33ff      	adds	r3, #255	; 0xff
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	1ad2      	subs	r2, r2, r3
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	18d3      	adds	r3, r2, r3
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	001a      	movs	r2, r3
 80054ce:	2340      	movs	r3, #64	; 0x40
 80054d0:	4013      	ands	r3, r2
 80054d2:	d100      	bne.n	80054d6 <USB_EPStartXfer+0xfa>
 80054d4:	e176      	b.n	80057c4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	633b      	str	r3, [r7, #48]	; 0x30
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d000      	beq.n	80054e4 <USB_EPStartXfer+0x108>
 80054e2:	e074      	b.n	80055ce <USB_EPStartXfer+0x1f2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2250      	movs	r2, #80	; 0x50
 80054ec:	5a9b      	ldrh	r3, [r3, r2]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	001a      	movs	r2, r3
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	189b      	adds	r3, r3, r2
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	00da      	lsls	r2, r3, #3
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	18d3      	adds	r3, r2, r3
 8005502:	4aae      	ldr	r2, [pc, #696]	; (80057bc <USB_EPStartXfer+0x3e0>)
 8005504:	4694      	mov	ip, r2
 8005506:	4463      	add	r3, ip
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	059b      	lsls	r3, r3, #22
 8005512:	0d9b      	lsrs	r3, r3, #22
 8005514:	b29a      	uxth	r2, r3
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	801a      	strh	r2, [r3, #0]
 800551a:	1d7b      	adds	r3, r7, #5
 800551c:	33ff      	adds	r3, #255	; 0xff
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b3e      	cmp	r3, #62	; 0x3e
 8005522:	d924      	bls.n	800556e <USB_EPStartXfer+0x192>
 8005524:	1d7b      	adds	r3, r7, #5
 8005526:	33ff      	adds	r3, #255	; 0xff
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	1c7a      	adds	r2, r7, #1
 800552e:	32ff      	adds	r2, #255	; 0xff
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	1d7b      	adds	r3, r7, #5
 8005534:	33ff      	adds	r3, #255	; 0xff
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	221f      	movs	r2, #31
 800553a:	4013      	ands	r3, r2
 800553c:	d106      	bne.n	800554c <USB_EPStartXfer+0x170>
 800553e:	1c7b      	adds	r3, r7, #1
 8005540:	33ff      	adds	r3, #255	; 0xff
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3b01      	subs	r3, #1
 8005546:	1c7a      	adds	r2, r7, #1
 8005548:	32ff      	adds	r2, #255	; 0xff
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29a      	uxth	r2, r3
 8005552:	1c7b      	adds	r3, r7, #1
 8005554:	33ff      	adds	r3, #255	; 0xff
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	029b      	lsls	r3, r3, #10
 800555c:	b29b      	uxth	r3, r3
 800555e:	4313      	orrs	r3, r2
 8005560:	b29b      	uxth	r3, r3
 8005562:	4a97      	ldr	r2, [pc, #604]	; (80057c0 <USB_EPStartXfer+0x3e4>)
 8005564:	4313      	orrs	r3, r2
 8005566:	b29a      	uxth	r2, r3
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e04a      	b.n	8005604 <USB_EPStartXfer+0x228>
 800556e:	1d7b      	adds	r3, r7, #5
 8005570:	33ff      	adds	r3, #255	; 0xff
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d108      	bne.n	800558a <USB_EPStartXfer+0x1ae>
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	4a90      	ldr	r2, [pc, #576]	; (80057c0 <USB_EPStartXfer+0x3e4>)
 8005580:	4313      	orrs	r3, r2
 8005582:	b29a      	uxth	r2, r3
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	e03c      	b.n	8005604 <USB_EPStartXfer+0x228>
 800558a:	1d7b      	adds	r3, r7, #5
 800558c:	33ff      	adds	r3, #255	; 0xff
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	1c7a      	adds	r2, r7, #1
 8005594:	32ff      	adds	r2, #255	; 0xff
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	1d7b      	adds	r3, r7, #5
 800559a:	33ff      	adds	r3, #255	; 0xff
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2201      	movs	r2, #1
 80055a0:	4013      	ands	r3, r2
 80055a2:	d006      	beq.n	80055b2 <USB_EPStartXfer+0x1d6>
 80055a4:	1c7b      	adds	r3, r7, #1
 80055a6:	33ff      	adds	r3, #255	; 0xff
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3301      	adds	r3, #1
 80055ac:	1c7a      	adds	r2, r7, #1
 80055ae:	32ff      	adds	r2, #255	; 0xff
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	1c7b      	adds	r3, r7, #1
 80055ba:	33ff      	adds	r3, #255	; 0xff
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	029b      	lsls	r3, r3, #10
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	4313      	orrs	r3, r2
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	e01a      	b.n	8005604 <USB_EPStartXfer+0x228>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	785b      	ldrb	r3, [r3, #1]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d116      	bne.n	8005604 <USB_EPStartXfer+0x228>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2250      	movs	r2, #80	; 0x50
 80055da:	5a9b      	ldrh	r3, [r3, r2]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	001a      	movs	r2, r3
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	189b      	adds	r3, r3, r2
 80055e4:	633b      	str	r3, [r7, #48]	; 0x30
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	00da      	lsls	r2, r3, #3
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	18d3      	adds	r3, r2, r3
 80055f0:	4a72      	ldr	r2, [pc, #456]	; (80057bc <USB_EPStartXfer+0x3e0>)
 80055f2:	4694      	mov	ip, r2
 80055f4:	4463      	add	r3, ip
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f8:	1d7b      	adds	r3, r7, #5
 80055fa:	33ff      	adds	r3, #255	; 0xff
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	b29a      	uxth	r2, r3
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005604:	2076      	movs	r0, #118	; 0x76
 8005606:	183b      	adds	r3, r7, r0
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	8952      	ldrh	r2, [r2, #10]
 800560c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6959      	ldr	r1, [r3, #20]
 8005612:	1d7b      	adds	r3, r7, #5
 8005614:	33ff      	adds	r3, #255	; 0xff
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b29c      	uxth	r4, r3
 800561a:	183b      	adds	r3, r7, r0
 800561c:	881a      	ldrh	r2, [r3, #0]
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	0023      	movs	r3, r4
 8005622:	f001 f94d 	bl	80068c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	1d7b      	adds	r3, r7, #5
 800562c:	33ff      	adds	r3, #255	; 0xff
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	18d2      	adds	r2, r2, r3
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6a1a      	ldr	r2, [r3, #32]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	429a      	cmp	r2, r3
 8005640:	d908      	bls.n	8005654 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6a1a      	ldr	r2, [r3, #32]
 8005646:	1d7b      	adds	r3, r7, #5
 8005648:	33ff      	adds	r3, #255	; 0xff
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	1ad2      	subs	r2, r2, r3
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	621a      	str	r2, [r3, #32]
 8005652:	e007      	b.n	8005664 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	1d7a      	adds	r2, r7, #5
 800565a:	32ff      	adds	r2, #255	; 0xff
 800565c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2200      	movs	r2, #0
 8005662:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	785b      	ldrb	r3, [r3, #1]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d000      	beq.n	800566e <USB_EPStartXfer+0x292>
 800566c:	e070      	b.n	8005750 <USB_EPStartXfer+0x374>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2250      	movs	r2, #80	; 0x50
 8005676:	5a9b      	ldrh	r3, [r3, r2]
 8005678:	b29b      	uxth	r3, r3
 800567a:	001a      	movs	r2, r3
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	189b      	adds	r3, r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	00da      	lsls	r2, r3, #3
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	18d3      	adds	r3, r2, r3
 800568c:	4a48      	ldr	r2, [pc, #288]	; (80057b0 <USB_EPStartXfer+0x3d4>)
 800568e:	4694      	mov	ip, r2
 8005690:	4463      	add	r3, ip
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	059b      	lsls	r3, r3, #22
 800569c:	0d9b      	lsrs	r3, r3, #22
 800569e:	b29a      	uxth	r2, r3
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	801a      	strh	r2, [r3, #0]
 80056a4:	1d7b      	adds	r3, r7, #5
 80056a6:	33ff      	adds	r3, #255	; 0xff
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b3e      	cmp	r3, #62	; 0x3e
 80056ac:	d922      	bls.n	80056f4 <USB_EPStartXfer+0x318>
 80056ae:	1d7b      	adds	r3, r7, #5
 80056b0:	33ff      	adds	r3, #255	; 0xff
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	21fc      	movs	r1, #252	; 0xfc
 80056b8:	187a      	adds	r2, r7, r1
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	1d7b      	adds	r3, r7, #5
 80056be:	33ff      	adds	r3, #255	; 0xff
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	221f      	movs	r2, #31
 80056c4:	4013      	ands	r3, r2
 80056c6:	d104      	bne.n	80056d2 <USB_EPStartXfer+0x2f6>
 80056c8:	187b      	adds	r3, r7, r1
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	187a      	adds	r2, r7, r1
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	23fc      	movs	r3, #252	; 0xfc
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	029b      	lsls	r3, r3, #10
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	4313      	orrs	r3, r2
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	4a35      	ldr	r2, [pc, #212]	; (80057c0 <USB_EPStartXfer+0x3e4>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	e04a      	b.n	800578a <USB_EPStartXfer+0x3ae>
 80056f4:	1d7b      	adds	r3, r7, #5
 80056f6:	33ff      	adds	r3, #255	; 0xff
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d108      	bne.n	8005710 <USB_EPStartXfer+0x334>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	4a2e      	ldr	r2, [pc, #184]	; (80057c0 <USB_EPStartXfer+0x3e4>)
 8005706:	4313      	orrs	r3, r2
 8005708:	b29a      	uxth	r2, r3
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	801a      	strh	r2, [r3, #0]
 800570e:	e03c      	b.n	800578a <USB_EPStartXfer+0x3ae>
 8005710:	1d7b      	adds	r3, r7, #5
 8005712:	33ff      	adds	r3, #255	; 0xff
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	21fc      	movs	r1, #252	; 0xfc
 800571a:	187a      	adds	r2, r7, r1
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	1d7b      	adds	r3, r7, #5
 8005720:	33ff      	adds	r3, #255	; 0xff
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2201      	movs	r2, #1
 8005726:	4013      	ands	r3, r2
 8005728:	d004      	beq.n	8005734 <USB_EPStartXfer+0x358>
 800572a:	187b      	adds	r3, r7, r1
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3301      	adds	r3, #1
 8005730:	187a      	adds	r2, r7, r1
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29a      	uxth	r2, r3
 800573a:	23fc      	movs	r3, #252	; 0xfc
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	029b      	lsls	r3, r3, #10
 8005744:	b29b      	uxth	r3, r3
 8005746:	4313      	orrs	r3, r2
 8005748:	b29a      	uxth	r2, r3
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	e01c      	b.n	800578a <USB_EPStartXfer+0x3ae>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d118      	bne.n	800578a <USB_EPStartXfer+0x3ae>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	623b      	str	r3, [r7, #32]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2250      	movs	r2, #80	; 0x50
 8005760:	5a9b      	ldrh	r3, [r3, r2]
 8005762:	b29b      	uxth	r3, r3
 8005764:	001a      	movs	r2, r3
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	189b      	adds	r3, r3, r2
 800576a:	623b      	str	r3, [r7, #32]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	00da      	lsls	r2, r3, #3
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	18d3      	adds	r3, r2, r3
 8005776:	4a0e      	ldr	r2, [pc, #56]	; (80057b0 <USB_EPStartXfer+0x3d4>)
 8005778:	4694      	mov	ip, r2
 800577a:	4463      	add	r3, ip
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	1d7b      	adds	r3, r7, #5
 8005780:	33ff      	adds	r3, #255	; 0xff
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	b29a      	uxth	r2, r3
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800578a:	2076      	movs	r0, #118	; 0x76
 800578c:	183b      	adds	r3, r7, r0
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	8912      	ldrh	r2, [r2, #8]
 8005792:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	6959      	ldr	r1, [r3, #20]
 8005798:	1d7b      	adds	r3, r7, #5
 800579a:	33ff      	adds	r3, #255	; 0xff
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	b29c      	uxth	r4, r3
 80057a0:	183b      	adds	r3, r7, r0
 80057a2:	881a      	ldrh	r2, [r3, #0]
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	0023      	movs	r3, r4
 80057a8:	f001 f88a 	bl	80068c0 <USB_WritePMA>
 80057ac:	e329      	b.n	8005e02 <USB_EPStartXfer+0xa26>
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	00000402 	.word	0x00000402
 80057b4:	ffff8f8f 	.word	0xffff8f8f
 80057b8:	ffff8180 	.word	0xffff8180
 80057bc:	00000406 	.word	0x00000406
 80057c0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d000      	beq.n	80057ce <USB_EPStartXfer+0x3f2>
 80057cc:	e070      	b.n	80058b0 <USB_EPStartXfer+0x4d4>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2250      	movs	r2, #80	; 0x50
 80057d6:	5a9b      	ldrh	r3, [r3, r2]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	001a      	movs	r2, r3
 80057dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057de:	189b      	adds	r3, r3, r2
 80057e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	00da      	lsls	r2, r3, #3
 80057e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ea:	18d3      	adds	r3, r2, r3
 80057ec:	4acd      	ldr	r2, [pc, #820]	; (8005b24 <USB_EPStartXfer+0x748>)
 80057ee:	4694      	mov	ip, r2
 80057f0:	4463      	add	r3, ip
 80057f2:	647b      	str	r3, [r7, #68]	; 0x44
 80057f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	059b      	lsls	r3, r3, #22
 80057fc:	0d9b      	lsrs	r3, r3, #22
 80057fe:	b29a      	uxth	r2, r3
 8005800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	1d7b      	adds	r3, r7, #5
 8005806:	33ff      	adds	r3, #255	; 0xff
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b3e      	cmp	r3, #62	; 0x3e
 800580c:	d922      	bls.n	8005854 <USB_EPStartXfer+0x478>
 800580e:	1d7b      	adds	r3, r7, #5
 8005810:	33ff      	adds	r3, #255	; 0xff
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	21f8      	movs	r1, #248	; 0xf8
 8005818:	187a      	adds	r2, r7, r1
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	1d7b      	adds	r3, r7, #5
 800581e:	33ff      	adds	r3, #255	; 0xff
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	221f      	movs	r2, #31
 8005824:	4013      	ands	r3, r2
 8005826:	d104      	bne.n	8005832 <USB_EPStartXfer+0x456>
 8005828:	187b      	adds	r3, r7, r1
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3b01      	subs	r3, #1
 800582e:	187a      	adds	r2, r7, r1
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29a      	uxth	r2, r3
 8005838:	23f8      	movs	r3, #248	; 0xf8
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	029b      	lsls	r3, r3, #10
 8005842:	b29b      	uxth	r3, r3
 8005844:	4313      	orrs	r3, r2
 8005846:	b29b      	uxth	r3, r3
 8005848:	4ab7      	ldr	r2, [pc, #732]	; (8005b28 <USB_EPStartXfer+0x74c>)
 800584a:	4313      	orrs	r3, r2
 800584c:	b29a      	uxth	r2, r3
 800584e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	e04a      	b.n	80058ea <USB_EPStartXfer+0x50e>
 8005854:	1d7b      	adds	r3, r7, #5
 8005856:	33ff      	adds	r3, #255	; 0xff
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d108      	bne.n	8005870 <USB_EPStartXfer+0x494>
 800585e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	4ab0      	ldr	r2, [pc, #704]	; (8005b28 <USB_EPStartXfer+0x74c>)
 8005866:	4313      	orrs	r3, r2
 8005868:	b29a      	uxth	r2, r3
 800586a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800586c:	801a      	strh	r2, [r3, #0]
 800586e:	e03c      	b.n	80058ea <USB_EPStartXfer+0x50e>
 8005870:	1d7b      	adds	r3, r7, #5
 8005872:	33ff      	adds	r3, #255	; 0xff
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	21f8      	movs	r1, #248	; 0xf8
 800587a:	187a      	adds	r2, r7, r1
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	1d7b      	adds	r3, r7, #5
 8005880:	33ff      	adds	r3, #255	; 0xff
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2201      	movs	r2, #1
 8005886:	4013      	ands	r3, r2
 8005888:	d004      	beq.n	8005894 <USB_EPStartXfer+0x4b8>
 800588a:	187b      	adds	r3, r7, r1
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3301      	adds	r3, #1
 8005890:	187a      	adds	r2, r7, r1
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29a      	uxth	r2, r3
 800589a:	23f8      	movs	r3, #248	; 0xf8
 800589c:	18fb      	adds	r3, r7, r3
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	029b      	lsls	r3, r3, #10
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	4313      	orrs	r3, r2
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ac:	801a      	strh	r2, [r3, #0]
 80058ae:	e01c      	b.n	80058ea <USB_EPStartXfer+0x50e>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d118      	bne.n	80058ea <USB_EPStartXfer+0x50e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	653b      	str	r3, [r7, #80]	; 0x50
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2250      	movs	r2, #80	; 0x50
 80058c0:	5a9b      	ldrh	r3, [r3, r2]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	001a      	movs	r2, r3
 80058c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c8:	189b      	adds	r3, r3, r2
 80058ca:	653b      	str	r3, [r7, #80]	; 0x50
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	00da      	lsls	r2, r3, #3
 80058d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d4:	18d3      	adds	r3, r2, r3
 80058d6:	4a93      	ldr	r2, [pc, #588]	; (8005b24 <USB_EPStartXfer+0x748>)
 80058d8:	4694      	mov	ip, r2
 80058da:	4463      	add	r3, ip
 80058dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058de:	1d7b      	adds	r3, r7, #5
 80058e0:	33ff      	adds	r3, #255	; 0xff
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058ea:	2076      	movs	r0, #118	; 0x76
 80058ec:	183b      	adds	r3, r7, r0
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	8912      	ldrh	r2, [r2, #8]
 80058f2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	6959      	ldr	r1, [r3, #20]
 80058f8:	1d7b      	adds	r3, r7, #5
 80058fa:	33ff      	adds	r3, #255	; 0xff
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	b29c      	uxth	r4, r3
 8005900:	183b      	adds	r3, r7, r0
 8005902:	881a      	ldrh	r2, [r3, #0]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	0023      	movs	r3, r4
 8005908:	f000 ffda 	bl	80068c0 <USB_WritePMA>
            ep->xfer_buff += len;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	695a      	ldr	r2, [r3, #20]
 8005910:	1d7b      	adds	r3, r7, #5
 8005912:	33ff      	adds	r3, #255	; 0xff
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	18d2      	adds	r2, r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	6a1a      	ldr	r2, [r3, #32]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	429a      	cmp	r2, r3
 8005926:	d908      	bls.n	800593a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	6a1a      	ldr	r2, [r3, #32]
 800592c:	1d7b      	adds	r3, r7, #5
 800592e:	33ff      	adds	r3, #255	; 0xff
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	1ad2      	subs	r2, r2, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	621a      	str	r2, [r3, #32]
 8005938:	e007      	b.n	800594a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	1d7a      	adds	r2, r7, #5
 8005940:	32ff      	adds	r2, #255	; 0xff
 8005942:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	643b      	str	r3, [r7, #64]	; 0x40
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d000      	beq.n	8005958 <USB_EPStartXfer+0x57c>
 8005956:	e070      	b.n	8005a3a <USB_EPStartXfer+0x65e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	63bb      	str	r3, [r7, #56]	; 0x38
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2250      	movs	r2, #80	; 0x50
 8005960:	5a9b      	ldrh	r3, [r3, r2]
 8005962:	b29b      	uxth	r3, r3
 8005964:	001a      	movs	r2, r3
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	189b      	adds	r3, r3, r2
 800596a:	63bb      	str	r3, [r7, #56]	; 0x38
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	00da      	lsls	r2, r3, #3
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	18d3      	adds	r3, r2, r3
 8005976:	4a6d      	ldr	r2, [pc, #436]	; (8005b2c <USB_EPStartXfer+0x750>)
 8005978:	4694      	mov	ip, r2
 800597a:	4463      	add	r3, ip
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
 800597e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	059b      	lsls	r3, r3, #22
 8005986:	0d9b      	lsrs	r3, r3, #22
 8005988:	b29a      	uxth	r2, r3
 800598a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	1d7b      	adds	r3, r7, #5
 8005990:	33ff      	adds	r3, #255	; 0xff
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b3e      	cmp	r3, #62	; 0x3e
 8005996:	d922      	bls.n	80059de <USB_EPStartXfer+0x602>
 8005998:	1d7b      	adds	r3, r7, #5
 800599a:	33ff      	adds	r3, #255	; 0xff
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	21f4      	movs	r1, #244	; 0xf4
 80059a2:	187a      	adds	r2, r7, r1
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	1d7b      	adds	r3, r7, #5
 80059a8:	33ff      	adds	r3, #255	; 0xff
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	221f      	movs	r2, #31
 80059ae:	4013      	ands	r3, r2
 80059b0:	d104      	bne.n	80059bc <USB_EPStartXfer+0x5e0>
 80059b2:	187b      	adds	r3, r7, r1
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	187a      	adds	r2, r7, r1
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	23f4      	movs	r3, #244	; 0xf4
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	029b      	lsls	r3, r3, #10
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	4313      	orrs	r3, r2
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	4a55      	ldr	r2, [pc, #340]	; (8005b28 <USB_EPStartXfer+0x74c>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e048      	b.n	8005a70 <USB_EPStartXfer+0x694>
 80059de:	1d7b      	adds	r3, r7, #5
 80059e0:	33ff      	adds	r3, #255	; 0xff
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d108      	bne.n	80059fa <USB_EPStartXfer+0x61e>
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	4a4e      	ldr	r2, [pc, #312]	; (8005b28 <USB_EPStartXfer+0x74c>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f6:	801a      	strh	r2, [r3, #0]
 80059f8:	e03a      	b.n	8005a70 <USB_EPStartXfer+0x694>
 80059fa:	1d7b      	adds	r3, r7, #5
 80059fc:	33ff      	adds	r3, #255	; 0xff
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	21f4      	movs	r1, #244	; 0xf4
 8005a04:	187a      	adds	r2, r7, r1
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	1d7b      	adds	r3, r7, #5
 8005a0a:	33ff      	adds	r3, #255	; 0xff
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	4013      	ands	r3, r2
 8005a12:	d004      	beq.n	8005a1e <USB_EPStartXfer+0x642>
 8005a14:	187b      	adds	r3, r7, r1
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	187a      	adds	r2, r7, r1
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	23f4      	movs	r3, #244	; 0xf4
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	029b      	lsls	r3, r3, #10
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	4313      	orrs	r3, r2
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	e01a      	b.n	8005a70 <USB_EPStartXfer+0x694>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d116      	bne.n	8005a70 <USB_EPStartXfer+0x694>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2250      	movs	r2, #80	; 0x50
 8005a46:	5a9b      	ldrh	r3, [r3, r2]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	001a      	movs	r2, r3
 8005a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a4e:	189b      	adds	r3, r3, r2
 8005a50:	643b      	str	r3, [r7, #64]	; 0x40
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	00da      	lsls	r2, r3, #3
 8005a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5a:	18d3      	adds	r3, r2, r3
 8005a5c:	4a33      	ldr	r2, [pc, #204]	; (8005b2c <USB_EPStartXfer+0x750>)
 8005a5e:	4694      	mov	ip, r2
 8005a60:	4463      	add	r3, ip
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a64:	1d7b      	adds	r3, r7, #5
 8005a66:	33ff      	adds	r3, #255	; 0xff
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a70:	2076      	movs	r0, #118	; 0x76
 8005a72:	183b      	adds	r3, r7, r0
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	8952      	ldrh	r2, [r2, #10]
 8005a78:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6959      	ldr	r1, [r3, #20]
 8005a7e:	1d7b      	adds	r3, r7, #5
 8005a80:	33ff      	adds	r3, #255	; 0xff
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	b29c      	uxth	r4, r3
 8005a86:	183b      	adds	r3, r7, r0
 8005a88:	881a      	ldrh	r2, [r3, #0]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	0023      	movs	r3, r4
 8005a8e:	f000 ff17 	bl	80068c0 <USB_WritePMA>
 8005a92:	e1b6      	b.n	8005e02 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	1d7a      	adds	r2, r7, #5
 8005a9a:	32ff      	adds	r2, #255	; 0xff
 8005a9c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	18d3      	adds	r3, r2, r3
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	2062      	movs	r0, #98	; 0x62
 8005aae:	183b      	adds	r3, r7, r0
 8005ab0:	491f      	ldr	r1, [pc, #124]	; (8005b30 <USB_EPStartXfer+0x754>)
 8005ab2:	400a      	ands	r2, r1
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	18d3      	adds	r3, r2, r3
 8005ac0:	183a      	adds	r2, r7, r0
 8005ac2:	8812      	ldrh	r2, [r2, #0]
 8005ac4:	491b      	ldr	r1, [pc, #108]	; (8005b34 <USB_EPStartXfer+0x758>)
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	b292      	uxth	r2, r2
 8005aca:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2250      	movs	r2, #80	; 0x50
 8005ad4:	5a9b      	ldrh	r3, [r3, r2]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	001a      	movs	r2, r3
 8005ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005adc:	189b      	adds	r3, r3, r2
 8005ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	00da      	lsls	r2, r3, #3
 8005ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae8:	18d3      	adds	r3, r2, r3
 8005aea:	4a0e      	ldr	r2, [pc, #56]	; (8005b24 <USB_EPStartXfer+0x748>)
 8005aec:	4694      	mov	ip, r2
 8005aee:	4463      	add	r3, ip
 8005af0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005af2:	1d7b      	adds	r3, r7, #5
 8005af4:	33ff      	adds	r3, #255	; 0xff
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005afc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005afe:	2076      	movs	r0, #118	; 0x76
 8005b00:	183b      	adds	r3, r7, r0
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	8912      	ldrh	r2, [r2, #8]
 8005b06:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	6959      	ldr	r1, [r3, #20]
 8005b0c:	1d7b      	adds	r3, r7, #5
 8005b0e:	33ff      	adds	r3, #255	; 0xff
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	b29c      	uxth	r4, r3
 8005b14:	183b      	adds	r3, r7, r0
 8005b16:	881a      	ldrh	r2, [r3, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	0023      	movs	r3, r4
 8005b1c:	f000 fed0 	bl	80068c0 <USB_WritePMA>
 8005b20:	e16f      	b.n	8005e02 <USB_EPStartXfer+0xa26>
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	00000402 	.word	0x00000402
 8005b28:	ffff8000 	.word	0xffff8000
 8005b2c:	00000406 	.word	0x00000406
 8005b30:	ffff8e8f 	.word	0xffff8e8f
 8005b34:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6a1a      	ldr	r2, [r3, #32]
 8005b3c:	1d7b      	adds	r3, r7, #5
 8005b3e:	33ff      	adds	r3, #255	; 0xff
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	1ad2      	subs	r2, r2, r3
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	18d3      	adds	r3, r2, r3
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	001a      	movs	r2, r3
 8005b58:	2340      	movs	r3, #64	; 0x40
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d100      	bne.n	8005b60 <USB_EPStartXfer+0x784>
 8005b5e:	e0a4      	b.n	8005caa <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	673b      	str	r3, [r7, #112]	; 0x70
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d000      	beq.n	8005b6e <USB_EPStartXfer+0x792>
 8005b6c:	e070      	b.n	8005c50 <USB_EPStartXfer+0x874>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2250      	movs	r2, #80	; 0x50
 8005b76:	5a9b      	ldrh	r3, [r3, r2]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	001a      	movs	r2, r3
 8005b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b7e:	189b      	adds	r3, r3, r2
 8005b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	00da      	lsls	r2, r3, #3
 8005b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b8a:	18d3      	adds	r3, r2, r3
 8005b8c:	4abc      	ldr	r2, [pc, #752]	; (8005e80 <USB_EPStartXfer+0xaa4>)
 8005b8e:	4694      	mov	ip, r2
 8005b90:	4463      	add	r3, ip
 8005b92:	667b      	str	r3, [r7, #100]	; 0x64
 8005b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	059b      	lsls	r3, r3, #22
 8005b9c:	0d9b      	lsrs	r3, r3, #22
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ba2:	801a      	strh	r2, [r3, #0]
 8005ba4:	1d7b      	adds	r3, r7, #5
 8005ba6:	33ff      	adds	r3, #255	; 0xff
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b3e      	cmp	r3, #62	; 0x3e
 8005bac:	d922      	bls.n	8005bf4 <USB_EPStartXfer+0x818>
 8005bae:	1d7b      	adds	r3, r7, #5
 8005bb0:	33ff      	adds	r3, #255	; 0xff
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	095b      	lsrs	r3, r3, #5
 8005bb6:	21f0      	movs	r1, #240	; 0xf0
 8005bb8:	187a      	adds	r2, r7, r1
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	1d7b      	adds	r3, r7, #5
 8005bbe:	33ff      	adds	r3, #255	; 0xff
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	221f      	movs	r2, #31
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d104      	bne.n	8005bd2 <USB_EPStartXfer+0x7f6>
 8005bc8:	187b      	adds	r3, r7, r1
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	187a      	adds	r2, r7, r1
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	23f0      	movs	r3, #240	; 0xf0
 8005bda:	18fb      	adds	r3, r7, r3
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	029b      	lsls	r3, r3, #10
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	4313      	orrs	r3, r2
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	4aa6      	ldr	r2, [pc, #664]	; (8005e84 <USB_EPStartXfer+0xaa8>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e048      	b.n	8005c86 <USB_EPStartXfer+0x8aa>
 8005bf4:	1d7b      	adds	r3, r7, #5
 8005bf6:	33ff      	adds	r3, #255	; 0xff
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d108      	bne.n	8005c10 <USB_EPStartXfer+0x834>
 8005bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	4a9f      	ldr	r2, [pc, #636]	; (8005e84 <USB_EPStartXfer+0xaa8>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e03a      	b.n	8005c86 <USB_EPStartXfer+0x8aa>
 8005c10:	1d7b      	adds	r3, r7, #5
 8005c12:	33ff      	adds	r3, #255	; 0xff
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	21f0      	movs	r1, #240	; 0xf0
 8005c1a:	187a      	adds	r2, r7, r1
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	1d7b      	adds	r3, r7, #5
 8005c20:	33ff      	adds	r3, #255	; 0xff
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2201      	movs	r2, #1
 8005c26:	4013      	ands	r3, r2
 8005c28:	d004      	beq.n	8005c34 <USB_EPStartXfer+0x858>
 8005c2a:	187b      	adds	r3, r7, r1
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	187a      	adds	r2, r7, r1
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	23f0      	movs	r3, #240	; 0xf0
 8005c3c:	18fb      	adds	r3, r7, r3
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	029b      	lsls	r3, r3, #10
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	4313      	orrs	r3, r2
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	e01a      	b.n	8005c86 <USB_EPStartXfer+0x8aa>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d116      	bne.n	8005c86 <USB_EPStartXfer+0x8aa>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2250      	movs	r2, #80	; 0x50
 8005c5c:	5a9b      	ldrh	r3, [r3, r2]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	001a      	movs	r2, r3
 8005c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c64:	189b      	adds	r3, r3, r2
 8005c66:	673b      	str	r3, [r7, #112]	; 0x70
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	00da      	lsls	r2, r3, #3
 8005c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c70:	18d3      	adds	r3, r2, r3
 8005c72:	4a83      	ldr	r2, [pc, #524]	; (8005e80 <USB_EPStartXfer+0xaa4>)
 8005c74:	4694      	mov	ip, r2
 8005c76:	4463      	add	r3, ip
 8005c78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c7a:	1d7b      	adds	r3, r7, #5
 8005c7c:	33ff      	adds	r3, #255	; 0xff
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c84:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c86:	2076      	movs	r0, #118	; 0x76
 8005c88:	183b      	adds	r3, r7, r0
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	8952      	ldrh	r2, [r2, #10]
 8005c8e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	6959      	ldr	r1, [r3, #20]
 8005c94:	1d7b      	adds	r3, r7, #5
 8005c96:	33ff      	adds	r3, #255	; 0xff
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	b29c      	uxth	r4, r3
 8005c9c:	183b      	adds	r3, r7, r0
 8005c9e:	881a      	ldrh	r2, [r3, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	0023      	movs	r3, r4
 8005ca4:	f000 fe0c 	bl	80068c0 <USB_WritePMA>
 8005ca8:	e0ab      	b.n	8005e02 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d000      	beq.n	8005cb4 <USB_EPStartXfer+0x8d8>
 8005cb2:	e070      	b.n	8005d96 <USB_EPStartXfer+0x9ba>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2250      	movs	r2, #80	; 0x50
 8005cbc:	5a9b      	ldrh	r3, [r3, r2]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	001a      	movs	r2, r3
 8005cc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cc4:	189b      	adds	r3, r3, r2
 8005cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	00da      	lsls	r2, r3, #3
 8005cce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cd0:	18d3      	adds	r3, r2, r3
 8005cd2:	4a6d      	ldr	r2, [pc, #436]	; (8005e88 <USB_EPStartXfer+0xaac>)
 8005cd4:	4694      	mov	ip, r2
 8005cd6:	4463      	add	r3, ip
 8005cd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	059b      	lsls	r3, r3, #22
 8005ce2:	0d9b      	lsrs	r3, r3, #22
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ce8:	801a      	strh	r2, [r3, #0]
 8005cea:	1d7b      	adds	r3, r7, #5
 8005cec:	33ff      	adds	r3, #255	; 0xff
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b3e      	cmp	r3, #62	; 0x3e
 8005cf2:	d922      	bls.n	8005d3a <USB_EPStartXfer+0x95e>
 8005cf4:	1d7b      	adds	r3, r7, #5
 8005cf6:	33ff      	adds	r3, #255	; 0xff
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	21ec      	movs	r1, #236	; 0xec
 8005cfe:	187a      	adds	r2, r7, r1
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	1d7b      	adds	r3, r7, #5
 8005d04:	33ff      	adds	r3, #255	; 0xff
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	221f      	movs	r2, #31
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d104      	bne.n	8005d18 <USB_EPStartXfer+0x93c>
 8005d0e:	187b      	adds	r3, r7, r1
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	187a      	adds	r2, r7, r1
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	23ec      	movs	r3, #236	; 0xec
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	029b      	lsls	r3, r3, #10
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	4a55      	ldr	r2, [pc, #340]	; (8005e84 <USB_EPStartXfer+0xaa8>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d36:	801a      	strh	r2, [r3, #0]
 8005d38:	e052      	b.n	8005de0 <USB_EPStartXfer+0xa04>
 8005d3a:	1d7b      	adds	r3, r7, #5
 8005d3c:	33ff      	adds	r3, #255	; 0xff
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d108      	bne.n	8005d56 <USB_EPStartXfer+0x97a>
 8005d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	4a4e      	ldr	r2, [pc, #312]	; (8005e84 <USB_EPStartXfer+0xaa8>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	e044      	b.n	8005de0 <USB_EPStartXfer+0xa04>
 8005d56:	1d7b      	adds	r3, r7, #5
 8005d58:	33ff      	adds	r3, #255	; 0xff
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	21ec      	movs	r1, #236	; 0xec
 8005d60:	187a      	adds	r2, r7, r1
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	1d7b      	adds	r3, r7, #5
 8005d66:	33ff      	adds	r3, #255	; 0xff
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <USB_EPStartXfer+0x99e>
 8005d70:	187b      	adds	r3, r7, r1
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	187a      	adds	r2, r7, r1
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	23ec      	movs	r3, #236	; 0xec
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d92:	801a      	strh	r2, [r3, #0]
 8005d94:	e024      	b.n	8005de0 <USB_EPStartXfer+0xa04>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	785b      	ldrb	r3, [r3, #1]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d120      	bne.n	8005de0 <USB_EPStartXfer+0xa04>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2184      	movs	r1, #132	; 0x84
 8005da2:	187a      	adds	r2, r7, r1
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2250      	movs	r2, #80	; 0x50
 8005daa:	5a9b      	ldrh	r3, [r3, r2]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	001a      	movs	r2, r3
 8005db0:	187b      	adds	r3, r7, r1
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	189b      	adds	r3, r3, r2
 8005db6:	187a      	adds	r2, r7, r1
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	00da      	lsls	r2, r3, #3
 8005dc0:	187b      	adds	r3, r7, r1
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	18d3      	adds	r3, r2, r3
 8005dc6:	4a30      	ldr	r2, [pc, #192]	; (8005e88 <USB_EPStartXfer+0xaac>)
 8005dc8:	4694      	mov	ip, r2
 8005dca:	4463      	add	r3, ip
 8005dcc:	2180      	movs	r1, #128	; 0x80
 8005dce:	187a      	adds	r2, r7, r1
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	1d7b      	adds	r3, r7, #5
 8005dd4:	33ff      	adds	r3, #255	; 0xff
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	187b      	adds	r3, r7, r1
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005de0:	2076      	movs	r0, #118	; 0x76
 8005de2:	183b      	adds	r3, r7, r0
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	8912      	ldrh	r2, [r2, #8]
 8005de8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6959      	ldr	r1, [r3, #20]
 8005dee:	1d7b      	adds	r3, r7, #5
 8005df0:	33ff      	adds	r3, #255	; 0xff
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	b29c      	uxth	r4, r3
 8005df6:	183b      	adds	r3, r7, r0
 8005df8:	881a      	ldrh	r2, [r3, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	0023      	movs	r3, r4
 8005dfe:	f000 fd5f 	bl	80068c0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	18d3      	adds	r3, r2, r3
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	200a      	movs	r0, #10
 8005e12:	183b      	adds	r3, r7, r0
 8005e14:	491d      	ldr	r1, [pc, #116]	; (8005e8c <USB_EPStartXfer+0xab0>)
 8005e16:	400a      	ands	r2, r1
 8005e18:	801a      	strh	r2, [r3, #0]
 8005e1a:	183b      	adds	r3, r7, r0
 8005e1c:	183a      	adds	r2, r7, r0
 8005e1e:	8812      	ldrh	r2, [r2, #0]
 8005e20:	2110      	movs	r1, #16
 8005e22:	404a      	eors	r2, r1
 8005e24:	801a      	strh	r2, [r3, #0]
 8005e26:	183b      	adds	r3, r7, r0
 8005e28:	183a      	adds	r2, r7, r0
 8005e2a:	8812      	ldrh	r2, [r2, #0]
 8005e2c:	2120      	movs	r1, #32
 8005e2e:	404a      	eors	r2, r1
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	18d3      	adds	r3, r2, r3
 8005e3c:	183a      	adds	r2, r7, r0
 8005e3e:	8812      	ldrh	r2, [r2, #0]
 8005e40:	4913      	ldr	r1, [pc, #76]	; (8005e90 <USB_EPStartXfer+0xab4>)
 8005e42:	430a      	orrs	r2, r1
 8005e44:	b292      	uxth	r2, r2
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	f000 fbf4 	bl	8006634 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	7b1b      	ldrb	r3, [r3, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d000      	beq.n	8005e56 <USB_EPStartXfer+0xa7a>
 8005e54:	e0a9      	b.n	8005faa <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d918      	bls.n	8005e94 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	1d7a      	adds	r2, r7, #5
 8005e68:	32ff      	adds	r2, #255	; 0xff
 8005e6a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	699a      	ldr	r2, [r3, #24]
 8005e70:	1d7b      	adds	r3, r7, #5
 8005e72:	33ff      	adds	r3, #255	; 0xff
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	1ad2      	subs	r2, r2, r3
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	619a      	str	r2, [r3, #24]
 8005e7c:	e012      	b.n	8005ea4 <USB_EPStartXfer+0xac8>
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	00000406 	.word	0x00000406
 8005e84:	ffff8000 	.word	0xffff8000
 8005e88:	00000402 	.word	0x00000402
 8005e8c:	ffff8fbf 	.word	0xffff8fbf
 8005e90:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	1d7a      	adds	r2, r7, #5
 8005e9a:	32ff      	adds	r2, #255	; 0xff
 8005e9c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2190      	movs	r1, #144	; 0x90
 8005ea8:	187a      	adds	r2, r7, r1
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2250      	movs	r2, #80	; 0x50
 8005eb0:	5a9b      	ldrh	r3, [r3, r2]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	001a      	movs	r2, r3
 8005eb6:	187b      	adds	r3, r7, r1
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	189b      	adds	r3, r3, r2
 8005ebc:	187a      	adds	r2, r7, r1
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	00da      	lsls	r2, r3, #3
 8005ec6:	187b      	adds	r3, r7, r1
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	18d3      	adds	r3, r2, r3
 8005ecc:	4acf      	ldr	r2, [pc, #828]	; (800620c <USB_EPStartXfer+0xe30>)
 8005ece:	4694      	mov	ip, r2
 8005ed0:	4463      	add	r3, ip
 8005ed2:	218c      	movs	r1, #140	; 0x8c
 8005ed4:	187a      	adds	r2, r7, r1
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	187b      	adds	r3, r7, r1
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	059b      	lsls	r3, r3, #22
 8005ee2:	0d9b      	lsrs	r3, r3, #22
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	187b      	adds	r3, r7, r1
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	801a      	strh	r2, [r3, #0]
 8005eec:	1d7b      	adds	r3, r7, #5
 8005eee:	33ff      	adds	r3, #255	; 0xff
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ef4:	d925      	bls.n	8005f42 <USB_EPStartXfer+0xb66>
 8005ef6:	1d7b      	adds	r3, r7, #5
 8005ef8:	33ff      	adds	r3, #255	; 0xff
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	21e8      	movs	r1, #232	; 0xe8
 8005f00:	187a      	adds	r2, r7, r1
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	1d7b      	adds	r3, r7, #5
 8005f06:	33ff      	adds	r3, #255	; 0xff
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	221f      	movs	r2, #31
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d104      	bne.n	8005f1a <USB_EPStartXfer+0xb3e>
 8005f10:	187b      	adds	r3, r7, r1
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	187a      	adds	r2, r7, r1
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	218c      	movs	r1, #140	; 0x8c
 8005f1c:	187b      	adds	r3, r7, r1
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	23e8      	movs	r3, #232	; 0xe8
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	029b      	lsls	r3, r3, #10
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	4313      	orrs	r3, r2
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	4ab6      	ldr	r2, [pc, #728]	; (8006210 <USB_EPStartXfer+0xe34>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	187b      	adds	r3, r7, r1
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	801a      	strh	r2, [r3, #0]
 8005f40:	e353      	b.n	80065ea <USB_EPStartXfer+0x120e>
 8005f42:	1d7b      	adds	r3, r7, #5
 8005f44:	33ff      	adds	r3, #255	; 0xff
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <USB_EPStartXfer+0xb88>
 8005f4c:	218c      	movs	r1, #140	; 0x8c
 8005f4e:	187b      	adds	r3, r7, r1
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	4aae      	ldr	r2, [pc, #696]	; (8006210 <USB_EPStartXfer+0xe34>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	187b      	adds	r3, r7, r1
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	e342      	b.n	80065ea <USB_EPStartXfer+0x120e>
 8005f64:	1d7b      	adds	r3, r7, #5
 8005f66:	33ff      	adds	r3, #255	; 0xff
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	21e8      	movs	r1, #232	; 0xe8
 8005f6e:	187a      	adds	r2, r7, r1
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	1d7b      	adds	r3, r7, #5
 8005f74:	33ff      	adds	r3, #255	; 0xff
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d004      	beq.n	8005f88 <USB_EPStartXfer+0xbac>
 8005f7e:	187b      	adds	r3, r7, r1
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3301      	adds	r3, #1
 8005f84:	187a      	adds	r2, r7, r1
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	218c      	movs	r1, #140	; 0x8c
 8005f8a:	187b      	adds	r3, r7, r1
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	23e8      	movs	r3, #232	; 0xe8
 8005f94:	18fb      	adds	r3, r7, r3
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	029b      	lsls	r3, r3, #10
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	187b      	adds	r3, r7, r1
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	801a      	strh	r2, [r3, #0]
 8005fa8:	e31f      	b.n	80065ea <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	78db      	ldrb	r3, [r3, #3]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d000      	beq.n	8005fb4 <USB_EPStartXfer+0xbd8>
 8005fb2:	e191      	b.n	80062d8 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d000      	beq.n	8005fbe <USB_EPStartXfer+0xbe2>
 8005fbc:	e07c      	b.n	80060b8 <USB_EPStartXfer+0xcdc>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	21ac      	movs	r1, #172	; 0xac
 8005fc2:	187a      	adds	r2, r7, r1
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2250      	movs	r2, #80	; 0x50
 8005fca:	5a9b      	ldrh	r3, [r3, r2]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	001a      	movs	r2, r3
 8005fd0:	187b      	adds	r3, r7, r1
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	189b      	adds	r3, r3, r2
 8005fd6:	187a      	adds	r2, r7, r1
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	00da      	lsls	r2, r3, #3
 8005fe0:	187b      	adds	r3, r7, r1
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	18d3      	adds	r3, r2, r3
 8005fe6:	4a8b      	ldr	r2, [pc, #556]	; (8006214 <USB_EPStartXfer+0xe38>)
 8005fe8:	4694      	mov	ip, r2
 8005fea:	4463      	add	r3, ip
 8005fec:	21a8      	movs	r1, #168	; 0xa8
 8005fee:	187a      	adds	r2, r7, r1
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	187b      	adds	r3, r7, r1
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	059b      	lsls	r3, r3, #22
 8005ffc:	0d9b      	lsrs	r3, r3, #22
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	187b      	adds	r3, r7, r1
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b3e      	cmp	r3, #62	; 0x3e
 800600c:	d923      	bls.n	8006056 <USB_EPStartXfer+0xc7a>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	21e4      	movs	r1, #228	; 0xe4
 8006016:	187a      	adds	r2, r7, r1
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	221f      	movs	r2, #31
 8006020:	4013      	ands	r3, r2
 8006022:	d104      	bne.n	800602e <USB_EPStartXfer+0xc52>
 8006024:	187b      	adds	r3, r7, r1
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3b01      	subs	r3, #1
 800602a:	187a      	adds	r2, r7, r1
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	21a8      	movs	r1, #168	; 0xa8
 8006030:	187b      	adds	r3, r7, r1
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29a      	uxth	r2, r3
 8006038:	23e4      	movs	r3, #228	; 0xe4
 800603a:	18fb      	adds	r3, r7, r3
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	029b      	lsls	r3, r3, #10
 8006042:	b29b      	uxth	r3, r3
 8006044:	4313      	orrs	r3, r2
 8006046:	b29b      	uxth	r3, r3
 8006048:	4a71      	ldr	r2, [pc, #452]	; (8006210 <USB_EPStartXfer+0xe34>)
 800604a:	4313      	orrs	r3, r2
 800604c:	b29a      	uxth	r2, r3
 800604e:	187b      	adds	r3, r7, r1
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	e054      	b.n	8006100 <USB_EPStartXfer+0xd24>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10b      	bne.n	8006076 <USB_EPStartXfer+0xc9a>
 800605e:	21a8      	movs	r1, #168	; 0xa8
 8006060:	187b      	adds	r3, r7, r1
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	4a69      	ldr	r2, [pc, #420]	; (8006210 <USB_EPStartXfer+0xe34>)
 800606a:	4313      	orrs	r3, r2
 800606c:	b29a      	uxth	r2, r3
 800606e:	187b      	adds	r3, r7, r1
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	801a      	strh	r2, [r3, #0]
 8006074:	e044      	b.n	8006100 <USB_EPStartXfer+0xd24>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	085b      	lsrs	r3, r3, #1
 800607c:	21e4      	movs	r1, #228	; 0xe4
 800607e:	187a      	adds	r2, r7, r1
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2201      	movs	r2, #1
 8006088:	4013      	ands	r3, r2
 800608a:	d004      	beq.n	8006096 <USB_EPStartXfer+0xcba>
 800608c:	187b      	adds	r3, r7, r1
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3301      	adds	r3, #1
 8006092:	187a      	adds	r2, r7, r1
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	21a8      	movs	r1, #168	; 0xa8
 8006098:	187b      	adds	r3, r7, r1
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29a      	uxth	r2, r3
 80060a0:	23e4      	movs	r3, #228	; 0xe4
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	029b      	lsls	r3, r3, #10
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	4313      	orrs	r3, r2
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	187b      	adds	r3, r7, r1
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	e023      	b.n	8006100 <USB_EPStartXfer+0xd24>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d11f      	bne.n	8006100 <USB_EPStartXfer+0xd24>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	21b4      	movs	r1, #180	; 0xb4
 80060c4:	187a      	adds	r2, r7, r1
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2250      	movs	r2, #80	; 0x50
 80060cc:	5a9b      	ldrh	r3, [r3, r2]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	001a      	movs	r2, r3
 80060d2:	187b      	adds	r3, r7, r1
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	189b      	adds	r3, r3, r2
 80060d8:	187a      	adds	r2, r7, r1
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	00da      	lsls	r2, r3, #3
 80060e2:	187b      	adds	r3, r7, r1
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	18d3      	adds	r3, r2, r3
 80060e8:	4a4a      	ldr	r2, [pc, #296]	; (8006214 <USB_EPStartXfer+0xe38>)
 80060ea:	4694      	mov	ip, r2
 80060ec:	4463      	add	r3, ip
 80060ee:	21b0      	movs	r1, #176	; 0xb0
 80060f0:	187a      	adds	r2, r7, r1
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	187b      	adds	r3, r7, r1
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	801a      	strh	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	22a4      	movs	r2, #164	; 0xa4
 8006104:	18ba      	adds	r2, r7, r2
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d000      	beq.n	8006112 <USB_EPStartXfer+0xd36>
 8006110:	e082      	b.n	8006218 <USB_EPStartXfer+0xe3c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	219c      	movs	r1, #156	; 0x9c
 8006116:	187a      	adds	r2, r7, r1
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2250      	movs	r2, #80	; 0x50
 800611e:	5a9b      	ldrh	r3, [r3, r2]
 8006120:	b29b      	uxth	r3, r3
 8006122:	001a      	movs	r2, r3
 8006124:	187b      	adds	r3, r7, r1
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	189b      	adds	r3, r3, r2
 800612a:	187a      	adds	r2, r7, r1
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	00da      	lsls	r2, r3, #3
 8006134:	187b      	adds	r3, r7, r1
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	18d3      	adds	r3, r2, r3
 800613a:	4a34      	ldr	r2, [pc, #208]	; (800620c <USB_EPStartXfer+0xe30>)
 800613c:	4694      	mov	ip, r2
 800613e:	4463      	add	r3, ip
 8006140:	2198      	movs	r1, #152	; 0x98
 8006142:	187a      	adds	r2, r7, r1
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	187b      	adds	r3, r7, r1
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	059b      	lsls	r3, r3, #22
 8006150:	0d9b      	lsrs	r3, r3, #22
 8006152:	b29a      	uxth	r2, r3
 8006154:	187b      	adds	r3, r7, r1
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b3e      	cmp	r3, #62	; 0x3e
 8006160:	d923      	bls.n	80061aa <USB_EPStartXfer+0xdce>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	21e0      	movs	r1, #224	; 0xe0
 800616a:	187a      	adds	r2, r7, r1
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	221f      	movs	r2, #31
 8006174:	4013      	ands	r3, r2
 8006176:	d104      	bne.n	8006182 <USB_EPStartXfer+0xda6>
 8006178:	187b      	adds	r3, r7, r1
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3b01      	subs	r3, #1
 800617e:	187a      	adds	r2, r7, r1
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	2198      	movs	r1, #152	; 0x98
 8006184:	187b      	adds	r3, r7, r1
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29a      	uxth	r2, r3
 800618c:	23e0      	movs	r3, #224	; 0xe0
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	029b      	lsls	r3, r3, #10
 8006196:	b29b      	uxth	r3, r3
 8006198:	4313      	orrs	r3, r2
 800619a:	b29b      	uxth	r3, r3
 800619c:	4a1c      	ldr	r2, [pc, #112]	; (8006210 <USB_EPStartXfer+0xe34>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	187b      	adds	r3, r7, r1
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	e057      	b.n	800625a <USB_EPStartXfer+0xe7e>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10b      	bne.n	80061ca <USB_EPStartXfer+0xdee>
 80061b2:	2198      	movs	r1, #152	; 0x98
 80061b4:	187b      	adds	r3, r7, r1
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	4a14      	ldr	r2, [pc, #80]	; (8006210 <USB_EPStartXfer+0xe34>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	187b      	adds	r3, r7, r1
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	e047      	b.n	800625a <USB_EPStartXfer+0xe7e>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	21e0      	movs	r1, #224	; 0xe0
 80061d2:	187a      	adds	r2, r7, r1
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2201      	movs	r2, #1
 80061dc:	4013      	ands	r3, r2
 80061de:	d004      	beq.n	80061ea <USB_EPStartXfer+0xe0e>
 80061e0:	187b      	adds	r3, r7, r1
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3301      	adds	r3, #1
 80061e6:	187a      	adds	r2, r7, r1
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	2198      	movs	r1, #152	; 0x98
 80061ec:	187b      	adds	r3, r7, r1
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	23e0      	movs	r3, #224	; 0xe0
 80061f6:	18fb      	adds	r3, r7, r3
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	029b      	lsls	r3, r3, #10
 80061fe:	b29b      	uxth	r3, r3
 8006200:	4313      	orrs	r3, r2
 8006202:	b29a      	uxth	r2, r3
 8006204:	187b      	adds	r3, r7, r1
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	801a      	strh	r2, [r3, #0]
 800620a:	e026      	b.n	800625a <USB_EPStartXfer+0xe7e>
 800620c:	00000406 	.word	0x00000406
 8006210:	ffff8000 	.word	0xffff8000
 8006214:	00000402 	.word	0x00000402
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d11c      	bne.n	800625a <USB_EPStartXfer+0xe7e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2250      	movs	r2, #80	; 0x50
 8006224:	5a9b      	ldrh	r3, [r3, r2]
 8006226:	b29b      	uxth	r3, r3
 8006228:	001a      	movs	r2, r3
 800622a:	21a4      	movs	r1, #164	; 0xa4
 800622c:	187b      	adds	r3, r7, r1
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	189b      	adds	r3, r3, r2
 8006232:	187a      	adds	r2, r7, r1
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	00da      	lsls	r2, r3, #3
 800623c:	187b      	adds	r3, r7, r1
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	18d3      	adds	r3, r2, r3
 8006242:	4ad2      	ldr	r2, [pc, #840]	; (800658c <USB_EPStartXfer+0x11b0>)
 8006244:	4694      	mov	ip, r2
 8006246:	4463      	add	r3, ip
 8006248:	21a0      	movs	r1, #160	; 0xa0
 800624a:	187a      	adds	r2, r7, r1
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	b29a      	uxth	r2, r3
 8006254:	187b      	adds	r3, r7, r1
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d100      	bne.n	8006264 <USB_EPStartXfer+0xe88>
 8006262:	e1c2      	b.n	80065ea <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	18d2      	adds	r2, r2, r3
 800626e:	2196      	movs	r1, #150	; 0x96
 8006270:	187b      	adds	r3, r7, r1
 8006272:	8812      	ldrh	r2, [r2, #0]
 8006274:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006276:	187b      	adds	r3, r7, r1
 8006278:	881a      	ldrh	r2, [r3, #0]
 800627a:	2380      	movs	r3, #128	; 0x80
 800627c:	01db      	lsls	r3, r3, #7
 800627e:	4013      	ands	r3, r2
 8006280:	d004      	beq.n	800628c <USB_EPStartXfer+0xeb0>
 8006282:	187b      	adds	r3, r7, r1
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	2240      	movs	r2, #64	; 0x40
 8006288:	4013      	ands	r3, r2
 800628a:	d10d      	bne.n	80062a8 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800628c:	2196      	movs	r1, #150	; 0x96
 800628e:	187b      	adds	r3, r7, r1
 8006290:	881a      	ldrh	r2, [r3, #0]
 8006292:	2380      	movs	r3, #128	; 0x80
 8006294:	01db      	lsls	r3, r3, #7
 8006296:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006298:	d000      	beq.n	800629c <USB_EPStartXfer+0xec0>
 800629a:	e1a6      	b.n	80065ea <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800629c:	187b      	adds	r3, r7, r1
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	2240      	movs	r2, #64	; 0x40
 80062a2:	4013      	ands	r3, r2
 80062a4:	d000      	beq.n	80062a8 <USB_EPStartXfer+0xecc>
 80062a6:	e1a0      	b.n	80065ea <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	18d3      	adds	r3, r2, r3
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	2094      	movs	r0, #148	; 0x94
 80062b8:	183b      	adds	r3, r7, r0
 80062ba:	49b5      	ldr	r1, [pc, #724]	; (8006590 <USB_EPStartXfer+0x11b4>)
 80062bc:	400a      	ands	r2, r1
 80062be:	801a      	strh	r2, [r3, #0]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	18d3      	adds	r3, r2, r3
 80062ca:	183a      	adds	r2, r7, r0
 80062cc:	8812      	ldrh	r2, [r2, #0]
 80062ce:	49b1      	ldr	r1, [pc, #708]	; (8006594 <USB_EPStartXfer+0x11b8>)
 80062d0:	430a      	orrs	r2, r1
 80062d2:	b292      	uxth	r2, r2
 80062d4:	801a      	strh	r2, [r3, #0]
 80062d6:	e188      	b.n	80065ea <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	78db      	ldrb	r3, [r3, #3]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d000      	beq.n	80062e2 <USB_EPStartXfer+0xf06>
 80062e0:	e181      	b.n	80065e6 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d90d      	bls.n	800630a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	1d7a      	adds	r2, r7, #5
 80062f4:	32ff      	adds	r2, #255	; 0xff
 80062f6:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	699a      	ldr	r2, [r3, #24]
 80062fc:	1d7b      	adds	r3, r7, #5
 80062fe:	33ff      	adds	r3, #255	; 0xff
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	1ad2      	subs	r2, r2, r3
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	619a      	str	r2, [r3, #24]
 8006308:	e007      	b.n	800631a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	1d7a      	adds	r2, r7, #5
 8006310:	32ff      	adds	r2, #255	; 0xff
 8006312:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2200      	movs	r2, #0
 8006318:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d000      	beq.n	8006324 <USB_EPStartXfer+0xf48>
 8006322:	e082      	b.n	800642a <USB_EPStartXfer+0x104e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	21cc      	movs	r1, #204	; 0xcc
 8006328:	187a      	adds	r2, r7, r1
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2250      	movs	r2, #80	; 0x50
 8006330:	5a9b      	ldrh	r3, [r3, r2]
 8006332:	b29b      	uxth	r3, r3
 8006334:	001a      	movs	r2, r3
 8006336:	187b      	adds	r3, r7, r1
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	189b      	adds	r3, r3, r2
 800633c:	187a      	adds	r2, r7, r1
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	00da      	lsls	r2, r3, #3
 8006346:	187b      	adds	r3, r7, r1
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	18d3      	adds	r3, r2, r3
 800634c:	4a92      	ldr	r2, [pc, #584]	; (8006598 <USB_EPStartXfer+0x11bc>)
 800634e:	4694      	mov	ip, r2
 8006350:	4463      	add	r3, ip
 8006352:	21c8      	movs	r1, #200	; 0xc8
 8006354:	187a      	adds	r2, r7, r1
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	187b      	adds	r3, r7, r1
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	059b      	lsls	r3, r3, #22
 8006362:	0d9b      	lsrs	r3, r3, #22
 8006364:	b29a      	uxth	r2, r3
 8006366:	187b      	adds	r3, r7, r1
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	1d7b      	adds	r3, r7, #5
 800636e:	33ff      	adds	r3, #255	; 0xff
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b3e      	cmp	r3, #62	; 0x3e
 8006374:	d925      	bls.n	80063c2 <USB_EPStartXfer+0xfe6>
 8006376:	1d7b      	adds	r3, r7, #5
 8006378:	33ff      	adds	r3, #255	; 0xff
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	21dc      	movs	r1, #220	; 0xdc
 8006380:	187a      	adds	r2, r7, r1
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	1d7b      	adds	r3, r7, #5
 8006386:	33ff      	adds	r3, #255	; 0xff
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	221f      	movs	r2, #31
 800638c:	4013      	ands	r3, r2
 800638e:	d104      	bne.n	800639a <USB_EPStartXfer+0xfbe>
 8006390:	187b      	adds	r3, r7, r1
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3b01      	subs	r3, #1
 8006396:	187a      	adds	r2, r7, r1
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	21c8      	movs	r1, #200	; 0xc8
 800639c:	187b      	adds	r3, r7, r1
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	23dc      	movs	r3, #220	; 0xdc
 80063a6:	18fb      	adds	r3, r7, r3
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	029b      	lsls	r3, r3, #10
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	4313      	orrs	r3, r2
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	4a79      	ldr	r2, [pc, #484]	; (800659c <USB_EPStartXfer+0x11c0>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	187b      	adds	r3, r7, r1
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	e058      	b.n	8006474 <USB_EPStartXfer+0x1098>
 80063c2:	1d7b      	adds	r3, r7, #5
 80063c4:	33ff      	adds	r3, #255	; 0xff
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10b      	bne.n	80063e4 <USB_EPStartXfer+0x1008>
 80063cc:	21c8      	movs	r1, #200	; 0xc8
 80063ce:	187b      	adds	r3, r7, r1
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	4a71      	ldr	r2, [pc, #452]	; (800659c <USB_EPStartXfer+0x11c0>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	b29a      	uxth	r2, r3
 80063dc:	187b      	adds	r3, r7, r1
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	e047      	b.n	8006474 <USB_EPStartXfer+0x1098>
 80063e4:	1d7b      	adds	r3, r7, #5
 80063e6:	33ff      	adds	r3, #255	; 0xff
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	21dc      	movs	r1, #220	; 0xdc
 80063ee:	187a      	adds	r2, r7, r1
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	1d7b      	adds	r3, r7, #5
 80063f4:	33ff      	adds	r3, #255	; 0xff
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2201      	movs	r2, #1
 80063fa:	4013      	ands	r3, r2
 80063fc:	d004      	beq.n	8006408 <USB_EPStartXfer+0x102c>
 80063fe:	187b      	adds	r3, r7, r1
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	187a      	adds	r2, r7, r1
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	21c8      	movs	r1, #200	; 0xc8
 800640a:	187b      	adds	r3, r7, r1
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29a      	uxth	r2, r3
 8006412:	23dc      	movs	r3, #220	; 0xdc
 8006414:	18fb      	adds	r3, r7, r3
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	029b      	lsls	r3, r3, #10
 800641c:	b29b      	uxth	r3, r3
 800641e:	4313      	orrs	r3, r2
 8006420:	b29a      	uxth	r2, r3
 8006422:	187b      	adds	r3, r7, r1
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	801a      	strh	r2, [r3, #0]
 8006428:	e024      	b.n	8006474 <USB_EPStartXfer+0x1098>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d120      	bne.n	8006474 <USB_EPStartXfer+0x1098>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	21d4      	movs	r1, #212	; 0xd4
 8006436:	187a      	adds	r2, r7, r1
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2250      	movs	r2, #80	; 0x50
 800643e:	5a9b      	ldrh	r3, [r3, r2]
 8006440:	b29b      	uxth	r3, r3
 8006442:	001a      	movs	r2, r3
 8006444:	187b      	adds	r3, r7, r1
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	189b      	adds	r3, r3, r2
 800644a:	187a      	adds	r2, r7, r1
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	00da      	lsls	r2, r3, #3
 8006454:	187b      	adds	r3, r7, r1
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	18d3      	adds	r3, r2, r3
 800645a:	4a4f      	ldr	r2, [pc, #316]	; (8006598 <USB_EPStartXfer+0x11bc>)
 800645c:	4694      	mov	ip, r2
 800645e:	4463      	add	r3, ip
 8006460:	21d0      	movs	r1, #208	; 0xd0
 8006462:	187a      	adds	r2, r7, r1
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	1d7b      	adds	r3, r7, #5
 8006468:	33ff      	adds	r3, #255	; 0xff
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	b29a      	uxth	r2, r3
 800646e:	187b      	adds	r3, r7, r1
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	801a      	strh	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	22c4      	movs	r2, #196	; 0xc4
 8006478:	18ba      	adds	r2, r7, r2
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d000      	beq.n	8006486 <USB_EPStartXfer+0x10aa>
 8006484:	e08c      	b.n	80065a0 <USB_EPStartXfer+0x11c4>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	21bc      	movs	r1, #188	; 0xbc
 800648a:	187a      	adds	r2, r7, r1
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2250      	movs	r2, #80	; 0x50
 8006492:	5a9b      	ldrh	r3, [r3, r2]
 8006494:	b29b      	uxth	r3, r3
 8006496:	001a      	movs	r2, r3
 8006498:	187b      	adds	r3, r7, r1
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	189b      	adds	r3, r3, r2
 800649e:	187a      	adds	r2, r7, r1
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	00da      	lsls	r2, r3, #3
 80064a8:	187b      	adds	r3, r7, r1
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	18d3      	adds	r3, r2, r3
 80064ae:	4a37      	ldr	r2, [pc, #220]	; (800658c <USB_EPStartXfer+0x11b0>)
 80064b0:	4694      	mov	ip, r2
 80064b2:	4463      	add	r3, ip
 80064b4:	21b8      	movs	r1, #184	; 0xb8
 80064b6:	187a      	adds	r2, r7, r1
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	187b      	adds	r3, r7, r1
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	059b      	lsls	r3, r3, #22
 80064c4:	0d9b      	lsrs	r3, r3, #22
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	187b      	adds	r3, r7, r1
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	1d7b      	adds	r3, r7, #5
 80064d0:	33ff      	adds	r3, #255	; 0xff
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b3e      	cmp	r3, #62	; 0x3e
 80064d6:	d925      	bls.n	8006524 <USB_EPStartXfer+0x1148>
 80064d8:	1d7b      	adds	r3, r7, #5
 80064da:	33ff      	adds	r3, #255	; 0xff
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	21d8      	movs	r1, #216	; 0xd8
 80064e2:	187a      	adds	r2, r7, r1
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	1d7b      	adds	r3, r7, #5
 80064e8:	33ff      	adds	r3, #255	; 0xff
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	221f      	movs	r2, #31
 80064ee:	4013      	ands	r3, r2
 80064f0:	d104      	bne.n	80064fc <USB_EPStartXfer+0x1120>
 80064f2:	187b      	adds	r3, r7, r1
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	187a      	adds	r2, r7, r1
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	21b8      	movs	r1, #184	; 0xb8
 80064fe:	187b      	adds	r3, r7, r1
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29a      	uxth	r2, r3
 8006506:	23d8      	movs	r3, #216	; 0xd8
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	029b      	lsls	r3, r3, #10
 8006510:	b29b      	uxth	r3, r3
 8006512:	4313      	orrs	r3, r2
 8006514:	b29b      	uxth	r3, r3
 8006516:	4a21      	ldr	r2, [pc, #132]	; (800659c <USB_EPStartXfer+0x11c0>)
 8006518:	4313      	orrs	r3, r2
 800651a:	b29a      	uxth	r2, r3
 800651c:	187b      	adds	r3, r7, r1
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	801a      	strh	r2, [r3, #0]
 8006522:	e062      	b.n	80065ea <USB_EPStartXfer+0x120e>
 8006524:	1d7b      	adds	r3, r7, #5
 8006526:	33ff      	adds	r3, #255	; 0xff
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <USB_EPStartXfer+0x116a>
 800652e:	21b8      	movs	r1, #184	; 0xb8
 8006530:	187b      	adds	r3, r7, r1
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	4a18      	ldr	r2, [pc, #96]	; (800659c <USB_EPStartXfer+0x11c0>)
 800653a:	4313      	orrs	r3, r2
 800653c:	b29a      	uxth	r2, r3
 800653e:	187b      	adds	r3, r7, r1
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e051      	b.n	80065ea <USB_EPStartXfer+0x120e>
 8006546:	1d7b      	adds	r3, r7, #5
 8006548:	33ff      	adds	r3, #255	; 0xff
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	085b      	lsrs	r3, r3, #1
 800654e:	21d8      	movs	r1, #216	; 0xd8
 8006550:	187a      	adds	r2, r7, r1
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	1d7b      	adds	r3, r7, #5
 8006556:	33ff      	adds	r3, #255	; 0xff
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2201      	movs	r2, #1
 800655c:	4013      	ands	r3, r2
 800655e:	d004      	beq.n	800656a <USB_EPStartXfer+0x118e>
 8006560:	187b      	adds	r3, r7, r1
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	187a      	adds	r2, r7, r1
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	21b8      	movs	r1, #184	; 0xb8
 800656c:	187b      	adds	r3, r7, r1
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29a      	uxth	r2, r3
 8006574:	23d8      	movs	r3, #216	; 0xd8
 8006576:	18fb      	adds	r3, r7, r3
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	b29b      	uxth	r3, r3
 800657c:	029b      	lsls	r3, r3, #10
 800657e:	b29b      	uxth	r3, r3
 8006580:	4313      	orrs	r3, r2
 8006582:	b29a      	uxth	r2, r3
 8006584:	187b      	adds	r3, r7, r1
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	801a      	strh	r2, [r3, #0]
 800658a:	e02e      	b.n	80065ea <USB_EPStartXfer+0x120e>
 800658c:	00000406 	.word	0x00000406
 8006590:	ffff8f8f 	.word	0xffff8f8f
 8006594:	ffff80c0 	.word	0xffff80c0
 8006598:	00000402 	.word	0x00000402
 800659c:	ffff8000 	.word	0xffff8000
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d120      	bne.n	80065ea <USB_EPStartXfer+0x120e>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2250      	movs	r2, #80	; 0x50
 80065ac:	5a9b      	ldrh	r3, [r3, r2]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	001a      	movs	r2, r3
 80065b2:	21c4      	movs	r1, #196	; 0xc4
 80065b4:	187b      	adds	r3, r7, r1
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	189b      	adds	r3, r3, r2
 80065ba:	187a      	adds	r2, r7, r1
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	00da      	lsls	r2, r3, #3
 80065c4:	187b      	adds	r3, r7, r1
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	18d3      	adds	r3, r2, r3
 80065ca:	4a1d      	ldr	r2, [pc, #116]	; (8006640 <USB_EPStartXfer+0x1264>)
 80065cc:	4694      	mov	ip, r2
 80065ce:	4463      	add	r3, ip
 80065d0:	21c0      	movs	r1, #192	; 0xc0
 80065d2:	187a      	adds	r2, r7, r1
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	1d7b      	adds	r3, r7, #5
 80065d8:	33ff      	adds	r3, #255	; 0xff
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	b29a      	uxth	r2, r3
 80065de:	187b      	adds	r3, r7, r1
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	e001      	b.n	80065ea <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e025      	b.n	8006636 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	18d3      	adds	r3, r2, r3
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	208a      	movs	r0, #138	; 0x8a
 80065fa:	183b      	adds	r3, r7, r0
 80065fc:	4911      	ldr	r1, [pc, #68]	; (8006644 <USB_EPStartXfer+0x1268>)
 80065fe:	400a      	ands	r2, r1
 8006600:	801a      	strh	r2, [r3, #0]
 8006602:	183b      	adds	r3, r7, r0
 8006604:	183a      	adds	r2, r7, r0
 8006606:	8812      	ldrh	r2, [r2, #0]
 8006608:	2180      	movs	r1, #128	; 0x80
 800660a:	0149      	lsls	r1, r1, #5
 800660c:	404a      	eors	r2, r1
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	183b      	adds	r3, r7, r0
 8006612:	183a      	adds	r2, r7, r0
 8006614:	8812      	ldrh	r2, [r2, #0]
 8006616:	2180      	movs	r1, #128	; 0x80
 8006618:	0189      	lsls	r1, r1, #6
 800661a:	404a      	eors	r2, r1
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	18d3      	adds	r3, r2, r3
 8006628:	183a      	adds	r2, r7, r0
 800662a:	8812      	ldrh	r2, [r2, #0]
 800662c:	4906      	ldr	r1, [pc, #24]	; (8006648 <USB_EPStartXfer+0x126c>)
 800662e:	430a      	orrs	r2, r1
 8006630:	b292      	uxth	r2, r2
 8006632:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	0018      	movs	r0, r3
 8006638:	46bd      	mov	sp, r7
 800663a:	b043      	add	sp, #268	; 0x10c
 800663c:	bd90      	pop	{r4, r7, pc}
 800663e:	46c0      	nop			; (mov r8, r8)
 8006640:	00000406 	.word	0x00000406
 8006644:	ffffbf8f 	.word	0xffffbf8f
 8006648:	ffff8080 	.word	0xffff8080

0800664c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	785b      	ldrb	r3, [r3, #1]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01d      	beq.n	800669a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	18d3      	adds	r3, r2, r3
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29a      	uxth	r2, r3
 800666c:	200c      	movs	r0, #12
 800666e:	183b      	adds	r3, r7, r0
 8006670:	491b      	ldr	r1, [pc, #108]	; (80066e0 <USB_EPSetStall+0x94>)
 8006672:	400a      	ands	r2, r1
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	183b      	adds	r3, r7, r0
 8006678:	183a      	adds	r2, r7, r0
 800667a:	8812      	ldrh	r2, [r2, #0]
 800667c:	2110      	movs	r1, #16
 800667e:	404a      	eors	r2, r1
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	18d3      	adds	r3, r2, r3
 800668c:	183a      	adds	r2, r7, r0
 800668e:	8812      	ldrh	r2, [r2, #0]
 8006690:	4914      	ldr	r1, [pc, #80]	; (80066e4 <USB_EPSetStall+0x98>)
 8006692:	430a      	orrs	r2, r1
 8006694:	b292      	uxth	r2, r2
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	e01d      	b.n	80066d6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	18d3      	adds	r3, r2, r3
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	200e      	movs	r0, #14
 80066aa:	183b      	adds	r3, r7, r0
 80066ac:	490e      	ldr	r1, [pc, #56]	; (80066e8 <USB_EPSetStall+0x9c>)
 80066ae:	400a      	ands	r2, r1
 80066b0:	801a      	strh	r2, [r3, #0]
 80066b2:	183b      	adds	r3, r7, r0
 80066b4:	183a      	adds	r2, r7, r0
 80066b6:	8812      	ldrh	r2, [r2, #0]
 80066b8:	2180      	movs	r1, #128	; 0x80
 80066ba:	0149      	lsls	r1, r1, #5
 80066bc:	404a      	eors	r2, r1
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	18d3      	adds	r3, r2, r3
 80066ca:	183a      	adds	r2, r7, r0
 80066cc:	8812      	ldrh	r2, [r2, #0]
 80066ce:	4905      	ldr	r1, [pc, #20]	; (80066e4 <USB_EPSetStall+0x98>)
 80066d0:	430a      	orrs	r2, r1
 80066d2:	b292      	uxth	r2, r2
 80066d4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	0018      	movs	r0, r3
 80066da:	46bd      	mov	sp, r7
 80066dc:	b004      	add	sp, #16
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	ffff8fbf 	.word	0xffff8fbf
 80066e4:	ffff8080 	.word	0xffff8080
 80066e8:	ffffbf8f 	.word	0xffffbf8f

080066ec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	7b1b      	ldrb	r3, [r3, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d000      	beq.n	8006700 <USB_EPClearStall+0x14>
 80066fe:	e095      	b.n	800682c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d046      	beq.n	8006796 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	18d2      	adds	r2, r2, r3
 8006712:	2110      	movs	r1, #16
 8006714:	187b      	adds	r3, r7, r1
 8006716:	8812      	ldrh	r2, [r2, #0]
 8006718:	801a      	strh	r2, [r3, #0]
 800671a:	187b      	adds	r3, r7, r1
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	2240      	movs	r2, #64	; 0x40
 8006720:	4013      	ands	r3, r2
 8006722:	d016      	beq.n	8006752 <USB_EPClearStall+0x66>
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	18d3      	adds	r3, r2, r3
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29a      	uxth	r2, r3
 8006732:	200e      	movs	r0, #14
 8006734:	183b      	adds	r3, r7, r0
 8006736:	4940      	ldr	r1, [pc, #256]	; (8006838 <USB_EPClearStall+0x14c>)
 8006738:	400a      	ands	r2, r1
 800673a:	801a      	strh	r2, [r3, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	18d3      	adds	r3, r2, r3
 8006746:	183a      	adds	r2, r7, r0
 8006748:	8812      	ldrh	r2, [r2, #0]
 800674a:	493c      	ldr	r1, [pc, #240]	; (800683c <USB_EPClearStall+0x150>)
 800674c:	430a      	orrs	r2, r1
 800674e:	b292      	uxth	r2, r2
 8006750:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	78db      	ldrb	r3, [r3, #3]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d068      	beq.n	800682c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	18d3      	adds	r3, r2, r3
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29a      	uxth	r2, r3
 8006768:	200c      	movs	r0, #12
 800676a:	183b      	adds	r3, r7, r0
 800676c:	4934      	ldr	r1, [pc, #208]	; (8006840 <USB_EPClearStall+0x154>)
 800676e:	400a      	ands	r2, r1
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	183b      	adds	r3, r7, r0
 8006774:	183a      	adds	r2, r7, r0
 8006776:	8812      	ldrh	r2, [r2, #0]
 8006778:	2120      	movs	r1, #32
 800677a:	404a      	eors	r2, r1
 800677c:	801a      	strh	r2, [r3, #0]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	18d3      	adds	r3, r2, r3
 8006788:	183a      	adds	r2, r7, r0
 800678a:	8812      	ldrh	r2, [r2, #0]
 800678c:	492d      	ldr	r1, [pc, #180]	; (8006844 <USB_EPClearStall+0x158>)
 800678e:	430a      	orrs	r2, r1
 8006790:	b292      	uxth	r2, r2
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	e04a      	b.n	800682c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	18d2      	adds	r2, r2, r3
 80067a0:	2116      	movs	r1, #22
 80067a2:	187b      	adds	r3, r7, r1
 80067a4:	8812      	ldrh	r2, [r2, #0]
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	187b      	adds	r3, r7, r1
 80067aa:	881a      	ldrh	r2, [r3, #0]
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	01db      	lsls	r3, r3, #7
 80067b0:	4013      	ands	r3, r2
 80067b2:	d016      	beq.n	80067e2 <USB_EPClearStall+0xf6>
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	18d3      	adds	r3, r2, r3
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	2014      	movs	r0, #20
 80067c4:	183b      	adds	r3, r7, r0
 80067c6:	491c      	ldr	r1, [pc, #112]	; (8006838 <USB_EPClearStall+0x14c>)
 80067c8:	400a      	ands	r2, r1
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	18d3      	adds	r3, r2, r3
 80067d6:	183a      	adds	r2, r7, r0
 80067d8:	8812      	ldrh	r2, [r2, #0]
 80067da:	491b      	ldr	r1, [pc, #108]	; (8006848 <USB_EPClearStall+0x15c>)
 80067dc:	430a      	orrs	r2, r1
 80067de:	b292      	uxth	r2, r2
 80067e0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	18d3      	adds	r3, r2, r3
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	2012      	movs	r0, #18
 80067f2:	183b      	adds	r3, r7, r0
 80067f4:	4915      	ldr	r1, [pc, #84]	; (800684c <USB_EPClearStall+0x160>)
 80067f6:	400a      	ands	r2, r1
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	183b      	adds	r3, r7, r0
 80067fc:	183a      	adds	r2, r7, r0
 80067fe:	8812      	ldrh	r2, [r2, #0]
 8006800:	2180      	movs	r1, #128	; 0x80
 8006802:	0149      	lsls	r1, r1, #5
 8006804:	404a      	eors	r2, r1
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	183b      	adds	r3, r7, r0
 800680a:	183a      	adds	r2, r7, r0
 800680c:	8812      	ldrh	r2, [r2, #0]
 800680e:	2180      	movs	r1, #128	; 0x80
 8006810:	0189      	lsls	r1, r1, #6
 8006812:	404a      	eors	r2, r1
 8006814:	801a      	strh	r2, [r3, #0]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	18d3      	adds	r3, r2, r3
 8006820:	183a      	adds	r2, r7, r0
 8006822:	8812      	ldrh	r2, [r2, #0]
 8006824:	4907      	ldr	r1, [pc, #28]	; (8006844 <USB_EPClearStall+0x158>)
 8006826:	430a      	orrs	r2, r1
 8006828:	b292      	uxth	r2, r2
 800682a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	0018      	movs	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	b006      	add	sp, #24
 8006834:	bd80      	pop	{r7, pc}
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	ffff8f8f 	.word	0xffff8f8f
 800683c:	ffff80c0 	.word	0xffff80c0
 8006840:	ffff8fbf 	.word	0xffff8fbf
 8006844:	ffff8080 	.word	0xffff8080
 8006848:	ffffc080 	.word	0xffffc080
 800684c:	ffffbf8f 	.word	0xffffbf8f

08006850 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	000a      	movs	r2, r1
 800685a:	1cfb      	adds	r3, r7, #3
 800685c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800685e:	1cfb      	adds	r3, r7, #3
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d103      	bne.n	800686e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	224c      	movs	r2, #76	; 0x4c
 800686a:	2180      	movs	r1, #128	; 0x80
 800686c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	0018      	movs	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	b002      	add	sp, #8
 8006876:	bd80      	pop	{r7, pc}

08006878 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2258      	movs	r2, #88	; 0x58
 8006884:	5a9b      	ldrh	r3, [r3, r2]
 8006886:	b29b      	uxth	r3, r3
 8006888:	4a05      	ldr	r2, [pc, #20]	; (80068a0 <USB_DevConnect+0x28>)
 800688a:	4313      	orrs	r3, r2
 800688c:	b299      	uxth	r1, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2258      	movs	r2, #88	; 0x58
 8006892:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	0018      	movs	r0, r3
 8006898:	46bd      	mov	sp, r7
 800689a:	b002      	add	sp, #8
 800689c:	bd80      	pop	{r7, pc}
 800689e:	46c0      	nop			; (mov r8, r8)
 80068a0:	ffff8000 	.word	0xffff8000

080068a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2244      	movs	r2, #68	; 0x44
 80068b0:	5a9b      	ldrh	r3, [r3, r2]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80068b6:	68fb      	ldr	r3, [r7, #12]
}
 80068b8:	0018      	movs	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b004      	add	sp, #16
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	; 0x28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	0019      	movs	r1, r3
 80068cc:	1dbb      	adds	r3, r7, #6
 80068ce:	801a      	strh	r2, [r3, #0]
 80068d0:	1d3b      	adds	r3, r7, #4
 80068d2:	1c0a      	adds	r2, r1, #0
 80068d4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068d6:	1d3b      	adds	r3, r7, #4
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	3301      	adds	r3, #1
 80068dc:	085b      	lsrs	r3, r3, #1
 80068de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068e8:	1dbb      	adds	r3, r7, #6
 80068ea:	881a      	ldrh	r2, [r3, #0]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	18d3      	adds	r3, r2, r3
 80068f0:	2280      	movs	r2, #128	; 0x80
 80068f2:	00d2      	lsls	r2, r2, #3
 80068f4:	4694      	mov	ip, r2
 80068f6:	4463      	add	r3, ip
 80068f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
 80068fe:	e020      	b.n	8006942 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	781a      	ldrb	r2, [r3, #0]
 8006904:	2112      	movs	r1, #18
 8006906:	187b      	adds	r3, r7, r1
 8006908:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	3301      	adds	r3, #1
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	b21a      	sxth	r2, r3
 8006914:	187b      	adds	r3, r7, r1
 8006916:	2000      	movs	r0, #0
 8006918:	5e1b      	ldrsh	r3, [r3, r0]
 800691a:	4313      	orrs	r3, r2
 800691c:	b21a      	sxth	r2, r3
 800691e:	187b      	adds	r3, r7, r1
 8006920:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	187a      	adds	r2, r7, r1
 8006926:	8812      	ldrh	r2, [r2, #0]
 8006928:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	3302      	adds	r3, #2
 800692e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	3301      	adds	r3, #1
 8006934:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	3301      	adds	r3, #1
 800693a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	3b01      	subs	r3, #1
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1db      	bne.n	8006900 <USB_WritePMA+0x40>
  }
}
 8006948:	46c0      	nop			; (mov r8, r8)
 800694a:	46c0      	nop			; (mov r8, r8)
 800694c:	46bd      	mov	sp, r7
 800694e:	b00a      	add	sp, #40	; 0x28
 8006950:	bd80      	pop	{r7, pc}

08006952 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b08a      	sub	sp, #40	; 0x28
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	0019      	movs	r1, r3
 800695e:	1dbb      	adds	r3, r7, #6
 8006960:	801a      	strh	r2, [r3, #0]
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	1c0a      	adds	r2, r1, #0
 8006966:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006968:	1d3b      	adds	r3, r7, #4
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	085b      	lsrs	r3, r3, #1
 800696e:	b29b      	uxth	r3, r3
 8006970:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800697a:	1dbb      	adds	r3, r7, #6
 800697c:	881a      	ldrh	r2, [r3, #0]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	18d3      	adds	r3, r2, r3
 8006982:	2280      	movs	r2, #128	; 0x80
 8006984:	00d2      	lsls	r2, r2, #3
 8006986:	4694      	mov	ip, r2
 8006988:	4463      	add	r3, ip
 800698a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
 8006990:	e018      	b.n	80069c4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	3302      	adds	r3, #2
 800699e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	3301      	adds	r3, #1
 80069ac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	0a1b      	lsrs	r3, r3, #8
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	3301      	adds	r3, #1
 80069bc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	3b01      	subs	r3, #1
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e3      	bne.n	8006992 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80069ca:	1d3b      	adds	r3, r7, #4
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	2201      	movs	r2, #1
 80069d0:	4013      	ands	r3, r2
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	701a      	strb	r2, [r3, #0]
  }
}
 80069e8:	46c0      	nop			; (mov r8, r8)
 80069ea:	46bd      	mov	sp, r7
 80069ec:	b00a      	add	sp, #40	; 0x28
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	000a      	movs	r2, r1
 80069fa:	1cfb      	adds	r3, r7, #3
 80069fc:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	2304      	movs	r3, #4
 8006a02:	2203      	movs	r2, #3
 8006a04:	2181      	movs	r1, #129	; 0x81
 8006a06:	f001 fe5a 	bl	80086be <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006a10:	2010      	movs	r0, #16
 8006a12:	f001 ffd7 	bl	80089c4 <USBD_static_malloc>
 8006a16:	0001      	movs	r1, r0
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	23ae      	movs	r3, #174	; 0xae
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	23ae      	movs	r3, #174	; 0xae
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	58d3      	ldr	r3, [r2, r3]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e006      	b.n	8006a3e <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	23ae      	movs	r3, #174	; 0xae
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	58d3      	ldr	r3, [r2, r3]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	0018      	movs	r0, r3
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b002      	add	sp, #8
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	000a      	movs	r2, r1
 8006a50:	1cfb      	adds	r3, r7, #3
 8006a52:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2181      	movs	r1, #129	; 0x81
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f001 fe67 	bl	800872c <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	23ae      	movs	r3, #174	; 0xae
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	58d3      	ldr	r3, [r2, r3]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	23ae      	movs	r3, #174	; 0xae
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	58d3      	ldr	r3, [r2, r3]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f001 ffaf 	bl	80089dc <USBD_static_free>
    pdev->pClassData = NULL;
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	23ae      	movs	r3, #174	; 0xae
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	2100      	movs	r1, #0
 8006a86:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	b002      	add	sp, #8
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b088      	sub	sp, #32
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	23ae      	movs	r3, #174	; 0xae
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	58d3      	ldr	r3, [r2, r3]
 8006aa6:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006aa8:	231e      	movs	r3, #30
 8006aaa:	18fb      	adds	r3, r7, r3
 8006aac:	2200      	movs	r2, #0
 8006aae:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006ab4:	230e      	movs	r3, #14
 8006ab6:	18fb      	adds	r3, r7, r3
 8006ab8:	2200      	movs	r2, #0
 8006aba:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006abc:	2317      	movs	r3, #23
 8006abe:	18fb      	adds	r3, r7, r3
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	001a      	movs	r2, r3
 8006aca:	2360      	movs	r3, #96	; 0x60
 8006acc:	4013      	ands	r3, r2
 8006ace:	d03a      	beq.n	8006b46 <USBD_HID_Setup+0xb2>
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d000      	beq.n	8006ad6 <USBD_HID_Setup+0x42>
 8006ad4:	e0d6      	b.n	8006c84 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	785b      	ldrb	r3, [r3, #1]
 8006ada:	2b0b      	cmp	r3, #11
 8006adc:	d008      	beq.n	8006af0 <USBD_HID_Setup+0x5c>
 8006ade:	dc26      	bgt.n	8006b2e <USBD_HID_Setup+0x9a>
 8006ae0:	2b0a      	cmp	r3, #10
 8006ae2:	d013      	beq.n	8006b0c <USBD_HID_Setup+0x78>
 8006ae4:	dc23      	bgt.n	8006b2e <USBD_HID_Setup+0x9a>
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d019      	beq.n	8006b1e <USBD_HID_Setup+0x8a>
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d007      	beq.n	8006afe <USBD_HID_Setup+0x6a>
 8006aee:	e01e      	b.n	8006b2e <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	885b      	ldrh	r3, [r3, #2]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	001a      	movs	r2, r3
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	601a      	str	r2, [r3, #0]
          break;
 8006afc:	e022      	b.n	8006b44 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006afe:	6939      	ldr	r1, [r7, #16]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	0018      	movs	r0, r3
 8006b06:	f001 fabf 	bl	8008088 <USBD_CtlSendData>
          break;
 8006b0a:	e01b      	b.n	8006b44 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	885b      	ldrh	r3, [r3, #2]
 8006b10:	0a1b      	lsrs	r3, r3, #8
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	001a      	movs	r2, r3
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	605a      	str	r2, [r3, #4]
          break;
 8006b1c:	e012      	b.n	8006b44 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1d19      	adds	r1, r3, #4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	0018      	movs	r0, r3
 8006b28:	f001 faae 	bl	8008088 <USBD_CtlSendData>
          break;
 8006b2c:	e00a      	b.n	8006b44 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	0011      	movs	r1, r2
 8006b34:	0018      	movs	r0, r3
 8006b36:	f001 fa29 	bl	8007f8c <USBD_CtlError>
          ret = USBD_FAIL;
 8006b3a:	2317      	movs	r3, #23
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	2202      	movs	r2, #2
 8006b40:	701a      	strb	r2, [r3, #0]
          break;
 8006b42:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006b44:	e0a9      	b.n	8006c9a <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b0b      	cmp	r3, #11
 8006b4c:	d100      	bne.n	8006b50 <USBD_HID_Setup+0xbc>
 8006b4e:	e075      	b.n	8006c3c <USBD_HID_Setup+0x1a8>
 8006b50:	dd00      	ble.n	8006b54 <USBD_HID_Setup+0xc0>
 8006b52:	e08b      	b.n	8006c6c <USBD_HID_Setup+0x1d8>
 8006b54:	2b0a      	cmp	r3, #10
 8006b56:	d057      	beq.n	8006c08 <USBD_HID_Setup+0x174>
 8006b58:	dd00      	ble.n	8006b5c <USBD_HID_Setup+0xc8>
 8006b5a:	e087      	b.n	8006c6c <USBD_HID_Setup+0x1d8>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <USBD_HID_Setup+0xd2>
 8006b60:	2b06      	cmp	r3, #6
 8006b62:	d019      	beq.n	8006b98 <USBD_HID_Setup+0x104>
 8006b64:	e082      	b.n	8006c6c <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	23a7      	movs	r3, #167	; 0xa7
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	5cd3      	ldrb	r3, [r2, r3]
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d107      	bne.n	8006b82 <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b72:	230e      	movs	r3, #14
 8006b74:	18f9      	adds	r1, r7, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f001 fa84 	bl	8008088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b80:	e07f      	b.n	8006c82 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	0011      	movs	r1, r2
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f001 f9ff 	bl	8007f8c <USBD_CtlError>
            ret = USBD_FAIL;
 8006b8e:	2317      	movs	r3, #23
 8006b90:	18fb      	adds	r3, r7, r3
 8006b92:	2202      	movs	r2, #2
 8006b94:	701a      	strb	r2, [r3, #0]
          break;
 8006b96:	e074      	b.n	8006c82 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	885b      	ldrh	r3, [r3, #2]
 8006b9c:	0a1b      	lsrs	r3, r3, #8
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	2b22      	cmp	r3, #34	; 0x22
 8006ba2:	d10b      	bne.n	8006bbc <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	88db      	ldrh	r3, [r3, #6]
 8006ba8:	221e      	movs	r2, #30
 8006baa:	18ba      	adds	r2, r7, r2
 8006bac:	b299      	uxth	r1, r3
 8006bae:	293f      	cmp	r1, #63	; 0x3f
 8006bb0:	d900      	bls.n	8006bb4 <USBD_HID_Setup+0x120>
 8006bb2:	233f      	movs	r3, #63	; 0x3f
 8006bb4:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 8006bb6:	4b3c      	ldr	r3, [pc, #240]	; (8006ca8 <USBD_HID_Setup+0x214>)
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	e01c      	b.n	8006bf6 <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	885b      	ldrh	r3, [r3, #2]
 8006bc0:	0a1b      	lsrs	r3, r3, #8
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2b21      	cmp	r3, #33	; 0x21
 8006bc6:	d10b      	bne.n	8006be0 <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 8006bc8:	4b38      	ldr	r3, [pc, #224]	; (8006cac <USBD_HID_Setup+0x218>)
 8006bca:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	88db      	ldrh	r3, [r3, #6]
 8006bd0:	221e      	movs	r2, #30
 8006bd2:	18ba      	adds	r2, r7, r2
 8006bd4:	b299      	uxth	r1, r3
 8006bd6:	2909      	cmp	r1, #9
 8006bd8:	d900      	bls.n	8006bdc <USBD_HID_Setup+0x148>
 8006bda:	2309      	movs	r3, #9
 8006bdc:	8013      	strh	r3, [r2, #0]
 8006bde:	e00a      	b.n	8006bf6 <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	0011      	movs	r1, r2
 8006be6:	0018      	movs	r0, r3
 8006be8:	f001 f9d0 	bl	8007f8c <USBD_CtlError>
            ret = USBD_FAIL;
 8006bec:	2317      	movs	r3, #23
 8006bee:	18fb      	adds	r3, r7, r3
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	701a      	strb	r2, [r3, #0]
            break;
 8006bf4:	e045      	b.n	8006c82 <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006bf6:	231e      	movs	r3, #30
 8006bf8:	18fb      	adds	r3, r7, r3
 8006bfa:	881a      	ldrh	r2, [r3, #0]
 8006bfc:	69b9      	ldr	r1, [r7, #24]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	0018      	movs	r0, r3
 8006c02:	f001 fa41 	bl	8008088 <USBD_CtlSendData>
          break;
 8006c06:	e03c      	b.n	8006c82 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	23a7      	movs	r3, #167	; 0xa7
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	5cd3      	ldrb	r3, [r2, r3]
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d108      	bne.n	8006c26 <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	3308      	adds	r3, #8
 8006c18:	0019      	movs	r1, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f001 fa32 	bl	8008088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c24:	e02d      	b.n	8006c82 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	0011      	movs	r1, r2
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f001 f9ad 	bl	8007f8c <USBD_CtlError>
            ret = USBD_FAIL;
 8006c32:	2317      	movs	r3, #23
 8006c34:	18fb      	adds	r3, r7, r3
 8006c36:	2202      	movs	r2, #2
 8006c38:	701a      	strb	r2, [r3, #0]
          break;
 8006c3a:	e022      	b.n	8006c82 <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	23a7      	movs	r3, #167	; 0xa7
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	5cd3      	ldrb	r3, [r2, r3]
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d106      	bne.n	8006c56 <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	885b      	ldrh	r3, [r3, #2]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	001a      	movs	r2, r3
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c54:	e015      	b.n	8006c82 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	0011      	movs	r1, r2
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f001 f995 	bl	8007f8c <USBD_CtlError>
            ret = USBD_FAIL;
 8006c62:	2317      	movs	r3, #23
 8006c64:	18fb      	adds	r3, r7, r3
 8006c66:	2202      	movs	r2, #2
 8006c68:	701a      	strb	r2, [r3, #0]
          break;
 8006c6a:	e00a      	b.n	8006c82 <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	0011      	movs	r1, r2
 8006c72:	0018      	movs	r0, r3
 8006c74:	f001 f98a 	bl	8007f8c <USBD_CtlError>
          ret = USBD_FAIL;
 8006c78:	2317      	movs	r3, #23
 8006c7a:	18fb      	adds	r3, r7, r3
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	701a      	strb	r2, [r3, #0]
          break;
 8006c80:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006c82:	e00a      	b.n	8006c9a <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	0011      	movs	r1, r2
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f001 f97e 	bl	8007f8c <USBD_CtlError>
      ret = USBD_FAIL;
 8006c90:	2317      	movs	r3, #23
 8006c92:	18fb      	adds	r3, r7, r3
 8006c94:	2202      	movs	r2, #2
 8006c96:	701a      	strb	r2, [r3, #0]
      break;
 8006c98:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006c9a:	2317      	movs	r3, #23
 8006c9c:	18fb      	adds	r3, r7, r3
 8006c9e:	781b      	ldrb	r3, [r3, #0]
}
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	b008      	add	sp, #32
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	200000c8 	.word	0x200000c8
 8006cac:	200000b0 	.word	0x200000b0

08006cb0 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	1dbb      	adds	r3, r7, #6
 8006cbc:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	23ae      	movs	r3, #174	; 0xae
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	58d3      	ldr	r3, [r2, r3]
 8006cc6:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	23a7      	movs	r3, #167	; 0xa7
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	5cd3      	ldrb	r3, [r2, r3]
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d10d      	bne.n	8006cf0 <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	7b1b      	ldrb	r3, [r3, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d109      	bne.n	8006cf0 <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006ce2:	1dbb      	adds	r3, r7, #6
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	2181      	movs	r1, #129	; 0x81
 8006cec:	f001 fdfb 	bl	80088e6 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	b006      	add	sp, #24
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2222      	movs	r2, #34	; 0x22
 8006d08:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006d0a:	4b02      	ldr	r3, [pc, #8]	; (8006d14 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	b002      	add	sp, #8
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20000044 	.word	0x20000044

08006d18 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2222      	movs	r2, #34	; 0x22
 8006d24:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006d26:	4b02      	ldr	r3, [pc, #8]	; (8006d30 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8006d28:	0018      	movs	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	b002      	add	sp, #8
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20000068 	.word	0x20000068

08006d34 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2222      	movs	r2, #34	; 0x22
 8006d40:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006d42:	4b02      	ldr	r3, [pc, #8]	; (8006d4c <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8006d44:	0018      	movs	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	b002      	add	sp, #8
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	2000008c 	.word	0x2000008c

08006d50 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	000a      	movs	r2, r1
 8006d5a:	1cfb      	adds	r3, r7, #3
 8006d5c:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	23ae      	movs	r3, #174	; 0xae
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	58d3      	ldr	r3, [r2, r3]
 8006d66:	2200      	movs	r2, #0
 8006d68:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	b002      	add	sp, #8
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	220a      	movs	r2, #10
 8006d80:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006d82:	4b02      	ldr	r3, [pc, #8]	; (8006d8c <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8006d84:	0018      	movs	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b002      	add	sp, #8
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	200000bc 	.word	0x200000bc

08006d90 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	1dfb      	adds	r3, r7, #7
 8006d9c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006da4:	2302      	movs	r3, #2
 8006da6:	e020      	b.n	8006dea <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	23ad      	movs	r3, #173	; 0xad
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	58d3      	ldr	r3, [r2, r3]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d004      	beq.n	8006dbe <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	23ad      	movs	r3, #173	; 0xad
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	2100      	movs	r1, #0
 8006dbc:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d004      	beq.n	8006dce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	23ac      	movs	r3, #172	; 0xac
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	23a7      	movs	r3, #167	; 0xa7
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	1dfa      	adds	r2, r7, #7
 8006ddc:	7812      	ldrb	r2, [r2, #0]
 8006dde:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	0018      	movs	r0, r3
 8006de4:	f001 fbf6 	bl	80085d4 <USBD_LL_Init>

  return USBD_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	0018      	movs	r0, r3
 8006dec:	46bd      	mov	sp, r7
 8006dee:	b004      	add	sp, #16
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006dfc:	200f      	movs	r0, #15
 8006dfe:	183b      	adds	r3, r7, r0
 8006e00:	2200      	movs	r2, #0
 8006e02:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d008      	beq.n	8006e1c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	23ad      	movs	r3, #173	; 0xad
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8006e14:	183b      	adds	r3, r7, r0
 8006e16:	2200      	movs	r2, #0
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	e003      	b.n	8006e24 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e1c:	230f      	movs	r3, #15
 8006e1e:	18fb      	adds	r3, r7, r3
 8006e20:	2202      	movs	r2, #2
 8006e22:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006e24:	230f      	movs	r3, #15
 8006e26:	18fb      	adds	r3, r7, r3
 8006e28:	781b      	ldrb	r3, [r3, #0]
}
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	b004      	add	sp, #16
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f001 fc19 	bl	8008674 <USBD_LL_Start>

  return USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	0018      	movs	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	b002      	add	sp, #8
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	0018      	movs	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b002      	add	sp, #8
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e5e:	b590      	push	{r4, r7, lr}
 8006e60:	b085      	sub	sp, #20
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	000a      	movs	r2, r1
 8006e68:	1cfb      	adds	r3, r7, #3
 8006e6a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e6c:	240f      	movs	r4, #15
 8006e6e:	193b      	adds	r3, r7, r4
 8006e70:	2202      	movs	r2, #2
 8006e72:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	23ad      	movs	r3, #173	; 0xad
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	58d3      	ldr	r3, [r2, r3]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00e      	beq.n	8006e9e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	23ad      	movs	r3, #173	; 0xad
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	58d3      	ldr	r3, [r2, r3]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	1cfa      	adds	r2, r7, #3
 8006e8c:	7811      	ldrb	r1, [r2, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	0010      	movs	r0, r2
 8006e92:	4798      	blx	r3
 8006e94:	1e03      	subs	r3, r0, #0
 8006e96:	d102      	bne.n	8006e9e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8006e98:	193b      	adds	r3, r7, r4
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8006e9e:	230f      	movs	r3, #15
 8006ea0:	18fb      	adds	r3, r7, r3
 8006ea2:	781b      	ldrb	r3, [r3, #0]
}
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b005      	add	sp, #20
 8006eaa:	bd90      	pop	{r4, r7, pc}

08006eac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	000a      	movs	r2, r1
 8006eb6:	1cfb      	adds	r3, r7, #3
 8006eb8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	23ad      	movs	r3, #173	; 0xad
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	58d3      	ldr	r3, [r2, r3]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	1cfa      	adds	r2, r7, #3
 8006ec6:	7811      	ldrb	r1, [r2, #0]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	0010      	movs	r0, r2
 8006ecc:	4798      	blx	r3

  return USBD_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	b002      	add	sp, #8
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	22aa      	movs	r2, #170	; 0xaa
 8006ee6:	0092      	lsls	r2, r2, #2
 8006ee8:	4694      	mov	ip, r2
 8006eea:	4463      	add	r3, ip
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	0011      	movs	r1, r2
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	f001 f810 	bl	8007f16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	23a5      	movs	r3, #165	; 0xa5
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	2101      	movs	r1, #1
 8006efe:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a23      	ldr	r2, [pc, #140]	; (8006f90 <USBD_LL_SetupStage+0xb8>)
 8006f04:	5a9b      	ldrh	r3, [r3, r2]
 8006f06:	0019      	movs	r1, r3
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	23a6      	movs	r3, #166	; 0xa6
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	23aa      	movs	r3, #170	; 0xaa
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	5cd3      	ldrb	r3, [r2, r3]
 8006f18:	001a      	movs	r2, r3
 8006f1a:	231f      	movs	r3, #31
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d019      	beq.n	8006f56 <USBD_LL_SetupStage+0x7e>
 8006f22:	d822      	bhi.n	8006f6a <USBD_LL_SetupStage+0x92>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <USBD_LL_SetupStage+0x56>
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d00a      	beq.n	8006f42 <USBD_LL_SetupStage+0x6a>
 8006f2c:	e01d      	b.n	8006f6a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	22aa      	movs	r2, #170	; 0xaa
 8006f32:	0092      	lsls	r2, r2, #2
 8006f34:	189a      	adds	r2, r3, r2
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	0011      	movs	r1, r2
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f000 fa10 	bl	8007360 <USBD_StdDevReq>
      break;
 8006f40:	e020      	b.n	8006f84 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	22aa      	movs	r2, #170	; 0xaa
 8006f46:	0092      	lsls	r2, r2, #2
 8006f48:	189a      	adds	r2, r3, r2
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	0011      	movs	r1, r2
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f000 fa78 	bl	8007444 <USBD_StdItfReq>
      break;
 8006f54:	e016      	b.n	8006f84 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	22aa      	movs	r2, #170	; 0xaa
 8006f5a:	0092      	lsls	r2, r2, #2
 8006f5c:	189a      	adds	r2, r3, r2
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	0011      	movs	r1, r2
 8006f62:	0018      	movs	r0, r3
 8006f64:	f000 fac5 	bl	80074f2 <USBD_StdEPReq>
      break;
 8006f68:	e00c      	b.n	8006f84 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	23aa      	movs	r3, #170	; 0xaa
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	5cd3      	ldrb	r3, [r2, r3]
 8006f72:	227f      	movs	r2, #127	; 0x7f
 8006f74:	4393      	bics	r3, r2
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	0011      	movs	r1, r2
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f001 fc00 	bl	8008782 <USBD_LL_StallEP>
      break;
 8006f82:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	0018      	movs	r0, r3
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	b002      	add	sp, #8
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	46c0      	nop			; (mov r8, r8)
 8006f90:	000002ae 	.word	0x000002ae

08006f94 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	607a      	str	r2, [r7, #4]
 8006f9e:	200b      	movs	r0, #11
 8006fa0:	183b      	adds	r3, r7, r0
 8006fa2:	1c0a      	adds	r2, r1, #0
 8006fa4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006fa6:	183b      	adds	r3, r7, r0
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d154      	bne.n	8007058 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3355      	adds	r3, #85	; 0x55
 8006fb2:	33ff      	adds	r3, #255	; 0xff
 8006fb4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	23a5      	movs	r3, #165	; 0xa5
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	58d3      	ldr	r3, [r2, r3]
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d139      	bne.n	8007036 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d919      	bls.n	8007002 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	1ad2      	subs	r2, r2, r3
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d203      	bcs.n	8006ff0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	e002      	b.n	8006ff6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	001a      	movs	r2, r3
 8006ffc:	f001 f877 	bl	80080ee <USBD_CtlContinueRx>
 8007000:	e045      	b.n	800708e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	23ad      	movs	r3, #173	; 0xad
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	58d3      	ldr	r3, [r2, r3]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00d      	beq.n	800702c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	23a7      	movs	r3, #167	; 0xa7
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007018:	2b03      	cmp	r3, #3
 800701a:	d107      	bne.n	800702c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	23ad      	movs	r3, #173	; 0xad
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	58d3      	ldr	r3, [r2, r3]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	0010      	movs	r0, r2
 800702a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	0018      	movs	r0, r3
 8007030:	f001 f870 	bl	8008114 <USBD_CtlSendStatus>
 8007034:	e02b      	b.n	800708e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	23a5      	movs	r3, #165	; 0xa5
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	58d3      	ldr	r3, [r2, r3]
 800703e:	2b05      	cmp	r3, #5
 8007040:	d125      	bne.n	800708e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	23a5      	movs	r3, #165	; 0xa5
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	2100      	movs	r1, #0
 800704a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2100      	movs	r1, #0
 8007050:	0018      	movs	r0, r3
 8007052:	f001 fb96 	bl	8008782 <USBD_LL_StallEP>
 8007056:	e01a      	b.n	800708e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	23ad      	movs	r3, #173	; 0xad
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	58d3      	ldr	r3, [r2, r3]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d011      	beq.n	800708a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	23a7      	movs	r3, #167	; 0xa7
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800706e:	2b03      	cmp	r3, #3
 8007070:	d10b      	bne.n	800708a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	23ad      	movs	r3, #173	; 0xad
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	58d3      	ldr	r3, [r2, r3]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	220b      	movs	r2, #11
 800707e:	18ba      	adds	r2, r7, r2
 8007080:	7811      	ldrb	r1, [r2, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	0010      	movs	r0, r2
 8007086:	4798      	blx	r3
 8007088:	e001      	b.n	800708e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800708a:	2302      	movs	r3, #2
 800708c:	e000      	b.n	8007090 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	0018      	movs	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	b006      	add	sp, #24
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	200b      	movs	r0, #11
 80070a4:	183b      	adds	r3, r7, r0
 80070a6:	1c0a      	adds	r2, r1, #0
 80070a8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070aa:	183b      	adds	r3, r7, r0
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d000      	beq.n	80070b4 <USBD_LL_DataInStage+0x1c>
 80070b2:	e08e      	b.n	80071d2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3314      	adds	r3, #20
 80070b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	23a5      	movs	r3, #165	; 0xa5
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	58d3      	ldr	r3, [r2, r3]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d164      	bne.n	8007190 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d915      	bls.n	80070fe <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	1ad2      	subs	r2, r2, r3
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	0018      	movs	r0, r3
 80070ec:	f000 ffec 	bl	80080c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	2300      	movs	r3, #0
 80070f4:	2200      	movs	r2, #0
 80070f6:	2100      	movs	r1, #0
 80070f8:	f001 fc2c 	bl	8008954 <USBD_LL_PrepareReceive>
 80070fc:	e059      	b.n	80071b2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	0019      	movs	r1, r3
 8007108:	0010      	movs	r0, r2
 800710a:	f7f9 f883 	bl	8000214 <__aeabi_uidivmod>
 800710e:	1e0b      	subs	r3, r1, #0
 8007110:	d11f      	bne.n	8007152 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800711a:	429a      	cmp	r2, r3
 800711c:	d319      	bcc.n	8007152 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	68f9      	ldr	r1, [r7, #12]
 8007124:	23a6      	movs	r3, #166	; 0xa6
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800712a:	429a      	cmp	r2, r3
 800712c:	d211      	bcs.n	8007152 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	2100      	movs	r1, #0
 8007134:	0018      	movs	r0, r3
 8007136:	f000 ffc7 	bl	80080c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	23a6      	movs	r3, #166	; 0xa6
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	2100      	movs	r1, #0
 8007142:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	2300      	movs	r3, #0
 8007148:	2200      	movs	r2, #0
 800714a:	2100      	movs	r1, #0
 800714c:	f001 fc02 	bl	8008954 <USBD_LL_PrepareReceive>
 8007150:	e02f      	b.n	80071b2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	23ad      	movs	r3, #173	; 0xad
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	58d3      	ldr	r3, [r2, r3]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00d      	beq.n	800717c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	23a7      	movs	r3, #167	; 0xa7
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007168:	2b03      	cmp	r3, #3
 800716a:	d107      	bne.n	800717c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	23ad      	movs	r3, #173	; 0xad
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	58d3      	ldr	r3, [r2, r3]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	0010      	movs	r0, r2
 800717a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2180      	movs	r1, #128	; 0x80
 8007180:	0018      	movs	r0, r3
 8007182:	f001 fafe 	bl	8008782 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	0018      	movs	r0, r3
 800718a:	f000 ffd7 	bl	800813c <USBD_CtlReceiveStatus>
 800718e:	e010      	b.n	80071b2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	23a5      	movs	r3, #165	; 0xa5
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	58d3      	ldr	r3, [r2, r3]
 8007198:	2b04      	cmp	r3, #4
 800719a:	d005      	beq.n	80071a8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	23a5      	movs	r3, #165	; 0xa5
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d104      	bne.n	80071b2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2180      	movs	r1, #128	; 0x80
 80071ac:	0018      	movs	r0, r3
 80071ae:	f001 fae8 	bl	8008782 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	23a8      	movs	r3, #168	; 0xa8
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	5cd3      	ldrb	r3, [r2, r3]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d124      	bne.n	8007208 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	0018      	movs	r0, r3
 80071c2:	f7ff fe43 	bl	8006e4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	23a8      	movs	r3, #168	; 0xa8
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	2100      	movs	r1, #0
 80071ce:	54d1      	strb	r1, [r2, r3]
 80071d0:	e01a      	b.n	8007208 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	23ad      	movs	r3, #173	; 0xad
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	58d3      	ldr	r3, [r2, r3]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d011      	beq.n	8007204 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	23a7      	movs	r3, #167	; 0xa7
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d10b      	bne.n	8007204 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	23ad      	movs	r3, #173	; 0xad
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	58d3      	ldr	r3, [r2, r3]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	220b      	movs	r2, #11
 80071f8:	18ba      	adds	r2, r7, r2
 80071fa:	7811      	ldrb	r1, [r2, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	0010      	movs	r0, r2
 8007200:	4798      	blx	r3
 8007202:	e001      	b.n	8007208 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007204:	2302      	movs	r3, #2
 8007206:	e000      	b.n	800720a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	0018      	movs	r0, r3
 800720c:	46bd      	mov	sp, r7
 800720e:	b006      	add	sp, #24
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	2340      	movs	r3, #64	; 0x40
 800721e:	2200      	movs	r2, #0
 8007220:	2100      	movs	r1, #0
 8007222:	f001 fa4c 	bl	80086be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	23ac      	movs	r3, #172	; 0xac
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	2101      	movs	r1, #1
 800722e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	23b2      	movs	r3, #178	; 0xb2
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	2140      	movs	r1, #64	; 0x40
 8007238:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	2340      	movs	r3, #64	; 0x40
 800723e:	2200      	movs	r2, #0
 8007240:	2180      	movs	r1, #128	; 0x80
 8007242:	f001 fa3c 	bl	80086be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2240      	movs	r2, #64	; 0x40
 8007250:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	23a7      	movs	r3, #167	; 0xa7
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	2101      	movs	r1, #1
 800725a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	23a5      	movs	r3, #165	; 0xa5
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	2100      	movs	r1, #0
 8007264:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	23a9      	movs	r3, #169	; 0xa9
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	2100      	movs	r1, #0
 8007274:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	23ae      	movs	r3, #174	; 0xae
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	58d3      	ldr	r3, [r2, r3]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	23ad      	movs	r3, #173	; 0xad
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	58d3      	ldr	r3, [r2, r3]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	b2d9      	uxtb	r1, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	0018      	movs	r0, r3
 8007296:	4790      	blx	r2
  }

  return USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	0018      	movs	r0, r3
 800729c:	46bd      	mov	sp, r7
 800729e:	b002      	add	sp, #8
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	000a      	movs	r2, r1
 80072ac:	1cfb      	adds	r3, r7, #3
 80072ae:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	1cfa      	adds	r2, r7, #3
 80072b4:	7812      	ldrb	r2, [r2, #0]
 80072b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	0018      	movs	r0, r3
 80072bc:	46bd      	mov	sp, r7
 80072be:	b002      	add	sp, #8
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	23a7      	movs	r3, #167	; 0xa7
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	5cd1      	ldrb	r1, [r2, r3]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a06      	ldr	r2, [pc, #24]	; (80072f0 <USBD_LL_Suspend+0x2c>)
 80072d8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	23a7      	movs	r3, #167	; 0xa7
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	2104      	movs	r1, #4
 80072e2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	0018      	movs	r0, r3
 80072e8:	46bd      	mov	sp, r7
 80072ea:	b002      	add	sp, #8
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	46c0      	nop			; (mov r8, r8)
 80072f0:	0000029d 	.word	0x0000029d

080072f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	23a7      	movs	r3, #167	; 0xa7
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	5cd3      	ldrb	r3, [r2, r3]
 8007304:	2b04      	cmp	r3, #4
 8007306:	d106      	bne.n	8007316 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a05      	ldr	r2, [pc, #20]	; (8007320 <USBD_LL_Resume+0x2c>)
 800730c:	5c99      	ldrb	r1, [r3, r2]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	23a7      	movs	r3, #167	; 0xa7
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	0018      	movs	r0, r3
 800731a:	46bd      	mov	sp, r7
 800731c:	b002      	add	sp, #8
 800731e:	bd80      	pop	{r7, pc}
 8007320:	0000029d 	.word	0x0000029d

08007324 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	23a7      	movs	r3, #167	; 0xa7
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	5cd3      	ldrb	r3, [r2, r3]
 8007334:	2b03      	cmp	r3, #3
 8007336:	d10e      	bne.n	8007356 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	23ad      	movs	r3, #173	; 0xad
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	58d3      	ldr	r3, [r2, r3]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	23ad      	movs	r3, #173	; 0xad
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	58d3      	ldr	r3, [r2, r3]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	0010      	movs	r0, r2
 8007354:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	0018      	movs	r0, r3
 800735a:	46bd      	mov	sp, r7
 800735c:	b002      	add	sp, #8
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800736a:	230f      	movs	r3, #15
 800736c:	18fb      	adds	r3, r7, r3
 800736e:	2200      	movs	r2, #0
 8007370:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	001a      	movs	r2, r3
 8007378:	2360      	movs	r3, #96	; 0x60
 800737a:	4013      	ands	r3, r2
 800737c:	2b40      	cmp	r3, #64	; 0x40
 800737e:	d004      	beq.n	800738a <USBD_StdDevReq+0x2a>
 8007380:	d84f      	bhi.n	8007422 <USBD_StdDevReq+0xc2>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00b      	beq.n	800739e <USBD_StdDevReq+0x3e>
 8007386:	2b20      	cmp	r3, #32
 8007388:	d14b      	bne.n	8007422 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	23ad      	movs	r3, #173	; 0xad
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	58d3      	ldr	r3, [r2, r3]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	0010      	movs	r0, r2
 800739a:	4798      	blx	r3
      break;
 800739c:	e048      	b.n	8007430 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	785b      	ldrb	r3, [r3, #1]
 80073a2:	2b09      	cmp	r3, #9
 80073a4:	d835      	bhi.n	8007412 <USBD_StdDevReq+0xb2>
 80073a6:	009a      	lsls	r2, r3, #2
 80073a8:	4b25      	ldr	r3, [pc, #148]	; (8007440 <USBD_StdDevReq+0xe0>)
 80073aa:	18d3      	adds	r3, r2, r3
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	0011      	movs	r1, r2
 80073b6:	0018      	movs	r0, r3
 80073b8:	f000 fa52 	bl	8007860 <USBD_GetDescriptor>
          break;
 80073bc:	e030      	b.n	8007420 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	0011      	movs	r1, r2
 80073c4:	0018      	movs	r0, r3
 80073c6:	f000 fbfd 	bl	8007bc4 <USBD_SetAddress>
          break;
 80073ca:	e029      	b.n	8007420 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	0011      	movs	r1, r2
 80073d2:	0018      	movs	r0, r3
 80073d4:	f000 fc4a 	bl	8007c6c <USBD_SetConfig>
          break;
 80073d8:	e022      	b.n	8007420 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	0011      	movs	r1, r2
 80073e0:	0018      	movs	r0, r3
 80073e2:	f000 fce7 	bl	8007db4 <USBD_GetConfig>
          break;
 80073e6:	e01b      	b.n	8007420 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	0011      	movs	r1, r2
 80073ee:	0018      	movs	r0, r3
 80073f0:	f000 fd1b 	bl	8007e2a <USBD_GetStatus>
          break;
 80073f4:	e014      	b.n	8007420 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	0011      	movs	r1, r2
 80073fc:	0018      	movs	r0, r3
 80073fe:	f000 fd4e 	bl	8007e9e <USBD_SetFeature>
          break;
 8007402:	e00d      	b.n	8007420 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	0011      	movs	r1, r2
 800740a:	0018      	movs	r0, r3
 800740c:	f000 fd5d 	bl	8007eca <USBD_ClrFeature>
          break;
 8007410:	e006      	b.n	8007420 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	0011      	movs	r1, r2
 8007418:	0018      	movs	r0, r3
 800741a:	f000 fdb7 	bl	8007f8c <USBD_CtlError>
          break;
 800741e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007420:	e006      	b.n	8007430 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	0011      	movs	r1, r2
 8007428:	0018      	movs	r0, r3
 800742a:	f000 fdaf 	bl	8007f8c <USBD_CtlError>
      break;
 800742e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007430:	230f      	movs	r3, #15
 8007432:	18fb      	adds	r3, r7, r3
 8007434:	781b      	ldrb	r3, [r3, #0]
}
 8007436:	0018      	movs	r0, r3
 8007438:	46bd      	mov	sp, r7
 800743a:	b004      	add	sp, #16
 800743c:	bd80      	pop	{r7, pc}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	08008b88 	.word	0x08008b88

08007444 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007444:	b5b0      	push	{r4, r5, r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800744e:	230f      	movs	r3, #15
 8007450:	18fb      	adds	r3, r7, r3
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	001a      	movs	r2, r3
 800745c:	2360      	movs	r3, #96	; 0x60
 800745e:	4013      	ands	r3, r2
 8007460:	2b40      	cmp	r3, #64	; 0x40
 8007462:	d004      	beq.n	800746e <USBD_StdItfReq+0x2a>
 8007464:	d839      	bhi.n	80074da <USBD_StdItfReq+0x96>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <USBD_StdItfReq+0x2a>
 800746a:	2b20      	cmp	r3, #32
 800746c:	d135      	bne.n	80074da <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	23a7      	movs	r3, #167	; 0xa7
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	5cd3      	ldrb	r3, [r2, r3]
 8007476:	3b01      	subs	r3, #1
 8007478:	2b02      	cmp	r3, #2
 800747a:	d825      	bhi.n	80074c8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	889b      	ldrh	r3, [r3, #4]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b01      	cmp	r3, #1
 8007484:	d819      	bhi.n	80074ba <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	23ad      	movs	r3, #173	; 0xad
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	58d3      	ldr	r3, [r2, r3]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	250f      	movs	r5, #15
 8007492:	197c      	adds	r4, r7, r5
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	0010      	movs	r0, r2
 800749a:	4798      	blx	r3
 800749c:	0003      	movs	r3, r0
 800749e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	88db      	ldrh	r3, [r3, #6]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d116      	bne.n	80074d6 <USBD_StdItfReq+0x92>
 80074a8:	197b      	adds	r3, r7, r5
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d112      	bne.n	80074d6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	0018      	movs	r0, r3
 80074b4:	f000 fe2e 	bl	8008114 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074b8:	e00d      	b.n	80074d6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	0011      	movs	r1, r2
 80074c0:	0018      	movs	r0, r3
 80074c2:	f000 fd63 	bl	8007f8c <USBD_CtlError>
          break;
 80074c6:	e006      	b.n	80074d6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	0011      	movs	r1, r2
 80074ce:	0018      	movs	r0, r3
 80074d0:	f000 fd5c 	bl	8007f8c <USBD_CtlError>
          break;
 80074d4:	e000      	b.n	80074d8 <USBD_StdItfReq+0x94>
          break;
 80074d6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80074d8:	e006      	b.n	80074e8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	0011      	movs	r1, r2
 80074e0:	0018      	movs	r0, r3
 80074e2:	f000 fd53 	bl	8007f8c <USBD_CtlError>
      break;
 80074e6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	0018      	movs	r0, r3
 80074ec:	46bd      	mov	sp, r7
 80074ee:	b004      	add	sp, #16
 80074f0:	bdb0      	pop	{r4, r5, r7, pc}

080074f2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80074f2:	b5b0      	push	{r4, r5, r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074fc:	230f      	movs	r3, #15
 80074fe:	18fb      	adds	r3, r7, r3
 8007500:	2200      	movs	r2, #0
 8007502:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	889a      	ldrh	r2, [r3, #4]
 8007508:	230e      	movs	r3, #14
 800750a:	18fb      	adds	r3, r7, r3
 800750c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	001a      	movs	r2, r3
 8007514:	2360      	movs	r3, #96	; 0x60
 8007516:	4013      	ands	r3, r2
 8007518:	2b40      	cmp	r3, #64	; 0x40
 800751a:	d006      	beq.n	800752a <USBD_StdEPReq+0x38>
 800751c:	d900      	bls.n	8007520 <USBD_StdEPReq+0x2e>
 800751e:	e190      	b.n	8007842 <USBD_StdEPReq+0x350>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00c      	beq.n	800753e <USBD_StdEPReq+0x4c>
 8007524:	2b20      	cmp	r3, #32
 8007526:	d000      	beq.n	800752a <USBD_StdEPReq+0x38>
 8007528:	e18b      	b.n	8007842 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	23ad      	movs	r3, #173	; 0xad
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	58d3      	ldr	r3, [r2, r3]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	0010      	movs	r0, r2
 800753a:	4798      	blx	r3
      break;
 800753c:	e188      	b.n	8007850 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	001a      	movs	r2, r3
 8007544:	2360      	movs	r3, #96	; 0x60
 8007546:	4013      	ands	r3, r2
 8007548:	2b20      	cmp	r3, #32
 800754a:	d10f      	bne.n	800756c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	23ad      	movs	r3, #173	; 0xad
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	58d3      	ldr	r3, [r2, r3]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	250f      	movs	r5, #15
 8007558:	197c      	adds	r4, r7, r5
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	0010      	movs	r0, r2
 8007560:	4798      	blx	r3
 8007562:	0003      	movs	r3, r0
 8007564:	7023      	strb	r3, [r4, #0]

        return ret;
 8007566:	197b      	adds	r3, r7, r5
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	e174      	b.n	8007856 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	2b03      	cmp	r3, #3
 8007572:	d007      	beq.n	8007584 <USBD_StdEPReq+0x92>
 8007574:	dd00      	ble.n	8007578 <USBD_StdEPReq+0x86>
 8007576:	e15c      	b.n	8007832 <USBD_StdEPReq+0x340>
 8007578:	2b00      	cmp	r3, #0
 800757a:	d100      	bne.n	800757e <USBD_StdEPReq+0x8c>
 800757c:	e092      	b.n	80076a4 <USBD_StdEPReq+0x1b2>
 800757e:	2b01      	cmp	r3, #1
 8007580:	d04b      	beq.n	800761a <USBD_StdEPReq+0x128>
 8007582:	e156      	b.n	8007832 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	23a7      	movs	r3, #167	; 0xa7
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	5cd3      	ldrb	r3, [r2, r3]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d002      	beq.n	8007596 <USBD_StdEPReq+0xa4>
 8007590:	2b03      	cmp	r3, #3
 8007592:	d01d      	beq.n	80075d0 <USBD_StdEPReq+0xde>
 8007594:	e039      	b.n	800760a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007596:	220e      	movs	r2, #14
 8007598:	18bb      	adds	r3, r7, r2
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d010      	beq.n	80075c2 <USBD_StdEPReq+0xd0>
 80075a0:	18bb      	adds	r3, r7, r2
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b80      	cmp	r3, #128	; 0x80
 80075a6:	d00c      	beq.n	80075c2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075a8:	18bb      	adds	r3, r7, r2
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	0011      	movs	r1, r2
 80075b0:	0018      	movs	r0, r3
 80075b2:	f001 f8e6 	bl	8008782 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2180      	movs	r1, #128	; 0x80
 80075ba:	0018      	movs	r0, r3
 80075bc:	f001 f8e1 	bl	8008782 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075c0:	e02a      	b.n	8007618 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	0011      	movs	r1, r2
 80075c8:	0018      	movs	r0, r3
 80075ca:	f000 fcdf 	bl	8007f8c <USBD_CtlError>
              break;
 80075ce:	e023      	b.n	8007618 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	885b      	ldrh	r3, [r3, #2]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d113      	bne.n	8007600 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80075d8:	220e      	movs	r2, #14
 80075da:	18bb      	adds	r3, r7, r2
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00e      	beq.n	8007600 <USBD_StdEPReq+0x10e>
 80075e2:	18bb      	adds	r3, r7, r2
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2b80      	cmp	r3, #128	; 0x80
 80075e8:	d00a      	beq.n	8007600 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	88db      	ldrh	r3, [r3, #6]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80075f2:	18bb      	adds	r3, r7, r2
 80075f4:	781a      	ldrb	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	0011      	movs	r1, r2
 80075fa:	0018      	movs	r0, r3
 80075fc:	f001 f8c1 	bl	8008782 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	0018      	movs	r0, r3
 8007604:	f000 fd86 	bl	8008114 <USBD_CtlSendStatus>

              break;
 8007608:	e006      	b.n	8007618 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	0011      	movs	r1, r2
 8007610:	0018      	movs	r0, r3
 8007612:	f000 fcbb 	bl	8007f8c <USBD_CtlError>
              break;
 8007616:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007618:	e112      	b.n	8007840 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	23a7      	movs	r3, #167	; 0xa7
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	5cd3      	ldrb	r3, [r2, r3]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d002      	beq.n	800762c <USBD_StdEPReq+0x13a>
 8007626:	2b03      	cmp	r3, #3
 8007628:	d01d      	beq.n	8007666 <USBD_StdEPReq+0x174>
 800762a:	e032      	b.n	8007692 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800762c:	220e      	movs	r2, #14
 800762e:	18bb      	adds	r3, r7, r2
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d010      	beq.n	8007658 <USBD_StdEPReq+0x166>
 8007636:	18bb      	adds	r3, r7, r2
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b80      	cmp	r3, #128	; 0x80
 800763c:	d00c      	beq.n	8007658 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800763e:	18bb      	adds	r3, r7, r2
 8007640:	781a      	ldrb	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	0011      	movs	r1, r2
 8007646:	0018      	movs	r0, r3
 8007648:	f001 f89b 	bl	8008782 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2180      	movs	r1, #128	; 0x80
 8007650:	0018      	movs	r0, r3
 8007652:	f001 f896 	bl	8008782 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007656:	e024      	b.n	80076a2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	0011      	movs	r1, r2
 800765e:	0018      	movs	r0, r3
 8007660:	f000 fc94 	bl	8007f8c <USBD_CtlError>
              break;
 8007664:	e01d      	b.n	80076a2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	885b      	ldrh	r3, [r3, #2]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d118      	bne.n	80076a0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800766e:	210e      	movs	r1, #14
 8007670:	187b      	adds	r3, r7, r1
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	227f      	movs	r2, #127	; 0x7f
 8007676:	4013      	ands	r3, r2
 8007678:	d006      	beq.n	8007688 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800767a:	187b      	adds	r3, r7, r1
 800767c:	781a      	ldrb	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	0011      	movs	r1, r2
 8007682:	0018      	movs	r0, r3
 8007684:	f001 f8a8 	bl	80087d8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	0018      	movs	r0, r3
 800768c:	f000 fd42 	bl	8008114 <USBD_CtlSendStatus>
              }
              break;
 8007690:	e006      	b.n	80076a0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	0011      	movs	r1, r2
 8007698:	0018      	movs	r0, r3
 800769a:	f000 fc77 	bl	8007f8c <USBD_CtlError>
              break;
 800769e:	e000      	b.n	80076a2 <USBD_StdEPReq+0x1b0>
              break;
 80076a0:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80076a2:	e0cd      	b.n	8007840 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	23a7      	movs	r3, #167	; 0xa7
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	5cd3      	ldrb	r3, [r2, r3]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d002      	beq.n	80076b6 <USBD_StdEPReq+0x1c4>
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d03c      	beq.n	800772e <USBD_StdEPReq+0x23c>
 80076b4:	e0b5      	b.n	8007822 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076b6:	220e      	movs	r2, #14
 80076b8:	18bb      	adds	r3, r7, r2
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <USBD_StdEPReq+0x1e4>
 80076c0:	18bb      	adds	r3, r7, r2
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b80      	cmp	r3, #128	; 0x80
 80076c6:	d006      	beq.n	80076d6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	0011      	movs	r1, r2
 80076ce:	0018      	movs	r0, r3
 80076d0:	f000 fc5c 	bl	8007f8c <USBD_CtlError>
                break;
 80076d4:	e0ac      	b.n	8007830 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076d6:	220e      	movs	r2, #14
 80076d8:	18bb      	adds	r3, r7, r2
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	b25b      	sxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	da0c      	bge.n	80076fc <USBD_StdEPReq+0x20a>
 80076e2:	18bb      	adds	r3, r7, r2
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	227f      	movs	r2, #127	; 0x7f
 80076e8:	401a      	ands	r2, r3
 80076ea:	0013      	movs	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	189b      	adds	r3, r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	3310      	adds	r3, #16
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	18d3      	adds	r3, r2, r3
 80076f8:	3304      	adds	r3, #4
 80076fa:	e00d      	b.n	8007718 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076fc:	230e      	movs	r3, #14
 80076fe:	18fb      	adds	r3, r7, r3
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	227f      	movs	r2, #127	; 0x7f
 8007704:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007706:	0013      	movs	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	189b      	adds	r3, r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	3351      	adds	r3, #81	; 0x51
 8007710:	33ff      	adds	r3, #255	; 0xff
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	18d3      	adds	r3, r2, r3
 8007716:	3304      	adds	r3, #4
 8007718:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007720:	68b9      	ldr	r1, [r7, #8]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2202      	movs	r2, #2
 8007726:	0018      	movs	r0, r3
 8007728:	f000 fcae 	bl	8008088 <USBD_CtlSendData>
              break;
 800772c:	e080      	b.n	8007830 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800772e:	220e      	movs	r2, #14
 8007730:	18bb      	adds	r3, r7, r2
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	b25b      	sxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	da14      	bge.n	8007764 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800773a:	18bb      	adds	r3, r7, r2
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	220f      	movs	r2, #15
 8007740:	401a      	ands	r2, r3
 8007742:	6879      	ldr	r1, [r7, #4]
 8007744:	0013      	movs	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	189b      	adds	r3, r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	18cb      	adds	r3, r1, r3
 800774e:	3318      	adds	r3, #24
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d11e      	bne.n	8007794 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	0011      	movs	r1, r2
 800775c:	0018      	movs	r0, r3
 800775e:	f000 fc15 	bl	8007f8c <USBD_CtlError>
                  break;
 8007762:	e065      	b.n	8007830 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007764:	230e      	movs	r3, #14
 8007766:	18fb      	adds	r3, r7, r3
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	220f      	movs	r2, #15
 800776c:	401a      	ands	r2, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	23ac      	movs	r3, #172	; 0xac
 8007772:	0059      	lsls	r1, r3, #1
 8007774:	0013      	movs	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	189b      	adds	r3, r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	18c3      	adds	r3, r0, r3
 800777e:	185b      	adds	r3, r3, r1
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d106      	bne.n	8007794 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	0011      	movs	r1, r2
 800778c:	0018      	movs	r0, r3
 800778e:	f000 fbfd 	bl	8007f8c <USBD_CtlError>
                  break;
 8007792:	e04d      	b.n	8007830 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007794:	220e      	movs	r2, #14
 8007796:	18bb      	adds	r3, r7, r2
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b25b      	sxtb	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	da0c      	bge.n	80077ba <USBD_StdEPReq+0x2c8>
 80077a0:	18bb      	adds	r3, r7, r2
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	227f      	movs	r2, #127	; 0x7f
 80077a6:	401a      	ands	r2, r3
 80077a8:	0013      	movs	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	189b      	adds	r3, r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	3310      	adds	r3, #16
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	18d3      	adds	r3, r2, r3
 80077b6:	3304      	adds	r3, #4
 80077b8:	e00d      	b.n	80077d6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077ba:	230e      	movs	r3, #14
 80077bc:	18fb      	adds	r3, r7, r3
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	227f      	movs	r2, #127	; 0x7f
 80077c2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077c4:	0013      	movs	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	189b      	adds	r3, r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	3351      	adds	r3, #81	; 0x51
 80077ce:	33ff      	adds	r3, #255	; 0xff
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	18d3      	adds	r3, r2, r3
 80077d4:	3304      	adds	r3, #4
 80077d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077d8:	220e      	movs	r2, #14
 80077da:	18bb      	adds	r3, r7, r2
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <USBD_StdEPReq+0x2f8>
 80077e2:	18bb      	adds	r3, r7, r2
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b80      	cmp	r3, #128	; 0x80
 80077e8:	d103      	bne.n	80077f2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	e010      	b.n	8007814 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80077f2:	230e      	movs	r3, #14
 80077f4:	18fb      	adds	r3, r7, r3
 80077f6:	781a      	ldrb	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	0011      	movs	r1, r2
 80077fc:	0018      	movs	r0, r3
 80077fe:	f001 f816 	bl	800882e <USBD_LL_IsStallEP>
 8007802:	1e03      	subs	r3, r0, #0
 8007804:	d003      	beq.n	800780e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2201      	movs	r2, #1
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	e002      	b.n	8007814 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	0018      	movs	r0, r3
 800781c:	f000 fc34 	bl	8008088 <USBD_CtlSendData>
              break;
 8007820:	e006      	b.n	8007830 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	0011      	movs	r1, r2
 8007828:	0018      	movs	r0, r3
 800782a:	f000 fbaf 	bl	8007f8c <USBD_CtlError>
              break;
 800782e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007830:	e006      	b.n	8007840 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	0011      	movs	r1, r2
 8007838:	0018      	movs	r0, r3
 800783a:	f000 fba7 	bl	8007f8c <USBD_CtlError>
          break;
 800783e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007840:	e006      	b.n	8007850 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	0011      	movs	r1, r2
 8007848:	0018      	movs	r0, r3
 800784a:	f000 fb9f 	bl	8007f8c <USBD_CtlError>
      break;
 800784e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007850:	230f      	movs	r3, #15
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	781b      	ldrb	r3, [r3, #0]
}
 8007856:	0018      	movs	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	b004      	add	sp, #16
 800785c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007860 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800786a:	2308      	movs	r3, #8
 800786c:	18fb      	adds	r3, r7, r3
 800786e:	2200      	movs	r2, #0
 8007870:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8007872:	2300      	movs	r3, #0
 8007874:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007876:	230b      	movs	r3, #11
 8007878:	18fb      	adds	r3, r7, r3
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	885b      	ldrh	r3, [r3, #2]
 8007882:	0a1b      	lsrs	r3, r3, #8
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b07      	cmp	r3, #7
 8007888:	d900      	bls.n	800788c <USBD_GetDescriptor+0x2c>
 800788a:	e159      	b.n	8007b40 <USBD_GetDescriptor+0x2e0>
 800788c:	009a      	lsls	r2, r3, #2
 800788e:	4bcb      	ldr	r3, [pc, #812]	; (8007bbc <USBD_GetDescriptor+0x35c>)
 8007890:	18d3      	adds	r3, r2, r3
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	23ac      	movs	r3, #172	; 0xac
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	58d3      	ldr	r3, [r2, r3]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	7c12      	ldrb	r2, [r2, #16]
 80078a4:	2108      	movs	r1, #8
 80078a6:	1879      	adds	r1, r7, r1
 80078a8:	0010      	movs	r0, r2
 80078aa:	4798      	blx	r3
 80078ac:	0003      	movs	r3, r0
 80078ae:	60fb      	str	r3, [r7, #12]
      break;
 80078b0:	e153      	b.n	8007b5a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	7c1b      	ldrb	r3, [r3, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10f      	bne.n	80078da <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	23ad      	movs	r3, #173	; 0xad
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	58d3      	ldr	r3, [r2, r3]
 80078c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c4:	2208      	movs	r2, #8
 80078c6:	18ba      	adds	r2, r7, r2
 80078c8:	0010      	movs	r0, r2
 80078ca:	4798      	blx	r3
 80078cc:	0003      	movs	r3, r0
 80078ce:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3301      	adds	r3, #1
 80078d4:	2202      	movs	r2, #2
 80078d6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078d8:	e13f      	b.n	8007b5a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	23ad      	movs	r3, #173	; 0xad
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	58d3      	ldr	r3, [r2, r3]
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	2208      	movs	r2, #8
 80078e6:	18ba      	adds	r2, r7, r2
 80078e8:	0010      	movs	r0, r2
 80078ea:	4798      	blx	r3
 80078ec:	0003      	movs	r3, r0
 80078ee:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
 80078f4:	2202      	movs	r2, #2
 80078f6:	701a      	strb	r2, [r3, #0]
      break;
 80078f8:	e12f      	b.n	8007b5a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	885b      	ldrh	r3, [r3, #2]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b05      	cmp	r3, #5
 8007902:	d900      	bls.n	8007906 <USBD_GetDescriptor+0xa6>
 8007904:	e0d0      	b.n	8007aa8 <USBD_GetDescriptor+0x248>
 8007906:	009a      	lsls	r2, r3, #2
 8007908:	4bad      	ldr	r3, [pc, #692]	; (8007bc0 <USBD_GetDescriptor+0x360>)
 800790a:	18d3      	adds	r3, r2, r3
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	23ac      	movs	r3, #172	; 0xac
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	58d3      	ldr	r3, [r2, r3]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00d      	beq.n	800793a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	23ac      	movs	r3, #172	; 0xac
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	58d3      	ldr	r3, [r2, r3]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	7c12      	ldrb	r2, [r2, #16]
 800792c:	2108      	movs	r1, #8
 800792e:	1879      	adds	r1, r7, r1
 8007930:	0010      	movs	r0, r2
 8007932:	4798      	blx	r3
 8007934:	0003      	movs	r3, r0
 8007936:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007938:	e0c3      	b.n	8007ac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	0011      	movs	r1, r2
 8007940:	0018      	movs	r0, r3
 8007942:	f000 fb23 	bl	8007f8c <USBD_CtlError>
            err++;
 8007946:	210b      	movs	r1, #11
 8007948:	187b      	adds	r3, r7, r1
 800794a:	781a      	ldrb	r2, [r3, #0]
 800794c:	187b      	adds	r3, r7, r1
 800794e:	3201      	adds	r2, #1
 8007950:	701a      	strb	r2, [r3, #0]
          break;
 8007952:	e0b6      	b.n	8007ac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	23ac      	movs	r3, #172	; 0xac
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	58d3      	ldr	r3, [r2, r3]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00d      	beq.n	800797e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	23ac      	movs	r3, #172	; 0xac
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	58d3      	ldr	r3, [r2, r3]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	7c12      	ldrb	r2, [r2, #16]
 8007970:	2108      	movs	r1, #8
 8007972:	1879      	adds	r1, r7, r1
 8007974:	0010      	movs	r0, r2
 8007976:	4798      	blx	r3
 8007978:	0003      	movs	r3, r0
 800797a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800797c:	e0a1      	b.n	8007ac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	0011      	movs	r1, r2
 8007984:	0018      	movs	r0, r3
 8007986:	f000 fb01 	bl	8007f8c <USBD_CtlError>
            err++;
 800798a:	210b      	movs	r1, #11
 800798c:	187b      	adds	r3, r7, r1
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	187b      	adds	r3, r7, r1
 8007992:	3201      	adds	r2, #1
 8007994:	701a      	strb	r2, [r3, #0]
          break;
 8007996:	e094      	b.n	8007ac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	23ac      	movs	r3, #172	; 0xac
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	58d3      	ldr	r3, [r2, r3]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00d      	beq.n	80079c2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	23ac      	movs	r3, #172	; 0xac
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	58d3      	ldr	r3, [r2, r3]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	7c12      	ldrb	r2, [r2, #16]
 80079b4:	2108      	movs	r1, #8
 80079b6:	1879      	adds	r1, r7, r1
 80079b8:	0010      	movs	r0, r2
 80079ba:	4798      	blx	r3
 80079bc:	0003      	movs	r3, r0
 80079be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c0:	e07f      	b.n	8007ac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	0011      	movs	r1, r2
 80079c8:	0018      	movs	r0, r3
 80079ca:	f000 fadf 	bl	8007f8c <USBD_CtlError>
            err++;
 80079ce:	210b      	movs	r1, #11
 80079d0:	187b      	adds	r3, r7, r1
 80079d2:	781a      	ldrb	r2, [r3, #0]
 80079d4:	187b      	adds	r3, r7, r1
 80079d6:	3201      	adds	r2, #1
 80079d8:	701a      	strb	r2, [r3, #0]
          break;
 80079da:	e072      	b.n	8007ac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	23ac      	movs	r3, #172	; 0xac
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	58d3      	ldr	r3, [r2, r3]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00d      	beq.n	8007a06 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	23ac      	movs	r3, #172	; 0xac
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	58d3      	ldr	r3, [r2, r3]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	7c12      	ldrb	r2, [r2, #16]
 80079f8:	2108      	movs	r1, #8
 80079fa:	1879      	adds	r1, r7, r1
 80079fc:	0010      	movs	r0, r2
 80079fe:	4798      	blx	r3
 8007a00:	0003      	movs	r3, r0
 8007a02:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a04:	e05d      	b.n	8007ac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	0011      	movs	r1, r2
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	f000 fabd 	bl	8007f8c <USBD_CtlError>
            err++;
 8007a12:	210b      	movs	r1, #11
 8007a14:	187b      	adds	r3, r7, r1
 8007a16:	781a      	ldrb	r2, [r3, #0]
 8007a18:	187b      	adds	r3, r7, r1
 8007a1a:	3201      	adds	r2, #1
 8007a1c:	701a      	strb	r2, [r3, #0]
          break;
 8007a1e:	e050      	b.n	8007ac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	23ac      	movs	r3, #172	; 0xac
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	58d3      	ldr	r3, [r2, r3]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00d      	beq.n	8007a4a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	23ac      	movs	r3, #172	; 0xac
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	58d3      	ldr	r3, [r2, r3]
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	7c12      	ldrb	r2, [r2, #16]
 8007a3c:	2108      	movs	r1, #8
 8007a3e:	1879      	adds	r1, r7, r1
 8007a40:	0010      	movs	r0, r2
 8007a42:	4798      	blx	r3
 8007a44:	0003      	movs	r3, r0
 8007a46:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a48:	e03b      	b.n	8007ac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	0011      	movs	r1, r2
 8007a50:	0018      	movs	r0, r3
 8007a52:	f000 fa9b 	bl	8007f8c <USBD_CtlError>
            err++;
 8007a56:	210b      	movs	r1, #11
 8007a58:	187b      	adds	r3, r7, r1
 8007a5a:	781a      	ldrb	r2, [r3, #0]
 8007a5c:	187b      	adds	r3, r7, r1
 8007a5e:	3201      	adds	r2, #1
 8007a60:	701a      	strb	r2, [r3, #0]
          break;
 8007a62:	e02e      	b.n	8007ac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	23ac      	movs	r3, #172	; 0xac
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	58d3      	ldr	r3, [r2, r3]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00d      	beq.n	8007a8e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	23ac      	movs	r3, #172	; 0xac
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	58d3      	ldr	r3, [r2, r3]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	7c12      	ldrb	r2, [r2, #16]
 8007a80:	2108      	movs	r1, #8
 8007a82:	1879      	adds	r1, r7, r1
 8007a84:	0010      	movs	r0, r2
 8007a86:	4798      	blx	r3
 8007a88:	0003      	movs	r3, r0
 8007a8a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a8c:	e019      	b.n	8007ac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	0011      	movs	r1, r2
 8007a94:	0018      	movs	r0, r3
 8007a96:	f000 fa79 	bl	8007f8c <USBD_CtlError>
            err++;
 8007a9a:	210b      	movs	r1, #11
 8007a9c:	187b      	adds	r3, r7, r1
 8007a9e:	781a      	ldrb	r2, [r3, #0]
 8007aa0:	187b      	adds	r3, r7, r1
 8007aa2:	3201      	adds	r2, #1
 8007aa4:	701a      	strb	r2, [r3, #0]
          break;
 8007aa6:	e00c      	b.n	8007ac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	0011      	movs	r1, r2
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f000 fa6c 	bl	8007f8c <USBD_CtlError>
          err++;
 8007ab4:	210b      	movs	r1, #11
 8007ab6:	187b      	adds	r3, r7, r1
 8007ab8:	781a      	ldrb	r2, [r3, #0]
 8007aba:	187b      	adds	r3, r7, r1
 8007abc:	3201      	adds	r2, #1
 8007abe:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8007ac0:	e04b      	b.n	8007b5a <USBD_GetDescriptor+0x2fa>
 8007ac2:	e04a      	b.n	8007b5a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	7c1b      	ldrb	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10b      	bne.n	8007ae4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	23ad      	movs	r3, #173	; 0xad
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	58d3      	ldr	r3, [r2, r3]
 8007ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad6:	2208      	movs	r2, #8
 8007ad8:	18ba      	adds	r2, r7, r2
 8007ada:	0010      	movs	r0, r2
 8007adc:	4798      	blx	r3
 8007ade:	0003      	movs	r3, r0
 8007ae0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ae2:	e03a      	b.n	8007b5a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	0011      	movs	r1, r2
 8007aea:	0018      	movs	r0, r3
 8007aec:	f000 fa4e 	bl	8007f8c <USBD_CtlError>
        err++;
 8007af0:	210b      	movs	r1, #11
 8007af2:	187b      	adds	r3, r7, r1
 8007af4:	781a      	ldrb	r2, [r3, #0]
 8007af6:	187b      	adds	r3, r7, r1
 8007af8:	3201      	adds	r2, #1
 8007afa:	701a      	strb	r2, [r3, #0]
      break;
 8007afc:	e02d      	b.n	8007b5a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	7c1b      	ldrb	r3, [r3, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10f      	bne.n	8007b26 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	23ad      	movs	r3, #173	; 0xad
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	58d3      	ldr	r3, [r2, r3]
 8007b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b10:	2208      	movs	r2, #8
 8007b12:	18ba      	adds	r2, r7, r2
 8007b14:	0010      	movs	r0, r2
 8007b16:	4798      	blx	r3
 8007b18:	0003      	movs	r3, r0
 8007b1a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	2207      	movs	r2, #7
 8007b22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b24:	e019      	b.n	8007b5a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	0011      	movs	r1, r2
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	f000 fa2d 	bl	8007f8c <USBD_CtlError>
        err++;
 8007b32:	210b      	movs	r1, #11
 8007b34:	187b      	adds	r3, r7, r1
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	187b      	adds	r3, r7, r1
 8007b3a:	3201      	adds	r2, #1
 8007b3c:	701a      	strb	r2, [r3, #0]
      break;
 8007b3e:	e00c      	b.n	8007b5a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	0011      	movs	r1, r2
 8007b46:	0018      	movs	r0, r3
 8007b48:	f000 fa20 	bl	8007f8c <USBD_CtlError>
      err++;
 8007b4c:	210b      	movs	r1, #11
 8007b4e:	187b      	adds	r3, r7, r1
 8007b50:	781a      	ldrb	r2, [r3, #0]
 8007b52:	187b      	adds	r3, r7, r1
 8007b54:	3201      	adds	r2, #1
 8007b56:	701a      	strb	r2, [r3, #0]
      break;
 8007b58:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8007b5a:	230b      	movs	r3, #11
 8007b5c:	18fb      	adds	r3, r7, r3
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d127      	bne.n	8007bb4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007b64:	2108      	movs	r1, #8
 8007b66:	187b      	adds	r3, r7, r1
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d019      	beq.n	8007ba2 <USBD_GetDescriptor+0x342>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	88db      	ldrh	r3, [r3, #6]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d015      	beq.n	8007ba2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	88da      	ldrh	r2, [r3, #6]
 8007b7a:	187b      	adds	r3, r7, r1
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	1c18      	adds	r0, r3, #0
 8007b80:	1c11      	adds	r1, r2, #0
 8007b82:	b28a      	uxth	r2, r1
 8007b84:	b283      	uxth	r3, r0
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d900      	bls.n	8007b8c <USBD_GetDescriptor+0x32c>
 8007b8a:	1c01      	adds	r1, r0, #0
 8007b8c:	b28a      	uxth	r2, r1
 8007b8e:	2108      	movs	r1, #8
 8007b90:	187b      	adds	r3, r7, r1
 8007b92:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b94:	187b      	adds	r3, r7, r1
 8007b96:	881a      	ldrh	r2, [r3, #0]
 8007b98:	68f9      	ldr	r1, [r7, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f000 fa73 	bl	8008088 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	88db      	ldrh	r3, [r3, #6]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d105      	bne.n	8007bb6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	0018      	movs	r0, r3
 8007bae:	f000 fab1 	bl	8008114 <USBD_CtlSendStatus>
 8007bb2:	e000      	b.n	8007bb6 <USBD_GetDescriptor+0x356>
    return;
 8007bb4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	b004      	add	sp, #16
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	08008bb0 	.word	0x08008bb0
 8007bc0:	08008bd0 	.word	0x08008bd0

08007bc4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007bc4:	b590      	push	{r4, r7, lr}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	889b      	ldrh	r3, [r3, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d13d      	bne.n	8007c52 <USBD_SetAddress+0x8e>
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	88db      	ldrh	r3, [r3, #6]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d139      	bne.n	8007c52 <USBD_SetAddress+0x8e>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	885b      	ldrh	r3, [r3, #2]
 8007be2:	2b7f      	cmp	r3, #127	; 0x7f
 8007be4:	d835      	bhi.n	8007c52 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	885b      	ldrh	r3, [r3, #2]
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	230f      	movs	r3, #15
 8007bee:	18fb      	adds	r3, r7, r3
 8007bf0:	217f      	movs	r1, #127	; 0x7f
 8007bf2:	400a      	ands	r2, r1
 8007bf4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	23a7      	movs	r3, #167	; 0xa7
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	5cd3      	ldrb	r3, [r2, r3]
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d106      	bne.n	8007c10 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	0011      	movs	r1, r2
 8007c08:	0018      	movs	r0, r3
 8007c0a:	f000 f9bf 	bl	8007f8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0e:	e027      	b.n	8007c60 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	240f      	movs	r4, #15
 8007c14:	193a      	adds	r2, r7, r4
 8007c16:	4914      	ldr	r1, [pc, #80]	; (8007c68 <USBD_SetAddress+0xa4>)
 8007c18:	7812      	ldrb	r2, [r2, #0]
 8007c1a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c1c:	193b      	adds	r3, r7, r4
 8007c1e:	781a      	ldrb	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	0011      	movs	r1, r2
 8007c24:	0018      	movs	r0, r3
 8007c26:	f000 fe33 	bl	8008890 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	f000 fa71 	bl	8008114 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c32:	193b      	adds	r3, r7, r4
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	23a7      	movs	r3, #167	; 0xa7
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	2102      	movs	r1, #2
 8007c42:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c44:	e00c      	b.n	8007c60 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	23a7      	movs	r3, #167	; 0xa7
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c50:	e006      	b.n	8007c60 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	0011      	movs	r1, r2
 8007c58:	0018      	movs	r0, r3
 8007c5a:	f000 f997 	bl	8007f8c <USBD_CtlError>
  }
}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	46c0      	nop			; (mov r8, r8)
 8007c62:	46bd      	mov	sp, r7
 8007c64:	b005      	add	sp, #20
 8007c66:	bd90      	pop	{r4, r7, pc}
 8007c68:	0000029e 	.word	0x0000029e

08007c6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	885b      	ldrh	r3, [r3, #2]
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	4b4c      	ldr	r3, [pc, #304]	; (8007db0 <USBD_SetConfig+0x144>)
 8007c7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c80:	4b4b      	ldr	r3, [pc, #300]	; (8007db0 <USBD_SetConfig+0x144>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d906      	bls.n	8007c96 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007c88:	683a      	ldr	r2, [r7, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	0011      	movs	r1, r2
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f000 f97c 	bl	8007f8c <USBD_CtlError>
 8007c94:	e088      	b.n	8007da8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	23a7      	movs	r3, #167	; 0xa7
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	5cd3      	ldrb	r3, [r2, r3]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d002      	beq.n	8007ca8 <USBD_SetConfig+0x3c>
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d029      	beq.n	8007cfa <USBD_SetConfig+0x8e>
 8007ca6:	e071      	b.n	8007d8c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007ca8:	4b41      	ldr	r3, [pc, #260]	; (8007db0 <USBD_SetConfig+0x144>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d01f      	beq.n	8007cf0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8007cb0:	4b3f      	ldr	r3, [pc, #252]	; (8007db0 <USBD_SetConfig+0x144>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	001a      	movs	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	23a7      	movs	r3, #167	; 0xa7
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	2103      	movs	r1, #3
 8007cc2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007cc4:	4b3a      	ldr	r3, [pc, #232]	; (8007db0 <USBD_SetConfig+0x144>)
 8007cc6:	781a      	ldrb	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	0011      	movs	r1, r2
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f7ff f8c6 	bl	8006e5e <USBD_SetClassConfig>
 8007cd2:	0003      	movs	r3, r0
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d106      	bne.n	8007ce6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	0011      	movs	r1, r2
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f000 f954 	bl	8007f8c <USBD_CtlError>
            return;
 8007ce4:	e060      	b.n	8007da8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	0018      	movs	r0, r3
 8007cea:	f000 fa13 	bl	8008114 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007cee:	e05b      	b.n	8007da8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f000 fa0e 	bl	8008114 <USBD_CtlSendStatus>
        break;
 8007cf8:	e056      	b.n	8007da8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007cfa:	4b2d      	ldr	r3, [pc, #180]	; (8007db0 <USBD_SetConfig+0x144>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d115      	bne.n	8007d2e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	23a7      	movs	r3, #167	; 0xa7
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	2102      	movs	r1, #2
 8007d0a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8007d0c:	4b28      	ldr	r3, [pc, #160]	; (8007db0 <USBD_SetConfig+0x144>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	001a      	movs	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007d16:	4b26      	ldr	r3, [pc, #152]	; (8007db0 <USBD_SetConfig+0x144>)
 8007d18:	781a      	ldrb	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	0011      	movs	r1, r2
 8007d1e:	0018      	movs	r0, r3
 8007d20:	f7ff f8c4 	bl	8006eac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	0018      	movs	r0, r3
 8007d28:	f000 f9f4 	bl	8008114 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d2c:	e03c      	b.n	8007da8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8007d2e:	4b20      	ldr	r3, [pc, #128]	; (8007db0 <USBD_SetConfig+0x144>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	001a      	movs	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d022      	beq.n	8007d82 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	0011      	movs	r1, r2
 8007d46:	0018      	movs	r0, r3
 8007d48:	f7ff f8b0 	bl	8006eac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007d4c:	4b18      	ldr	r3, [pc, #96]	; (8007db0 <USBD_SetConfig+0x144>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	001a      	movs	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d56:	4b16      	ldr	r3, [pc, #88]	; (8007db0 <USBD_SetConfig+0x144>)
 8007d58:	781a      	ldrb	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	0011      	movs	r1, r2
 8007d5e:	0018      	movs	r0, r3
 8007d60:	f7ff f87d 	bl	8006e5e <USBD_SetClassConfig>
 8007d64:	0003      	movs	r3, r0
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d106      	bne.n	8007d78 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	0011      	movs	r1, r2
 8007d70:	0018      	movs	r0, r3
 8007d72:	f000 f90b 	bl	8007f8c <USBD_CtlError>
            return;
 8007d76:	e017      	b.n	8007da8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f000 f9ca 	bl	8008114 <USBD_CtlSendStatus>
        break;
 8007d80:	e012      	b.n	8007da8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	0018      	movs	r0, r3
 8007d86:	f000 f9c5 	bl	8008114 <USBD_CtlSendStatus>
        break;
 8007d8a:	e00d      	b.n	8007da8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	0011      	movs	r1, r2
 8007d92:	0018      	movs	r0, r3
 8007d94:	f000 f8fa 	bl	8007f8c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <USBD_SetConfig+0x144>)
 8007d9a:	781a      	ldrb	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	0011      	movs	r1, r2
 8007da0:	0018      	movs	r0, r3
 8007da2:	f7ff f883 	bl	8006eac <USBD_ClrClassConfig>
        break;
 8007da6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007da8:	46bd      	mov	sp, r7
 8007daa:	b002      	add	sp, #8
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	2000020c 	.word	0x2000020c

08007db4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88db      	ldrh	r3, [r3, #6]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d006      	beq.n	8007dd4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	0011      	movs	r1, r2
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f000 f8dd 	bl	8007f8c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dd2:	e026      	b.n	8007e22 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	23a7      	movs	r3, #167	; 0xa7
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	5cd3      	ldrb	r3, [r2, r3]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	dc02      	bgt.n	8007de6 <USBD_GetConfig+0x32>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	dc03      	bgt.n	8007dec <USBD_GetConfig+0x38>
 8007de4:	e016      	b.n	8007e14 <USBD_GetConfig+0x60>
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d00c      	beq.n	8007e04 <USBD_GetConfig+0x50>
 8007dea:	e013      	b.n	8007e14 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3308      	adds	r3, #8
 8007df6:	0019      	movs	r1, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f000 f943 	bl	8008088 <USBD_CtlSendData>
        break;
 8007e02:	e00e      	b.n	8007e22 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	1d19      	adds	r1, r3, #4
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f000 f93b 	bl	8008088 <USBD_CtlSendData>
        break;
 8007e12:	e006      	b.n	8007e22 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	0011      	movs	r1, r2
 8007e1a:	0018      	movs	r0, r3
 8007e1c:	f000 f8b6 	bl	8007f8c <USBD_CtlError>
        break;
 8007e20:	46c0      	nop			; (mov r8, r8)
}
 8007e22:	46c0      	nop			; (mov r8, r8)
 8007e24:	46bd      	mov	sp, r7
 8007e26:	b002      	add	sp, #8
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	23a7      	movs	r3, #167	; 0xa7
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	5cd3      	ldrb	r3, [r2, r3]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d822      	bhi.n	8007e88 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	88db      	ldrh	r3, [r3, #6]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d006      	beq.n	8007e58 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	0011      	movs	r1, r2
 8007e50:	0018      	movs	r0, r3
 8007e52:	f000 f89b 	bl	8007f8c <USBD_CtlError>
        break;
 8007e56:	e01e      	b.n	8007e96 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	23a9      	movs	r3, #169	; 0xa9
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	58d3      	ldr	r3, [r2, r3]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d005      	beq.n	8007e76 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	330c      	adds	r3, #12
 8007e7a:	0019      	movs	r1, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	0018      	movs	r0, r3
 8007e82:	f000 f901 	bl	8008088 <USBD_CtlSendData>
      break;
 8007e86:	e006      	b.n	8007e96 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007e88:	683a      	ldr	r2, [r7, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	0011      	movs	r1, r2
 8007e8e:	0018      	movs	r0, r3
 8007e90:	f000 f87c 	bl	8007f8c <USBD_CtlError>
      break;
 8007e94:	46c0      	nop			; (mov r8, r8)
  }
}
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b002      	add	sp, #8
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	885b      	ldrh	r3, [r3, #2]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d108      	bne.n	8007ec2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	23a9      	movs	r3, #169	; 0xa9
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	0018      	movs	r0, r3
 8007ebe:	f000 f929 	bl	8008114 <USBD_CtlSendStatus>
  }
}
 8007ec2:	46c0      	nop			; (mov r8, r8)
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	b002      	add	sp, #8
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b082      	sub	sp, #8
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	23a7      	movs	r3, #167	; 0xa7
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	5cd3      	ldrb	r3, [r2, r3]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d80d      	bhi.n	8007efe <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	885b      	ldrh	r3, [r3, #2]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d110      	bne.n	8007f0c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	23a9      	movs	r3, #169	; 0xa9
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f000 f90c 	bl	8008114 <USBD_CtlSendStatus>
      }
      break;
 8007efc:	e006      	b.n	8007f0c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	0011      	movs	r1, r2
 8007f04:	0018      	movs	r0, r3
 8007f06:	f000 f841 	bl	8007f8c <USBD_CtlError>
      break;
 8007f0a:	e000      	b.n	8007f0e <USBD_ClrFeature+0x44>
      break;
 8007f0c:	46c0      	nop			; (mov r8, r8)
  }
}
 8007f0e:	46c0      	nop			; (mov r8, r8)
 8007f10:	46bd      	mov	sp, r7
 8007f12:	b002      	add	sp, #8
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	785a      	ldrb	r2, [r3, #1]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	3302      	adds	r3, #2
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	3303      	adds	r3, #3
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	021b      	lsls	r3, r3, #8
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	18d3      	adds	r3, r2, r3
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	3305      	adds	r3, #5
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	021b      	lsls	r3, r3, #8
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	18d3      	adds	r3, r2, r3
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	3306      	adds	r3, #6
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	3307      	adds	r3, #7
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	18d3      	adds	r3, r2, r3
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	80da      	strh	r2, [r3, #6]

}
 8007f84:	46c0      	nop			; (mov r8, r8)
 8007f86:	46bd      	mov	sp, r7
 8007f88:	b002      	add	sp, #8
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2180      	movs	r1, #128	; 0x80
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	f000 fbf1 	bl	8008782 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	f000 fbec 	bl	8008782 <USBD_LL_StallEP>
}
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	46bd      	mov	sp, r7
 8007fae:	b002      	add	sp, #8
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fb2:	b590      	push	{r4, r7, lr}
 8007fb4:	b087      	sub	sp, #28
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fbe:	2417      	movs	r4, #23
 8007fc0:	193b      	adds	r3, r7, r4
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d03c      	beq.n	8008046 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	0018      	movs	r0, r3
 8007fd0:	f000 f83d 	bl	800804e <USBD_GetLen>
 8007fd4:	0003      	movs	r3, r0
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	18db      	adds	r3, r3, r3
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007fe2:	193b      	adds	r3, r7, r4
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	193a      	adds	r2, r7, r4
 8007fe8:	1c59      	adds	r1, r3, #1
 8007fea:	7011      	strb	r1, [r2, #0]
 8007fec:	001a      	movs	r2, r3
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	189b      	adds	r3, r3, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	7812      	ldrb	r2, [r2, #0]
 8007ff6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ff8:	193b      	adds	r3, r7, r4
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	193a      	adds	r2, r7, r4
 8007ffe:	1c59      	adds	r1, r3, #1
 8008000:	7011      	strb	r1, [r2, #0]
 8008002:	001a      	movs	r2, r3
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	189b      	adds	r3, r3, r2
 8008008:	2203      	movs	r2, #3
 800800a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800800c:	e017      	b.n	800803e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	60fa      	str	r2, [r7, #12]
 8008014:	2417      	movs	r4, #23
 8008016:	193a      	adds	r2, r7, r4
 8008018:	7812      	ldrb	r2, [r2, #0]
 800801a:	1939      	adds	r1, r7, r4
 800801c:	1c50      	adds	r0, r2, #1
 800801e:	7008      	strb	r0, [r1, #0]
 8008020:	0011      	movs	r1, r2
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	1852      	adds	r2, r2, r1
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800802a:	193b      	adds	r3, r7, r4
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	193a      	adds	r2, r7, r4
 8008030:	1c59      	adds	r1, r3, #1
 8008032:	7011      	strb	r1, [r2, #0]
 8008034:	001a      	movs	r2, r3
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	189b      	adds	r3, r3, r2
 800803a:	2200      	movs	r2, #0
 800803c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e3      	bne.n	800800e <USBD_GetString+0x5c>
    }
  }
}
 8008046:	46c0      	nop			; (mov r8, r8)
 8008048:	46bd      	mov	sp, r7
 800804a:	b007      	add	sp, #28
 800804c:	bd90      	pop	{r4, r7, pc}

0800804e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008056:	230f      	movs	r3, #15
 8008058:	18fb      	adds	r3, r7, r3
 800805a:	2200      	movs	r2, #0
 800805c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800805e:	e008      	b.n	8008072 <USBD_GetLen+0x24>
  {
    len++;
 8008060:	210f      	movs	r1, #15
 8008062:	187b      	adds	r3, r7, r1
 8008064:	781a      	ldrb	r2, [r3, #0]
 8008066:	187b      	adds	r3, r7, r1
 8008068:	3201      	adds	r2, #1
 800806a:	701a      	strb	r2, [r3, #0]
    buf++;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3301      	adds	r3, #1
 8008070:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f2      	bne.n	8008060 <USBD_GetLen+0x12>
  }

  return len;
 800807a:	230f      	movs	r3, #15
 800807c:	18fb      	adds	r3, r7, r3
 800807e:	781b      	ldrb	r3, [r3, #0]
}
 8008080:	0018      	movs	r0, r3
 8008082:	46bd      	mov	sp, r7
 8008084:	b004      	add	sp, #16
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	1dbb      	adds	r3, r7, #6
 8008094:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	23a5      	movs	r3, #165	; 0xa5
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	2102      	movs	r1, #2
 800809e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80080a0:	1dbb      	adds	r3, r7, #6
 80080a2:	881a      	ldrh	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080a8:	1dbb      	adds	r3, r7, #6
 80080aa:	881a      	ldrh	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080b0:	1dbb      	adds	r3, r7, #6
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	2100      	movs	r1, #0
 80080ba:	f000 fc14 	bl	80088e6 <USBD_LL_Transmit>

  return USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	0018      	movs	r0, r3
 80080c2:	46bd      	mov	sp, r7
 80080c4:	b004      	add	sp, #16
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	1dbb      	adds	r3, r7, #6
 80080d4:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080d6:	1dbb      	adds	r3, r7, #6
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	2100      	movs	r1, #0
 80080e0:	f000 fc01 	bl	80088e6 <USBD_LL_Transmit>

  return USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	0018      	movs	r0, r3
 80080e8:	46bd      	mov	sp, r7
 80080ea:	b004      	add	sp, #16
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	1dbb      	adds	r3, r7, #6
 80080fa:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080fc:	1dbb      	adds	r3, r7, #6
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	2100      	movs	r1, #0
 8008106:	f000 fc25 	bl	8008954 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	0018      	movs	r0, r3
 800810e:	46bd      	mov	sp, r7
 8008110:	b004      	add	sp, #16
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	23a5      	movs	r3, #165	; 0xa5
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	2104      	movs	r1, #4
 8008124:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	2300      	movs	r3, #0
 800812a:	2200      	movs	r2, #0
 800812c:	2100      	movs	r1, #0
 800812e:	f000 fbda 	bl	80088e6 <USBD_LL_Transmit>

  return USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	0018      	movs	r0, r3
 8008136:	46bd      	mov	sp, r7
 8008138:	b002      	add	sp, #8
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	23a5      	movs	r3, #165	; 0xa5
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	2105      	movs	r1, #5
 800814c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	2300      	movs	r3, #0
 8008152:	2200      	movs	r2, #0
 8008154:	2100      	movs	r1, #0
 8008156:	f000 fbfd 	bl	8008954 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	0018      	movs	r0, r3
 800815e:	46bd      	mov	sp, r7
 8008160:	b002      	add	sp, #8
 8008162:	bd80      	pop	{r7, pc}

08008164 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008168:	490f      	ldr	r1, [pc, #60]	; (80081a8 <MX_USB_DEVICE_Init+0x44>)
 800816a:	4b10      	ldr	r3, [pc, #64]	; (80081ac <MX_USB_DEVICE_Init+0x48>)
 800816c:	2200      	movs	r2, #0
 800816e:	0018      	movs	r0, r3
 8008170:	f7fe fe0e 	bl	8006d90 <USBD_Init>
 8008174:	1e03      	subs	r3, r0, #0
 8008176:	d001      	beq.n	800817c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008178:	f7f8 fcf2 	bl	8000b60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800817c:	4a0c      	ldr	r2, [pc, #48]	; (80081b0 <MX_USB_DEVICE_Init+0x4c>)
 800817e:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <MX_USB_DEVICE_Init+0x48>)
 8008180:	0011      	movs	r1, r2
 8008182:	0018      	movs	r0, r3
 8008184:	f7fe fe35 	bl	8006df2 <USBD_RegisterClass>
 8008188:	1e03      	subs	r3, r0, #0
 800818a:	d001      	beq.n	8008190 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800818c:	f7f8 fce8 	bl	8000b60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008190:	4b06      	ldr	r3, [pc, #24]	; (80081ac <MX_USB_DEVICE_Init+0x48>)
 8008192:	0018      	movs	r0, r3
 8008194:	f7fe fe4d 	bl	8006e32 <USBD_Start>
 8008198:	1e03      	subs	r3, r0, #0
 800819a:	d001      	beq.n	80081a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800819c:	f7f8 fce0 	bl	8000b60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081a0:	46c0      	nop			; (mov r8, r8)
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	46c0      	nop			; (mov r8, r8)
 80081a8:	20000108 	.word	0x20000108
 80081ac:	20000210 	.word	0x20000210
 80081b0:	2000000c 	.word	0x2000000c

080081b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	0002      	movs	r2, r0
 80081bc:	6039      	str	r1, [r7, #0]
 80081be:	1dfb      	adds	r3, r7, #7
 80081c0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2212      	movs	r2, #18
 80081c6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081c8:	4b02      	ldr	r3, [pc, #8]	; (80081d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081ca:	0018      	movs	r0, r3
 80081cc:	46bd      	mov	sp, r7
 80081ce:	b002      	add	sp, #8
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	20000124 	.word	0x20000124

080081d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	0002      	movs	r2, r0
 80081e0:	6039      	str	r1, [r7, #0]
 80081e2:	1dfb      	adds	r3, r7, #7
 80081e4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2204      	movs	r2, #4
 80081ea:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081ec:	4b02      	ldr	r3, [pc, #8]	; (80081f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081ee:	0018      	movs	r0, r3
 80081f0:	46bd      	mov	sp, r7
 80081f2:	b002      	add	sp, #8
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	46c0      	nop			; (mov r8, r8)
 80081f8:	20000138 	.word	0x20000138

080081fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	0002      	movs	r2, r0
 8008204:	6039      	str	r1, [r7, #0]
 8008206:	1dfb      	adds	r3, r7, #7
 8008208:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800820a:	1dfb      	adds	r3, r7, #7
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d106      	bne.n	8008220 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	4908      	ldr	r1, [pc, #32]	; (8008238 <USBD_FS_ProductStrDescriptor+0x3c>)
 8008216:	4b09      	ldr	r3, [pc, #36]	; (800823c <USBD_FS_ProductStrDescriptor+0x40>)
 8008218:	0018      	movs	r0, r3
 800821a:	f7ff feca 	bl	8007fb2 <USBD_GetString>
 800821e:	e005      	b.n	800822c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	4905      	ldr	r1, [pc, #20]	; (8008238 <USBD_FS_ProductStrDescriptor+0x3c>)
 8008224:	4b05      	ldr	r3, [pc, #20]	; (800823c <USBD_FS_ProductStrDescriptor+0x40>)
 8008226:	0018      	movs	r0, r3
 8008228:	f7ff fec3 	bl	8007fb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800822c:	4b02      	ldr	r3, [pc, #8]	; (8008238 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800822e:	0018      	movs	r0, r3
 8008230:	46bd      	mov	sp, r7
 8008232:	b002      	add	sp, #8
 8008234:	bd80      	pop	{r7, pc}
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	200004d4 	.word	0x200004d4
 800823c:	08008ad8 	.word	0x08008ad8

08008240 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	0002      	movs	r2, r0
 8008248:	6039      	str	r1, [r7, #0]
 800824a:	1dfb      	adds	r3, r7, #7
 800824c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	4904      	ldr	r1, [pc, #16]	; (8008264 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008252:	4b05      	ldr	r3, [pc, #20]	; (8008268 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8008254:	0018      	movs	r0, r3
 8008256:	f7ff feac 	bl	8007fb2 <USBD_GetString>
  return USBD_StrDesc;
 800825a:	4b02      	ldr	r3, [pc, #8]	; (8008264 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800825c:	0018      	movs	r0, r3
 800825e:	46bd      	mov	sp, r7
 8008260:	b002      	add	sp, #8
 8008262:	bd80      	pop	{r7, pc}
 8008264:	200004d4 	.word	0x200004d4
 8008268:	08008aec 	.word	0x08008aec

0800826c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	0002      	movs	r2, r0
 8008274:	6039      	str	r1, [r7, #0]
 8008276:	1dfb      	adds	r3, r7, #7
 8008278:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	221a      	movs	r2, #26
 800827e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008280:	f000 f84c 	bl	800831c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008284:	4b02      	ldr	r3, [pc, #8]	; (8008290 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8008286:	0018      	movs	r0, r3
 8008288:	46bd      	mov	sp, r7
 800828a:	b002      	add	sp, #8
 800828c:	bd80      	pop	{r7, pc}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	2000013c 	.word	0x2000013c

08008294 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	0002      	movs	r2, r0
 800829c:	6039      	str	r1, [r7, #0]
 800829e:	1dfb      	adds	r3, r7, #7
 80082a0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80082a2:	1dfb      	adds	r3, r7, #7
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d106      	bne.n	80082b8 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	4908      	ldr	r1, [pc, #32]	; (80082d0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80082ae:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <USBD_FS_ConfigStrDescriptor+0x40>)
 80082b0:	0018      	movs	r0, r3
 80082b2:	f7ff fe7e 	bl	8007fb2 <USBD_GetString>
 80082b6:	e005      	b.n	80082c4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	4905      	ldr	r1, [pc, #20]	; (80082d0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80082bc:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <USBD_FS_ConfigStrDescriptor+0x40>)
 80082be:	0018      	movs	r0, r3
 80082c0:	f7ff fe77 	bl	8007fb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082c4:	4b02      	ldr	r3, [pc, #8]	; (80082d0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80082c6:	0018      	movs	r0, r3
 80082c8:	46bd      	mov	sp, r7
 80082ca:	b002      	add	sp, #8
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	46c0      	nop			; (mov r8, r8)
 80082d0:	200004d4 	.word	0x200004d4
 80082d4:	08008b00 	.word	0x08008b00

080082d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	0002      	movs	r2, r0
 80082e0:	6039      	str	r1, [r7, #0]
 80082e2:	1dfb      	adds	r3, r7, #7
 80082e4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80082e6:	1dfb      	adds	r3, r7, #7
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	4908      	ldr	r1, [pc, #32]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80082f2:	4b09      	ldr	r3, [pc, #36]	; (8008318 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80082f4:	0018      	movs	r0, r3
 80082f6:	f7ff fe5c 	bl	8007fb2 <USBD_GetString>
 80082fa:	e005      	b.n	8008308 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	4905      	ldr	r1, [pc, #20]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008300:	4b05      	ldr	r3, [pc, #20]	; (8008318 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008302:	0018      	movs	r0, r3
 8008304:	f7ff fe55 	bl	8007fb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800830a:	0018      	movs	r0, r3
 800830c:	46bd      	mov	sp, r7
 800830e:	b002      	add	sp, #8
 8008310:	bd80      	pop	{r7, pc}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	200004d4 	.word	0x200004d4
 8008318:	08008b0c 	.word	0x08008b0c

0800831c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008322:	4b10      	ldr	r3, [pc, #64]	; (8008364 <Get_SerialNum+0x48>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008328:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <Get_SerialNum+0x4c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800832e:	4b0f      	ldr	r3, [pc, #60]	; (800836c <Get_SerialNum+0x50>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	18d3      	adds	r3, r2, r3
 800833a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008342:	490b      	ldr	r1, [pc, #44]	; (8008370 <Get_SerialNum+0x54>)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2208      	movs	r2, #8
 8008348:	0018      	movs	r0, r3
 800834a:	f000 f815 	bl	8008378 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800834e:	4909      	ldr	r1, [pc, #36]	; (8008374 <Get_SerialNum+0x58>)
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2204      	movs	r2, #4
 8008354:	0018      	movs	r0, r3
 8008356:	f000 f80f 	bl	8008378 <IntToUnicode>
  }
}
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	46bd      	mov	sp, r7
 800835e:	b004      	add	sp, #16
 8008360:	bd80      	pop	{r7, pc}
 8008362:	46c0      	nop			; (mov r8, r8)
 8008364:	1ff80050 	.word	0x1ff80050
 8008368:	1ff80054 	.word	0x1ff80054
 800836c:	1ff80058 	.word	0x1ff80058
 8008370:	2000013e 	.word	0x2000013e
 8008374:	2000014e 	.word	0x2000014e

08008378 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	1dfb      	adds	r3, r7, #7
 8008384:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8008386:	2117      	movs	r1, #23
 8008388:	187b      	adds	r3, r7, r1
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800838e:	187b      	adds	r3, r7, r1
 8008390:	2200      	movs	r2, #0
 8008392:	701a      	strb	r2, [r3, #0]
 8008394:	e02f      	b.n	80083f6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	0f1b      	lsrs	r3, r3, #28
 800839a:	2b09      	cmp	r3, #9
 800839c:	d80d      	bhi.n	80083ba <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	0f1b      	lsrs	r3, r3, #28
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	2317      	movs	r3, #23
 80083a6:	18fb      	adds	r3, r7, r3
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	0019      	movs	r1, r3
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	185b      	adds	r3, r3, r1
 80083b2:	3230      	adds	r2, #48	; 0x30
 80083b4:	b2d2      	uxtb	r2, r2
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	e00c      	b.n	80083d4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	0f1b      	lsrs	r3, r3, #28
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	2317      	movs	r3, #23
 80083c2:	18fb      	adds	r3, r7, r3
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	0019      	movs	r1, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	185b      	adds	r3, r3, r1
 80083ce:	3237      	adds	r2, #55	; 0x37
 80083d0:	b2d2      	uxtb	r2, r2
 80083d2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083da:	2117      	movs	r1, #23
 80083dc:	187b      	adds	r3, r7, r1
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	3301      	adds	r3, #1
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	18d3      	adds	r3, r2, r3
 80083e8:	2200      	movs	r2, #0
 80083ea:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083ec:	187b      	adds	r3, r7, r1
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	187b      	adds	r3, r7, r1
 80083f2:	3201      	adds	r2, #1
 80083f4:	701a      	strb	r2, [r3, #0]
 80083f6:	2317      	movs	r3, #23
 80083f8:	18fa      	adds	r2, r7, r3
 80083fa:	1dfb      	adds	r3, r7, #7
 80083fc:	7812      	ldrb	r2, [r2, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d3c8      	bcc.n	8008396 <IntToUnicode+0x1e>
  }
}
 8008404:	46c0      	nop			; (mov r8, r8)
 8008406:	46c0      	nop			; (mov r8, r8)
 8008408:	46bd      	mov	sp, r7
 800840a:	b006      	add	sp, #24
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a0a      	ldr	r2, [pc, #40]	; (8008448 <HAL_PCD_MspInit+0x38>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d10e      	bne.n	8008440 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008422:	4b0a      	ldr	r3, [pc, #40]	; (800844c <HAL_PCD_MspInit+0x3c>)
 8008424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008426:	4b09      	ldr	r3, [pc, #36]	; (800844c <HAL_PCD_MspInit+0x3c>)
 8008428:	2180      	movs	r1, #128	; 0x80
 800842a:	0409      	lsls	r1, r1, #16
 800842c:	430a      	orrs	r2, r1
 800842e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008430:	2200      	movs	r2, #0
 8008432:	2100      	movs	r1, #0
 8008434:	201f      	movs	r0, #31
 8008436:	f7f8 fd85 	bl	8000f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800843a:	201f      	movs	r0, #31
 800843c:	f7f8 fd97 	bl	8000f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008440:	46c0      	nop			; (mov r8, r8)
 8008442:	46bd      	mov	sp, r7
 8008444:	b002      	add	sp, #8
 8008446:	bd80      	pop	{r7, pc}
 8008448:	40005c00 	.word	0x40005c00
 800844c:	40021000 	.word	0x40021000

08008450 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	23bc      	movs	r3, #188	; 0xbc
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	58d2      	ldr	r2, [r2, r3]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	21ac      	movs	r1, #172	; 0xac
 8008464:	0089      	lsls	r1, r1, #2
 8008466:	468c      	mov	ip, r1
 8008468:	4463      	add	r3, ip
 800846a:	0019      	movs	r1, r3
 800846c:	0010      	movs	r0, r2
 800846e:	f7fe fd33 	bl	8006ed8 <USBD_LL_SetupStage>
}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	46bd      	mov	sp, r7
 8008476:	b002      	add	sp, #8
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800847a:	b590      	push	{r4, r7, lr}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	000a      	movs	r2, r1
 8008484:	1cfb      	adds	r3, r7, #3
 8008486:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	23bc      	movs	r3, #188	; 0xbc
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	58d4      	ldr	r4, [r2, r3]
 8008490:	1cfb      	adds	r3, r7, #3
 8008492:	781a      	ldrb	r2, [r3, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	23be      	movs	r3, #190	; 0xbe
 8008498:	0059      	lsls	r1, r3, #1
 800849a:	0013      	movs	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	189b      	adds	r3, r3, r2
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	18c3      	adds	r3, r0, r3
 80084a4:	185b      	adds	r3, r3, r1
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	1cfb      	adds	r3, r7, #3
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	0019      	movs	r1, r3
 80084ae:	0020      	movs	r0, r4
 80084b0:	f7fe fd70 	bl	8006f94 <USBD_LL_DataOutStage>
}
 80084b4:	46c0      	nop			; (mov r8, r8)
 80084b6:	46bd      	mov	sp, r7
 80084b8:	b003      	add	sp, #12
 80084ba:	bd90      	pop	{r4, r7, pc}

080084bc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	000a      	movs	r2, r1
 80084c6:	1cfb      	adds	r3, r7, #3
 80084c8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	23bc      	movs	r3, #188	; 0xbc
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	58d0      	ldr	r0, [r2, r3]
 80084d2:	1cfb      	adds	r3, r7, #3
 80084d4:	781a      	ldrb	r2, [r3, #0]
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	0013      	movs	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	189b      	adds	r3, r3, r2
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	18cb      	adds	r3, r1, r3
 80084e2:	333c      	adds	r3, #60	; 0x3c
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	1cfb      	adds	r3, r7, #3
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	0019      	movs	r1, r3
 80084ec:	f7fe fdd4 	bl	8007098 <USBD_LL_DataInStage>
}
 80084f0:	46c0      	nop			; (mov r8, r8)
 80084f2:	46bd      	mov	sp, r7
 80084f4:	b002      	add	sp, #8
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	23bc      	movs	r3, #188	; 0xbc
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	58d3      	ldr	r3, [r2, r3]
 8008508:	0018      	movs	r0, r3
 800850a:	f7fe ff0b 	bl	8007324 <USBD_LL_SOF>
}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	46bd      	mov	sp, r7
 8008512:	b002      	add	sp, #8
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800851e:	230f      	movs	r3, #15
 8008520:	18fb      	adds	r3, r7, r3
 8008522:	2201      	movs	r2, #1
 8008524:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	2b02      	cmp	r3, #2
 800852c:	d001      	beq.n	8008532 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800852e:	f7f8 fb17 	bl	8000b60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	23bc      	movs	r3, #188	; 0xbc
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	58d2      	ldr	r2, [r2, r3]
 800853a:	230f      	movs	r3, #15
 800853c:	18fb      	adds	r3, r7, r3
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	0019      	movs	r1, r3
 8008542:	0010      	movs	r0, r2
 8008544:	f7fe fead 	bl	80072a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	23bc      	movs	r3, #188	; 0xbc
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	58d3      	ldr	r3, [r2, r3]
 8008550:	0018      	movs	r0, r3
 8008552:	f7fe fe5e 	bl	8007212 <USBD_LL_Reset>
}
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	46bd      	mov	sp, r7
 800855a:	b004      	add	sp, #16
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	23bc      	movs	r3, #188	; 0xbc
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	58d3      	ldr	r3, [r2, r3]
 8008570:	0018      	movs	r0, r3
 8008572:	f7fe fea7 	bl	80072c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d005      	beq.n	800858a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <HAL_PCD_SuspendCallback+0x34>)
 8008580:	691a      	ldr	r2, [r3, #16]
 8008582:	4b04      	ldr	r3, [pc, #16]	; (8008594 <HAL_PCD_SuspendCallback+0x34>)
 8008584:	2106      	movs	r1, #6
 8008586:	430a      	orrs	r2, r1
 8008588:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800858a:	46c0      	nop			; (mov r8, r8)
 800858c:	46bd      	mov	sp, r7
 800858e:	b002      	add	sp, #8
 8008590:	bd80      	pop	{r7, pc}
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	e000ed00 	.word	0xe000ed00

08008598 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d007      	beq.n	80085b8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085a8:	4b09      	ldr	r3, [pc, #36]	; (80085d0 <HAL_PCD_ResumeCallback+0x38>)
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	4b08      	ldr	r3, [pc, #32]	; (80085d0 <HAL_PCD_ResumeCallback+0x38>)
 80085ae:	2106      	movs	r1, #6
 80085b0:	438a      	bics	r2, r1
 80085b2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80085b4:	f000 fa1a 	bl	80089ec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	23bc      	movs	r3, #188	; 0xbc
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	58d3      	ldr	r3, [r2, r3]
 80085c0:	0018      	movs	r0, r3
 80085c2:	f7fe fe97 	bl	80072f4 <USBD_LL_Resume>
}
 80085c6:	46c0      	nop			; (mov r8, r8)
 80085c8:	46bd      	mov	sp, r7
 80085ca:	b002      	add	sp, #8
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	46c0      	nop			; (mov r8, r8)
 80085d0:	e000ed00 	.word	0xe000ed00

080085d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80085dc:	4a23      	ldr	r2, [pc, #140]	; (800866c <USBD_LL_Init+0x98>)
 80085de:	23bc      	movs	r3, #188	; 0xbc
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	6879      	ldr	r1, [r7, #4]
 80085e4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	23b0      	movs	r3, #176	; 0xb0
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	491f      	ldr	r1, [pc, #124]	; (800866c <USBD_LL_Init+0x98>)
 80085ee:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80085f0:	4b1e      	ldr	r3, [pc, #120]	; (800866c <USBD_LL_Init+0x98>)
 80085f2:	4a1f      	ldr	r2, [pc, #124]	; (8008670 <USBD_LL_Init+0x9c>)
 80085f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80085f6:	4b1d      	ldr	r3, [pc, #116]	; (800866c <USBD_LL_Init+0x98>)
 80085f8:	2208      	movs	r2, #8
 80085fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80085fc:	4b1b      	ldr	r3, [pc, #108]	; (800866c <USBD_LL_Init+0x98>)
 80085fe:	2202      	movs	r2, #2
 8008600:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008602:	4b1a      	ldr	r3, [pc, #104]	; (800866c <USBD_LL_Init+0x98>)
 8008604:	2202      	movs	r2, #2
 8008606:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008608:	4b18      	ldr	r3, [pc, #96]	; (800866c <USBD_LL_Init+0x98>)
 800860a:	2200      	movs	r2, #0
 800860c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800860e:	4b17      	ldr	r3, [pc, #92]	; (800866c <USBD_LL_Init+0x98>)
 8008610:	2200      	movs	r2, #0
 8008612:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008614:	4b15      	ldr	r3, [pc, #84]	; (800866c <USBD_LL_Init+0x98>)
 8008616:	2200      	movs	r2, #0
 8008618:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800861a:	4b14      	ldr	r3, [pc, #80]	; (800866c <USBD_LL_Init+0x98>)
 800861c:	0018      	movs	r0, r3
 800861e:	f7f8 fe73 	bl	8001308 <HAL_PCD_Init>
 8008622:	1e03      	subs	r3, r0, #0
 8008624:	d001      	beq.n	800862a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8008626:	f7f8 fa9b 	bl	8000b60 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	23b0      	movs	r3, #176	; 0xb0
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	58d0      	ldr	r0, [r2, r3]
 8008632:	2318      	movs	r3, #24
 8008634:	2200      	movs	r2, #0
 8008636:	2100      	movs	r1, #0
 8008638:	f7fa fc1a 	bl	8002e70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	23b0      	movs	r3, #176	; 0xb0
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	58d0      	ldr	r0, [r2, r3]
 8008644:	2358      	movs	r3, #88	; 0x58
 8008646:	2200      	movs	r2, #0
 8008648:	2180      	movs	r1, #128	; 0x80
 800864a:	f7fa fc11 	bl	8002e70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	23b0      	movs	r3, #176	; 0xb0
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	58d0      	ldr	r0, [r2, r3]
 8008656:	2380      	movs	r3, #128	; 0x80
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	2200      	movs	r2, #0
 800865c:	2181      	movs	r1, #129	; 0x81
 800865e:	f7fa fc07 	bl	8002e70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	0018      	movs	r0, r3
 8008666:	46bd      	mov	sp, r7
 8008668:	b002      	add	sp, #8
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200006d4 	.word	0x200006d4
 8008670:	40005c00 	.word	0x40005c00

08008674 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867c:	210f      	movs	r1, #15
 800867e:	187b      	adds	r3, r7, r1
 8008680:	2200      	movs	r2, #0
 8008682:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008684:	260e      	movs	r6, #14
 8008686:	19bb      	adds	r3, r7, r6
 8008688:	2200      	movs	r2, #0
 800868a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	23b0      	movs	r3, #176	; 0xb0
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	58d3      	ldr	r3, [r2, r3]
 8008694:	000d      	movs	r5, r1
 8008696:	187c      	adds	r4, r7, r1
 8008698:	0018      	movs	r0, r3
 800869a:	f7f8 ff35 	bl	8001508 <HAL_PCD_Start>
 800869e:	0003      	movs	r3, r0
 80086a0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a2:	19bc      	adds	r4, r7, r6
 80086a4:	197b      	adds	r3, r7, r5
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	0018      	movs	r0, r3
 80086aa:	f000 f9a6 	bl	80089fa <USBD_Get_USB_Status>
 80086ae:	0003      	movs	r3, r0
 80086b0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80086b2:	19bb      	adds	r3, r7, r6
 80086b4:	781b      	ldrb	r3, [r3, #0]
}
 80086b6:	0018      	movs	r0, r3
 80086b8:	46bd      	mov	sp, r7
 80086ba:	b005      	add	sp, #20
 80086bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086c0:	b085      	sub	sp, #20
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	000c      	movs	r4, r1
 80086c8:	0010      	movs	r0, r2
 80086ca:	0019      	movs	r1, r3
 80086cc:	1cfb      	adds	r3, r7, #3
 80086ce:	1c22      	adds	r2, r4, #0
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	1cbb      	adds	r3, r7, #2
 80086d4:	1c02      	adds	r2, r0, #0
 80086d6:	701a      	strb	r2, [r3, #0]
 80086d8:	003b      	movs	r3, r7
 80086da:	1c0a      	adds	r2, r1, #0
 80086dc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086de:	260f      	movs	r6, #15
 80086e0:	19bb      	adds	r3, r7, r6
 80086e2:	2200      	movs	r2, #0
 80086e4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086e6:	250e      	movs	r5, #14
 80086e8:	197b      	adds	r3, r7, r5
 80086ea:	2200      	movs	r2, #0
 80086ec:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	23b0      	movs	r3, #176	; 0xb0
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	58d0      	ldr	r0, [r2, r3]
 80086f6:	19bc      	adds	r4, r7, r6
 80086f8:	1cbb      	adds	r3, r7, #2
 80086fa:	781d      	ldrb	r5, [r3, #0]
 80086fc:	003b      	movs	r3, r7
 80086fe:	881a      	ldrh	r2, [r3, #0]
 8008700:	1cfb      	adds	r3, r7, #3
 8008702:	7819      	ldrb	r1, [r3, #0]
 8008704:	002b      	movs	r3, r5
 8008706:	f7f9 f894 	bl	8001832 <HAL_PCD_EP_Open>
 800870a:	0003      	movs	r3, r0
 800870c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800870e:	250e      	movs	r5, #14
 8008710:	197c      	adds	r4, r7, r5
 8008712:	19bb      	adds	r3, r7, r6
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	0018      	movs	r0, r3
 8008718:	f000 f96f 	bl	80089fa <USBD_Get_USB_Status>
 800871c:	0003      	movs	r3, r0
 800871e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008720:	197b      	adds	r3, r7, r5
 8008722:	781b      	ldrb	r3, [r3, #0]
}
 8008724:	0018      	movs	r0, r3
 8008726:	46bd      	mov	sp, r7
 8008728:	b005      	add	sp, #20
 800872a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800872c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800872c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	000a      	movs	r2, r1
 8008736:	1cfb      	adds	r3, r7, #3
 8008738:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800873a:	210f      	movs	r1, #15
 800873c:	187b      	adds	r3, r7, r1
 800873e:	2200      	movs	r2, #0
 8008740:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008742:	260e      	movs	r6, #14
 8008744:	19bb      	adds	r3, r7, r6
 8008746:	2200      	movs	r2, #0
 8008748:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	23b0      	movs	r3, #176	; 0xb0
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	58d2      	ldr	r2, [r2, r3]
 8008752:	000d      	movs	r5, r1
 8008754:	187c      	adds	r4, r7, r1
 8008756:	1cfb      	adds	r3, r7, #3
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	0019      	movs	r1, r3
 800875c:	0010      	movs	r0, r2
 800875e:	f7f9 f8d7 	bl	8001910 <HAL_PCD_EP_Close>
 8008762:	0003      	movs	r3, r0
 8008764:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008766:	19bc      	adds	r4, r7, r6
 8008768:	197b      	adds	r3, r7, r5
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	0018      	movs	r0, r3
 800876e:	f000 f944 	bl	80089fa <USBD_Get_USB_Status>
 8008772:	0003      	movs	r3, r0
 8008774:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008776:	19bb      	adds	r3, r7, r6
 8008778:	781b      	ldrb	r3, [r3, #0]
}
 800877a:	0018      	movs	r0, r3
 800877c:	46bd      	mov	sp, r7
 800877e:	b005      	add	sp, #20
 8008780:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008782 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	000a      	movs	r2, r1
 800878c:	1cfb      	adds	r3, r7, #3
 800878e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008790:	210f      	movs	r1, #15
 8008792:	187b      	adds	r3, r7, r1
 8008794:	2200      	movs	r2, #0
 8008796:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008798:	260e      	movs	r6, #14
 800879a:	19bb      	adds	r3, r7, r6
 800879c:	2200      	movs	r2, #0
 800879e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	23b0      	movs	r3, #176	; 0xb0
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	58d2      	ldr	r2, [r2, r3]
 80087a8:	000d      	movs	r5, r1
 80087aa:	187c      	adds	r4, r7, r1
 80087ac:	1cfb      	adds	r3, r7, #3
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	0019      	movs	r1, r3
 80087b2:	0010      	movs	r0, r2
 80087b4:	f7f9 f970 	bl	8001a98 <HAL_PCD_EP_SetStall>
 80087b8:	0003      	movs	r3, r0
 80087ba:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087bc:	19bc      	adds	r4, r7, r6
 80087be:	197b      	adds	r3, r7, r5
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	0018      	movs	r0, r3
 80087c4:	f000 f919 	bl	80089fa <USBD_Get_USB_Status>
 80087c8:	0003      	movs	r3, r0
 80087ca:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80087cc:	19bb      	adds	r3, r7, r6
 80087ce:	781b      	ldrb	r3, [r3, #0]
}
 80087d0:	0018      	movs	r0, r3
 80087d2:	46bd      	mov	sp, r7
 80087d4:	b005      	add	sp, #20
 80087d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087d8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	000a      	movs	r2, r1
 80087e2:	1cfb      	adds	r3, r7, #3
 80087e4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e6:	210f      	movs	r1, #15
 80087e8:	187b      	adds	r3, r7, r1
 80087ea:	2200      	movs	r2, #0
 80087ec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ee:	260e      	movs	r6, #14
 80087f0:	19bb      	adds	r3, r7, r6
 80087f2:	2200      	movs	r2, #0
 80087f4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	23b0      	movs	r3, #176	; 0xb0
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	58d2      	ldr	r2, [r2, r3]
 80087fe:	000d      	movs	r5, r1
 8008800:	187c      	adds	r4, r7, r1
 8008802:	1cfb      	adds	r3, r7, #3
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	0019      	movs	r1, r3
 8008808:	0010      	movs	r0, r2
 800880a:	f7f9 f9a1 	bl	8001b50 <HAL_PCD_EP_ClrStall>
 800880e:	0003      	movs	r3, r0
 8008810:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008812:	19bc      	adds	r4, r7, r6
 8008814:	197b      	adds	r3, r7, r5
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	0018      	movs	r0, r3
 800881a:	f000 f8ee 	bl	80089fa <USBD_Get_USB_Status>
 800881e:	0003      	movs	r3, r0
 8008820:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008822:	19bb      	adds	r3, r7, r6
 8008824:	781b      	ldrb	r3, [r3, #0]
}
 8008826:	0018      	movs	r0, r3
 8008828:	46bd      	mov	sp, r7
 800882a:	b005      	add	sp, #20
 800882c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800882e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	000a      	movs	r2, r1
 8008838:	1cfb      	adds	r3, r7, #3
 800883a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	23b0      	movs	r3, #176	; 0xb0
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	58d3      	ldr	r3, [r2, r3]
 8008844:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008846:	1cfb      	adds	r3, r7, #3
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	b25b      	sxtb	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	da0d      	bge.n	800886c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008850:	1cfb      	adds	r3, r7, #3
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	227f      	movs	r2, #127	; 0x7f
 8008856:	4013      	ands	r3, r2
 8008858:	68f9      	ldr	r1, [r7, #12]
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	0013      	movs	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	189b      	adds	r3, r3, r2
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	18cb      	adds	r3, r1, r3
 8008866:	3302      	adds	r3, #2
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	e00d      	b.n	8008888 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800886c:	1cfb      	adds	r3, r7, #3
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	227f      	movs	r2, #127	; 0x7f
 8008872:	401a      	ands	r2, r3
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	23b5      	movs	r3, #181	; 0xb5
 8008878:	0059      	lsls	r1, r3, #1
 800887a:	0013      	movs	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	189b      	adds	r3, r3, r2
 8008880:	00db      	lsls	r3, r3, #3
 8008882:	18c3      	adds	r3, r0, r3
 8008884:	185b      	adds	r3, r3, r1
 8008886:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008888:	0018      	movs	r0, r3
 800888a:	46bd      	mov	sp, r7
 800888c:	b004      	add	sp, #16
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	000a      	movs	r2, r1
 800889a:	1cfb      	adds	r3, r7, #3
 800889c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800889e:	210f      	movs	r1, #15
 80088a0:	187b      	adds	r3, r7, r1
 80088a2:	2200      	movs	r2, #0
 80088a4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a6:	260e      	movs	r6, #14
 80088a8:	19bb      	adds	r3, r7, r6
 80088aa:	2200      	movs	r2, #0
 80088ac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	23b0      	movs	r3, #176	; 0xb0
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	58d2      	ldr	r2, [r2, r3]
 80088b6:	000d      	movs	r5, r1
 80088b8:	187c      	adds	r4, r7, r1
 80088ba:	1cfb      	adds	r3, r7, #3
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	0019      	movs	r1, r3
 80088c0:	0010      	movs	r0, r2
 80088c2:	f7f8 ff8b 	bl	80017dc <HAL_PCD_SetAddress>
 80088c6:	0003      	movs	r3, r0
 80088c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ca:	19bc      	adds	r4, r7, r6
 80088cc:	197b      	adds	r3, r7, r5
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	0018      	movs	r0, r3
 80088d2:	f000 f892 	bl	80089fa <USBD_Get_USB_Status>
 80088d6:	0003      	movs	r3, r0
 80088d8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80088da:	19bb      	adds	r3, r7, r6
 80088dc:	781b      	ldrb	r3, [r3, #0]
}
 80088de:	0018      	movs	r0, r3
 80088e0:	46bd      	mov	sp, r7
 80088e2:	b005      	add	sp, #20
 80088e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e8:	b087      	sub	sp, #28
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	0008      	movs	r0, r1
 80088f0:	607a      	str	r2, [r7, #4]
 80088f2:	0019      	movs	r1, r3
 80088f4:	230b      	movs	r3, #11
 80088f6:	18fb      	adds	r3, r7, r3
 80088f8:	1c02      	adds	r2, r0, #0
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	2408      	movs	r4, #8
 80088fe:	193b      	adds	r3, r7, r4
 8008900:	1c0a      	adds	r2, r1, #0
 8008902:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008904:	2117      	movs	r1, #23
 8008906:	187b      	adds	r3, r7, r1
 8008908:	2200      	movs	r2, #0
 800890a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890c:	2516      	movs	r5, #22
 800890e:	197b      	adds	r3, r7, r5
 8008910:	2200      	movs	r2, #0
 8008912:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	23b0      	movs	r3, #176	; 0xb0
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	58d0      	ldr	r0, [r2, r3]
 800891c:	193b      	adds	r3, r7, r4
 800891e:	881d      	ldrh	r5, [r3, #0]
 8008920:	000e      	movs	r6, r1
 8008922:	187c      	adds	r4, r7, r1
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	230b      	movs	r3, #11
 8008928:	18fb      	adds	r3, r7, r3
 800892a:	7819      	ldrb	r1, [r3, #0]
 800892c:	002b      	movs	r3, r5
 800892e:	f7f9 f877 	bl	8001a20 <HAL_PCD_EP_Transmit>
 8008932:	0003      	movs	r3, r0
 8008934:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008936:	2516      	movs	r5, #22
 8008938:	197c      	adds	r4, r7, r5
 800893a:	19bb      	adds	r3, r7, r6
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	0018      	movs	r0, r3
 8008940:	f000 f85b 	bl	80089fa <USBD_Get_USB_Status>
 8008944:	0003      	movs	r3, r0
 8008946:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008948:	197b      	adds	r3, r7, r5
 800894a:	781b      	ldrb	r3, [r3, #0]
}
 800894c:	0018      	movs	r0, r3
 800894e:	46bd      	mov	sp, r7
 8008950:	b007      	add	sp, #28
 8008952:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008954 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	0008      	movs	r0, r1
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	0019      	movs	r1, r3
 8008962:	230b      	movs	r3, #11
 8008964:	18fb      	adds	r3, r7, r3
 8008966:	1c02      	adds	r2, r0, #0
 8008968:	701a      	strb	r2, [r3, #0]
 800896a:	2408      	movs	r4, #8
 800896c:	193b      	adds	r3, r7, r4
 800896e:	1c0a      	adds	r2, r1, #0
 8008970:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008972:	2117      	movs	r1, #23
 8008974:	187b      	adds	r3, r7, r1
 8008976:	2200      	movs	r2, #0
 8008978:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800897a:	2516      	movs	r5, #22
 800897c:	197b      	adds	r3, r7, r5
 800897e:	2200      	movs	r2, #0
 8008980:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	23b0      	movs	r3, #176	; 0xb0
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	58d0      	ldr	r0, [r2, r3]
 800898a:	193b      	adds	r3, r7, r4
 800898c:	881d      	ldrh	r5, [r3, #0]
 800898e:	000e      	movs	r6, r1
 8008990:	187c      	adds	r4, r7, r1
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	230b      	movs	r3, #11
 8008996:	18fb      	adds	r3, r7, r3
 8008998:	7819      	ldrb	r1, [r3, #0]
 800899a:	002b      	movs	r3, r5
 800899c:	f7f9 f809 	bl	80019b2 <HAL_PCD_EP_Receive>
 80089a0:	0003      	movs	r3, r0
 80089a2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a4:	2516      	movs	r5, #22
 80089a6:	197c      	adds	r4, r7, r5
 80089a8:	19bb      	adds	r3, r7, r6
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	0018      	movs	r0, r3
 80089ae:	f000 f824 	bl	80089fa <USBD_Get_USB_Status>
 80089b2:	0003      	movs	r3, r0
 80089b4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80089b6:	197b      	adds	r3, r7, r5
 80089b8:	781b      	ldrb	r3, [r3, #0]
}
 80089ba:	0018      	movs	r0, r3
 80089bc:	46bd      	mov	sp, r7
 80089be:	b007      	add	sp, #28
 80089c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080089c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089cc:	4b02      	ldr	r3, [pc, #8]	; (80089d8 <USBD_static_malloc+0x14>)
}
 80089ce:	0018      	movs	r0, r3
 80089d0:	46bd      	mov	sp, r7
 80089d2:	b002      	add	sp, #8
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	46c0      	nop			; (mov r8, r8)
 80089d8:	200009c8 	.word	0x200009c8

080089dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]

}
 80089e4:	46c0      	nop			; (mov r8, r8)
 80089e6:	46bd      	mov	sp, r7
 80089e8:	b002      	add	sp, #8
 80089ea:	bd80      	pop	{r7, pc}

080089ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80089f0:	f7f7 ffb8 	bl	8000964 <SystemClock_Config>
}
 80089f4:	46c0      	nop			; (mov r8, r8)
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	0002      	movs	r2, r0
 8008a02:	1dfb      	adds	r3, r7, #7
 8008a04:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a06:	230f      	movs	r3, #15
 8008a08:	18fb      	adds	r3, r7, r3
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8008a0e:	1dfb      	adds	r3, r7, #7
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d017      	beq.n	8008a46 <USBD_Get_USB_Status+0x4c>
 8008a16:	dc1b      	bgt.n	8008a50 <USBD_Get_USB_Status+0x56>
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d00f      	beq.n	8008a3c <USBD_Get_USB_Status+0x42>
 8008a1c:	dc18      	bgt.n	8008a50 <USBD_Get_USB_Status+0x56>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <USBD_Get_USB_Status+0x2e>
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d005      	beq.n	8008a32 <USBD_Get_USB_Status+0x38>
 8008a26:	e013      	b.n	8008a50 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a28:	230f      	movs	r3, #15
 8008a2a:	18fb      	adds	r3, r7, r3
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	701a      	strb	r2, [r3, #0]
    break;
 8008a30:	e013      	b.n	8008a5a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a32:	230f      	movs	r3, #15
 8008a34:	18fb      	adds	r3, r7, r3
 8008a36:	2202      	movs	r2, #2
 8008a38:	701a      	strb	r2, [r3, #0]
    break;
 8008a3a:	e00e      	b.n	8008a5a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a3c:	230f      	movs	r3, #15
 8008a3e:	18fb      	adds	r3, r7, r3
 8008a40:	2201      	movs	r2, #1
 8008a42:	701a      	strb	r2, [r3, #0]
    break;
 8008a44:	e009      	b.n	8008a5a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a46:	230f      	movs	r3, #15
 8008a48:	18fb      	adds	r3, r7, r3
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	701a      	strb	r2, [r3, #0]
    break;
 8008a4e:	e004      	b.n	8008a5a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8008a50:	230f      	movs	r3, #15
 8008a52:	18fb      	adds	r3, r7, r3
 8008a54:	2202      	movs	r2, #2
 8008a56:	701a      	strb	r2, [r3, #0]
    break;
 8008a58:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8008a5a:	230f      	movs	r3, #15
 8008a5c:	18fb      	adds	r3, r7, r3
 8008a5e:	781b      	ldrb	r3, [r3, #0]
}
 8008a60:	0018      	movs	r0, r3
 8008a62:	46bd      	mov	sp, r7
 8008a64:	b004      	add	sp, #16
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <__libc_init_array>:
 8008a68:	b570      	push	{r4, r5, r6, lr}
 8008a6a:	2600      	movs	r6, #0
 8008a6c:	4d0c      	ldr	r5, [pc, #48]	; (8008aa0 <__libc_init_array+0x38>)
 8008a6e:	4c0d      	ldr	r4, [pc, #52]	; (8008aa4 <__libc_init_array+0x3c>)
 8008a70:	1b64      	subs	r4, r4, r5
 8008a72:	10a4      	asrs	r4, r4, #2
 8008a74:	42a6      	cmp	r6, r4
 8008a76:	d109      	bne.n	8008a8c <__libc_init_array+0x24>
 8008a78:	2600      	movs	r6, #0
 8008a7a:	f000 f821 	bl	8008ac0 <_init>
 8008a7e:	4d0a      	ldr	r5, [pc, #40]	; (8008aa8 <__libc_init_array+0x40>)
 8008a80:	4c0a      	ldr	r4, [pc, #40]	; (8008aac <__libc_init_array+0x44>)
 8008a82:	1b64      	subs	r4, r4, r5
 8008a84:	10a4      	asrs	r4, r4, #2
 8008a86:	42a6      	cmp	r6, r4
 8008a88:	d105      	bne.n	8008a96 <__libc_init_array+0x2e>
 8008a8a:	bd70      	pop	{r4, r5, r6, pc}
 8008a8c:	00b3      	lsls	r3, r6, #2
 8008a8e:	58eb      	ldr	r3, [r5, r3]
 8008a90:	4798      	blx	r3
 8008a92:	3601      	adds	r6, #1
 8008a94:	e7ee      	b.n	8008a74 <__libc_init_array+0xc>
 8008a96:	00b3      	lsls	r3, r6, #2
 8008a98:	58eb      	ldr	r3, [r5, r3]
 8008a9a:	4798      	blx	r3
 8008a9c:	3601      	adds	r6, #1
 8008a9e:	e7f2      	b.n	8008a86 <__libc_init_array+0x1e>
 8008aa0:	08008bf0 	.word	0x08008bf0
 8008aa4:	08008bf0 	.word	0x08008bf0
 8008aa8:	08008bf0 	.word	0x08008bf0
 8008aac:	08008bf4 	.word	0x08008bf4

08008ab0 <memset>:
 8008ab0:	0003      	movs	r3, r0
 8008ab2:	1882      	adds	r2, r0, r2
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d100      	bne.n	8008aba <memset+0xa>
 8008ab8:	4770      	bx	lr
 8008aba:	7019      	strb	r1, [r3, #0]
 8008abc:	3301      	adds	r3, #1
 8008abe:	e7f9      	b.n	8008ab4 <memset+0x4>

08008ac0 <_init>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	46c0      	nop			; (mov r8, r8)
 8008ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac6:	bc08      	pop	{r3}
 8008ac8:	469e      	mov	lr, r3
 8008aca:	4770      	bx	lr

08008acc <_fini>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad2:	bc08      	pop	{r3}
 8008ad4:	469e      	mov	lr, r3
 8008ad6:	4770      	bx	lr
