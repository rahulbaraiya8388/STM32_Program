
ADC_P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037dc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039dc  080039dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039e4  080039e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08003a5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003a5c  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008438  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b16  00000000  00000000  000284d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  00029fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002a828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016743  00000000  00000000  0002afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000091f5  00000000  00000000  00041703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008932f  00000000  00000000  0004a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3c27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002884  00000000  00000000  000d3c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08003900 	.word	0x08003900

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08003900 	.word	0x08003900

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 faef 	bl	8000a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f80c 	bl	80004a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f8dc 	bl	800064c <MX_GPIO_Init>
  MX_ADC_Init();
 8000494:	f000 f856 	bl	8000544 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000498:	f000 f8ae 	bl	80005f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc);
 800049c:	4801      	ldr	r0, [pc, #4]	; (80004a4 <main+0x20>)
 800049e:	f000 fc99 	bl	8000dd4 <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <main+0x1e>
 80004a4:	2000008c 	.word	0x2000008c

080004a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b092      	sub	sp, #72	; 0x48
 80004ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ae:	f107 0314 	add.w	r3, r7, #20
 80004b2:	2234      	movs	r2, #52	; 0x34
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f002 fa86 	bl	80029c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004bc:	463b      	mov	r3, r7
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ca:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <SystemClock_Config+0x98>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004d2:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <SystemClock_Config+0x98>)
 80004d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004d8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004da:	2302      	movs	r3, #2
 80004dc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004de:	2301      	movs	r3, #1
 80004e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e2:	2310      	movs	r3, #16
 80004e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e6:	2302      	movs	r3, #2
 80004e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004ea:	2300      	movs	r3, #0
 80004ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80004f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80004f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 fa34 	bl	800196c <HAL_RCC_OscConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800050a:	f000 f8e7 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050e:	230f      	movs	r3, #15
 8000510:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000512:	2303      	movs	r3, #3
 8000514:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000522:	463b      	mov	r3, r7
 8000524:	2101      	movs	r1, #1
 8000526:	4618      	mov	r0, r3
 8000528:	f001 fd50 	bl	8001fcc <HAL_RCC_ClockConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000532:	f000 f8d3 	bl	80006dc <Error_Handler>
  }
}
 8000536:	bf00      	nop
 8000538:	3748      	adds	r7, #72	; 0x48
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40007000 	.word	0x40007000

08000544 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <MX_ADC_Init+0xac>)
 8000556:	4a27      	ldr	r2, [pc, #156]	; (80005f4 <MX_ADC_Init+0xb0>)
 8000558:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800055a:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <MX_ADC_Init+0xac>)
 800055c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000560:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000562:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <MX_ADC_Init+0xac>)
 8000564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000568:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800056a:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <MX_ADC_Init+0xac>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <MX_ADC_Init+0xac>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000576:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <MX_ADC_Init+0xac>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800057c:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <MX_ADC_Init+0xac>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_ADC_Init+0xac>)
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <MX_ADC_Init+0xac>)
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_ADC_Init+0xac>)
 8000590:	2201      	movs	r2, #1
 8000592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_ADC_Init+0xac>)
 8000598:	2201      	movs	r2, #1
 800059a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_ADC_Init+0xac>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <MX_ADC_Init+0xac>)
 80005a6:	2210      	movs	r2, #16
 80005a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_ADC_Init+0xac>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_ADC_Init+0xac>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <MX_ADC_Init+0xac>)
 80005ba:	f000 fac5 	bl	8000b48 <HAL_ADC_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 80005c4:	f000 f88a 	bl	80006dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 80005d0:	2307      	movs	r3, #7
 80005d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_ADC_Init+0xac>)
 80005da:	f000 fd83 	bl	80010e4 <HAL_ADC_ConfigChannel>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80005e4:	f000 f87a 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000008c 	.word	0x2000008c
 80005f4:	40012400 	.word	0x40012400

080005f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_USART2_UART_Init+0x50>)
 8000600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_USART2_UART_Init+0x4c>)
 8000630:	f001 ff92 	bl	8002558 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800063a:	f000 f84f 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200000e0 	.word	0x200000e0
 8000648:	40004400 	.word	0x40004400

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_GPIO_Init+0x58>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <MX_GPIO_Init+0x58>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_GPIO_Init+0x58>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_GPIO_Init+0x58>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <MX_GPIO_Init+0x58>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_GPIO_Init+0x58>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_GPIO_Init+0x58>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <MX_GPIO_Init+0x58>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <MX_GPIO_Init+0x58>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	40023800 	.word	0x40023800

080006a8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	Rvalue=HAL_ADC_GetValue(hadc);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 fbf9 	bl	8000ea8 <HAL_ADC_GetValue>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80006bc:	801a      	strh	r2, [r3, #0]
	printf("%d\r\n",Rvalue);
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <HAL_ADC_ConvCpltCallback+0x30>)
 80006c6:	f002 f987 	bl	80029d8 <iprintf>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000124 	.word	0x20000124
 80006d8:	08003918 	.word	0x08003918

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_MspInit+0x6c>)
 80006f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f2:	4a18      	ldr	r2, [pc, #96]	; (8000754 <HAL_MspInit+0x6c>)
 80006f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006f8:	6253      	str	r3, [r2, #36]	; 0x24
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <HAL_MspInit+0x6c>)
 80006fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <HAL_MspInit+0x6c>)
 8000708:	6a1b      	ldr	r3, [r3, #32]
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <HAL_MspInit+0x6c>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6213      	str	r3, [r2, #32]
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <HAL_MspInit+0x6c>)
 8000714:	6a1b      	ldr	r3, [r3, #32]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_MspInit+0x6c>)
 8000720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000722:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <HAL_MspInit+0x6c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6253      	str	r3, [r2, #36]	; 0x24
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <HAL_MspInit+0x6c>)
 800072c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000736:	2007      	movs	r0, #7
 8000738:	f000 ff56 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2005      	movs	r0, #5
 8000742:	f000 ff5c 	bl	80015fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000746:	2005      	movs	r0, #5
 8000748:	f000 ff75 	bl	8001636 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800

08000758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	; (80007dc <HAL_ADC_MspInit+0x84>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d12b      	bne.n	80007d2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <HAL_ADC_MspInit+0x88>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <HAL_ADC_MspInit+0x88>)
 8000780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000784:	6213      	str	r3, [r2, #32]
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <HAL_ADC_MspInit+0x88>)
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <HAL_ADC_MspInit+0x88>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <HAL_ADC_MspInit+0x88>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <HAL_ADC_MspInit+0x88>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007aa:	2301      	movs	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ae:	2303      	movs	r3, #3
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <HAL_ADC_MspInit+0x8c>)
 80007be:	f000 ff55 	bl	800166c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2012      	movs	r0, #18
 80007c8:	f000 ff19 	bl	80015fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80007cc:	2012      	movs	r0, #18
 80007ce:	f000 ff32 	bl	8001636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40012400 	.word	0x40012400
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020000 	.word	0x40020000

080007e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_UART_MspInit+0x7c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d127      	bne.n	800085a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <HAL_UART_MspInit+0x80>)
 800080c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <HAL_UART_MspInit+0x80>)
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	6253      	str	r3, [r2, #36]	; 0x24
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_UART_MspInit+0x80>)
 8000818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_UART_MspInit+0x80>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <HAL_UART_MspInit+0x80>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_UART_MspInit+0x80>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800083a:	230c      	movs	r3, #12
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800084a:	2307      	movs	r3, #7
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <HAL_UART_MspInit+0x84>)
 8000856:	f000 ff09 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40004400 	.word	0x40004400
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b6:	f000 f92b 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}

080008be <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
	...

080008cc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <ADC1_IRQHandler+0x10>)
 80008d2:	f000 faf5 	bl	8000ec0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000008c 	.word	0x2000008c

080008e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e00a      	b.n	8000908 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008f2:	f3af 8000 	nop.w
 80008f6:	4601      	mov	r1, r0
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	60ba      	str	r2, [r7, #8]
 80008fe:	b2ca      	uxtb	r2, r1
 8000900:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	3301      	adds	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	429a      	cmp	r2, r3
 800090e:	dbf0      	blt.n	80008f2 <_read+0x12>
  }

  return len;
 8000910:	687b      	ldr	r3, [r7, #4]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&huart2,(uint16_t *)ptr,len,1000);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	b29a      	uxth	r2, r3
 800092c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	4804      	ldr	r0, [pc, #16]	; (8000944 <_write+0x28>)
 8000934:	f001 fe5d 	bl	80025f2 <HAL_UART_Transmit>
  return len;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000e0 	.word	0x200000e0

08000948 <_close>:

int _close(int file)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096e:	605a      	str	r2, [r3, #4]
  return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <_isatty>:

int _isatty(int file)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000984:	2301      	movs	r3, #1
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <_sbrk+0x5c>)
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <_sbrk+0x60>)
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d102      	bne.n	80009ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <_sbrk+0x64>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <_sbrk+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d207      	bcs.n	80009e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d8:	f001 ffcc 	bl	8002974 <__errno>
 80009dc:	4603      	mov	r3, r0
 80009de:	220c      	movs	r2, #12
 80009e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	e009      	b.n	80009fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <_sbrk+0x64>)
 80009f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20008000 	.word	0x20008000
 8000a08:	00000400 	.word	0x00000400
 8000a0c:	20000128 	.word	0x20000128
 8000a10:	20000140 	.word	0x20000140

08000a14 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a22:	490d      	ldr	r1, [pc, #52]	; (8000a58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a38:	4c0a      	ldr	r4, [pc, #40]	; (8000a64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a46:	f7ff ffe5 	bl	8000a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f001 ff99 	bl	8002980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a4e:	f7ff fd19 	bl	8000484 <main>
  bx lr
 8000a52:	4770      	bx	lr
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a5c:	080039ec 	.word	0x080039ec
  ldr r2, =_sbss
 8000a60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a64:	20000140 	.word	0x20000140

08000a68 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <COMP_ACQ_IRQHandler>

08000a6a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 fdb7 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f80e 	bl	8000a9c <HAL_InitTick>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	e001      	b.n	8000a90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a8c:	f7ff fe2c 	bl	80006e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a90:	79fb      	ldrb	r3, [r7, #7]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_InitTick+0x68>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d022      	beq.n	8000af6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_InitTick+0x6c>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_InitTick+0x68>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000abc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fdc4 	bl	8001652 <HAL_SYSTICK_Config>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10f      	bne.n	8000af0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b0f      	cmp	r3, #15
 8000ad4:	d809      	bhi.n	8000aea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	f04f 30ff 	mov.w	r0, #4294967295
 8000ade:	f000 fd8e 	bl	80015fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_InitTick+0x70>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	e007      	b.n	8000afa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	e004      	b.n	8000afa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e001      	b.n	8000afa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000004 	.word	0x20000004

08000b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_IncTick+0x1c>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x20>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a03      	ldr	r2, [pc, #12]	; (8000b2c <HAL_IncTick+0x1c>)
 8000b20:	6013      	str	r3, [r2, #0]
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	2000012c 	.word	0x2000012c
 8000b30:	20000008 	.word	0x20000008

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <HAL_GetTick+0x10>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	2000012c 	.word	0x2000012c

08000b48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e127      	b.n	8000db8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d115      	bne.n	8000ba2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b84:	4b8e      	ldr	r3, [pc, #568]	; (8000dc0 <HAL_ADC_Init+0x278>)
 8000b86:	6a1b      	ldr	r3, [r3, #32]
 8000b88:	4a8d      	ldr	r2, [pc, #564]	; (8000dc0 <HAL_ADC_Init+0x278>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6213      	str	r3, [r2, #32]
 8000b90:	4b8b      	ldr	r3, [pc, #556]	; (8000dc0 <HAL_ADC_Init+0x278>)
 8000b92:	6a1b      	ldr	r3, [r3, #32]
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fddb 	bl	8000758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f040 80ff 	bne.w	8000dae <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bb8:	f023 0302 	bic.w	r3, r3, #2
 8000bbc:	f043 0202 	orr.w	r2, r3, #2
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000bc4:	4b7f      	ldr	r3, [pc, #508]	; (8000dc4 <HAL_ADC_Init+0x27c>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	497c      	ldr	r1, [pc, #496]	; (8000dc4 <HAL_ADC_Init+0x27c>)
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000bde:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000be6:	4619      	mov	r1, r3
 8000be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bec:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bee:	6a3b      	ldr	r3, [r7, #32]
 8000bf0:	fa93 f3a3 	rbit	r3, r3
 8000bf4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	fab3 f383 	clz	r3, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000c02:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c18:	fa93 f3a3 	rbit	r3, r3
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	fab3 f383 	clz	r3, r3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000c2a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c36:	2b10      	cmp	r3, #16
 8000c38:	d007      	beq.n	8000c4a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000c42:	4313      	orrs	r3, r2
 8000c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c46:	4313      	orrs	r3, r2
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c54:	2b40      	cmp	r3, #64	; 0x40
 8000c56:	d04f      	beq.n	8000cf8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000c6a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	6912      	ldr	r2, [r2, #16]
 8000c70:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000c74:	d003      	beq.n	8000c7e <HAL_ADC_Init+0x136>
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	6912      	ldr	r2, [r2, #16]
 8000c7a:	2a01      	cmp	r2, #1
 8000c7c:	d102      	bne.n	8000c84 <HAL_ADC_Init+0x13c>
 8000c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c82:	e000      	b.n	8000c86 <HAL_ADC_Init+0x13e>
 8000c84:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000c86:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d125      	bne.n	8000ce4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d114      	bne.n	8000ccc <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000cac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	fa92 f2a2 	rbit	r2, r2
 8000cb4:	617a      	str	r2, [r7, #20]
  return result;
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	4093      	lsls	r3, r2
 8000cc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8000cca:	e00b      	b.n	8000ce4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd0:	f043 0220 	orr.w	r2, r3, #32
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cdc:	f043 0201 	orr.w	r2, r3, #1
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <HAL_ADC_Init+0x280>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000cf4:	430b      	orrs	r3, r1
 8000cf6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <HAL_ADC_Init+0x284>)
 8000d00:	4013      	ands	r3, r2
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	6812      	ldr	r2, [r2, #0]
 8000d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d14:	d003      	beq.n	8000d1e <HAL_ADC_Init+0x1d6>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d119      	bne.n	8000d52 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000d32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	fa92 f2a2 	rbit	r2, r2
 8000d3a:	60fa      	str	r2, [r7, #12]
  return result;
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	fa03 f202 	lsl.w	r2, r3, r2
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8000d50:	e007      	b.n	8000d62 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_ADC_Init+0x288>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d10b      	bne.n	8000d8a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7c:	f023 0303 	bic.w	r3, r3, #3
 8000d80:	f043 0201 	orr.w	r2, r3, #1
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d88:	e014      	b.n	8000db4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f023 0312 	bic.w	r3, r3, #18
 8000d92:	f043 0210 	orr.w	r2, r3, #16
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d9e:	f043 0201 	orr.w	r2, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000dac:	e002      	b.n	8000db4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000db4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3738      	adds	r7, #56	; 0x38
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40012700 	.word	0x40012700
 8000dc8:	fcfc16ff 	.word	0xfcfc16ff
 8000dcc:	c0fff189 	.word	0xc0fff189
 8000dd0:	bf80fffe 	.word	0xbf80fffe

08000dd4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d101      	bne.n	8000dee <HAL_ADC_Start_IT+0x1a>
 8000dea:	2302      	movs	r3, #2
 8000dec:	e058      	b.n	8000ea0 <HAL_ADC_Start_IT+0xcc>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2201      	movs	r2, #1
 8000df2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 fac4 	bl	8001384 <ADC_Enable>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d14b      	bne.n	8000e9e <HAL_ADC_Start_IT+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e0e:	f023 0301 	bic.w	r3, r3, #1
 8000e12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d007      	beq.n	8000e38 <HAL_ADC_Start_IT+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e44:	d106      	bne.n	8000e54 <HAL_ADC_Start_IT+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e4a:	f023 0206 	bic.w	r2, r3, #6
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	651a      	str	r2, [r3, #80]	; 0x50
 8000e52:	e002      	b.n	8000e5a <HAL_ADC_Start_IT+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e6a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6812      	ldr	r2, [r2, #0]
 8000e76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e7a:	f043 0320 	orr.w	r3, r3, #32
 8000e7e:	6053      	str	r3, [r2, #4]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d107      	bne.n	8000e9e <HAL_ADC_Start_IT+0xca>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e9c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0320 	and.w	r3, r3, #32
 8000ed2:	2b20      	cmp	r3, #32
 8000ed4:	d14e      	bne.n	8000f74 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d147      	bne.n	8000f74 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d105      	bne.n	8000efc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d12c      	bne.n	8000f64 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d127      	bne.n	8000f64 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d119      	bne.n	8000f64 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0220 	bic.w	r2, r2, #32
 8000f3e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d105      	bne.n	8000f64 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5c:	f043 0201 	orr.w	r2, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fb9f 	bl	80006a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f06f 0212 	mvn.w	r2, #18
 8000f72:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7e:	2b80      	cmp	r3, #128	; 0x80
 8000f80:	d15c      	bne.n	800103c <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d155      	bne.n	800103c <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	f003 0310 	and.w	r3, r3, #16
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d105      	bne.n	8000fa8 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d13a      	bne.n	800102c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d12c      	bne.n	800102c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d125      	bne.n	800102c <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d11e      	bne.n	800102c <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d119      	bne.n	800102c <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001006:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101c:	2b00      	cmp	r3, #0
 800101e:	d105      	bne.n	800102c <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	f043 0201 	orr.w	r2, r3, #1
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 fa05 	bl	800143c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f06f 020c 	mvn.w	r2, #12
 800103a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001046:	2b40      	cmp	r3, #64	; 0x40
 8001048:	d114      	bne.n	8001074 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b01      	cmp	r3, #1
 8001056:	d10d      	bne.n	8001074 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f82b 	bl	80010c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f06f 0201 	mvn.w	r2, #1
 8001072:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800107e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001082:	d119      	bne.n	80010b8 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	2b20      	cmp	r3, #32
 8001090:	d112      	bne.n	80010b8 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001096:	f043 0202 	orr.w	r2, r3, #2
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f06f 0220 	mvn.w	r2, #32
 80010a6:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f812 	bl	80010d2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f06f 0220 	mvn.w	r2, #32
 80010b6:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d101      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x20>
 8001100:	2302      	movs	r3, #2
 8001102:	e134      	b.n	800136e <HAL_ADC_ConfigChannel+0x28a>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b06      	cmp	r3, #6
 8001112:	d81c      	bhi.n	800114e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	3b05      	subs	r3, #5
 8001126:	221f      	movs	r2, #31
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	4019      	ands	r1, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	3b05      	subs	r3, #5
 8001140:	fa00 f203 	lsl.w	r2, r0, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	641a      	str	r2, [r3, #64]	; 0x40
 800114c:	e07e      	b.n	800124c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b0c      	cmp	r3, #12
 8001154:	d81c      	bhi.n	8001190 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	3b23      	subs	r3, #35	; 0x23
 8001168:	221f      	movs	r2, #31
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	4019      	ands	r1, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	3b23      	subs	r3, #35	; 0x23
 8001182:	fa00 f203 	lsl.w	r2, r0, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c
 800118e:	e05d      	b.n	800124c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b12      	cmp	r3, #18
 8001196:	d81c      	bhi.n	80011d2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	3b41      	subs	r3, #65	; 0x41
 80011aa:	221f      	movs	r2, #31
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4019      	ands	r1, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	3b41      	subs	r3, #65	; 0x41
 80011c4:	fa00 f203 	lsl.w	r2, r0, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	639a      	str	r2, [r3, #56]	; 0x38
 80011d0:	e03c      	b.n	800124c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b18      	cmp	r3, #24
 80011d8:	d81c      	bhi.n	8001214 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	3b5f      	subs	r3, #95	; 0x5f
 80011ec:	221f      	movs	r2, #31
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	4019      	ands	r1, r3
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	3b5f      	subs	r3, #95	; 0x5f
 8001206:	fa00 f203 	lsl.w	r2, r0, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
 8001212:	e01b      	b.n	800124c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	3b7d      	subs	r3, #125	; 0x7d
 8001226:	221f      	movs	r2, #31
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	4019      	ands	r1, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	3b7d      	subs	r3, #125	; 0x7d
 8001240:	fa00 f203 	lsl.w	r2, r0, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b09      	cmp	r3, #9
 8001252:	d81a      	bhi.n	800128a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6959      	ldr	r1, [r3, #20]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4613      	mov	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	2207      	movs	r2, #7
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	4019      	ands	r1, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	6898      	ldr	r0, [r3, #8]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	fa00 f203 	lsl.w	r2, r0, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	e042      	b.n	8001310 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b13      	cmp	r3, #19
 8001290:	d81c      	bhi.n	80012cc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6919      	ldr	r1, [r3, #16]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	3b1e      	subs	r3, #30
 80012a4:	2207      	movs	r2, #7
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	4019      	ands	r1, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	6898      	ldr	r0, [r3, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	3b1e      	subs	r3, #30
 80012be:	fa00 f203 	lsl.w	r2, r0, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	611a      	str	r2, [r3, #16]
 80012ca:	e021      	b.n	8001310 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b1a      	cmp	r3, #26
 80012d2:	d81c      	bhi.n	800130e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68d9      	ldr	r1, [r3, #12]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	3b3c      	subs	r3, #60	; 0x3c
 80012e6:	2207      	movs	r2, #7
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4019      	ands	r1, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	6898      	ldr	r0, [r3, #8]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	3b3c      	subs	r3, #60	; 0x3c
 8001300:	fa00 f203 	lsl.w	r2, r0, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	e000      	b.n	8001310 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800130e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b10      	cmp	r3, #16
 8001316:	d003      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800131c:	2b11      	cmp	r3, #17
 800131e:	d121      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_ADC_ConfigChannel+0x294>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d11b      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_ADC_ConfigChannel+0x294>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_ADC_ConfigChannel+0x294>)
 8001332:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001336:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b10      	cmp	r3, #16
 800133e:	d111      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_ADC_ConfigChannel+0x298>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_ADC_ConfigChannel+0x29c>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0c9a      	lsrs	r2, r3, #18
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001356:	e002      	b.n	800135e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	3b01      	subs	r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f9      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	40012700 	.word	0x40012700
 800137c:	20000000 	.word	0x20000000
 8001380:	431bde83 	.word	0x431bde83

08001384 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800139e:	2b40      	cmp	r3, #64	; 0x40
 80013a0:	d043      	beq.n	800142a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0201 	orr.w	r2, r2, #1
 80013b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <ADC_Enable+0xb0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a20      	ldr	r2, [pc, #128]	; (8001438 <ADC_Enable+0xb4>)
 80013b8:	fba2 2303 	umull	r2, r3, r2, r3
 80013bc:	0c9a      	lsrs	r2, r3, #18
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80013c6:	e002      	b.n	80013ce <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f9      	bne.n	80013c8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80013d4:	f7ff fbae 	bl	8000b34 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013da:	e01f      	b.n	800141c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80013dc:	f7ff fbaa 	bl	8000b34 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d918      	bls.n	800141c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f4:	2b40      	cmp	r3, #64	; 0x40
 80013f6:	d011      	beq.n	800141c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fc:	f043 0210 	orr.w	r2, r3, #16
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001408:	f043 0201 	orr.w	r2, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e007      	b.n	800142c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001426:	2b40      	cmp	r3, #64	; 0x40
 8001428:	d1d8      	bne.n	80013dc <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000000 	.word	0x20000000
 8001438:	431bde83 	.word	0x431bde83

0800143c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
	...

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db0b      	blt.n	80014de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 021f 	and.w	r2, r3, #31
 80014cc:	4906      	ldr	r1, [pc, #24]	; (80014e8 <__NVIC_EnableIRQ+0x34>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f202 	lsl.w	r2, r0, r2
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f7ff ff90 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff2d 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001610:	f7ff ff42 	bl	8001498 <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff90 	bl	8001540 <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5f 	bl	80014ec <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff35 	bl	80014b4 <__NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffa2 	bl	80015a4 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001682:	e154      	b.n	800192e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8146 	beq.w	8001928 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 0201 	and.w	r2, r3, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b03      	cmp	r3, #3
 8001720:	d017      	beq.n	8001752 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d123      	bne.n	80017a6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	6939      	ldr	r1, [r7, #16]
 80017a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0203 	and.w	r2, r3, #3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80a0 	beq.w	8001928 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b58      	ldr	r3, [pc, #352]	; (800194c <HAL_GPIO_Init+0x2e0>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a57      	ldr	r2, [pc, #348]	; (800194c <HAL_GPIO_Init+0x2e0>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	4b55      	ldr	r3, [pc, #340]	; (800194c <HAL_GPIO_Init+0x2e0>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001800:	4a53      	ldr	r2, [pc, #332]	; (8001950 <HAL_GPIO_Init+0x2e4>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a4b      	ldr	r2, [pc, #300]	; (8001954 <HAL_GPIO_Init+0x2e8>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d019      	beq.n	8001860 <HAL_GPIO_Init+0x1f4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a4a      	ldr	r2, [pc, #296]	; (8001958 <HAL_GPIO_Init+0x2ec>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d013      	beq.n	800185c <HAL_GPIO_Init+0x1f0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a49      	ldr	r2, [pc, #292]	; (800195c <HAL_GPIO_Init+0x2f0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_Init+0x1ec>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a48      	ldr	r2, [pc, #288]	; (8001960 <HAL_GPIO_Init+0x2f4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1e8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a47      	ldr	r2, [pc, #284]	; (8001964 <HAL_GPIO_Init+0x2f8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_Init+0x1e4>
 800184c:	2304      	movs	r3, #4
 800184e:	e008      	b.n	8001862 <HAL_GPIO_Init+0x1f6>
 8001850:	2305      	movs	r3, #5
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1f6>
 8001854:	2303      	movs	r3, #3
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1f6>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1f6>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1f6>
 8001860:	2300      	movs	r3, #0
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001872:	4937      	ldr	r1, [pc, #220]	; (8001950 <HAL_GPIO_Init+0x2e4>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_GPIO_Init+0x2fc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018a4:	4a30      	ldr	r2, [pc, #192]	; (8001968 <HAL_GPIO_Init+0x2fc>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_GPIO_Init+0x2fc>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018ce:	4a26      	ldr	r2, [pc, #152]	; (8001968 <HAL_GPIO_Init+0x2fc>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_GPIO_Init+0x2fc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018f8:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_GPIO_Init+0x2fc>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_GPIO_Init+0x2fc>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001922:	4a11      	ldr	r2, [pc, #68]	; (8001968 <HAL_GPIO_Init+0x2fc>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f aea3 	bne.w	8001684 <HAL_GPIO_Init+0x18>
  }
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40010000 	.word	0x40010000
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e31d      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197e:	4b94      	ldr	r3, [pc, #592]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001988:	4b91      	ldr	r3, [pc, #580]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d07b      	beq.n	8001a96 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d006      	beq.n	80019b2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d10f      	bne.n	80019ca <HAL_RCC_OscConfig+0x5e>
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d10b      	bne.n	80019ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b2:	4b87      	ldr	r3, [pc, #540]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d06a      	beq.n	8001a94 <HAL_RCC_OscConfig+0x128>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d166      	bne.n	8001a94 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e2f7      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x74>
 80019d2:	4b7f      	ldr	r3, [pc, #508]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a7e      	ldr	r2, [pc, #504]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e02d      	b.n	8001a3c <HAL_RCC_OscConfig+0xd0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10c      	bne.n	8001a02 <HAL_RCC_OscConfig+0x96>
 80019e8:	4b79      	ldr	r3, [pc, #484]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a78      	ldr	r2, [pc, #480]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 80019ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b76      	ldr	r3, [pc, #472]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a75      	ldr	r2, [pc, #468]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 80019fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e01c      	b.n	8001a3c <HAL_RCC_OscConfig+0xd0>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0xb8>
 8001a0a:	4b71      	ldr	r3, [pc, #452]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a70      	ldr	r2, [pc, #448]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b6e      	ldr	r3, [pc, #440]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a6d      	ldr	r2, [pc, #436]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0xd0>
 8001a24:	4b6a      	ldr	r3, [pc, #424]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a69      	ldr	r2, [pc, #420]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b67      	ldr	r3, [pc, #412]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a66      	ldr	r2, [pc, #408]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff f876 	bl	8000b34 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff f872 	bl	8000b34 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e2ad      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a5e:	4b5c      	ldr	r3, [pc, #368]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0xe0>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f862 	bl	8000b34 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff f85e 	bl	8000b34 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e299      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a86:	4b52      	ldr	r3, [pc, #328]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x108>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d05a      	beq.n	8001b58 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d119      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x176>
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d116      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab4:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_OscConfig+0x160>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e276      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001acc:	4b40      	ldr	r3, [pc, #256]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	493d      	ldr	r1, [pc, #244]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae0:	e03a      	b.n	8001b58 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d020      	beq.n	8001b2c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aea:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_RCC_OscConfig+0x268>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f820 	bl	8000b34 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff f81c 	bl	8000b34 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e257      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	492a      	ldr	r1, [pc, #168]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
 8001b2a:	e015      	b.n	8001b58 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <HAL_RCC_OscConfig+0x268>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe ffff 	bl	8000b34 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7fe fffb 	bl	8000b34 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e236      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80b8 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d170      	bne.n	8001c4e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_OscConfig+0x218>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e21a      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1a      	ldr	r2, [r3, #32]
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d921      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fc7d 	bl	8002498 <RCC_SetFlashLatencyFromMSIRange>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e208      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4906      	ldr	r1, [pc, #24]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	061b      	lsls	r3, r3, #24
 8001bc8:	4901      	ldr	r1, [pc, #4]	; (8001bd0 <HAL_RCC_OscConfig+0x264>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	604b      	str	r3, [r1, #4]
 8001bce:	e020      	b.n	8001c12 <HAL_RCC_OscConfig+0x2a6>
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd8:	4b99      	ldr	r3, [pc, #612]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4996      	ldr	r1, [pc, #600]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bea:	4b95      	ldr	r3, [pc, #596]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	061b      	lsls	r3, r3, #24
 8001bf8:	4991      	ldr	r1, [pc, #580]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fc48 	bl	8002498 <RCC_SetFlashLatencyFromMSIRange>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e1d3      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	0b5b      	lsrs	r3, r3, #13
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c22:	4a87      	ldr	r2, [pc, #540]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001c24:	6892      	ldr	r2, [r2, #8]
 8001c26:	0912      	lsrs	r2, r2, #4
 8001c28:	f002 020f 	and.w	r2, r2, #15
 8001c2c:	4985      	ldr	r1, [pc, #532]	; (8001e44 <HAL_RCC_OscConfig+0x4d8>)
 8001c2e:	5c8a      	ldrb	r2, [r1, r2]
 8001c30:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c32:	4a85      	ldr	r2, [pc, #532]	; (8001e48 <HAL_RCC_OscConfig+0x4dc>)
 8001c34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c36:	4b85      	ldr	r3, [pc, #532]	; (8001e4c <HAL_RCC_OscConfig+0x4e0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe ff2e 	bl	8000a9c <HAL_InitTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d045      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	e1b5      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d029      	beq.n	8001caa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c56:	4b7e      	ldr	r3, [pc, #504]	; (8001e50 <HAL_RCC_OscConfig+0x4e4>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7fe ff6a 	bl	8000b34 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c64:	f7fe ff66 	bl	8000b34 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1a1      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c76:	4b72      	ldr	r3, [pc, #456]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c82:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	496c      	ldr	r1, [pc, #432]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c94:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	4967      	ldr	r1, [pc, #412]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
 8001ca8:	e015      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001caa:	4b69      	ldr	r3, [pc, #420]	; (8001e50 <HAL_RCC_OscConfig+0x4e4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7fe ff40 	bl	8000b34 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb8:	f7fe ff3c 	bl	8000b34 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e177      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d030      	beq.n	8001d44 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d016      	beq.n	8001d18 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cea:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf0:	f7fe ff20 	bl	8000b34 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7fe ff1c 	bl	8000b34 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e157      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d0a:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x38c>
 8001d16:	e015      	b.n	8001d44 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d18:	4b4e      	ldr	r3, [pc, #312]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7fe ff09 	bl	8000b34 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d26:	f7fe ff05 	bl	8000b34 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e140      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d38:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f0      	bne.n	8001d26 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 80b5 	beq.w	8001ebc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d56:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10d      	bne.n	8001d7e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	4a36      	ldr	r2, [pc, #216]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6253      	str	r3, [r2, #36]	; 0x24
 8001d6e:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7e:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <HAL_RCC_OscConfig+0x4ec>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8a:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <HAL_RCC_OscConfig+0x4ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a32      	ldr	r2, [pc, #200]	; (8001e58 <HAL_RCC_OscConfig+0x4ec>)
 8001d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d96:	f7fe fecd 	bl	8000b34 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7fe fec9 	bl	8000b34 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b64      	cmp	r3, #100	; 0x64
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e104      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_RCC_OscConfig+0x4ec>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x466>
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dce:	6353      	str	r3, [r2, #52]	; 0x34
 8001dd0:	e02d      	b.n	8001e2e <HAL_RCC_OscConfig+0x4c2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x488>
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de4:	6353      	str	r3, [r2, #52]	; 0x34
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001dec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001df0:	6353      	str	r3, [r2, #52]	; 0x34
 8001df2:	e01c      	b.n	8001e2e <HAL_RCC_OscConfig+0x4c2>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4aa>
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e00:	4a0f      	ldr	r2, [pc, #60]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e06:	6353      	str	r3, [r2, #52]	; 0x34
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6353      	str	r3, [r2, #52]	; 0x34
 8001e14:	e00b      	b.n	8001e2e <HAL_RCC_OscConfig+0x4c2>
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e20:	6353      	str	r3, [r2, #52]	; 0x34
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e26:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001e28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e2c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d024      	beq.n	8001e80 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7fe fe7d 	bl	8000b34 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e3c:	e019      	b.n	8001e72 <HAL_RCC_OscConfig+0x506>
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	0800392c 	.word	0x0800392c
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004
 8001e50:	42470020 	.word	0x42470020
 8001e54:	42470680 	.word	0x42470680
 8001e58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7fe fe6a 	bl	8000b34 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e0a3      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e72:	4b54      	ldr	r3, [pc, #336]	; (8001fc4 <HAL_RCC_OscConfig+0x658>)
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0ee      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4f0>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e80:	f7fe fe58 	bl	8000b34 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e88:	f7fe fe54 	bl	8000b34 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e08d      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e9e:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <HAL_RCC_OscConfig+0x658>)
 8001ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1ee      	bne.n	8001e88 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb0:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_RCC_OscConfig+0x658>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	4a43      	ldr	r2, [pc, #268]	; (8001fc4 <HAL_RCC_OscConfig+0x658>)
 8001eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eba:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d079      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b0c      	cmp	r3, #12
 8001ec8:	d056      	beq.n	8001f78 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d13b      	bne.n	8001f4a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_RCC_OscConfig+0x65c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe fe2c 	bl	8000b34 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7fe fe28 	bl	8000b34 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e063      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ef2:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <HAL_RCC_OscConfig+0x658>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efe:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_RCC_OscConfig+0x658>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	4319      	orrs	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	430b      	orrs	r3, r1
 8001f16:	492b      	ldr	r1, [pc, #172]	; (8001fc4 <HAL_RCC_OscConfig+0x658>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_RCC_OscConfig+0x65c>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7fe fe07 	bl	8000b34 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7fe fe03 	bl	8000b34 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e03e      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_RCC_OscConfig+0x658>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x5be>
 8001f48:	e036      	b.n	8001fb8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4a:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <HAL_RCC_OscConfig+0x65c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7fe fdf0 	bl	8000b34 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f58:	f7fe fdec 	bl	8000b34 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e027      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <HAL_RCC_OscConfig+0x658>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5ec>
 8001f76:	e01f      	b.n	8001fb8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e01a      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_RCC_OscConfig+0x658>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d10d      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d106      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470060 	.word	0x42470060

08001fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e11a      	b.n	8002216 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b8f      	ldr	r3, [pc, #572]	; (8002220 <HAL_RCC_ClockConfig+0x254>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d919      	bls.n	8002022 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_RCC_ClockConfig+0x34>
 8001ff4:	4b8a      	ldr	r3, [pc, #552]	; (8002220 <HAL_RCC_ClockConfig+0x254>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a89      	ldr	r2, [pc, #548]	; (8002220 <HAL_RCC_ClockConfig+0x254>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b87      	ldr	r3, [pc, #540]	; (8002220 <HAL_RCC_ClockConfig+0x254>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 0201 	bic.w	r2, r3, #1
 8002008:	4985      	ldr	r1, [pc, #532]	; (8002220 <HAL_RCC_ClockConfig+0x254>)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002010:	4b83      	ldr	r3, [pc, #524]	; (8002220 <HAL_RCC_ClockConfig+0x254>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0f9      	b.n	8002216 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202e:	4b7d      	ldr	r3, [pc, #500]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	497a      	ldr	r1, [pc, #488]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 808e 	beq.w	800216a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002056:	4b73      	ldr	r3, [pc, #460]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d121      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0d7      	b.n	8002216 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800206e:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d115      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0cb      	b.n	8002216 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002086:	4b67      	ldr	r3, [pc, #412]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0bf      	b.n	8002216 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0b7      	b.n	8002216 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a6:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f023 0203 	bic.w	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	495c      	ldr	r1, [pc, #368]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b8:	f7fe fd3c 	bl	8000b34 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d112      	bne.n	80020ec <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c6:	e00a      	b.n	80020de <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c8:	f7fe fd34 	bl	8000b34 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e09b      	b.n	8002216 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020de:	4b51      	ldr	r3, [pc, #324]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d1ee      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xfc>
 80020ea:	e03e      	b.n	800216a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d112      	bne.n	800211a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f6:	f7fe fd1d 	bl	8000b34 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e084      	b.n	8002216 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800210c:	4b45      	ldr	r3, [pc, #276]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b0c      	cmp	r3, #12
 8002116:	d1ee      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x12a>
 8002118:	e027      	b.n	800216a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d11d      	bne.n	800215e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002122:	e00a      	b.n	800213a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7fe fd06 	bl	8000b34 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e06d      	b.n	8002216 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800213a:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b04      	cmp	r3, #4
 8002144:	d1ee      	bne.n	8002124 <HAL_RCC_ClockConfig+0x158>
 8002146:	e010      	b.n	800216a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002148:	f7fe fcf4 	bl	8000b34 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	; 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e05b      	b.n	8002216 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800215e:	4b31      	ldr	r3, [pc, #196]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ee      	bne.n	8002148 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216a:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_RCC_ClockConfig+0x254>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d219      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d105      	bne.n	800218a <HAL_RCC_ClockConfig+0x1be>
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_RCC_ClockConfig+0x254>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a27      	ldr	r2, [pc, #156]	; (8002220 <HAL_RCC_ClockConfig+0x254>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_RCC_ClockConfig+0x254>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0201 	bic.w	r2, r3, #1
 8002192:	4923      	ldr	r1, [pc, #140]	; (8002220 <HAL_RCC_ClockConfig+0x254>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <HAL_RCC_ClockConfig+0x254>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e034      	b.n	8002216 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4917      	ldr	r1, [pc, #92]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	490f      	ldr	r1, [pc, #60]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ea:	f000 f823 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_RCC_ClockConfig+0x258>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	490b      	ldr	r1, [pc, #44]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 80021fc:	5ccb      	ldrb	r3, [r1, r3]
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 8002204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_RCC_ClockConfig+0x264>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fc46 	bl	8000a9c <HAL_InitTick>
 8002210:	4603      	mov	r3, r0
 8002212:	72fb      	strb	r3, [r7, #11]

  return status;
 8002214:	7afb      	ldrb	r3, [r7, #11]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023c00 	.word	0x40023c00
 8002224:	40023800 	.word	0x40023800
 8002228:	0800392c 	.word	0x0800392c
 800222c:	20000000 	.word	0x20000000
 8002230:	20000004 	.word	0x20000004

08002234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002238:	b092      	sub	sp, #72	; 0x48
 800223a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800223c:	4b79      	ldr	r3, [pc, #484]	; (8002424 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b0c      	cmp	r3, #12
 800224a:	d00d      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x34>
 800224c:	2b0c      	cmp	r3, #12
 800224e:	f200 80d5 	bhi.w	80023fc <HAL_RCC_GetSysClockFreq+0x1c8>
 8002252:	2b04      	cmp	r3, #4
 8002254:	d002      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x28>
 8002256:	2b08      	cmp	r3, #8
 8002258:	d003      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0x2e>
 800225a:	e0cf      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800225c:	4b72      	ldr	r3, [pc, #456]	; (8002428 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800225e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002260:	e0da      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002262:	4b72      	ldr	r3, [pc, #456]	; (800242c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002264:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002266:	e0d7      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800226a:	0c9b      	lsrs	r3, r3, #18
 800226c:	f003 020f 	and.w	r2, r3, #15
 8002270:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002272:	5c9b      	ldrb	r3, [r3, r2]
 8002274:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002278:	0d9b      	lsrs	r3, r3, #22
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	3301      	adds	r3, #1
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002282:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d05d      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002290:	2200      	movs	r2, #0
 8002292:	4618      	mov	r0, r3
 8002294:	4611      	mov	r1, r2
 8002296:	4604      	mov	r4, r0
 8002298:	460d      	mov	r5, r1
 800229a:	4622      	mov	r2, r4
 800229c:	462b      	mov	r3, r5
 800229e:	f04f 0000 	mov.w	r0, #0
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	0159      	lsls	r1, r3, #5
 80022a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ac:	0150      	lsls	r0, r2, #5
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4621      	mov	r1, r4
 80022b4:	1a51      	subs	r1, r2, r1
 80022b6:	6139      	str	r1, [r7, #16]
 80022b8:	4629      	mov	r1, r5
 80022ba:	eb63 0301 	sbc.w	r3, r3, r1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022cc:	4659      	mov	r1, fp
 80022ce:	018b      	lsls	r3, r1, #6
 80022d0:	4651      	mov	r1, sl
 80022d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022d6:	4651      	mov	r1, sl
 80022d8:	018a      	lsls	r2, r1, #6
 80022da:	46d4      	mov	ip, sl
 80022dc:	ebb2 080c 	subs.w	r8, r2, ip
 80022e0:	4659      	mov	r1, fp
 80022e2:	eb63 0901 	sbc.w	r9, r3, r1
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022fa:	4690      	mov	r8, r2
 80022fc:	4699      	mov	r9, r3
 80022fe:	4623      	mov	r3, r4
 8002300:	eb18 0303 	adds.w	r3, r8, r3
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	462b      	mov	r3, r5
 8002308:	eb49 0303 	adc.w	r3, r9, r3
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800231a:	4629      	mov	r1, r5
 800231c:	024b      	lsls	r3, r1, #9
 800231e:	4620      	mov	r0, r4
 8002320:	4629      	mov	r1, r5
 8002322:	4604      	mov	r4, r0
 8002324:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002328:	4601      	mov	r1, r0
 800232a:	024a      	lsls	r2, r1, #9
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002332:	2200      	movs	r2, #0
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
 8002336:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002338:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800233c:	f7fd ff1e 	bl	800017c <__aeabi_uldivmod>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4613      	mov	r3, r2
 8002346:	647b      	str	r3, [r7, #68]	; 0x44
 8002348:	e055      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234c:	2200      	movs	r2, #0
 800234e:	623b      	str	r3, [r7, #32]
 8002350:	627a      	str	r2, [r7, #36]	; 0x24
 8002352:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002356:	4642      	mov	r2, r8
 8002358:	464b      	mov	r3, r9
 800235a:	f04f 0000 	mov.w	r0, #0
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	0159      	lsls	r1, r3, #5
 8002364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002368:	0150      	lsls	r0, r2, #5
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	46c4      	mov	ip, r8
 8002370:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002374:	4640      	mov	r0, r8
 8002376:	4649      	mov	r1, r9
 8002378:	468c      	mov	ip, r1
 800237a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800238a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800238e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002392:	ebb2 040a 	subs.w	r4, r2, sl
 8002396:	eb63 050b 	sbc.w	r5, r3, fp
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	00eb      	lsls	r3, r5, #3
 80023a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023a8:	00e2      	lsls	r2, r4, #3
 80023aa:	4614      	mov	r4, r2
 80023ac:	461d      	mov	r5, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	18e3      	adds	r3, r4, r3
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	460b      	mov	r3, r1
 80023b6:	eb45 0303 	adc.w	r3, r5, r3
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023c8:	4629      	mov	r1, r5
 80023ca:	028b      	lsls	r3, r1, #10
 80023cc:	4620      	mov	r0, r4
 80023ce:	4629      	mov	r1, r5
 80023d0:	4604      	mov	r4, r0
 80023d2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80023d6:	4601      	mov	r1, r0
 80023d8:	028a      	lsls	r2, r1, #10
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e0:	2200      	movs	r2, #0
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	61fa      	str	r2, [r7, #28]
 80023e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ea:	f7fd fec7 	bl	800017c <__aeabi_uldivmod>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4613      	mov	r3, r2
 80023f4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80023f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80023fa:	e00d      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	0b5b      	lsrs	r3, r3, #13
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	3301      	adds	r3, #1
 800240c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002416:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800241a:	4618      	mov	r0, r3
 800241c:	3748      	adds	r7, #72	; 0x48
 800241e:	46bd      	mov	sp, r7
 8002420:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002424:	40023800 	.word	0x40023800
 8002428:	00f42400 	.word	0x00f42400
 800242c:	007a1200 	.word	0x007a1200
 8002430:	08003920 	.word	0x08003920

08002434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002438:	4b02      	ldr	r3, [pc, #8]	; (8002444 <HAL_RCC_GetHCLKFreq+0x10>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	20000000 	.word	0x20000000

08002448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800244c:	f7ff fff2 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	4903      	ldr	r1, [pc, #12]	; (800246c <HAL_RCC_GetPCLK1Freq+0x24>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40023800 	.word	0x40023800
 800246c:	0800393c 	.word	0x0800393c

08002470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002474:	f7ff ffde 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0adb      	lsrs	r3, r3, #11
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4903      	ldr	r1, [pc, #12]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40023800 	.word	0x40023800
 8002494:	0800393c 	.word	0x0800393c

08002498 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024a4:	4b29      	ldr	r3, [pc, #164]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d12c      	bne.n	800250a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024b0:	4b26      	ldr	r3, [pc, #152]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e016      	b.n	80024f6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	4b20      	ldr	r3, [pc, #128]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	4a1f      	ldr	r2, [pc, #124]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d2:	6253      	str	r3, [r2, #36]	; 0x24
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80024e8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	4a17      	ldr	r2, [pc, #92]	; (800254c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80024fc:	d105      	bne.n	800250a <RCC_SetFlashLatencyFromMSIRange+0x72>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002504:	d101      	bne.n	800250a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002506:	2301      	movs	r3, #1
 8002508:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0f      	ldr	r2, [pc, #60]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 0201 	bic.w	r2, r3, #1
 8002524:	490b      	ldr	r1, [pc, #44]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	429a      	cmp	r2, r3
 8002538:	d001      	beq.n	800253e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40007000 	.word	0x40007000
 8002554:	40023c00 	.word	0x40023c00

08002558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e03f      	b.n	80025ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe f932 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2224      	movs	r2, #36	; 0x24
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800259a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f905 	bl	80027ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b08a      	sub	sp, #40	; 0x28
 80025f6:	af02      	add	r7, sp, #8
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	603b      	str	r3, [r7, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b20      	cmp	r3, #32
 8002610:	d17c      	bne.n	800270c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_UART_Transmit+0x2c>
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e075      	b.n	800270e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_UART_Transmit+0x3e>
 800262c:	2302      	movs	r3, #2
 800262e:	e06e      	b.n	800270e <HAL_UART_Transmit+0x11c>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2221      	movs	r2, #33	; 0x21
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002646:	f7fe fa75 	bl	8000b34 <HAL_GetTick>
 800264a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	88fa      	ldrh	r2, [r7, #6]
 8002650:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	88fa      	ldrh	r2, [r7, #6]
 8002656:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002660:	d108      	bne.n	8002674 <HAL_UART_Transmit+0x82>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d104      	bne.n	8002674 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	e003      	b.n	800267c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002684:	e02a      	b.n	80026dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2200      	movs	r2, #0
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f840 	bl	8002716 <UART_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e036      	b.n	800270e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10b      	bne.n	80026be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	3302      	adds	r3, #2
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	e007      	b.n	80026ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1cf      	bne.n	8002686 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2140      	movs	r1, #64	; 0x40
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f810 	bl	8002716 <UART_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e006      	b.n	800270e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	e000      	b.n	800270e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800270c:	2302      	movs	r3, #2
  }
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	4613      	mov	r3, r2
 8002724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002726:	e02c      	b.n	8002782 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d028      	beq.n	8002782 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <UART_WaitOnFlagUntilTimeout+0x30>
 8002736:	f7fe f9fd 	bl	8000b34 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	429a      	cmp	r2, r3
 8002744:	d21d      	bcs.n	8002782 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002754:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0201 	bic.w	r2, r2, #1
 8002764:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e00f      	b.n	80027a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4013      	ands	r3, r2
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	429a      	cmp	r2, r3
 8002790:	bf0c      	ite	eq
 8002792:	2301      	moveq	r3, #1
 8002794:	2300      	movne	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	429a      	cmp	r2, r3
 800279e:	d0c3      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80027ec:	f023 030c 	bic.w	r3, r3, #12
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	430b      	orrs	r3, r1
 80027f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a55      	ldr	r2, [pc, #340]	; (800296c <UART_SetConfig+0x1c0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d103      	bne.n	8002822 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800281a:	f7ff fe29 	bl	8002470 <HAL_RCC_GetPCLK2Freq>
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	e002      	b.n	8002828 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002822:	f7ff fe11 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8002826:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002830:	d14c      	bne.n	80028cc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009a      	lsls	r2, r3, #2
 800283c:	441a      	add	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	4a49      	ldr	r2, [pc, #292]	; (8002970 <UART_SetConfig+0x1c4>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	0119      	lsls	r1, r3, #4
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	009a      	lsls	r2, r3, #2
 800285c:	441a      	add	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fbb2 f2f3 	udiv	r2, r2, r3
 8002868:	4b41      	ldr	r3, [pc, #260]	; (8002970 <UART_SetConfig+0x1c4>)
 800286a:	fba3 0302 	umull	r0, r3, r3, r2
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2064      	movs	r0, #100	; 0x64
 8002872:	fb00 f303 	mul.w	r3, r0, r3
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	3332      	adds	r3, #50	; 0x32
 800287c:	4a3c      	ldr	r2, [pc, #240]	; (8002970 <UART_SetConfig+0x1c4>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800288a:	4419      	add	r1, r3
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009a      	lsls	r2, r3, #2
 8002896:	441a      	add	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a2:	4b33      	ldr	r3, [pc, #204]	; (8002970 <UART_SetConfig+0x1c4>)
 80028a4:	fba3 0302 	umull	r0, r3, r3, r2
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	2064      	movs	r0, #100	; 0x64
 80028ac:	fb00 f303 	mul.w	r3, r0, r3
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	3332      	adds	r3, #50	; 0x32
 80028b6:	4a2e      	ldr	r2, [pc, #184]	; (8002970 <UART_SetConfig+0x1c4>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	f003 0207 	and.w	r2, r3, #7
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	440a      	add	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028ca:	e04a      	b.n	8002962 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	009a      	lsls	r2, r3, #2
 80028d6:	441a      	add	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e2:	4a23      	ldr	r2, [pc, #140]	; (8002970 <UART_SetConfig+0x1c4>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	0119      	lsls	r1, r3, #4
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	009a      	lsls	r2, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002902:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <UART_SetConfig+0x1c4>)
 8002904:	fba3 0302 	umull	r0, r3, r3, r2
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	2064      	movs	r0, #100	; 0x64
 800290c:	fb00 f303 	mul.w	r3, r0, r3
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	3332      	adds	r3, #50	; 0x32
 8002916:	4a16      	ldr	r2, [pc, #88]	; (8002970 <UART_SetConfig+0x1c4>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002922:	4419      	add	r1, r3
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009a      	lsls	r2, r3, #2
 800292e:	441a      	add	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	fbb2 f2f3 	udiv	r2, r2, r3
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <UART_SetConfig+0x1c4>)
 800293c:	fba3 0302 	umull	r0, r3, r3, r2
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	2064      	movs	r0, #100	; 0x64
 8002944:	fb00 f303 	mul.w	r3, r0, r3
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	3332      	adds	r3, #50	; 0x32
 800294e:	4a08      	ldr	r2, [pc, #32]	; (8002970 <UART_SetConfig+0x1c4>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	f003 020f 	and.w	r2, r3, #15
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	440a      	add	r2, r1
 8002960:	609a      	str	r2, [r3, #8]
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40013800 	.word	0x40013800
 8002970:	51eb851f 	.word	0x51eb851f

08002974 <__errno>:
 8002974:	4b01      	ldr	r3, [pc, #4]	; (800297c <__errno+0x8>)
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	2000000c 	.word	0x2000000c

08002980 <__libc_init_array>:
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	2600      	movs	r6, #0
 8002984:	4d0c      	ldr	r5, [pc, #48]	; (80029b8 <__libc_init_array+0x38>)
 8002986:	4c0d      	ldr	r4, [pc, #52]	; (80029bc <__libc_init_array+0x3c>)
 8002988:	1b64      	subs	r4, r4, r5
 800298a:	10a4      	asrs	r4, r4, #2
 800298c:	42a6      	cmp	r6, r4
 800298e:	d109      	bne.n	80029a4 <__libc_init_array+0x24>
 8002990:	f000 ffb6 	bl	8003900 <_init>
 8002994:	2600      	movs	r6, #0
 8002996:	4d0a      	ldr	r5, [pc, #40]	; (80029c0 <__libc_init_array+0x40>)
 8002998:	4c0a      	ldr	r4, [pc, #40]	; (80029c4 <__libc_init_array+0x44>)
 800299a:	1b64      	subs	r4, r4, r5
 800299c:	10a4      	asrs	r4, r4, #2
 800299e:	42a6      	cmp	r6, r4
 80029a0:	d105      	bne.n	80029ae <__libc_init_array+0x2e>
 80029a2:	bd70      	pop	{r4, r5, r6, pc}
 80029a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a8:	4798      	blx	r3
 80029aa:	3601      	adds	r6, #1
 80029ac:	e7ee      	b.n	800298c <__libc_init_array+0xc>
 80029ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b2:	4798      	blx	r3
 80029b4:	3601      	adds	r6, #1
 80029b6:	e7f2      	b.n	800299e <__libc_init_array+0x1e>
 80029b8:	080039e4 	.word	0x080039e4
 80029bc:	080039e4 	.word	0x080039e4
 80029c0:	080039e4 	.word	0x080039e4
 80029c4:	080039e8 	.word	0x080039e8

080029c8 <memset>:
 80029c8:	4603      	mov	r3, r0
 80029ca:	4402      	add	r2, r0
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d100      	bne.n	80029d2 <memset+0xa>
 80029d0:	4770      	bx	lr
 80029d2:	f803 1b01 	strb.w	r1, [r3], #1
 80029d6:	e7f9      	b.n	80029cc <memset+0x4>

080029d8 <iprintf>:
 80029d8:	b40f      	push	{r0, r1, r2, r3}
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <iprintf+0x2c>)
 80029dc:	b513      	push	{r0, r1, r4, lr}
 80029de:	681c      	ldr	r4, [r3, #0]
 80029e0:	b124      	cbz	r4, 80029ec <iprintf+0x14>
 80029e2:	69a3      	ldr	r3, [r4, #24]
 80029e4:	b913      	cbnz	r3, 80029ec <iprintf+0x14>
 80029e6:	4620      	mov	r0, r4
 80029e8:	f000 f866 	bl	8002ab8 <__sinit>
 80029ec:	ab05      	add	r3, sp, #20
 80029ee:	4620      	mov	r0, r4
 80029f0:	9a04      	ldr	r2, [sp, #16]
 80029f2:	68a1      	ldr	r1, [r4, #8]
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	f000 f9bb 	bl	8002d70 <_vfiprintf_r>
 80029fa:	b002      	add	sp, #8
 80029fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a00:	b004      	add	sp, #16
 8002a02:	4770      	bx	lr
 8002a04:	2000000c 	.word	0x2000000c

08002a08 <std>:
 8002a08:	2300      	movs	r3, #0
 8002a0a:	b510      	push	{r4, lr}
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8002a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a16:	6083      	str	r3, [r0, #8]
 8002a18:	8181      	strh	r1, [r0, #12]
 8002a1a:	6643      	str	r3, [r0, #100]	; 0x64
 8002a1c:	81c2      	strh	r2, [r0, #14]
 8002a1e:	6183      	str	r3, [r0, #24]
 8002a20:	4619      	mov	r1, r3
 8002a22:	2208      	movs	r2, #8
 8002a24:	305c      	adds	r0, #92	; 0x5c
 8002a26:	f7ff ffcf 	bl	80029c8 <memset>
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <std+0x38>)
 8002a2c:	6224      	str	r4, [r4, #32]
 8002a2e:	6263      	str	r3, [r4, #36]	; 0x24
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <std+0x3c>)
 8002a32:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <std+0x40>)
 8002a36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <std+0x44>)
 8002a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8002a3c:	bd10      	pop	{r4, pc}
 8002a3e:	bf00      	nop
 8002a40:	0800331d 	.word	0x0800331d
 8002a44:	0800333f 	.word	0x0800333f
 8002a48:	08003377 	.word	0x08003377
 8002a4c:	0800339b 	.word	0x0800339b

08002a50 <_cleanup_r>:
 8002a50:	4901      	ldr	r1, [pc, #4]	; (8002a58 <_cleanup_r+0x8>)
 8002a52:	f000 b8af 	b.w	8002bb4 <_fwalk_reent>
 8002a56:	bf00      	nop
 8002a58:	0800366d 	.word	0x0800366d

08002a5c <__sfmoreglue>:
 8002a5c:	2268      	movs	r2, #104	; 0x68
 8002a5e:	b570      	push	{r4, r5, r6, lr}
 8002a60:	1e4d      	subs	r5, r1, #1
 8002a62:	4355      	muls	r5, r2
 8002a64:	460e      	mov	r6, r1
 8002a66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a6a:	f000 f8e5 	bl	8002c38 <_malloc_r>
 8002a6e:	4604      	mov	r4, r0
 8002a70:	b140      	cbz	r0, 8002a84 <__sfmoreglue+0x28>
 8002a72:	2100      	movs	r1, #0
 8002a74:	e9c0 1600 	strd	r1, r6, [r0]
 8002a78:	300c      	adds	r0, #12
 8002a7a:	60a0      	str	r0, [r4, #8]
 8002a7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a80:	f7ff ffa2 	bl	80029c8 <memset>
 8002a84:	4620      	mov	r0, r4
 8002a86:	bd70      	pop	{r4, r5, r6, pc}

08002a88 <__sfp_lock_acquire>:
 8002a88:	4801      	ldr	r0, [pc, #4]	; (8002a90 <__sfp_lock_acquire+0x8>)
 8002a8a:	f000 b8b3 	b.w	8002bf4 <__retarget_lock_acquire_recursive>
 8002a8e:	bf00      	nop
 8002a90:	20000131 	.word	0x20000131

08002a94 <__sfp_lock_release>:
 8002a94:	4801      	ldr	r0, [pc, #4]	; (8002a9c <__sfp_lock_release+0x8>)
 8002a96:	f000 b8ae 	b.w	8002bf6 <__retarget_lock_release_recursive>
 8002a9a:	bf00      	nop
 8002a9c:	20000131 	.word	0x20000131

08002aa0 <__sinit_lock_acquire>:
 8002aa0:	4801      	ldr	r0, [pc, #4]	; (8002aa8 <__sinit_lock_acquire+0x8>)
 8002aa2:	f000 b8a7 	b.w	8002bf4 <__retarget_lock_acquire_recursive>
 8002aa6:	bf00      	nop
 8002aa8:	20000132 	.word	0x20000132

08002aac <__sinit_lock_release>:
 8002aac:	4801      	ldr	r0, [pc, #4]	; (8002ab4 <__sinit_lock_release+0x8>)
 8002aae:	f000 b8a2 	b.w	8002bf6 <__retarget_lock_release_recursive>
 8002ab2:	bf00      	nop
 8002ab4:	20000132 	.word	0x20000132

08002ab8 <__sinit>:
 8002ab8:	b510      	push	{r4, lr}
 8002aba:	4604      	mov	r4, r0
 8002abc:	f7ff fff0 	bl	8002aa0 <__sinit_lock_acquire>
 8002ac0:	69a3      	ldr	r3, [r4, #24]
 8002ac2:	b11b      	cbz	r3, 8002acc <__sinit+0x14>
 8002ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ac8:	f7ff bff0 	b.w	8002aac <__sinit_lock_release>
 8002acc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ad0:	6523      	str	r3, [r4, #80]	; 0x50
 8002ad2:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <__sinit+0x68>)
 8002ad4:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <__sinit+0x6c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	62a2      	str	r2, [r4, #40]	; 0x28
 8002ada:	42a3      	cmp	r3, r4
 8002adc:	bf08      	it	eq
 8002ade:	2301      	moveq	r3, #1
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	bf08      	it	eq
 8002ae4:	61a3      	streq	r3, [r4, #24]
 8002ae6:	f000 f81f 	bl	8002b28 <__sfp>
 8002aea:	6060      	str	r0, [r4, #4]
 8002aec:	4620      	mov	r0, r4
 8002aee:	f000 f81b 	bl	8002b28 <__sfp>
 8002af2:	60a0      	str	r0, [r4, #8]
 8002af4:	4620      	mov	r0, r4
 8002af6:	f000 f817 	bl	8002b28 <__sfp>
 8002afa:	2200      	movs	r2, #0
 8002afc:	2104      	movs	r1, #4
 8002afe:	60e0      	str	r0, [r4, #12]
 8002b00:	6860      	ldr	r0, [r4, #4]
 8002b02:	f7ff ff81 	bl	8002a08 <std>
 8002b06:	2201      	movs	r2, #1
 8002b08:	2109      	movs	r1, #9
 8002b0a:	68a0      	ldr	r0, [r4, #8]
 8002b0c:	f7ff ff7c 	bl	8002a08 <std>
 8002b10:	2202      	movs	r2, #2
 8002b12:	2112      	movs	r1, #18
 8002b14:	68e0      	ldr	r0, [r4, #12]
 8002b16:	f7ff ff77 	bl	8002a08 <std>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61a3      	str	r3, [r4, #24]
 8002b1e:	e7d1      	b.n	8002ac4 <__sinit+0xc>
 8002b20:	08003944 	.word	0x08003944
 8002b24:	08002a51 	.word	0x08002a51

08002b28 <__sfp>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	4607      	mov	r7, r0
 8002b2c:	f7ff ffac 	bl	8002a88 <__sfp_lock_acquire>
 8002b30:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <__sfp+0x84>)
 8002b32:	681e      	ldr	r6, [r3, #0]
 8002b34:	69b3      	ldr	r3, [r6, #24]
 8002b36:	b913      	cbnz	r3, 8002b3e <__sfp+0x16>
 8002b38:	4630      	mov	r0, r6
 8002b3a:	f7ff ffbd 	bl	8002ab8 <__sinit>
 8002b3e:	3648      	adds	r6, #72	; 0x48
 8002b40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	d503      	bpl.n	8002b50 <__sfp+0x28>
 8002b48:	6833      	ldr	r3, [r6, #0]
 8002b4a:	b30b      	cbz	r3, 8002b90 <__sfp+0x68>
 8002b4c:	6836      	ldr	r6, [r6, #0]
 8002b4e:	e7f7      	b.n	8002b40 <__sfp+0x18>
 8002b50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b54:	b9d5      	cbnz	r5, 8002b8c <__sfp+0x64>
 8002b56:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <__sfp+0x88>)
 8002b58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b5c:	60e3      	str	r3, [r4, #12]
 8002b5e:	6665      	str	r5, [r4, #100]	; 0x64
 8002b60:	f000 f847 	bl	8002bf2 <__retarget_lock_init_recursive>
 8002b64:	f7ff ff96 	bl	8002a94 <__sfp_lock_release>
 8002b68:	2208      	movs	r2, #8
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002b70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002b74:	6025      	str	r5, [r4, #0]
 8002b76:	61a5      	str	r5, [r4, #24]
 8002b78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b7c:	f7ff ff24 	bl	80029c8 <memset>
 8002b80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b88:	4620      	mov	r0, r4
 8002b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b8c:	3468      	adds	r4, #104	; 0x68
 8002b8e:	e7d9      	b.n	8002b44 <__sfp+0x1c>
 8002b90:	2104      	movs	r1, #4
 8002b92:	4638      	mov	r0, r7
 8002b94:	f7ff ff62 	bl	8002a5c <__sfmoreglue>
 8002b98:	4604      	mov	r4, r0
 8002b9a:	6030      	str	r0, [r6, #0]
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d1d5      	bne.n	8002b4c <__sfp+0x24>
 8002ba0:	f7ff ff78 	bl	8002a94 <__sfp_lock_release>
 8002ba4:	230c      	movs	r3, #12
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	e7ee      	b.n	8002b88 <__sfp+0x60>
 8002baa:	bf00      	nop
 8002bac:	08003944 	.word	0x08003944
 8002bb0:	ffff0001 	.word	0xffff0001

08002bb4 <_fwalk_reent>:
 8002bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bb8:	4606      	mov	r6, r0
 8002bba:	4688      	mov	r8, r1
 8002bbc:	2700      	movs	r7, #0
 8002bbe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002bc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bc6:	f1b9 0901 	subs.w	r9, r9, #1
 8002bca:	d505      	bpl.n	8002bd8 <_fwalk_reent+0x24>
 8002bcc:	6824      	ldr	r4, [r4, #0]
 8002bce:	2c00      	cmp	r4, #0
 8002bd0:	d1f7      	bne.n	8002bc2 <_fwalk_reent+0xe>
 8002bd2:	4638      	mov	r0, r7
 8002bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bd8:	89ab      	ldrh	r3, [r5, #12]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d907      	bls.n	8002bee <_fwalk_reent+0x3a>
 8002bde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002be2:	3301      	adds	r3, #1
 8002be4:	d003      	beq.n	8002bee <_fwalk_reent+0x3a>
 8002be6:	4629      	mov	r1, r5
 8002be8:	4630      	mov	r0, r6
 8002bea:	47c0      	blx	r8
 8002bec:	4307      	orrs	r7, r0
 8002bee:	3568      	adds	r5, #104	; 0x68
 8002bf0:	e7e9      	b.n	8002bc6 <_fwalk_reent+0x12>

08002bf2 <__retarget_lock_init_recursive>:
 8002bf2:	4770      	bx	lr

08002bf4 <__retarget_lock_acquire_recursive>:
 8002bf4:	4770      	bx	lr

08002bf6 <__retarget_lock_release_recursive>:
 8002bf6:	4770      	bx	lr

08002bf8 <sbrk_aligned>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	4e0e      	ldr	r6, [pc, #56]	; (8002c34 <sbrk_aligned+0x3c>)
 8002bfc:	460c      	mov	r4, r1
 8002bfe:	6831      	ldr	r1, [r6, #0]
 8002c00:	4605      	mov	r5, r0
 8002c02:	b911      	cbnz	r1, 8002c0a <sbrk_aligned+0x12>
 8002c04:	f000 fb7a 	bl	80032fc <_sbrk_r>
 8002c08:	6030      	str	r0, [r6, #0]
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	f000 fb75 	bl	80032fc <_sbrk_r>
 8002c12:	1c43      	adds	r3, r0, #1
 8002c14:	d00a      	beq.n	8002c2c <sbrk_aligned+0x34>
 8002c16:	1cc4      	adds	r4, r0, #3
 8002c18:	f024 0403 	bic.w	r4, r4, #3
 8002c1c:	42a0      	cmp	r0, r4
 8002c1e:	d007      	beq.n	8002c30 <sbrk_aligned+0x38>
 8002c20:	1a21      	subs	r1, r4, r0
 8002c22:	4628      	mov	r0, r5
 8002c24:	f000 fb6a 	bl	80032fc <_sbrk_r>
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d101      	bne.n	8002c30 <sbrk_aligned+0x38>
 8002c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8002c30:	4620      	mov	r0, r4
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
 8002c34:	20000138 	.word	0x20000138

08002c38 <_malloc_r>:
 8002c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c3c:	1ccd      	adds	r5, r1, #3
 8002c3e:	f025 0503 	bic.w	r5, r5, #3
 8002c42:	3508      	adds	r5, #8
 8002c44:	2d0c      	cmp	r5, #12
 8002c46:	bf38      	it	cc
 8002c48:	250c      	movcc	r5, #12
 8002c4a:	2d00      	cmp	r5, #0
 8002c4c:	4607      	mov	r7, r0
 8002c4e:	db01      	blt.n	8002c54 <_malloc_r+0x1c>
 8002c50:	42a9      	cmp	r1, r5
 8002c52:	d905      	bls.n	8002c60 <_malloc_r+0x28>
 8002c54:	230c      	movs	r3, #12
 8002c56:	2600      	movs	r6, #0
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c60:	4e2e      	ldr	r6, [pc, #184]	; (8002d1c <_malloc_r+0xe4>)
 8002c62:	f000 fdc5 	bl	80037f0 <__malloc_lock>
 8002c66:	6833      	ldr	r3, [r6, #0]
 8002c68:	461c      	mov	r4, r3
 8002c6a:	bb34      	cbnz	r4, 8002cba <_malloc_r+0x82>
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	4638      	mov	r0, r7
 8002c70:	f7ff ffc2 	bl	8002bf8 <sbrk_aligned>
 8002c74:	1c43      	adds	r3, r0, #1
 8002c76:	4604      	mov	r4, r0
 8002c78:	d14d      	bne.n	8002d16 <_malloc_r+0xde>
 8002c7a:	6834      	ldr	r4, [r6, #0]
 8002c7c:	4626      	mov	r6, r4
 8002c7e:	2e00      	cmp	r6, #0
 8002c80:	d140      	bne.n	8002d04 <_malloc_r+0xcc>
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	4631      	mov	r1, r6
 8002c86:	4638      	mov	r0, r7
 8002c88:	eb04 0803 	add.w	r8, r4, r3
 8002c8c:	f000 fb36 	bl	80032fc <_sbrk_r>
 8002c90:	4580      	cmp	r8, r0
 8002c92:	d13a      	bne.n	8002d0a <_malloc_r+0xd2>
 8002c94:	6821      	ldr	r1, [r4, #0]
 8002c96:	3503      	adds	r5, #3
 8002c98:	1a6d      	subs	r5, r5, r1
 8002c9a:	f025 0503 	bic.w	r5, r5, #3
 8002c9e:	3508      	adds	r5, #8
 8002ca0:	2d0c      	cmp	r5, #12
 8002ca2:	bf38      	it	cc
 8002ca4:	250c      	movcc	r5, #12
 8002ca6:	4638      	mov	r0, r7
 8002ca8:	4629      	mov	r1, r5
 8002caa:	f7ff ffa5 	bl	8002bf8 <sbrk_aligned>
 8002cae:	3001      	adds	r0, #1
 8002cb0:	d02b      	beq.n	8002d0a <_malloc_r+0xd2>
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	442b      	add	r3, r5
 8002cb6:	6023      	str	r3, [r4, #0]
 8002cb8:	e00e      	b.n	8002cd8 <_malloc_r+0xa0>
 8002cba:	6822      	ldr	r2, [r4, #0]
 8002cbc:	1b52      	subs	r2, r2, r5
 8002cbe:	d41e      	bmi.n	8002cfe <_malloc_r+0xc6>
 8002cc0:	2a0b      	cmp	r2, #11
 8002cc2:	d916      	bls.n	8002cf2 <_malloc_r+0xba>
 8002cc4:	1961      	adds	r1, r4, r5
 8002cc6:	42a3      	cmp	r3, r4
 8002cc8:	6025      	str	r5, [r4, #0]
 8002cca:	bf18      	it	ne
 8002ccc:	6059      	strne	r1, [r3, #4]
 8002cce:	6863      	ldr	r3, [r4, #4]
 8002cd0:	bf08      	it	eq
 8002cd2:	6031      	streq	r1, [r6, #0]
 8002cd4:	5162      	str	r2, [r4, r5]
 8002cd6:	604b      	str	r3, [r1, #4]
 8002cd8:	4638      	mov	r0, r7
 8002cda:	f104 060b 	add.w	r6, r4, #11
 8002cde:	f000 fd8d 	bl	80037fc <__malloc_unlock>
 8002ce2:	f026 0607 	bic.w	r6, r6, #7
 8002ce6:	1d23      	adds	r3, r4, #4
 8002ce8:	1af2      	subs	r2, r6, r3
 8002cea:	d0b6      	beq.n	8002c5a <_malloc_r+0x22>
 8002cec:	1b9b      	subs	r3, r3, r6
 8002cee:	50a3      	str	r3, [r4, r2]
 8002cf0:	e7b3      	b.n	8002c5a <_malloc_r+0x22>
 8002cf2:	6862      	ldr	r2, [r4, #4]
 8002cf4:	42a3      	cmp	r3, r4
 8002cf6:	bf0c      	ite	eq
 8002cf8:	6032      	streq	r2, [r6, #0]
 8002cfa:	605a      	strne	r2, [r3, #4]
 8002cfc:	e7ec      	b.n	8002cd8 <_malloc_r+0xa0>
 8002cfe:	4623      	mov	r3, r4
 8002d00:	6864      	ldr	r4, [r4, #4]
 8002d02:	e7b2      	b.n	8002c6a <_malloc_r+0x32>
 8002d04:	4634      	mov	r4, r6
 8002d06:	6876      	ldr	r6, [r6, #4]
 8002d08:	e7b9      	b.n	8002c7e <_malloc_r+0x46>
 8002d0a:	230c      	movs	r3, #12
 8002d0c:	4638      	mov	r0, r7
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	f000 fd74 	bl	80037fc <__malloc_unlock>
 8002d14:	e7a1      	b.n	8002c5a <_malloc_r+0x22>
 8002d16:	6025      	str	r5, [r4, #0]
 8002d18:	e7de      	b.n	8002cd8 <_malloc_r+0xa0>
 8002d1a:	bf00      	nop
 8002d1c:	20000134 	.word	0x20000134

08002d20 <__sfputc_r>:
 8002d20:	6893      	ldr	r3, [r2, #8]
 8002d22:	b410      	push	{r4}
 8002d24:	3b01      	subs	r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	6093      	str	r3, [r2, #8]
 8002d2a:	da07      	bge.n	8002d3c <__sfputc_r+0x1c>
 8002d2c:	6994      	ldr	r4, [r2, #24]
 8002d2e:	42a3      	cmp	r3, r4
 8002d30:	db01      	blt.n	8002d36 <__sfputc_r+0x16>
 8002d32:	290a      	cmp	r1, #10
 8002d34:	d102      	bne.n	8002d3c <__sfputc_r+0x1c>
 8002d36:	bc10      	pop	{r4}
 8002d38:	f000 bb34 	b.w	80033a4 <__swbuf_r>
 8002d3c:	6813      	ldr	r3, [r2, #0]
 8002d3e:	1c58      	adds	r0, r3, #1
 8002d40:	6010      	str	r0, [r2, #0]
 8002d42:	7019      	strb	r1, [r3, #0]
 8002d44:	4608      	mov	r0, r1
 8002d46:	bc10      	pop	{r4}
 8002d48:	4770      	bx	lr

08002d4a <__sfputs_r>:
 8002d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4c:	4606      	mov	r6, r0
 8002d4e:	460f      	mov	r7, r1
 8002d50:	4614      	mov	r4, r2
 8002d52:	18d5      	adds	r5, r2, r3
 8002d54:	42ac      	cmp	r4, r5
 8002d56:	d101      	bne.n	8002d5c <__sfputs_r+0x12>
 8002d58:	2000      	movs	r0, #0
 8002d5a:	e007      	b.n	8002d6c <__sfputs_r+0x22>
 8002d5c:	463a      	mov	r2, r7
 8002d5e:	4630      	mov	r0, r6
 8002d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d64:	f7ff ffdc 	bl	8002d20 <__sfputc_r>
 8002d68:	1c43      	adds	r3, r0, #1
 8002d6a:	d1f3      	bne.n	8002d54 <__sfputs_r+0xa>
 8002d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d70 <_vfiprintf_r>:
 8002d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d74:	460d      	mov	r5, r1
 8002d76:	4614      	mov	r4, r2
 8002d78:	4698      	mov	r8, r3
 8002d7a:	4606      	mov	r6, r0
 8002d7c:	b09d      	sub	sp, #116	; 0x74
 8002d7e:	b118      	cbz	r0, 8002d88 <_vfiprintf_r+0x18>
 8002d80:	6983      	ldr	r3, [r0, #24]
 8002d82:	b90b      	cbnz	r3, 8002d88 <_vfiprintf_r+0x18>
 8002d84:	f7ff fe98 	bl	8002ab8 <__sinit>
 8002d88:	4b89      	ldr	r3, [pc, #548]	; (8002fb0 <_vfiprintf_r+0x240>)
 8002d8a:	429d      	cmp	r5, r3
 8002d8c:	d11b      	bne.n	8002dc6 <_vfiprintf_r+0x56>
 8002d8e:	6875      	ldr	r5, [r6, #4]
 8002d90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d92:	07d9      	lsls	r1, r3, #31
 8002d94:	d405      	bmi.n	8002da2 <_vfiprintf_r+0x32>
 8002d96:	89ab      	ldrh	r3, [r5, #12]
 8002d98:	059a      	lsls	r2, r3, #22
 8002d9a:	d402      	bmi.n	8002da2 <_vfiprintf_r+0x32>
 8002d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d9e:	f7ff ff29 	bl	8002bf4 <__retarget_lock_acquire_recursive>
 8002da2:	89ab      	ldrh	r3, [r5, #12]
 8002da4:	071b      	lsls	r3, r3, #28
 8002da6:	d501      	bpl.n	8002dac <_vfiprintf_r+0x3c>
 8002da8:	692b      	ldr	r3, [r5, #16]
 8002daa:	b9eb      	cbnz	r3, 8002de8 <_vfiprintf_r+0x78>
 8002dac:	4629      	mov	r1, r5
 8002dae:	4630      	mov	r0, r6
 8002db0:	f000 fb5c 	bl	800346c <__swsetup_r>
 8002db4:	b1c0      	cbz	r0, 8002de8 <_vfiprintf_r+0x78>
 8002db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002db8:	07dc      	lsls	r4, r3, #31
 8002dba:	d50e      	bpl.n	8002dda <_vfiprintf_r+0x6a>
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	b01d      	add	sp, #116	; 0x74
 8002dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dc6:	4b7b      	ldr	r3, [pc, #492]	; (8002fb4 <_vfiprintf_r+0x244>)
 8002dc8:	429d      	cmp	r5, r3
 8002dca:	d101      	bne.n	8002dd0 <_vfiprintf_r+0x60>
 8002dcc:	68b5      	ldr	r5, [r6, #8]
 8002dce:	e7df      	b.n	8002d90 <_vfiprintf_r+0x20>
 8002dd0:	4b79      	ldr	r3, [pc, #484]	; (8002fb8 <_vfiprintf_r+0x248>)
 8002dd2:	429d      	cmp	r5, r3
 8002dd4:	bf08      	it	eq
 8002dd6:	68f5      	ldreq	r5, [r6, #12]
 8002dd8:	e7da      	b.n	8002d90 <_vfiprintf_r+0x20>
 8002dda:	89ab      	ldrh	r3, [r5, #12]
 8002ddc:	0598      	lsls	r0, r3, #22
 8002dde:	d4ed      	bmi.n	8002dbc <_vfiprintf_r+0x4c>
 8002de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002de2:	f7ff ff08 	bl	8002bf6 <__retarget_lock_release_recursive>
 8002de6:	e7e9      	b.n	8002dbc <_vfiprintf_r+0x4c>
 8002de8:	2300      	movs	r3, #0
 8002dea:	9309      	str	r3, [sp, #36]	; 0x24
 8002dec:	2320      	movs	r3, #32
 8002dee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002df2:	2330      	movs	r3, #48	; 0x30
 8002df4:	f04f 0901 	mov.w	r9, #1
 8002df8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dfc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002fbc <_vfiprintf_r+0x24c>
 8002e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e04:	4623      	mov	r3, r4
 8002e06:	469a      	mov	sl, r3
 8002e08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e0c:	b10a      	cbz	r2, 8002e12 <_vfiprintf_r+0xa2>
 8002e0e:	2a25      	cmp	r2, #37	; 0x25
 8002e10:	d1f9      	bne.n	8002e06 <_vfiprintf_r+0x96>
 8002e12:	ebba 0b04 	subs.w	fp, sl, r4
 8002e16:	d00b      	beq.n	8002e30 <_vfiprintf_r+0xc0>
 8002e18:	465b      	mov	r3, fp
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	4629      	mov	r1, r5
 8002e1e:	4630      	mov	r0, r6
 8002e20:	f7ff ff93 	bl	8002d4a <__sfputs_r>
 8002e24:	3001      	adds	r0, #1
 8002e26:	f000 80aa 	beq.w	8002f7e <_vfiprintf_r+0x20e>
 8002e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e2c:	445a      	add	r2, fp
 8002e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8002e30:	f89a 3000 	ldrb.w	r3, [sl]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a2 	beq.w	8002f7e <_vfiprintf_r+0x20e>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e44:	f10a 0a01 	add.w	sl, sl, #1
 8002e48:	9304      	str	r3, [sp, #16]
 8002e4a:	9307      	str	r3, [sp, #28]
 8002e4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e50:	931a      	str	r3, [sp, #104]	; 0x68
 8002e52:	4654      	mov	r4, sl
 8002e54:	2205      	movs	r2, #5
 8002e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e5a:	4858      	ldr	r0, [pc, #352]	; (8002fbc <_vfiprintf_r+0x24c>)
 8002e5c:	f000 fcba 	bl	80037d4 <memchr>
 8002e60:	9a04      	ldr	r2, [sp, #16]
 8002e62:	b9d8      	cbnz	r0, 8002e9c <_vfiprintf_r+0x12c>
 8002e64:	06d1      	lsls	r1, r2, #27
 8002e66:	bf44      	itt	mi
 8002e68:	2320      	movmi	r3, #32
 8002e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e6e:	0713      	lsls	r3, r2, #28
 8002e70:	bf44      	itt	mi
 8002e72:	232b      	movmi	r3, #43	; 0x2b
 8002e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e78:	f89a 3000 	ldrb.w	r3, [sl]
 8002e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e7e:	d015      	beq.n	8002eac <_vfiprintf_r+0x13c>
 8002e80:	4654      	mov	r4, sl
 8002e82:	2000      	movs	r0, #0
 8002e84:	f04f 0c0a 	mov.w	ip, #10
 8002e88:	9a07      	ldr	r2, [sp, #28]
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e90:	3b30      	subs	r3, #48	; 0x30
 8002e92:	2b09      	cmp	r3, #9
 8002e94:	d94e      	bls.n	8002f34 <_vfiprintf_r+0x1c4>
 8002e96:	b1b0      	cbz	r0, 8002ec6 <_vfiprintf_r+0x156>
 8002e98:	9207      	str	r2, [sp, #28]
 8002e9a:	e014      	b.n	8002ec6 <_vfiprintf_r+0x156>
 8002e9c:	eba0 0308 	sub.w	r3, r0, r8
 8002ea0:	fa09 f303 	lsl.w	r3, r9, r3
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	46a2      	mov	sl, r4
 8002ea8:	9304      	str	r3, [sp, #16]
 8002eaa:	e7d2      	b.n	8002e52 <_vfiprintf_r+0xe2>
 8002eac:	9b03      	ldr	r3, [sp, #12]
 8002eae:	1d19      	adds	r1, r3, #4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	9103      	str	r1, [sp, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bfbb      	ittet	lt
 8002eb8:	425b      	neglt	r3, r3
 8002eba:	f042 0202 	orrlt.w	r2, r2, #2
 8002ebe:	9307      	strge	r3, [sp, #28]
 8002ec0:	9307      	strlt	r3, [sp, #28]
 8002ec2:	bfb8      	it	lt
 8002ec4:	9204      	strlt	r2, [sp, #16]
 8002ec6:	7823      	ldrb	r3, [r4, #0]
 8002ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8002eca:	d10c      	bne.n	8002ee6 <_vfiprintf_r+0x176>
 8002ecc:	7863      	ldrb	r3, [r4, #1]
 8002ece:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed0:	d135      	bne.n	8002f3e <_vfiprintf_r+0x1ce>
 8002ed2:	9b03      	ldr	r3, [sp, #12]
 8002ed4:	3402      	adds	r4, #2
 8002ed6:	1d1a      	adds	r2, r3, #4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	9203      	str	r2, [sp, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bfb8      	it	lt
 8002ee0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ee4:	9305      	str	r3, [sp, #20]
 8002ee6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002fc0 <_vfiprintf_r+0x250>
 8002eea:	2203      	movs	r2, #3
 8002eec:	4650      	mov	r0, sl
 8002eee:	7821      	ldrb	r1, [r4, #0]
 8002ef0:	f000 fc70 	bl	80037d4 <memchr>
 8002ef4:	b140      	cbz	r0, 8002f08 <_vfiprintf_r+0x198>
 8002ef6:	2340      	movs	r3, #64	; 0x40
 8002ef8:	eba0 000a 	sub.w	r0, r0, sl
 8002efc:	fa03 f000 	lsl.w	r0, r3, r0
 8002f00:	9b04      	ldr	r3, [sp, #16]
 8002f02:	3401      	adds	r4, #1
 8002f04:	4303      	orrs	r3, r0
 8002f06:	9304      	str	r3, [sp, #16]
 8002f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f0c:	2206      	movs	r2, #6
 8002f0e:	482d      	ldr	r0, [pc, #180]	; (8002fc4 <_vfiprintf_r+0x254>)
 8002f10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f14:	f000 fc5e 	bl	80037d4 <memchr>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d03f      	beq.n	8002f9c <_vfiprintf_r+0x22c>
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <_vfiprintf_r+0x258>)
 8002f1e:	bb1b      	cbnz	r3, 8002f68 <_vfiprintf_r+0x1f8>
 8002f20:	9b03      	ldr	r3, [sp, #12]
 8002f22:	3307      	adds	r3, #7
 8002f24:	f023 0307 	bic.w	r3, r3, #7
 8002f28:	3308      	adds	r3, #8
 8002f2a:	9303      	str	r3, [sp, #12]
 8002f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f2e:	443b      	add	r3, r7
 8002f30:	9309      	str	r3, [sp, #36]	; 0x24
 8002f32:	e767      	b.n	8002e04 <_vfiprintf_r+0x94>
 8002f34:	460c      	mov	r4, r1
 8002f36:	2001      	movs	r0, #1
 8002f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f3c:	e7a5      	b.n	8002e8a <_vfiprintf_r+0x11a>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f04f 0c0a 	mov.w	ip, #10
 8002f44:	4619      	mov	r1, r3
 8002f46:	3401      	adds	r4, #1
 8002f48:	9305      	str	r3, [sp, #20]
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f50:	3a30      	subs	r2, #48	; 0x30
 8002f52:	2a09      	cmp	r2, #9
 8002f54:	d903      	bls.n	8002f5e <_vfiprintf_r+0x1ee>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0c5      	beq.n	8002ee6 <_vfiprintf_r+0x176>
 8002f5a:	9105      	str	r1, [sp, #20]
 8002f5c:	e7c3      	b.n	8002ee6 <_vfiprintf_r+0x176>
 8002f5e:	4604      	mov	r4, r0
 8002f60:	2301      	movs	r3, #1
 8002f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f66:	e7f0      	b.n	8002f4a <_vfiprintf_r+0x1da>
 8002f68:	ab03      	add	r3, sp, #12
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	462a      	mov	r2, r5
 8002f6e:	4630      	mov	r0, r6
 8002f70:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <_vfiprintf_r+0x25c>)
 8002f72:	a904      	add	r1, sp, #16
 8002f74:	f3af 8000 	nop.w
 8002f78:	4607      	mov	r7, r0
 8002f7a:	1c78      	adds	r0, r7, #1
 8002f7c:	d1d6      	bne.n	8002f2c <_vfiprintf_r+0x1bc>
 8002f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f80:	07d9      	lsls	r1, r3, #31
 8002f82:	d405      	bmi.n	8002f90 <_vfiprintf_r+0x220>
 8002f84:	89ab      	ldrh	r3, [r5, #12]
 8002f86:	059a      	lsls	r2, r3, #22
 8002f88:	d402      	bmi.n	8002f90 <_vfiprintf_r+0x220>
 8002f8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f8c:	f7ff fe33 	bl	8002bf6 <__retarget_lock_release_recursive>
 8002f90:	89ab      	ldrh	r3, [r5, #12]
 8002f92:	065b      	lsls	r3, r3, #25
 8002f94:	f53f af12 	bmi.w	8002dbc <_vfiprintf_r+0x4c>
 8002f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f9a:	e711      	b.n	8002dc0 <_vfiprintf_r+0x50>
 8002f9c:	ab03      	add	r3, sp, #12
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	462a      	mov	r2, r5
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <_vfiprintf_r+0x25c>)
 8002fa6:	a904      	add	r1, sp, #16
 8002fa8:	f000 f882 	bl	80030b0 <_printf_i>
 8002fac:	e7e4      	b.n	8002f78 <_vfiprintf_r+0x208>
 8002fae:	bf00      	nop
 8002fb0:	08003968 	.word	0x08003968
 8002fb4:	08003988 	.word	0x08003988
 8002fb8:	08003948 	.word	0x08003948
 8002fbc:	080039a8 	.word	0x080039a8
 8002fc0:	080039ae 	.word	0x080039ae
 8002fc4:	080039b2 	.word	0x080039b2
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	08002d4b 	.word	0x08002d4b

08002fd0 <_printf_common>:
 8002fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd4:	4616      	mov	r6, r2
 8002fd6:	4699      	mov	r9, r3
 8002fd8:	688a      	ldr	r2, [r1, #8]
 8002fda:	690b      	ldr	r3, [r1, #16]
 8002fdc:	4607      	mov	r7, r0
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	bfb8      	it	lt
 8002fe2:	4613      	movlt	r3, r2
 8002fe4:	6033      	str	r3, [r6, #0]
 8002fe6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fea:	460c      	mov	r4, r1
 8002fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ff0:	b10a      	cbz	r2, 8002ff6 <_printf_common+0x26>
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	6033      	str	r3, [r6, #0]
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	0699      	lsls	r1, r3, #26
 8002ffa:	bf42      	ittt	mi
 8002ffc:	6833      	ldrmi	r3, [r6, #0]
 8002ffe:	3302      	addmi	r3, #2
 8003000:	6033      	strmi	r3, [r6, #0]
 8003002:	6825      	ldr	r5, [r4, #0]
 8003004:	f015 0506 	ands.w	r5, r5, #6
 8003008:	d106      	bne.n	8003018 <_printf_common+0x48>
 800300a:	f104 0a19 	add.w	sl, r4, #25
 800300e:	68e3      	ldr	r3, [r4, #12]
 8003010:	6832      	ldr	r2, [r6, #0]
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	42ab      	cmp	r3, r5
 8003016:	dc28      	bgt.n	800306a <_printf_common+0x9a>
 8003018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800301c:	1e13      	subs	r3, r2, #0
 800301e:	6822      	ldr	r2, [r4, #0]
 8003020:	bf18      	it	ne
 8003022:	2301      	movne	r3, #1
 8003024:	0692      	lsls	r2, r2, #26
 8003026:	d42d      	bmi.n	8003084 <_printf_common+0xb4>
 8003028:	4649      	mov	r1, r9
 800302a:	4638      	mov	r0, r7
 800302c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003030:	47c0      	blx	r8
 8003032:	3001      	adds	r0, #1
 8003034:	d020      	beq.n	8003078 <_printf_common+0xa8>
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	68e5      	ldr	r5, [r4, #12]
 800303a:	f003 0306 	and.w	r3, r3, #6
 800303e:	2b04      	cmp	r3, #4
 8003040:	bf18      	it	ne
 8003042:	2500      	movne	r5, #0
 8003044:	6832      	ldr	r2, [r6, #0]
 8003046:	f04f 0600 	mov.w	r6, #0
 800304a:	68a3      	ldr	r3, [r4, #8]
 800304c:	bf08      	it	eq
 800304e:	1aad      	subeq	r5, r5, r2
 8003050:	6922      	ldr	r2, [r4, #16]
 8003052:	bf08      	it	eq
 8003054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003058:	4293      	cmp	r3, r2
 800305a:	bfc4      	itt	gt
 800305c:	1a9b      	subgt	r3, r3, r2
 800305e:	18ed      	addgt	r5, r5, r3
 8003060:	341a      	adds	r4, #26
 8003062:	42b5      	cmp	r5, r6
 8003064:	d11a      	bne.n	800309c <_printf_common+0xcc>
 8003066:	2000      	movs	r0, #0
 8003068:	e008      	b.n	800307c <_printf_common+0xac>
 800306a:	2301      	movs	r3, #1
 800306c:	4652      	mov	r2, sl
 800306e:	4649      	mov	r1, r9
 8003070:	4638      	mov	r0, r7
 8003072:	47c0      	blx	r8
 8003074:	3001      	adds	r0, #1
 8003076:	d103      	bne.n	8003080 <_printf_common+0xb0>
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
 800307c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003080:	3501      	adds	r5, #1
 8003082:	e7c4      	b.n	800300e <_printf_common+0x3e>
 8003084:	2030      	movs	r0, #48	; 0x30
 8003086:	18e1      	adds	r1, r4, r3
 8003088:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003092:	4422      	add	r2, r4
 8003094:	3302      	adds	r3, #2
 8003096:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800309a:	e7c5      	b.n	8003028 <_printf_common+0x58>
 800309c:	2301      	movs	r3, #1
 800309e:	4622      	mov	r2, r4
 80030a0:	4649      	mov	r1, r9
 80030a2:	4638      	mov	r0, r7
 80030a4:	47c0      	blx	r8
 80030a6:	3001      	adds	r0, #1
 80030a8:	d0e6      	beq.n	8003078 <_printf_common+0xa8>
 80030aa:	3601      	adds	r6, #1
 80030ac:	e7d9      	b.n	8003062 <_printf_common+0x92>
	...

080030b0 <_printf_i>:
 80030b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030b4:	7e0f      	ldrb	r7, [r1, #24]
 80030b6:	4691      	mov	r9, r2
 80030b8:	2f78      	cmp	r7, #120	; 0x78
 80030ba:	4680      	mov	r8, r0
 80030bc:	460c      	mov	r4, r1
 80030be:	469a      	mov	sl, r3
 80030c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030c6:	d807      	bhi.n	80030d8 <_printf_i+0x28>
 80030c8:	2f62      	cmp	r7, #98	; 0x62
 80030ca:	d80a      	bhi.n	80030e2 <_printf_i+0x32>
 80030cc:	2f00      	cmp	r7, #0
 80030ce:	f000 80d9 	beq.w	8003284 <_printf_i+0x1d4>
 80030d2:	2f58      	cmp	r7, #88	; 0x58
 80030d4:	f000 80a4 	beq.w	8003220 <_printf_i+0x170>
 80030d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030e0:	e03a      	b.n	8003158 <_printf_i+0xa8>
 80030e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030e6:	2b15      	cmp	r3, #21
 80030e8:	d8f6      	bhi.n	80030d8 <_printf_i+0x28>
 80030ea:	a101      	add	r1, pc, #4	; (adr r1, 80030f0 <_printf_i+0x40>)
 80030ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030f0:	08003149 	.word	0x08003149
 80030f4:	0800315d 	.word	0x0800315d
 80030f8:	080030d9 	.word	0x080030d9
 80030fc:	080030d9 	.word	0x080030d9
 8003100:	080030d9 	.word	0x080030d9
 8003104:	080030d9 	.word	0x080030d9
 8003108:	0800315d 	.word	0x0800315d
 800310c:	080030d9 	.word	0x080030d9
 8003110:	080030d9 	.word	0x080030d9
 8003114:	080030d9 	.word	0x080030d9
 8003118:	080030d9 	.word	0x080030d9
 800311c:	0800326b 	.word	0x0800326b
 8003120:	0800318d 	.word	0x0800318d
 8003124:	0800324d 	.word	0x0800324d
 8003128:	080030d9 	.word	0x080030d9
 800312c:	080030d9 	.word	0x080030d9
 8003130:	0800328d 	.word	0x0800328d
 8003134:	080030d9 	.word	0x080030d9
 8003138:	0800318d 	.word	0x0800318d
 800313c:	080030d9 	.word	0x080030d9
 8003140:	080030d9 	.word	0x080030d9
 8003144:	08003255 	.word	0x08003255
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	1d1a      	adds	r2, r3, #4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	602a      	str	r2, [r5, #0]
 8003150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003158:	2301      	movs	r3, #1
 800315a:	e0a4      	b.n	80032a6 <_printf_i+0x1f6>
 800315c:	6820      	ldr	r0, [r4, #0]
 800315e:	6829      	ldr	r1, [r5, #0]
 8003160:	0606      	lsls	r6, r0, #24
 8003162:	f101 0304 	add.w	r3, r1, #4
 8003166:	d50a      	bpl.n	800317e <_printf_i+0xce>
 8003168:	680e      	ldr	r6, [r1, #0]
 800316a:	602b      	str	r3, [r5, #0]
 800316c:	2e00      	cmp	r6, #0
 800316e:	da03      	bge.n	8003178 <_printf_i+0xc8>
 8003170:	232d      	movs	r3, #45	; 0x2d
 8003172:	4276      	negs	r6, r6
 8003174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003178:	230a      	movs	r3, #10
 800317a:	485e      	ldr	r0, [pc, #376]	; (80032f4 <_printf_i+0x244>)
 800317c:	e019      	b.n	80031b2 <_printf_i+0x102>
 800317e:	680e      	ldr	r6, [r1, #0]
 8003180:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003184:	602b      	str	r3, [r5, #0]
 8003186:	bf18      	it	ne
 8003188:	b236      	sxthne	r6, r6
 800318a:	e7ef      	b.n	800316c <_printf_i+0xbc>
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	6820      	ldr	r0, [r4, #0]
 8003190:	1d19      	adds	r1, r3, #4
 8003192:	6029      	str	r1, [r5, #0]
 8003194:	0601      	lsls	r1, r0, #24
 8003196:	d501      	bpl.n	800319c <_printf_i+0xec>
 8003198:	681e      	ldr	r6, [r3, #0]
 800319a:	e002      	b.n	80031a2 <_printf_i+0xf2>
 800319c:	0646      	lsls	r6, r0, #25
 800319e:	d5fb      	bpl.n	8003198 <_printf_i+0xe8>
 80031a0:	881e      	ldrh	r6, [r3, #0]
 80031a2:	2f6f      	cmp	r7, #111	; 0x6f
 80031a4:	bf0c      	ite	eq
 80031a6:	2308      	moveq	r3, #8
 80031a8:	230a      	movne	r3, #10
 80031aa:	4852      	ldr	r0, [pc, #328]	; (80032f4 <_printf_i+0x244>)
 80031ac:	2100      	movs	r1, #0
 80031ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031b2:	6865      	ldr	r5, [r4, #4]
 80031b4:	2d00      	cmp	r5, #0
 80031b6:	bfa8      	it	ge
 80031b8:	6821      	ldrge	r1, [r4, #0]
 80031ba:	60a5      	str	r5, [r4, #8]
 80031bc:	bfa4      	itt	ge
 80031be:	f021 0104 	bicge.w	r1, r1, #4
 80031c2:	6021      	strge	r1, [r4, #0]
 80031c4:	b90e      	cbnz	r6, 80031ca <_printf_i+0x11a>
 80031c6:	2d00      	cmp	r5, #0
 80031c8:	d04d      	beq.n	8003266 <_printf_i+0x1b6>
 80031ca:	4615      	mov	r5, r2
 80031cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80031d0:	fb03 6711 	mls	r7, r3, r1, r6
 80031d4:	5dc7      	ldrb	r7, [r0, r7]
 80031d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031da:	4637      	mov	r7, r6
 80031dc:	42bb      	cmp	r3, r7
 80031de:	460e      	mov	r6, r1
 80031e0:	d9f4      	bls.n	80031cc <_printf_i+0x11c>
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d10b      	bne.n	80031fe <_printf_i+0x14e>
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	07de      	lsls	r6, r3, #31
 80031ea:	d508      	bpl.n	80031fe <_printf_i+0x14e>
 80031ec:	6923      	ldr	r3, [r4, #16]
 80031ee:	6861      	ldr	r1, [r4, #4]
 80031f0:	4299      	cmp	r1, r3
 80031f2:	bfde      	ittt	le
 80031f4:	2330      	movle	r3, #48	; 0x30
 80031f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031fe:	1b52      	subs	r2, r2, r5
 8003200:	6122      	str	r2, [r4, #16]
 8003202:	464b      	mov	r3, r9
 8003204:	4621      	mov	r1, r4
 8003206:	4640      	mov	r0, r8
 8003208:	f8cd a000 	str.w	sl, [sp]
 800320c:	aa03      	add	r2, sp, #12
 800320e:	f7ff fedf 	bl	8002fd0 <_printf_common>
 8003212:	3001      	adds	r0, #1
 8003214:	d14c      	bne.n	80032b0 <_printf_i+0x200>
 8003216:	f04f 30ff 	mov.w	r0, #4294967295
 800321a:	b004      	add	sp, #16
 800321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003220:	4834      	ldr	r0, [pc, #208]	; (80032f4 <_printf_i+0x244>)
 8003222:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003226:	6829      	ldr	r1, [r5, #0]
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	f851 6b04 	ldr.w	r6, [r1], #4
 800322e:	6029      	str	r1, [r5, #0]
 8003230:	061d      	lsls	r5, r3, #24
 8003232:	d514      	bpl.n	800325e <_printf_i+0x1ae>
 8003234:	07df      	lsls	r7, r3, #31
 8003236:	bf44      	itt	mi
 8003238:	f043 0320 	orrmi.w	r3, r3, #32
 800323c:	6023      	strmi	r3, [r4, #0]
 800323e:	b91e      	cbnz	r6, 8003248 <_printf_i+0x198>
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	f023 0320 	bic.w	r3, r3, #32
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	2310      	movs	r3, #16
 800324a:	e7af      	b.n	80031ac <_printf_i+0xfc>
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	f043 0320 	orr.w	r3, r3, #32
 8003252:	6023      	str	r3, [r4, #0]
 8003254:	2378      	movs	r3, #120	; 0x78
 8003256:	4828      	ldr	r0, [pc, #160]	; (80032f8 <_printf_i+0x248>)
 8003258:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800325c:	e7e3      	b.n	8003226 <_printf_i+0x176>
 800325e:	0659      	lsls	r1, r3, #25
 8003260:	bf48      	it	mi
 8003262:	b2b6      	uxthmi	r6, r6
 8003264:	e7e6      	b.n	8003234 <_printf_i+0x184>
 8003266:	4615      	mov	r5, r2
 8003268:	e7bb      	b.n	80031e2 <_printf_i+0x132>
 800326a:	682b      	ldr	r3, [r5, #0]
 800326c:	6826      	ldr	r6, [r4, #0]
 800326e:	1d18      	adds	r0, r3, #4
 8003270:	6961      	ldr	r1, [r4, #20]
 8003272:	6028      	str	r0, [r5, #0]
 8003274:	0635      	lsls	r5, r6, #24
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	d501      	bpl.n	800327e <_printf_i+0x1ce>
 800327a:	6019      	str	r1, [r3, #0]
 800327c:	e002      	b.n	8003284 <_printf_i+0x1d4>
 800327e:	0670      	lsls	r0, r6, #25
 8003280:	d5fb      	bpl.n	800327a <_printf_i+0x1ca>
 8003282:	8019      	strh	r1, [r3, #0]
 8003284:	2300      	movs	r3, #0
 8003286:	4615      	mov	r5, r2
 8003288:	6123      	str	r3, [r4, #16]
 800328a:	e7ba      	b.n	8003202 <_printf_i+0x152>
 800328c:	682b      	ldr	r3, [r5, #0]
 800328e:	2100      	movs	r1, #0
 8003290:	1d1a      	adds	r2, r3, #4
 8003292:	602a      	str	r2, [r5, #0]
 8003294:	681d      	ldr	r5, [r3, #0]
 8003296:	6862      	ldr	r2, [r4, #4]
 8003298:	4628      	mov	r0, r5
 800329a:	f000 fa9b 	bl	80037d4 <memchr>
 800329e:	b108      	cbz	r0, 80032a4 <_printf_i+0x1f4>
 80032a0:	1b40      	subs	r0, r0, r5
 80032a2:	6060      	str	r0, [r4, #4]
 80032a4:	6863      	ldr	r3, [r4, #4]
 80032a6:	6123      	str	r3, [r4, #16]
 80032a8:	2300      	movs	r3, #0
 80032aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ae:	e7a8      	b.n	8003202 <_printf_i+0x152>
 80032b0:	462a      	mov	r2, r5
 80032b2:	4649      	mov	r1, r9
 80032b4:	4640      	mov	r0, r8
 80032b6:	6923      	ldr	r3, [r4, #16]
 80032b8:	47d0      	blx	sl
 80032ba:	3001      	adds	r0, #1
 80032bc:	d0ab      	beq.n	8003216 <_printf_i+0x166>
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	079b      	lsls	r3, r3, #30
 80032c2:	d413      	bmi.n	80032ec <_printf_i+0x23c>
 80032c4:	68e0      	ldr	r0, [r4, #12]
 80032c6:	9b03      	ldr	r3, [sp, #12]
 80032c8:	4298      	cmp	r0, r3
 80032ca:	bfb8      	it	lt
 80032cc:	4618      	movlt	r0, r3
 80032ce:	e7a4      	b.n	800321a <_printf_i+0x16a>
 80032d0:	2301      	movs	r3, #1
 80032d2:	4632      	mov	r2, r6
 80032d4:	4649      	mov	r1, r9
 80032d6:	4640      	mov	r0, r8
 80032d8:	47d0      	blx	sl
 80032da:	3001      	adds	r0, #1
 80032dc:	d09b      	beq.n	8003216 <_printf_i+0x166>
 80032de:	3501      	adds	r5, #1
 80032e0:	68e3      	ldr	r3, [r4, #12]
 80032e2:	9903      	ldr	r1, [sp, #12]
 80032e4:	1a5b      	subs	r3, r3, r1
 80032e6:	42ab      	cmp	r3, r5
 80032e8:	dcf2      	bgt.n	80032d0 <_printf_i+0x220>
 80032ea:	e7eb      	b.n	80032c4 <_printf_i+0x214>
 80032ec:	2500      	movs	r5, #0
 80032ee:	f104 0619 	add.w	r6, r4, #25
 80032f2:	e7f5      	b.n	80032e0 <_printf_i+0x230>
 80032f4:	080039b9 	.word	0x080039b9
 80032f8:	080039ca 	.word	0x080039ca

080032fc <_sbrk_r>:
 80032fc:	b538      	push	{r3, r4, r5, lr}
 80032fe:	2300      	movs	r3, #0
 8003300:	4d05      	ldr	r5, [pc, #20]	; (8003318 <_sbrk_r+0x1c>)
 8003302:	4604      	mov	r4, r0
 8003304:	4608      	mov	r0, r1
 8003306:	602b      	str	r3, [r5, #0]
 8003308:	f7fd fb4e 	bl	80009a8 <_sbrk>
 800330c:	1c43      	adds	r3, r0, #1
 800330e:	d102      	bne.n	8003316 <_sbrk_r+0x1a>
 8003310:	682b      	ldr	r3, [r5, #0]
 8003312:	b103      	cbz	r3, 8003316 <_sbrk_r+0x1a>
 8003314:	6023      	str	r3, [r4, #0]
 8003316:	bd38      	pop	{r3, r4, r5, pc}
 8003318:	2000013c 	.word	0x2000013c

0800331c <__sread>:
 800331c:	b510      	push	{r4, lr}
 800331e:	460c      	mov	r4, r1
 8003320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003324:	f000 fab8 	bl	8003898 <_read_r>
 8003328:	2800      	cmp	r0, #0
 800332a:	bfab      	itete	ge
 800332c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800332e:	89a3      	ldrhlt	r3, [r4, #12]
 8003330:	181b      	addge	r3, r3, r0
 8003332:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003336:	bfac      	ite	ge
 8003338:	6563      	strge	r3, [r4, #84]	; 0x54
 800333a:	81a3      	strhlt	r3, [r4, #12]
 800333c:	bd10      	pop	{r4, pc}

0800333e <__swrite>:
 800333e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003342:	461f      	mov	r7, r3
 8003344:	898b      	ldrh	r3, [r1, #12]
 8003346:	4605      	mov	r5, r0
 8003348:	05db      	lsls	r3, r3, #23
 800334a:	460c      	mov	r4, r1
 800334c:	4616      	mov	r6, r2
 800334e:	d505      	bpl.n	800335c <__swrite+0x1e>
 8003350:	2302      	movs	r3, #2
 8003352:	2200      	movs	r2, #0
 8003354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003358:	f000 f9c4 	bl	80036e4 <_lseek_r>
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	4632      	mov	r2, r6
 8003360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003364:	81a3      	strh	r3, [r4, #12]
 8003366:	4628      	mov	r0, r5
 8003368:	463b      	mov	r3, r7
 800336a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800336e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003372:	f000 b869 	b.w	8003448 <_write_r>

08003376 <__sseek>:
 8003376:	b510      	push	{r4, lr}
 8003378:	460c      	mov	r4, r1
 800337a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800337e:	f000 f9b1 	bl	80036e4 <_lseek_r>
 8003382:	1c43      	adds	r3, r0, #1
 8003384:	89a3      	ldrh	r3, [r4, #12]
 8003386:	bf15      	itete	ne
 8003388:	6560      	strne	r0, [r4, #84]	; 0x54
 800338a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800338e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003392:	81a3      	strheq	r3, [r4, #12]
 8003394:	bf18      	it	ne
 8003396:	81a3      	strhne	r3, [r4, #12]
 8003398:	bd10      	pop	{r4, pc}

0800339a <__sclose>:
 800339a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800339e:	f000 b8d3 	b.w	8003548 <_close_r>
	...

080033a4 <__swbuf_r>:
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a6:	460e      	mov	r6, r1
 80033a8:	4614      	mov	r4, r2
 80033aa:	4605      	mov	r5, r0
 80033ac:	b118      	cbz	r0, 80033b6 <__swbuf_r+0x12>
 80033ae:	6983      	ldr	r3, [r0, #24]
 80033b0:	b90b      	cbnz	r3, 80033b6 <__swbuf_r+0x12>
 80033b2:	f7ff fb81 	bl	8002ab8 <__sinit>
 80033b6:	4b21      	ldr	r3, [pc, #132]	; (800343c <__swbuf_r+0x98>)
 80033b8:	429c      	cmp	r4, r3
 80033ba:	d12b      	bne.n	8003414 <__swbuf_r+0x70>
 80033bc:	686c      	ldr	r4, [r5, #4]
 80033be:	69a3      	ldr	r3, [r4, #24]
 80033c0:	60a3      	str	r3, [r4, #8]
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	071a      	lsls	r2, r3, #28
 80033c6:	d52f      	bpl.n	8003428 <__swbuf_r+0x84>
 80033c8:	6923      	ldr	r3, [r4, #16]
 80033ca:	b36b      	cbz	r3, 8003428 <__swbuf_r+0x84>
 80033cc:	6923      	ldr	r3, [r4, #16]
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	b2f6      	uxtb	r6, r6
 80033d2:	1ac0      	subs	r0, r0, r3
 80033d4:	6963      	ldr	r3, [r4, #20]
 80033d6:	4637      	mov	r7, r6
 80033d8:	4283      	cmp	r3, r0
 80033da:	dc04      	bgt.n	80033e6 <__swbuf_r+0x42>
 80033dc:	4621      	mov	r1, r4
 80033de:	4628      	mov	r0, r5
 80033e0:	f000 f944 	bl	800366c <_fflush_r>
 80033e4:	bb30      	cbnz	r0, 8003434 <__swbuf_r+0x90>
 80033e6:	68a3      	ldr	r3, [r4, #8]
 80033e8:	3001      	adds	r0, #1
 80033ea:	3b01      	subs	r3, #1
 80033ec:	60a3      	str	r3, [r4, #8]
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	6022      	str	r2, [r4, #0]
 80033f4:	701e      	strb	r6, [r3, #0]
 80033f6:	6963      	ldr	r3, [r4, #20]
 80033f8:	4283      	cmp	r3, r0
 80033fa:	d004      	beq.n	8003406 <__swbuf_r+0x62>
 80033fc:	89a3      	ldrh	r3, [r4, #12]
 80033fe:	07db      	lsls	r3, r3, #31
 8003400:	d506      	bpl.n	8003410 <__swbuf_r+0x6c>
 8003402:	2e0a      	cmp	r6, #10
 8003404:	d104      	bne.n	8003410 <__swbuf_r+0x6c>
 8003406:	4621      	mov	r1, r4
 8003408:	4628      	mov	r0, r5
 800340a:	f000 f92f 	bl	800366c <_fflush_r>
 800340e:	b988      	cbnz	r0, 8003434 <__swbuf_r+0x90>
 8003410:	4638      	mov	r0, r7
 8003412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003414:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <__swbuf_r+0x9c>)
 8003416:	429c      	cmp	r4, r3
 8003418:	d101      	bne.n	800341e <__swbuf_r+0x7a>
 800341a:	68ac      	ldr	r4, [r5, #8]
 800341c:	e7cf      	b.n	80033be <__swbuf_r+0x1a>
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <__swbuf_r+0xa0>)
 8003420:	429c      	cmp	r4, r3
 8003422:	bf08      	it	eq
 8003424:	68ec      	ldreq	r4, [r5, #12]
 8003426:	e7ca      	b.n	80033be <__swbuf_r+0x1a>
 8003428:	4621      	mov	r1, r4
 800342a:	4628      	mov	r0, r5
 800342c:	f000 f81e 	bl	800346c <__swsetup_r>
 8003430:	2800      	cmp	r0, #0
 8003432:	d0cb      	beq.n	80033cc <__swbuf_r+0x28>
 8003434:	f04f 37ff 	mov.w	r7, #4294967295
 8003438:	e7ea      	b.n	8003410 <__swbuf_r+0x6c>
 800343a:	bf00      	nop
 800343c:	08003968 	.word	0x08003968
 8003440:	08003988 	.word	0x08003988
 8003444:	08003948 	.word	0x08003948

08003448 <_write_r>:
 8003448:	b538      	push	{r3, r4, r5, lr}
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	2200      	movs	r2, #0
 8003452:	4d05      	ldr	r5, [pc, #20]	; (8003468 <_write_r+0x20>)
 8003454:	602a      	str	r2, [r5, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	f7fd fa60 	bl	800091c <_write>
 800345c:	1c43      	adds	r3, r0, #1
 800345e:	d102      	bne.n	8003466 <_write_r+0x1e>
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	b103      	cbz	r3, 8003466 <_write_r+0x1e>
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	bd38      	pop	{r3, r4, r5, pc}
 8003468:	2000013c 	.word	0x2000013c

0800346c <__swsetup_r>:
 800346c:	4b32      	ldr	r3, [pc, #200]	; (8003538 <__swsetup_r+0xcc>)
 800346e:	b570      	push	{r4, r5, r6, lr}
 8003470:	681d      	ldr	r5, [r3, #0]
 8003472:	4606      	mov	r6, r0
 8003474:	460c      	mov	r4, r1
 8003476:	b125      	cbz	r5, 8003482 <__swsetup_r+0x16>
 8003478:	69ab      	ldr	r3, [r5, #24]
 800347a:	b913      	cbnz	r3, 8003482 <__swsetup_r+0x16>
 800347c:	4628      	mov	r0, r5
 800347e:	f7ff fb1b 	bl	8002ab8 <__sinit>
 8003482:	4b2e      	ldr	r3, [pc, #184]	; (800353c <__swsetup_r+0xd0>)
 8003484:	429c      	cmp	r4, r3
 8003486:	d10f      	bne.n	80034a8 <__swsetup_r+0x3c>
 8003488:	686c      	ldr	r4, [r5, #4]
 800348a:	89a3      	ldrh	r3, [r4, #12]
 800348c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003490:	0719      	lsls	r1, r3, #28
 8003492:	d42c      	bmi.n	80034ee <__swsetup_r+0x82>
 8003494:	06dd      	lsls	r5, r3, #27
 8003496:	d411      	bmi.n	80034bc <__swsetup_r+0x50>
 8003498:	2309      	movs	r3, #9
 800349a:	6033      	str	r3, [r6, #0]
 800349c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	81a3      	strh	r3, [r4, #12]
 80034a6:	e03e      	b.n	8003526 <__swsetup_r+0xba>
 80034a8:	4b25      	ldr	r3, [pc, #148]	; (8003540 <__swsetup_r+0xd4>)
 80034aa:	429c      	cmp	r4, r3
 80034ac:	d101      	bne.n	80034b2 <__swsetup_r+0x46>
 80034ae:	68ac      	ldr	r4, [r5, #8]
 80034b0:	e7eb      	b.n	800348a <__swsetup_r+0x1e>
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <__swsetup_r+0xd8>)
 80034b4:	429c      	cmp	r4, r3
 80034b6:	bf08      	it	eq
 80034b8:	68ec      	ldreq	r4, [r5, #12]
 80034ba:	e7e6      	b.n	800348a <__swsetup_r+0x1e>
 80034bc:	0758      	lsls	r0, r3, #29
 80034be:	d512      	bpl.n	80034e6 <__swsetup_r+0x7a>
 80034c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034c2:	b141      	cbz	r1, 80034d6 <__swsetup_r+0x6a>
 80034c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034c8:	4299      	cmp	r1, r3
 80034ca:	d002      	beq.n	80034d2 <__swsetup_r+0x66>
 80034cc:	4630      	mov	r0, r6
 80034ce:	f000 f99b 	bl	8003808 <_free_r>
 80034d2:	2300      	movs	r3, #0
 80034d4:	6363      	str	r3, [r4, #52]	; 0x34
 80034d6:	89a3      	ldrh	r3, [r4, #12]
 80034d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034dc:	81a3      	strh	r3, [r4, #12]
 80034de:	2300      	movs	r3, #0
 80034e0:	6063      	str	r3, [r4, #4]
 80034e2:	6923      	ldr	r3, [r4, #16]
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	f043 0308 	orr.w	r3, r3, #8
 80034ec:	81a3      	strh	r3, [r4, #12]
 80034ee:	6923      	ldr	r3, [r4, #16]
 80034f0:	b94b      	cbnz	r3, 8003506 <__swsetup_r+0x9a>
 80034f2:	89a3      	ldrh	r3, [r4, #12]
 80034f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fc:	d003      	beq.n	8003506 <__swsetup_r+0x9a>
 80034fe:	4621      	mov	r1, r4
 8003500:	4630      	mov	r0, r6
 8003502:	f000 f927 	bl	8003754 <__smakebuf_r>
 8003506:	89a0      	ldrh	r0, [r4, #12]
 8003508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800350c:	f010 0301 	ands.w	r3, r0, #1
 8003510:	d00a      	beq.n	8003528 <__swsetup_r+0xbc>
 8003512:	2300      	movs	r3, #0
 8003514:	60a3      	str	r3, [r4, #8]
 8003516:	6963      	ldr	r3, [r4, #20]
 8003518:	425b      	negs	r3, r3
 800351a:	61a3      	str	r3, [r4, #24]
 800351c:	6923      	ldr	r3, [r4, #16]
 800351e:	b943      	cbnz	r3, 8003532 <__swsetup_r+0xc6>
 8003520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003524:	d1ba      	bne.n	800349c <__swsetup_r+0x30>
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	0781      	lsls	r1, r0, #30
 800352a:	bf58      	it	pl
 800352c:	6963      	ldrpl	r3, [r4, #20]
 800352e:	60a3      	str	r3, [r4, #8]
 8003530:	e7f4      	b.n	800351c <__swsetup_r+0xb0>
 8003532:	2000      	movs	r0, #0
 8003534:	e7f7      	b.n	8003526 <__swsetup_r+0xba>
 8003536:	bf00      	nop
 8003538:	2000000c 	.word	0x2000000c
 800353c:	08003968 	.word	0x08003968
 8003540:	08003988 	.word	0x08003988
 8003544:	08003948 	.word	0x08003948

08003548 <_close_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	2300      	movs	r3, #0
 800354c:	4d05      	ldr	r5, [pc, #20]	; (8003564 <_close_r+0x1c>)
 800354e:	4604      	mov	r4, r0
 8003550:	4608      	mov	r0, r1
 8003552:	602b      	str	r3, [r5, #0]
 8003554:	f7fd f9f8 	bl	8000948 <_close>
 8003558:	1c43      	adds	r3, r0, #1
 800355a:	d102      	bne.n	8003562 <_close_r+0x1a>
 800355c:	682b      	ldr	r3, [r5, #0]
 800355e:	b103      	cbz	r3, 8003562 <_close_r+0x1a>
 8003560:	6023      	str	r3, [r4, #0]
 8003562:	bd38      	pop	{r3, r4, r5, pc}
 8003564:	2000013c 	.word	0x2000013c

08003568 <__sflush_r>:
 8003568:	898a      	ldrh	r2, [r1, #12]
 800356a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356c:	4605      	mov	r5, r0
 800356e:	0710      	lsls	r0, r2, #28
 8003570:	460c      	mov	r4, r1
 8003572:	d457      	bmi.n	8003624 <__sflush_r+0xbc>
 8003574:	684b      	ldr	r3, [r1, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	dc04      	bgt.n	8003584 <__sflush_r+0x1c>
 800357a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	dc01      	bgt.n	8003584 <__sflush_r+0x1c>
 8003580:	2000      	movs	r0, #0
 8003582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003586:	2e00      	cmp	r6, #0
 8003588:	d0fa      	beq.n	8003580 <__sflush_r+0x18>
 800358a:	2300      	movs	r3, #0
 800358c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003590:	682f      	ldr	r7, [r5, #0]
 8003592:	602b      	str	r3, [r5, #0]
 8003594:	d032      	beq.n	80035fc <__sflush_r+0x94>
 8003596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	075a      	lsls	r2, r3, #29
 800359c:	d505      	bpl.n	80035aa <__sflush_r+0x42>
 800359e:	6863      	ldr	r3, [r4, #4]
 80035a0:	1ac0      	subs	r0, r0, r3
 80035a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035a4:	b10b      	cbz	r3, 80035aa <__sflush_r+0x42>
 80035a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a8:	1ac0      	subs	r0, r0, r3
 80035aa:	2300      	movs	r3, #0
 80035ac:	4602      	mov	r2, r0
 80035ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035b0:	4628      	mov	r0, r5
 80035b2:	6a21      	ldr	r1, [r4, #32]
 80035b4:	47b0      	blx	r6
 80035b6:	1c43      	adds	r3, r0, #1
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	d106      	bne.n	80035ca <__sflush_r+0x62>
 80035bc:	6829      	ldr	r1, [r5, #0]
 80035be:	291d      	cmp	r1, #29
 80035c0:	d82c      	bhi.n	800361c <__sflush_r+0xb4>
 80035c2:	4a29      	ldr	r2, [pc, #164]	; (8003668 <__sflush_r+0x100>)
 80035c4:	40ca      	lsrs	r2, r1
 80035c6:	07d6      	lsls	r6, r2, #31
 80035c8:	d528      	bpl.n	800361c <__sflush_r+0xb4>
 80035ca:	2200      	movs	r2, #0
 80035cc:	6062      	str	r2, [r4, #4]
 80035ce:	6922      	ldr	r2, [r4, #16]
 80035d0:	04d9      	lsls	r1, r3, #19
 80035d2:	6022      	str	r2, [r4, #0]
 80035d4:	d504      	bpl.n	80035e0 <__sflush_r+0x78>
 80035d6:	1c42      	adds	r2, r0, #1
 80035d8:	d101      	bne.n	80035de <__sflush_r+0x76>
 80035da:	682b      	ldr	r3, [r5, #0]
 80035dc:	b903      	cbnz	r3, 80035e0 <__sflush_r+0x78>
 80035de:	6560      	str	r0, [r4, #84]	; 0x54
 80035e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035e2:	602f      	str	r7, [r5, #0]
 80035e4:	2900      	cmp	r1, #0
 80035e6:	d0cb      	beq.n	8003580 <__sflush_r+0x18>
 80035e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035ec:	4299      	cmp	r1, r3
 80035ee:	d002      	beq.n	80035f6 <__sflush_r+0x8e>
 80035f0:	4628      	mov	r0, r5
 80035f2:	f000 f909 	bl	8003808 <_free_r>
 80035f6:	2000      	movs	r0, #0
 80035f8:	6360      	str	r0, [r4, #52]	; 0x34
 80035fa:	e7c2      	b.n	8003582 <__sflush_r+0x1a>
 80035fc:	6a21      	ldr	r1, [r4, #32]
 80035fe:	2301      	movs	r3, #1
 8003600:	4628      	mov	r0, r5
 8003602:	47b0      	blx	r6
 8003604:	1c41      	adds	r1, r0, #1
 8003606:	d1c7      	bne.n	8003598 <__sflush_r+0x30>
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0c4      	beq.n	8003598 <__sflush_r+0x30>
 800360e:	2b1d      	cmp	r3, #29
 8003610:	d001      	beq.n	8003616 <__sflush_r+0xae>
 8003612:	2b16      	cmp	r3, #22
 8003614:	d101      	bne.n	800361a <__sflush_r+0xb2>
 8003616:	602f      	str	r7, [r5, #0]
 8003618:	e7b2      	b.n	8003580 <__sflush_r+0x18>
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003620:	81a3      	strh	r3, [r4, #12]
 8003622:	e7ae      	b.n	8003582 <__sflush_r+0x1a>
 8003624:	690f      	ldr	r7, [r1, #16]
 8003626:	2f00      	cmp	r7, #0
 8003628:	d0aa      	beq.n	8003580 <__sflush_r+0x18>
 800362a:	0793      	lsls	r3, r2, #30
 800362c:	bf18      	it	ne
 800362e:	2300      	movne	r3, #0
 8003630:	680e      	ldr	r6, [r1, #0]
 8003632:	bf08      	it	eq
 8003634:	694b      	ldreq	r3, [r1, #20]
 8003636:	1bf6      	subs	r6, r6, r7
 8003638:	600f      	str	r7, [r1, #0]
 800363a:	608b      	str	r3, [r1, #8]
 800363c:	2e00      	cmp	r6, #0
 800363e:	dd9f      	ble.n	8003580 <__sflush_r+0x18>
 8003640:	4633      	mov	r3, r6
 8003642:	463a      	mov	r2, r7
 8003644:	4628      	mov	r0, r5
 8003646:	6a21      	ldr	r1, [r4, #32]
 8003648:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800364c:	47e0      	blx	ip
 800364e:	2800      	cmp	r0, #0
 8003650:	dc06      	bgt.n	8003660 <__sflush_r+0xf8>
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	f04f 30ff 	mov.w	r0, #4294967295
 8003658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800365c:	81a3      	strh	r3, [r4, #12]
 800365e:	e790      	b.n	8003582 <__sflush_r+0x1a>
 8003660:	4407      	add	r7, r0
 8003662:	1a36      	subs	r6, r6, r0
 8003664:	e7ea      	b.n	800363c <__sflush_r+0xd4>
 8003666:	bf00      	nop
 8003668:	20400001 	.word	0x20400001

0800366c <_fflush_r>:
 800366c:	b538      	push	{r3, r4, r5, lr}
 800366e:	690b      	ldr	r3, [r1, #16]
 8003670:	4605      	mov	r5, r0
 8003672:	460c      	mov	r4, r1
 8003674:	b913      	cbnz	r3, 800367c <_fflush_r+0x10>
 8003676:	2500      	movs	r5, #0
 8003678:	4628      	mov	r0, r5
 800367a:	bd38      	pop	{r3, r4, r5, pc}
 800367c:	b118      	cbz	r0, 8003686 <_fflush_r+0x1a>
 800367e:	6983      	ldr	r3, [r0, #24]
 8003680:	b90b      	cbnz	r3, 8003686 <_fflush_r+0x1a>
 8003682:	f7ff fa19 	bl	8002ab8 <__sinit>
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <_fflush_r+0x6c>)
 8003688:	429c      	cmp	r4, r3
 800368a:	d11b      	bne.n	80036c4 <_fflush_r+0x58>
 800368c:	686c      	ldr	r4, [r5, #4]
 800368e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ef      	beq.n	8003676 <_fflush_r+0xa>
 8003696:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003698:	07d0      	lsls	r0, r2, #31
 800369a:	d404      	bmi.n	80036a6 <_fflush_r+0x3a>
 800369c:	0599      	lsls	r1, r3, #22
 800369e:	d402      	bmi.n	80036a6 <_fflush_r+0x3a>
 80036a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036a2:	f7ff faa7 	bl	8002bf4 <__retarget_lock_acquire_recursive>
 80036a6:	4628      	mov	r0, r5
 80036a8:	4621      	mov	r1, r4
 80036aa:	f7ff ff5d 	bl	8003568 <__sflush_r>
 80036ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036b0:	4605      	mov	r5, r0
 80036b2:	07da      	lsls	r2, r3, #31
 80036b4:	d4e0      	bmi.n	8003678 <_fflush_r+0xc>
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	059b      	lsls	r3, r3, #22
 80036ba:	d4dd      	bmi.n	8003678 <_fflush_r+0xc>
 80036bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036be:	f7ff fa9a 	bl	8002bf6 <__retarget_lock_release_recursive>
 80036c2:	e7d9      	b.n	8003678 <_fflush_r+0xc>
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <_fflush_r+0x70>)
 80036c6:	429c      	cmp	r4, r3
 80036c8:	d101      	bne.n	80036ce <_fflush_r+0x62>
 80036ca:	68ac      	ldr	r4, [r5, #8]
 80036cc:	e7df      	b.n	800368e <_fflush_r+0x22>
 80036ce:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <_fflush_r+0x74>)
 80036d0:	429c      	cmp	r4, r3
 80036d2:	bf08      	it	eq
 80036d4:	68ec      	ldreq	r4, [r5, #12]
 80036d6:	e7da      	b.n	800368e <_fflush_r+0x22>
 80036d8:	08003968 	.word	0x08003968
 80036dc:	08003988 	.word	0x08003988
 80036e0:	08003948 	.word	0x08003948

080036e4 <_lseek_r>:
 80036e4:	b538      	push	{r3, r4, r5, lr}
 80036e6:	4604      	mov	r4, r0
 80036e8:	4608      	mov	r0, r1
 80036ea:	4611      	mov	r1, r2
 80036ec:	2200      	movs	r2, #0
 80036ee:	4d05      	ldr	r5, [pc, #20]	; (8003704 <_lseek_r+0x20>)
 80036f0:	602a      	str	r2, [r5, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f7fd f94c 	bl	8000990 <_lseek>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d102      	bne.n	8003702 <_lseek_r+0x1e>
 80036fc:	682b      	ldr	r3, [r5, #0]
 80036fe:	b103      	cbz	r3, 8003702 <_lseek_r+0x1e>
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	bd38      	pop	{r3, r4, r5, pc}
 8003704:	2000013c 	.word	0x2000013c

08003708 <__swhatbuf_r>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	460e      	mov	r6, r1
 800370c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003710:	4614      	mov	r4, r2
 8003712:	2900      	cmp	r1, #0
 8003714:	461d      	mov	r5, r3
 8003716:	b096      	sub	sp, #88	; 0x58
 8003718:	da08      	bge.n	800372c <__swhatbuf_r+0x24>
 800371a:	2200      	movs	r2, #0
 800371c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003720:	602a      	str	r2, [r5, #0]
 8003722:	061a      	lsls	r2, r3, #24
 8003724:	d410      	bmi.n	8003748 <__swhatbuf_r+0x40>
 8003726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800372a:	e00e      	b.n	800374a <__swhatbuf_r+0x42>
 800372c:	466a      	mov	r2, sp
 800372e:	f000 f8c5 	bl	80038bc <_fstat_r>
 8003732:	2800      	cmp	r0, #0
 8003734:	dbf1      	blt.n	800371a <__swhatbuf_r+0x12>
 8003736:	9a01      	ldr	r2, [sp, #4]
 8003738:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800373c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003740:	425a      	negs	r2, r3
 8003742:	415a      	adcs	r2, r3
 8003744:	602a      	str	r2, [r5, #0]
 8003746:	e7ee      	b.n	8003726 <__swhatbuf_r+0x1e>
 8003748:	2340      	movs	r3, #64	; 0x40
 800374a:	2000      	movs	r0, #0
 800374c:	6023      	str	r3, [r4, #0]
 800374e:	b016      	add	sp, #88	; 0x58
 8003750:	bd70      	pop	{r4, r5, r6, pc}
	...

08003754 <__smakebuf_r>:
 8003754:	898b      	ldrh	r3, [r1, #12]
 8003756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003758:	079d      	lsls	r5, r3, #30
 800375a:	4606      	mov	r6, r0
 800375c:	460c      	mov	r4, r1
 800375e:	d507      	bpl.n	8003770 <__smakebuf_r+0x1c>
 8003760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	6123      	str	r3, [r4, #16]
 8003768:	2301      	movs	r3, #1
 800376a:	6163      	str	r3, [r4, #20]
 800376c:	b002      	add	sp, #8
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	466a      	mov	r2, sp
 8003772:	ab01      	add	r3, sp, #4
 8003774:	f7ff ffc8 	bl	8003708 <__swhatbuf_r>
 8003778:	9900      	ldr	r1, [sp, #0]
 800377a:	4605      	mov	r5, r0
 800377c:	4630      	mov	r0, r6
 800377e:	f7ff fa5b 	bl	8002c38 <_malloc_r>
 8003782:	b948      	cbnz	r0, 8003798 <__smakebuf_r+0x44>
 8003784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003788:	059a      	lsls	r2, r3, #22
 800378a:	d4ef      	bmi.n	800376c <__smakebuf_r+0x18>
 800378c:	f023 0303 	bic.w	r3, r3, #3
 8003790:	f043 0302 	orr.w	r3, r3, #2
 8003794:	81a3      	strh	r3, [r4, #12]
 8003796:	e7e3      	b.n	8003760 <__smakebuf_r+0xc>
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <__smakebuf_r+0x7c>)
 800379a:	62b3      	str	r3, [r6, #40]	; 0x28
 800379c:	89a3      	ldrh	r3, [r4, #12]
 800379e:	6020      	str	r0, [r4, #0]
 80037a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a4:	81a3      	strh	r3, [r4, #12]
 80037a6:	9b00      	ldr	r3, [sp, #0]
 80037a8:	6120      	str	r0, [r4, #16]
 80037aa:	6163      	str	r3, [r4, #20]
 80037ac:	9b01      	ldr	r3, [sp, #4]
 80037ae:	b15b      	cbz	r3, 80037c8 <__smakebuf_r+0x74>
 80037b0:	4630      	mov	r0, r6
 80037b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037b6:	f000 f893 	bl	80038e0 <_isatty_r>
 80037ba:	b128      	cbz	r0, 80037c8 <__smakebuf_r+0x74>
 80037bc:	89a3      	ldrh	r3, [r4, #12]
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	81a3      	strh	r3, [r4, #12]
 80037c8:	89a0      	ldrh	r0, [r4, #12]
 80037ca:	4305      	orrs	r5, r0
 80037cc:	81a5      	strh	r5, [r4, #12]
 80037ce:	e7cd      	b.n	800376c <__smakebuf_r+0x18>
 80037d0:	08002a51 	.word	0x08002a51

080037d4 <memchr>:
 80037d4:	4603      	mov	r3, r0
 80037d6:	b510      	push	{r4, lr}
 80037d8:	b2c9      	uxtb	r1, r1
 80037da:	4402      	add	r2, r0
 80037dc:	4293      	cmp	r3, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	d101      	bne.n	80037e6 <memchr+0x12>
 80037e2:	2000      	movs	r0, #0
 80037e4:	e003      	b.n	80037ee <memchr+0x1a>
 80037e6:	7804      	ldrb	r4, [r0, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	428c      	cmp	r4, r1
 80037ec:	d1f6      	bne.n	80037dc <memchr+0x8>
 80037ee:	bd10      	pop	{r4, pc}

080037f0 <__malloc_lock>:
 80037f0:	4801      	ldr	r0, [pc, #4]	; (80037f8 <__malloc_lock+0x8>)
 80037f2:	f7ff b9ff 	b.w	8002bf4 <__retarget_lock_acquire_recursive>
 80037f6:	bf00      	nop
 80037f8:	20000130 	.word	0x20000130

080037fc <__malloc_unlock>:
 80037fc:	4801      	ldr	r0, [pc, #4]	; (8003804 <__malloc_unlock+0x8>)
 80037fe:	f7ff b9fa 	b.w	8002bf6 <__retarget_lock_release_recursive>
 8003802:	bf00      	nop
 8003804:	20000130 	.word	0x20000130

08003808 <_free_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4605      	mov	r5, r0
 800380c:	2900      	cmp	r1, #0
 800380e:	d040      	beq.n	8003892 <_free_r+0x8a>
 8003810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003814:	1f0c      	subs	r4, r1, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	bfb8      	it	lt
 800381a:	18e4      	addlt	r4, r4, r3
 800381c:	f7ff ffe8 	bl	80037f0 <__malloc_lock>
 8003820:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <_free_r+0x8c>)
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	b933      	cbnz	r3, 8003834 <_free_r+0x2c>
 8003826:	6063      	str	r3, [r4, #4]
 8003828:	6014      	str	r4, [r2, #0]
 800382a:	4628      	mov	r0, r5
 800382c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003830:	f7ff bfe4 	b.w	80037fc <__malloc_unlock>
 8003834:	42a3      	cmp	r3, r4
 8003836:	d908      	bls.n	800384a <_free_r+0x42>
 8003838:	6820      	ldr	r0, [r4, #0]
 800383a:	1821      	adds	r1, r4, r0
 800383c:	428b      	cmp	r3, r1
 800383e:	bf01      	itttt	eq
 8003840:	6819      	ldreq	r1, [r3, #0]
 8003842:	685b      	ldreq	r3, [r3, #4]
 8003844:	1809      	addeq	r1, r1, r0
 8003846:	6021      	streq	r1, [r4, #0]
 8003848:	e7ed      	b.n	8003826 <_free_r+0x1e>
 800384a:	461a      	mov	r2, r3
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	b10b      	cbz	r3, 8003854 <_free_r+0x4c>
 8003850:	42a3      	cmp	r3, r4
 8003852:	d9fa      	bls.n	800384a <_free_r+0x42>
 8003854:	6811      	ldr	r1, [r2, #0]
 8003856:	1850      	adds	r0, r2, r1
 8003858:	42a0      	cmp	r0, r4
 800385a:	d10b      	bne.n	8003874 <_free_r+0x6c>
 800385c:	6820      	ldr	r0, [r4, #0]
 800385e:	4401      	add	r1, r0
 8003860:	1850      	adds	r0, r2, r1
 8003862:	4283      	cmp	r3, r0
 8003864:	6011      	str	r1, [r2, #0]
 8003866:	d1e0      	bne.n	800382a <_free_r+0x22>
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4401      	add	r1, r0
 800386e:	6011      	str	r1, [r2, #0]
 8003870:	6053      	str	r3, [r2, #4]
 8003872:	e7da      	b.n	800382a <_free_r+0x22>
 8003874:	d902      	bls.n	800387c <_free_r+0x74>
 8003876:	230c      	movs	r3, #12
 8003878:	602b      	str	r3, [r5, #0]
 800387a:	e7d6      	b.n	800382a <_free_r+0x22>
 800387c:	6820      	ldr	r0, [r4, #0]
 800387e:	1821      	adds	r1, r4, r0
 8003880:	428b      	cmp	r3, r1
 8003882:	bf01      	itttt	eq
 8003884:	6819      	ldreq	r1, [r3, #0]
 8003886:	685b      	ldreq	r3, [r3, #4]
 8003888:	1809      	addeq	r1, r1, r0
 800388a:	6021      	streq	r1, [r4, #0]
 800388c:	6063      	str	r3, [r4, #4]
 800388e:	6054      	str	r4, [r2, #4]
 8003890:	e7cb      	b.n	800382a <_free_r+0x22>
 8003892:	bd38      	pop	{r3, r4, r5, pc}
 8003894:	20000134 	.word	0x20000134

08003898 <_read_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4604      	mov	r4, r0
 800389c:	4608      	mov	r0, r1
 800389e:	4611      	mov	r1, r2
 80038a0:	2200      	movs	r2, #0
 80038a2:	4d05      	ldr	r5, [pc, #20]	; (80038b8 <_read_r+0x20>)
 80038a4:	602a      	str	r2, [r5, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f7fd f81a 	bl	80008e0 <_read>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d102      	bne.n	80038b6 <_read_r+0x1e>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	b103      	cbz	r3, 80038b6 <_read_r+0x1e>
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	bd38      	pop	{r3, r4, r5, pc}
 80038b8:	2000013c 	.word	0x2000013c

080038bc <_fstat_r>:
 80038bc:	b538      	push	{r3, r4, r5, lr}
 80038be:	2300      	movs	r3, #0
 80038c0:	4d06      	ldr	r5, [pc, #24]	; (80038dc <_fstat_r+0x20>)
 80038c2:	4604      	mov	r4, r0
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	602b      	str	r3, [r5, #0]
 80038ca:	f7fd f848 	bl	800095e <_fstat>
 80038ce:	1c43      	adds	r3, r0, #1
 80038d0:	d102      	bne.n	80038d8 <_fstat_r+0x1c>
 80038d2:	682b      	ldr	r3, [r5, #0]
 80038d4:	b103      	cbz	r3, 80038d8 <_fstat_r+0x1c>
 80038d6:	6023      	str	r3, [r4, #0]
 80038d8:	bd38      	pop	{r3, r4, r5, pc}
 80038da:	bf00      	nop
 80038dc:	2000013c 	.word	0x2000013c

080038e0 <_isatty_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	2300      	movs	r3, #0
 80038e4:	4d05      	ldr	r5, [pc, #20]	; (80038fc <_isatty_r+0x1c>)
 80038e6:	4604      	mov	r4, r0
 80038e8:	4608      	mov	r0, r1
 80038ea:	602b      	str	r3, [r5, #0]
 80038ec:	f7fd f846 	bl	800097c <_isatty>
 80038f0:	1c43      	adds	r3, r0, #1
 80038f2:	d102      	bne.n	80038fa <_isatty_r+0x1a>
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	b103      	cbz	r3, 80038fa <_isatty_r+0x1a>
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	bd38      	pop	{r3, r4, r5, pc}
 80038fc:	2000013c 	.word	0x2000013c

08003900 <_init>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	bf00      	nop
 8003904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003906:	bc08      	pop	{r3}
 8003908:	469e      	mov	lr, r3
 800390a:	4770      	bx	lr

0800390c <_fini>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr
