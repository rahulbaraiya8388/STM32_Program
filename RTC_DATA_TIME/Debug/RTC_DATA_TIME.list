
RTC_DATA_TIME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003004  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031c8  080031c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080031c8  080031c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031d0  080031d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031d4  080031d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000070  08003248  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003248  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006dd4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000169b  00000000  00000000  00026e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  00028508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  00028c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c1f  00000000  00000000  00029350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008728  00000000  00000000  0003ef6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000877b0  00000000  00000000  00047697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cee47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002160  00000000  00000000  000cee98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08003128 	.word	0x08003128

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08003128 	.word	0x08003128

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f000 fa80 	bl	800098e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f84f 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f000 f935 	bl	8000700 <MX_GPIO_Init>
  MX_RTC_Init();
 8000496:	f000 f8af 	bl	80005f8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800049a:	f000 f907 	bl	80006ac <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800049e:	2200      	movs	r2, #0
 80004a0:	491b      	ldr	r1, [pc, #108]	; (8000510 <main+0x8c>)
 80004a2:	481c      	ldr	r0, [pc, #112]	; (8000514 <main+0x90>)
 80004a4:	f001 fdad 	bl	8002002 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80004a8:	2200      	movs	r2, #0
 80004aa:	491b      	ldr	r1, [pc, #108]	; (8000518 <main+0x94>)
 80004ac:	4819      	ldr	r0, [pc, #100]	; (8000514 <main+0x90>)
 80004ae:	f001 fea3 	bl	80021f8 <HAL_RTC_GetDate>


	  sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 80004b2:	4b19      	ldr	r3, [pc, #100]	; (8000518 <main+0x94>)
 80004b4:	789b      	ldrb	r3, [r3, #2]
 80004b6:	461a      	mov	r2, r3
 80004b8:	4b17      	ldr	r3, [pc, #92]	; (8000518 <main+0x94>)
 80004ba:	785b      	ldrb	r3, [r3, #1]
 80004bc:	4619      	mov	r1, r3
 80004be:	4b16      	ldr	r3, [pc, #88]	; (8000518 <main+0x94>)
 80004c0:	78db      	ldrb	r3, [r3, #3]
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	460b      	mov	r3, r1
 80004c6:	4915      	ldr	r1, [pc, #84]	; (800051c <main+0x98>)
 80004c8:	4815      	ldr	r0, [pc, #84]	; (8000520 <main+0x9c>)
 80004ca:	f002 f9b3 	bl	8002834 <siprintf>
	  sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <main+0x8c>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	461a      	mov	r2, r3
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <main+0x8c>)
 80004d6:	785b      	ldrb	r3, [r3, #1]
 80004d8:	4619      	mov	r1, r3
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <main+0x8c>)
 80004dc:	789b      	ldrb	r3, [r3, #2]
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	460b      	mov	r3, r1
 80004e2:	4910      	ldr	r1, [pc, #64]	; (8000524 <main+0xa0>)
 80004e4:	4810      	ldr	r0, [pc, #64]	; (8000528 <main+0xa4>)
 80004e6:	f002 f9a5 	bl	8002834 <siprintf>

	  HAL_UART_Transmit(&huart2,date, sizeof(date), 300);
 80004ea:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80004ee:	221e      	movs	r2, #30
 80004f0:	490b      	ldr	r1, [pc, #44]	; (8000520 <main+0x9c>)
 80004f2:	480e      	ldr	r0, [pc, #56]	; (800052c <main+0xa8>)
 80004f4:	f001 ffab 	bl	800244e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2,time, sizeof(time), 300);
 80004f8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80004fc:	221e      	movs	r2, #30
 80004fe:	490a      	ldr	r1, [pc, #40]	; (8000528 <main+0xa4>)
 8000500:	480a      	ldr	r0, [pc, #40]	; (800052c <main+0xa8>)
 8000502:	f001 ffa4 	bl	800244e <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050a:	f000 faaf 	bl	8000a6c <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800050e:	e7c6      	b.n	800049e <main+0x1a>
 8000510:	200000cc 	.word	0x200000cc
 8000514:	200000e4 	.word	0x200000e4
 8000518:	200000e0 	.word	0x200000e0
 800051c:	08003140 	.word	0x08003140
 8000520:	200000ac 	.word	0x200000ac
 8000524:	08003158 	.word	0x08003158
 8000528:	2000008c 	.word	0x2000008c
 800052c:	20000104 	.word	0x20000104

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053a:	2234      	movs	r2, #52	; 0x34
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 f970 	bl	8002824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055e:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <SystemClock_Config+0xc4>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000566:	4a23      	ldr	r2, [pc, #140]	; (80005f4 <SystemClock_Config+0xc4>)
 8000568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800056c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800056e:	2306      	movs	r3, #6
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	2301      	movs	r3, #1
 8000578:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	2310      	movs	r3, #16
 800057c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000582:	2300      	movs	r3, #0
 8000584:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000586:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800058a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800058c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000590:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fcee 	bl	8000f78 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80005a2:	f000 f8db 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2303      	movs	r3, #3
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	2101      	movs	r1, #1
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 f809 	bl	80015d8 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005cc:	f000 f8c6 	bl	800075c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005d0:	2301      	movs	r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fac1 	bl	8001b64 <HAL_RCCEx_PeriphCLKConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80005e8:	f000 f8b8 	bl	800075c <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3758      	adds	r7, #88	; 0x58
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800060c:	2300      	movs	r3, #0
 800060e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <MX_RTC_Init+0xac>)
 8000612:	4a25      	ldr	r2, [pc, #148]	; (80006a8 <MX_RTC_Init+0xb0>)
 8000614:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000616:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <MX_RTC_Init+0xac>)
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_RTC_Init+0xac>)
 800061e:	227f      	movs	r2, #127	; 0x7f
 8000620:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_RTC_Init+0xac>)
 8000624:	22ff      	movs	r2, #255	; 0xff
 8000626:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_RTC_Init+0xac>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_RTC_Init+0xac>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_RTC_Init+0xac>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800063a:	481a      	ldr	r0, [pc, #104]	; (80006a4 <MX_RTC_Init+0xac>)
 800063c:	f001 fb9c 	bl	8001d78 <HAL_RTC_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000646:	f000 f889 	bl	800075c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 800064a:	2310      	movs	r3, #16
 800064c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 800064e:	2320      	movs	r3, #32
 8000650:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8000652:	2330      	movs	r3, #48	; 0x30
 8000654:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2201      	movs	r2, #1
 8000662:	4619      	mov	r1, r3
 8000664:	480f      	ldr	r0, [pc, #60]	; (80006a4 <MX_RTC_Init+0xac>)
 8000666:	f001 fc18 	bl	8001e9a <HAL_RTC_SetTime>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000670:	f000 f874 	bl	800075c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000674:	2305      	movs	r3, #5
 8000676:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000678:	2301      	movs	r3, #1
 800067a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x3;
 800067c:	2303      	movs	r3, #3
 800067e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000680:	2323      	movs	r3, #35	; 0x23
 8000682:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	2201      	movs	r2, #1
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_RTC_Init+0xac>)
 800068c:	f001 fd16 	bl	80020bc <HAL_RTC_SetDate>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000696:	f000 f861 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000e4 	.word	0x200000e4
 80006a8:	40002800 	.word	0x40002800

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f001 fe66 	bl	80023b4 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f835 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000104 	.word	0x20000104
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_GPIO_Init+0x58>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MX_GPIO_Init+0x58>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	61d3      	str	r3, [r2, #28]
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_GPIO_Init+0x58>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_GPIO_Init+0x58>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <MX_GPIO_Init+0x58>)
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_GPIO_Init+0x58>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_GPIO_Init+0x58>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a07      	ldr	r2, [pc, #28]	; (8000758 <MX_GPIO_Init+0x58>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <MX_GPIO_Init+0x58>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40023800 	.word	0x40023800

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_MspInit+0x5c>)
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <HAL_MspInit+0x5c>)
 8000774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000778:	6253      	str	r3, [r2, #36]	; 0x24
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_MspInit+0x5c>)
 800077c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x5c>)
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_MspInit+0x5c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6213      	str	r3, [r2, #32]
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x5c>)
 8000794:	6a1b      	ldr	r3, [r3, #32]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_MspInit+0x5c>)
 80007a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_MspInit+0x5c>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6253      	str	r3, [r2, #36]	; 0x24
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x5c>)
 80007ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007b6:	2007      	movs	r0, #7
 80007b8:	f000 fa2a 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800

080007c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a05      	ldr	r2, [pc, #20]	; (80007ec <HAL_RTC_MspInit+0x24>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d102      	bne.n	80007e0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_RTC_MspInit+0x28>)
 80007dc:	2201      	movs	r2, #1
 80007de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40002800 	.word	0x40002800
 80007f0:	424706d8 	.word	0x424706d8

080007f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a17      	ldr	r2, [pc, #92]	; (8000870 <HAL_UART_MspInit+0x7c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d127      	bne.n	8000866 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <HAL_UART_MspInit+0x80>)
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	6253      	str	r3, [r2, #36]	; 0x24
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_UART_MspInit+0x80>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000846:	230c      	movs	r3, #12
 8000848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000856:	2307      	movs	r3, #7
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	; (8000878 <HAL_UART_MspInit+0x84>)
 8000862:	f000 fa09 	bl	8000c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40004400 	.word	0x40004400
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <MemManage_Handler+0x4>

0800088e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler+0x4>

0800089a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c2:	f000 f8b7 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d4:	4a14      	ldr	r2, [pc, #80]	; (8000928 <_sbrk+0x5c>)
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <_sbrk+0x60>)
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <_sbrk+0x64>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <_sbrk+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d207      	bcs.n	800090c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008fc:	f001 ff68 	bl	80027d0 <__errno>
 8000900:	4603      	mov	r3, r0
 8000902:	220c      	movs	r2, #12
 8000904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	e009      	b.n	8000920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <_sbrk+0x64>)
 800091c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20008000 	.word	0x20008000
 800092c:	00000400 	.word	0x00000400
 8000930:	20000148 	.word	0x20000148
 8000934:	20000160 	.word	0x20000160

08000938 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000946:	490d      	ldr	r1, [pc, #52]	; (800097c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000948:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800095c:	4c0a      	ldr	r4, [pc, #40]	; (8000988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096a:	f7ff ffe5 	bl	8000938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096e:	f001 ff35 	bl	80027dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000972:	f7ff fd87 	bl	8000484 <main>
  bx lr
 8000976:	4770      	bx	lr
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000980:	080031d8 	.word	0x080031d8
  ldr r2, =_sbss
 8000984:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000988:	20000160 	.word	0x20000160

0800098c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_IRQHandler>

0800098e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f939 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f80e 	bl	80009c0 <HAL_InitTick>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	71fb      	strb	r3, [r7, #7]
 80009ae:	e001      	b.n	80009b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009b0:	f7ff feda 	bl	8000768 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b4:	79fb      	ldrb	r3, [r7, #7]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_InitTick+0x68>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d022      	beq.n	8000a1a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_InitTick+0x6c>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_InitTick+0x68>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80009e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f938 	bl	8000c5e <HAL_SYSTICK_Config>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d10f      	bne.n	8000a14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	d809      	bhi.n	8000a0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fa:	2200      	movs	r2, #0
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000a02:	f000 f910 	bl	8000c26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_InitTick+0x70>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e007      	b.n	8000a1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e004      	b.n	8000a1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e001      	b.n	8000a1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x1c>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x20>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a03      	ldr	r2, [pc, #12]	; (8000a50 <HAL_IncTick+0x1c>)
 8000a44:	6013      	str	r3, [r2, #0]
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000014c 	.word	0x2000014c
 8000a54:	20000008 	.word	0x20000008

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <HAL_GetTick+0x10>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	2000014c 	.word	0x2000014c

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff fff0 	bl	8000a58 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d004      	beq.n	8000a90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_Delay+0x40>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a90:	bf00      	nop
 8000a92:	f7ff ffe1 	bl	8000a58 <HAL_GetTick>
 8000a96:	4602      	mov	r2, r0
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d8f7      	bhi.n	8000a92 <HAL_Delay+0x26>
  {
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000008 	.word	0x20000008

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff90 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff49 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff5e 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff90 	bl	8000b68 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5f 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffb0 	bl	8000bcc <SysTick_Config>
 8000c6c:	4603      	mov	r3, r0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b087      	sub	sp, #28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c8e:	e154      	b.n	8000f3a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 8146 	beq.w	8000f34 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d005      	beq.n	8000cc0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d130      	bne.n	8000d22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	f003 0201 	and.w	r2, r3, #1
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d017      	beq.n	8000d5e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	2203      	movs	r2, #3
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d123      	bne.n	8000db2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	08da      	lsrs	r2, r3, #3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3208      	adds	r2, #8
 8000d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	220f      	movs	r2, #15
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	691a      	ldr	r2, [r3, #16]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	08da      	lsrs	r2, r3, #3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3208      	adds	r2, #8
 8000dac:	6939      	ldr	r1, [r7, #16]
 8000dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0203 	and.w	r2, r3, #3
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 80a0 	beq.w	8000f34 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df4:	4b58      	ldr	r3, [pc, #352]	; (8000f58 <HAL_GPIO_Init+0x2e0>)
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	4a57      	ldr	r2, [pc, #348]	; (8000f58 <HAL_GPIO_Init+0x2e0>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6213      	str	r3, [r2, #32]
 8000e00:	4b55      	ldr	r3, [pc, #340]	; (8000f58 <HAL_GPIO_Init+0x2e0>)
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e0c:	4a53      	ldr	r2, [pc, #332]	; (8000f5c <HAL_GPIO_Init+0x2e4>)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a4b      	ldr	r2, [pc, #300]	; (8000f60 <HAL_GPIO_Init+0x2e8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d019      	beq.n	8000e6c <HAL_GPIO_Init+0x1f4>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a4a      	ldr	r2, [pc, #296]	; (8000f64 <HAL_GPIO_Init+0x2ec>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d013      	beq.n	8000e68 <HAL_GPIO_Init+0x1f0>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a49      	ldr	r2, [pc, #292]	; (8000f68 <HAL_GPIO_Init+0x2f0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d00d      	beq.n	8000e64 <HAL_GPIO_Init+0x1ec>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a48      	ldr	r2, [pc, #288]	; (8000f6c <HAL_GPIO_Init+0x2f4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d007      	beq.n	8000e60 <HAL_GPIO_Init+0x1e8>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a47      	ldr	r2, [pc, #284]	; (8000f70 <HAL_GPIO_Init+0x2f8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d101      	bne.n	8000e5c <HAL_GPIO_Init+0x1e4>
 8000e58:	2304      	movs	r3, #4
 8000e5a:	e008      	b.n	8000e6e <HAL_GPIO_Init+0x1f6>
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	e006      	b.n	8000e6e <HAL_GPIO_Init+0x1f6>
 8000e60:	2303      	movs	r3, #3
 8000e62:	e004      	b.n	8000e6e <HAL_GPIO_Init+0x1f6>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e002      	b.n	8000e6e <HAL_GPIO_Init+0x1f6>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <HAL_GPIO_Init+0x1f6>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	f002 0203 	and.w	r2, r2, #3
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	4093      	lsls	r3, r2
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e7e:	4937      	ldr	r1, [pc, #220]	; (8000f5c <HAL_GPIO_Init+0x2e4>)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3302      	adds	r3, #2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e8c:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <HAL_GPIO_Init+0x2fc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eb0:	4a30      	ldr	r2, [pc, #192]	; (8000f74 <HAL_GPIO_Init+0x2fc>)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <HAL_GPIO_Init+0x2fc>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eda:	4a26      	ldr	r2, [pc, #152]	; (8000f74 <HAL_GPIO_Init+0x2fc>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <HAL_GPIO_Init+0x2fc>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <HAL_GPIO_Init+0x2fc>)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_GPIO_Init+0x2fc>)
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f2e:	4a11      	ldr	r2, [pc, #68]	; (8000f74 <HAL_GPIO_Init+0x2fc>)
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3301      	adds	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa22 f303 	lsr.w	r3, r2, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f47f aea3 	bne.w	8000c90 <HAL_GPIO_Init+0x18>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	371c      	adds	r7, #28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40010000 	.word	0x40010000
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010400 	.word	0x40010400

08000f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e31d      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f8a:	4b94      	ldr	r3, [pc, #592]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
 8000f92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f94:	4b91      	ldr	r3, [pc, #580]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d07b      	beq.n	80010a2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d006      	beq.n	8000fbe <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2b0c      	cmp	r3, #12
 8000fb4:	d10f      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x5e>
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbe:	4b87      	ldr	r3, [pc, #540]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d06a      	beq.n	80010a0 <HAL_RCC_OscConfig+0x128>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d166      	bne.n	80010a0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e2f7      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d106      	bne.n	8000fec <HAL_RCC_OscConfig+0x74>
 8000fde:	4b7f      	ldr	r3, [pc, #508]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a7e      	ldr	r2, [pc, #504]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e02d      	b.n	8001048 <HAL_RCC_OscConfig+0xd0>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10c      	bne.n	800100e <HAL_RCC_OscConfig+0x96>
 8000ff4:	4b79      	ldr	r3, [pc, #484]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a78      	ldr	r2, [pc, #480]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8000ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b76      	ldr	r3, [pc, #472]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a75      	ldr	r2, [pc, #468]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	e01c      	b.n	8001048 <HAL_RCC_OscConfig+0xd0>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0xb8>
 8001016:	4b71      	ldr	r3, [pc, #452]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a70      	ldr	r2, [pc, #448]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b6e      	ldr	r3, [pc, #440]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a6d      	ldr	r2, [pc, #436]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0xd0>
 8001030:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a69      	ldr	r2, [pc, #420]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b67      	ldr	r3, [pc, #412]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a66      	ldr	r2, [pc, #408]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fd02 	bl	8000a58 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fcfe 	bl	8000a58 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	; 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e2ad      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800106a:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0xe0>
 8001076:	e014      	b.n	80010a2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fcee 	bl	8000a58 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fcea 	bl	8000a58 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e299      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x108>
 800109e:	e000      	b.n	80010a2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d05a      	beq.n	8001164 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2b0c      	cmp	r3, #12
 80010b8:	d119      	bne.n	80010ee <HAL_RCC_OscConfig+0x176>
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d116      	bne.n	80010ee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_OscConfig+0x160>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d001      	beq.n	80010d8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e276      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	493d      	ldr	r1, [pc, #244]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ec:	e03a      	b.n	8001164 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d020      	beq.n	8001138 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <HAL_RCC_OscConfig+0x268>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fcac 	bl	8000a58 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff fca8 	bl	8000a58 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e257      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001122:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	492a      	ldr	r1, [pc, #168]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001132:	4313      	orrs	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
 8001136:	e015      	b.n	8001164 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <HAL_RCC_OscConfig+0x268>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fc8b 	bl	8000a58 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001146:	f7ff fc87 	bl	8000a58 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e236      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001158:	4b20      	ldr	r3, [pc, #128]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f0      	bne.n	8001146 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80b8 	beq.w	80012e2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d170      	bne.n	800125a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_RCC_OscConfig+0x218>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e21a      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1a      	ldr	r2, [r3, #32]
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800119c:	429a      	cmp	r2, r3
 800119e:	d921      	bls.n	80011e4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fc7d 	bl	8001aa4 <RCC_SetFlashLatencyFromMSIRange>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e208      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4906      	ldr	r1, [pc, #24]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	061b      	lsls	r3, r3, #24
 80011d4:	4901      	ldr	r1, [pc, #4]	; (80011dc <HAL_RCC_OscConfig+0x264>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	604b      	str	r3, [r1, #4]
 80011da:	e020      	b.n	800121e <HAL_RCC_OscConfig+0x2a6>
 80011dc:	40023800 	.word	0x40023800
 80011e0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011e4:	4b99      	ldr	r3, [pc, #612]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4996      	ldr	r1, [pc, #600]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f6:	4b95      	ldr	r3, [pc, #596]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	061b      	lsls	r3, r3, #24
 8001204:	4991      	ldr	r1, [pc, #580]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fc48 	bl	8001aa4 <RCC_SetFlashLatencyFromMSIRange>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e1d3      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	0b5b      	lsrs	r3, r3, #13
 8001224:	3301      	adds	r3, #1
 8001226:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800122e:	4a87      	ldr	r2, [pc, #540]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001230:	6892      	ldr	r2, [r2, #8]
 8001232:	0912      	lsrs	r2, r2, #4
 8001234:	f002 020f 	and.w	r2, r2, #15
 8001238:	4985      	ldr	r1, [pc, #532]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 800123a:	5c8a      	ldrb	r2, [r1, r2]
 800123c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800123e:	4a85      	ldr	r2, [pc, #532]	; (8001454 <HAL_RCC_OscConfig+0x4dc>)
 8001240:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001242:	4b85      	ldr	r3, [pc, #532]	; (8001458 <HAL_RCC_OscConfig+0x4e0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fbba 	bl	80009c0 <HAL_InitTick>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d045      	beq.n	80012e2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	e1b5      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d029      	beq.n	80012b6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001262:	4b7e      	ldr	r3, [pc, #504]	; (800145c <HAL_RCC_OscConfig+0x4e4>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fbf6 	bl	8000a58 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001270:	f7ff fbf2 	bl	8000a58 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1a1      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001282:	4b72      	ldr	r3, [pc, #456]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800128e:	4b6f      	ldr	r3, [pc, #444]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	496c      	ldr	r1, [pc, #432]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012a0:	4b6a      	ldr	r3, [pc, #424]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	061b      	lsls	r3, r3, #24
 80012ae:	4967      	ldr	r1, [pc, #412]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
 80012b4:	e015      	b.n	80012e2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012b6:	4b69      	ldr	r3, [pc, #420]	; (800145c <HAL_RCC_OscConfig+0x4e4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fbcc 	bl	8000a58 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c4:	f7ff fbc8 	bl	8000a58 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e177      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012d6:	4b5d      	ldr	r3, [pc, #372]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d030      	beq.n	8001350 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d016      	beq.n	8001324 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f6:	4b5a      	ldr	r3, [pc, #360]	; (8001460 <HAL_RCC_OscConfig+0x4e8>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fc:	f7ff fbac 	bl	8000a58 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff fba8 	bl	8000a58 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e157      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001316:	4b4d      	ldr	r3, [pc, #308]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x38c>
 8001322:	e015      	b.n	8001350 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001324:	4b4e      	ldr	r3, [pc, #312]	; (8001460 <HAL_RCC_OscConfig+0x4e8>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fb95 	bl	8000a58 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fb91 	bl	8000a58 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e140      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f0      	bne.n	8001332 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80b5 	beq.w	80014c8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001362:	4b3a      	ldr	r3, [pc, #232]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10d      	bne.n	800138a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	4a36      	ldr	r2, [pc, #216]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6253      	str	r3, [r2, #36]	; 0x24
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001386:	2301      	movs	r3, #1
 8001388:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138a:	4b36      	ldr	r3, [pc, #216]	; (8001464 <HAL_RCC_OscConfig+0x4ec>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d118      	bne.n	80013c8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001396:	4b33      	ldr	r3, [pc, #204]	; (8001464 <HAL_RCC_OscConfig+0x4ec>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_RCC_OscConfig+0x4ec>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fb59 	bl	8000a58 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013aa:	f7ff fb55 	bl	8000a58 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b64      	cmp	r3, #100	; 0x64
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e104      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013bc:	4b29      	ldr	r3, [pc, #164]	; (8001464 <HAL_RCC_OscConfig+0x4ec>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x466>
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 80013d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d4:	4a1d      	ldr	r2, [pc, #116]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013da:	6353      	str	r3, [r2, #52]	; 0x34
 80013dc:	e02d      	b.n	800143a <HAL_RCC_OscConfig+0x4c2>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x488>
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 80013e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ea:	4a18      	ldr	r2, [pc, #96]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 80013ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f0:	6353      	str	r3, [r2, #52]	; 0x34
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 80013f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f6:	4a15      	ldr	r2, [pc, #84]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 80013f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013fc:	6353      	str	r3, [r2, #52]	; 0x34
 80013fe:	e01c      	b.n	800143a <HAL_RCC_OscConfig+0x4c2>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d10c      	bne.n	8001422 <HAL_RCC_OscConfig+0x4aa>
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 800140a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001412:	6353      	str	r3, [r2, #52]	; 0x34
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6353      	str	r3, [r2, #52]	; 0x34
 8001420:	e00b      	b.n	800143a <HAL_RCC_OscConfig+0x4c2>
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800142c:	6353      	str	r3, [r2, #52]	; 0x34
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001432:	4a06      	ldr	r2, [pc, #24]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001438:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d024      	beq.n	800148c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff fb09 	bl	8000a58 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001448:	e019      	b.n	800147e <HAL_RCC_OscConfig+0x506>
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	0800317c 	.word	0x0800317c
 8001454:	20000000 	.word	0x20000000
 8001458:	20000004 	.word	0x20000004
 800145c:	42470020 	.word	0x42470020
 8001460:	42470680 	.word	0x42470680
 8001464:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001468:	f7ff faf6 	bl	8000a58 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f241 3288 	movw	r2, #5000	; 0x1388
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e0a3      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800147e:	4b54      	ldr	r3, [pc, #336]	; (80015d0 <HAL_RCC_OscConfig+0x658>)
 8001480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0ee      	beq.n	8001468 <HAL_RCC_OscConfig+0x4f0>
 800148a:	e014      	b.n	80014b6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148c:	f7ff fae4 	bl	8000a58 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001492:	e00a      	b.n	80014aa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001494:	f7ff fae0 	bl	8000a58 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e08d      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014aa:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <HAL_RCC_OscConfig+0x658>)
 80014ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1ee      	bne.n	8001494 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014b6:	7ffb      	ldrb	r3, [r7, #31]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d105      	bne.n	80014c8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014bc:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <HAL_RCC_OscConfig+0x658>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	4a43      	ldr	r2, [pc, #268]	; (80015d0 <HAL_RCC_OscConfig+0x658>)
 80014c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d079      	beq.n	80015c4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	d056      	beq.n	8001584 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d13b      	bne.n	8001556 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <HAL_RCC_OscConfig+0x65c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fab8 	bl	8000a58 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fab4 	bl	8000a58 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e063      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014fe:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <HAL_RCC_OscConfig+0x658>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <HAL_RCC_OscConfig+0x658>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	4319      	orrs	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	430b      	orrs	r3, r1
 8001522:	492b      	ldr	r1, [pc, #172]	; (80015d0 <HAL_RCC_OscConfig+0x658>)
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <HAL_RCC_OscConfig+0x65c>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fa93 	bl	8000a58 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fa8f 	bl	8000a58 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e03e      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <HAL_RCC_OscConfig+0x658>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x5be>
 8001554:	e036      	b.n	80015c4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <HAL_RCC_OscConfig+0x65c>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fa7c 	bl	8000a58 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff fa78 	bl	8000a58 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e027      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_RCC_OscConfig+0x658>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x5ec>
 8001582:	e01f      	b.n	80015c4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e01a      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_RCC_OscConfig+0x658>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d10d      	bne.n	80015c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d106      	bne.n	80015c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	42470060 	.word	0x42470060

080015d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e11a      	b.n	8001822 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b8f      	ldr	r3, [pc, #572]	; (800182c <HAL_RCC_ClockConfig+0x254>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d919      	bls.n	800162e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_RCC_ClockConfig+0x34>
 8001600:	4b8a      	ldr	r3, [pc, #552]	; (800182c <HAL_RCC_ClockConfig+0x254>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a89      	ldr	r2, [pc, #548]	; (800182c <HAL_RCC_ClockConfig+0x254>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b87      	ldr	r3, [pc, #540]	; (800182c <HAL_RCC_ClockConfig+0x254>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 0201 	bic.w	r2, r3, #1
 8001614:	4985      	ldr	r1, [pc, #532]	; (800182c <HAL_RCC_ClockConfig+0x254>)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161c:	4b83      	ldr	r3, [pc, #524]	; (800182c <HAL_RCC_ClockConfig+0x254>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d001      	beq.n	800162e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e0f9      	b.n	8001822 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800163a:	4b7d      	ldr	r3, [pc, #500]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	497a      	ldr	r1, [pc, #488]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 808e 	beq.w	8001776 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001662:	4b73      	ldr	r3, [pc, #460]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d121      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0d7      	b.n	8001822 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800167a:	4b6d      	ldr	r3, [pc, #436]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d115      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0cb      	b.n	8001822 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001692:	4b67      	ldr	r3, [pc, #412]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d109      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0bf      	b.n	8001822 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e0b7      	b.n	8001822 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b2:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f023 0203 	bic.w	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	495c      	ldr	r1, [pc, #368]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c4:	f7ff f9c8 	bl	8000a58 <HAL_GetTick>
 80016c8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d112      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d4:	f7ff f9c0 	bl	8000a58 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e09b      	b.n	8001822 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ea:	4b51      	ldr	r3, [pc, #324]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d1ee      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xfc>
 80016f6:	e03e      	b.n	8001776 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d112      	bne.n	8001726 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001702:	f7ff f9a9 	bl	8000a58 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e084      	b.n	8001822 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001718:	4b45      	ldr	r3, [pc, #276]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b0c      	cmp	r3, #12
 8001722:	d1ee      	bne.n	8001702 <HAL_RCC_ClockConfig+0x12a>
 8001724:	e027      	b.n	8001776 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d11d      	bne.n	800176a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7ff f992 	bl	8000a58 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e06d      	b.n	8001822 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001746:	4b3a      	ldr	r3, [pc, #232]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b04      	cmp	r3, #4
 8001750:	d1ee      	bne.n	8001730 <HAL_RCC_ClockConfig+0x158>
 8001752:	e010      	b.n	8001776 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001754:	f7ff f980 	bl	8000a58 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e05b      	b.n	8001822 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ee      	bne.n	8001754 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <HAL_RCC_ClockConfig+0x254>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d219      	bcs.n	80017b8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d105      	bne.n	8001796 <HAL_RCC_ClockConfig+0x1be>
 800178a:	4b28      	ldr	r3, [pc, #160]	; (800182c <HAL_RCC_ClockConfig+0x254>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a27      	ldr	r2, [pc, #156]	; (800182c <HAL_RCC_ClockConfig+0x254>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_RCC_ClockConfig+0x254>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 0201 	bic.w	r2, r3, #1
 800179e:	4923      	ldr	r1, [pc, #140]	; (800182c <HAL_RCC_ClockConfig+0x254>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <HAL_RCC_ClockConfig+0x254>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e034      	b.n	8001822 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4917      	ldr	r1, [pc, #92]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	490f      	ldr	r1, [pc, #60]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017f6:	f000 f823 	bl	8001840 <HAL_RCC_GetSysClockFreq>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_RCC_ClockConfig+0x258>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	490b      	ldr	r1, [pc, #44]	; (8001834 <HAL_RCC_ClockConfig+0x25c>)
 8001808:	5ccb      	ldrb	r3, [r1, r3]
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x260>)
 8001810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x264>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f8d2 	bl	80009c0 <HAL_InitTick>
 800181c:	4603      	mov	r3, r0
 800181e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001820:	7afb      	ldrb	r3, [r7, #11]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023c00 	.word	0x40023c00
 8001830:	40023800 	.word	0x40023800
 8001834:	0800317c 	.word	0x0800317c
 8001838:	20000000 	.word	0x20000000
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001844:	b092      	sub	sp, #72	; 0x48
 8001846:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001848:	4b79      	ldr	r3, [pc, #484]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800184e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d00d      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x34>
 8001858:	2b0c      	cmp	r3, #12
 800185a:	f200 80d5 	bhi.w	8001a08 <HAL_RCC_GetSysClockFreq+0x1c8>
 800185e:	2b04      	cmp	r3, #4
 8001860:	d002      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x28>
 8001862:	2b08      	cmp	r3, #8
 8001864:	d003      	beq.n	800186e <HAL_RCC_GetSysClockFreq+0x2e>
 8001866:	e0cf      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001868:	4b72      	ldr	r3, [pc, #456]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800186a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800186c:	e0da      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800186e:	4b72      	ldr	r3, [pc, #456]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001870:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001872:	e0d7      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001876:	0c9b      	lsrs	r3, r3, #18
 8001878:	f003 020f 	and.w	r2, r3, #15
 800187c:	4b6f      	ldr	r3, [pc, #444]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800187e:	5c9b      	ldrb	r3, [r3, r2]
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001884:	0d9b      	lsrs	r3, r3, #22
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	3301      	adds	r3, #1
 800188c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188e:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d05d      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800189a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800189c:	2200      	movs	r2, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	4611      	mov	r1, r2
 80018a2:	4604      	mov	r4, r0
 80018a4:	460d      	mov	r5, r1
 80018a6:	4622      	mov	r2, r4
 80018a8:	462b      	mov	r3, r5
 80018aa:	f04f 0000 	mov.w	r0, #0
 80018ae:	f04f 0100 	mov.w	r1, #0
 80018b2:	0159      	lsls	r1, r3, #5
 80018b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b8:	0150      	lsls	r0, r2, #5
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4621      	mov	r1, r4
 80018c0:	1a51      	subs	r1, r2, r1
 80018c2:	6139      	str	r1, [r7, #16]
 80018c4:	4629      	mov	r1, r5
 80018c6:	eb63 0301 	sbc.w	r3, r3, r1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018d8:	4659      	mov	r1, fp
 80018da:	018b      	lsls	r3, r1, #6
 80018dc:	4651      	mov	r1, sl
 80018de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018e2:	4651      	mov	r1, sl
 80018e4:	018a      	lsls	r2, r1, #6
 80018e6:	46d4      	mov	ip, sl
 80018e8:	ebb2 080c 	subs.w	r8, r2, ip
 80018ec:	4659      	mov	r1, fp
 80018ee:	eb63 0901 	sbc.w	r9, r3, r1
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001906:	4690      	mov	r8, r2
 8001908:	4699      	mov	r9, r3
 800190a:	4623      	mov	r3, r4
 800190c:	eb18 0303 	adds.w	r3, r8, r3
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	462b      	mov	r3, r5
 8001914:	eb49 0303 	adc.w	r3, r9, r3
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001926:	4629      	mov	r1, r5
 8001928:	024b      	lsls	r3, r1, #9
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	4604      	mov	r4, r0
 8001930:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001934:	4601      	mov	r1, r0
 8001936:	024a      	lsls	r2, r1, #9
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193e:	2200      	movs	r2, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
 8001942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001948:	f7fe fc18 	bl	800017c <__aeabi_uldivmod>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4613      	mov	r3, r2
 8001952:	647b      	str	r3, [r7, #68]	; 0x44
 8001954:	e055      	b.n	8001a02 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001958:	2200      	movs	r2, #0
 800195a:	623b      	str	r3, [r7, #32]
 800195c:	627a      	str	r2, [r7, #36]	; 0x24
 800195e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001962:	4642      	mov	r2, r8
 8001964:	464b      	mov	r3, r9
 8001966:	f04f 0000 	mov.w	r0, #0
 800196a:	f04f 0100 	mov.w	r1, #0
 800196e:	0159      	lsls	r1, r3, #5
 8001970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001974:	0150      	lsls	r0, r2, #5
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	46c4      	mov	ip, r8
 800197c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001980:	4640      	mov	r0, r8
 8001982:	4649      	mov	r1, r9
 8001984:	468c      	mov	ip, r1
 8001986:	eb63 0b0c 	sbc.w	fp, r3, ip
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001996:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800199a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800199e:	ebb2 040a 	subs.w	r4, r2, sl
 80019a2:	eb63 050b 	sbc.w	r5, r3, fp
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	00eb      	lsls	r3, r5, #3
 80019b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b4:	00e2      	lsls	r2, r4, #3
 80019b6:	4614      	mov	r4, r2
 80019b8:	461d      	mov	r5, r3
 80019ba:	4603      	mov	r3, r0
 80019bc:	18e3      	adds	r3, r4, r3
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	460b      	mov	r3, r1
 80019c2:	eb45 0303 	adc.w	r3, r5, r3
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019d4:	4629      	mov	r1, r5
 80019d6:	028b      	lsls	r3, r1, #10
 80019d8:	4620      	mov	r0, r4
 80019da:	4629      	mov	r1, r5
 80019dc:	4604      	mov	r4, r0
 80019de:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80019e2:	4601      	mov	r1, r0
 80019e4:	028a      	lsls	r2, r1, #10
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	2200      	movs	r2, #0
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	61fa      	str	r2, [r7, #28]
 80019f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019f6:	f7fe fbc1 	bl	800017c <__aeabi_uldivmod>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4613      	mov	r3, r2
 8001a00:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a04:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a06:	e00d      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	0b5b      	lsrs	r3, r3, #13
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a16:	3301      	adds	r3, #1
 8001a18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3748      	adds	r7, #72	; 0x48
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	00f42400 	.word	0x00f42400
 8001a38:	007a1200 	.word	0x007a1200
 8001a3c:	08003170 	.word	0x08003170

08001a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20000000 	.word	0x20000000

08001a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a58:	f7ff fff2 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	; (8001a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	0800318c 	.word	0x0800318c

08001a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a80:	f7ff ffde 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	0adb      	lsrs	r3, r3, #11
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	4903      	ldr	r1, [pc, #12]	; (8001aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a92:	5ccb      	ldrb	r3, [r1, r3]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	0800318c 	.word	0x0800318c

08001aa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ab0:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d12c      	bne.n	8001b16 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e016      	b.n	8001b02 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6253      	str	r3, [r2, #36]	; 0x24
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001af4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	4a17      	ldr	r2, [pc, #92]	; (8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001b08:	d105      	bne.n	8001b16 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b10:	d101      	bne.n	8001b16 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001b12:	2301      	movs	r3, #1
 8001b14:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d105      	bne.n	8001b28 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 0201 	bic.w	r2, r3, #1
 8001b30:	490b      	ldr	r1, [pc, #44]	; (8001b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d001      	beq.n	8001b4a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	40023c00 	.word	0x40023c00

08001b64 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d106      	bne.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80ed 	beq.w	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8a:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10d      	bne.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	4a74      	ldr	r2, [pc, #464]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6253      	str	r3, [r2, #36]	; 0x24
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb2:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d118      	bne.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bbe:	4b6c      	ldr	r3, [pc, #432]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a6b      	ldr	r2, [pc, #428]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bca:	f7fe ff45 	bl	8000a58 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	e008      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd2:	f7fe ff41 	bl	8000a58 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b64      	cmp	r3, #100	; 0x64
 8001bde:	d901      	bls.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0be      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001bf0:	4b5e      	ldr	r3, [pc, #376]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001bf8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d106      	bne.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d00f      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c22:	d108      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c24:	4b51      	ldr	r3, [pc, #324]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c30:	d101      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e095      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c36:	4b4d      	ldr	r3, [pc, #308]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c3e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d041      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d005      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10c      	bne.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d02d      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d027      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c82:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c84:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001c90:	4a36      	ldr	r2, [pc, #216]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d014      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe feda 	bl	8000a58 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca8:	f7fe fed6 	bl	8000a58 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e051      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0ee      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01a      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ce2:	d10a      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001cf4:	491d      	ldr	r1, [pc, #116]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d06:	4919      	ldr	r1, [pc, #100]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01a      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d24:	d10a      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8001d36:	490d      	ldr	r1, [pc, #52]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d48:	4908      	ldr	r1, [pc, #32]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40007000 	.word	0x40007000
 8001d74:	424706dc 	.word	0x424706dc

08001d78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e083      	b.n	8001e92 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7f5b      	ldrb	r3, [r3, #29]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fd14 	bl	80007c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	22ca      	movs	r2, #202	; 0xca
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2253      	movs	r2, #83	; 0x53
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fa98 	bl	80022ec <RTC_EnterInitMode>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d008      	beq.n	8001dd4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	22ff      	movs	r2, #255	; 0xff
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e05e      	b.n	8001e92 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001de6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6899      	ldr	r1, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68d2      	ldr	r2, [r2, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6919      	ldr	r1, [r3, #16]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	041a      	lsls	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e32:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10e      	bne.n	8001e60 <HAL_RTC_Init+0xe8>
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fa25 	bl	8002292 <HAL_RTC_WaitForSynchro>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	22ff      	movs	r2, #255	; 0xff
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e018      	b.n	8001e92 <HAL_RTC_Init+0x11a>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	22ff      	movs	r2, #255	; 0xff
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001e90:	2300      	movs	r3, #0
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001e9a:	b590      	push	{r4, r7, lr}
 8001e9c:	b087      	sub	sp, #28
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	7f1b      	ldrb	r3, [r3, #28]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_RTC_SetTime+0x18>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e0a3      	b.n	8001ffa <HAL_RTC_SetTime+0x160>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d126      	bne.n	8001f12 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fa2f 	bl	8002340 <RTC_ByteToBcd2>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	785b      	ldrb	r3, [r3, #1]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fa28 	bl	8002340 <RTC_ByteToBcd2>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001ef4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	789b      	ldrb	r3, [r3, #2]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fa20 	bl	8002340 <RTC_ByteToBcd2>
 8001f00:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001f02:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	78db      	ldrb	r3, [r3, #3]
 8001f0a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e018      	b.n	8001f44 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2200      	movs	r2, #0
 8001f24:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	785b      	ldrb	r3, [r3, #1]
 8001f30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001f32:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001f38:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	78db      	ldrb	r3, [r3, #3]
 8001f3e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	22ca      	movs	r2, #202	; 0xca
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2253      	movs	r2, #83	; 0x53
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 f9c9 	bl	80022ec <RTC_EnterInitMode>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00b      	beq.n	8001f78 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	22ff      	movs	r2, #255	; 0xff
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e040      	b.n	8001ffa <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001f82:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001f86:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f96:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6899      	ldr	r1, [r3, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fbe:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f966 	bl	8002292 <HAL_RTC_WaitForSynchro>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00b      	beq.n	8001fe4 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	22ff      	movs	r2, #255	; 0xff
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e00a      	b.n	8001ffa <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	22ff      	movs	r2, #255	; 0xff
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
  }
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	371c      	adds	r7, #28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd90      	pop	{r4, r7, pc}

08002002 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	b29a      	uxth	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002032:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002036:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002042:	b2da      	uxtb	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002052:	b2da      	uxtb	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002060:	b2da      	uxtb	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	b2da      	uxtb	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d11a      	bne.n	80020b2 <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 f97c 	bl	800237e <RTC_Bcd2ToByte>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f973 	bl	800237e <RTC_Bcd2ToByte>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	789b      	ldrb	r3, [r3, #2]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f96a 	bl	800237e <RTC_Bcd2ToByte>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	7f1b      	ldrb	r3, [r3, #28]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_RTC_SetDate+0x18>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e08d      	b.n	80021f0 <HAL_RTC_SetDate+0x134>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2202      	movs	r2, #2
 80020de:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10e      	bne.n	8002104 <HAL_RTC_SetDate+0x48>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	785b      	ldrb	r3, [r3, #1]
 80020f6:	f023 0310 	bic.w	r3, r3, #16
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	330a      	adds	r3, #10
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d11c      	bne.n	8002144 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	78db      	ldrb	r3, [r3, #3]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f916 	bl	8002340 <RTC_ByteToBcd2>
 8002114:	4603      	mov	r3, r0
 8002116:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	785b      	ldrb	r3, [r3, #1]
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f90f 	bl	8002340 <RTC_ByteToBcd2>
 8002122:	4603      	mov	r3, r0
 8002124:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002126:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	789b      	ldrb	r3, [r3, #2]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f907 	bl	8002340 <RTC_ByteToBcd2>
 8002132:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002134:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	e00e      	b.n	8002162 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	78db      	ldrb	r3, [r3, #3]
 8002148:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002150:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002156:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	22ca      	movs	r2, #202	; 0xca
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2253      	movs	r2, #83	; 0x53
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 f8ba 	bl	80022ec <RTC_EnterInitMode>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	22ff      	movs	r2, #255	; 0xff
 8002184:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2204      	movs	r2, #4
 800218a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e02c      	b.n	80021f0 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021a4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b4:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f86b 	bl	8002292 <HAL_RTC_WaitForSynchro>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	22ff      	movs	r2, #255	; 0xff
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2204      	movs	r2, #4
 80021ce:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00a      	b.n	80021f0 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	22ff      	movs	r2, #255	; 0xff
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80021ee:	2300      	movs	r3, #0
  }
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd90      	pop	{r4, r7, pc}

080021f8 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800220e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002212:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	0c1b      	lsrs	r3, r3, #16
 8002218:	b2da      	uxtb	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002236:	b2da      	uxtb	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	0b5b      	lsrs	r3, r3, #13
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	b2da      	uxtb	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d11a      	bne.n	8002288 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	78db      	ldrb	r3, [r3, #3]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f891 	bl	800237e <RTC_Bcd2ToByte>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	785b      	ldrb	r3, [r3, #1]
 8002268:	4618      	mov	r0, r3
 800226a:	f000 f888 	bl	800237e <RTC_Bcd2ToByte>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	789b      	ldrb	r3, [r3, #2]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f87f 	bl	800237e <RTC_Bcd2ToByte>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d11c      	bne.n	80022e2 <HAL_RTC_WaitForSynchro+0x50>
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80022b8:	f7fe fbce 	bl	8000a58 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022be:	e009      	b.n	80022d4 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80022c0:	f7fe fbca 	bl	8000a58 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ce:	d901      	bls.n	80022d4 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e007      	b.n	80022e4 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0ee      	beq.n	80022c0 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d119      	bne.n	8002336 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f04f 32ff 	mov.w	r2, #4294967295
 800230a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800230c:	f7fe fba4 	bl	8000a58 <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002312:	e009      	b.n	8002328 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002314:	f7fe fba0 	bl	8000a58 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002322:	d901      	bls.n	8002328 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e007      	b.n	8002338 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0ee      	beq.n	8002314 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8002352:	e005      	b.n	8002360 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3301      	adds	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800235a:	7afb      	ldrb	r3, [r7, #11]
 800235c:	3b0a      	subs	r3, #10
 800235e:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8002360:	7afb      	ldrb	r3, [r7, #11]
 8002362:	2b09      	cmp	r3, #9
 8002364:	d8f6      	bhi.n	8002354 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	b2da      	uxtb	r2, r3
 800236e:	7afb      	ldrb	r3, [r7, #11]
 8002370:	4313      	orrs	r3, r2
 8002372:	b2db      	uxtb	r3, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	b2db      	uxtb	r3, r3
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e03f      	b.n	8002446 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe fa0a 	bl	80007f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2224      	movs	r2, #36	; 0x24
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f905 	bl	8002608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800240c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800241c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800242c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b08a      	sub	sp, #40	; 0x28
 8002452:	af02      	add	r7, sp, #8
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	4613      	mov	r3, r2
 800245c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b20      	cmp	r3, #32
 800246c:	d17c      	bne.n	8002568 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_UART_Transmit+0x2c>
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e075      	b.n	800256a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_UART_Transmit+0x3e>
 8002488:	2302      	movs	r3, #2
 800248a:	e06e      	b.n	800256a <HAL_UART_Transmit+0x11c>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2221      	movs	r2, #33	; 0x21
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024a2:	f7fe fad9 	bl	8000a58 <HAL_GetTick>
 80024a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	88fa      	ldrh	r2, [r7, #6]
 80024ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	88fa      	ldrh	r2, [r7, #6]
 80024b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024bc:	d108      	bne.n	80024d0 <HAL_UART_Transmit+0x82>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d104      	bne.n	80024d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	e003      	b.n	80024d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024e0:	e02a      	b.n	8002538 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f840 	bl	8002572 <UART_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e036      	b.n	800256a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10b      	bne.n	800251a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002510:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	3302      	adds	r3, #2
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	e007      	b.n	800252a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	3301      	adds	r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1cf      	bne.n	80024e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2200      	movs	r2, #0
 800254a:	2140      	movs	r1, #64	; 0x40
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f810 	bl	8002572 <UART_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e006      	b.n	800256a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	e000      	b.n	800256a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002568:	2302      	movs	r3, #2
  }
}
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4613      	mov	r3, r2
 8002580:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002582:	e02c      	b.n	80025de <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258a:	d028      	beq.n	80025de <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002592:	f7fe fa61 	bl	8000a58 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d21d      	bcs.n	80025de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025b0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e00f      	b.n	80025fe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4013      	ands	r3, r2
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d0c3      	beq.n	8002584 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4313      	orrs	r3, r2
 800263c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002648:	f023 030c 	bic.w	r3, r3, #12
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	430b      	orrs	r3, r1
 8002654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a55      	ldr	r2, [pc, #340]	; (80027c8 <UART_SetConfig+0x1c0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d103      	bne.n	800267e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002676:	f7ff fa01 	bl	8001a7c <HAL_RCC_GetPCLK2Freq>
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	e002      	b.n	8002684 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800267e:	f7ff f9e9 	bl	8001a54 <HAL_RCC_GetPCLK1Freq>
 8002682:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800268c:	d14c      	bne.n	8002728 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	009a      	lsls	r2, r3, #2
 8002698:	441a      	add	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	4a49      	ldr	r2, [pc, #292]	; (80027cc <UART_SetConfig+0x1c4>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	0119      	lsls	r1, r3, #4
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	009a      	lsls	r2, r3, #2
 80026b8:	441a      	add	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c4:	4b41      	ldr	r3, [pc, #260]	; (80027cc <UART_SetConfig+0x1c4>)
 80026c6:	fba3 0302 	umull	r0, r3, r3, r2
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2064      	movs	r0, #100	; 0x64
 80026ce:	fb00 f303 	mul.w	r3, r0, r3
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	3332      	adds	r3, #50	; 0x32
 80026d8:	4a3c      	ldr	r2, [pc, #240]	; (80027cc <UART_SetConfig+0x1c4>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026e6:	4419      	add	r1, r3
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	009a      	lsls	r2, r3, #2
 80026f2:	441a      	add	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80026fe:	4b33      	ldr	r3, [pc, #204]	; (80027cc <UART_SetConfig+0x1c4>)
 8002700:	fba3 0302 	umull	r0, r3, r3, r2
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	2064      	movs	r0, #100	; 0x64
 8002708:	fb00 f303 	mul.w	r3, r0, r3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	3332      	adds	r3, #50	; 0x32
 8002712:	4a2e      	ldr	r2, [pc, #184]	; (80027cc <UART_SetConfig+0x1c4>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	f003 0207 	and.w	r2, r3, #7
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	440a      	add	r2, r1
 8002724:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002726:	e04a      	b.n	80027be <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	009a      	lsls	r2, r3, #2
 8002732:	441a      	add	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	4a23      	ldr	r2, [pc, #140]	; (80027cc <UART_SetConfig+0x1c4>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	0119      	lsls	r1, r3, #4
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009a      	lsls	r2, r3, #2
 8002752:	441a      	add	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	fbb2 f2f3 	udiv	r2, r2, r3
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <UART_SetConfig+0x1c4>)
 8002760:	fba3 0302 	umull	r0, r3, r3, r2
 8002764:	095b      	lsrs	r3, r3, #5
 8002766:	2064      	movs	r0, #100	; 0x64
 8002768:	fb00 f303 	mul.w	r3, r0, r3
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	3332      	adds	r3, #50	; 0x32
 8002772:	4a16      	ldr	r2, [pc, #88]	; (80027cc <UART_SetConfig+0x1c4>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800277e:	4419      	add	r1, r3
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	009a      	lsls	r2, r3, #2
 800278a:	441a      	add	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	fbb2 f2f3 	udiv	r2, r2, r3
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <UART_SetConfig+0x1c4>)
 8002798:	fba3 0302 	umull	r0, r3, r3, r2
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	2064      	movs	r0, #100	; 0x64
 80027a0:	fb00 f303 	mul.w	r3, r0, r3
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	3332      	adds	r3, #50	; 0x32
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <UART_SetConfig+0x1c4>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	f003 020f 	and.w	r2, r3, #15
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	440a      	add	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40013800 	.word	0x40013800
 80027cc:	51eb851f 	.word	0x51eb851f

080027d0 <__errno>:
 80027d0:	4b01      	ldr	r3, [pc, #4]	; (80027d8 <__errno+0x8>)
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	2000000c 	.word	0x2000000c

080027dc <__libc_init_array>:
 80027dc:	b570      	push	{r4, r5, r6, lr}
 80027de:	2600      	movs	r6, #0
 80027e0:	4d0c      	ldr	r5, [pc, #48]	; (8002814 <__libc_init_array+0x38>)
 80027e2:	4c0d      	ldr	r4, [pc, #52]	; (8002818 <__libc_init_array+0x3c>)
 80027e4:	1b64      	subs	r4, r4, r5
 80027e6:	10a4      	asrs	r4, r4, #2
 80027e8:	42a6      	cmp	r6, r4
 80027ea:	d109      	bne.n	8002800 <__libc_init_array+0x24>
 80027ec:	f000 fc9c 	bl	8003128 <_init>
 80027f0:	2600      	movs	r6, #0
 80027f2:	4d0a      	ldr	r5, [pc, #40]	; (800281c <__libc_init_array+0x40>)
 80027f4:	4c0a      	ldr	r4, [pc, #40]	; (8002820 <__libc_init_array+0x44>)
 80027f6:	1b64      	subs	r4, r4, r5
 80027f8:	10a4      	asrs	r4, r4, #2
 80027fa:	42a6      	cmp	r6, r4
 80027fc:	d105      	bne.n	800280a <__libc_init_array+0x2e>
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	f855 3b04 	ldr.w	r3, [r5], #4
 8002804:	4798      	blx	r3
 8002806:	3601      	adds	r6, #1
 8002808:	e7ee      	b.n	80027e8 <__libc_init_array+0xc>
 800280a:	f855 3b04 	ldr.w	r3, [r5], #4
 800280e:	4798      	blx	r3
 8002810:	3601      	adds	r6, #1
 8002812:	e7f2      	b.n	80027fa <__libc_init_array+0x1e>
 8002814:	080031d0 	.word	0x080031d0
 8002818:	080031d0 	.word	0x080031d0
 800281c:	080031d0 	.word	0x080031d0
 8002820:	080031d4 	.word	0x080031d4

08002824 <memset>:
 8002824:	4603      	mov	r3, r0
 8002826:	4402      	add	r2, r0
 8002828:	4293      	cmp	r3, r2
 800282a:	d100      	bne.n	800282e <memset+0xa>
 800282c:	4770      	bx	lr
 800282e:	f803 1b01 	strb.w	r1, [r3], #1
 8002832:	e7f9      	b.n	8002828 <memset+0x4>

08002834 <siprintf>:
 8002834:	b40e      	push	{r1, r2, r3}
 8002836:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800283a:	b500      	push	{lr}
 800283c:	b09c      	sub	sp, #112	; 0x70
 800283e:	ab1d      	add	r3, sp, #116	; 0x74
 8002840:	9002      	str	r0, [sp, #8]
 8002842:	9006      	str	r0, [sp, #24]
 8002844:	9107      	str	r1, [sp, #28]
 8002846:	9104      	str	r1, [sp, #16]
 8002848:	4808      	ldr	r0, [pc, #32]	; (800286c <siprintf+0x38>)
 800284a:	4909      	ldr	r1, [pc, #36]	; (8002870 <siprintf+0x3c>)
 800284c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002850:	9105      	str	r1, [sp, #20]
 8002852:	6800      	ldr	r0, [r0, #0]
 8002854:	a902      	add	r1, sp, #8
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	f000 f868 	bl	800292c <_svfiprintf_r>
 800285c:	2200      	movs	r2, #0
 800285e:	9b02      	ldr	r3, [sp, #8]
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	b01c      	add	sp, #112	; 0x70
 8002864:	f85d eb04 	ldr.w	lr, [sp], #4
 8002868:	b003      	add	sp, #12
 800286a:	4770      	bx	lr
 800286c:	2000000c 	.word	0x2000000c
 8002870:	ffff0208 	.word	0xffff0208

08002874 <__ssputs_r>:
 8002874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002878:	688e      	ldr	r6, [r1, #8]
 800287a:	4682      	mov	sl, r0
 800287c:	429e      	cmp	r6, r3
 800287e:	460c      	mov	r4, r1
 8002880:	4690      	mov	r8, r2
 8002882:	461f      	mov	r7, r3
 8002884:	d838      	bhi.n	80028f8 <__ssputs_r+0x84>
 8002886:	898a      	ldrh	r2, [r1, #12]
 8002888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800288c:	d032      	beq.n	80028f4 <__ssputs_r+0x80>
 800288e:	6825      	ldr	r5, [r4, #0]
 8002890:	6909      	ldr	r1, [r1, #16]
 8002892:	3301      	adds	r3, #1
 8002894:	eba5 0901 	sub.w	r9, r5, r1
 8002898:	6965      	ldr	r5, [r4, #20]
 800289a:	444b      	add	r3, r9
 800289c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80028a4:	106d      	asrs	r5, r5, #1
 80028a6:	429d      	cmp	r5, r3
 80028a8:	bf38      	it	cc
 80028aa:	461d      	movcc	r5, r3
 80028ac:	0553      	lsls	r3, r2, #21
 80028ae:	d531      	bpl.n	8002914 <__ssputs_r+0xa0>
 80028b0:	4629      	mov	r1, r5
 80028b2:	f000 fb6f 	bl	8002f94 <_malloc_r>
 80028b6:	4606      	mov	r6, r0
 80028b8:	b950      	cbnz	r0, 80028d0 <__ssputs_r+0x5c>
 80028ba:	230c      	movs	r3, #12
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f8ca 3000 	str.w	r3, [sl]
 80028c4:	89a3      	ldrh	r3, [r4, #12]
 80028c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ca:	81a3      	strh	r3, [r4, #12]
 80028cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028d0:	464a      	mov	r2, r9
 80028d2:	6921      	ldr	r1, [r4, #16]
 80028d4:	f000 face 	bl	8002e74 <memcpy>
 80028d8:	89a3      	ldrh	r3, [r4, #12]
 80028da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e2:	81a3      	strh	r3, [r4, #12]
 80028e4:	6126      	str	r6, [r4, #16]
 80028e6:	444e      	add	r6, r9
 80028e8:	6026      	str	r6, [r4, #0]
 80028ea:	463e      	mov	r6, r7
 80028ec:	6165      	str	r5, [r4, #20]
 80028ee:	eba5 0509 	sub.w	r5, r5, r9
 80028f2:	60a5      	str	r5, [r4, #8]
 80028f4:	42be      	cmp	r6, r7
 80028f6:	d900      	bls.n	80028fa <__ssputs_r+0x86>
 80028f8:	463e      	mov	r6, r7
 80028fa:	4632      	mov	r2, r6
 80028fc:	4641      	mov	r1, r8
 80028fe:	6820      	ldr	r0, [r4, #0]
 8002900:	f000 fac6 	bl	8002e90 <memmove>
 8002904:	68a3      	ldr	r3, [r4, #8]
 8002906:	2000      	movs	r0, #0
 8002908:	1b9b      	subs	r3, r3, r6
 800290a:	60a3      	str	r3, [r4, #8]
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	4433      	add	r3, r6
 8002910:	6023      	str	r3, [r4, #0]
 8002912:	e7db      	b.n	80028cc <__ssputs_r+0x58>
 8002914:	462a      	mov	r2, r5
 8002916:	f000 fbb1 	bl	800307c <_realloc_r>
 800291a:	4606      	mov	r6, r0
 800291c:	2800      	cmp	r0, #0
 800291e:	d1e1      	bne.n	80028e4 <__ssputs_r+0x70>
 8002920:	4650      	mov	r0, sl
 8002922:	6921      	ldr	r1, [r4, #16]
 8002924:	f000 face 	bl	8002ec4 <_free_r>
 8002928:	e7c7      	b.n	80028ba <__ssputs_r+0x46>
	...

0800292c <_svfiprintf_r>:
 800292c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002930:	4698      	mov	r8, r3
 8002932:	898b      	ldrh	r3, [r1, #12]
 8002934:	4607      	mov	r7, r0
 8002936:	061b      	lsls	r3, r3, #24
 8002938:	460d      	mov	r5, r1
 800293a:	4614      	mov	r4, r2
 800293c:	b09d      	sub	sp, #116	; 0x74
 800293e:	d50e      	bpl.n	800295e <_svfiprintf_r+0x32>
 8002940:	690b      	ldr	r3, [r1, #16]
 8002942:	b963      	cbnz	r3, 800295e <_svfiprintf_r+0x32>
 8002944:	2140      	movs	r1, #64	; 0x40
 8002946:	f000 fb25 	bl	8002f94 <_malloc_r>
 800294a:	6028      	str	r0, [r5, #0]
 800294c:	6128      	str	r0, [r5, #16]
 800294e:	b920      	cbnz	r0, 800295a <_svfiprintf_r+0x2e>
 8002950:	230c      	movs	r3, #12
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	e0d1      	b.n	8002afe <_svfiprintf_r+0x1d2>
 800295a:	2340      	movs	r3, #64	; 0x40
 800295c:	616b      	str	r3, [r5, #20]
 800295e:	2300      	movs	r3, #0
 8002960:	9309      	str	r3, [sp, #36]	; 0x24
 8002962:	2320      	movs	r3, #32
 8002964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002968:	2330      	movs	r3, #48	; 0x30
 800296a:	f04f 0901 	mov.w	r9, #1
 800296e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002972:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002b18 <_svfiprintf_r+0x1ec>
 8002976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800297a:	4623      	mov	r3, r4
 800297c:	469a      	mov	sl, r3
 800297e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002982:	b10a      	cbz	r2, 8002988 <_svfiprintf_r+0x5c>
 8002984:	2a25      	cmp	r2, #37	; 0x25
 8002986:	d1f9      	bne.n	800297c <_svfiprintf_r+0x50>
 8002988:	ebba 0b04 	subs.w	fp, sl, r4
 800298c:	d00b      	beq.n	80029a6 <_svfiprintf_r+0x7a>
 800298e:	465b      	mov	r3, fp
 8002990:	4622      	mov	r2, r4
 8002992:	4629      	mov	r1, r5
 8002994:	4638      	mov	r0, r7
 8002996:	f7ff ff6d 	bl	8002874 <__ssputs_r>
 800299a:	3001      	adds	r0, #1
 800299c:	f000 80aa 	beq.w	8002af4 <_svfiprintf_r+0x1c8>
 80029a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029a2:	445a      	add	r2, fp
 80029a4:	9209      	str	r2, [sp, #36]	; 0x24
 80029a6:	f89a 3000 	ldrb.w	r3, [sl]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80a2 	beq.w	8002af4 <_svfiprintf_r+0x1c8>
 80029b0:	2300      	movs	r3, #0
 80029b2:	f04f 32ff 	mov.w	r2, #4294967295
 80029b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029ba:	f10a 0a01 	add.w	sl, sl, #1
 80029be:	9304      	str	r3, [sp, #16]
 80029c0:	9307      	str	r3, [sp, #28]
 80029c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029c6:	931a      	str	r3, [sp, #104]	; 0x68
 80029c8:	4654      	mov	r4, sl
 80029ca:	2205      	movs	r2, #5
 80029cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029d0:	4851      	ldr	r0, [pc, #324]	; (8002b18 <_svfiprintf_r+0x1ec>)
 80029d2:	f000 fa41 	bl	8002e58 <memchr>
 80029d6:	9a04      	ldr	r2, [sp, #16]
 80029d8:	b9d8      	cbnz	r0, 8002a12 <_svfiprintf_r+0xe6>
 80029da:	06d0      	lsls	r0, r2, #27
 80029dc:	bf44      	itt	mi
 80029de:	2320      	movmi	r3, #32
 80029e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029e4:	0711      	lsls	r1, r2, #28
 80029e6:	bf44      	itt	mi
 80029e8:	232b      	movmi	r3, #43	; 0x2b
 80029ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029ee:	f89a 3000 	ldrb.w	r3, [sl]
 80029f2:	2b2a      	cmp	r3, #42	; 0x2a
 80029f4:	d015      	beq.n	8002a22 <_svfiprintf_r+0xf6>
 80029f6:	4654      	mov	r4, sl
 80029f8:	2000      	movs	r0, #0
 80029fa:	f04f 0c0a 	mov.w	ip, #10
 80029fe:	9a07      	ldr	r2, [sp, #28]
 8002a00:	4621      	mov	r1, r4
 8002a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a06:	3b30      	subs	r3, #48	; 0x30
 8002a08:	2b09      	cmp	r3, #9
 8002a0a:	d94e      	bls.n	8002aaa <_svfiprintf_r+0x17e>
 8002a0c:	b1b0      	cbz	r0, 8002a3c <_svfiprintf_r+0x110>
 8002a0e:	9207      	str	r2, [sp, #28]
 8002a10:	e014      	b.n	8002a3c <_svfiprintf_r+0x110>
 8002a12:	eba0 0308 	sub.w	r3, r0, r8
 8002a16:	fa09 f303 	lsl.w	r3, r9, r3
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	46a2      	mov	sl, r4
 8002a1e:	9304      	str	r3, [sp, #16]
 8002a20:	e7d2      	b.n	80029c8 <_svfiprintf_r+0x9c>
 8002a22:	9b03      	ldr	r3, [sp, #12]
 8002a24:	1d19      	adds	r1, r3, #4
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	9103      	str	r1, [sp, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bfbb      	ittet	lt
 8002a2e:	425b      	neglt	r3, r3
 8002a30:	f042 0202 	orrlt.w	r2, r2, #2
 8002a34:	9307      	strge	r3, [sp, #28]
 8002a36:	9307      	strlt	r3, [sp, #28]
 8002a38:	bfb8      	it	lt
 8002a3a:	9204      	strlt	r2, [sp, #16]
 8002a3c:	7823      	ldrb	r3, [r4, #0]
 8002a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8002a40:	d10c      	bne.n	8002a5c <_svfiprintf_r+0x130>
 8002a42:	7863      	ldrb	r3, [r4, #1]
 8002a44:	2b2a      	cmp	r3, #42	; 0x2a
 8002a46:	d135      	bne.n	8002ab4 <_svfiprintf_r+0x188>
 8002a48:	9b03      	ldr	r3, [sp, #12]
 8002a4a:	3402      	adds	r4, #2
 8002a4c:	1d1a      	adds	r2, r3, #4
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	9203      	str	r2, [sp, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bfb8      	it	lt
 8002a56:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a5a:	9305      	str	r3, [sp, #20]
 8002a5c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002b1c <_svfiprintf_r+0x1f0>
 8002a60:	2203      	movs	r2, #3
 8002a62:	4650      	mov	r0, sl
 8002a64:	7821      	ldrb	r1, [r4, #0]
 8002a66:	f000 f9f7 	bl	8002e58 <memchr>
 8002a6a:	b140      	cbz	r0, 8002a7e <_svfiprintf_r+0x152>
 8002a6c:	2340      	movs	r3, #64	; 0x40
 8002a6e:	eba0 000a 	sub.w	r0, r0, sl
 8002a72:	fa03 f000 	lsl.w	r0, r3, r0
 8002a76:	9b04      	ldr	r3, [sp, #16]
 8002a78:	3401      	adds	r4, #1
 8002a7a:	4303      	orrs	r3, r0
 8002a7c:	9304      	str	r3, [sp, #16]
 8002a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a82:	2206      	movs	r2, #6
 8002a84:	4826      	ldr	r0, [pc, #152]	; (8002b20 <_svfiprintf_r+0x1f4>)
 8002a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a8a:	f000 f9e5 	bl	8002e58 <memchr>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d038      	beq.n	8002b04 <_svfiprintf_r+0x1d8>
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <_svfiprintf_r+0x1f8>)
 8002a94:	bb1b      	cbnz	r3, 8002ade <_svfiprintf_r+0x1b2>
 8002a96:	9b03      	ldr	r3, [sp, #12]
 8002a98:	3307      	adds	r3, #7
 8002a9a:	f023 0307 	bic.w	r3, r3, #7
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	9303      	str	r3, [sp, #12]
 8002aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aa4:	4433      	add	r3, r6
 8002aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8002aa8:	e767      	b.n	800297a <_svfiprintf_r+0x4e>
 8002aaa:	460c      	mov	r4, r1
 8002aac:	2001      	movs	r0, #1
 8002aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ab2:	e7a5      	b.n	8002a00 <_svfiprintf_r+0xd4>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f04f 0c0a 	mov.w	ip, #10
 8002aba:	4619      	mov	r1, r3
 8002abc:	3401      	adds	r4, #1
 8002abe:	9305      	str	r3, [sp, #20]
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ac6:	3a30      	subs	r2, #48	; 0x30
 8002ac8:	2a09      	cmp	r2, #9
 8002aca:	d903      	bls.n	8002ad4 <_svfiprintf_r+0x1a8>
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0c5      	beq.n	8002a5c <_svfiprintf_r+0x130>
 8002ad0:	9105      	str	r1, [sp, #20]
 8002ad2:	e7c3      	b.n	8002a5c <_svfiprintf_r+0x130>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002adc:	e7f0      	b.n	8002ac0 <_svfiprintf_r+0x194>
 8002ade:	ab03      	add	r3, sp, #12
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	462a      	mov	r2, r5
 8002ae4:	4638      	mov	r0, r7
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <_svfiprintf_r+0x1fc>)
 8002ae8:	a904      	add	r1, sp, #16
 8002aea:	f3af 8000 	nop.w
 8002aee:	1c42      	adds	r2, r0, #1
 8002af0:	4606      	mov	r6, r0
 8002af2:	d1d6      	bne.n	8002aa2 <_svfiprintf_r+0x176>
 8002af4:	89ab      	ldrh	r3, [r5, #12]
 8002af6:	065b      	lsls	r3, r3, #25
 8002af8:	f53f af2c 	bmi.w	8002954 <_svfiprintf_r+0x28>
 8002afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002afe:	b01d      	add	sp, #116	; 0x74
 8002b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b04:	ab03      	add	r3, sp, #12
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	462a      	mov	r2, r5
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <_svfiprintf_r+0x1fc>)
 8002b0e:	a904      	add	r1, sp, #16
 8002b10:	f000 f87c 	bl	8002c0c <_printf_i>
 8002b14:	e7eb      	b.n	8002aee <_svfiprintf_r+0x1c2>
 8002b16:	bf00      	nop
 8002b18:	08003194 	.word	0x08003194
 8002b1c:	0800319a 	.word	0x0800319a
 8002b20:	0800319e 	.word	0x0800319e
 8002b24:	00000000 	.word	0x00000000
 8002b28:	08002875 	.word	0x08002875

08002b2c <_printf_common>:
 8002b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b30:	4616      	mov	r6, r2
 8002b32:	4699      	mov	r9, r3
 8002b34:	688a      	ldr	r2, [r1, #8]
 8002b36:	690b      	ldr	r3, [r1, #16]
 8002b38:	4607      	mov	r7, r0
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	bfb8      	it	lt
 8002b3e:	4613      	movlt	r3, r2
 8002b40:	6033      	str	r3, [r6, #0]
 8002b42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b46:	460c      	mov	r4, r1
 8002b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b4c:	b10a      	cbz	r2, 8002b52 <_printf_common+0x26>
 8002b4e:	3301      	adds	r3, #1
 8002b50:	6033      	str	r3, [r6, #0]
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	0699      	lsls	r1, r3, #26
 8002b56:	bf42      	ittt	mi
 8002b58:	6833      	ldrmi	r3, [r6, #0]
 8002b5a:	3302      	addmi	r3, #2
 8002b5c:	6033      	strmi	r3, [r6, #0]
 8002b5e:	6825      	ldr	r5, [r4, #0]
 8002b60:	f015 0506 	ands.w	r5, r5, #6
 8002b64:	d106      	bne.n	8002b74 <_printf_common+0x48>
 8002b66:	f104 0a19 	add.w	sl, r4, #25
 8002b6a:	68e3      	ldr	r3, [r4, #12]
 8002b6c:	6832      	ldr	r2, [r6, #0]
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	42ab      	cmp	r3, r5
 8002b72:	dc28      	bgt.n	8002bc6 <_printf_common+0x9a>
 8002b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b78:	1e13      	subs	r3, r2, #0
 8002b7a:	6822      	ldr	r2, [r4, #0]
 8002b7c:	bf18      	it	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	0692      	lsls	r2, r2, #26
 8002b82:	d42d      	bmi.n	8002be0 <_printf_common+0xb4>
 8002b84:	4649      	mov	r1, r9
 8002b86:	4638      	mov	r0, r7
 8002b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b8c:	47c0      	blx	r8
 8002b8e:	3001      	adds	r0, #1
 8002b90:	d020      	beq.n	8002bd4 <_printf_common+0xa8>
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	68e5      	ldr	r5, [r4, #12]
 8002b96:	f003 0306 	and.w	r3, r3, #6
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	bf18      	it	ne
 8002b9e:	2500      	movne	r5, #0
 8002ba0:	6832      	ldr	r2, [r6, #0]
 8002ba2:	f04f 0600 	mov.w	r6, #0
 8002ba6:	68a3      	ldr	r3, [r4, #8]
 8002ba8:	bf08      	it	eq
 8002baa:	1aad      	subeq	r5, r5, r2
 8002bac:	6922      	ldr	r2, [r4, #16]
 8002bae:	bf08      	it	eq
 8002bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	bfc4      	itt	gt
 8002bb8:	1a9b      	subgt	r3, r3, r2
 8002bba:	18ed      	addgt	r5, r5, r3
 8002bbc:	341a      	adds	r4, #26
 8002bbe:	42b5      	cmp	r5, r6
 8002bc0:	d11a      	bne.n	8002bf8 <_printf_common+0xcc>
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	e008      	b.n	8002bd8 <_printf_common+0xac>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	4652      	mov	r2, sl
 8002bca:	4649      	mov	r1, r9
 8002bcc:	4638      	mov	r0, r7
 8002bce:	47c0      	blx	r8
 8002bd0:	3001      	adds	r0, #1
 8002bd2:	d103      	bne.n	8002bdc <_printf_common+0xb0>
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bdc:	3501      	adds	r5, #1
 8002bde:	e7c4      	b.n	8002b6a <_printf_common+0x3e>
 8002be0:	2030      	movs	r0, #48	; 0x30
 8002be2:	18e1      	adds	r1, r4, r3
 8002be4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bee:	4422      	add	r2, r4
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bf6:	e7c5      	b.n	8002b84 <_printf_common+0x58>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	4622      	mov	r2, r4
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	4638      	mov	r0, r7
 8002c00:	47c0      	blx	r8
 8002c02:	3001      	adds	r0, #1
 8002c04:	d0e6      	beq.n	8002bd4 <_printf_common+0xa8>
 8002c06:	3601      	adds	r6, #1
 8002c08:	e7d9      	b.n	8002bbe <_printf_common+0x92>
	...

08002c0c <_printf_i>:
 8002c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c10:	7e0f      	ldrb	r7, [r1, #24]
 8002c12:	4691      	mov	r9, r2
 8002c14:	2f78      	cmp	r7, #120	; 0x78
 8002c16:	4680      	mov	r8, r0
 8002c18:	460c      	mov	r4, r1
 8002c1a:	469a      	mov	sl, r3
 8002c1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c22:	d807      	bhi.n	8002c34 <_printf_i+0x28>
 8002c24:	2f62      	cmp	r7, #98	; 0x62
 8002c26:	d80a      	bhi.n	8002c3e <_printf_i+0x32>
 8002c28:	2f00      	cmp	r7, #0
 8002c2a:	f000 80d9 	beq.w	8002de0 <_printf_i+0x1d4>
 8002c2e:	2f58      	cmp	r7, #88	; 0x58
 8002c30:	f000 80a4 	beq.w	8002d7c <_printf_i+0x170>
 8002c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c3c:	e03a      	b.n	8002cb4 <_printf_i+0xa8>
 8002c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c42:	2b15      	cmp	r3, #21
 8002c44:	d8f6      	bhi.n	8002c34 <_printf_i+0x28>
 8002c46:	a101      	add	r1, pc, #4	; (adr r1, 8002c4c <_printf_i+0x40>)
 8002c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c4c:	08002ca5 	.word	0x08002ca5
 8002c50:	08002cb9 	.word	0x08002cb9
 8002c54:	08002c35 	.word	0x08002c35
 8002c58:	08002c35 	.word	0x08002c35
 8002c5c:	08002c35 	.word	0x08002c35
 8002c60:	08002c35 	.word	0x08002c35
 8002c64:	08002cb9 	.word	0x08002cb9
 8002c68:	08002c35 	.word	0x08002c35
 8002c6c:	08002c35 	.word	0x08002c35
 8002c70:	08002c35 	.word	0x08002c35
 8002c74:	08002c35 	.word	0x08002c35
 8002c78:	08002dc7 	.word	0x08002dc7
 8002c7c:	08002ce9 	.word	0x08002ce9
 8002c80:	08002da9 	.word	0x08002da9
 8002c84:	08002c35 	.word	0x08002c35
 8002c88:	08002c35 	.word	0x08002c35
 8002c8c:	08002de9 	.word	0x08002de9
 8002c90:	08002c35 	.word	0x08002c35
 8002c94:	08002ce9 	.word	0x08002ce9
 8002c98:	08002c35 	.word	0x08002c35
 8002c9c:	08002c35 	.word	0x08002c35
 8002ca0:	08002db1 	.word	0x08002db1
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	1d1a      	adds	r2, r3, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	602a      	str	r2, [r5, #0]
 8002cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0a4      	b.n	8002e02 <_printf_i+0x1f6>
 8002cb8:	6820      	ldr	r0, [r4, #0]
 8002cba:	6829      	ldr	r1, [r5, #0]
 8002cbc:	0606      	lsls	r6, r0, #24
 8002cbe:	f101 0304 	add.w	r3, r1, #4
 8002cc2:	d50a      	bpl.n	8002cda <_printf_i+0xce>
 8002cc4:	680e      	ldr	r6, [r1, #0]
 8002cc6:	602b      	str	r3, [r5, #0]
 8002cc8:	2e00      	cmp	r6, #0
 8002cca:	da03      	bge.n	8002cd4 <_printf_i+0xc8>
 8002ccc:	232d      	movs	r3, #45	; 0x2d
 8002cce:	4276      	negs	r6, r6
 8002cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cd4:	230a      	movs	r3, #10
 8002cd6:	485e      	ldr	r0, [pc, #376]	; (8002e50 <_printf_i+0x244>)
 8002cd8:	e019      	b.n	8002d0e <_printf_i+0x102>
 8002cda:	680e      	ldr	r6, [r1, #0]
 8002cdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ce0:	602b      	str	r3, [r5, #0]
 8002ce2:	bf18      	it	ne
 8002ce4:	b236      	sxthne	r6, r6
 8002ce6:	e7ef      	b.n	8002cc8 <_printf_i+0xbc>
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	6820      	ldr	r0, [r4, #0]
 8002cec:	1d19      	adds	r1, r3, #4
 8002cee:	6029      	str	r1, [r5, #0]
 8002cf0:	0601      	lsls	r1, r0, #24
 8002cf2:	d501      	bpl.n	8002cf8 <_printf_i+0xec>
 8002cf4:	681e      	ldr	r6, [r3, #0]
 8002cf6:	e002      	b.n	8002cfe <_printf_i+0xf2>
 8002cf8:	0646      	lsls	r6, r0, #25
 8002cfa:	d5fb      	bpl.n	8002cf4 <_printf_i+0xe8>
 8002cfc:	881e      	ldrh	r6, [r3, #0]
 8002cfe:	2f6f      	cmp	r7, #111	; 0x6f
 8002d00:	bf0c      	ite	eq
 8002d02:	2308      	moveq	r3, #8
 8002d04:	230a      	movne	r3, #10
 8002d06:	4852      	ldr	r0, [pc, #328]	; (8002e50 <_printf_i+0x244>)
 8002d08:	2100      	movs	r1, #0
 8002d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d0e:	6865      	ldr	r5, [r4, #4]
 8002d10:	2d00      	cmp	r5, #0
 8002d12:	bfa8      	it	ge
 8002d14:	6821      	ldrge	r1, [r4, #0]
 8002d16:	60a5      	str	r5, [r4, #8]
 8002d18:	bfa4      	itt	ge
 8002d1a:	f021 0104 	bicge.w	r1, r1, #4
 8002d1e:	6021      	strge	r1, [r4, #0]
 8002d20:	b90e      	cbnz	r6, 8002d26 <_printf_i+0x11a>
 8002d22:	2d00      	cmp	r5, #0
 8002d24:	d04d      	beq.n	8002dc2 <_printf_i+0x1b6>
 8002d26:	4615      	mov	r5, r2
 8002d28:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d2c:	fb03 6711 	mls	r7, r3, r1, r6
 8002d30:	5dc7      	ldrb	r7, [r0, r7]
 8002d32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d36:	4637      	mov	r7, r6
 8002d38:	42bb      	cmp	r3, r7
 8002d3a:	460e      	mov	r6, r1
 8002d3c:	d9f4      	bls.n	8002d28 <_printf_i+0x11c>
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d10b      	bne.n	8002d5a <_printf_i+0x14e>
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	07de      	lsls	r6, r3, #31
 8002d46:	d508      	bpl.n	8002d5a <_printf_i+0x14e>
 8002d48:	6923      	ldr	r3, [r4, #16]
 8002d4a:	6861      	ldr	r1, [r4, #4]
 8002d4c:	4299      	cmp	r1, r3
 8002d4e:	bfde      	ittt	le
 8002d50:	2330      	movle	r3, #48	; 0x30
 8002d52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d5a:	1b52      	subs	r2, r2, r5
 8002d5c:	6122      	str	r2, [r4, #16]
 8002d5e:	464b      	mov	r3, r9
 8002d60:	4621      	mov	r1, r4
 8002d62:	4640      	mov	r0, r8
 8002d64:	f8cd a000 	str.w	sl, [sp]
 8002d68:	aa03      	add	r2, sp, #12
 8002d6a:	f7ff fedf 	bl	8002b2c <_printf_common>
 8002d6e:	3001      	adds	r0, #1
 8002d70:	d14c      	bne.n	8002e0c <_printf_i+0x200>
 8002d72:	f04f 30ff 	mov.w	r0, #4294967295
 8002d76:	b004      	add	sp, #16
 8002d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d7c:	4834      	ldr	r0, [pc, #208]	; (8002e50 <_printf_i+0x244>)
 8002d7e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d82:	6829      	ldr	r1, [r5, #0]
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d8a:	6029      	str	r1, [r5, #0]
 8002d8c:	061d      	lsls	r5, r3, #24
 8002d8e:	d514      	bpl.n	8002dba <_printf_i+0x1ae>
 8002d90:	07df      	lsls	r7, r3, #31
 8002d92:	bf44      	itt	mi
 8002d94:	f043 0320 	orrmi.w	r3, r3, #32
 8002d98:	6023      	strmi	r3, [r4, #0]
 8002d9a:	b91e      	cbnz	r6, 8002da4 <_printf_i+0x198>
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	f023 0320 	bic.w	r3, r3, #32
 8002da2:	6023      	str	r3, [r4, #0]
 8002da4:	2310      	movs	r3, #16
 8002da6:	e7af      	b.n	8002d08 <_printf_i+0xfc>
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	f043 0320 	orr.w	r3, r3, #32
 8002dae:	6023      	str	r3, [r4, #0]
 8002db0:	2378      	movs	r3, #120	; 0x78
 8002db2:	4828      	ldr	r0, [pc, #160]	; (8002e54 <_printf_i+0x248>)
 8002db4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002db8:	e7e3      	b.n	8002d82 <_printf_i+0x176>
 8002dba:	0659      	lsls	r1, r3, #25
 8002dbc:	bf48      	it	mi
 8002dbe:	b2b6      	uxthmi	r6, r6
 8002dc0:	e7e6      	b.n	8002d90 <_printf_i+0x184>
 8002dc2:	4615      	mov	r5, r2
 8002dc4:	e7bb      	b.n	8002d3e <_printf_i+0x132>
 8002dc6:	682b      	ldr	r3, [r5, #0]
 8002dc8:	6826      	ldr	r6, [r4, #0]
 8002dca:	1d18      	adds	r0, r3, #4
 8002dcc:	6961      	ldr	r1, [r4, #20]
 8002dce:	6028      	str	r0, [r5, #0]
 8002dd0:	0635      	lsls	r5, r6, #24
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	d501      	bpl.n	8002dda <_printf_i+0x1ce>
 8002dd6:	6019      	str	r1, [r3, #0]
 8002dd8:	e002      	b.n	8002de0 <_printf_i+0x1d4>
 8002dda:	0670      	lsls	r0, r6, #25
 8002ddc:	d5fb      	bpl.n	8002dd6 <_printf_i+0x1ca>
 8002dde:	8019      	strh	r1, [r3, #0]
 8002de0:	2300      	movs	r3, #0
 8002de2:	4615      	mov	r5, r2
 8002de4:	6123      	str	r3, [r4, #16]
 8002de6:	e7ba      	b.n	8002d5e <_printf_i+0x152>
 8002de8:	682b      	ldr	r3, [r5, #0]
 8002dea:	2100      	movs	r1, #0
 8002dec:	1d1a      	adds	r2, r3, #4
 8002dee:	602a      	str	r2, [r5, #0]
 8002df0:	681d      	ldr	r5, [r3, #0]
 8002df2:	6862      	ldr	r2, [r4, #4]
 8002df4:	4628      	mov	r0, r5
 8002df6:	f000 f82f 	bl	8002e58 <memchr>
 8002dfa:	b108      	cbz	r0, 8002e00 <_printf_i+0x1f4>
 8002dfc:	1b40      	subs	r0, r0, r5
 8002dfe:	6060      	str	r0, [r4, #4]
 8002e00:	6863      	ldr	r3, [r4, #4]
 8002e02:	6123      	str	r3, [r4, #16]
 8002e04:	2300      	movs	r3, #0
 8002e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e0a:	e7a8      	b.n	8002d5e <_printf_i+0x152>
 8002e0c:	462a      	mov	r2, r5
 8002e0e:	4649      	mov	r1, r9
 8002e10:	4640      	mov	r0, r8
 8002e12:	6923      	ldr	r3, [r4, #16]
 8002e14:	47d0      	blx	sl
 8002e16:	3001      	adds	r0, #1
 8002e18:	d0ab      	beq.n	8002d72 <_printf_i+0x166>
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	079b      	lsls	r3, r3, #30
 8002e1e:	d413      	bmi.n	8002e48 <_printf_i+0x23c>
 8002e20:	68e0      	ldr	r0, [r4, #12]
 8002e22:	9b03      	ldr	r3, [sp, #12]
 8002e24:	4298      	cmp	r0, r3
 8002e26:	bfb8      	it	lt
 8002e28:	4618      	movlt	r0, r3
 8002e2a:	e7a4      	b.n	8002d76 <_printf_i+0x16a>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	4632      	mov	r2, r6
 8002e30:	4649      	mov	r1, r9
 8002e32:	4640      	mov	r0, r8
 8002e34:	47d0      	blx	sl
 8002e36:	3001      	adds	r0, #1
 8002e38:	d09b      	beq.n	8002d72 <_printf_i+0x166>
 8002e3a:	3501      	adds	r5, #1
 8002e3c:	68e3      	ldr	r3, [r4, #12]
 8002e3e:	9903      	ldr	r1, [sp, #12]
 8002e40:	1a5b      	subs	r3, r3, r1
 8002e42:	42ab      	cmp	r3, r5
 8002e44:	dcf2      	bgt.n	8002e2c <_printf_i+0x220>
 8002e46:	e7eb      	b.n	8002e20 <_printf_i+0x214>
 8002e48:	2500      	movs	r5, #0
 8002e4a:	f104 0619 	add.w	r6, r4, #25
 8002e4e:	e7f5      	b.n	8002e3c <_printf_i+0x230>
 8002e50:	080031a5 	.word	0x080031a5
 8002e54:	080031b6 	.word	0x080031b6

08002e58 <memchr>:
 8002e58:	4603      	mov	r3, r0
 8002e5a:	b510      	push	{r4, lr}
 8002e5c:	b2c9      	uxtb	r1, r1
 8002e5e:	4402      	add	r2, r0
 8002e60:	4293      	cmp	r3, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	d101      	bne.n	8002e6a <memchr+0x12>
 8002e66:	2000      	movs	r0, #0
 8002e68:	e003      	b.n	8002e72 <memchr+0x1a>
 8002e6a:	7804      	ldrb	r4, [r0, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	428c      	cmp	r4, r1
 8002e70:	d1f6      	bne.n	8002e60 <memchr+0x8>
 8002e72:	bd10      	pop	{r4, pc}

08002e74 <memcpy>:
 8002e74:	440a      	add	r2, r1
 8002e76:	4291      	cmp	r1, r2
 8002e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e7c:	d100      	bne.n	8002e80 <memcpy+0xc>
 8002e7e:	4770      	bx	lr
 8002e80:	b510      	push	{r4, lr}
 8002e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e86:	4291      	cmp	r1, r2
 8002e88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e8c:	d1f9      	bne.n	8002e82 <memcpy+0xe>
 8002e8e:	bd10      	pop	{r4, pc}

08002e90 <memmove>:
 8002e90:	4288      	cmp	r0, r1
 8002e92:	b510      	push	{r4, lr}
 8002e94:	eb01 0402 	add.w	r4, r1, r2
 8002e98:	d902      	bls.n	8002ea0 <memmove+0x10>
 8002e9a:	4284      	cmp	r4, r0
 8002e9c:	4623      	mov	r3, r4
 8002e9e:	d807      	bhi.n	8002eb0 <memmove+0x20>
 8002ea0:	1e43      	subs	r3, r0, #1
 8002ea2:	42a1      	cmp	r1, r4
 8002ea4:	d008      	beq.n	8002eb8 <memmove+0x28>
 8002ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002eae:	e7f8      	b.n	8002ea2 <memmove+0x12>
 8002eb0:	4601      	mov	r1, r0
 8002eb2:	4402      	add	r2, r0
 8002eb4:	428a      	cmp	r2, r1
 8002eb6:	d100      	bne.n	8002eba <memmove+0x2a>
 8002eb8:	bd10      	pop	{r4, pc}
 8002eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ec2:	e7f7      	b.n	8002eb4 <memmove+0x24>

08002ec4 <_free_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	2900      	cmp	r1, #0
 8002eca:	d040      	beq.n	8002f4e <_free_r+0x8a>
 8002ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ed0:	1f0c      	subs	r4, r1, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bfb8      	it	lt
 8002ed6:	18e4      	addlt	r4, r4, r3
 8002ed8:	f000 f910 	bl	80030fc <__malloc_lock>
 8002edc:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <_free_r+0x8c>)
 8002ede:	6813      	ldr	r3, [r2, #0]
 8002ee0:	b933      	cbnz	r3, 8002ef0 <_free_r+0x2c>
 8002ee2:	6063      	str	r3, [r4, #4]
 8002ee4:	6014      	str	r4, [r2, #0]
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eec:	f000 b90c 	b.w	8003108 <__malloc_unlock>
 8002ef0:	42a3      	cmp	r3, r4
 8002ef2:	d908      	bls.n	8002f06 <_free_r+0x42>
 8002ef4:	6820      	ldr	r0, [r4, #0]
 8002ef6:	1821      	adds	r1, r4, r0
 8002ef8:	428b      	cmp	r3, r1
 8002efa:	bf01      	itttt	eq
 8002efc:	6819      	ldreq	r1, [r3, #0]
 8002efe:	685b      	ldreq	r3, [r3, #4]
 8002f00:	1809      	addeq	r1, r1, r0
 8002f02:	6021      	streq	r1, [r4, #0]
 8002f04:	e7ed      	b.n	8002ee2 <_free_r+0x1e>
 8002f06:	461a      	mov	r2, r3
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	b10b      	cbz	r3, 8002f10 <_free_r+0x4c>
 8002f0c:	42a3      	cmp	r3, r4
 8002f0e:	d9fa      	bls.n	8002f06 <_free_r+0x42>
 8002f10:	6811      	ldr	r1, [r2, #0]
 8002f12:	1850      	adds	r0, r2, r1
 8002f14:	42a0      	cmp	r0, r4
 8002f16:	d10b      	bne.n	8002f30 <_free_r+0x6c>
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	4401      	add	r1, r0
 8002f1c:	1850      	adds	r0, r2, r1
 8002f1e:	4283      	cmp	r3, r0
 8002f20:	6011      	str	r1, [r2, #0]
 8002f22:	d1e0      	bne.n	8002ee6 <_free_r+0x22>
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4401      	add	r1, r0
 8002f2a:	6011      	str	r1, [r2, #0]
 8002f2c:	6053      	str	r3, [r2, #4]
 8002f2e:	e7da      	b.n	8002ee6 <_free_r+0x22>
 8002f30:	d902      	bls.n	8002f38 <_free_r+0x74>
 8002f32:	230c      	movs	r3, #12
 8002f34:	602b      	str	r3, [r5, #0]
 8002f36:	e7d6      	b.n	8002ee6 <_free_r+0x22>
 8002f38:	6820      	ldr	r0, [r4, #0]
 8002f3a:	1821      	adds	r1, r4, r0
 8002f3c:	428b      	cmp	r3, r1
 8002f3e:	bf01      	itttt	eq
 8002f40:	6819      	ldreq	r1, [r3, #0]
 8002f42:	685b      	ldreq	r3, [r3, #4]
 8002f44:	1809      	addeq	r1, r1, r0
 8002f46:	6021      	streq	r1, [r4, #0]
 8002f48:	6063      	str	r3, [r4, #4]
 8002f4a:	6054      	str	r4, [r2, #4]
 8002f4c:	e7cb      	b.n	8002ee6 <_free_r+0x22>
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
 8002f50:	20000150 	.word	0x20000150

08002f54 <sbrk_aligned>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	4e0e      	ldr	r6, [pc, #56]	; (8002f90 <sbrk_aligned+0x3c>)
 8002f58:	460c      	mov	r4, r1
 8002f5a:	6831      	ldr	r1, [r6, #0]
 8002f5c:	4605      	mov	r5, r0
 8002f5e:	b911      	cbnz	r1, 8002f66 <sbrk_aligned+0x12>
 8002f60:	f000 f8bc 	bl	80030dc <_sbrk_r>
 8002f64:	6030      	str	r0, [r6, #0]
 8002f66:	4621      	mov	r1, r4
 8002f68:	4628      	mov	r0, r5
 8002f6a:	f000 f8b7 	bl	80030dc <_sbrk_r>
 8002f6e:	1c43      	adds	r3, r0, #1
 8002f70:	d00a      	beq.n	8002f88 <sbrk_aligned+0x34>
 8002f72:	1cc4      	adds	r4, r0, #3
 8002f74:	f024 0403 	bic.w	r4, r4, #3
 8002f78:	42a0      	cmp	r0, r4
 8002f7a:	d007      	beq.n	8002f8c <sbrk_aligned+0x38>
 8002f7c:	1a21      	subs	r1, r4, r0
 8002f7e:	4628      	mov	r0, r5
 8002f80:	f000 f8ac 	bl	80030dc <_sbrk_r>
 8002f84:	3001      	adds	r0, #1
 8002f86:	d101      	bne.n	8002f8c <sbrk_aligned+0x38>
 8002f88:	f04f 34ff 	mov.w	r4, #4294967295
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}
 8002f90:	20000154 	.word	0x20000154

08002f94 <_malloc_r>:
 8002f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f98:	1ccd      	adds	r5, r1, #3
 8002f9a:	f025 0503 	bic.w	r5, r5, #3
 8002f9e:	3508      	adds	r5, #8
 8002fa0:	2d0c      	cmp	r5, #12
 8002fa2:	bf38      	it	cc
 8002fa4:	250c      	movcc	r5, #12
 8002fa6:	2d00      	cmp	r5, #0
 8002fa8:	4607      	mov	r7, r0
 8002faa:	db01      	blt.n	8002fb0 <_malloc_r+0x1c>
 8002fac:	42a9      	cmp	r1, r5
 8002fae:	d905      	bls.n	8002fbc <_malloc_r+0x28>
 8002fb0:	230c      	movs	r3, #12
 8002fb2:	2600      	movs	r6, #0
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fbc:	4e2e      	ldr	r6, [pc, #184]	; (8003078 <_malloc_r+0xe4>)
 8002fbe:	f000 f89d 	bl	80030fc <__malloc_lock>
 8002fc2:	6833      	ldr	r3, [r6, #0]
 8002fc4:	461c      	mov	r4, r3
 8002fc6:	bb34      	cbnz	r4, 8003016 <_malloc_r+0x82>
 8002fc8:	4629      	mov	r1, r5
 8002fca:	4638      	mov	r0, r7
 8002fcc:	f7ff ffc2 	bl	8002f54 <sbrk_aligned>
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	d14d      	bne.n	8003072 <_malloc_r+0xde>
 8002fd6:	6834      	ldr	r4, [r6, #0]
 8002fd8:	4626      	mov	r6, r4
 8002fda:	2e00      	cmp	r6, #0
 8002fdc:	d140      	bne.n	8003060 <_malloc_r+0xcc>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	4631      	mov	r1, r6
 8002fe2:	4638      	mov	r0, r7
 8002fe4:	eb04 0803 	add.w	r8, r4, r3
 8002fe8:	f000 f878 	bl	80030dc <_sbrk_r>
 8002fec:	4580      	cmp	r8, r0
 8002fee:	d13a      	bne.n	8003066 <_malloc_r+0xd2>
 8002ff0:	6821      	ldr	r1, [r4, #0]
 8002ff2:	3503      	adds	r5, #3
 8002ff4:	1a6d      	subs	r5, r5, r1
 8002ff6:	f025 0503 	bic.w	r5, r5, #3
 8002ffa:	3508      	adds	r5, #8
 8002ffc:	2d0c      	cmp	r5, #12
 8002ffe:	bf38      	it	cc
 8003000:	250c      	movcc	r5, #12
 8003002:	4638      	mov	r0, r7
 8003004:	4629      	mov	r1, r5
 8003006:	f7ff ffa5 	bl	8002f54 <sbrk_aligned>
 800300a:	3001      	adds	r0, #1
 800300c:	d02b      	beq.n	8003066 <_malloc_r+0xd2>
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	442b      	add	r3, r5
 8003012:	6023      	str	r3, [r4, #0]
 8003014:	e00e      	b.n	8003034 <_malloc_r+0xa0>
 8003016:	6822      	ldr	r2, [r4, #0]
 8003018:	1b52      	subs	r2, r2, r5
 800301a:	d41e      	bmi.n	800305a <_malloc_r+0xc6>
 800301c:	2a0b      	cmp	r2, #11
 800301e:	d916      	bls.n	800304e <_malloc_r+0xba>
 8003020:	1961      	adds	r1, r4, r5
 8003022:	42a3      	cmp	r3, r4
 8003024:	6025      	str	r5, [r4, #0]
 8003026:	bf18      	it	ne
 8003028:	6059      	strne	r1, [r3, #4]
 800302a:	6863      	ldr	r3, [r4, #4]
 800302c:	bf08      	it	eq
 800302e:	6031      	streq	r1, [r6, #0]
 8003030:	5162      	str	r2, [r4, r5]
 8003032:	604b      	str	r3, [r1, #4]
 8003034:	4638      	mov	r0, r7
 8003036:	f104 060b 	add.w	r6, r4, #11
 800303a:	f000 f865 	bl	8003108 <__malloc_unlock>
 800303e:	f026 0607 	bic.w	r6, r6, #7
 8003042:	1d23      	adds	r3, r4, #4
 8003044:	1af2      	subs	r2, r6, r3
 8003046:	d0b6      	beq.n	8002fb6 <_malloc_r+0x22>
 8003048:	1b9b      	subs	r3, r3, r6
 800304a:	50a3      	str	r3, [r4, r2]
 800304c:	e7b3      	b.n	8002fb6 <_malloc_r+0x22>
 800304e:	6862      	ldr	r2, [r4, #4]
 8003050:	42a3      	cmp	r3, r4
 8003052:	bf0c      	ite	eq
 8003054:	6032      	streq	r2, [r6, #0]
 8003056:	605a      	strne	r2, [r3, #4]
 8003058:	e7ec      	b.n	8003034 <_malloc_r+0xa0>
 800305a:	4623      	mov	r3, r4
 800305c:	6864      	ldr	r4, [r4, #4]
 800305e:	e7b2      	b.n	8002fc6 <_malloc_r+0x32>
 8003060:	4634      	mov	r4, r6
 8003062:	6876      	ldr	r6, [r6, #4]
 8003064:	e7b9      	b.n	8002fda <_malloc_r+0x46>
 8003066:	230c      	movs	r3, #12
 8003068:	4638      	mov	r0, r7
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	f000 f84c 	bl	8003108 <__malloc_unlock>
 8003070:	e7a1      	b.n	8002fb6 <_malloc_r+0x22>
 8003072:	6025      	str	r5, [r4, #0]
 8003074:	e7de      	b.n	8003034 <_malloc_r+0xa0>
 8003076:	bf00      	nop
 8003078:	20000150 	.word	0x20000150

0800307c <_realloc_r>:
 800307c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003080:	4680      	mov	r8, r0
 8003082:	4614      	mov	r4, r2
 8003084:	460e      	mov	r6, r1
 8003086:	b921      	cbnz	r1, 8003092 <_realloc_r+0x16>
 8003088:	4611      	mov	r1, r2
 800308a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800308e:	f7ff bf81 	b.w	8002f94 <_malloc_r>
 8003092:	b92a      	cbnz	r2, 80030a0 <_realloc_r+0x24>
 8003094:	f7ff ff16 	bl	8002ec4 <_free_r>
 8003098:	4625      	mov	r5, r4
 800309a:	4628      	mov	r0, r5
 800309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030a0:	f000 f838 	bl	8003114 <_malloc_usable_size_r>
 80030a4:	4284      	cmp	r4, r0
 80030a6:	4607      	mov	r7, r0
 80030a8:	d802      	bhi.n	80030b0 <_realloc_r+0x34>
 80030aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80030ae:	d812      	bhi.n	80030d6 <_realloc_r+0x5a>
 80030b0:	4621      	mov	r1, r4
 80030b2:	4640      	mov	r0, r8
 80030b4:	f7ff ff6e 	bl	8002f94 <_malloc_r>
 80030b8:	4605      	mov	r5, r0
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d0ed      	beq.n	800309a <_realloc_r+0x1e>
 80030be:	42bc      	cmp	r4, r7
 80030c0:	4622      	mov	r2, r4
 80030c2:	4631      	mov	r1, r6
 80030c4:	bf28      	it	cs
 80030c6:	463a      	movcs	r2, r7
 80030c8:	f7ff fed4 	bl	8002e74 <memcpy>
 80030cc:	4631      	mov	r1, r6
 80030ce:	4640      	mov	r0, r8
 80030d0:	f7ff fef8 	bl	8002ec4 <_free_r>
 80030d4:	e7e1      	b.n	800309a <_realloc_r+0x1e>
 80030d6:	4635      	mov	r5, r6
 80030d8:	e7df      	b.n	800309a <_realloc_r+0x1e>
	...

080030dc <_sbrk_r>:
 80030dc:	b538      	push	{r3, r4, r5, lr}
 80030de:	2300      	movs	r3, #0
 80030e0:	4d05      	ldr	r5, [pc, #20]	; (80030f8 <_sbrk_r+0x1c>)
 80030e2:	4604      	mov	r4, r0
 80030e4:	4608      	mov	r0, r1
 80030e6:	602b      	str	r3, [r5, #0]
 80030e8:	f7fd fbf0 	bl	80008cc <_sbrk>
 80030ec:	1c43      	adds	r3, r0, #1
 80030ee:	d102      	bne.n	80030f6 <_sbrk_r+0x1a>
 80030f0:	682b      	ldr	r3, [r5, #0]
 80030f2:	b103      	cbz	r3, 80030f6 <_sbrk_r+0x1a>
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	bd38      	pop	{r3, r4, r5, pc}
 80030f8:	20000158 	.word	0x20000158

080030fc <__malloc_lock>:
 80030fc:	4801      	ldr	r0, [pc, #4]	; (8003104 <__malloc_lock+0x8>)
 80030fe:	f000 b811 	b.w	8003124 <__retarget_lock_acquire_recursive>
 8003102:	bf00      	nop
 8003104:	2000015c 	.word	0x2000015c

08003108 <__malloc_unlock>:
 8003108:	4801      	ldr	r0, [pc, #4]	; (8003110 <__malloc_unlock+0x8>)
 800310a:	f000 b80c 	b.w	8003126 <__retarget_lock_release_recursive>
 800310e:	bf00      	nop
 8003110:	2000015c 	.word	0x2000015c

08003114 <_malloc_usable_size_r>:
 8003114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003118:	1f18      	subs	r0, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	bfbc      	itt	lt
 800311e:	580b      	ldrlt	r3, [r1, r0]
 8003120:	18c0      	addlt	r0, r0, r3
 8003122:	4770      	bx	lr

08003124 <__retarget_lock_acquire_recursive>:
 8003124:	4770      	bx	lr

08003126 <__retarget_lock_release_recursive>:
 8003126:	4770      	bx	lr

08003128 <_init>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	bf00      	nop
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr

08003134 <_fini>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr
