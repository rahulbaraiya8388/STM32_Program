
NPK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003070  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032e8  080032e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080032e8  080032e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032f0  080032f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080032f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000078  08003370  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003370  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b08  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014a3  00000000  00000000  00025ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00027050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  00027728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015988  00000000  00000000  00027d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000072d8  00000000  00000000  0003d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c67  00000000  00000000  000449d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c763f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022e0  00000000  00000000  000c7690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000078 	.word	0x20000078
 8000158:	00000000 	.word	0x00000000
 800015c:	08003194 	.word	0x08003194

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000007c 	.word	0x2000007c
 8000178:	08003194 	.word	0x08003194

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f000 fa94 	bl	80009b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f833 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f000 f8a9 	bl	80005e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000496:	f000 f87d 	bl	8000594 <MX_USART2_UART_Init>


  // Read values
   uint8_t val1,val2,val3;

    val1 = nitrogen();
 800049a:	f000 f8e3 	bl	8000664 <nitrogen>
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(250);
 80004a2:	20fa      	movs	r0, #250	; 0xfa
 80004a4:	f000 faf6 	bl	8000a94 <HAL_Delay>

//    val2 = phosphorous();
    HAL_Delay(250);
 80004a8:	20fa      	movs	r0, #250	; 0xfa
 80004aa:	f000 faf3 	bl	8000a94 <HAL_Delay>

//    val3 = potassium();
    HAL_Delay(250);
 80004ae:	20fa      	movs	r0, #250	; 0xfa
 80004b0:	f000 faf0 	bl	8000a94 <HAL_Delay>

    // Print values to the serial monitor

      printf("Nitrogen: ");
 80004b4:	480c      	ldr	r0, [pc, #48]	; (80004e8 <main+0x64>)
 80004b6:	f001 fe63 	bl	8002180 <iprintf>
      printf("%d  mg/kg",val1);
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	4619      	mov	r1, r3
 80004be:	480b      	ldr	r0, [pc, #44]	; (80004ec <main+0x68>)
 80004c0:	f001 fe5e 	bl	8002180 <iprintf>

      printf("Phosphorous: ");
 80004c4:	480a      	ldr	r0, [pc, #40]	; (80004f0 <main+0x6c>)
 80004c6:	f001 fe5b 	bl	8002180 <iprintf>
      printf("%d  mg/kg",val2);
 80004ca:	79bb      	ldrb	r3, [r7, #6]
 80004cc:	4619      	mov	r1, r3
 80004ce:	4807      	ldr	r0, [pc, #28]	; (80004ec <main+0x68>)
 80004d0:	f001 fe56 	bl	8002180 <iprintf>

      printf("Potassium: ");
 80004d4:	4807      	ldr	r0, [pc, #28]	; (80004f4 <main+0x70>)
 80004d6:	f001 fe53 	bl	8002180 <iprintf>
      printf("%d  mg/kg",val3);
 80004da:	797b      	ldrb	r3, [r7, #5]
 80004dc:	4619      	mov	r1, r3
 80004de:	4803      	ldr	r0, [pc, #12]	; (80004ec <main+0x68>)
 80004e0:	f001 fe4e 	bl	8002180 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x60>
 80004e6:	bf00      	nop
 80004e8:	080031ac 	.word	0x080031ac
 80004ec:	080031b8 	.word	0x080031b8
 80004f0:	080031c4 	.word	0x080031c4
 80004f4:	080031d4 	.word	0x080031d4

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b092      	sub	sp, #72	; 0x48
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2234      	movs	r2, #52	; 0x34
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f001 fe32 	bl	8002170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <SystemClock_Config+0x98>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000522:	4a1b      	ldr	r2, [pc, #108]	; (8000590 <SystemClock_Config+0x98>)
 8000524:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000528:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052a:	2302      	movs	r3, #2
 800052c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052e:	2301      	movs	r3, #1
 8000530:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000532:	2310      	movs	r3, #16
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000536:	2302      	movs	r3, #2
 8000538:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053a:	2300      	movs	r3, #0
 800053c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800053e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000542:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000544:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000548:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fd3e 	bl	8000fd0 <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800055a:	f000 f8c1 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	230f      	movs	r3, #15
 8000560:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	2303      	movs	r3, #3
 8000564:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000572:	463b      	mov	r3, r7
 8000574:	2101      	movs	r1, #1
 8000576:	4618      	mov	r0, r3
 8000578:	f001 f85a 	bl	8001630 <HAL_RCC_ClockConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000582:	f000 f8ad 	bl	80006e0 <Error_Handler>
  }
}
 8000586:	bf00      	nop
 8000588:	3748      	adds	r7, #72	; 0x48
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40007000 	.word	0x40007000

08000594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 800059a:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <MX_USART2_UART_Init+0x50>)
 800059c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005cc:	f001 faf6 	bl	8001bbc <HAL_UART_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005d6:	f000 f883 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000094 	.word	0x20000094
 80005e4:	40004400 	.word	0x40004400

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_GPIO_Init+0x74>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	4a16      	ldr	r2, [pc, #88]	; (800065c <MX_GPIO_Init+0x74>)
 8000604:	f043 0320 	orr.w	r3, r3, #32
 8000608:	61d3      	str	r3, [r2, #28]
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_GPIO_Init+0x74>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	f003 0320 	and.w	r3, r3, #32
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_GPIO_Init+0x74>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a10      	ldr	r2, [pc, #64]	; (800065c <MX_GPIO_Init+0x74>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_GPIO_Init+0x74>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BSP_DE_Pin|BSP_RE_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2130      	movs	r1, #48	; 0x30
 8000632:	480b      	ldr	r0, [pc, #44]	; (8000660 <MX_GPIO_Init+0x78>)
 8000634:	f000 fcb4 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BSP_DE_Pin BSP_RE_Pin */
  GPIO_InitStruct.Pin = BSP_DE_Pin|BSP_RE_Pin;
 8000638:	2330      	movs	r3, #48	; 0x30
 800063a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_GPIO_Init+0x78>)
 8000650:	f000 fb26 	bl	8000ca0 <HAL_GPIO_Init>

}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40020000 	.word	0x40020000

08000664 <nitrogen>:
//
//}



uint8_t nitrogen(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0


	HAL_GPIO_WritePin(BSP_DE_GPIO_Port, BSP_DE_Pin,GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2110      	movs	r1, #16
 800066c:	4817      	ldr	r0, [pc, #92]	; (80006cc <nitrogen+0x68>)
 800066e:	f000 fc97 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BSP_RE_GPIO_Port, BSP_RE_Pin,GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2120      	movs	r1, #32
 8000676:	4815      	ldr	r0, [pc, #84]	; (80006cc <nitrogen+0x68>)
 8000678:	f000 fc92 	bl	8000fa0 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 800067c:	200a      	movs	r0, #10
 800067e:	f000 fa09 	bl	8000a94 <HAL_Delay>

	if(HAL_UART_Transmit(&huart2, phos, sizeof(phos),1000)== HAL_OK){
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	2208      	movs	r2, #8
 8000688:	4911      	ldr	r1, [pc, #68]	; (80006d0 <nitrogen+0x6c>)
 800068a:	4812      	ldr	r0, [pc, #72]	; (80006d4 <nitrogen+0x70>)
 800068c:	f001 fae3 	bl	8001c56 <HAL_UART_Transmit>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d116      	bne.n	80006c4 <nitrogen+0x60>


    HAL_GPIO_WritePin(BSP_DE_GPIO_Port, BSP_DE_Pin,GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2110      	movs	r1, #16
 800069a:	480c      	ldr	r0, [pc, #48]	; (80006cc <nitrogen+0x68>)
 800069c:	f000 fc80 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BSP_RE_GPIO_Port, BSP_RE_Pin,GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2120      	movs	r1, #32
 80006a4:	4809      	ldr	r0, [pc, #36]	; (80006cc <nitrogen+0x68>)
 80006a6:	f000 fc7b 	bl	8000fa0 <HAL_GPIO_WritePin>




	if(HAL_UART_Receive(&huart2, values ,FRAME_SIZE, 1000) != HAL_OK){
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	2208      	movs	r2, #8
 80006b0:	4909      	ldr	r1, [pc, #36]	; (80006d8 <nitrogen+0x74>)
 80006b2:	4808      	ldr	r0, [pc, #32]	; (80006d4 <nitrogen+0x70>)
 80006b4:	f001 fb61 	bl	8001d7a <HAL_UART_Receive>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d002      	beq.n	80006c4 <nitrogen+0x60>
		printf("Error receive from nitrogen data \r\n");
 80006be:	4807      	ldr	r0, [pc, #28]	; (80006dc <nitrogen+0x78>)
 80006c0:	f001 fde4 	bl	800228c <puts>
	}

	}
		return values[4];
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <nitrogen+0x74>)
 80006c6:	791b      	ldrb	r3, [r3, #4]

};
 80006c8:	4618      	mov	r0, r3
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020000 	.word	0x40020000
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000094 	.word	0x20000094
 80006d8:	200000d8 	.word	0x200000d8
 80006dc:	080031e0 	.word	0x080031e0

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <Error_Handler+0x8>
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_MspInit+0x5c>)
 80006f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <HAL_MspInit+0x5c>)
 80006f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006fc:	6253      	str	r3, [r2, #36]	; 0x24
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_MspInit+0x5c>)
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_MspInit+0x5c>)
 800070c:	6a1b      	ldr	r3, [r3, #32]
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_MspInit+0x5c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6213      	str	r3, [r2, #32]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x5c>)
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_MspInit+0x5c>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <HAL_MspInit+0x5c>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_MspInit+0x5c>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800073a:	2007      	movs	r0, #7
 800073c:	f000 fa7c 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <HAL_UART_MspInit+0x7c>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d127      	bne.n	80007be <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <HAL_UART_MspInit+0x80>)
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	4a16      	ldr	r2, [pc, #88]	; (80007cc <HAL_UART_MspInit+0x80>)
 8000774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000778:	6253      	str	r3, [r2, #36]	; 0x24
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_UART_MspInit+0x80>)
 800077c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_UART_MspInit+0x80>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a10      	ldr	r2, [pc, #64]	; (80007cc <HAL_UART_MspInit+0x80>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_UART_MspInit+0x80>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800079e:	230c      	movs	r3, #12
 80007a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ae:	2307      	movs	r3, #7
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <HAL_UART_MspInit+0x84>)
 80007ba:	f000 fa71 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007be:	bf00      	nop
 80007c0:	3728      	adds	r7, #40	; 0x28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40004400 	.word	0x40004400
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020000 	.word	0x40020000

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <NMI_Handler+0x4>

080007da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <MemManage_Handler+0x4>

080007e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <BusFault_Handler+0x4>

080007ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler+0x4>

080007f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081a:	f000 f91f 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}

08000822 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	e00a      	b.n	800084a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000834:	f3af 8000 	nop.w
 8000838:	4601      	mov	r1, r0
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	1c5a      	adds	r2, r3, #1
 800083e:	60ba      	str	r2, [r7, #8]
 8000840:	b2ca      	uxtb	r2, r1
 8000842:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	3301      	adds	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	dbf0      	blt.n	8000834 <_read+0x12>
  }

  return len;
 8000852:	687b      	ldr	r3, [r7, #4]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	e009      	b.n	8000882 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	60ba      	str	r2, [r7, #8]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3301      	adds	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	429a      	cmp	r2, r3
 8000888:	dbf1      	blt.n	800086e <_write+0x12>
  }
  return len;
 800088a:	687b      	ldr	r3, [r7, #4]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <_close>:

int _close(int file)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ba:	605a      	str	r2, [r3, #4]
  return 0;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <_isatty>:

int _isatty(int file)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008d0:	2301      	movs	r3, #1
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000924:	f001 fbfa 	bl	800211c <__errno>
 8000928:	4603      	mov	r3, r0
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	e009      	b.n	8000948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <_sbrk+0x64>)
 8000944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20008000 	.word	0x20008000
 8000954:	00000400 	.word	0x00000400
 8000958:	200000e4 	.word	0x200000e4
 800095c:	20000100 	.word	0x20000100

08000960 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800096e:	490d      	ldr	r1, [pc, #52]	; (80009a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000984:	4c0a      	ldr	r4, [pc, #40]	; (80009b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000992:	f7ff ffe5 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000996:	f001 fbc7 	bl	8002128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099a:	f7ff fd73 	bl	8000484 <main>
  bx lr
 800099e:	4770      	bx	lr
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80009a8:	080032f8 	.word	0x080032f8
  ldr r2, =_sbss
 80009ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80009b0:	200000fc 	.word	0x200000fc

080009b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_IRQHandler>

080009b6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f939 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c6:	2000      	movs	r0, #0
 80009c8:	f000 f80e 	bl	80009e8 <HAL_InitTick>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	e001      	b.n	80009dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009d8:	f7ff fe88 	bl	80006ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <HAL_InitTick+0x68>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d022      	beq.n	8000a42 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_InitTick+0x6c>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <HAL_InitTick+0x68>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f938 	bl	8000c86 <HAL_SYSTICK_Config>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d10f      	bne.n	8000a3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b0f      	cmp	r3, #15
 8000a20:	d809      	bhi.n	8000a36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a22:	2200      	movs	r2, #0
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2a:	f000 f910 	bl	8000c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_InitTick+0x70>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	e007      	b.n	8000a46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]
 8000a3a:	e004      	b.n	8000a46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	e001      	b.n	8000a46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000010 	.word	0x20000010
 8000a54:	20000008 	.word	0x20000008
 8000a58:	2000000c 	.word	0x2000000c

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x1c>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x20>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <HAL_IncTick+0x1c>)
 8000a6c:	6013      	str	r3, [r2, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200000e8 	.word	0x200000e8
 8000a7c:	20000010 	.word	0x20000010

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <HAL_GetTick+0x10>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	200000e8 	.word	0x200000e8

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a9c:	f7ff fff0 	bl	8000a80 <HAL_GetTick>
 8000aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	d004      	beq.n	8000ab8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_Delay+0x40>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab8:	bf00      	nop
 8000aba:	f7ff ffe1 	bl	8000a80 <HAL_GetTick>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d8f7      	bhi.n	8000aba <HAL_Delay+0x26>
  {
  }
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000010 	.word	0x20000010

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff90 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff49 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff5e 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff90 	bl	8000b90 <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5f 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffb0 	bl	8000bf4 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cb6:	e154      	b.n	8000f62 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 8146 	beq.w	8000f5c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d005      	beq.n	8000ce8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d130      	bne.n	8000d4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d1e:	2201      	movs	r2, #1
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	091b      	lsrs	r3, r3, #4
 8000d34:	f003 0201 	and.w	r2, r3, #1
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d017      	beq.n	8000d86 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d123      	bne.n	8000dda <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	691a      	ldr	r2, [r3, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	08da      	lsrs	r2, r3, #3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	6939      	ldr	r1, [r7, #16]
 8000dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0203 	and.w	r2, r3, #3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 80a0 	beq.w	8000f5c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1c:	4b58      	ldr	r3, [pc, #352]	; (8000f80 <HAL_GPIO_Init+0x2e0>)
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	4a57      	ldr	r2, [pc, #348]	; (8000f80 <HAL_GPIO_Init+0x2e0>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6213      	str	r3, [r2, #32]
 8000e28:	4b55      	ldr	r3, [pc, #340]	; (8000f80 <HAL_GPIO_Init+0x2e0>)
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e34:	4a53      	ldr	r2, [pc, #332]	; (8000f84 <HAL_GPIO_Init+0x2e4>)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a4b      	ldr	r2, [pc, #300]	; (8000f88 <HAL_GPIO_Init+0x2e8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d019      	beq.n	8000e94 <HAL_GPIO_Init+0x1f4>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a4a      	ldr	r2, [pc, #296]	; (8000f8c <HAL_GPIO_Init+0x2ec>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d013      	beq.n	8000e90 <HAL_GPIO_Init+0x1f0>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a49      	ldr	r2, [pc, #292]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d00d      	beq.n	8000e8c <HAL_GPIO_Init+0x1ec>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a48      	ldr	r2, [pc, #288]	; (8000f94 <HAL_GPIO_Init+0x2f4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d007      	beq.n	8000e88 <HAL_GPIO_Init+0x1e8>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a47      	ldr	r2, [pc, #284]	; (8000f98 <HAL_GPIO_Init+0x2f8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d101      	bne.n	8000e84 <HAL_GPIO_Init+0x1e4>
 8000e80:	2304      	movs	r3, #4
 8000e82:	e008      	b.n	8000e96 <HAL_GPIO_Init+0x1f6>
 8000e84:	2305      	movs	r3, #5
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x1f6>
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e004      	b.n	8000e96 <HAL_GPIO_Init+0x1f6>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0x1f6>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <HAL_GPIO_Init+0x1f6>
 8000e94:	2300      	movs	r3, #0
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	f002 0203 	and.w	r2, r2, #3
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	4093      	lsls	r3, r2
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ea6:	4937      	ldr	r1, [pc, #220]	; (8000f84 <HAL_GPIO_Init+0x2e4>)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb4:	4b39      	ldr	r3, [pc, #228]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ed8:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f02:	4a26      	ldr	r2, [pc, #152]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <HAL_GPIO_Init+0x2fc>)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f47f aea3 	bne.w	8000cb8 <HAL_GPIO_Init+0x18>
  }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40010000 	.word	0x40010000
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000fbc:	e003      	b.n	8000fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e31d      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fe2:	4b94      	ldr	r3, [pc, #592]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fec:	4b91      	ldr	r3, [pc, #580]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d07b      	beq.n	80010fa <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2b08      	cmp	r3, #8
 8001006:	d006      	beq.n	8001016 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	2b0c      	cmp	r3, #12
 800100c:	d10f      	bne.n	800102e <HAL_RCC_OscConfig+0x5e>
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001014:	d10b      	bne.n	800102e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001016:	4b87      	ldr	r3, [pc, #540]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d06a      	beq.n	80010f8 <HAL_RCC_OscConfig+0x128>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d166      	bne.n	80010f8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e2f7      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d106      	bne.n	8001044 <HAL_RCC_OscConfig+0x74>
 8001036:	4b7f      	ldr	r3, [pc, #508]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a7e      	ldr	r2, [pc, #504]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e02d      	b.n	80010a0 <HAL_RCC_OscConfig+0xd0>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10c      	bne.n	8001066 <HAL_RCC_OscConfig+0x96>
 800104c:	4b79      	ldr	r3, [pc, #484]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a78      	ldr	r2, [pc, #480]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b76      	ldr	r3, [pc, #472]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a75      	ldr	r2, [pc, #468]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800105e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	e01c      	b.n	80010a0 <HAL_RCC_OscConfig+0xd0>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0xb8>
 800106e:	4b71      	ldr	r3, [pc, #452]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a70      	ldr	r2, [pc, #448]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b6e      	ldr	r3, [pc, #440]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a6d      	ldr	r2, [pc, #436]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e00b      	b.n	80010a0 <HAL_RCC_OscConfig+0xd0>
 8001088:	4b6a      	ldr	r3, [pc, #424]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a69      	ldr	r2, [pc, #420]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800108e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b67      	ldr	r3, [pc, #412]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a66      	ldr	r2, [pc, #408]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800109a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d013      	beq.n	80010d0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fcea 	bl	8000a80 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fce6 	bl	8000a80 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e2ad      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010c2:	4b5c      	ldr	r3, [pc, #368]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0xe0>
 80010ce:	e014      	b.n	80010fa <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fcd6 	bl	8000a80 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fcd2 	bl	8000a80 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e299      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010ea:	4b52      	ldr	r3, [pc, #328]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x108>
 80010f6:	e000      	b.n	80010fa <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d05a      	beq.n	80011bc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	2b04      	cmp	r3, #4
 800110a:	d005      	beq.n	8001118 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	2b0c      	cmp	r3, #12
 8001110:	d119      	bne.n	8001146 <HAL_RCC_OscConfig+0x176>
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d116      	bne.n	8001146 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001118:	4b46      	ldr	r3, [pc, #280]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <HAL_RCC_OscConfig+0x160>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d001      	beq.n	8001130 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e276      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b40      	ldr	r3, [pc, #256]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	493d      	ldr	r1, [pc, #244]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001144:	e03a      	b.n	80011bc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d020      	beq.n	8001190 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <HAL_RCC_OscConfig+0x268>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fc94 	bl	8000a80 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff fc90 	bl	8000a80 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e257      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	492a      	ldr	r1, [pc, #168]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800118a:	4313      	orrs	r3, r2
 800118c:	604b      	str	r3, [r1, #4]
 800118e:	e015      	b.n	80011bc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <HAL_RCC_OscConfig+0x268>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fc73 	bl	8000a80 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff fc6f 	bl	8000a80 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e236      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80b8 	beq.w	800133a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d170      	bne.n	80012b2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_RCC_OscConfig+0x218>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e21a      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d921      	bls.n	800123c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fc7d 	bl	8001afc <RCC_SetFlashLatencyFromMSIRange>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e208      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4906      	ldr	r1, [pc, #24]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800121a:	4313      	orrs	r3, r2
 800121c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	061b      	lsls	r3, r3, #24
 800122c:	4901      	ldr	r1, [pc, #4]	; (8001234 <HAL_RCC_OscConfig+0x264>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
 8001232:	e020      	b.n	8001276 <HAL_RCC_OscConfig+0x2a6>
 8001234:	40023800 	.word	0x40023800
 8001238:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800123c:	4b99      	ldr	r3, [pc, #612]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4996      	ldr	r1, [pc, #600]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124e:	4b95      	ldr	r3, [pc, #596]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	061b      	lsls	r3, r3, #24
 800125c:	4991      	ldr	r1, [pc, #580]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fc48 	bl	8001afc <RCC_SetFlashLatencyFromMSIRange>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e1d3      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	0b5b      	lsrs	r3, r3, #13
 800127c:	3301      	adds	r3, #1
 800127e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001286:	4a87      	ldr	r2, [pc, #540]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001288:	6892      	ldr	r2, [r2, #8]
 800128a:	0912      	lsrs	r2, r2, #4
 800128c:	f002 020f 	and.w	r2, r2, #15
 8001290:	4985      	ldr	r1, [pc, #532]	; (80014a8 <HAL_RCC_OscConfig+0x4d8>)
 8001292:	5c8a      	ldrb	r2, [r1, r2]
 8001294:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001296:	4a85      	ldr	r2, [pc, #532]	; (80014ac <HAL_RCC_OscConfig+0x4dc>)
 8001298:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800129a:	4b85      	ldr	r3, [pc, #532]	; (80014b0 <HAL_RCC_OscConfig+0x4e0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fba2 	bl	80009e8 <HAL_InitTick>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d045      	beq.n	800133a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	e1b5      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d029      	beq.n	800130e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012ba:	4b7e      	ldr	r3, [pc, #504]	; (80014b4 <HAL_RCC_OscConfig+0x4e4>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fbde 	bl	8000a80 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c8:	f7ff fbda 	bl	8000a80 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1a1      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012da:	4b72      	ldr	r3, [pc, #456]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e6:	4b6f      	ldr	r3, [pc, #444]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	496c      	ldr	r1, [pc, #432]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f8:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	061b      	lsls	r3, r3, #24
 8001306:	4967      	ldr	r1, [pc, #412]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
 800130c:	e015      	b.n	800133a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800130e:	4b69      	ldr	r3, [pc, #420]	; (80014b4 <HAL_RCC_OscConfig+0x4e4>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fbb4 	bl	8000a80 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800131c:	f7ff fbb0 	bl	8000a80 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e177      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800132e:	4b5d      	ldr	r3, [pc, #372]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d030      	beq.n	80013a8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d016      	beq.n	800137c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134e:	4b5a      	ldr	r3, [pc, #360]	; (80014b8 <HAL_RCC_OscConfig+0x4e8>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001354:	f7ff fb94 	bl	8000a80 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135c:	f7ff fb90 	bl	8000a80 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e157      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800136e:	4b4d      	ldr	r3, [pc, #308]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x38c>
 800137a:	e015      	b.n	80013a8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137c:	4b4e      	ldr	r3, [pc, #312]	; (80014b8 <HAL_RCC_OscConfig+0x4e8>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001382:	f7ff fb7d 	bl	8000a80 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138a:	f7ff fb79 	bl	8000a80 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e140      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800139c:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800139e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1f0      	bne.n	800138a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80b5 	beq.w	8001520 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ba:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10d      	bne.n	80013e2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	4a36      	ldr	r2, [pc, #216]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6253      	str	r3, [r2, #36]	; 0x24
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013de:	2301      	movs	r3, #1
 80013e0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <HAL_RCC_OscConfig+0x4ec>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d118      	bne.n	8001420 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ee:	4b33      	ldr	r3, [pc, #204]	; (80014bc <HAL_RCC_OscConfig+0x4ec>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a32      	ldr	r2, [pc, #200]	; (80014bc <HAL_RCC_OscConfig+0x4ec>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb41 	bl	8000a80 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001402:	f7ff fb3d 	bl	8000a80 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b64      	cmp	r3, #100	; 0x64
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e104      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <HAL_RCC_OscConfig+0x4ec>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x466>
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800142a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142c:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	6353      	str	r3, [r2, #52]	; 0x34
 8001434:	e02d      	b.n	8001492 <HAL_RCC_OscConfig+0x4c2>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x488>
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001448:	6353      	str	r3, [r2, #52]	; 0x34
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800144c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144e:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001450:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001454:	6353      	str	r3, [r2, #52]	; 0x34
 8001456:	e01c      	b.n	8001492 <HAL_RCC_OscConfig+0x4c2>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b05      	cmp	r3, #5
 800145e:	d10c      	bne.n	800147a <HAL_RCC_OscConfig+0x4aa>
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146a:	6353      	str	r3, [r2, #52]	; 0x34
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6353      	str	r3, [r2, #52]	; 0x34
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0x4c2>
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001484:	6353      	str	r3, [r2, #52]	; 0x34
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 8001488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148a:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <HAL_RCC_OscConfig+0x4d4>)
 800148c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001490:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d024      	beq.n	80014e4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff faf1 	bl	8000a80 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014a0:	e019      	b.n	80014d6 <HAL_RCC_OscConfig+0x506>
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	08003238 	.word	0x08003238
 80014ac:	20000008 	.word	0x20000008
 80014b0:	2000000c 	.word	0x2000000c
 80014b4:	42470020 	.word	0x42470020
 80014b8:	42470680 	.word	0x42470680
 80014bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff fade 	bl	8000a80 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e0a3      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 80014d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0ee      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4f0>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff facc 	bl	8000a80 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff fac8 	bl	8000a80 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e08d      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001502:	4b49      	ldr	r3, [pc, #292]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 8001504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ee      	bne.n	80014ec <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001514:	4b44      	ldr	r3, [pc, #272]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	4a43      	ldr	r2, [pc, #268]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 800151a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	2b00      	cmp	r3, #0
 8001526:	d079      	beq.n	800161c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d056      	beq.n	80015dc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	2b02      	cmp	r3, #2
 8001534:	d13b      	bne.n	80015ae <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_RCC_OscConfig+0x65c>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff faa0 	bl	8000a80 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fa9c 	bl	8000a80 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e063      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	4319      	orrs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	430b      	orrs	r3, r1
 800157a:	492b      	ldr	r1, [pc, #172]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 800157c:	4313      	orrs	r3, r2
 800157e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_RCC_OscConfig+0x65c>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fa7b 	bl	8000a80 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff fa77 	bl	8000a80 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e03e      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x5be>
 80015ac:	e036      	b.n	800161c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_RCC_OscConfig+0x65c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fa64 	bl	8000a80 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff fa60 	bl	8000a80 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e027      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x5ec>
 80015da:	e01f      	b.n	800161c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e01a      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_RCC_OscConfig+0x658>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d10d      	bne.n	8001618 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001606:	429a      	cmp	r2, r3
 8001608:	d106      	bne.n	8001618 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	42470060 	.word	0x42470060

08001630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e11a      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b8f      	ldr	r3, [pc, #572]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d919      	bls.n	8001686 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_RCC_ClockConfig+0x34>
 8001658:	4b8a      	ldr	r3, [pc, #552]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a89      	ldr	r2, [pc, #548]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b87      	ldr	r3, [pc, #540]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 0201 	bic.w	r2, r3, #1
 800166c:	4985      	ldr	r1, [pc, #532]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001674:	4b83      	ldr	r3, [pc, #524]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d001      	beq.n	8001686 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0f9      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d008      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001692:	4b7d      	ldr	r3, [pc, #500]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	497a      	ldr	r1, [pc, #488]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 808e 	beq.w	80017ce <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ba:	4b73      	ldr	r3, [pc, #460]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d121      	bne.n	800170a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0d7      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016d2:	4b6d      	ldr	r3, [pc, #436]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d115      	bne.n	800170a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0cb      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ea:	4b67      	ldr	r3, [pc, #412]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0bf      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016fa:	4b63      	ldr	r3, [pc, #396]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0b7      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f023 0203 	bic.w	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	495c      	ldr	r1, [pc, #368]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800171c:	f7ff f9b0 	bl	8000a80 <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d112      	bne.n	8001750 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7ff f9a8 	bl	8000a80 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e09b      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001742:	4b51      	ldr	r3, [pc, #324]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b08      	cmp	r3, #8
 800174c:	d1ee      	bne.n	800172c <HAL_RCC_ClockConfig+0xfc>
 800174e:	e03e      	b.n	80017ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d112      	bne.n	800177e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175a:	f7ff f991 	bl	8000a80 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e084      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001770:	4b45      	ldr	r3, [pc, #276]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b0c      	cmp	r3, #12
 800177a:	d1ee      	bne.n	800175a <HAL_RCC_ClockConfig+0x12a>
 800177c:	e027      	b.n	80017ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d11d      	bne.n	80017c2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001786:	e00a      	b.n	800179e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001788:	f7ff f97a 	bl	8000a80 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e06d      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800179e:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d1ee      	bne.n	8001788 <HAL_RCC_ClockConfig+0x158>
 80017aa:	e010      	b.n	80017ce <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ac:	f7ff f968 	bl	8000a80 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e05b      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017c2:	4b31      	ldr	r3, [pc, #196]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ee      	bne.n	80017ac <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d219      	bcs.n	8001810 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d105      	bne.n	80017ee <HAL_RCC_ClockConfig+0x1be>
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a27      	ldr	r2, [pc, #156]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 0201 	bic.w	r2, r3, #1
 80017f6:	4923      	ldr	r1, [pc, #140]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <HAL_RCC_ClockConfig+0x254>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e034      	b.n	800187a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4917      	ldr	r1, [pc, #92]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	490f      	ldr	r1, [pc, #60]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184e:	f000 f823 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8001852:	4602      	mov	r2, r0
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_RCC_ClockConfig+0x258>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	490b      	ldr	r1, [pc, #44]	; (800188c <HAL_RCC_ClockConfig+0x25c>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_RCC_ClockConfig+0x260>)
 8001868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_RCC_ClockConfig+0x264>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f8ba 	bl	80009e8 <HAL_InitTick>
 8001874:	4603      	mov	r3, r0
 8001876:	72fb      	strb	r3, [r7, #11]

  return status;
 8001878:	7afb      	ldrb	r3, [r7, #11]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00
 8001888:	40023800 	.word	0x40023800
 800188c:	08003238 	.word	0x08003238
 8001890:	20000008 	.word	0x20000008
 8001894:	2000000c 	.word	0x2000000c

08001898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800189c:	b092      	sub	sp, #72	; 0x48
 800189e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80018a0:	4b79      	ldr	r3, [pc, #484]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b0c      	cmp	r3, #12
 80018ae:	d00d      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x34>
 80018b0:	2b0c      	cmp	r3, #12
 80018b2:	f200 80d5 	bhi.w	8001a60 <HAL_RCC_GetSysClockFreq+0x1c8>
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x28>
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x2e>
 80018be:	e0cf      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c0:	4b72      	ldr	r3, [pc, #456]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80018c2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80018c4:	e0da      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018c6:	4b72      	ldr	r3, [pc, #456]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80018c8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80018ca:	e0d7      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ce:	0c9b      	lsrs	r3, r3, #18
 80018d0:	f003 020f 	and.w	r2, r3, #15
 80018d4:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80018d6:	5c9b      	ldrb	r3, [r3, r2]
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018dc:	0d9b      	lsrs	r3, r3, #22
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	3301      	adds	r3, #1
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e6:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d05d      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f4:	2200      	movs	r2, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	4611      	mov	r1, r2
 80018fa:	4604      	mov	r4, r0
 80018fc:	460d      	mov	r5, r1
 80018fe:	4622      	mov	r2, r4
 8001900:	462b      	mov	r3, r5
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0159      	lsls	r1, r3, #5
 800190c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001910:	0150      	lsls	r0, r2, #5
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4621      	mov	r1, r4
 8001918:	1a51      	subs	r1, r2, r1
 800191a:	6139      	str	r1, [r7, #16]
 800191c:	4629      	mov	r1, r5
 800191e:	eb63 0301 	sbc.w	r3, r3, r1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001930:	4659      	mov	r1, fp
 8001932:	018b      	lsls	r3, r1, #6
 8001934:	4651      	mov	r1, sl
 8001936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193a:	4651      	mov	r1, sl
 800193c:	018a      	lsls	r2, r1, #6
 800193e:	46d4      	mov	ip, sl
 8001940:	ebb2 080c 	subs.w	r8, r2, ip
 8001944:	4659      	mov	r1, fp
 8001946:	eb63 0901 	sbc.w	r9, r3, r1
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800195a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800195e:	4690      	mov	r8, r2
 8001960:	4699      	mov	r9, r3
 8001962:	4623      	mov	r3, r4
 8001964:	eb18 0303 	adds.w	r3, r8, r3
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	462b      	mov	r3, r5
 800196c:	eb49 0303 	adc.w	r3, r9, r3
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800197e:	4629      	mov	r1, r5
 8001980:	024b      	lsls	r3, r1, #9
 8001982:	4620      	mov	r0, r4
 8001984:	4629      	mov	r1, r5
 8001986:	4604      	mov	r4, r0
 8001988:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800198c:	4601      	mov	r1, r0
 800198e:	024a      	lsls	r2, r1, #9
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	2200      	movs	r2, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
 800199a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800199c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019a0:	f7fe fbec 	bl	800017c <__aeabi_uldivmod>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4613      	mov	r3, r2
 80019aa:	647b      	str	r3, [r7, #68]	; 0x44
 80019ac:	e055      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b0:	2200      	movs	r2, #0
 80019b2:	623b      	str	r3, [r7, #32]
 80019b4:	627a      	str	r2, [r7, #36]	; 0x24
 80019b6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019ba:	4642      	mov	r2, r8
 80019bc:	464b      	mov	r3, r9
 80019be:	f04f 0000 	mov.w	r0, #0
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	0159      	lsls	r1, r3, #5
 80019c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019cc:	0150      	lsls	r0, r2, #5
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	46c4      	mov	ip, r8
 80019d4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80019d8:	4640      	mov	r0, r8
 80019da:	4649      	mov	r1, r9
 80019dc:	468c      	mov	ip, r1
 80019de:	eb63 0b0c 	sbc.w	fp, r3, ip
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019ee:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019f2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019f6:	ebb2 040a 	subs.w	r4, r2, sl
 80019fa:	eb63 050b 	sbc.w	r5, r3, fp
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	00eb      	lsls	r3, r5, #3
 8001a08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a0c:	00e2      	lsls	r2, r4, #3
 8001a0e:	4614      	mov	r4, r2
 8001a10:	461d      	mov	r5, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	18e3      	adds	r3, r4, r3
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	eb45 0303 	adc.w	r3, r5, r3
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	028b      	lsls	r3, r1, #10
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	4604      	mov	r4, r0
 8001a36:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	028a      	lsls	r2, r1, #10
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a44:	2200      	movs	r2, #0
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	61fa      	str	r2, [r7, #28]
 8001a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a4e:	f7fe fb95 	bl	800017c <__aeabi_uldivmod>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4613      	mov	r3, r2
 8001a58:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a5e:	e00d      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	0b5b      	lsrs	r3, r3, #13
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3748      	adds	r7, #72	; 0x48
 8001a82:	46bd      	mov	sp, r7
 8001a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	00f42400 	.word	0x00f42400
 8001a90:	007a1200 	.word	0x007a1200
 8001a94:	0800322c 	.word	0x0800322c

08001a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	20000008 	.word	0x20000008

08001aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab0:	f7ff fff2 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	4903      	ldr	r1, [pc, #12]	; (8001ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	08003248 	.word	0x08003248

08001ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	0adb      	lsrs	r3, r3, #11
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	; (8001af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	08003248 	.word	0x08003248

08001afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d12c      	bne.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e016      	b.n	8001b5a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b36:	6253      	str	r3, [r2, #36]	; 0x24
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b4c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001b60:	d105      	bne.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b68:	d101      	bne.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 0201 	bic.w	r2, r3, #1
 8001b88:	490b      	ldr	r1, [pc, #44]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d001      	beq.n	8001ba2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e03f      	b.n	8001c4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe fdb2 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2224      	movs	r2, #36	; 0x24
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f9a7 	bl	8001f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b08a      	sub	sp, #40	; 0x28
 8001c5a:	af02      	add	r7, sp, #8
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4613      	mov	r3, r2
 8001c64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d17c      	bne.n	8001d70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_UART_Transmit+0x2c>
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e075      	b.n	8001d72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_UART_Transmit+0x3e>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e06e      	b.n	8001d72 <HAL_UART_Transmit+0x11c>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2221      	movs	r2, #33	; 0x21
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001caa:	f7fe fee9 	bl	8000a80 <HAL_GetTick>
 8001cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	88fa      	ldrh	r2, [r7, #6]
 8001cb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	88fa      	ldrh	r2, [r7, #6]
 8001cba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc4:	d108      	bne.n	8001cd8 <HAL_UART_Transmit+0x82>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d104      	bne.n	8001cd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	e003      	b.n	8001ce0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ce8:	e02a      	b.n	8001d40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f8e2 	bl	8001ebe <UART_WaitOnFlagUntilTimeout>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e036      	b.n	8001d72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10b      	bne.n	8001d22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	e007      	b.n	8001d32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1cf      	bne.n	8001cea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2200      	movs	r2, #0
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 f8b2 	bl	8001ebe <UART_WaitOnFlagUntilTimeout>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e006      	b.n	8001d72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e000      	b.n	8001d72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d70:	2302      	movs	r3, #2
  }
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b08a      	sub	sp, #40	; 0x28
 8001d7e:	af02      	add	r7, sp, #8
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	4613      	mov	r3, r2
 8001d88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	f040 808c 	bne.w	8001eb4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_UART_Receive+0x2e>
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e084      	b.n	8001eb6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_UART_Receive+0x40>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e07d      	b.n	8001eb6 <HAL_UART_Receive+0x13c>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2222      	movs	r2, #34	; 0x22
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dd6:	f7fe fe53 	bl	8000a80 <HAL_GetTick>
 8001dda:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	88fa      	ldrh	r2, [r7, #6]
 8001de0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001df0:	d108      	bne.n	8001e04 <HAL_UART_Receive+0x8a>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d104      	bne.n	8001e04 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	e003      	b.n	8001e0c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001e14:	e043      	b.n	8001e9e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2120      	movs	r1, #32
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f84c 	bl	8001ebe <UART_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e042      	b.n	8001eb6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10c      	bne.n	8001e50 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	e01f      	b.n	8001e90 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e58:	d007      	beq.n	8001e6a <HAL_UART_Receive+0xf0>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10a      	bne.n	8001e78 <HAL_UART_Receive+0xfe>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	e008      	b.n	8001e8a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1b6      	bne.n	8001e16 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e000      	b.n	8001eb6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
  }
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ece:	e02c      	b.n	8001f2a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed6:	d028      	beq.n	8001f2a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <UART_WaitOnFlagUntilTimeout+0x30>
 8001ede:	f7fe fdcf 	bl	8000a80 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d21d      	bcs.n	8001f2a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001efc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e00f      	b.n	8001f4a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4013      	ands	r3, r2
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	bf0c      	ite	eq
 8001f3a:	2301      	moveq	r3, #1
 8001f3c:	2300      	movne	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d0c3      	beq.n	8001ed0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f94:	f023 030c 	bic.w	r3, r3, #12
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a55      	ldr	r2, [pc, #340]	; (8002114 <UART_SetConfig+0x1c0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d103      	bne.n	8001fca <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fc2:	f7ff fd87 	bl	8001ad4 <HAL_RCC_GetPCLK2Freq>
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	e002      	b.n	8001fd0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fca:	f7ff fd6f 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 8001fce:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fd8:	d14c      	bne.n	8002074 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009a      	lsls	r2, r3, #2
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	4a49      	ldr	r2, [pc, #292]	; (8002118 <UART_SetConfig+0x1c4>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	0119      	lsls	r1, r3, #4
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	009a      	lsls	r2, r3, #2
 8002004:	441a      	add	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002010:	4b41      	ldr	r3, [pc, #260]	; (8002118 <UART_SetConfig+0x1c4>)
 8002012:	fba3 0302 	umull	r0, r3, r3, r2
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2064      	movs	r0, #100	; 0x64
 800201a:	fb00 f303 	mul.w	r3, r0, r3
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	3332      	adds	r3, #50	; 0x32
 8002024:	4a3c      	ldr	r2, [pc, #240]	; (8002118 <UART_SetConfig+0x1c4>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002032:	4419      	add	r1, r3
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	009a      	lsls	r2, r3, #2
 800203e:	441a      	add	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fbb2 f2f3 	udiv	r2, r2, r3
 800204a:	4b33      	ldr	r3, [pc, #204]	; (8002118 <UART_SetConfig+0x1c4>)
 800204c:	fba3 0302 	umull	r0, r3, r3, r2
 8002050:	095b      	lsrs	r3, r3, #5
 8002052:	2064      	movs	r0, #100	; 0x64
 8002054:	fb00 f303 	mul.w	r3, r0, r3
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	3332      	adds	r3, #50	; 0x32
 800205e:	4a2e      	ldr	r2, [pc, #184]	; (8002118 <UART_SetConfig+0x1c4>)
 8002060:	fba2 2303 	umull	r2, r3, r2, r3
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	f003 0207 	and.w	r2, r3, #7
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	440a      	add	r2, r1
 8002070:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002072:	e04a      	b.n	800210a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009a      	lsls	r2, r3, #2
 800207e:	441a      	add	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4a23      	ldr	r2, [pc, #140]	; (8002118 <UART_SetConfig+0x1c4>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	0119      	lsls	r1, r3, #4
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	009a      	lsls	r2, r3, #2
 800209e:	441a      	add	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <UART_SetConfig+0x1c4>)
 80020ac:	fba3 0302 	umull	r0, r3, r3, r2
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	2064      	movs	r0, #100	; 0x64
 80020b4:	fb00 f303 	mul.w	r3, r0, r3
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	3332      	adds	r3, #50	; 0x32
 80020be:	4a16      	ldr	r2, [pc, #88]	; (8002118 <UART_SetConfig+0x1c4>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ca:	4419      	add	r1, r3
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	009a      	lsls	r2, r3, #2
 80020d6:	441a      	add	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	fbb2 f2f3 	udiv	r2, r2, r3
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <UART_SetConfig+0x1c4>)
 80020e4:	fba3 0302 	umull	r0, r3, r3, r2
 80020e8:	095b      	lsrs	r3, r3, #5
 80020ea:	2064      	movs	r0, #100	; 0x64
 80020ec:	fb00 f303 	mul.w	r3, r0, r3
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	3332      	adds	r3, #50	; 0x32
 80020f6:	4a08      	ldr	r2, [pc, #32]	; (8002118 <UART_SetConfig+0x1c4>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	095b      	lsrs	r3, r3, #5
 80020fe:	f003 020f 	and.w	r2, r3, #15
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	440a      	add	r2, r1
 8002108:	609a      	str	r2, [r3, #8]
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40013800 	.word	0x40013800
 8002118:	51eb851f 	.word	0x51eb851f

0800211c <__errno>:
 800211c:	4b01      	ldr	r3, [pc, #4]	; (8002124 <__errno+0x8>)
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000014 	.word	0x20000014

08002128 <__libc_init_array>:
 8002128:	b570      	push	{r4, r5, r6, lr}
 800212a:	2600      	movs	r6, #0
 800212c:	4d0c      	ldr	r5, [pc, #48]	; (8002160 <__libc_init_array+0x38>)
 800212e:	4c0d      	ldr	r4, [pc, #52]	; (8002164 <__libc_init_array+0x3c>)
 8002130:	1b64      	subs	r4, r4, r5
 8002132:	10a4      	asrs	r4, r4, #2
 8002134:	42a6      	cmp	r6, r4
 8002136:	d109      	bne.n	800214c <__libc_init_array+0x24>
 8002138:	f001 f82c 	bl	8003194 <_init>
 800213c:	2600      	movs	r6, #0
 800213e:	4d0a      	ldr	r5, [pc, #40]	; (8002168 <__libc_init_array+0x40>)
 8002140:	4c0a      	ldr	r4, [pc, #40]	; (800216c <__libc_init_array+0x44>)
 8002142:	1b64      	subs	r4, r4, r5
 8002144:	10a4      	asrs	r4, r4, #2
 8002146:	42a6      	cmp	r6, r4
 8002148:	d105      	bne.n	8002156 <__libc_init_array+0x2e>
 800214a:	bd70      	pop	{r4, r5, r6, pc}
 800214c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002150:	4798      	blx	r3
 8002152:	3601      	adds	r6, #1
 8002154:	e7ee      	b.n	8002134 <__libc_init_array+0xc>
 8002156:	f855 3b04 	ldr.w	r3, [r5], #4
 800215a:	4798      	blx	r3
 800215c:	3601      	adds	r6, #1
 800215e:	e7f2      	b.n	8002146 <__libc_init_array+0x1e>
 8002160:	080032f0 	.word	0x080032f0
 8002164:	080032f0 	.word	0x080032f0
 8002168:	080032f0 	.word	0x080032f0
 800216c:	080032f4 	.word	0x080032f4

08002170 <memset>:
 8002170:	4603      	mov	r3, r0
 8002172:	4402      	add	r2, r0
 8002174:	4293      	cmp	r3, r2
 8002176:	d100      	bne.n	800217a <memset+0xa>
 8002178:	4770      	bx	lr
 800217a:	f803 1b01 	strb.w	r1, [r3], #1
 800217e:	e7f9      	b.n	8002174 <memset+0x4>

08002180 <iprintf>:
 8002180:	b40f      	push	{r0, r1, r2, r3}
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <iprintf+0x2c>)
 8002184:	b513      	push	{r0, r1, r4, lr}
 8002186:	681c      	ldr	r4, [r3, #0]
 8002188:	b124      	cbz	r4, 8002194 <iprintf+0x14>
 800218a:	69a3      	ldr	r3, [r4, #24]
 800218c:	b913      	cbnz	r3, 8002194 <iprintf+0x14>
 800218e:	4620      	mov	r0, r4
 8002190:	f000 fa5a 	bl	8002648 <__sinit>
 8002194:	ab05      	add	r3, sp, #20
 8002196:	4620      	mov	r0, r4
 8002198:	9a04      	ldr	r2, [sp, #16]
 800219a:	68a1      	ldr	r1, [r4, #8]
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	f000 fc5d 	bl	8002a5c <_vfiprintf_r>
 80021a2:	b002      	add	sp, #8
 80021a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021a8:	b004      	add	sp, #16
 80021aa:	4770      	bx	lr
 80021ac:	20000014 	.word	0x20000014

080021b0 <_puts_r>:
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	460e      	mov	r6, r1
 80021b4:	4605      	mov	r5, r0
 80021b6:	b118      	cbz	r0, 80021c0 <_puts_r+0x10>
 80021b8:	6983      	ldr	r3, [r0, #24]
 80021ba:	b90b      	cbnz	r3, 80021c0 <_puts_r+0x10>
 80021bc:	f000 fa44 	bl	8002648 <__sinit>
 80021c0:	69ab      	ldr	r3, [r5, #24]
 80021c2:	68ac      	ldr	r4, [r5, #8]
 80021c4:	b913      	cbnz	r3, 80021cc <_puts_r+0x1c>
 80021c6:	4628      	mov	r0, r5
 80021c8:	f000 fa3e 	bl	8002648 <__sinit>
 80021cc:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <_puts_r+0xd0>)
 80021ce:	429c      	cmp	r4, r3
 80021d0:	d120      	bne.n	8002214 <_puts_r+0x64>
 80021d2:	686c      	ldr	r4, [r5, #4]
 80021d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021d6:	07db      	lsls	r3, r3, #31
 80021d8:	d405      	bmi.n	80021e6 <_puts_r+0x36>
 80021da:	89a3      	ldrh	r3, [r4, #12]
 80021dc:	0598      	lsls	r0, r3, #22
 80021de:	d402      	bmi.n	80021e6 <_puts_r+0x36>
 80021e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021e2:	f000 facf 	bl	8002784 <__retarget_lock_acquire_recursive>
 80021e6:	89a3      	ldrh	r3, [r4, #12]
 80021e8:	0719      	lsls	r1, r3, #28
 80021ea:	d51d      	bpl.n	8002228 <_puts_r+0x78>
 80021ec:	6923      	ldr	r3, [r4, #16]
 80021ee:	b1db      	cbz	r3, 8002228 <_puts_r+0x78>
 80021f0:	3e01      	subs	r6, #1
 80021f2:	68a3      	ldr	r3, [r4, #8]
 80021f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80021f8:	3b01      	subs	r3, #1
 80021fa:	60a3      	str	r3, [r4, #8]
 80021fc:	bb39      	cbnz	r1, 800224e <_puts_r+0x9e>
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da38      	bge.n	8002274 <_puts_r+0xc4>
 8002202:	4622      	mov	r2, r4
 8002204:	210a      	movs	r1, #10
 8002206:	4628      	mov	r0, r5
 8002208:	f000 f848 	bl	800229c <__swbuf_r>
 800220c:	3001      	adds	r0, #1
 800220e:	d011      	beq.n	8002234 <_puts_r+0x84>
 8002210:	250a      	movs	r5, #10
 8002212:	e011      	b.n	8002238 <_puts_r+0x88>
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <_puts_r+0xd4>)
 8002216:	429c      	cmp	r4, r3
 8002218:	d101      	bne.n	800221e <_puts_r+0x6e>
 800221a:	68ac      	ldr	r4, [r5, #8]
 800221c:	e7da      	b.n	80021d4 <_puts_r+0x24>
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <_puts_r+0xd8>)
 8002220:	429c      	cmp	r4, r3
 8002222:	bf08      	it	eq
 8002224:	68ec      	ldreq	r4, [r5, #12]
 8002226:	e7d5      	b.n	80021d4 <_puts_r+0x24>
 8002228:	4621      	mov	r1, r4
 800222a:	4628      	mov	r0, r5
 800222c:	f000 f888 	bl	8002340 <__swsetup_r>
 8002230:	2800      	cmp	r0, #0
 8002232:	d0dd      	beq.n	80021f0 <_puts_r+0x40>
 8002234:	f04f 35ff 	mov.w	r5, #4294967295
 8002238:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800223a:	07da      	lsls	r2, r3, #31
 800223c:	d405      	bmi.n	800224a <_puts_r+0x9a>
 800223e:	89a3      	ldrh	r3, [r4, #12]
 8002240:	059b      	lsls	r3, r3, #22
 8002242:	d402      	bmi.n	800224a <_puts_r+0x9a>
 8002244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002246:	f000 fa9e 	bl	8002786 <__retarget_lock_release_recursive>
 800224a:	4628      	mov	r0, r5
 800224c:	bd70      	pop	{r4, r5, r6, pc}
 800224e:	2b00      	cmp	r3, #0
 8002250:	da04      	bge.n	800225c <_puts_r+0xac>
 8002252:	69a2      	ldr	r2, [r4, #24]
 8002254:	429a      	cmp	r2, r3
 8002256:	dc06      	bgt.n	8002266 <_puts_r+0xb6>
 8002258:	290a      	cmp	r1, #10
 800225a:	d004      	beq.n	8002266 <_puts_r+0xb6>
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	6022      	str	r2, [r4, #0]
 8002262:	7019      	strb	r1, [r3, #0]
 8002264:	e7c5      	b.n	80021f2 <_puts_r+0x42>
 8002266:	4622      	mov	r2, r4
 8002268:	4628      	mov	r0, r5
 800226a:	f000 f817 	bl	800229c <__swbuf_r>
 800226e:	3001      	adds	r0, #1
 8002270:	d1bf      	bne.n	80021f2 <_puts_r+0x42>
 8002272:	e7df      	b.n	8002234 <_puts_r+0x84>
 8002274:	250a      	movs	r5, #10
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	6022      	str	r2, [r4, #0]
 800227c:	701d      	strb	r5, [r3, #0]
 800227e:	e7db      	b.n	8002238 <_puts_r+0x88>
 8002280:	08003274 	.word	0x08003274
 8002284:	08003294 	.word	0x08003294
 8002288:	08003254 	.word	0x08003254

0800228c <puts>:
 800228c:	4b02      	ldr	r3, [pc, #8]	; (8002298 <puts+0xc>)
 800228e:	4601      	mov	r1, r0
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	f7ff bf8d 	b.w	80021b0 <_puts_r>
 8002296:	bf00      	nop
 8002298:	20000014 	.word	0x20000014

0800229c <__swbuf_r>:
 800229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229e:	460e      	mov	r6, r1
 80022a0:	4614      	mov	r4, r2
 80022a2:	4605      	mov	r5, r0
 80022a4:	b118      	cbz	r0, 80022ae <__swbuf_r+0x12>
 80022a6:	6983      	ldr	r3, [r0, #24]
 80022a8:	b90b      	cbnz	r3, 80022ae <__swbuf_r+0x12>
 80022aa:	f000 f9cd 	bl	8002648 <__sinit>
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <__swbuf_r+0x98>)
 80022b0:	429c      	cmp	r4, r3
 80022b2:	d12b      	bne.n	800230c <__swbuf_r+0x70>
 80022b4:	686c      	ldr	r4, [r5, #4]
 80022b6:	69a3      	ldr	r3, [r4, #24]
 80022b8:	60a3      	str	r3, [r4, #8]
 80022ba:	89a3      	ldrh	r3, [r4, #12]
 80022bc:	071a      	lsls	r2, r3, #28
 80022be:	d52f      	bpl.n	8002320 <__swbuf_r+0x84>
 80022c0:	6923      	ldr	r3, [r4, #16]
 80022c2:	b36b      	cbz	r3, 8002320 <__swbuf_r+0x84>
 80022c4:	6923      	ldr	r3, [r4, #16]
 80022c6:	6820      	ldr	r0, [r4, #0]
 80022c8:	b2f6      	uxtb	r6, r6
 80022ca:	1ac0      	subs	r0, r0, r3
 80022cc:	6963      	ldr	r3, [r4, #20]
 80022ce:	4637      	mov	r7, r6
 80022d0:	4283      	cmp	r3, r0
 80022d2:	dc04      	bgt.n	80022de <__swbuf_r+0x42>
 80022d4:	4621      	mov	r1, r4
 80022d6:	4628      	mov	r0, r5
 80022d8:	f000 f922 	bl	8002520 <_fflush_r>
 80022dc:	bb30      	cbnz	r0, 800232c <__swbuf_r+0x90>
 80022de:	68a3      	ldr	r3, [r4, #8]
 80022e0:	3001      	adds	r0, #1
 80022e2:	3b01      	subs	r3, #1
 80022e4:	60a3      	str	r3, [r4, #8]
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	6022      	str	r2, [r4, #0]
 80022ec:	701e      	strb	r6, [r3, #0]
 80022ee:	6963      	ldr	r3, [r4, #20]
 80022f0:	4283      	cmp	r3, r0
 80022f2:	d004      	beq.n	80022fe <__swbuf_r+0x62>
 80022f4:	89a3      	ldrh	r3, [r4, #12]
 80022f6:	07db      	lsls	r3, r3, #31
 80022f8:	d506      	bpl.n	8002308 <__swbuf_r+0x6c>
 80022fa:	2e0a      	cmp	r6, #10
 80022fc:	d104      	bne.n	8002308 <__swbuf_r+0x6c>
 80022fe:	4621      	mov	r1, r4
 8002300:	4628      	mov	r0, r5
 8002302:	f000 f90d 	bl	8002520 <_fflush_r>
 8002306:	b988      	cbnz	r0, 800232c <__swbuf_r+0x90>
 8002308:	4638      	mov	r0, r7
 800230a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <__swbuf_r+0x9c>)
 800230e:	429c      	cmp	r4, r3
 8002310:	d101      	bne.n	8002316 <__swbuf_r+0x7a>
 8002312:	68ac      	ldr	r4, [r5, #8]
 8002314:	e7cf      	b.n	80022b6 <__swbuf_r+0x1a>
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <__swbuf_r+0xa0>)
 8002318:	429c      	cmp	r4, r3
 800231a:	bf08      	it	eq
 800231c:	68ec      	ldreq	r4, [r5, #12]
 800231e:	e7ca      	b.n	80022b6 <__swbuf_r+0x1a>
 8002320:	4621      	mov	r1, r4
 8002322:	4628      	mov	r0, r5
 8002324:	f000 f80c 	bl	8002340 <__swsetup_r>
 8002328:	2800      	cmp	r0, #0
 800232a:	d0cb      	beq.n	80022c4 <__swbuf_r+0x28>
 800232c:	f04f 37ff 	mov.w	r7, #4294967295
 8002330:	e7ea      	b.n	8002308 <__swbuf_r+0x6c>
 8002332:	bf00      	nop
 8002334:	08003274 	.word	0x08003274
 8002338:	08003294 	.word	0x08003294
 800233c:	08003254 	.word	0x08003254

08002340 <__swsetup_r>:
 8002340:	4b32      	ldr	r3, [pc, #200]	; (800240c <__swsetup_r+0xcc>)
 8002342:	b570      	push	{r4, r5, r6, lr}
 8002344:	681d      	ldr	r5, [r3, #0]
 8002346:	4606      	mov	r6, r0
 8002348:	460c      	mov	r4, r1
 800234a:	b125      	cbz	r5, 8002356 <__swsetup_r+0x16>
 800234c:	69ab      	ldr	r3, [r5, #24]
 800234e:	b913      	cbnz	r3, 8002356 <__swsetup_r+0x16>
 8002350:	4628      	mov	r0, r5
 8002352:	f000 f979 	bl	8002648 <__sinit>
 8002356:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <__swsetup_r+0xd0>)
 8002358:	429c      	cmp	r4, r3
 800235a:	d10f      	bne.n	800237c <__swsetup_r+0x3c>
 800235c:	686c      	ldr	r4, [r5, #4]
 800235e:	89a3      	ldrh	r3, [r4, #12]
 8002360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002364:	0719      	lsls	r1, r3, #28
 8002366:	d42c      	bmi.n	80023c2 <__swsetup_r+0x82>
 8002368:	06dd      	lsls	r5, r3, #27
 800236a:	d411      	bmi.n	8002390 <__swsetup_r+0x50>
 800236c:	2309      	movs	r3, #9
 800236e:	6033      	str	r3, [r6, #0]
 8002370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	81a3      	strh	r3, [r4, #12]
 800237a:	e03e      	b.n	80023fa <__swsetup_r+0xba>
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <__swsetup_r+0xd4>)
 800237e:	429c      	cmp	r4, r3
 8002380:	d101      	bne.n	8002386 <__swsetup_r+0x46>
 8002382:	68ac      	ldr	r4, [r5, #8]
 8002384:	e7eb      	b.n	800235e <__swsetup_r+0x1e>
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <__swsetup_r+0xd8>)
 8002388:	429c      	cmp	r4, r3
 800238a:	bf08      	it	eq
 800238c:	68ec      	ldreq	r4, [r5, #12]
 800238e:	e7e6      	b.n	800235e <__swsetup_r+0x1e>
 8002390:	0758      	lsls	r0, r3, #29
 8002392:	d512      	bpl.n	80023ba <__swsetup_r+0x7a>
 8002394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002396:	b141      	cbz	r1, 80023aa <__swsetup_r+0x6a>
 8002398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800239c:	4299      	cmp	r1, r3
 800239e:	d002      	beq.n	80023a6 <__swsetup_r+0x66>
 80023a0:	4630      	mov	r0, r6
 80023a2:	f000 fa57 	bl	8002854 <_free_r>
 80023a6:	2300      	movs	r3, #0
 80023a8:	6363      	str	r3, [r4, #52]	; 0x34
 80023aa:	89a3      	ldrh	r3, [r4, #12]
 80023ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80023b0:	81a3      	strh	r3, [r4, #12]
 80023b2:	2300      	movs	r3, #0
 80023b4:	6063      	str	r3, [r4, #4]
 80023b6:	6923      	ldr	r3, [r4, #16]
 80023b8:	6023      	str	r3, [r4, #0]
 80023ba:	89a3      	ldrh	r3, [r4, #12]
 80023bc:	f043 0308 	orr.w	r3, r3, #8
 80023c0:	81a3      	strh	r3, [r4, #12]
 80023c2:	6923      	ldr	r3, [r4, #16]
 80023c4:	b94b      	cbnz	r3, 80023da <__swsetup_r+0x9a>
 80023c6:	89a3      	ldrh	r3, [r4, #12]
 80023c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d0:	d003      	beq.n	80023da <__swsetup_r+0x9a>
 80023d2:	4621      	mov	r1, r4
 80023d4:	4630      	mov	r0, r6
 80023d6:	f000 f9fd 	bl	80027d4 <__smakebuf_r>
 80023da:	89a0      	ldrh	r0, [r4, #12]
 80023dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023e0:	f010 0301 	ands.w	r3, r0, #1
 80023e4:	d00a      	beq.n	80023fc <__swsetup_r+0xbc>
 80023e6:	2300      	movs	r3, #0
 80023e8:	60a3      	str	r3, [r4, #8]
 80023ea:	6963      	ldr	r3, [r4, #20]
 80023ec:	425b      	negs	r3, r3
 80023ee:	61a3      	str	r3, [r4, #24]
 80023f0:	6923      	ldr	r3, [r4, #16]
 80023f2:	b943      	cbnz	r3, 8002406 <__swsetup_r+0xc6>
 80023f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80023f8:	d1ba      	bne.n	8002370 <__swsetup_r+0x30>
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
 80023fc:	0781      	lsls	r1, r0, #30
 80023fe:	bf58      	it	pl
 8002400:	6963      	ldrpl	r3, [r4, #20]
 8002402:	60a3      	str	r3, [r4, #8]
 8002404:	e7f4      	b.n	80023f0 <__swsetup_r+0xb0>
 8002406:	2000      	movs	r0, #0
 8002408:	e7f7      	b.n	80023fa <__swsetup_r+0xba>
 800240a:	bf00      	nop
 800240c:	20000014 	.word	0x20000014
 8002410:	08003274 	.word	0x08003274
 8002414:	08003294 	.word	0x08003294
 8002418:	08003254 	.word	0x08003254

0800241c <__sflush_r>:
 800241c:	898a      	ldrh	r2, [r1, #12]
 800241e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002420:	4605      	mov	r5, r0
 8002422:	0710      	lsls	r0, r2, #28
 8002424:	460c      	mov	r4, r1
 8002426:	d457      	bmi.n	80024d8 <__sflush_r+0xbc>
 8002428:	684b      	ldr	r3, [r1, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	dc04      	bgt.n	8002438 <__sflush_r+0x1c>
 800242e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	dc01      	bgt.n	8002438 <__sflush_r+0x1c>
 8002434:	2000      	movs	r0, #0
 8002436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800243a:	2e00      	cmp	r6, #0
 800243c:	d0fa      	beq.n	8002434 <__sflush_r+0x18>
 800243e:	2300      	movs	r3, #0
 8002440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002444:	682f      	ldr	r7, [r5, #0]
 8002446:	602b      	str	r3, [r5, #0]
 8002448:	d032      	beq.n	80024b0 <__sflush_r+0x94>
 800244a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800244c:	89a3      	ldrh	r3, [r4, #12]
 800244e:	075a      	lsls	r2, r3, #29
 8002450:	d505      	bpl.n	800245e <__sflush_r+0x42>
 8002452:	6863      	ldr	r3, [r4, #4]
 8002454:	1ac0      	subs	r0, r0, r3
 8002456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002458:	b10b      	cbz	r3, 800245e <__sflush_r+0x42>
 800245a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800245c:	1ac0      	subs	r0, r0, r3
 800245e:	2300      	movs	r3, #0
 8002460:	4602      	mov	r2, r0
 8002462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002464:	4628      	mov	r0, r5
 8002466:	6a21      	ldr	r1, [r4, #32]
 8002468:	47b0      	blx	r6
 800246a:	1c43      	adds	r3, r0, #1
 800246c:	89a3      	ldrh	r3, [r4, #12]
 800246e:	d106      	bne.n	800247e <__sflush_r+0x62>
 8002470:	6829      	ldr	r1, [r5, #0]
 8002472:	291d      	cmp	r1, #29
 8002474:	d82c      	bhi.n	80024d0 <__sflush_r+0xb4>
 8002476:	4a29      	ldr	r2, [pc, #164]	; (800251c <__sflush_r+0x100>)
 8002478:	40ca      	lsrs	r2, r1
 800247a:	07d6      	lsls	r6, r2, #31
 800247c:	d528      	bpl.n	80024d0 <__sflush_r+0xb4>
 800247e:	2200      	movs	r2, #0
 8002480:	6062      	str	r2, [r4, #4]
 8002482:	6922      	ldr	r2, [r4, #16]
 8002484:	04d9      	lsls	r1, r3, #19
 8002486:	6022      	str	r2, [r4, #0]
 8002488:	d504      	bpl.n	8002494 <__sflush_r+0x78>
 800248a:	1c42      	adds	r2, r0, #1
 800248c:	d101      	bne.n	8002492 <__sflush_r+0x76>
 800248e:	682b      	ldr	r3, [r5, #0]
 8002490:	b903      	cbnz	r3, 8002494 <__sflush_r+0x78>
 8002492:	6560      	str	r0, [r4, #84]	; 0x54
 8002494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002496:	602f      	str	r7, [r5, #0]
 8002498:	2900      	cmp	r1, #0
 800249a:	d0cb      	beq.n	8002434 <__sflush_r+0x18>
 800249c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024a0:	4299      	cmp	r1, r3
 80024a2:	d002      	beq.n	80024aa <__sflush_r+0x8e>
 80024a4:	4628      	mov	r0, r5
 80024a6:	f000 f9d5 	bl	8002854 <_free_r>
 80024aa:	2000      	movs	r0, #0
 80024ac:	6360      	str	r0, [r4, #52]	; 0x34
 80024ae:	e7c2      	b.n	8002436 <__sflush_r+0x1a>
 80024b0:	6a21      	ldr	r1, [r4, #32]
 80024b2:	2301      	movs	r3, #1
 80024b4:	4628      	mov	r0, r5
 80024b6:	47b0      	blx	r6
 80024b8:	1c41      	adds	r1, r0, #1
 80024ba:	d1c7      	bne.n	800244c <__sflush_r+0x30>
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0c4      	beq.n	800244c <__sflush_r+0x30>
 80024c2:	2b1d      	cmp	r3, #29
 80024c4:	d001      	beq.n	80024ca <__sflush_r+0xae>
 80024c6:	2b16      	cmp	r3, #22
 80024c8:	d101      	bne.n	80024ce <__sflush_r+0xb2>
 80024ca:	602f      	str	r7, [r5, #0]
 80024cc:	e7b2      	b.n	8002434 <__sflush_r+0x18>
 80024ce:	89a3      	ldrh	r3, [r4, #12]
 80024d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d4:	81a3      	strh	r3, [r4, #12]
 80024d6:	e7ae      	b.n	8002436 <__sflush_r+0x1a>
 80024d8:	690f      	ldr	r7, [r1, #16]
 80024da:	2f00      	cmp	r7, #0
 80024dc:	d0aa      	beq.n	8002434 <__sflush_r+0x18>
 80024de:	0793      	lsls	r3, r2, #30
 80024e0:	bf18      	it	ne
 80024e2:	2300      	movne	r3, #0
 80024e4:	680e      	ldr	r6, [r1, #0]
 80024e6:	bf08      	it	eq
 80024e8:	694b      	ldreq	r3, [r1, #20]
 80024ea:	1bf6      	subs	r6, r6, r7
 80024ec:	600f      	str	r7, [r1, #0]
 80024ee:	608b      	str	r3, [r1, #8]
 80024f0:	2e00      	cmp	r6, #0
 80024f2:	dd9f      	ble.n	8002434 <__sflush_r+0x18>
 80024f4:	4633      	mov	r3, r6
 80024f6:	463a      	mov	r2, r7
 80024f8:	4628      	mov	r0, r5
 80024fa:	6a21      	ldr	r1, [r4, #32]
 80024fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002500:	47e0      	blx	ip
 8002502:	2800      	cmp	r0, #0
 8002504:	dc06      	bgt.n	8002514 <__sflush_r+0xf8>
 8002506:	89a3      	ldrh	r3, [r4, #12]
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002510:	81a3      	strh	r3, [r4, #12]
 8002512:	e790      	b.n	8002436 <__sflush_r+0x1a>
 8002514:	4407      	add	r7, r0
 8002516:	1a36      	subs	r6, r6, r0
 8002518:	e7ea      	b.n	80024f0 <__sflush_r+0xd4>
 800251a:	bf00      	nop
 800251c:	20400001 	.word	0x20400001

08002520 <_fflush_r>:
 8002520:	b538      	push	{r3, r4, r5, lr}
 8002522:	690b      	ldr	r3, [r1, #16]
 8002524:	4605      	mov	r5, r0
 8002526:	460c      	mov	r4, r1
 8002528:	b913      	cbnz	r3, 8002530 <_fflush_r+0x10>
 800252a:	2500      	movs	r5, #0
 800252c:	4628      	mov	r0, r5
 800252e:	bd38      	pop	{r3, r4, r5, pc}
 8002530:	b118      	cbz	r0, 800253a <_fflush_r+0x1a>
 8002532:	6983      	ldr	r3, [r0, #24]
 8002534:	b90b      	cbnz	r3, 800253a <_fflush_r+0x1a>
 8002536:	f000 f887 	bl	8002648 <__sinit>
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <_fflush_r+0x6c>)
 800253c:	429c      	cmp	r4, r3
 800253e:	d11b      	bne.n	8002578 <_fflush_r+0x58>
 8002540:	686c      	ldr	r4, [r5, #4]
 8002542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0ef      	beq.n	800252a <_fflush_r+0xa>
 800254a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800254c:	07d0      	lsls	r0, r2, #31
 800254e:	d404      	bmi.n	800255a <_fflush_r+0x3a>
 8002550:	0599      	lsls	r1, r3, #22
 8002552:	d402      	bmi.n	800255a <_fflush_r+0x3a>
 8002554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002556:	f000 f915 	bl	8002784 <__retarget_lock_acquire_recursive>
 800255a:	4628      	mov	r0, r5
 800255c:	4621      	mov	r1, r4
 800255e:	f7ff ff5d 	bl	800241c <__sflush_r>
 8002562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002564:	4605      	mov	r5, r0
 8002566:	07da      	lsls	r2, r3, #31
 8002568:	d4e0      	bmi.n	800252c <_fflush_r+0xc>
 800256a:	89a3      	ldrh	r3, [r4, #12]
 800256c:	059b      	lsls	r3, r3, #22
 800256e:	d4dd      	bmi.n	800252c <_fflush_r+0xc>
 8002570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002572:	f000 f908 	bl	8002786 <__retarget_lock_release_recursive>
 8002576:	e7d9      	b.n	800252c <_fflush_r+0xc>
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <_fflush_r+0x70>)
 800257a:	429c      	cmp	r4, r3
 800257c:	d101      	bne.n	8002582 <_fflush_r+0x62>
 800257e:	68ac      	ldr	r4, [r5, #8]
 8002580:	e7df      	b.n	8002542 <_fflush_r+0x22>
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <_fflush_r+0x74>)
 8002584:	429c      	cmp	r4, r3
 8002586:	bf08      	it	eq
 8002588:	68ec      	ldreq	r4, [r5, #12]
 800258a:	e7da      	b.n	8002542 <_fflush_r+0x22>
 800258c:	08003274 	.word	0x08003274
 8002590:	08003294 	.word	0x08003294
 8002594:	08003254 	.word	0x08003254

08002598 <std>:
 8002598:	2300      	movs	r3, #0
 800259a:	b510      	push	{r4, lr}
 800259c:	4604      	mov	r4, r0
 800259e:	e9c0 3300 	strd	r3, r3, [r0]
 80025a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025a6:	6083      	str	r3, [r0, #8]
 80025a8:	8181      	strh	r1, [r0, #12]
 80025aa:	6643      	str	r3, [r0, #100]	; 0x64
 80025ac:	81c2      	strh	r2, [r0, #14]
 80025ae:	6183      	str	r3, [r0, #24]
 80025b0:	4619      	mov	r1, r3
 80025b2:	2208      	movs	r2, #8
 80025b4:	305c      	adds	r0, #92	; 0x5c
 80025b6:	f7ff fddb 	bl	8002170 <memset>
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <std+0x38>)
 80025bc:	6224      	str	r4, [r4, #32]
 80025be:	6263      	str	r3, [r4, #36]	; 0x24
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <std+0x3c>)
 80025c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <std+0x40>)
 80025c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <std+0x44>)
 80025ca:	6323      	str	r3, [r4, #48]	; 0x30
 80025cc:	bd10      	pop	{r4, pc}
 80025ce:	bf00      	nop
 80025d0:	08003009 	.word	0x08003009
 80025d4:	0800302b 	.word	0x0800302b
 80025d8:	08003063 	.word	0x08003063
 80025dc:	08003087 	.word	0x08003087

080025e0 <_cleanup_r>:
 80025e0:	4901      	ldr	r1, [pc, #4]	; (80025e8 <_cleanup_r+0x8>)
 80025e2:	f000 b8af 	b.w	8002744 <_fwalk_reent>
 80025e6:	bf00      	nop
 80025e8:	08002521 	.word	0x08002521

080025ec <__sfmoreglue>:
 80025ec:	2268      	movs	r2, #104	; 0x68
 80025ee:	b570      	push	{r4, r5, r6, lr}
 80025f0:	1e4d      	subs	r5, r1, #1
 80025f2:	4355      	muls	r5, r2
 80025f4:	460e      	mov	r6, r1
 80025f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025fa:	f000 f993 	bl	8002924 <_malloc_r>
 80025fe:	4604      	mov	r4, r0
 8002600:	b140      	cbz	r0, 8002614 <__sfmoreglue+0x28>
 8002602:	2100      	movs	r1, #0
 8002604:	e9c0 1600 	strd	r1, r6, [r0]
 8002608:	300c      	adds	r0, #12
 800260a:	60a0      	str	r0, [r4, #8]
 800260c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002610:	f7ff fdae 	bl	8002170 <memset>
 8002614:	4620      	mov	r0, r4
 8002616:	bd70      	pop	{r4, r5, r6, pc}

08002618 <__sfp_lock_acquire>:
 8002618:	4801      	ldr	r0, [pc, #4]	; (8002620 <__sfp_lock_acquire+0x8>)
 800261a:	f000 b8b3 	b.w	8002784 <__retarget_lock_acquire_recursive>
 800261e:	bf00      	nop
 8002620:	200000ed 	.word	0x200000ed

08002624 <__sfp_lock_release>:
 8002624:	4801      	ldr	r0, [pc, #4]	; (800262c <__sfp_lock_release+0x8>)
 8002626:	f000 b8ae 	b.w	8002786 <__retarget_lock_release_recursive>
 800262a:	bf00      	nop
 800262c:	200000ed 	.word	0x200000ed

08002630 <__sinit_lock_acquire>:
 8002630:	4801      	ldr	r0, [pc, #4]	; (8002638 <__sinit_lock_acquire+0x8>)
 8002632:	f000 b8a7 	b.w	8002784 <__retarget_lock_acquire_recursive>
 8002636:	bf00      	nop
 8002638:	200000ee 	.word	0x200000ee

0800263c <__sinit_lock_release>:
 800263c:	4801      	ldr	r0, [pc, #4]	; (8002644 <__sinit_lock_release+0x8>)
 800263e:	f000 b8a2 	b.w	8002786 <__retarget_lock_release_recursive>
 8002642:	bf00      	nop
 8002644:	200000ee 	.word	0x200000ee

08002648 <__sinit>:
 8002648:	b510      	push	{r4, lr}
 800264a:	4604      	mov	r4, r0
 800264c:	f7ff fff0 	bl	8002630 <__sinit_lock_acquire>
 8002650:	69a3      	ldr	r3, [r4, #24]
 8002652:	b11b      	cbz	r3, 800265c <__sinit+0x14>
 8002654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002658:	f7ff bff0 	b.w	800263c <__sinit_lock_release>
 800265c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002660:	6523      	str	r3, [r4, #80]	; 0x50
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <__sinit+0x68>)
 8002664:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <__sinit+0x6c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	62a2      	str	r2, [r4, #40]	; 0x28
 800266a:	42a3      	cmp	r3, r4
 800266c:	bf08      	it	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	4620      	mov	r0, r4
 8002672:	bf08      	it	eq
 8002674:	61a3      	streq	r3, [r4, #24]
 8002676:	f000 f81f 	bl	80026b8 <__sfp>
 800267a:	6060      	str	r0, [r4, #4]
 800267c:	4620      	mov	r0, r4
 800267e:	f000 f81b 	bl	80026b8 <__sfp>
 8002682:	60a0      	str	r0, [r4, #8]
 8002684:	4620      	mov	r0, r4
 8002686:	f000 f817 	bl	80026b8 <__sfp>
 800268a:	2200      	movs	r2, #0
 800268c:	2104      	movs	r1, #4
 800268e:	60e0      	str	r0, [r4, #12]
 8002690:	6860      	ldr	r0, [r4, #4]
 8002692:	f7ff ff81 	bl	8002598 <std>
 8002696:	2201      	movs	r2, #1
 8002698:	2109      	movs	r1, #9
 800269a:	68a0      	ldr	r0, [r4, #8]
 800269c:	f7ff ff7c 	bl	8002598 <std>
 80026a0:	2202      	movs	r2, #2
 80026a2:	2112      	movs	r1, #18
 80026a4:	68e0      	ldr	r0, [r4, #12]
 80026a6:	f7ff ff77 	bl	8002598 <std>
 80026aa:	2301      	movs	r3, #1
 80026ac:	61a3      	str	r3, [r4, #24]
 80026ae:	e7d1      	b.n	8002654 <__sinit+0xc>
 80026b0:	08003250 	.word	0x08003250
 80026b4:	080025e1 	.word	0x080025e1

080026b8 <__sfp>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	4607      	mov	r7, r0
 80026bc:	f7ff ffac 	bl	8002618 <__sfp_lock_acquire>
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <__sfp+0x84>)
 80026c2:	681e      	ldr	r6, [r3, #0]
 80026c4:	69b3      	ldr	r3, [r6, #24]
 80026c6:	b913      	cbnz	r3, 80026ce <__sfp+0x16>
 80026c8:	4630      	mov	r0, r6
 80026ca:	f7ff ffbd 	bl	8002648 <__sinit>
 80026ce:	3648      	adds	r6, #72	; 0x48
 80026d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	d503      	bpl.n	80026e0 <__sfp+0x28>
 80026d8:	6833      	ldr	r3, [r6, #0]
 80026da:	b30b      	cbz	r3, 8002720 <__sfp+0x68>
 80026dc:	6836      	ldr	r6, [r6, #0]
 80026de:	e7f7      	b.n	80026d0 <__sfp+0x18>
 80026e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026e4:	b9d5      	cbnz	r5, 800271c <__sfp+0x64>
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <__sfp+0x88>)
 80026e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026ec:	60e3      	str	r3, [r4, #12]
 80026ee:	6665      	str	r5, [r4, #100]	; 0x64
 80026f0:	f000 f847 	bl	8002782 <__retarget_lock_init_recursive>
 80026f4:	f7ff ff96 	bl	8002624 <__sfp_lock_release>
 80026f8:	2208      	movs	r2, #8
 80026fa:	4629      	mov	r1, r5
 80026fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002700:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002704:	6025      	str	r5, [r4, #0]
 8002706:	61a5      	str	r5, [r4, #24]
 8002708:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800270c:	f7ff fd30 	bl	8002170 <memset>
 8002710:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002714:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002718:	4620      	mov	r0, r4
 800271a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800271c:	3468      	adds	r4, #104	; 0x68
 800271e:	e7d9      	b.n	80026d4 <__sfp+0x1c>
 8002720:	2104      	movs	r1, #4
 8002722:	4638      	mov	r0, r7
 8002724:	f7ff ff62 	bl	80025ec <__sfmoreglue>
 8002728:	4604      	mov	r4, r0
 800272a:	6030      	str	r0, [r6, #0]
 800272c:	2800      	cmp	r0, #0
 800272e:	d1d5      	bne.n	80026dc <__sfp+0x24>
 8002730:	f7ff ff78 	bl	8002624 <__sfp_lock_release>
 8002734:	230c      	movs	r3, #12
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	e7ee      	b.n	8002718 <__sfp+0x60>
 800273a:	bf00      	nop
 800273c:	08003250 	.word	0x08003250
 8002740:	ffff0001 	.word	0xffff0001

08002744 <_fwalk_reent>:
 8002744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002748:	4606      	mov	r6, r0
 800274a:	4688      	mov	r8, r1
 800274c:	2700      	movs	r7, #0
 800274e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002752:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002756:	f1b9 0901 	subs.w	r9, r9, #1
 800275a:	d505      	bpl.n	8002768 <_fwalk_reent+0x24>
 800275c:	6824      	ldr	r4, [r4, #0]
 800275e:	2c00      	cmp	r4, #0
 8002760:	d1f7      	bne.n	8002752 <_fwalk_reent+0xe>
 8002762:	4638      	mov	r0, r7
 8002764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002768:	89ab      	ldrh	r3, [r5, #12]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d907      	bls.n	800277e <_fwalk_reent+0x3a>
 800276e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002772:	3301      	adds	r3, #1
 8002774:	d003      	beq.n	800277e <_fwalk_reent+0x3a>
 8002776:	4629      	mov	r1, r5
 8002778:	4630      	mov	r0, r6
 800277a:	47c0      	blx	r8
 800277c:	4307      	orrs	r7, r0
 800277e:	3568      	adds	r5, #104	; 0x68
 8002780:	e7e9      	b.n	8002756 <_fwalk_reent+0x12>

08002782 <__retarget_lock_init_recursive>:
 8002782:	4770      	bx	lr

08002784 <__retarget_lock_acquire_recursive>:
 8002784:	4770      	bx	lr

08002786 <__retarget_lock_release_recursive>:
 8002786:	4770      	bx	lr

08002788 <__swhatbuf_r>:
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	460e      	mov	r6, r1
 800278c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002790:	4614      	mov	r4, r2
 8002792:	2900      	cmp	r1, #0
 8002794:	461d      	mov	r5, r3
 8002796:	b096      	sub	sp, #88	; 0x58
 8002798:	da08      	bge.n	80027ac <__swhatbuf_r+0x24>
 800279a:	2200      	movs	r2, #0
 800279c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80027a0:	602a      	str	r2, [r5, #0]
 80027a2:	061a      	lsls	r2, r3, #24
 80027a4:	d410      	bmi.n	80027c8 <__swhatbuf_r+0x40>
 80027a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027aa:	e00e      	b.n	80027ca <__swhatbuf_r+0x42>
 80027ac:	466a      	mov	r2, sp
 80027ae:	f000 fc91 	bl	80030d4 <_fstat_r>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	dbf1      	blt.n	800279a <__swhatbuf_r+0x12>
 80027b6:	9a01      	ldr	r2, [sp, #4]
 80027b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80027bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80027c0:	425a      	negs	r2, r3
 80027c2:	415a      	adcs	r2, r3
 80027c4:	602a      	str	r2, [r5, #0]
 80027c6:	e7ee      	b.n	80027a6 <__swhatbuf_r+0x1e>
 80027c8:	2340      	movs	r3, #64	; 0x40
 80027ca:	2000      	movs	r0, #0
 80027cc:	6023      	str	r3, [r4, #0]
 80027ce:	b016      	add	sp, #88	; 0x58
 80027d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080027d4 <__smakebuf_r>:
 80027d4:	898b      	ldrh	r3, [r1, #12]
 80027d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027d8:	079d      	lsls	r5, r3, #30
 80027da:	4606      	mov	r6, r0
 80027dc:	460c      	mov	r4, r1
 80027de:	d507      	bpl.n	80027f0 <__smakebuf_r+0x1c>
 80027e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027e4:	6023      	str	r3, [r4, #0]
 80027e6:	6123      	str	r3, [r4, #16]
 80027e8:	2301      	movs	r3, #1
 80027ea:	6163      	str	r3, [r4, #20]
 80027ec:	b002      	add	sp, #8
 80027ee:	bd70      	pop	{r4, r5, r6, pc}
 80027f0:	466a      	mov	r2, sp
 80027f2:	ab01      	add	r3, sp, #4
 80027f4:	f7ff ffc8 	bl	8002788 <__swhatbuf_r>
 80027f8:	9900      	ldr	r1, [sp, #0]
 80027fa:	4605      	mov	r5, r0
 80027fc:	4630      	mov	r0, r6
 80027fe:	f000 f891 	bl	8002924 <_malloc_r>
 8002802:	b948      	cbnz	r0, 8002818 <__smakebuf_r+0x44>
 8002804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002808:	059a      	lsls	r2, r3, #22
 800280a:	d4ef      	bmi.n	80027ec <__smakebuf_r+0x18>
 800280c:	f023 0303 	bic.w	r3, r3, #3
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	81a3      	strh	r3, [r4, #12]
 8002816:	e7e3      	b.n	80027e0 <__smakebuf_r+0xc>
 8002818:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <__smakebuf_r+0x7c>)
 800281a:	62b3      	str	r3, [r6, #40]	; 0x28
 800281c:	89a3      	ldrh	r3, [r4, #12]
 800281e:	6020      	str	r0, [r4, #0]
 8002820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002824:	81a3      	strh	r3, [r4, #12]
 8002826:	9b00      	ldr	r3, [sp, #0]
 8002828:	6120      	str	r0, [r4, #16]
 800282a:	6163      	str	r3, [r4, #20]
 800282c:	9b01      	ldr	r3, [sp, #4]
 800282e:	b15b      	cbz	r3, 8002848 <__smakebuf_r+0x74>
 8002830:	4630      	mov	r0, r6
 8002832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002836:	f000 fc5f 	bl	80030f8 <_isatty_r>
 800283a:	b128      	cbz	r0, 8002848 <__smakebuf_r+0x74>
 800283c:	89a3      	ldrh	r3, [r4, #12]
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	81a3      	strh	r3, [r4, #12]
 8002848:	89a0      	ldrh	r0, [r4, #12]
 800284a:	4305      	orrs	r5, r0
 800284c:	81a5      	strh	r5, [r4, #12]
 800284e:	e7cd      	b.n	80027ec <__smakebuf_r+0x18>
 8002850:	080025e1 	.word	0x080025e1

08002854 <_free_r>:
 8002854:	b538      	push	{r3, r4, r5, lr}
 8002856:	4605      	mov	r5, r0
 8002858:	2900      	cmp	r1, #0
 800285a:	d040      	beq.n	80028de <_free_r+0x8a>
 800285c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002860:	1f0c      	subs	r4, r1, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	bfb8      	it	lt
 8002866:	18e4      	addlt	r4, r4, r3
 8002868:	f000 fc76 	bl	8003158 <__malloc_lock>
 800286c:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <_free_r+0x8c>)
 800286e:	6813      	ldr	r3, [r2, #0]
 8002870:	b933      	cbnz	r3, 8002880 <_free_r+0x2c>
 8002872:	6063      	str	r3, [r4, #4]
 8002874:	6014      	str	r4, [r2, #0]
 8002876:	4628      	mov	r0, r5
 8002878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800287c:	f000 bc72 	b.w	8003164 <__malloc_unlock>
 8002880:	42a3      	cmp	r3, r4
 8002882:	d908      	bls.n	8002896 <_free_r+0x42>
 8002884:	6820      	ldr	r0, [r4, #0]
 8002886:	1821      	adds	r1, r4, r0
 8002888:	428b      	cmp	r3, r1
 800288a:	bf01      	itttt	eq
 800288c:	6819      	ldreq	r1, [r3, #0]
 800288e:	685b      	ldreq	r3, [r3, #4]
 8002890:	1809      	addeq	r1, r1, r0
 8002892:	6021      	streq	r1, [r4, #0]
 8002894:	e7ed      	b.n	8002872 <_free_r+0x1e>
 8002896:	461a      	mov	r2, r3
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	b10b      	cbz	r3, 80028a0 <_free_r+0x4c>
 800289c:	42a3      	cmp	r3, r4
 800289e:	d9fa      	bls.n	8002896 <_free_r+0x42>
 80028a0:	6811      	ldr	r1, [r2, #0]
 80028a2:	1850      	adds	r0, r2, r1
 80028a4:	42a0      	cmp	r0, r4
 80028a6:	d10b      	bne.n	80028c0 <_free_r+0x6c>
 80028a8:	6820      	ldr	r0, [r4, #0]
 80028aa:	4401      	add	r1, r0
 80028ac:	1850      	adds	r0, r2, r1
 80028ae:	4283      	cmp	r3, r0
 80028b0:	6011      	str	r1, [r2, #0]
 80028b2:	d1e0      	bne.n	8002876 <_free_r+0x22>
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4401      	add	r1, r0
 80028ba:	6011      	str	r1, [r2, #0]
 80028bc:	6053      	str	r3, [r2, #4]
 80028be:	e7da      	b.n	8002876 <_free_r+0x22>
 80028c0:	d902      	bls.n	80028c8 <_free_r+0x74>
 80028c2:	230c      	movs	r3, #12
 80028c4:	602b      	str	r3, [r5, #0]
 80028c6:	e7d6      	b.n	8002876 <_free_r+0x22>
 80028c8:	6820      	ldr	r0, [r4, #0]
 80028ca:	1821      	adds	r1, r4, r0
 80028cc:	428b      	cmp	r3, r1
 80028ce:	bf01      	itttt	eq
 80028d0:	6819      	ldreq	r1, [r3, #0]
 80028d2:	685b      	ldreq	r3, [r3, #4]
 80028d4:	1809      	addeq	r1, r1, r0
 80028d6:	6021      	streq	r1, [r4, #0]
 80028d8:	6063      	str	r3, [r4, #4]
 80028da:	6054      	str	r4, [r2, #4]
 80028dc:	e7cb      	b.n	8002876 <_free_r+0x22>
 80028de:	bd38      	pop	{r3, r4, r5, pc}
 80028e0:	200000f0 	.word	0x200000f0

080028e4 <sbrk_aligned>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	4e0e      	ldr	r6, [pc, #56]	; (8002920 <sbrk_aligned+0x3c>)
 80028e8:	460c      	mov	r4, r1
 80028ea:	6831      	ldr	r1, [r6, #0]
 80028ec:	4605      	mov	r5, r0
 80028ee:	b911      	cbnz	r1, 80028f6 <sbrk_aligned+0x12>
 80028f0:	f000 fb7a 	bl	8002fe8 <_sbrk_r>
 80028f4:	6030      	str	r0, [r6, #0]
 80028f6:	4621      	mov	r1, r4
 80028f8:	4628      	mov	r0, r5
 80028fa:	f000 fb75 	bl	8002fe8 <_sbrk_r>
 80028fe:	1c43      	adds	r3, r0, #1
 8002900:	d00a      	beq.n	8002918 <sbrk_aligned+0x34>
 8002902:	1cc4      	adds	r4, r0, #3
 8002904:	f024 0403 	bic.w	r4, r4, #3
 8002908:	42a0      	cmp	r0, r4
 800290a:	d007      	beq.n	800291c <sbrk_aligned+0x38>
 800290c:	1a21      	subs	r1, r4, r0
 800290e:	4628      	mov	r0, r5
 8002910:	f000 fb6a 	bl	8002fe8 <_sbrk_r>
 8002914:	3001      	adds	r0, #1
 8002916:	d101      	bne.n	800291c <sbrk_aligned+0x38>
 8002918:	f04f 34ff 	mov.w	r4, #4294967295
 800291c:	4620      	mov	r0, r4
 800291e:	bd70      	pop	{r4, r5, r6, pc}
 8002920:	200000f4 	.word	0x200000f4

08002924 <_malloc_r>:
 8002924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002928:	1ccd      	adds	r5, r1, #3
 800292a:	f025 0503 	bic.w	r5, r5, #3
 800292e:	3508      	adds	r5, #8
 8002930:	2d0c      	cmp	r5, #12
 8002932:	bf38      	it	cc
 8002934:	250c      	movcc	r5, #12
 8002936:	2d00      	cmp	r5, #0
 8002938:	4607      	mov	r7, r0
 800293a:	db01      	blt.n	8002940 <_malloc_r+0x1c>
 800293c:	42a9      	cmp	r1, r5
 800293e:	d905      	bls.n	800294c <_malloc_r+0x28>
 8002940:	230c      	movs	r3, #12
 8002942:	2600      	movs	r6, #0
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	4630      	mov	r0, r6
 8002948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800294c:	4e2e      	ldr	r6, [pc, #184]	; (8002a08 <_malloc_r+0xe4>)
 800294e:	f000 fc03 	bl	8003158 <__malloc_lock>
 8002952:	6833      	ldr	r3, [r6, #0]
 8002954:	461c      	mov	r4, r3
 8002956:	bb34      	cbnz	r4, 80029a6 <_malloc_r+0x82>
 8002958:	4629      	mov	r1, r5
 800295a:	4638      	mov	r0, r7
 800295c:	f7ff ffc2 	bl	80028e4 <sbrk_aligned>
 8002960:	1c43      	adds	r3, r0, #1
 8002962:	4604      	mov	r4, r0
 8002964:	d14d      	bne.n	8002a02 <_malloc_r+0xde>
 8002966:	6834      	ldr	r4, [r6, #0]
 8002968:	4626      	mov	r6, r4
 800296a:	2e00      	cmp	r6, #0
 800296c:	d140      	bne.n	80029f0 <_malloc_r+0xcc>
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	4631      	mov	r1, r6
 8002972:	4638      	mov	r0, r7
 8002974:	eb04 0803 	add.w	r8, r4, r3
 8002978:	f000 fb36 	bl	8002fe8 <_sbrk_r>
 800297c:	4580      	cmp	r8, r0
 800297e:	d13a      	bne.n	80029f6 <_malloc_r+0xd2>
 8002980:	6821      	ldr	r1, [r4, #0]
 8002982:	3503      	adds	r5, #3
 8002984:	1a6d      	subs	r5, r5, r1
 8002986:	f025 0503 	bic.w	r5, r5, #3
 800298a:	3508      	adds	r5, #8
 800298c:	2d0c      	cmp	r5, #12
 800298e:	bf38      	it	cc
 8002990:	250c      	movcc	r5, #12
 8002992:	4638      	mov	r0, r7
 8002994:	4629      	mov	r1, r5
 8002996:	f7ff ffa5 	bl	80028e4 <sbrk_aligned>
 800299a:	3001      	adds	r0, #1
 800299c:	d02b      	beq.n	80029f6 <_malloc_r+0xd2>
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	442b      	add	r3, r5
 80029a2:	6023      	str	r3, [r4, #0]
 80029a4:	e00e      	b.n	80029c4 <_malloc_r+0xa0>
 80029a6:	6822      	ldr	r2, [r4, #0]
 80029a8:	1b52      	subs	r2, r2, r5
 80029aa:	d41e      	bmi.n	80029ea <_malloc_r+0xc6>
 80029ac:	2a0b      	cmp	r2, #11
 80029ae:	d916      	bls.n	80029de <_malloc_r+0xba>
 80029b0:	1961      	adds	r1, r4, r5
 80029b2:	42a3      	cmp	r3, r4
 80029b4:	6025      	str	r5, [r4, #0]
 80029b6:	bf18      	it	ne
 80029b8:	6059      	strne	r1, [r3, #4]
 80029ba:	6863      	ldr	r3, [r4, #4]
 80029bc:	bf08      	it	eq
 80029be:	6031      	streq	r1, [r6, #0]
 80029c0:	5162      	str	r2, [r4, r5]
 80029c2:	604b      	str	r3, [r1, #4]
 80029c4:	4638      	mov	r0, r7
 80029c6:	f104 060b 	add.w	r6, r4, #11
 80029ca:	f000 fbcb 	bl	8003164 <__malloc_unlock>
 80029ce:	f026 0607 	bic.w	r6, r6, #7
 80029d2:	1d23      	adds	r3, r4, #4
 80029d4:	1af2      	subs	r2, r6, r3
 80029d6:	d0b6      	beq.n	8002946 <_malloc_r+0x22>
 80029d8:	1b9b      	subs	r3, r3, r6
 80029da:	50a3      	str	r3, [r4, r2]
 80029dc:	e7b3      	b.n	8002946 <_malloc_r+0x22>
 80029de:	6862      	ldr	r2, [r4, #4]
 80029e0:	42a3      	cmp	r3, r4
 80029e2:	bf0c      	ite	eq
 80029e4:	6032      	streq	r2, [r6, #0]
 80029e6:	605a      	strne	r2, [r3, #4]
 80029e8:	e7ec      	b.n	80029c4 <_malloc_r+0xa0>
 80029ea:	4623      	mov	r3, r4
 80029ec:	6864      	ldr	r4, [r4, #4]
 80029ee:	e7b2      	b.n	8002956 <_malloc_r+0x32>
 80029f0:	4634      	mov	r4, r6
 80029f2:	6876      	ldr	r6, [r6, #4]
 80029f4:	e7b9      	b.n	800296a <_malloc_r+0x46>
 80029f6:	230c      	movs	r3, #12
 80029f8:	4638      	mov	r0, r7
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	f000 fbb2 	bl	8003164 <__malloc_unlock>
 8002a00:	e7a1      	b.n	8002946 <_malloc_r+0x22>
 8002a02:	6025      	str	r5, [r4, #0]
 8002a04:	e7de      	b.n	80029c4 <_malloc_r+0xa0>
 8002a06:	bf00      	nop
 8002a08:	200000f0 	.word	0x200000f0

08002a0c <__sfputc_r>:
 8002a0c:	6893      	ldr	r3, [r2, #8]
 8002a0e:	b410      	push	{r4}
 8002a10:	3b01      	subs	r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	6093      	str	r3, [r2, #8]
 8002a16:	da07      	bge.n	8002a28 <__sfputc_r+0x1c>
 8002a18:	6994      	ldr	r4, [r2, #24]
 8002a1a:	42a3      	cmp	r3, r4
 8002a1c:	db01      	blt.n	8002a22 <__sfputc_r+0x16>
 8002a1e:	290a      	cmp	r1, #10
 8002a20:	d102      	bne.n	8002a28 <__sfputc_r+0x1c>
 8002a22:	bc10      	pop	{r4}
 8002a24:	f7ff bc3a 	b.w	800229c <__swbuf_r>
 8002a28:	6813      	ldr	r3, [r2, #0]
 8002a2a:	1c58      	adds	r0, r3, #1
 8002a2c:	6010      	str	r0, [r2, #0]
 8002a2e:	7019      	strb	r1, [r3, #0]
 8002a30:	4608      	mov	r0, r1
 8002a32:	bc10      	pop	{r4}
 8002a34:	4770      	bx	lr

08002a36 <__sfputs_r>:
 8002a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a38:	4606      	mov	r6, r0
 8002a3a:	460f      	mov	r7, r1
 8002a3c:	4614      	mov	r4, r2
 8002a3e:	18d5      	adds	r5, r2, r3
 8002a40:	42ac      	cmp	r4, r5
 8002a42:	d101      	bne.n	8002a48 <__sfputs_r+0x12>
 8002a44:	2000      	movs	r0, #0
 8002a46:	e007      	b.n	8002a58 <__sfputs_r+0x22>
 8002a48:	463a      	mov	r2, r7
 8002a4a:	4630      	mov	r0, r6
 8002a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a50:	f7ff ffdc 	bl	8002a0c <__sfputc_r>
 8002a54:	1c43      	adds	r3, r0, #1
 8002a56:	d1f3      	bne.n	8002a40 <__sfputs_r+0xa>
 8002a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a5c <_vfiprintf_r>:
 8002a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a60:	460d      	mov	r5, r1
 8002a62:	4614      	mov	r4, r2
 8002a64:	4698      	mov	r8, r3
 8002a66:	4606      	mov	r6, r0
 8002a68:	b09d      	sub	sp, #116	; 0x74
 8002a6a:	b118      	cbz	r0, 8002a74 <_vfiprintf_r+0x18>
 8002a6c:	6983      	ldr	r3, [r0, #24]
 8002a6e:	b90b      	cbnz	r3, 8002a74 <_vfiprintf_r+0x18>
 8002a70:	f7ff fdea 	bl	8002648 <__sinit>
 8002a74:	4b89      	ldr	r3, [pc, #548]	; (8002c9c <_vfiprintf_r+0x240>)
 8002a76:	429d      	cmp	r5, r3
 8002a78:	d11b      	bne.n	8002ab2 <_vfiprintf_r+0x56>
 8002a7a:	6875      	ldr	r5, [r6, #4]
 8002a7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a7e:	07d9      	lsls	r1, r3, #31
 8002a80:	d405      	bmi.n	8002a8e <_vfiprintf_r+0x32>
 8002a82:	89ab      	ldrh	r3, [r5, #12]
 8002a84:	059a      	lsls	r2, r3, #22
 8002a86:	d402      	bmi.n	8002a8e <_vfiprintf_r+0x32>
 8002a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a8a:	f7ff fe7b 	bl	8002784 <__retarget_lock_acquire_recursive>
 8002a8e:	89ab      	ldrh	r3, [r5, #12]
 8002a90:	071b      	lsls	r3, r3, #28
 8002a92:	d501      	bpl.n	8002a98 <_vfiprintf_r+0x3c>
 8002a94:	692b      	ldr	r3, [r5, #16]
 8002a96:	b9eb      	cbnz	r3, 8002ad4 <_vfiprintf_r+0x78>
 8002a98:	4629      	mov	r1, r5
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	f7ff fc50 	bl	8002340 <__swsetup_r>
 8002aa0:	b1c0      	cbz	r0, 8002ad4 <_vfiprintf_r+0x78>
 8002aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002aa4:	07dc      	lsls	r4, r3, #31
 8002aa6:	d50e      	bpl.n	8002ac6 <_vfiprintf_r+0x6a>
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	b01d      	add	sp, #116	; 0x74
 8002aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ab2:	4b7b      	ldr	r3, [pc, #492]	; (8002ca0 <_vfiprintf_r+0x244>)
 8002ab4:	429d      	cmp	r5, r3
 8002ab6:	d101      	bne.n	8002abc <_vfiprintf_r+0x60>
 8002ab8:	68b5      	ldr	r5, [r6, #8]
 8002aba:	e7df      	b.n	8002a7c <_vfiprintf_r+0x20>
 8002abc:	4b79      	ldr	r3, [pc, #484]	; (8002ca4 <_vfiprintf_r+0x248>)
 8002abe:	429d      	cmp	r5, r3
 8002ac0:	bf08      	it	eq
 8002ac2:	68f5      	ldreq	r5, [r6, #12]
 8002ac4:	e7da      	b.n	8002a7c <_vfiprintf_r+0x20>
 8002ac6:	89ab      	ldrh	r3, [r5, #12]
 8002ac8:	0598      	lsls	r0, r3, #22
 8002aca:	d4ed      	bmi.n	8002aa8 <_vfiprintf_r+0x4c>
 8002acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ace:	f7ff fe5a 	bl	8002786 <__retarget_lock_release_recursive>
 8002ad2:	e7e9      	b.n	8002aa8 <_vfiprintf_r+0x4c>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ad8:	2320      	movs	r3, #32
 8002ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ade:	2330      	movs	r3, #48	; 0x30
 8002ae0:	f04f 0901 	mov.w	r9, #1
 8002ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ae8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002ca8 <_vfiprintf_r+0x24c>
 8002aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002af0:	4623      	mov	r3, r4
 8002af2:	469a      	mov	sl, r3
 8002af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002af8:	b10a      	cbz	r2, 8002afe <_vfiprintf_r+0xa2>
 8002afa:	2a25      	cmp	r2, #37	; 0x25
 8002afc:	d1f9      	bne.n	8002af2 <_vfiprintf_r+0x96>
 8002afe:	ebba 0b04 	subs.w	fp, sl, r4
 8002b02:	d00b      	beq.n	8002b1c <_vfiprintf_r+0xc0>
 8002b04:	465b      	mov	r3, fp
 8002b06:	4622      	mov	r2, r4
 8002b08:	4629      	mov	r1, r5
 8002b0a:	4630      	mov	r0, r6
 8002b0c:	f7ff ff93 	bl	8002a36 <__sfputs_r>
 8002b10:	3001      	adds	r0, #1
 8002b12:	f000 80aa 	beq.w	8002c6a <_vfiprintf_r+0x20e>
 8002b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b18:	445a      	add	r2, fp
 8002b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8002b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80a2 	beq.w	8002c6a <_vfiprintf_r+0x20e>
 8002b26:	2300      	movs	r3, #0
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b30:	f10a 0a01 	add.w	sl, sl, #1
 8002b34:	9304      	str	r3, [sp, #16]
 8002b36:	9307      	str	r3, [sp, #28]
 8002b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8002b3e:	4654      	mov	r4, sl
 8002b40:	2205      	movs	r2, #5
 8002b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b46:	4858      	ldr	r0, [pc, #352]	; (8002ca8 <_vfiprintf_r+0x24c>)
 8002b48:	f000 faf8 	bl	800313c <memchr>
 8002b4c:	9a04      	ldr	r2, [sp, #16]
 8002b4e:	b9d8      	cbnz	r0, 8002b88 <_vfiprintf_r+0x12c>
 8002b50:	06d1      	lsls	r1, r2, #27
 8002b52:	bf44      	itt	mi
 8002b54:	2320      	movmi	r3, #32
 8002b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b5a:	0713      	lsls	r3, r2, #28
 8002b5c:	bf44      	itt	mi
 8002b5e:	232b      	movmi	r3, #43	; 0x2b
 8002b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b64:	f89a 3000 	ldrb.w	r3, [sl]
 8002b68:	2b2a      	cmp	r3, #42	; 0x2a
 8002b6a:	d015      	beq.n	8002b98 <_vfiprintf_r+0x13c>
 8002b6c:	4654      	mov	r4, sl
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f04f 0c0a 	mov.w	ip, #10
 8002b74:	9a07      	ldr	r2, [sp, #28]
 8002b76:	4621      	mov	r1, r4
 8002b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b7c:	3b30      	subs	r3, #48	; 0x30
 8002b7e:	2b09      	cmp	r3, #9
 8002b80:	d94e      	bls.n	8002c20 <_vfiprintf_r+0x1c4>
 8002b82:	b1b0      	cbz	r0, 8002bb2 <_vfiprintf_r+0x156>
 8002b84:	9207      	str	r2, [sp, #28]
 8002b86:	e014      	b.n	8002bb2 <_vfiprintf_r+0x156>
 8002b88:	eba0 0308 	sub.w	r3, r0, r8
 8002b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	46a2      	mov	sl, r4
 8002b94:	9304      	str	r3, [sp, #16]
 8002b96:	e7d2      	b.n	8002b3e <_vfiprintf_r+0xe2>
 8002b98:	9b03      	ldr	r3, [sp, #12]
 8002b9a:	1d19      	adds	r1, r3, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	9103      	str	r1, [sp, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bfbb      	ittet	lt
 8002ba4:	425b      	neglt	r3, r3
 8002ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8002baa:	9307      	strge	r3, [sp, #28]
 8002bac:	9307      	strlt	r3, [sp, #28]
 8002bae:	bfb8      	it	lt
 8002bb0:	9204      	strlt	r2, [sp, #16]
 8002bb2:	7823      	ldrb	r3, [r4, #0]
 8002bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8002bb6:	d10c      	bne.n	8002bd2 <_vfiprintf_r+0x176>
 8002bb8:	7863      	ldrb	r3, [r4, #1]
 8002bba:	2b2a      	cmp	r3, #42	; 0x2a
 8002bbc:	d135      	bne.n	8002c2a <_vfiprintf_r+0x1ce>
 8002bbe:	9b03      	ldr	r3, [sp, #12]
 8002bc0:	3402      	adds	r4, #2
 8002bc2:	1d1a      	adds	r2, r3, #4
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	9203      	str	r2, [sp, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bfb8      	it	lt
 8002bcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bd0:	9305      	str	r3, [sp, #20]
 8002bd2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002cac <_vfiprintf_r+0x250>
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	4650      	mov	r0, sl
 8002bda:	7821      	ldrb	r1, [r4, #0]
 8002bdc:	f000 faae 	bl	800313c <memchr>
 8002be0:	b140      	cbz	r0, 8002bf4 <_vfiprintf_r+0x198>
 8002be2:	2340      	movs	r3, #64	; 0x40
 8002be4:	eba0 000a 	sub.w	r0, r0, sl
 8002be8:	fa03 f000 	lsl.w	r0, r3, r0
 8002bec:	9b04      	ldr	r3, [sp, #16]
 8002bee:	3401      	adds	r4, #1
 8002bf0:	4303      	orrs	r3, r0
 8002bf2:	9304      	str	r3, [sp, #16]
 8002bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bf8:	2206      	movs	r2, #6
 8002bfa:	482d      	ldr	r0, [pc, #180]	; (8002cb0 <_vfiprintf_r+0x254>)
 8002bfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c00:	f000 fa9c 	bl	800313c <memchr>
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d03f      	beq.n	8002c88 <_vfiprintf_r+0x22c>
 8002c08:	4b2a      	ldr	r3, [pc, #168]	; (8002cb4 <_vfiprintf_r+0x258>)
 8002c0a:	bb1b      	cbnz	r3, 8002c54 <_vfiprintf_r+0x1f8>
 8002c0c:	9b03      	ldr	r3, [sp, #12]
 8002c0e:	3307      	adds	r3, #7
 8002c10:	f023 0307 	bic.w	r3, r3, #7
 8002c14:	3308      	adds	r3, #8
 8002c16:	9303      	str	r3, [sp, #12]
 8002c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c1a:	443b      	add	r3, r7
 8002c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c1e:	e767      	b.n	8002af0 <_vfiprintf_r+0x94>
 8002c20:	460c      	mov	r4, r1
 8002c22:	2001      	movs	r0, #1
 8002c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c28:	e7a5      	b.n	8002b76 <_vfiprintf_r+0x11a>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f04f 0c0a 	mov.w	ip, #10
 8002c30:	4619      	mov	r1, r3
 8002c32:	3401      	adds	r4, #1
 8002c34:	9305      	str	r3, [sp, #20]
 8002c36:	4620      	mov	r0, r4
 8002c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c3c:	3a30      	subs	r2, #48	; 0x30
 8002c3e:	2a09      	cmp	r2, #9
 8002c40:	d903      	bls.n	8002c4a <_vfiprintf_r+0x1ee>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0c5      	beq.n	8002bd2 <_vfiprintf_r+0x176>
 8002c46:	9105      	str	r1, [sp, #20]
 8002c48:	e7c3      	b.n	8002bd2 <_vfiprintf_r+0x176>
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c52:	e7f0      	b.n	8002c36 <_vfiprintf_r+0x1da>
 8002c54:	ab03      	add	r3, sp, #12
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	462a      	mov	r2, r5
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <_vfiprintf_r+0x25c>)
 8002c5e:	a904      	add	r1, sp, #16
 8002c60:	f3af 8000 	nop.w
 8002c64:	4607      	mov	r7, r0
 8002c66:	1c78      	adds	r0, r7, #1
 8002c68:	d1d6      	bne.n	8002c18 <_vfiprintf_r+0x1bc>
 8002c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c6c:	07d9      	lsls	r1, r3, #31
 8002c6e:	d405      	bmi.n	8002c7c <_vfiprintf_r+0x220>
 8002c70:	89ab      	ldrh	r3, [r5, #12]
 8002c72:	059a      	lsls	r2, r3, #22
 8002c74:	d402      	bmi.n	8002c7c <_vfiprintf_r+0x220>
 8002c76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c78:	f7ff fd85 	bl	8002786 <__retarget_lock_release_recursive>
 8002c7c:	89ab      	ldrh	r3, [r5, #12]
 8002c7e:	065b      	lsls	r3, r3, #25
 8002c80:	f53f af12 	bmi.w	8002aa8 <_vfiprintf_r+0x4c>
 8002c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c86:	e711      	b.n	8002aac <_vfiprintf_r+0x50>
 8002c88:	ab03      	add	r3, sp, #12
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	462a      	mov	r2, r5
 8002c8e:	4630      	mov	r0, r6
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <_vfiprintf_r+0x25c>)
 8002c92:	a904      	add	r1, sp, #16
 8002c94:	f000 f882 	bl	8002d9c <_printf_i>
 8002c98:	e7e4      	b.n	8002c64 <_vfiprintf_r+0x208>
 8002c9a:	bf00      	nop
 8002c9c:	08003274 	.word	0x08003274
 8002ca0:	08003294 	.word	0x08003294
 8002ca4:	08003254 	.word	0x08003254
 8002ca8:	080032b4 	.word	0x080032b4
 8002cac:	080032ba 	.word	0x080032ba
 8002cb0:	080032be 	.word	0x080032be
 8002cb4:	00000000 	.word	0x00000000
 8002cb8:	08002a37 	.word	0x08002a37

08002cbc <_printf_common>:
 8002cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc0:	4616      	mov	r6, r2
 8002cc2:	4699      	mov	r9, r3
 8002cc4:	688a      	ldr	r2, [r1, #8]
 8002cc6:	690b      	ldr	r3, [r1, #16]
 8002cc8:	4607      	mov	r7, r0
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	bfb8      	it	lt
 8002cce:	4613      	movlt	r3, r2
 8002cd0:	6033      	str	r3, [r6, #0]
 8002cd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cdc:	b10a      	cbz	r2, 8002ce2 <_printf_common+0x26>
 8002cde:	3301      	adds	r3, #1
 8002ce0:	6033      	str	r3, [r6, #0]
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	0699      	lsls	r1, r3, #26
 8002ce6:	bf42      	ittt	mi
 8002ce8:	6833      	ldrmi	r3, [r6, #0]
 8002cea:	3302      	addmi	r3, #2
 8002cec:	6033      	strmi	r3, [r6, #0]
 8002cee:	6825      	ldr	r5, [r4, #0]
 8002cf0:	f015 0506 	ands.w	r5, r5, #6
 8002cf4:	d106      	bne.n	8002d04 <_printf_common+0x48>
 8002cf6:	f104 0a19 	add.w	sl, r4, #25
 8002cfa:	68e3      	ldr	r3, [r4, #12]
 8002cfc:	6832      	ldr	r2, [r6, #0]
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	42ab      	cmp	r3, r5
 8002d02:	dc28      	bgt.n	8002d56 <_printf_common+0x9a>
 8002d04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d08:	1e13      	subs	r3, r2, #0
 8002d0a:	6822      	ldr	r2, [r4, #0]
 8002d0c:	bf18      	it	ne
 8002d0e:	2301      	movne	r3, #1
 8002d10:	0692      	lsls	r2, r2, #26
 8002d12:	d42d      	bmi.n	8002d70 <_printf_common+0xb4>
 8002d14:	4649      	mov	r1, r9
 8002d16:	4638      	mov	r0, r7
 8002d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d1c:	47c0      	blx	r8
 8002d1e:	3001      	adds	r0, #1
 8002d20:	d020      	beq.n	8002d64 <_printf_common+0xa8>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	68e5      	ldr	r5, [r4, #12]
 8002d26:	f003 0306 	and.w	r3, r3, #6
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	bf18      	it	ne
 8002d2e:	2500      	movne	r5, #0
 8002d30:	6832      	ldr	r2, [r6, #0]
 8002d32:	f04f 0600 	mov.w	r6, #0
 8002d36:	68a3      	ldr	r3, [r4, #8]
 8002d38:	bf08      	it	eq
 8002d3a:	1aad      	subeq	r5, r5, r2
 8002d3c:	6922      	ldr	r2, [r4, #16]
 8002d3e:	bf08      	it	eq
 8002d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d44:	4293      	cmp	r3, r2
 8002d46:	bfc4      	itt	gt
 8002d48:	1a9b      	subgt	r3, r3, r2
 8002d4a:	18ed      	addgt	r5, r5, r3
 8002d4c:	341a      	adds	r4, #26
 8002d4e:	42b5      	cmp	r5, r6
 8002d50:	d11a      	bne.n	8002d88 <_printf_common+0xcc>
 8002d52:	2000      	movs	r0, #0
 8002d54:	e008      	b.n	8002d68 <_printf_common+0xac>
 8002d56:	2301      	movs	r3, #1
 8002d58:	4652      	mov	r2, sl
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	4638      	mov	r0, r7
 8002d5e:	47c0      	blx	r8
 8002d60:	3001      	adds	r0, #1
 8002d62:	d103      	bne.n	8002d6c <_printf_common+0xb0>
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d6c:	3501      	adds	r5, #1
 8002d6e:	e7c4      	b.n	8002cfa <_printf_common+0x3e>
 8002d70:	2030      	movs	r0, #48	; 0x30
 8002d72:	18e1      	adds	r1, r4, r3
 8002d74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d7e:	4422      	add	r2, r4
 8002d80:	3302      	adds	r3, #2
 8002d82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d86:	e7c5      	b.n	8002d14 <_printf_common+0x58>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	4649      	mov	r1, r9
 8002d8e:	4638      	mov	r0, r7
 8002d90:	47c0      	blx	r8
 8002d92:	3001      	adds	r0, #1
 8002d94:	d0e6      	beq.n	8002d64 <_printf_common+0xa8>
 8002d96:	3601      	adds	r6, #1
 8002d98:	e7d9      	b.n	8002d4e <_printf_common+0x92>
	...

08002d9c <_printf_i>:
 8002d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002da0:	7e0f      	ldrb	r7, [r1, #24]
 8002da2:	4691      	mov	r9, r2
 8002da4:	2f78      	cmp	r7, #120	; 0x78
 8002da6:	4680      	mov	r8, r0
 8002da8:	460c      	mov	r4, r1
 8002daa:	469a      	mov	sl, r3
 8002dac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002dae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002db2:	d807      	bhi.n	8002dc4 <_printf_i+0x28>
 8002db4:	2f62      	cmp	r7, #98	; 0x62
 8002db6:	d80a      	bhi.n	8002dce <_printf_i+0x32>
 8002db8:	2f00      	cmp	r7, #0
 8002dba:	f000 80d9 	beq.w	8002f70 <_printf_i+0x1d4>
 8002dbe:	2f58      	cmp	r7, #88	; 0x58
 8002dc0:	f000 80a4 	beq.w	8002f0c <_printf_i+0x170>
 8002dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002dcc:	e03a      	b.n	8002e44 <_printf_i+0xa8>
 8002dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002dd2:	2b15      	cmp	r3, #21
 8002dd4:	d8f6      	bhi.n	8002dc4 <_printf_i+0x28>
 8002dd6:	a101      	add	r1, pc, #4	; (adr r1, 8002ddc <_printf_i+0x40>)
 8002dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ddc:	08002e35 	.word	0x08002e35
 8002de0:	08002e49 	.word	0x08002e49
 8002de4:	08002dc5 	.word	0x08002dc5
 8002de8:	08002dc5 	.word	0x08002dc5
 8002dec:	08002dc5 	.word	0x08002dc5
 8002df0:	08002dc5 	.word	0x08002dc5
 8002df4:	08002e49 	.word	0x08002e49
 8002df8:	08002dc5 	.word	0x08002dc5
 8002dfc:	08002dc5 	.word	0x08002dc5
 8002e00:	08002dc5 	.word	0x08002dc5
 8002e04:	08002dc5 	.word	0x08002dc5
 8002e08:	08002f57 	.word	0x08002f57
 8002e0c:	08002e79 	.word	0x08002e79
 8002e10:	08002f39 	.word	0x08002f39
 8002e14:	08002dc5 	.word	0x08002dc5
 8002e18:	08002dc5 	.word	0x08002dc5
 8002e1c:	08002f79 	.word	0x08002f79
 8002e20:	08002dc5 	.word	0x08002dc5
 8002e24:	08002e79 	.word	0x08002e79
 8002e28:	08002dc5 	.word	0x08002dc5
 8002e2c:	08002dc5 	.word	0x08002dc5
 8002e30:	08002f41 	.word	0x08002f41
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	1d1a      	adds	r2, r3, #4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	602a      	str	r2, [r5, #0]
 8002e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0a4      	b.n	8002f92 <_printf_i+0x1f6>
 8002e48:	6820      	ldr	r0, [r4, #0]
 8002e4a:	6829      	ldr	r1, [r5, #0]
 8002e4c:	0606      	lsls	r6, r0, #24
 8002e4e:	f101 0304 	add.w	r3, r1, #4
 8002e52:	d50a      	bpl.n	8002e6a <_printf_i+0xce>
 8002e54:	680e      	ldr	r6, [r1, #0]
 8002e56:	602b      	str	r3, [r5, #0]
 8002e58:	2e00      	cmp	r6, #0
 8002e5a:	da03      	bge.n	8002e64 <_printf_i+0xc8>
 8002e5c:	232d      	movs	r3, #45	; 0x2d
 8002e5e:	4276      	negs	r6, r6
 8002e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e64:	230a      	movs	r3, #10
 8002e66:	485e      	ldr	r0, [pc, #376]	; (8002fe0 <_printf_i+0x244>)
 8002e68:	e019      	b.n	8002e9e <_printf_i+0x102>
 8002e6a:	680e      	ldr	r6, [r1, #0]
 8002e6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e70:	602b      	str	r3, [r5, #0]
 8002e72:	bf18      	it	ne
 8002e74:	b236      	sxthne	r6, r6
 8002e76:	e7ef      	b.n	8002e58 <_printf_i+0xbc>
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	6820      	ldr	r0, [r4, #0]
 8002e7c:	1d19      	adds	r1, r3, #4
 8002e7e:	6029      	str	r1, [r5, #0]
 8002e80:	0601      	lsls	r1, r0, #24
 8002e82:	d501      	bpl.n	8002e88 <_printf_i+0xec>
 8002e84:	681e      	ldr	r6, [r3, #0]
 8002e86:	e002      	b.n	8002e8e <_printf_i+0xf2>
 8002e88:	0646      	lsls	r6, r0, #25
 8002e8a:	d5fb      	bpl.n	8002e84 <_printf_i+0xe8>
 8002e8c:	881e      	ldrh	r6, [r3, #0]
 8002e8e:	2f6f      	cmp	r7, #111	; 0x6f
 8002e90:	bf0c      	ite	eq
 8002e92:	2308      	moveq	r3, #8
 8002e94:	230a      	movne	r3, #10
 8002e96:	4852      	ldr	r0, [pc, #328]	; (8002fe0 <_printf_i+0x244>)
 8002e98:	2100      	movs	r1, #0
 8002e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e9e:	6865      	ldr	r5, [r4, #4]
 8002ea0:	2d00      	cmp	r5, #0
 8002ea2:	bfa8      	it	ge
 8002ea4:	6821      	ldrge	r1, [r4, #0]
 8002ea6:	60a5      	str	r5, [r4, #8]
 8002ea8:	bfa4      	itt	ge
 8002eaa:	f021 0104 	bicge.w	r1, r1, #4
 8002eae:	6021      	strge	r1, [r4, #0]
 8002eb0:	b90e      	cbnz	r6, 8002eb6 <_printf_i+0x11a>
 8002eb2:	2d00      	cmp	r5, #0
 8002eb4:	d04d      	beq.n	8002f52 <_printf_i+0x1b6>
 8002eb6:	4615      	mov	r5, r2
 8002eb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ebc:	fb03 6711 	mls	r7, r3, r1, r6
 8002ec0:	5dc7      	ldrb	r7, [r0, r7]
 8002ec2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ec6:	4637      	mov	r7, r6
 8002ec8:	42bb      	cmp	r3, r7
 8002eca:	460e      	mov	r6, r1
 8002ecc:	d9f4      	bls.n	8002eb8 <_printf_i+0x11c>
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d10b      	bne.n	8002eea <_printf_i+0x14e>
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	07de      	lsls	r6, r3, #31
 8002ed6:	d508      	bpl.n	8002eea <_printf_i+0x14e>
 8002ed8:	6923      	ldr	r3, [r4, #16]
 8002eda:	6861      	ldr	r1, [r4, #4]
 8002edc:	4299      	cmp	r1, r3
 8002ede:	bfde      	ittt	le
 8002ee0:	2330      	movle	r3, #48	; 0x30
 8002ee2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ee6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002eea:	1b52      	subs	r2, r2, r5
 8002eec:	6122      	str	r2, [r4, #16]
 8002eee:	464b      	mov	r3, r9
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4640      	mov	r0, r8
 8002ef4:	f8cd a000 	str.w	sl, [sp]
 8002ef8:	aa03      	add	r2, sp, #12
 8002efa:	f7ff fedf 	bl	8002cbc <_printf_common>
 8002efe:	3001      	adds	r0, #1
 8002f00:	d14c      	bne.n	8002f9c <_printf_i+0x200>
 8002f02:	f04f 30ff 	mov.w	r0, #4294967295
 8002f06:	b004      	add	sp, #16
 8002f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f0c:	4834      	ldr	r0, [pc, #208]	; (8002fe0 <_printf_i+0x244>)
 8002f0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002f12:	6829      	ldr	r1, [r5, #0]
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f1a:	6029      	str	r1, [r5, #0]
 8002f1c:	061d      	lsls	r5, r3, #24
 8002f1e:	d514      	bpl.n	8002f4a <_printf_i+0x1ae>
 8002f20:	07df      	lsls	r7, r3, #31
 8002f22:	bf44      	itt	mi
 8002f24:	f043 0320 	orrmi.w	r3, r3, #32
 8002f28:	6023      	strmi	r3, [r4, #0]
 8002f2a:	b91e      	cbnz	r6, 8002f34 <_printf_i+0x198>
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	f023 0320 	bic.w	r3, r3, #32
 8002f32:	6023      	str	r3, [r4, #0]
 8002f34:	2310      	movs	r3, #16
 8002f36:	e7af      	b.n	8002e98 <_printf_i+0xfc>
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	f043 0320 	orr.w	r3, r3, #32
 8002f3e:	6023      	str	r3, [r4, #0]
 8002f40:	2378      	movs	r3, #120	; 0x78
 8002f42:	4828      	ldr	r0, [pc, #160]	; (8002fe4 <_printf_i+0x248>)
 8002f44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f48:	e7e3      	b.n	8002f12 <_printf_i+0x176>
 8002f4a:	0659      	lsls	r1, r3, #25
 8002f4c:	bf48      	it	mi
 8002f4e:	b2b6      	uxthmi	r6, r6
 8002f50:	e7e6      	b.n	8002f20 <_printf_i+0x184>
 8002f52:	4615      	mov	r5, r2
 8002f54:	e7bb      	b.n	8002ece <_printf_i+0x132>
 8002f56:	682b      	ldr	r3, [r5, #0]
 8002f58:	6826      	ldr	r6, [r4, #0]
 8002f5a:	1d18      	adds	r0, r3, #4
 8002f5c:	6961      	ldr	r1, [r4, #20]
 8002f5e:	6028      	str	r0, [r5, #0]
 8002f60:	0635      	lsls	r5, r6, #24
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	d501      	bpl.n	8002f6a <_printf_i+0x1ce>
 8002f66:	6019      	str	r1, [r3, #0]
 8002f68:	e002      	b.n	8002f70 <_printf_i+0x1d4>
 8002f6a:	0670      	lsls	r0, r6, #25
 8002f6c:	d5fb      	bpl.n	8002f66 <_printf_i+0x1ca>
 8002f6e:	8019      	strh	r1, [r3, #0]
 8002f70:	2300      	movs	r3, #0
 8002f72:	4615      	mov	r5, r2
 8002f74:	6123      	str	r3, [r4, #16]
 8002f76:	e7ba      	b.n	8002eee <_printf_i+0x152>
 8002f78:	682b      	ldr	r3, [r5, #0]
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	1d1a      	adds	r2, r3, #4
 8002f7e:	602a      	str	r2, [r5, #0]
 8002f80:	681d      	ldr	r5, [r3, #0]
 8002f82:	6862      	ldr	r2, [r4, #4]
 8002f84:	4628      	mov	r0, r5
 8002f86:	f000 f8d9 	bl	800313c <memchr>
 8002f8a:	b108      	cbz	r0, 8002f90 <_printf_i+0x1f4>
 8002f8c:	1b40      	subs	r0, r0, r5
 8002f8e:	6060      	str	r0, [r4, #4]
 8002f90:	6863      	ldr	r3, [r4, #4]
 8002f92:	6123      	str	r3, [r4, #16]
 8002f94:	2300      	movs	r3, #0
 8002f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f9a:	e7a8      	b.n	8002eee <_printf_i+0x152>
 8002f9c:	462a      	mov	r2, r5
 8002f9e:	4649      	mov	r1, r9
 8002fa0:	4640      	mov	r0, r8
 8002fa2:	6923      	ldr	r3, [r4, #16]
 8002fa4:	47d0      	blx	sl
 8002fa6:	3001      	adds	r0, #1
 8002fa8:	d0ab      	beq.n	8002f02 <_printf_i+0x166>
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	079b      	lsls	r3, r3, #30
 8002fae:	d413      	bmi.n	8002fd8 <_printf_i+0x23c>
 8002fb0:	68e0      	ldr	r0, [r4, #12]
 8002fb2:	9b03      	ldr	r3, [sp, #12]
 8002fb4:	4298      	cmp	r0, r3
 8002fb6:	bfb8      	it	lt
 8002fb8:	4618      	movlt	r0, r3
 8002fba:	e7a4      	b.n	8002f06 <_printf_i+0x16a>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	4632      	mov	r2, r6
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	47d0      	blx	sl
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	d09b      	beq.n	8002f02 <_printf_i+0x166>
 8002fca:	3501      	adds	r5, #1
 8002fcc:	68e3      	ldr	r3, [r4, #12]
 8002fce:	9903      	ldr	r1, [sp, #12]
 8002fd0:	1a5b      	subs	r3, r3, r1
 8002fd2:	42ab      	cmp	r3, r5
 8002fd4:	dcf2      	bgt.n	8002fbc <_printf_i+0x220>
 8002fd6:	e7eb      	b.n	8002fb0 <_printf_i+0x214>
 8002fd8:	2500      	movs	r5, #0
 8002fda:	f104 0619 	add.w	r6, r4, #25
 8002fde:	e7f5      	b.n	8002fcc <_printf_i+0x230>
 8002fe0:	080032c5 	.word	0x080032c5
 8002fe4:	080032d6 	.word	0x080032d6

08002fe8 <_sbrk_r>:
 8002fe8:	b538      	push	{r3, r4, r5, lr}
 8002fea:	2300      	movs	r3, #0
 8002fec:	4d05      	ldr	r5, [pc, #20]	; (8003004 <_sbrk_r+0x1c>)
 8002fee:	4604      	mov	r4, r0
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	602b      	str	r3, [r5, #0]
 8002ff4:	f7fd fc7e 	bl	80008f4 <_sbrk>
 8002ff8:	1c43      	adds	r3, r0, #1
 8002ffa:	d102      	bne.n	8003002 <_sbrk_r+0x1a>
 8002ffc:	682b      	ldr	r3, [r5, #0]
 8002ffe:	b103      	cbz	r3, 8003002 <_sbrk_r+0x1a>
 8003000:	6023      	str	r3, [r4, #0]
 8003002:	bd38      	pop	{r3, r4, r5, pc}
 8003004:	200000f8 	.word	0x200000f8

08003008 <__sread>:
 8003008:	b510      	push	{r4, lr}
 800300a:	460c      	mov	r4, r1
 800300c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003010:	f000 f8ae 	bl	8003170 <_read_r>
 8003014:	2800      	cmp	r0, #0
 8003016:	bfab      	itete	ge
 8003018:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800301a:	89a3      	ldrhlt	r3, [r4, #12]
 800301c:	181b      	addge	r3, r3, r0
 800301e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003022:	bfac      	ite	ge
 8003024:	6563      	strge	r3, [r4, #84]	; 0x54
 8003026:	81a3      	strhlt	r3, [r4, #12]
 8003028:	bd10      	pop	{r4, pc}

0800302a <__swrite>:
 800302a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800302e:	461f      	mov	r7, r3
 8003030:	898b      	ldrh	r3, [r1, #12]
 8003032:	4605      	mov	r5, r0
 8003034:	05db      	lsls	r3, r3, #23
 8003036:	460c      	mov	r4, r1
 8003038:	4616      	mov	r6, r2
 800303a:	d505      	bpl.n	8003048 <__swrite+0x1e>
 800303c:	2302      	movs	r3, #2
 800303e:	2200      	movs	r2, #0
 8003040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003044:	f000 f868 	bl	8003118 <_lseek_r>
 8003048:	89a3      	ldrh	r3, [r4, #12]
 800304a:	4632      	mov	r2, r6
 800304c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003050:	81a3      	strh	r3, [r4, #12]
 8003052:	4628      	mov	r0, r5
 8003054:	463b      	mov	r3, r7
 8003056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800305a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800305e:	f000 b817 	b.w	8003090 <_write_r>

08003062 <__sseek>:
 8003062:	b510      	push	{r4, lr}
 8003064:	460c      	mov	r4, r1
 8003066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800306a:	f000 f855 	bl	8003118 <_lseek_r>
 800306e:	1c43      	adds	r3, r0, #1
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	bf15      	itete	ne
 8003074:	6560      	strne	r0, [r4, #84]	; 0x54
 8003076:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800307a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800307e:	81a3      	strheq	r3, [r4, #12]
 8003080:	bf18      	it	ne
 8003082:	81a3      	strhne	r3, [r4, #12]
 8003084:	bd10      	pop	{r4, pc}

08003086 <__sclose>:
 8003086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800308a:	f000 b813 	b.w	80030b4 <_close_r>
	...

08003090 <_write_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4604      	mov	r4, r0
 8003094:	4608      	mov	r0, r1
 8003096:	4611      	mov	r1, r2
 8003098:	2200      	movs	r2, #0
 800309a:	4d05      	ldr	r5, [pc, #20]	; (80030b0 <_write_r+0x20>)
 800309c:	602a      	str	r2, [r5, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	f7fd fbdc 	bl	800085c <_write>
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	d102      	bne.n	80030ae <_write_r+0x1e>
 80030a8:	682b      	ldr	r3, [r5, #0]
 80030aa:	b103      	cbz	r3, 80030ae <_write_r+0x1e>
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	bd38      	pop	{r3, r4, r5, pc}
 80030b0:	200000f8 	.word	0x200000f8

080030b4 <_close_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	2300      	movs	r3, #0
 80030b8:	4d05      	ldr	r5, [pc, #20]	; (80030d0 <_close_r+0x1c>)
 80030ba:	4604      	mov	r4, r0
 80030bc:	4608      	mov	r0, r1
 80030be:	602b      	str	r3, [r5, #0]
 80030c0:	f7fd fbe8 	bl	8000894 <_close>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d102      	bne.n	80030ce <_close_r+0x1a>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	b103      	cbz	r3, 80030ce <_close_r+0x1a>
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
 80030d0:	200000f8 	.word	0x200000f8

080030d4 <_fstat_r>:
 80030d4:	b538      	push	{r3, r4, r5, lr}
 80030d6:	2300      	movs	r3, #0
 80030d8:	4d06      	ldr	r5, [pc, #24]	; (80030f4 <_fstat_r+0x20>)
 80030da:	4604      	mov	r4, r0
 80030dc:	4608      	mov	r0, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	602b      	str	r3, [r5, #0]
 80030e2:	f7fd fbe2 	bl	80008aa <_fstat>
 80030e6:	1c43      	adds	r3, r0, #1
 80030e8:	d102      	bne.n	80030f0 <_fstat_r+0x1c>
 80030ea:	682b      	ldr	r3, [r5, #0]
 80030ec:	b103      	cbz	r3, 80030f0 <_fstat_r+0x1c>
 80030ee:	6023      	str	r3, [r4, #0]
 80030f0:	bd38      	pop	{r3, r4, r5, pc}
 80030f2:	bf00      	nop
 80030f4:	200000f8 	.word	0x200000f8

080030f8 <_isatty_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	2300      	movs	r3, #0
 80030fc:	4d05      	ldr	r5, [pc, #20]	; (8003114 <_isatty_r+0x1c>)
 80030fe:	4604      	mov	r4, r0
 8003100:	4608      	mov	r0, r1
 8003102:	602b      	str	r3, [r5, #0]
 8003104:	f7fd fbe0 	bl	80008c8 <_isatty>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	d102      	bne.n	8003112 <_isatty_r+0x1a>
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	b103      	cbz	r3, 8003112 <_isatty_r+0x1a>
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	bd38      	pop	{r3, r4, r5, pc}
 8003114:	200000f8 	.word	0x200000f8

08003118 <_lseek_r>:
 8003118:	b538      	push	{r3, r4, r5, lr}
 800311a:	4604      	mov	r4, r0
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	2200      	movs	r2, #0
 8003122:	4d05      	ldr	r5, [pc, #20]	; (8003138 <_lseek_r+0x20>)
 8003124:	602a      	str	r2, [r5, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	f7fd fbd8 	bl	80008dc <_lseek>
 800312c:	1c43      	adds	r3, r0, #1
 800312e:	d102      	bne.n	8003136 <_lseek_r+0x1e>
 8003130:	682b      	ldr	r3, [r5, #0]
 8003132:	b103      	cbz	r3, 8003136 <_lseek_r+0x1e>
 8003134:	6023      	str	r3, [r4, #0]
 8003136:	bd38      	pop	{r3, r4, r5, pc}
 8003138:	200000f8 	.word	0x200000f8

0800313c <memchr>:
 800313c:	4603      	mov	r3, r0
 800313e:	b510      	push	{r4, lr}
 8003140:	b2c9      	uxtb	r1, r1
 8003142:	4402      	add	r2, r0
 8003144:	4293      	cmp	r3, r2
 8003146:	4618      	mov	r0, r3
 8003148:	d101      	bne.n	800314e <memchr+0x12>
 800314a:	2000      	movs	r0, #0
 800314c:	e003      	b.n	8003156 <memchr+0x1a>
 800314e:	7804      	ldrb	r4, [r0, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	428c      	cmp	r4, r1
 8003154:	d1f6      	bne.n	8003144 <memchr+0x8>
 8003156:	bd10      	pop	{r4, pc}

08003158 <__malloc_lock>:
 8003158:	4801      	ldr	r0, [pc, #4]	; (8003160 <__malloc_lock+0x8>)
 800315a:	f7ff bb13 	b.w	8002784 <__retarget_lock_acquire_recursive>
 800315e:	bf00      	nop
 8003160:	200000ec 	.word	0x200000ec

08003164 <__malloc_unlock>:
 8003164:	4801      	ldr	r0, [pc, #4]	; (800316c <__malloc_unlock+0x8>)
 8003166:	f7ff bb0e 	b.w	8002786 <__retarget_lock_release_recursive>
 800316a:	bf00      	nop
 800316c:	200000ec 	.word	0x200000ec

08003170 <_read_r>:
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	4604      	mov	r4, r0
 8003174:	4608      	mov	r0, r1
 8003176:	4611      	mov	r1, r2
 8003178:	2200      	movs	r2, #0
 800317a:	4d05      	ldr	r5, [pc, #20]	; (8003190 <_read_r+0x20>)
 800317c:	602a      	str	r2, [r5, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	f7fd fb4f 	bl	8000822 <_read>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d102      	bne.n	800318e <_read_r+0x1e>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	b103      	cbz	r3, 800318e <_read_r+0x1e>
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	200000f8 	.word	0x200000f8

08003194 <_init>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr

080031a0 <_fini>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr
