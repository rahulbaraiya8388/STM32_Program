
USB_Mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007680  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007804  08007804  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08007804  08007804  00017804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800780c  0800780c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800780c  0800780c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007810  08007810  00017810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08007814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000164  08007978  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000958  08007978  00020958  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b82e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002593  00000000  00000000  0002b9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002df50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002e930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015805  00000000  00000000  0002f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d405  00000000  00000000  000449ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000773fe  00000000  00000000  00051df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c91f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002190  00000000  00000000  000c9240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000164 	.word	0x20000164
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007728 	.word	0x08007728

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000168 	.word	0x20000168
 8000104:	08007728 	.word	0x08007728

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 f926 	bl	80006fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f81e 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f892 	bl	80005dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004b8:	f006 fc88 	bl	8006dcc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  buffer[0]=0x00;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <main+0x40>)
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
  buffer[1]=0x10;
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <main+0x40>)
 80004c4:	2210      	movs	r2, #16
 80004c6:	705a      	strb	r2, [r3, #1]
  buffer[2]=0x00;
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <main+0x40>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	709a      	strb	r2, [r3, #2]
  buffer[3]=0x00;
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <main+0x40>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	70da      	strb	r2, [r3, #3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,4);
 80004d4:	4904      	ldr	r1, [pc, #16]	; (80004e8 <main+0x40>)
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <main+0x44>)
 80004d8:	2204      	movs	r2, #4
 80004da:	0018      	movs	r0, r3
 80004dc:	f005 fa1c 	bl	8005918 <USBD_HID_SendReport>
	  HAL_Delay(100);
 80004e0:	2064      	movs	r0, #100	; 0x64
 80004e2:	f000 f97b 	bl	80007dc <HAL_Delay>
	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,4);
 80004e6:	e7f5      	b.n	80004d4 <main+0x2c>
 80004e8:	20000180 	.word	0x20000180
 80004ec:	2000018c 	.word	0x2000018c

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b09d      	sub	sp, #116	; 0x74
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	2438      	movs	r4, #56	; 0x38
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	0018      	movs	r0, r3
 80004fc:	2338      	movs	r3, #56	; 0x38
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f007 f909 	bl	8007718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000506:	2324      	movs	r3, #36	; 0x24
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	0018      	movs	r0, r3
 800050c:	2314      	movs	r3, #20
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f007 f901 	bl	8007718 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000516:	003b      	movs	r3, r7
 8000518:	0018      	movs	r0, r3
 800051a:	2324      	movs	r3, #36	; 0x24
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f007 f8fa 	bl	8007718 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <SystemClock_Config+0xe4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a2b      	ldr	r2, [pc, #172]	; (80005d8 <SystemClock_Config+0xe8>)
 800052a:	401a      	ands	r2, r3
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <SystemClock_Config+0xe4>)
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	0109      	lsls	r1, r1, #4
 8000532:	430a      	orrs	r2, r1
 8000534:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000536:	0021      	movs	r1, r4
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2222      	movs	r2, #34	; 0x22
 800053c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2201      	movs	r2, #1
 8000542:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2210      	movs	r2, #16
 8000548:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2202      	movs	r2, #2
 8000554:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	02d2      	lsls	r2, r2, #11
 8000562:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	03d2      	lsls	r2, r2, #15
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	187b      	adds	r3, r7, r1
 800056e:	0018      	movs	r0, r3
 8000570:	f002 f86e 	bl	8002650 <HAL_RCC_OscConfig>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000578:	f000 f852 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	2124      	movs	r1, #36	; 0x24
 800057e:	187b      	adds	r3, r7, r1
 8000580:	220f      	movs	r2, #15
 8000582:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2203      	movs	r2, #3
 8000588:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2101      	movs	r1, #1
 80005a0:	0018      	movs	r0, r3
 80005a2:	f002 fc19 	bl	8002dd8 <HAL_RCC_ClockConfig>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005aa:	f000 f839 	bl	8000620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005ae:	003b      	movs	r3, r7
 80005b0:	2240      	movs	r2, #64	; 0x40
 80005b2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005b4:	003b      	movs	r3, r7
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	04d2      	lsls	r2, r2, #19
 80005ba:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005bc:	003b      	movs	r3, r7
 80005be:	0018      	movs	r0, r3
 80005c0:	f002 fdf8 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80005c8:	f000 f82a 	bl	8000620 <Error_Handler>
  }
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b01d      	add	sp, #116	; 0x74
 80005d2:	bd90      	pop	{r4, r7, pc}
 80005d4:	40007000 	.word	0x40007000
 80005d8:	ffffe7ff 	.word	0xffffe7ff

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_GPIO_Init+0x40>)
 80005e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <MX_GPIO_Init+0x40>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	430a      	orrs	r2, r1
 80005ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_GPIO_Init+0x40>)
 80005f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	4013      	ands	r3, r2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_GPIO_Init+0x40>)
 80005fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <MX_GPIO_Init+0x40>)
 8000600:	2101      	movs	r1, #1
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <MX_GPIO_Init+0x40>)
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b002      	add	sp, #8
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	40021000 	.word	0x40021000

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <HAL_MspInit+0x24>)
 8000632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_MspInit+0x24>)
 8000636:	2101      	movs	r1, #1
 8000638:	430a      	orrs	r2, r1
 800063a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_MspInit+0x24>)
 800063e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_MspInit+0x24>)
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	0549      	lsls	r1, r1, #21
 8000646:	430a      	orrs	r2, r1
 8000648:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40021000 	.word	0x40021000

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000678:	f000 f894 	bl	80007a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <USB_IRQHandler+0x14>)
 800068a:	0018      	movs	r0, r3
 800068c:	f000 face 	bl	8000c2c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	20000650 	.word	0x20000650

0800069c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006ac:	f7ff fff6 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	480c      	ldr	r0, [pc, #48]	; (80006e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b2:	490d      	ldr	r1, [pc, #52]	; (80006e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b4:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <LoopForever+0xe>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c8:	4c0a      	ldr	r4, [pc, #40]	; (80006f4 <LoopForever+0x16>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006d6:	f006 fffb 	bl	80076d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006da:	f7ff fee5 	bl	80004a8 <main>

080006de <LoopForever>:

LoopForever:
    b LoopForever
 80006de:	e7fe      	b.n	80006de <LoopForever>
  ldr   r0, =_estack
 80006e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80006ec:	08007814 	.word	0x08007814
  ldr r2, =_sbss
 80006f0:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80006f4:	20000958 	.word	0x20000958

080006f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006f8:	e7fe      	b.n	80006f8 <ADC1_COMP_IRQHandler>
	...

080006fc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_Init+0x3c>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <HAL_Init+0x3c>)
 800070e:	2140      	movs	r1, #64	; 0x40
 8000710:	430a      	orrs	r2, r1
 8000712:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f811 	bl	800073c <HAL_InitTick>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d003      	beq.n	8000726 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	e001      	b.n	800072a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000726:	f7ff ff81 	bl	800062c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	781b      	ldrb	r3, [r3, #0]
}
 800072e:	0018      	movs	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40022000 	.word	0x40022000

0800073c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_InitTick+0x5c>)
 8000746:	681c      	ldr	r4, [r3, #0]
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_InitTick+0x60>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	0019      	movs	r1, r3
 800074e:	23fa      	movs	r3, #250	; 0xfa
 8000750:	0098      	lsls	r0, r3, #2
 8000752:	f7ff fcd9 	bl	8000108 <__udivsi3>
 8000756:	0003      	movs	r3, r0
 8000758:	0019      	movs	r1, r3
 800075a:	0020      	movs	r0, r4
 800075c:	f7ff fcd4 	bl	8000108 <__udivsi3>
 8000760:	0003      	movs	r3, r0
 8000762:	0018      	movs	r0, r3
 8000764:	f000 f92f 	bl	80009c6 <HAL_SYSTICK_Config>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800076c:	2301      	movs	r3, #1
 800076e:	e00f      	b.n	8000790 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b03      	cmp	r3, #3
 8000774:	d80b      	bhi.n	800078e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	2301      	movs	r3, #1
 800077a:	425b      	negs	r3, r3
 800077c:	2200      	movs	r2, #0
 800077e:	0018      	movs	r0, r3
 8000780:	f000 f8fc 	bl	800097c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_InitTick+0x64>)
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	b003      	add	sp, #12
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	20000000 	.word	0x20000000
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000004 	.word	0x20000004

080007a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x1c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	001a      	movs	r2, r3
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x20>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	18d2      	adds	r2, r2, r3
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <HAL_IncTick+0x20>)
 80007b6:	601a      	str	r2, [r3, #0]
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000184 	.word	0x20000184

080007c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;
 80007cc:	4b02      	ldr	r3, [pc, #8]	; (80007d8 <HAL_GetTick+0x10>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	0018      	movs	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	20000184 	.word	0x20000184

080007dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e4:	f7ff fff0 	bl	80007c8 <HAL_GetTick>
 80007e8:	0003      	movs	r3, r0
 80007ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
 80007f4:	d005      	beq.n	8000802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_Delay+0x44>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	001a      	movs	r2, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	189b      	adds	r3, r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	f7ff ffe0 	bl	80007c8 <HAL_GetTick>
 8000808:	0002      	movs	r2, r0
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	d8f7      	bhi.n	8000804 <HAL_Delay+0x28>
  {
  }
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b004      	add	sp, #16
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000008 	.word	0x20000008

08000824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	0002      	movs	r2, r0
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b7f      	cmp	r3, #127	; 0x7f
 8000836:	d809      	bhi.n	800084c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	001a      	movs	r2, r3
 800083e:	231f      	movs	r3, #31
 8000840:	401a      	ands	r2, r3
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <__NVIC_EnableIRQ+0x30>)
 8000844:	2101      	movs	r1, #1
 8000846:	4091      	lsls	r1, r2
 8000848:	000a      	movs	r2, r1
 800084a:	601a      	str	r2, [r3, #0]
  }
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}
 8000854:	e000e100 	.word	0xe000e100

08000858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	0002      	movs	r2, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b7f      	cmp	r3, #127	; 0x7f
 800086c:	d828      	bhi.n	80008c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800086e:	4a2f      	ldr	r2, [pc, #188]	; (800092c <__NVIC_SetPriority+0xd4>)
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b25b      	sxtb	r3, r3
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	33c0      	adds	r3, #192	; 0xc0
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	589b      	ldr	r3, [r3, r2]
 800087e:	1dfa      	adds	r2, r7, #7
 8000880:	7812      	ldrb	r2, [r2, #0]
 8000882:	0011      	movs	r1, r2
 8000884:	2203      	movs	r2, #3
 8000886:	400a      	ands	r2, r1
 8000888:	00d2      	lsls	r2, r2, #3
 800088a:	21ff      	movs	r1, #255	; 0xff
 800088c:	4091      	lsls	r1, r2
 800088e:	000a      	movs	r2, r1
 8000890:	43d2      	mvns	r2, r2
 8000892:	401a      	ands	r2, r3
 8000894:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	019b      	lsls	r3, r3, #6
 800089a:	22ff      	movs	r2, #255	; 0xff
 800089c:	401a      	ands	r2, r3
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	0018      	movs	r0, r3
 80008a4:	2303      	movs	r3, #3
 80008a6:	4003      	ands	r3, r0
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ac:	481f      	ldr	r0, [pc, #124]	; (800092c <__NVIC_SetPriority+0xd4>)
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	089b      	lsrs	r3, r3, #2
 80008b6:	430a      	orrs	r2, r1
 80008b8:	33c0      	adds	r3, #192	; 0xc0
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008be:	e031      	b.n	8000924 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c0:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <__NVIC_SetPriority+0xd8>)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	0019      	movs	r1, r3
 80008c8:	230f      	movs	r3, #15
 80008ca:	400b      	ands	r3, r1
 80008cc:	3b08      	subs	r3, #8
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	3306      	adds	r3, #6
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	3304      	adds	r3, #4
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	1dfa      	adds	r2, r7, #7
 80008dc:	7812      	ldrb	r2, [r2, #0]
 80008de:	0011      	movs	r1, r2
 80008e0:	2203      	movs	r2, #3
 80008e2:	400a      	ands	r2, r1
 80008e4:	00d2      	lsls	r2, r2, #3
 80008e6:	21ff      	movs	r1, #255	; 0xff
 80008e8:	4091      	lsls	r1, r2
 80008ea:	000a      	movs	r2, r1
 80008ec:	43d2      	mvns	r2, r2
 80008ee:	401a      	ands	r2, r3
 80008f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	019b      	lsls	r3, r3, #6
 80008f6:	22ff      	movs	r2, #255	; 0xff
 80008f8:	401a      	ands	r2, r3
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	0018      	movs	r0, r3
 8000900:	2303      	movs	r3, #3
 8000902:	4003      	ands	r3, r0
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <__NVIC_SetPriority+0xd8>)
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	001c      	movs	r4, r3
 8000910:	230f      	movs	r3, #15
 8000912:	4023      	ands	r3, r4
 8000914:	3b08      	subs	r3, #8
 8000916:	089b      	lsrs	r3, r3, #2
 8000918:	430a      	orrs	r2, r1
 800091a:	3306      	adds	r3, #6
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	18c3      	adds	r3, r0, r3
 8000920:	3304      	adds	r3, #4
 8000922:	601a      	str	r2, [r3, #0]
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b003      	add	sp, #12
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	1e5a      	subs	r2, r3, #1
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	045b      	lsls	r3, r3, #17
 8000944:	429a      	cmp	r2, r3
 8000946:	d301      	bcc.n	800094c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000948:	2301      	movs	r3, #1
 800094a:	e010      	b.n	800096e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <SysTick_Config+0x44>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	3a01      	subs	r2, #1
 8000952:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000954:	2301      	movs	r3, #1
 8000956:	425b      	negs	r3, r3
 8000958:	2103      	movs	r1, #3
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff ff7c 	bl	8000858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <SysTick_Config+0x44>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <SysTick_Config+0x44>)
 8000968:	2207      	movs	r2, #7
 800096a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800096c:	2300      	movs	r3, #0
}
 800096e:	0018      	movs	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	e000e010 	.word	0xe000e010

0800097c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	210f      	movs	r1, #15
 8000988:	187b      	adds	r3, r7, r1
 800098a:	1c02      	adds	r2, r0, #0
 800098c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	187b      	adds	r3, r7, r1
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b25b      	sxtb	r3, r3
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff ff5d 	bl	8000858 <__NVIC_SetPriority>
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b004      	add	sp, #16
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	0002      	movs	r2, r0
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff ff33 	bl	8000824 <__NVIC_EnableIRQ>
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff ffaf 	bl	8000934 <SysTick_Config>
 80009d6:	0003      	movs	r3, r0
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80009e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e2:	b08b      	sub	sp, #44	; 0x2c
 80009e4:	af06      	add	r7, sp, #24
 80009e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d101      	bne.n	80009f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e0f0      	b.n	8000bd4 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a79      	ldr	r2, [pc, #484]	; (8000bdc <HAL_PCD_Init+0x1fc>)
 80009f6:	5c9b      	ldrb	r3, [r3, r2]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d108      	bne.n	8000a10 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	23aa      	movs	r3, #170	; 0xaa
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	2100      	movs	r1, #0
 8000a06:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f006 fb34 	bl	8007078 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a72      	ldr	r2, [pc, #456]	; (8000bdc <HAL_PCD_Init+0x1fc>)
 8000a14:	2103      	movs	r1, #3
 8000a16:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f002 fd6d 	bl	80034fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a22:	230f      	movs	r3, #15
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	e049      	b.n	8000ac0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000a2c:	200f      	movs	r0, #15
 8000a2e:	183b      	adds	r3, r7, r0
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	0013      	movs	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	189b      	adds	r3, r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	18cb      	adds	r3, r1, r3
 8000a40:	3301      	adds	r3, #1
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000a46:	183b      	adds	r3, r7, r0
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	0013      	movs	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	189b      	adds	r3, r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	183a      	adds	r2, r7, r0
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a5c:	183b      	adds	r3, r7, r0
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	0013      	movs	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	189b      	adds	r3, r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	18cb      	adds	r3, r1, r3
 8000a6e:	3303      	adds	r3, #3
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000a74:	183b      	adds	r3, r7, r0
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	189b      	adds	r3, r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	18cb      	adds	r3, r1, r3
 8000a84:	3338      	adds	r3, #56	; 0x38
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000a8a:	183b      	adds	r3, r7, r0
 8000a8c:	781a      	ldrb	r2, [r3, #0]
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	0013      	movs	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	189b      	adds	r3, r3, r2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	18cb      	adds	r3, r1, r3
 8000a9a:	333c      	adds	r3, #60	; 0x3c
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000aa0:	183b      	adds	r3, r7, r0
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	0013      	movs	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	189b      	adds	r3, r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	18cb      	adds	r3, r1, r3
 8000ab0:	3340      	adds	r3, #64	; 0x40
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ab6:	183b      	adds	r3, r7, r0
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	183b      	adds	r3, r7, r0
 8000abc:	3201      	adds	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	210f      	movs	r1, #15
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d3ae      	bcc.n	8000a2c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e056      	b.n	8000b84 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ad6:	240f      	movs	r4, #15
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	236a      	movs	r3, #106	; 0x6a
 8000ae0:	33ff      	adds	r3, #255	; 0xff
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	189b      	adds	r3, r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	18c3      	adds	r3, r0, r3
 8000aee:	185b      	adds	r3, r3, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	781a      	ldrb	r2, [r3, #0]
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	23b4      	movs	r3, #180	; 0xb4
 8000afc:	0059      	lsls	r1, r3, #1
 8000afe:	0013      	movs	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	189b      	adds	r3, r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	18c3      	adds	r3, r0, r3
 8000b08:	185b      	adds	r3, r3, r1
 8000b0a:	193a      	adds	r2, r7, r4
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	236c      	movs	r3, #108	; 0x6c
 8000b18:	33ff      	adds	r3, #255	; 0xff
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	189b      	adds	r3, r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	18c3      	adds	r3, r0, r3
 8000b26:	185b      	adds	r3, r3, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	23bc      	movs	r3, #188	; 0xbc
 8000b34:	0059      	lsls	r1, r3, #1
 8000b36:	0013      	movs	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	189b      	adds	r3, r3, r2
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	18c3      	adds	r3, r0, r3
 8000b40:	185b      	adds	r3, r3, r1
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	23be      	movs	r3, #190	; 0xbe
 8000b4e:	0059      	lsls	r1, r3, #1
 8000b50:	0013      	movs	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	189b      	adds	r3, r3, r2
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	18c3      	adds	r3, r0, r3
 8000b5a:	185b      	adds	r3, r3, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	23c0      	movs	r3, #192	; 0xc0
 8000b68:	0059      	lsls	r1, r3, #1
 8000b6a:	0013      	movs	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	189b      	adds	r3, r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	18c3      	adds	r3, r0, r3
 8000b74:	185b      	adds	r3, r3, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	3201      	adds	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	230f      	movs	r3, #15
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d3a1      	bcc.n	8000ad6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	466a      	mov	r2, sp
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	3210      	adds	r2, #16
 8000ba0:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000ba2:	c170      	stmia	r1!, {r4, r5, r6}
 8000ba4:	ca30      	ldmia	r2!, {r4, r5}
 8000ba6:	c130      	stmia	r1!, {r4, r5}
 8000ba8:	6859      	ldr	r1, [r3, #4]
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	f002 fcbf 	bl	8003530 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2224      	movs	r2, #36	; 0x24
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_PCD_Init+0x1fc>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d103      	bne.n	8000bd2 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 fd09 	bl	80025e4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b005      	add	sp, #20
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bdc:	000002a9 	.word	0x000002a9

08000be0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	23aa      	movs	r3, #170	; 0xaa
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	5cd3      	ldrb	r3, [r2, r3]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d101      	bne.n	8000bf8 <HAL_PCD_Start+0x18>
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e014      	b.n	8000c22 <HAL_PCD_Start+0x42>
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	23aa      	movs	r3, #170	; 0xaa
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	2101      	movs	r1, #1
 8000c00:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	0018      	movs	r0, r3
 8000c08:	f002 fc62 	bl	80034d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	0018      	movs	r0, r3
 8000c12:	f004 fc65 	bl	80054e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	23aa      	movs	r3, #170	; 0xaa
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b002      	add	sp, #8
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f004 fc67 	bl	800550c <USB_ReadInterrupts>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d004      	beq.n	8000c56 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 fb48 	bl	80012e4 <PCD_EP_ISR_Handler>

    return;
 8000c54:	e11d      	b.n	8000e92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	d015      	beq.n	8000c8c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2244      	movs	r2, #68	; 0x44
 8000c66:	5a9b      	ldrh	r3, [r3, r2]
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	498a      	ldr	r1, [pc, #552]	; (8000e98 <HAL_PCD_IRQHandler+0x26c>)
 8000c70:	400a      	ands	r2, r1
 8000c72:	b291      	uxth	r1, r2
 8000c74:	2244      	movs	r2, #68	; 0x44
 8000c76:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f006 fa7f 	bl	800717e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2100      	movs	r1, #0
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 f915 	bl	8000eb4 <HAL_PCD_SetAddress>

    return;
 8000c8a:	e102      	b.n	8000e92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	01db      	lsls	r3, r3, #7
 8000c92:	4013      	ands	r3, r2
 8000c94:	d00c      	beq.n	8000cb0 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2244      	movs	r2, #68	; 0x44
 8000c9c:	5a9b      	ldrh	r3, [r3, r2]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	497d      	ldr	r1, [pc, #500]	; (8000e9c <HAL_PCD_IRQHandler+0x270>)
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	b291      	uxth	r1, r2
 8000caa:	2244      	movs	r2, #68	; 0x44
 8000cac:	5299      	strh	r1, [r3, r2]

    return;
 8000cae:	e0f0      	b.n	8000e92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	d00c      	beq.n	8000cd4 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2244      	movs	r2, #68	; 0x44
 8000cc0:	5a9b      	ldrh	r3, [r3, r2]
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4975      	ldr	r1, [pc, #468]	; (8000ea0 <HAL_PCD_IRQHandler+0x274>)
 8000cca:	400a      	ands	r2, r1
 8000ccc:	b291      	uxth	r1, r2
 8000cce:	2244      	movs	r2, #68	; 0x44
 8000cd0:	5299      	strh	r1, [r3, r2]

    return;
 8000cd2:	e0de      	b.n	8000e92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	015b      	lsls	r3, r3, #5
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d038      	beq.n	8000d50 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2240      	movs	r2, #64	; 0x40
 8000ce4:	5a9b      	ldrh	r3, [r3, r2]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2104      	movs	r1, #4
 8000cee:	438a      	bics	r2, r1
 8000cf0:	b291      	uxth	r1, r2
 8000cf2:	2240      	movs	r2, #64	; 0x40
 8000cf4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2240      	movs	r2, #64	; 0x40
 8000cfc:	5a9b      	ldrh	r3, [r3, r2]
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2108      	movs	r1, #8
 8000d06:	438a      	bics	r2, r1
 8000d08:	b291      	uxth	r1, r2
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	23b8      	movs	r3, #184	; 0xb8
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	5cd3      	ldrb	r3, [r2, r3]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d109      	bne.n	8000d2e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	23b8      	movs	r3, #184	; 0xb8
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	2100      	movs	r1, #0
 8000d22:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2100      	movs	r1, #0
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f001 fc85 	bl	8002638 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	0018      	movs	r0, r3
 8000d32:	f006 fa65 	bl	8007200 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2244      	movs	r2, #68	; 0x44
 8000d3c:	5a9b      	ldrh	r3, [r3, r2]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4957      	ldr	r1, [pc, #348]	; (8000ea4 <HAL_PCD_IRQHandler+0x278>)
 8000d46:	400a      	ands	r2, r1
 8000d48:	b291      	uxth	r1, r2
 8000d4a:	2244      	movs	r2, #68	; 0x44
 8000d4c:	5299      	strh	r1, [r3, r2]

    return;
 8000d4e:	e0a0      	b.n	8000e92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	4013      	ands	r3, r2
 8000d58:	d028      	beq.n	8000dac <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2240      	movs	r2, #64	; 0x40
 8000d60:	5a9b      	ldrh	r3, [r3, r2]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2108      	movs	r1, #8
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	b291      	uxth	r1, r2
 8000d6e:	2240      	movs	r2, #64	; 0x40
 8000d70:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2244      	movs	r2, #68	; 0x44
 8000d78:	5a9b      	ldrh	r3, [r3, r2]
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4949      	ldr	r1, [pc, #292]	; (8000ea8 <HAL_PCD_IRQHandler+0x27c>)
 8000d82:	400a      	ands	r2, r1
 8000d84:	b291      	uxth	r1, r2
 8000d86:	2244      	movs	r2, #68	; 0x44
 8000d88:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2240      	movs	r2, #64	; 0x40
 8000d90:	5a9b      	ldrh	r3, [r3, r2]
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2104      	movs	r1, #4
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	b291      	uxth	r1, r2
 8000d9e:	2240      	movs	r2, #64	; 0x40
 8000da0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	0018      	movs	r0, r3
 8000da6:	f006 fa0f 	bl	80071c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000daa:	e072      	b.n	8000e92 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2280      	movs	r2, #128	; 0x80
 8000db0:	4013      	ands	r3, r2
 8000db2:	d046      	beq.n	8000e42 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2244      	movs	r2, #68	; 0x44
 8000dba:	5a9b      	ldrh	r3, [r3, r2]
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	438a      	bics	r2, r1
 8000dc6:	b291      	uxth	r1, r2
 8000dc8:	2244      	movs	r2, #68	; 0x44
 8000dca:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	23b8      	movs	r3, #184	; 0xb8
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	5cd3      	ldrb	r3, [r2, r3]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d12f      	bne.n	8000e38 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2240      	movs	r2, #64	; 0x40
 8000dde:	5a9b      	ldrh	r3, [r3, r2]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2104      	movs	r1, #4
 8000de8:	430a      	orrs	r2, r1
 8000dea:	b291      	uxth	r1, r2
 8000dec:	2240      	movs	r2, #64	; 0x40
 8000dee:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2240      	movs	r2, #64	; 0x40
 8000df6:	5a9b      	ldrh	r3, [r3, r2]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2108      	movs	r1, #8
 8000e00:	430a      	orrs	r2, r1
 8000e02:	b291      	uxth	r1, r2
 8000e04:	2240      	movs	r2, #64	; 0x40
 8000e06:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	23b8      	movs	r3, #184	; 0xb8
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	2101      	movs	r1, #1
 8000e10:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2254      	movs	r2, #84	; 0x54
 8000e18:	5a9b      	ldrh	r3, [r3, r2]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	223c      	movs	r2, #60	; 0x3c
 8000e20:	4013      	ands	r3, r2
 8000e22:	0019      	movs	r1, r3
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	23b9      	movs	r3, #185	; 0xb9
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2101      	movs	r1, #1
 8000e30:	0018      	movs	r0, r3
 8000e32:	f001 fc01 	bl	8002638 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000e36:	e02c      	b.n	8000e92 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f006 f9c4 	bl	80071c8 <HAL_PCD_SuspendCallback>
    return;
 8000e40:	e027      	b.n	8000e92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d010      	beq.n	8000e6e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2244      	movs	r2, #68	; 0x44
 8000e52:	5a9b      	ldrh	r3, [r3, r2]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4914      	ldr	r1, [pc, #80]	; (8000eac <HAL_PCD_IRQHandler+0x280>)
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	b291      	uxth	r1, r2
 8000e60:	2244      	movs	r2, #68	; 0x44
 8000e62:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	0018      	movs	r0, r3
 8000e68:	f006 f97a 	bl	8007160 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000e6c:	e011      	b.n	8000e92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4013      	ands	r3, r2
 8000e76:	d00c      	beq.n	8000e92 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2244      	movs	r2, #68	; 0x44
 8000e7e:	5a9b      	ldrh	r3, [r3, r2]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	490a      	ldr	r1, [pc, #40]	; (8000eb0 <HAL_PCD_IRQHandler+0x284>)
 8000e88:	400a      	ands	r2, r1
 8000e8a:	b291      	uxth	r1, r2
 8000e8c:	2244      	movs	r2, #68	; 0x44
 8000e8e:	5299      	strh	r1, [r3, r2]

    return;
 8000e90:	46c0      	nop			; (mov r8, r8)
  }
}
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b004      	add	sp, #16
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	fffffbff 	.word	0xfffffbff
 8000e9c:	ffffbfff 	.word	0xffffbfff
 8000ea0:	ffffdfff 	.word	0xffffdfff
 8000ea4:	ffffefff 	.word	0xffffefff
 8000ea8:	fffff7ff 	.word	0xfffff7ff
 8000eac:	fffffdff 	.word	0xfffffdff
 8000eb0:	fffffeff 	.word	0xfffffeff

08000eb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	1cfb      	adds	r3, r7, #3
 8000ec0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	23aa      	movs	r3, #170	; 0xaa
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d101      	bne.n	8000ed2 <HAL_PCD_SetAddress+0x1e>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e017      	b.n	8000f02 <HAL_PCD_SetAddress+0x4e>
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	23aa      	movs	r3, #170	; 0xaa
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	2101      	movs	r1, #1
 8000eda:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	1cfa      	adds	r2, r7, #3
 8000ee0:	2124      	movs	r1, #36	; 0x24
 8000ee2:	7812      	ldrb	r2, [r2, #0]
 8000ee4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	1cfb      	adds	r3, r7, #3
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	0019      	movs	r1, r3
 8000ef0:	0010      	movs	r0, r2
 8000ef2:	f004 fae1 	bl	80054b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	23aa      	movs	r3, #170	; 0xaa
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	2100      	movs	r1, #0
 8000efe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000f0a:	b590      	push	{r4, r7, lr}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	000c      	movs	r4, r1
 8000f14:	0010      	movs	r0, r2
 8000f16:	0019      	movs	r1, r3
 8000f18:	1cfb      	adds	r3, r7, #3
 8000f1a:	1c22      	adds	r2, r4, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	003b      	movs	r3, r7
 8000f20:	1c02      	adds	r2, r0, #0
 8000f22:	801a      	strh	r2, [r3, #0]
 8000f24:	1cbb      	adds	r3, r7, #2
 8000f26:	1c0a      	adds	r2, r1, #0
 8000f28:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f2a:	230b      	movs	r3, #11
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f32:	1cfb      	adds	r3, r7, #3
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	da0f      	bge.n	8000f5c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f3c:	1cfb      	adds	r3, r7, #3
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2207      	movs	r2, #7
 8000f42:	4013      	ands	r3, r2
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	0013      	movs	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	189b      	adds	r3, r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	18d3      	adds	r3, r2, r3
 8000f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2201      	movs	r2, #1
 8000f58:	705a      	strb	r2, [r3, #1]
 8000f5a:	e00f      	b.n	8000f7c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f5c:	1cfb      	adds	r3, r7, #3
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2207      	movs	r2, #7
 8000f62:	401a      	ands	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	189b      	adds	r3, r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	3369      	adds	r3, #105	; 0x69
 8000f6e:	33ff      	adds	r3, #255	; 0xff
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	18d3      	adds	r3, r2, r3
 8000f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000f7c:	1cfb      	adds	r3, r7, #3
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2207      	movs	r2, #7
 8000f82:	4013      	ands	r3, r2
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000f8a:	003b      	movs	r3, r7
 8000f8c:	881a      	ldrh	r2, [r3, #0]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1cba      	adds	r2, r7, #2
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000f9a:	1cbb      	adds	r3, r7, #2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d102      	bne.n	8000fa8 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	23aa      	movs	r3, #170	; 0xaa
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	5cd3      	ldrb	r3, [r2, r3]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_PCD_EP_Open+0xae>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e013      	b.n	8000fe0 <HAL_PCD_EP_Open+0xd6>
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	23aa      	movs	r3, #170	; 0xaa
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	0011      	movs	r1, r2
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f002 fad8 	bl	8003580 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	23aa      	movs	r3, #170	; 0xaa
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	54d1      	strb	r1, [r2, r3]

  return ret;
 8000fda:	230b      	movs	r3, #11
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	781b      	ldrb	r3, [r3, #0]
}
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b005      	add	sp, #20
 8000fe6:	bd90      	pop	{r4, r7, pc}

08000fe8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	000a      	movs	r2, r1
 8000ff2:	1cfb      	adds	r3, r7, #3
 8000ff4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ff6:	1cfb      	adds	r3, r7, #3
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	da0f      	bge.n	8001020 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001000:	1cfb      	adds	r3, r7, #3
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2207      	movs	r2, #7
 8001006:	4013      	ands	r3, r2
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	0013      	movs	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	189b      	adds	r3, r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	18d3      	adds	r3, r2, r3
 8001016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2201      	movs	r2, #1
 800101c:	705a      	strb	r2, [r3, #1]
 800101e:	e00f      	b.n	8001040 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001020:	1cfb      	adds	r3, r7, #3
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2207      	movs	r2, #7
 8001026:	401a      	ands	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	189b      	adds	r3, r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	3369      	adds	r3, #105	; 0x69
 8001032:	33ff      	adds	r3, #255	; 0xff
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	18d3      	adds	r3, r2, r3
 8001038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001040:	1cfb      	adds	r3, r7, #3
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2207      	movs	r2, #7
 8001046:	4013      	ands	r3, r2
 8001048:	b2da      	uxtb	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	23aa      	movs	r3, #170	; 0xaa
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	5cd3      	ldrb	r3, [r2, r3]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d101      	bne.n	800105e <HAL_PCD_EP_Close+0x76>
 800105a:	2302      	movs	r3, #2
 800105c:	e011      	b.n	8001082 <HAL_PCD_EP_Close+0x9a>
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	23aa      	movs	r3, #170	; 0xaa
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	2101      	movs	r1, #1
 8001066:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	0011      	movs	r1, r2
 8001070:	0018      	movs	r0, r3
 8001072:	f002 fe27 	bl	8003cc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	23aa      	movs	r3, #170	; 0xaa
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	2100      	movs	r1, #0
 800107e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b004      	add	sp, #16
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	200b      	movs	r0, #11
 8001098:	183b      	adds	r3, r7, r0
 800109a:	1c0a      	adds	r2, r1, #0
 800109c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800109e:	0001      	movs	r1, r0
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2207      	movs	r2, #7
 80010a6:	401a      	ands	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	189b      	adds	r3, r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	3369      	adds	r3, #105	; 0x69
 80010b2:	33ff      	adds	r3, #255	; 0xff
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	18d3      	adds	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	2200      	movs	r2, #0
 80010d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2207      	movs	r2, #7
 80010d8:	4013      	ands	r3, r2
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f002 ffab 	bl	8004044 <USB_EPStartXfer>

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b006      	add	sp, #24
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	200b      	movs	r0, #11
 8001106:	183b      	adds	r3, r7, r0
 8001108:	1c0a      	adds	r2, r1, #0
 800110a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800110c:	183b      	adds	r3, r7, r0
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2207      	movs	r2, #7
 8001112:	4013      	ands	r3, r2
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	0013      	movs	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	189b      	adds	r3, r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	18d3      	adds	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2224      	movs	r2, #36	; 0x24
 8001134:	2101      	movs	r1, #1
 8001136:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2200      	movs	r2, #0
 8001142:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2201      	movs	r2, #1
 8001148:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800114a:	183b      	adds	r3, r7, r0
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2207      	movs	r2, #7
 8001150:	4013      	ands	r3, r2
 8001152:	b2da      	uxtb	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f002 ff6f 	bl	8004044 <USB_EPStartXfer>

  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b006      	add	sp, #24
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	000a      	movs	r2, r1
 800117a:	1cfb      	adds	r3, r7, #3
 800117c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800117e:	1cfb      	adds	r3, r7, #3
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2207      	movs	r2, #7
 8001184:	401a      	ands	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	429a      	cmp	r2, r3
 800118c:	d901      	bls.n	8001192 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e046      	b.n	8001220 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001192:	1cfb      	adds	r3, r7, #3
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b25b      	sxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	da0f      	bge.n	80011bc <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800119c:	1cfb      	adds	r3, r7, #3
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2207      	movs	r2, #7
 80011a2:	4013      	ands	r3, r2
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	0013      	movs	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	189b      	adds	r3, r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	18d3      	adds	r3, r2, r3
 80011b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2201      	movs	r2, #1
 80011b8:	705a      	strb	r2, [r3, #1]
 80011ba:	e00d      	b.n	80011d8 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80011bc:	1cfb      	adds	r3, r7, #3
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	0013      	movs	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	189b      	adds	r3, r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	3369      	adds	r3, #105	; 0x69
 80011ca:	33ff      	adds	r3, #255	; 0xff
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	18d3      	adds	r3, r2, r3
 80011d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2200      	movs	r2, #0
 80011d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2201      	movs	r2, #1
 80011dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011de:	1cfb      	adds	r3, r7, #3
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2207      	movs	r2, #7
 80011e4:	4013      	ands	r3, r2
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	23aa      	movs	r3, #170	; 0xaa
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	5cd3      	ldrb	r3, [r2, r3]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_PCD_EP_SetStall+0x8c>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e011      	b.n	8001220 <HAL_PCD_EP_SetStall+0xb0>
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	23aa      	movs	r3, #170	; 0xaa
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	2101      	movs	r1, #1
 8001204:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	0011      	movs	r1, r2
 800120e:	0018      	movs	r0, r3
 8001210:	f004 f850 	bl	80052b4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	23aa      	movs	r3, #170	; 0xaa
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	2100      	movs	r1, #0
 800121c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b004      	add	sp, #16
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	000a      	movs	r2, r1
 8001232:	1cfb      	adds	r3, r7, #3
 8001234:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001236:	1cfb      	adds	r3, r7, #3
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	220f      	movs	r2, #15
 800123c:	401a      	ands	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	429a      	cmp	r2, r3
 8001244:	d901      	bls.n	800124a <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e048      	b.n	80012dc <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800124a:	1cfb      	adds	r3, r7, #3
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b25b      	sxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	da0f      	bge.n	8001274 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001254:	1cfb      	adds	r3, r7, #3
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2207      	movs	r2, #7
 800125a:	4013      	ands	r3, r2
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	0013      	movs	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	189b      	adds	r3, r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	18d3      	adds	r3, r2, r3
 800126a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2201      	movs	r2, #1
 8001270:	705a      	strb	r2, [r3, #1]
 8001272:	e00f      	b.n	8001294 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001274:	1cfb      	adds	r3, r7, #3
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2207      	movs	r2, #7
 800127a:	401a      	ands	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	189b      	adds	r3, r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	3369      	adds	r3, #105	; 0x69
 8001286:	33ff      	adds	r3, #255	; 0xff
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	18d3      	adds	r3, r2, r3
 800128c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800129a:	1cfb      	adds	r3, r7, #3
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2207      	movs	r2, #7
 80012a0:	4013      	ands	r3, r2
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	23aa      	movs	r3, #170	; 0xaa
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <HAL_PCD_EP_ClrStall+0x90>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e011      	b.n	80012dc <HAL_PCD_EP_ClrStall+0xb4>
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	23aa      	movs	r3, #170	; 0xaa
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	2101      	movs	r1, #1
 80012c0:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	0011      	movs	r1, r2
 80012ca:	0018      	movs	r0, r3
 80012cc:	f004 f842 	bl	8005354 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	23aa      	movs	r3, #170	; 0xaa
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	2100      	movs	r1, #0
 80012d8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	0018      	movs	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	b004      	add	sp, #16
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b096      	sub	sp, #88	; 0x58
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80012ec:	f000 fbec 	bl	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	204e      	movs	r0, #78	; 0x4e
 80012f6:	183b      	adds	r3, r7, r0
 80012f8:	2144      	movs	r1, #68	; 0x44
 80012fa:	5a52      	ldrh	r2, [r2, r1]
 80012fc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80012fe:	183b      	adds	r3, r7, r0
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	244d      	movs	r4, #77	; 0x4d
 8001306:	193b      	adds	r3, r7, r4
 8001308:	210f      	movs	r1, #15
 800130a:	400a      	ands	r2, r1
 800130c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800130e:	193b      	adds	r3, r7, r4
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d000      	beq.n	8001318 <PCD_EP_ISR_Handler+0x34>
 8001316:	e18f      	b.n	8001638 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001318:	183b      	adds	r3, r7, r0
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	2210      	movs	r2, #16
 800131e:	4013      	ands	r3, r2
 8001320:	d155      	bne.n	80013ce <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	b29a      	uxth	r2, r3
 800132a:	200e      	movs	r0, #14
 800132c:	183b      	adds	r3, r7, r0
 800132e:	49bb      	ldr	r1, [pc, #748]	; (800161c <PCD_EP_ISR_Handler+0x338>)
 8001330:	400a      	ands	r2, r1
 8001332:	801a      	strh	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	183a      	adds	r2, r7, r0
 800133a:	8812      	ldrh	r2, [r2, #0]
 800133c:	49b8      	ldr	r1, [pc, #736]	; (8001620 <PCD_EP_ISR_Handler+0x33c>)
 800133e:	430a      	orrs	r2, r1
 8001340:	b292      	uxth	r2, r2
 8001342:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3328      	adds	r3, #40	; 0x28
 8001348:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2250      	movs	r2, #80	; 0x50
 8001350:	5a9b      	ldrh	r3, [r3, r2]
 8001352:	b29b      	uxth	r3, r3
 8001354:	001a      	movs	r2, r3
 8001356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	18d2      	adds	r2, r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	18d3      	adds	r3, r2, r3
 8001364:	4aaf      	ldr	r2, [pc, #700]	; (8001624 <PCD_EP_ISR_Handler+0x340>)
 8001366:	4694      	mov	ip, r2
 8001368:	4463      	add	r3, ip
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	059b      	lsls	r3, r3, #22
 800136e:	0d9a      	lsrs	r2, r3, #22
 8001370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001372:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	18d2      	adds	r2, r2, r3
 800137e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001380:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2100      	movs	r1, #0
 8001386:	0018      	movs	r0, r3
 8001388:	f005 fecc 	bl	8007124 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2224      	movs	r2, #36	; 0x24
 8001390:	5c9b      	ldrb	r3, [r3, r2]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <PCD_EP_ISR_Handler+0xb8>
 8001398:	f000 fb96 	bl	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
 800139c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <PCD_EP_ISR_Handler+0xc4>
 80013a4:	f000 fb90 	bl	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2224      	movs	r2, #36	; 0x24
 80013ac:	5c9b      	ldrb	r3, [r3, r2]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	4252      	negs	r2, r2
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b291      	uxth	r1, r2
 80013be:	224c      	movs	r2, #76	; 0x4c
 80013c0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2224      	movs	r2, #36	; 0x24
 80013c6:	2100      	movs	r1, #0
 80013c8:	5499      	strb	r1, [r3, r2]
 80013ca:	f000 fb7d 	bl	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3369      	adds	r3, #105	; 0x69
 80013d2:	33ff      	adds	r3, #255	; 0xff
 80013d4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	214a      	movs	r1, #74	; 0x4a
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	8812      	ldrh	r2, [r2, #0]
 80013e0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013e2:	187b      	adds	r3, r7, r1
 80013e4:	881a      	ldrh	r2, [r3, #0]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	4013      	ands	r3, r2
 80013ec:	d037      	beq.n	800145e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2250      	movs	r2, #80	; 0x50
 80013f4:	5a9b      	ldrh	r3, [r3, r2]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	001a      	movs	r2, r3
 80013fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	18d2      	adds	r2, r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	18d3      	adds	r3, r2, r3
 8001408:	4a87      	ldr	r2, [pc, #540]	; (8001628 <PCD_EP_ISR_Handler+0x344>)
 800140a:	4694      	mov	ip, r2
 800140c:	4463      	add	r3, ip
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	059b      	lsls	r3, r3, #22
 8001412:	0d9a      	lsrs	r2, r3, #22
 8001414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001416:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	22ac      	movs	r2, #172	; 0xac
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	1899      	adds	r1, r3, r2
 8001424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001426:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800142a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800142c:	b29b      	uxth	r3, r3
 800142e:	f004 f8c4 	bl	80055ba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b29a      	uxth	r2, r3
 800143a:	2010      	movs	r0, #16
 800143c:	183b      	adds	r3, r7, r0
 800143e:	497b      	ldr	r1, [pc, #492]	; (800162c <PCD_EP_ISR_Handler+0x348>)
 8001440:	400a      	ands	r2, r1
 8001442:	801a      	strh	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	183a      	adds	r2, r7, r0
 800144a:	8812      	ldrh	r2, [r2, #0]
 800144c:	2180      	movs	r1, #128	; 0x80
 800144e:	430a      	orrs	r2, r1
 8001450:	b292      	uxth	r2, r2
 8001452:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	0018      	movs	r0, r3
 8001458:	f005 fe2e 	bl	80070b8 <HAL_PCD_SetupStageCallback>
 800145c:	e334      	b.n	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800145e:	234a      	movs	r3, #74	; 0x4a
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	2200      	movs	r2, #0
 8001464:	5e9b      	ldrsh	r3, [r3, r2]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db00      	blt.n	800146c <PCD_EP_ISR_Handler+0x188>
 800146a:	e32d      	b.n	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b29a      	uxth	r2, r3
 8001474:	201e      	movs	r0, #30
 8001476:	183b      	adds	r3, r7, r0
 8001478:	496c      	ldr	r1, [pc, #432]	; (800162c <PCD_EP_ISR_Handler+0x348>)
 800147a:	400a      	ands	r2, r1
 800147c:	801a      	strh	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	183a      	adds	r2, r7, r0
 8001484:	8812      	ldrh	r2, [r2, #0]
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	430a      	orrs	r2, r1
 800148a:	b292      	uxth	r2, r2
 800148c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2250      	movs	r2, #80	; 0x50
 8001494:	5a9b      	ldrh	r3, [r3, r2]
 8001496:	b29b      	uxth	r3, r3
 8001498:	001a      	movs	r2, r3
 800149a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	18d2      	adds	r2, r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	18d3      	adds	r3, r2, r3
 80014a8:	4a5f      	ldr	r2, [pc, #380]	; (8001628 <PCD_EP_ISR_Handler+0x344>)
 80014aa:	4694      	mov	ip, r2
 80014ac:	4463      	add	r3, ip
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	059b      	lsls	r3, r3, #22
 80014b2:	0d9a      	lsrs	r2, r3, #22
 80014b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80014b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01a      	beq.n	80014f6 <PCD_EP_ISR_Handler+0x212>
 80014c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d016      	beq.n	80014f6 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ce:	6959      	ldr	r1, [r3, #20]
 80014d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80014d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014d8:	b29b      	uxth	r3, r3
 80014da:	f004 f86e 	bl	80055ba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80014de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	18d2      	adds	r2, r2, r3
 80014e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ea:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2100      	movs	r1, #0
 80014f0:	0018      	movs	r0, r3
 80014f2:	f005 fdf6 	bl	80070e2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	214a      	movs	r1, #74	; 0x4a
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	8812      	ldrh	r2, [r2, #0]
 8001500:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001502:	187b      	adds	r3, r7, r1
 8001504:	881a      	ldrh	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4013      	ands	r3, r2
 800150c:	d000      	beq.n	8001510 <PCD_EP_ISR_Handler+0x22c>
 800150e:	e2db      	b.n	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
 8001510:	187b      	adds	r3, r7, r1
 8001512:	881a      	ldrh	r2, [r3, #0]
 8001514:	23c0      	movs	r3, #192	; 0xc0
 8001516:	019b      	lsls	r3, r3, #6
 8001518:	401a      	ands	r2, r3
 800151a:	23c0      	movs	r3, #192	; 0xc0
 800151c:	019b      	lsls	r3, r3, #6
 800151e:	429a      	cmp	r2, r3
 8001520:	d100      	bne.n	8001524 <PCD_EP_ISR_Handler+0x240>
 8001522:	e2d1      	b.n	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2250      	movs	r2, #80	; 0x50
 8001530:	5a9b      	ldrh	r3, [r3, r2]
 8001532:	b29b      	uxth	r3, r3
 8001534:	001a      	movs	r2, r3
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	189b      	adds	r3, r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	4a3a      	ldr	r2, [pc, #232]	; (8001628 <PCD_EP_ISR_Handler+0x344>)
 8001540:	4694      	mov	ip, r2
 8001542:	4463      	add	r3, ip
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	059b      	lsls	r3, r3, #22
 800154e:	0d9b      	lsrs	r3, r3, #22
 8001550:	b29a      	uxth	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	801a      	strh	r2, [r3, #0]
 8001556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	2b3e      	cmp	r3, #62	; 0x3e
 800155c:	d91a      	bls.n	8001594 <PCD_EP_ISR_Handler+0x2b0>
 800155e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	647b      	str	r3, [r7, #68]	; 0x44
 8001566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	221f      	movs	r2, #31
 800156c:	4013      	ands	r3, r2
 800156e:	d102      	bne.n	8001576 <PCD_EP_ISR_Handler+0x292>
 8001570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001572:	3b01      	subs	r3, #1
 8001574:	647b      	str	r3, [r7, #68]	; 0x44
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	b29a      	uxth	r2, r3
 800157c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800157e:	b29b      	uxth	r3, r3
 8001580:	029b      	lsls	r3, r3, #10
 8001582:	b29b      	uxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b29b      	uxth	r3, r3
 8001588:	4a25      	ldr	r2, [pc, #148]	; (8001620 <PCD_EP_ISR_Handler+0x33c>)
 800158a:	4313      	orrs	r3, r2
 800158c:	b29a      	uxth	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	801a      	strh	r2, [r3, #0]
 8001592:	e023      	b.n	80015dc <PCD_EP_ISR_Handler+0x2f8>
 8001594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d108      	bne.n	80015ae <PCD_EP_ISR_Handler+0x2ca>
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <PCD_EP_ISR_Handler+0x33c>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	801a      	strh	r2, [r3, #0]
 80015ac:	e016      	b.n	80015dc <PCD_EP_ISR_Handler+0x2f8>
 80015ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	647b      	str	r3, [r7, #68]	; 0x44
 80015b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	2201      	movs	r2, #1
 80015bc:	4013      	ands	r3, r2
 80015be:	d002      	beq.n	80015c6 <PCD_EP_ISR_Handler+0x2e2>
 80015c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015c2:	3301      	adds	r3, #1
 80015c4:	647b      	str	r3, [r7, #68]	; 0x44
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	029b      	lsls	r3, r3, #10
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	2012      	movs	r0, #18
 80015e6:	183b      	adds	r3, r7, r0
 80015e8:	4911      	ldr	r1, [pc, #68]	; (8001630 <PCD_EP_ISR_Handler+0x34c>)
 80015ea:	400a      	ands	r2, r1
 80015ec:	801a      	strh	r2, [r3, #0]
 80015ee:	183b      	adds	r3, r7, r0
 80015f0:	183a      	adds	r2, r7, r0
 80015f2:	8812      	ldrh	r2, [r2, #0]
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	0149      	lsls	r1, r1, #5
 80015f8:	404a      	eors	r2, r1
 80015fa:	801a      	strh	r2, [r3, #0]
 80015fc:	183b      	adds	r3, r7, r0
 80015fe:	183a      	adds	r2, r7, r0
 8001600:	8812      	ldrh	r2, [r2, #0]
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	0189      	lsls	r1, r1, #6
 8001606:	404a      	eors	r2, r1
 8001608:	801a      	strh	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	183a      	adds	r2, r7, r0
 8001610:	8812      	ldrh	r2, [r2, #0]
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <PCD_EP_ISR_Handler+0x350>)
 8001614:	430a      	orrs	r2, r1
 8001616:	b292      	uxth	r2, r2
 8001618:	801a      	strh	r2, [r3, #0]
 800161a:	e255      	b.n	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
 800161c:	ffff8f0f 	.word	0xffff8f0f
 8001620:	ffff8000 	.word	0xffff8000
 8001624:	00000402 	.word	0x00000402
 8001628:	00000406 	.word	0x00000406
 800162c:	00000f8f 	.word	0x00000f8f
 8001630:	ffffbf8f 	.word	0xffffbf8f
 8001634:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	001a      	movs	r2, r3
 800163e:	204d      	movs	r0, #77	; 0x4d
 8001640:	183b      	adds	r3, r7, r0
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	18d2      	adds	r2, r2, r3
 8001648:	214a      	movs	r1, #74	; 0x4a
 800164a:	187b      	adds	r3, r7, r1
 800164c:	8812      	ldrh	r2, [r2, #0]
 800164e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001650:	187b      	adds	r3, r7, r1
 8001652:	2200      	movs	r2, #0
 8001654:	5e9b      	ldrsh	r3, [r3, r2]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db00      	blt.n	800165c <PCD_EP_ISR_Handler+0x378>
 800165a:	e0fa      	b.n	8001852 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	001a      	movs	r2, r3
 8001662:	183b      	adds	r3, r7, r0
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	18d3      	adds	r3, r2, r3
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b29a      	uxth	r2, r3
 800166e:	2448      	movs	r4, #72	; 0x48
 8001670:	193b      	adds	r3, r7, r4
 8001672:	49d1      	ldr	r1, [pc, #836]	; (80019b8 <PCD_EP_ISR_Handler+0x6d4>)
 8001674:	400a      	ands	r2, r1
 8001676:	801a      	strh	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	001a      	movs	r2, r3
 800167e:	183b      	adds	r3, r7, r0
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	18d3      	adds	r3, r2, r3
 8001686:	193a      	adds	r2, r7, r4
 8001688:	8812      	ldrh	r2, [r2, #0]
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	430a      	orrs	r2, r1
 800168e:	b292      	uxth	r2, r2
 8001690:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001692:	183b      	adds	r3, r7, r0
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	0013      	movs	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	189b      	adds	r3, r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	3369      	adds	r3, #105	; 0x69
 80016a0:	33ff      	adds	r3, #255	; 0xff
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	18d3      	adds	r3, r2, r3
 80016a6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80016a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016aa:	7b1b      	ldrb	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d125      	bne.n	80016fc <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2250      	movs	r2, #80	; 0x50
 80016b6:	5a9b      	ldrh	r3, [r3, r2]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	001a      	movs	r2, r3
 80016bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	18d2      	adds	r2, r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	18d3      	adds	r3, r2, r3
 80016ca:	4abc      	ldr	r2, [pc, #752]	; (80019bc <PCD_EP_ISR_Handler+0x6d8>)
 80016cc:	4694      	mov	ip, r2
 80016ce:	4463      	add	r3, ip
 80016d0:	881a      	ldrh	r2, [r3, #0]
 80016d2:	2450      	movs	r4, #80	; 0x50
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	0592      	lsls	r2, r2, #22
 80016d8:	0d92      	lsrs	r2, r2, #22
 80016da:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80016dc:	193b      	adds	r3, r7, r4
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d100      	bne.n	80016e6 <PCD_EP_ISR_Handler+0x402>
 80016e4:	e08d      	b.n	8001802 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ec:	6959      	ldr	r1, [r3, #20]
 80016ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f0:	88da      	ldrh	r2, [r3, #6]
 80016f2:	193b      	adds	r3, r7, r4
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	f003 ff60 	bl	80055ba <USB_ReadPMA>
 80016fa:	e082      	b.n	8001802 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80016fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fe:	78db      	ldrb	r3, [r3, #3]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d10c      	bne.n	800171e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001704:	2350      	movs	r3, #80	; 0x50
 8001706:	18fc      	adds	r4, r7, r3
 8001708:	234a      	movs	r3, #74	; 0x4a
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	881a      	ldrh	r2, [r3, #0]
 800170e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	0018      	movs	r0, r3
 8001714:	f000 f9ec 	bl	8001af0 <HAL_PCD_EP_DB_Receive>
 8001718:	0003      	movs	r3, r0
 800171a:	8023      	strh	r3, [r4, #0]
 800171c:	e071      	b.n	8001802 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	001a      	movs	r2, r3
 8001724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	18d3      	adds	r3, r2, r3
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29a      	uxth	r2, r3
 8001730:	2052      	movs	r0, #82	; 0x52
 8001732:	183b      	adds	r3, r7, r0
 8001734:	49a2      	ldr	r1, [pc, #648]	; (80019c0 <PCD_EP_ISR_Handler+0x6dc>)
 8001736:	400a      	ands	r2, r1
 8001738:	801a      	strh	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	001a      	movs	r2, r3
 8001740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	18d3      	adds	r3, r2, r3
 8001748:	183a      	adds	r2, r7, r0
 800174a:	8812      	ldrh	r2, [r2, #0]
 800174c:	499d      	ldr	r1, [pc, #628]	; (80019c4 <PCD_EP_ISR_Handler+0x6e0>)
 800174e:	430a      	orrs	r2, r1
 8001750:	b292      	uxth	r2, r2
 8001752:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	001a      	movs	r2, r3
 800175a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	18d3      	adds	r3, r2, r3
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	001a      	movs	r2, r3
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	01db      	lsls	r3, r3, #7
 800176c:	4013      	ands	r3, r2
 800176e:	d024      	beq.n	80017ba <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2250      	movs	r2, #80	; 0x50
 8001776:	5a9b      	ldrh	r3, [r3, r2]
 8001778:	b29b      	uxth	r3, r3
 800177a:	001a      	movs	r2, r3
 800177c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	18d2      	adds	r2, r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	18d3      	adds	r3, r2, r3
 800178a:	4a8f      	ldr	r2, [pc, #572]	; (80019c8 <PCD_EP_ISR_Handler+0x6e4>)
 800178c:	4694      	mov	ip, r2
 800178e:	4463      	add	r3, ip
 8001790:	881a      	ldrh	r2, [r3, #0]
 8001792:	2450      	movs	r4, #80	; 0x50
 8001794:	193b      	adds	r3, r7, r4
 8001796:	0592      	lsls	r2, r2, #22
 8001798:	0d92      	lsrs	r2, r2, #22
 800179a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800179c:	193b      	adds	r3, r7, r4
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d02e      	beq.n	8001802 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017aa:	6959      	ldr	r1, [r3, #20]
 80017ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ae:	891a      	ldrh	r2, [r3, #8]
 80017b0:	193b      	adds	r3, r7, r4
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	f003 ff01 	bl	80055ba <USB_ReadPMA>
 80017b8:	e023      	b.n	8001802 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2250      	movs	r2, #80	; 0x50
 80017c0:	5a9b      	ldrh	r3, [r3, r2]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	001a      	movs	r2, r3
 80017c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	18d2      	adds	r2, r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	18d3      	adds	r3, r2, r3
 80017d4:	4a79      	ldr	r2, [pc, #484]	; (80019bc <PCD_EP_ISR_Handler+0x6d8>)
 80017d6:	4694      	mov	ip, r2
 80017d8:	4463      	add	r3, ip
 80017da:	881a      	ldrh	r2, [r3, #0]
 80017dc:	2450      	movs	r4, #80	; 0x50
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	0592      	lsls	r2, r2, #22
 80017e2:	0d92      	lsrs	r2, r2, #22
 80017e4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f4:	6959      	ldr	r1, [r3, #20]
 80017f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f8:	895a      	ldrh	r2, [r3, #10]
 80017fa:	193b      	adds	r3, r7, r4
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	f003 fedc 	bl	80055ba <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	2150      	movs	r1, #80	; 0x50
 8001808:	187b      	adds	r3, r7, r1
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	18d2      	adds	r2, r2, r3
 800180e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001810:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	187b      	adds	r3, r7, r1
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	18d2      	adds	r2, r2, r3
 800181c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <PCD_EP_ISR_Handler+0x550>
 8001828:	187b      	adds	r3, r7, r1
 800182a:	881a      	ldrh	r2, [r3, #0]
 800182c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	0011      	movs	r1, r2
 800183c:	0018      	movs	r0, r3
 800183e:	f005 fc50 	bl	80070e2 <HAL_PCD_DataOutStageCallback>
 8001842:	e006      	b.n	8001852 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800184a:	0011      	movs	r1, r2
 800184c:	0018      	movs	r0, r3
 800184e:	f002 fbf9 	bl	8004044 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001852:	244a      	movs	r4, #74	; 0x4a
 8001854:	193b      	adds	r3, r7, r4
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	4013      	ands	r3, r2
 800185c:	d100      	bne.n	8001860 <PCD_EP_ISR_Handler+0x57c>
 800185e:	e133      	b.n	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001860:	204d      	movs	r0, #77	; 0x4d
 8001862:	183b      	adds	r3, r7, r0
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	0013      	movs	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	189b      	adds	r3, r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	18d3      	adds	r3, r2, r3
 8001874:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	001a      	movs	r2, r3
 800187c:	183b      	adds	r3, r7, r0
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	18d3      	adds	r3, r2, r3
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	b29a      	uxth	r2, r3
 8001888:	2542      	movs	r5, #66	; 0x42
 800188a:	197b      	adds	r3, r7, r5
 800188c:	494f      	ldr	r1, [pc, #316]	; (80019cc <PCD_EP_ISR_Handler+0x6e8>)
 800188e:	400a      	ands	r2, r1
 8001890:	801a      	strh	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	001a      	movs	r2, r3
 8001898:	183b      	adds	r3, r7, r0
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	18d3      	adds	r3, r2, r3
 80018a0:	197a      	adds	r2, r7, r5
 80018a2:	8812      	ldrh	r2, [r2, #0]
 80018a4:	494a      	ldr	r1, [pc, #296]	; (80019d0 <PCD_EP_ISR_Handler+0x6ec>)
 80018a6:	430a      	orrs	r2, r1
 80018a8:	b292      	uxth	r2, r2
 80018aa:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80018ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ae:	78db      	ldrb	r3, [r3, #3]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d000      	beq.n	80018b6 <PCD_EP_ISR_Handler+0x5d2>
 80018b4:	e0af      	b.n	8001a16 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80018b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80018bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018be:	7b1b      	ldrb	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d100      	bne.n	80018c6 <PCD_EP_ISR_Handler+0x5e2>
 80018c4:	e09f      	b.n	8001a06 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018c6:	193b      	adds	r3, r7, r4
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	2240      	movs	r2, #64	; 0x40
 80018cc:	4013      	ands	r3, r2
 80018ce:	d046      	beq.n	800195e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d125      	bne.n	8001924 <PCD_EP_ISR_Handler+0x640>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2250      	movs	r2, #80	; 0x50
 80018e4:	5a9b      	ldrh	r3, [r3, r2]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	001a      	movs	r2, r3
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	189b      	adds	r3, r3, r2
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
 80018f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	00da      	lsls	r2, r3, #3
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	18d3      	adds	r3, r2, r3
 80018fa:	4a33      	ldr	r2, [pc, #204]	; (80019c8 <PCD_EP_ISR_Handler+0x6e4>)
 80018fc:	4694      	mov	ip, r2
 80018fe:	4463      	add	r3, ip
 8001900:	623b      	str	r3, [r7, #32]
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	059b      	lsls	r3, r3, #22
 800190a:	0d9b      	lsrs	r3, r3, #22
 800190c:	b29a      	uxth	r2, r3
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	801a      	strh	r2, [r3, #0]
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	4a2d      	ldr	r2, [pc, #180]	; (80019d0 <PCD_EP_ISR_Handler+0x6ec>)
 800191a:	4313      	orrs	r3, r2
 800191c:	b29a      	uxth	r2, r3
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	801a      	strh	r2, [r3, #0]
 8001922:	e070      	b.n	8001a06 <PCD_EP_ISR_Handler+0x722>
 8001924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001926:	785b      	ldrb	r3, [r3, #1]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d16c      	bne.n	8001a06 <PCD_EP_ISR_Handler+0x722>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2250      	movs	r2, #80	; 0x50
 8001938:	5a9b      	ldrh	r3, [r3, r2]
 800193a:	b29b      	uxth	r3, r3
 800193c:	001a      	movs	r2, r3
 800193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001940:	189b      	adds	r3, r3, r2
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	00da      	lsls	r2, r3, #3
 800194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194c:	18d3      	adds	r3, r2, r3
 800194e:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <PCD_EP_ISR_Handler+0x6e4>)
 8001950:	4694      	mov	ip, r2
 8001952:	4463      	add	r3, ip
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
 8001956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001958:	2200      	movs	r2, #0
 800195a:	801a      	strh	r2, [r3, #0]
 800195c:	e053      	b.n	8001a06 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001966:	785b      	ldrb	r3, [r3, #1]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d133      	bne.n	80019d4 <PCD_EP_ISR_Handler+0x6f0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2250      	movs	r2, #80	; 0x50
 8001978:	5a9b      	ldrh	r3, [r3, r2]
 800197a:	b29b      	uxth	r3, r3
 800197c:	001a      	movs	r2, r3
 800197e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001980:	189b      	adds	r3, r3, r2
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
 8001984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	00da      	lsls	r2, r3, #3
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	18d3      	adds	r3, r2, r3
 800198e:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <PCD_EP_ISR_Handler+0x6d8>)
 8001990:	4694      	mov	ip, r2
 8001992:	4463      	add	r3, ip
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	059b      	lsls	r3, r3, #22
 800199e:	0d9b      	lsrs	r3, r3, #22
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a4:	801a      	strh	r2, [r3, #0]
 80019a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <PCD_EP_ISR_Handler+0x6ec>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b4:	801a      	strh	r2, [r3, #0]
 80019b6:	e026      	b.n	8001a06 <PCD_EP_ISR_Handler+0x722>
 80019b8:	00000f8f 	.word	0x00000f8f
 80019bc:	00000406 	.word	0x00000406
 80019c0:	ffff8f8f 	.word	0xffff8f8f
 80019c4:	ffff80c0 	.word	0xffff80c0
 80019c8:	00000402 	.word	0x00000402
 80019cc:	ffff8f0f 	.word	0xffff8f0f
 80019d0:	ffff8000 	.word	0xffff8000
 80019d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d114      	bne.n	8001a06 <PCD_EP_ISR_Handler+0x722>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2250      	movs	r2, #80	; 0x50
 80019e2:	5a9b      	ldrh	r3, [r3, r2]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	001a      	movs	r2, r3
 80019e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ea:	189b      	adds	r3, r3, r2
 80019ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	00da      	lsls	r2, r3, #3
 80019f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f6:	18d3      	adds	r3, r2, r3
 80019f8:	4a3b      	ldr	r2, [pc, #236]	; (8001ae8 <PCD_EP_ISR_Handler+0x804>)
 80019fa:	4694      	mov	ip, r2
 80019fc:	4463      	add	r3, ip
 80019fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a02:	2200      	movs	r2, #0
 8001a04:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f005 fb88 	bl	8007124 <HAL_PCD_DataInStageCallback>
 8001a14:	e058      	b.n	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a16:	234a      	movs	r3, #74	; 0x4a
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	881a      	ldrh	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4013      	ands	r3, r2
 8001a22:	d149      	bne.n	8001ab8 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2250      	movs	r2, #80	; 0x50
 8001a2a:	5a9b      	ldrh	r3, [r3, r2]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	001a      	movs	r2, r3
 8001a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	18d2      	adds	r2, r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	18d3      	adds	r3, r2, r3
 8001a3e:	4a2b      	ldr	r2, [pc, #172]	; (8001aec <PCD_EP_ISR_Handler+0x808>)
 8001a40:	4694      	mov	ip, r2
 8001a42:	4463      	add	r3, ip
 8001a44:	881a      	ldrh	r2, [r3, #0]
 8001a46:	2140      	movs	r1, #64	; 0x40
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	0592      	lsls	r2, r2, #22
 8001a4c:	0d92      	lsrs	r2, r2, #22
 8001a4e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a52:	699a      	ldr	r2, [r3, #24]
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d907      	bls.n	8001a6c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5e:	699a      	ldr	r2, [r3, #24]
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	1ad2      	subs	r2, r2, r3
 8001a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a68:	619a      	str	r2, [r3, #24]
 8001a6a:	e002      	b.n	8001a72 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d107      	bne.n	8001a8a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	0011      	movs	r1, r2
 8001a82:	0018      	movs	r0, r3
 8001a84:	f005 fb4e 	bl	8007124 <HAL_PCD_DataInStageCallback>
 8001a88:	e01e      	b.n	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	2140      	movs	r1, #64	; 0x40
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	18d2      	adds	r2, r2, r3
 8001a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a98:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9c:	69da      	ldr	r2, [r3, #28]
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	18d2      	adds	r2, r2, r3
 8001aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001aae:	0011      	movs	r1, r2
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f002 fac7 	bl	8004044 <USB_EPStartXfer>
 8001ab6:	e007      	b.n	8001ac8 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ab8:	234a      	movs	r3, #74	; 0x4a
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	881a      	ldrh	r2, [r3, #0]
 8001abe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 f930 	bl	8001d28 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2244      	movs	r2, #68	; 0x44
 8001ace:	5a9b      	ldrh	r3, [r3, r2]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	da01      	bge.n	8001adc <PCD_EP_ISR_Handler+0x7f8>
 8001ad8:	f7ff fc0a 	bl	80012f0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	0018      	movs	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b016      	add	sp, #88	; 0x58
 8001ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	00000406 	.word	0x00000406
 8001aec:	00000402 	.word	0x00000402

08001af0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	1dbb      	adds	r3, r7, #6
 8001afc:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001afe:	1dbb      	adds	r3, r7, #6
 8001b00:	881a      	ldrh	r2, [r3, #0]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	01db      	lsls	r3, r3, #7
 8001b06:	4013      	ands	r3, r2
 8001b08:	d100      	bne.n	8001b0c <HAL_PCD_EP_DB_Receive+0x1c>
 8001b0a:	e07d      	b.n	8001c08 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2250      	movs	r2, #80	; 0x50
 8001b12:	5a9b      	ldrh	r3, [r3, r2]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	001a      	movs	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	18d2      	adds	r2, r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	18d3      	adds	r3, r2, r3
 8001b26:	4a7a      	ldr	r2, [pc, #488]	; (8001d10 <HAL_PCD_EP_DB_Receive+0x220>)
 8001b28:	4694      	mov	ip, r2
 8001b2a:	4463      	add	r3, ip
 8001b2c:	881a      	ldrh	r2, [r3, #0]
 8001b2e:	211a      	movs	r1, #26
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	0592      	lsls	r2, r2, #22
 8001b34:	0d92      	lsrs	r2, r2, #22
 8001b36:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	699a      	ldr	r2, [r3, #24]
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d307      	bcc.n	8001b54 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	699a      	ldr	r2, [r3, #24]
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	1ad2      	subs	r2, r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	619a      	str	r2, [r3, #24]
 8001b52:	e002      	b.n	8001b5a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d121      	bne.n	8001ba6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	001a      	movs	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	18d3      	adds	r3, r2, r3
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	2018      	movs	r0, #24
 8001b76:	183b      	adds	r3, r7, r0
 8001b78:	4966      	ldr	r1, [pc, #408]	; (8001d14 <HAL_PCD_EP_DB_Receive+0x224>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	801a      	strh	r2, [r3, #0]
 8001b7e:	183b      	adds	r3, r7, r0
 8001b80:	183a      	adds	r2, r7, r0
 8001b82:	8812      	ldrh	r2, [r2, #0]
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	0189      	lsls	r1, r1, #6
 8001b88:	404a      	eors	r2, r1
 8001b8a:	801a      	strh	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	001a      	movs	r2, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	18d3      	adds	r3, r2, r3
 8001b9a:	183a      	adds	r2, r7, r0
 8001b9c:	8812      	ldrh	r2, [r2, #0]
 8001b9e:	495e      	ldr	r1, [pc, #376]	; (8001d18 <HAL_PCD_EP_DB_Receive+0x228>)
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ba6:	1dbb      	adds	r3, r7, #6
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	4013      	ands	r3, r2
 8001bae:	d01a      	beq.n	8001be6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	18d3      	adds	r3, r2, r3
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	2016      	movs	r0, #22
 8001bc4:	183b      	adds	r3, r7, r0
 8001bc6:	4955      	ldr	r1, [pc, #340]	; (8001d1c <HAL_PCD_EP_DB_Receive+0x22c>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	801a      	strh	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	18d3      	adds	r3, r2, r3
 8001bda:	183a      	adds	r2, r7, r0
 8001bdc:	8812      	ldrh	r2, [r2, #0]
 8001bde:	4950      	ldr	r1, [pc, #320]	; (8001d20 <HAL_PCD_EP_DB_Receive+0x230>)
 8001be0:	430a      	orrs	r2, r1
 8001be2:	b292      	uxth	r2, r2
 8001be4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001be6:	241a      	movs	r4, #26
 8001be8:	193b      	adds	r3, r7, r4
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d100      	bne.n	8001bf2 <HAL_PCD_EP_DB_Receive+0x102>
 8001bf0:	e086      	b.n	8001d00 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	6959      	ldr	r1, [r3, #20]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	891a      	ldrh	r2, [r3, #8]
 8001bfe:	193b      	adds	r3, r7, r4
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	f003 fcda 	bl	80055ba <USB_ReadPMA>
 8001c06:	e07b      	b.n	8001d00 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2250      	movs	r2, #80	; 0x50
 8001c0e:	5a9b      	ldrh	r3, [r3, r2]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	001a      	movs	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	18d2      	adds	r2, r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	18d3      	adds	r3, r2, r3
 8001c22:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <HAL_PCD_EP_DB_Receive+0x234>)
 8001c24:	4694      	mov	ip, r2
 8001c26:	4463      	add	r3, ip
 8001c28:	881a      	ldrh	r2, [r3, #0]
 8001c2a:	211a      	movs	r1, #26
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	0592      	lsls	r2, r2, #22
 8001c30:	0d92      	lsrs	r2, r2, #22
 8001c32:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d307      	bcc.n	8001c50 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	1ad2      	subs	r2, r2, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	619a      	str	r2, [r3, #24]
 8001c4e:	e002      	b.n	8001c56 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d121      	bne.n	8001ca2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	001a      	movs	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	18d3      	adds	r3, r2, r3
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	201e      	movs	r0, #30
 8001c72:	183b      	adds	r3, r7, r0
 8001c74:	4927      	ldr	r1, [pc, #156]	; (8001d14 <HAL_PCD_EP_DB_Receive+0x224>)
 8001c76:	400a      	ands	r2, r1
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	183b      	adds	r3, r7, r0
 8001c7c:	183a      	adds	r2, r7, r0
 8001c7e:	8812      	ldrh	r2, [r2, #0]
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	0189      	lsls	r1, r1, #6
 8001c84:	404a      	eors	r2, r1
 8001c86:	801a      	strh	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	18d3      	adds	r3, r2, r3
 8001c96:	183a      	adds	r2, r7, r0
 8001c98:	8812      	ldrh	r2, [r2, #0]
 8001c9a:	491f      	ldr	r1, [pc, #124]	; (8001d18 <HAL_PCD_EP_DB_Receive+0x228>)
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	b292      	uxth	r2, r2
 8001ca0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001ca2:	1dbb      	adds	r3, r7, #6
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	2240      	movs	r2, #64	; 0x40
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d11a      	bne.n	8001ce2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	18d3      	adds	r3, r2, r3
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	201c      	movs	r0, #28
 8001cc0:	183b      	adds	r3, r7, r0
 8001cc2:	4916      	ldr	r1, [pc, #88]	; (8001d1c <HAL_PCD_EP_DB_Receive+0x22c>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	801a      	strh	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	001a      	movs	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	18d3      	adds	r3, r2, r3
 8001cd6:	183a      	adds	r2, r7, r0
 8001cd8:	8812      	ldrh	r2, [r2, #0]
 8001cda:	4911      	ldr	r1, [pc, #68]	; (8001d20 <HAL_PCD_EP_DB_Receive+0x230>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	b292      	uxth	r2, r2
 8001ce0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001ce2:	241a      	movs	r4, #26
 8001ce4:	193b      	adds	r3, r7, r4
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d009      	beq.n	8001d00 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	6959      	ldr	r1, [r3, #20]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	895a      	ldrh	r2, [r3, #10]
 8001cf8:	193b      	adds	r3, r7, r4
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	f003 fc5d 	bl	80055ba <USB_ReadPMA>
    }
  }

  return count;
 8001d00:	231a      	movs	r3, #26
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	881b      	ldrh	r3, [r3, #0]
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b009      	add	sp, #36	; 0x24
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	00000402 	.word	0x00000402
 8001d14:	ffffbf8f 	.word	0xffffbf8f
 8001d18:	ffff8080 	.word	0xffff8080
 8001d1c:	ffff8f8f 	.word	0xffff8f8f
 8001d20:	ffff80c0 	.word	0xffff80c0
 8001d24:	00000406 	.word	0x00000406

08001d28 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0a4      	sub	sp, #144	; 0x90
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	1dbb      	adds	r3, r7, #6
 8001d34:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d36:	1dbb      	adds	r3, r7, #6
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d100      	bne.n	8001d42 <HAL_PCD_EP_DB_Transmit+0x1a>
 8001d40:	e1e4      	b.n	800210c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2250      	movs	r2, #80	; 0x50
 8001d48:	5a9b      	ldrh	r3, [r3, r2]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	18d2      	adds	r2, r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	18d3      	adds	r3, r2, r3
 8001d5c:	4ad0      	ldr	r2, [pc, #832]	; (80020a0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001d5e:	4694      	mov	ip, r2
 8001d60:	4463      	add	r3, ip
 8001d62:	881a      	ldrh	r2, [r3, #0]
 8001d64:	2186      	movs	r1, #134	; 0x86
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	0592      	lsls	r2, r2, #22
 8001d6a:	0d92      	lsrs	r2, r2, #22
 8001d6c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d907      	bls.n	8001d8a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	187b      	adds	r3, r7, r1
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	1ad2      	subs	r2, r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	619a      	str	r2, [r3, #24]
 8001d88:	e002      	b.n	8001d90 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d000      	beq.n	8001d9a <HAL_PCD_EP_DB_Transmit+0x72>
 8001d98:	e0b5      	b.n	8001f06 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d125      	bne.n	8001dee <HAL_PCD_EP_DB_Transmit+0xc6>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2250      	movs	r2, #80	; 0x50
 8001dae:	5a9b      	ldrh	r3, [r3, r2]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	001a      	movs	r2, r3
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	189b      	adds	r3, r3, r2
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	00da      	lsls	r2, r3, #3
 8001dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc2:	18d3      	adds	r3, r2, r3
 8001dc4:	4ab6      	ldr	r2, [pc, #728]	; (80020a0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001dc6:	4694      	mov	ip, r2
 8001dc8:	4463      	add	r3, ip
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	059b      	lsls	r3, r3, #22
 8001dd4:	0d9b      	lsrs	r3, r3, #22
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dda:	801a      	strh	r2, [r3, #0]
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	4ab0      	ldr	r2, [pc, #704]	; (80020a4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	801a      	strh	r2, [r3, #0]
 8001dec:	e01b      	b.n	8001e26 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d117      	bne.n	8001e26 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2250      	movs	r2, #80	; 0x50
 8001e02:	5a9b      	ldrh	r3, [r3, r2]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	001a      	movs	r2, r3
 8001e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0a:	189b      	adds	r3, r3, r2
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	00da      	lsls	r2, r3, #3
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	18d3      	adds	r3, r2, r3
 8001e18:	4aa1      	ldr	r2, [pc, #644]	; (80020a0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001e1a:	4694      	mov	ip, r2
 8001e1c:	4463      	add	r3, ip
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e22:	2200      	movs	r2, #0
 8001e24:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	785b      	ldrb	r3, [r3, #1]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d125      	bne.n	8001e80 <HAL_PCD_EP_DB_Transmit+0x158>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2250      	movs	r2, #80	; 0x50
 8001e40:	5a9b      	ldrh	r3, [r3, r2]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	001a      	movs	r2, r3
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	189b      	adds	r3, r3, r2
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	00da      	lsls	r2, r3, #3
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	18d3      	adds	r3, r2, r3
 8001e56:	4a94      	ldr	r2, [pc, #592]	; (80020a8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001e58:	4694      	mov	ip, r2
 8001e5a:	4463      	add	r3, ip
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	059b      	lsls	r3, r3, #22
 8001e66:	0d9b      	lsrs	r3, r3, #22
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	801a      	strh	r2, [r3, #0]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4a8b      	ldr	r2, [pc, #556]	; (80020a4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	e018      	b.n	8001eb2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d114      	bne.n	8001eb2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2250      	movs	r2, #80	; 0x50
 8001e8e:	5a9b      	ldrh	r3, [r3, r2]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	001a      	movs	r2, r3
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	189b      	adds	r3, r3, r2
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	00da      	lsls	r2, r3, #3
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	18d3      	adds	r3, r2, r3
 8001ea4:	4a80      	ldr	r2, [pc, #512]	; (80020a8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001ea6:	4694      	mov	ip, r2
 8001ea8:	4463      	add	r3, ip
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	0011      	movs	r1, r2
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f005 f932 	bl	8007124 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ec0:	1dbb      	adds	r3, r7, #6
 8001ec2:	881a      	ldrh	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	01db      	lsls	r3, r3, #7
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d100      	bne.n	8001ece <HAL_PCD_EP_DB_Transmit+0x1a6>
 8001ecc:	e309      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	18d3      	adds	r3, r2, r3
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	2016      	movs	r0, #22
 8001ee2:	183b      	adds	r3, r7, r0
 8001ee4:	4971      	ldr	r1, [pc, #452]	; (80020ac <HAL_PCD_EP_DB_Transmit+0x384>)
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	801a      	strh	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	001a      	movs	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	18d3      	adds	r3, r2, r3
 8001ef8:	183a      	adds	r2, r7, r0
 8001efa:	8812      	ldrh	r2, [r2, #0]
 8001efc:	496c      	ldr	r1, [pc, #432]	; (80020b0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	b292      	uxth	r2, r2
 8001f02:	801a      	strh	r2, [r3, #0]
 8001f04:	e2ed      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f06:	1dbb      	adds	r3, r7, #6
 8001f08:	881a      	ldrh	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	01db      	lsls	r3, r3, #7
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d01a      	beq.n	8001f48 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	001a      	movs	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	18d3      	adds	r3, r2, r3
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	208a      	movs	r0, #138	; 0x8a
 8001f26:	183b      	adds	r3, r7, r0
 8001f28:	4960      	ldr	r1, [pc, #384]	; (80020ac <HAL_PCD_EP_DB_Transmit+0x384>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	801a      	strh	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	001a      	movs	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	18d3      	adds	r3, r2, r3
 8001f3c:	183a      	adds	r2, r7, r0
 8001f3e:	8812      	ldrh	r2, [r2, #0]
 8001f40:	495b      	ldr	r1, [pc, #364]	; (80020b0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	b292      	uxth	r2, r2
 8001f46:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2224      	movs	r2, #36	; 0x24
 8001f4c:	5c9b      	ldrb	r3, [r3, r2]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d000      	beq.n	8001f54 <HAL_PCD_EP_DB_Transmit+0x22c>
 8001f52:	e2c6      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	2186      	movs	r1, #134	; 0x86
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	18d2      	adds	r2, r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	18d2      	adds	r2, r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d30c      	bcc.n	8001f98 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	218c      	movs	r1, #140	; 0x8c
 8001f84:	187a      	adds	r2, r7, r1
 8001f86:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	1ad2      	subs	r2, r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	621a      	str	r2, [r3, #32]
 8001f96:	e01a      	b.n	8001fce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10a      	bne.n	8001fb6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8001fa0:	2386      	movs	r3, #134	; 0x86
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	228c      	movs	r2, #140	; 0x8c
 8001fa8:	18ba      	adds	r2, r7, r2
 8001faa:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2224      	movs	r2, #36	; 0x24
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	5499      	strb	r1, [r3, r2]
 8001fb4:	e00b      	b.n	8001fce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2224      	movs	r2, #36	; 0x24
 8001fba:	2100      	movs	r1, #0
 8001fbc:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	228c      	movs	r2, #140	; 0x8c
 8001fc4:	18ba      	adds	r2, r7, r2
 8001fc6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d000      	beq.n	8001fd8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8001fd6:	e06d      	b.n	80020b4 <HAL_PCD_EP_DB_Transmit+0x38c>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2250      	movs	r2, #80	; 0x50
 8001fe4:	5a9b      	ldrh	r3, [r3, r2]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	001a      	movs	r2, r3
 8001fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fec:	189b      	adds	r3, r3, r2
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	00da      	lsls	r2, r3, #3
 8001ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff8:	18d3      	adds	r3, r2, r3
 8001ffa:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001ffc:	4694      	mov	ip, r2
 8001ffe:	4463      	add	r3, ip
 8002000:	63bb      	str	r3, [r7, #56]	; 0x38
 8002002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	059b      	lsls	r3, r3, #22
 800200a:	0d9b      	lsrs	r3, r3, #22
 800200c:	b29a      	uxth	r2, r3
 800200e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	228c      	movs	r2, #140	; 0x8c
 8002014:	18bb      	adds	r3, r7, r2
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b3e      	cmp	r3, #62	; 0x3e
 800201a:	d91a      	bls.n	8002052 <HAL_PCD_EP_DB_Transmit+0x32a>
 800201c:	18bb      	adds	r3, r7, r2
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	64bb      	str	r3, [r7, #72]	; 0x48
 8002024:	18bb      	adds	r3, r7, r2
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	221f      	movs	r2, #31
 800202a:	4013      	ands	r3, r2
 800202c:	d102      	bne.n	8002034 <HAL_PCD_EP_DB_Transmit+0x30c>
 800202e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002030:	3b01      	subs	r3, #1
 8002032:	64bb      	str	r3, [r7, #72]	; 0x48
 8002034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	b29a      	uxth	r2, r3
 800203a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203c:	b29b      	uxth	r3, r3
 800203e:	029b      	lsls	r3, r3, #10
 8002040:	b29b      	uxth	r3, r3
 8002042:	4313      	orrs	r3, r2
 8002044:	b29b      	uxth	r3, r3
 8002046:	4a17      	ldr	r2, [pc, #92]	; (80020a4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002048:	4313      	orrs	r3, r2
 800204a:	b29a      	uxth	r2, r3
 800204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204e:	801a      	strh	r2, [r3, #0]
 8002050:	e04f      	b.n	80020f2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002052:	238c      	movs	r3, #140	; 0x8c
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d108      	bne.n	800206e <HAL_PCD_EP_DB_Transmit+0x346>
 800205c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002064:	4313      	orrs	r3, r2
 8002066:	b29a      	uxth	r2, r3
 8002068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206a:	801a      	strh	r2, [r3, #0]
 800206c:	e041      	b.n	80020f2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800206e:	228c      	movs	r2, #140	; 0x8c
 8002070:	18bb      	adds	r3, r7, r2
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	64bb      	str	r3, [r7, #72]	; 0x48
 8002078:	18bb      	adds	r3, r7, r2
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2201      	movs	r2, #1
 800207e:	4013      	ands	r3, r2
 8002080:	d002      	beq.n	8002088 <HAL_PCD_EP_DB_Transmit+0x360>
 8002082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002084:	3301      	adds	r3, #1
 8002086:	64bb      	str	r3, [r7, #72]	; 0x48
 8002088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29a      	uxth	r2, r3
 800208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002090:	b29b      	uxth	r3, r3
 8002092:	029b      	lsls	r3, r3, #10
 8002094:	b29b      	uxth	r3, r3
 8002096:	4313      	orrs	r3, r2
 8002098:	b29a      	uxth	r2, r3
 800209a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	e028      	b.n	80020f2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80020a0:	00000402 	.word	0x00000402
 80020a4:	ffff8000 	.word	0xffff8000
 80020a8:	00000406 	.word	0x00000406
 80020ac:	ffff8f8f 	.word	0xffff8f8f
 80020b0:	ffffc080 	.word	0xffffc080
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	785b      	ldrb	r3, [r3, #1]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d11a      	bne.n	80020f2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	647b      	str	r3, [r7, #68]	; 0x44
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2250      	movs	r2, #80	; 0x50
 80020c8:	5a9b      	ldrh	r3, [r3, r2]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	001a      	movs	r2, r3
 80020ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d0:	189b      	adds	r3, r3, r2
 80020d2:	647b      	str	r3, [r7, #68]	; 0x44
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	00da      	lsls	r2, r3, #3
 80020da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020dc:	18d3      	adds	r3, r2, r3
 80020de:	4adb      	ldr	r2, [pc, #876]	; (800244c <HAL_PCD_EP_DB_Transmit+0x724>)
 80020e0:	4694      	mov	ip, r2
 80020e2:	4463      	add	r3, ip
 80020e4:	643b      	str	r3, [r7, #64]	; 0x40
 80020e6:	238c      	movs	r3, #140	; 0x8c
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	6959      	ldr	r1, [r3, #20]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	891a      	ldrh	r2, [r3, #8]
 80020fe:	238c      	movs	r3, #140	; 0x8c
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	f003 fa0f 	bl	8005528 <USB_WritePMA>
 800210a:	e1ea      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2250      	movs	r2, #80	; 0x50
 8002112:	5a9b      	ldrh	r3, [r3, r2]
 8002114:	b29b      	uxth	r3, r3
 8002116:	001a      	movs	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	18d2      	adds	r2, r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	18d3      	adds	r3, r2, r3
 8002126:	4aca      	ldr	r2, [pc, #808]	; (8002450 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002128:	4694      	mov	ip, r2
 800212a:	4463      	add	r3, ip
 800212c:	881a      	ldrh	r2, [r3, #0]
 800212e:	2186      	movs	r1, #134	; 0x86
 8002130:	187b      	adds	r3, r7, r1
 8002132:	0592      	lsls	r2, r2, #22
 8002134:	0d92      	lsrs	r2, r2, #22
 8002136:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	699a      	ldr	r2, [r3, #24]
 800213c:	187b      	adds	r3, r7, r1
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d307      	bcc.n	8002154 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	187b      	adds	r3, r7, r1
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	1ad2      	subs	r2, r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	619a      	str	r2, [r3, #24]
 8002152:	e002      	b.n	800215a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2200      	movs	r2, #0
 8002158:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d000      	beq.n	8002164 <HAL_PCD_EP_DB_Transmit+0x43c>
 8002162:	e0bb      	b.n	80022dc <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	785b      	ldrb	r3, [r3, #1]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d125      	bne.n	80021b8 <HAL_PCD_EP_DB_Transmit+0x490>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2250      	movs	r2, #80	; 0x50
 8002178:	5a9b      	ldrh	r3, [r3, r2]
 800217a:	b29b      	uxth	r3, r3
 800217c:	001a      	movs	r2, r3
 800217e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002180:	189b      	adds	r3, r3, r2
 8002182:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	00da      	lsls	r2, r3, #3
 800218a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800218c:	18d3      	adds	r3, r2, r3
 800218e:	4aaf      	ldr	r2, [pc, #700]	; (800244c <HAL_PCD_EP_DB_Transmit+0x724>)
 8002190:	4694      	mov	ip, r2
 8002192:	4463      	add	r3, ip
 8002194:	67bb      	str	r3, [r7, #120]	; 0x78
 8002196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	059b      	lsls	r3, r3, #22
 800219e:	0d9b      	lsrs	r3, r3, #22
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a4:	801a      	strh	r2, [r3, #0]
 80021a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	4aa9      	ldr	r2, [pc, #676]	; (8002454 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021b4:	801a      	strh	r2, [r3, #0]
 80021b6:	e01b      	b.n	80021f0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	785b      	ldrb	r3, [r3, #1]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d117      	bne.n	80021f0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	667b      	str	r3, [r7, #100]	; 0x64
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2250      	movs	r2, #80	; 0x50
 80021cc:	5a9b      	ldrh	r3, [r3, r2]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	001a      	movs	r2, r3
 80021d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021d4:	189b      	adds	r3, r3, r2
 80021d6:	667b      	str	r3, [r7, #100]	; 0x64
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	00da      	lsls	r2, r3, #3
 80021de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021e0:	18d3      	adds	r3, r2, r3
 80021e2:	4a9a      	ldr	r2, [pc, #616]	; (800244c <HAL_PCD_EP_DB_Transmit+0x724>)
 80021e4:	4694      	mov	ip, r2
 80021e6:	4463      	add	r3, ip
 80021e8:	663b      	str	r3, [r7, #96]	; 0x60
 80021ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ec:	2200      	movs	r2, #0
 80021ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	677b      	str	r3, [r7, #116]	; 0x74
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	785b      	ldrb	r3, [r3, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d12b      	bne.n	8002256 <HAL_PCD_EP_DB_Transmit+0x52e>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2250      	movs	r2, #80	; 0x50
 800220a:	5a9b      	ldrh	r3, [r3, r2]
 800220c:	b29b      	uxth	r3, r3
 800220e:	001a      	movs	r2, r3
 8002210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002212:	189b      	adds	r3, r3, r2
 8002214:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	00da      	lsls	r2, r3, #3
 800221c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221e:	18d3      	adds	r3, r2, r3
 8002220:	4a8b      	ldr	r2, [pc, #556]	; (8002450 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002222:	4694      	mov	ip, r2
 8002224:	4463      	add	r3, ip
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	187a      	adds	r2, r7, r1
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	187b      	adds	r3, r7, r1
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	059b      	lsls	r3, r3, #22
 8002236:	0d9b      	lsrs	r3, r3, #22
 8002238:	b29a      	uxth	r2, r3
 800223a:	187b      	adds	r3, r7, r1
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	801a      	strh	r2, [r3, #0]
 8002240:	187b      	adds	r3, r7, r1
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	4a82      	ldr	r2, [pc, #520]	; (8002454 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800224a:	4313      	orrs	r3, r2
 800224c:	b29a      	uxth	r2, r3
 800224e:	187b      	adds	r3, r7, r1
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	801a      	strh	r2, [r3, #0]
 8002254:	e018      	b.n	8002288 <HAL_PCD_EP_DB_Transmit+0x560>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	785b      	ldrb	r3, [r3, #1]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d114      	bne.n	8002288 <HAL_PCD_EP_DB_Transmit+0x560>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2250      	movs	r2, #80	; 0x50
 8002264:	5a9b      	ldrh	r3, [r3, r2]
 8002266:	b29b      	uxth	r3, r3
 8002268:	001a      	movs	r2, r3
 800226a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800226c:	189b      	adds	r3, r3, r2
 800226e:	677b      	str	r3, [r7, #116]	; 0x74
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	00da      	lsls	r2, r3, #3
 8002276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002278:	18d3      	adds	r3, r2, r3
 800227a:	4a75      	ldr	r2, [pc, #468]	; (8002450 <HAL_PCD_EP_DB_Transmit+0x728>)
 800227c:	4694      	mov	ip, r2
 800227e:	4463      	add	r3, ip
 8002280:	673b      	str	r3, [r7, #112]	; 0x70
 8002282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002284:	2200      	movs	r2, #0
 8002286:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	0011      	movs	r1, r2
 8002290:	0018      	movs	r0, r3
 8002292:	f004 ff47 	bl	8007124 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002296:	1dbb      	adds	r3, r7, #6
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	01db      	lsls	r3, r3, #7
 800229e:	4013      	ands	r3, r2
 80022a0:	d000      	beq.n	80022a4 <HAL_PCD_EP_DB_Transmit+0x57c>
 80022a2:	e11e      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	001a      	movs	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	18d3      	adds	r3, r2, r3
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	2088      	movs	r0, #136	; 0x88
 80022b8:	183b      	adds	r3, r7, r0
 80022ba:	4967      	ldr	r1, [pc, #412]	; (8002458 <HAL_PCD_EP_DB_Transmit+0x730>)
 80022bc:	400a      	ands	r2, r1
 80022be:	801a      	strh	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	001a      	movs	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	18d3      	adds	r3, r2, r3
 80022ce:	183a      	adds	r2, r7, r0
 80022d0:	8812      	ldrh	r2, [r2, #0]
 80022d2:	4962      	ldr	r1, [pc, #392]	; (800245c <HAL_PCD_EP_DB_Transmit+0x734>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	b292      	uxth	r2, r2
 80022d8:	801a      	strh	r2, [r3, #0]
 80022da:	e102      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022dc:	1dbb      	adds	r3, r7, #6
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	01db      	lsls	r3, r3, #7
 80022e4:	4013      	ands	r3, r2
 80022e6:	d11a      	bne.n	800231e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	001a      	movs	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	18d3      	adds	r3, r2, r3
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	204e      	movs	r0, #78	; 0x4e
 80022fc:	183b      	adds	r3, r7, r0
 80022fe:	4956      	ldr	r1, [pc, #344]	; (8002458 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002300:	400a      	ands	r2, r1
 8002302:	801a      	strh	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	001a      	movs	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	18d3      	adds	r3, r2, r3
 8002312:	183a      	adds	r2, r7, r0
 8002314:	8812      	ldrh	r2, [r2, #0]
 8002316:	4951      	ldr	r1, [pc, #324]	; (800245c <HAL_PCD_EP_DB_Transmit+0x734>)
 8002318:	430a      	orrs	r2, r1
 800231a:	b292      	uxth	r2, r2
 800231c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2224      	movs	r2, #36	; 0x24
 8002322:	5c9b      	ldrb	r3, [r3, r2]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d000      	beq.n	800232a <HAL_PCD_EP_DB_Transmit+0x602>
 8002328:	e0db      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	2186      	movs	r1, #134	; 0x86
 8002330:	187b      	adds	r3, r7, r1
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	18d2      	adds	r2, r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	69da      	ldr	r2, [r3, #28]
 800233e:	187b      	adds	r3, r7, r1
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	18d2      	adds	r2, r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	6a1a      	ldr	r2, [r3, #32]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	429a      	cmp	r2, r3
 8002352:	d30c      	bcc.n	800236e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	218c      	movs	r1, #140	; 0x8c
 800235a:	187a      	adds	r2, r7, r1
 800235c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	6a1a      	ldr	r2, [r3, #32]
 8002362:	187b      	adds	r3, r7, r1
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	1ad2      	subs	r2, r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	621a      	str	r2, [r3, #32]
 800236c:	e01a      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10a      	bne.n	800238c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8002376:	2386      	movs	r3, #134	; 0x86
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	228c      	movs	r2, #140	; 0x8c
 800237e:	18ba      	adds	r2, r7, r2
 8002380:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2224      	movs	r2, #36	; 0x24
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]
 800238a:	e00b      	b.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	228c      	movs	r2, #140	; 0x8c
 8002392:	18ba      	adds	r2, r7, r2
 8002394:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2224      	movs	r2, #36	; 0x24
 80023a0:	2100      	movs	r1, #0
 80023a2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	657b      	str	r3, [r7, #84]	; 0x54
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	785b      	ldrb	r3, [r3, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d000      	beq.n	80023b4 <HAL_PCD_EP_DB_Transmit+0x68c>
 80023b2:	e06e      	b.n	8002492 <HAL_PCD_EP_DB_Transmit+0x76a>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2250      	movs	r2, #80	; 0x50
 80023c0:	5a9b      	ldrh	r3, [r3, r2]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	001a      	movs	r2, r3
 80023c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c8:	189b      	adds	r3, r3, r2
 80023ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	00da      	lsls	r2, r3, #3
 80023d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <HAL_PCD_EP_DB_Transmit+0x728>)
 80023d8:	4694      	mov	ip, r2
 80023da:	4463      	add	r3, ip
 80023dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80023de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	059b      	lsls	r3, r3, #22
 80023e6:	0d9b      	lsrs	r3, r3, #22
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ec:	801a      	strh	r2, [r3, #0]
 80023ee:	228c      	movs	r2, #140	; 0x8c
 80023f0:	18bb      	adds	r3, r7, r2
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b3e      	cmp	r3, #62	; 0x3e
 80023f6:	d91a      	bls.n	800242e <HAL_PCD_EP_DB_Transmit+0x706>
 80023f8:	18bb      	adds	r3, r7, r2
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002400:	18bb      	adds	r3, r7, r2
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	221f      	movs	r2, #31
 8002406:	4013      	ands	r3, r2
 8002408:	d102      	bne.n	8002410 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800240a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800240c:	3b01      	subs	r3, #1
 800240e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29a      	uxth	r2, r3
 8002416:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002418:	b29b      	uxth	r3, r3
 800241a:	029b      	lsls	r3, r3, #10
 800241c:	b29b      	uxth	r3, r3
 800241e:	4313      	orrs	r3, r2
 8002420:	b29b      	uxth	r3, r3
 8002422:	4a0c      	ldr	r2, [pc, #48]	; (8002454 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002424:	4313      	orrs	r3, r2
 8002426:	b29a      	uxth	r2, r3
 8002428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800242a:	801a      	strh	r2, [r3, #0]
 800242c:	e04d      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x7a2>
 800242e:	238c      	movs	r3, #140	; 0x8c
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d113      	bne.n	8002460 <HAL_PCD_EP_DB_Transmit+0x738>
 8002438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	b29b      	uxth	r3, r3
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002440:	4313      	orrs	r3, r2
 8002442:	b29a      	uxth	r2, r3
 8002444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002446:	801a      	strh	r2, [r3, #0]
 8002448:	e03f      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x7a2>
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	00000402 	.word	0x00000402
 8002450:	00000406 	.word	0x00000406
 8002454:	ffff8000 	.word	0xffff8000
 8002458:	ffff8f8f 	.word	0xffff8f8f
 800245c:	ffffc080 	.word	0xffffc080
 8002460:	228c      	movs	r2, #140	; 0x8c
 8002462:	18bb      	adds	r3, r7, r2
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	66bb      	str	r3, [r7, #104]	; 0x68
 800246a:	18bb      	adds	r3, r7, r2
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	4013      	ands	r3, r2
 8002472:	d002      	beq.n	800247a <HAL_PCD_EP_DB_Transmit+0x752>
 8002474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002476:	3301      	adds	r3, #1
 8002478:	66bb      	str	r3, [r7, #104]	; 0x68
 800247a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29a      	uxth	r2, r3
 8002480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002482:	b29b      	uxth	r3, r3
 8002484:	029b      	lsls	r3, r3, #10
 8002486:	b29b      	uxth	r3, r3
 8002488:	4313      	orrs	r3, r2
 800248a:	b29a      	uxth	r2, r3
 800248c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800248e:	801a      	strh	r2, [r3, #0]
 8002490:	e01b      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	785b      	ldrb	r3, [r3, #1]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d117      	bne.n	80024ca <HAL_PCD_EP_DB_Transmit+0x7a2>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2250      	movs	r2, #80	; 0x50
 80024a0:	5a9b      	ldrh	r3, [r3, r2]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	001a      	movs	r2, r3
 80024a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a8:	189b      	adds	r3, r3, r2
 80024aa:	657b      	str	r3, [r7, #84]	; 0x54
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	00da      	lsls	r2, r3, #3
 80024b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b4:	18d3      	adds	r3, r2, r3
 80024b6:	4a21      	ldr	r2, [pc, #132]	; (800253c <HAL_PCD_EP_DB_Transmit+0x814>)
 80024b8:	4694      	mov	ip, r2
 80024ba:	4463      	add	r3, ip
 80024bc:	653b      	str	r3, [r7, #80]	; 0x50
 80024be:	238c      	movs	r3, #140	; 0x8c
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	6959      	ldr	r1, [r3, #20]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	895a      	ldrh	r2, [r3, #10]
 80024d6:	238c      	movs	r3, #140	; 0x8c
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f003 f823 	bl	8005528 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	001a      	movs	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	18d3      	adds	r3, r2, r3
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	2014      	movs	r0, #20
 80024f6:	183b      	adds	r3, r7, r0
 80024f8:	4911      	ldr	r1, [pc, #68]	; (8002540 <HAL_PCD_EP_DB_Transmit+0x818>)
 80024fa:	400a      	ands	r2, r1
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	183b      	adds	r3, r7, r0
 8002500:	183a      	adds	r2, r7, r0
 8002502:	8812      	ldrh	r2, [r2, #0]
 8002504:	2110      	movs	r1, #16
 8002506:	404a      	eors	r2, r1
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	183b      	adds	r3, r7, r0
 800250c:	183a      	adds	r2, r7, r0
 800250e:	8812      	ldrh	r2, [r2, #0]
 8002510:	2120      	movs	r1, #32
 8002512:	404a      	eors	r2, r1
 8002514:	801a      	strh	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	001a      	movs	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	18d3      	adds	r3, r2, r3
 8002524:	183a      	adds	r2, r7, r0
 8002526:	8812      	ldrh	r2, [r2, #0]
 8002528:	4906      	ldr	r1, [pc, #24]	; (8002544 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800252a:	430a      	orrs	r2, r1
 800252c:	b292      	uxth	r2, r2
 800252e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b024      	add	sp, #144	; 0x90
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	00000406 	.word	0x00000406
 8002540:	ffff8fbf 	.word	0xffff8fbf
 8002544:	ffff8080 	.word	0xffff8080

08002548 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	0008      	movs	r0, r1
 8002552:	0011      	movs	r1, r2
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	240a      	movs	r4, #10
 8002558:	193b      	adds	r3, r7, r4
 800255a:	1c02      	adds	r2, r0, #0
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	2308      	movs	r3, #8
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	1c0a      	adds	r2, r1, #0
 8002564:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002566:	0021      	movs	r1, r4
 8002568:	187b      	adds	r3, r7, r1
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	4013      	ands	r3, r2
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00c      	beq.n	8002590 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002576:	187b      	adds	r3, r7, r1
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	2207      	movs	r2, #7
 800257c:	4013      	ands	r3, r2
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	0013      	movs	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	189b      	adds	r3, r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	18d3      	adds	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	e00b      	b.n	80025a8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002590:	230a      	movs	r3, #10
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	881a      	ldrh	r2, [r3, #0]
 8002596:	0013      	movs	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	189b      	adds	r3, r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	3369      	adds	r3, #105	; 0x69
 80025a0:	33ff      	adds	r3, #255	; 0xff
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	18d3      	adds	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80025a8:	2308      	movs	r3, #8
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d107      	bne.n	80025c2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2200      	movs	r2, #0
 80025b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	80da      	strh	r2, [r3, #6]
 80025c0:	e00b      	b.n	80025da <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2201      	movs	r2, #1
 80025c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	0c1b      	lsrs	r3, r3, #16
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	b007      	add	sp, #28
 80025e2:	bd90      	pop	{r4, r7, pc}

080025e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	23ba      	movs	r3, #186	; 0xba
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	2101      	movs	r1, #1
 80025fa:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	23b8      	movs	r3, #184	; 0xb8
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	2100      	movs	r1, #0
 8002604:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2254      	movs	r2, #84	; 0x54
 800260a:	5a9b      	ldrh	r3, [r3, r2]
 800260c:	b29b      	uxth	r3, r3
 800260e:	2201      	movs	r2, #1
 8002610:	4313      	orrs	r3, r2
 8002612:	b299      	uxth	r1, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2254      	movs	r2, #84	; 0x54
 8002618:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2254      	movs	r2, #84	; 0x54
 800261e:	5a9b      	ldrh	r3, [r3, r2]
 8002620:	b29b      	uxth	r3, r3
 8002622:	2202      	movs	r2, #2
 8002624:	4313      	orrs	r3, r2
 8002626:	b299      	uxth	r1, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2254      	movs	r2, #84	; 0x54
 800262c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b004      	add	sp, #16
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	000a      	movs	r2, r1
 8002642:	1cfb      	adds	r3, r7, #3
 8002644:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	46bd      	mov	sp, r7
 800264a:	b002      	add	sp, #8
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	f000 fbaf 	bl	8002dc2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002664:	4bcf      	ldr	r3, [pc, #828]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	220c      	movs	r2, #12
 800266a:	4013      	ands	r3, r2
 800266c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800266e:	4bcd      	ldr	r3, [pc, #820]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	025b      	lsls	r3, r3, #9
 8002676:	4013      	ands	r3, r2
 8002678:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2201      	movs	r2, #1
 8002680:	4013      	ands	r3, r2
 8002682:	d100      	bne.n	8002686 <HAL_RCC_OscConfig+0x36>
 8002684:	e07e      	b.n	8002784 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d007      	beq.n	800269c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d112      	bne.n	80026b8 <HAL_RCC_OscConfig+0x68>
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	025b      	lsls	r3, r3, #9
 8002698:	429a      	cmp	r2, r3
 800269a:	d10d      	bne.n	80026b8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269c:	4bc1      	ldr	r3, [pc, #772]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	029b      	lsls	r3, r3, #10
 80026a4:	4013      	ands	r3, r2
 80026a6:	d100      	bne.n	80026aa <HAL_RCC_OscConfig+0x5a>
 80026a8:	e06b      	b.n	8002782 <HAL_RCC_OscConfig+0x132>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d167      	bne.n	8002782 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f000 fb85 	bl	8002dc2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	025b      	lsls	r3, r3, #9
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x84>
 80026c4:	4bb7      	ldr	r3, [pc, #732]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4bb6      	ldr	r3, [pc, #728]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	0249      	lsls	r1, r1, #9
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e027      	b.n	8002724 <HAL_RCC_OscConfig+0xd4>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	23a0      	movs	r3, #160	; 0xa0
 80026da:	02db      	lsls	r3, r3, #11
 80026dc:	429a      	cmp	r2, r3
 80026de:	d10e      	bne.n	80026fe <HAL_RCC_OscConfig+0xae>
 80026e0:	4bb0      	ldr	r3, [pc, #704]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4baf      	ldr	r3, [pc, #700]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	02c9      	lsls	r1, r1, #11
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	4bad      	ldr	r3, [pc, #692]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4bac      	ldr	r3, [pc, #688]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	0249      	lsls	r1, r1, #9
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e012      	b.n	8002724 <HAL_RCC_OscConfig+0xd4>
 80026fe:	4ba9      	ldr	r3, [pc, #676]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4ba8      	ldr	r3, [pc, #672]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002704:	49a8      	ldr	r1, [pc, #672]	; (80029a8 <HAL_RCC_OscConfig+0x358>)
 8002706:	400a      	ands	r2, r1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	4ba6      	ldr	r3, [pc, #664]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	025b      	lsls	r3, r3, #9
 8002712:	4013      	ands	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4ba2      	ldr	r3, [pc, #648]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4ba1      	ldr	r3, [pc, #644]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 800271e:	49a3      	ldr	r1, [pc, #652]	; (80029ac <HAL_RCC_OscConfig+0x35c>)
 8002720:	400a      	ands	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe f84c 	bl	80007c8 <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002734:	e009      	b.n	800274a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002736:	f7fe f847 	bl	80007c8 <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b64      	cmp	r3, #100	; 0x64
 8002742:	d902      	bls.n	800274a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	f000 fb3c 	bl	8002dc2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800274a:	4b96      	ldr	r3, [pc, #600]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	029b      	lsls	r3, r3, #10
 8002752:	4013      	ands	r3, r2
 8002754:	d0ef      	beq.n	8002736 <HAL_RCC_OscConfig+0xe6>
 8002756:	e015      	b.n	8002784 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe f836 	bl	80007c8 <HAL_GetTick>
 800275c:	0003      	movs	r3, r0
 800275e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002762:	f7fe f831 	bl	80007c8 <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	; 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e326      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002774:	4b8b      	ldr	r3, [pc, #556]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	029b      	lsls	r3, r3, #10
 800277c:	4013      	ands	r3, r2
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x112>
 8002780:	e000      	b.n	8002784 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002782:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2202      	movs	r2, #2
 800278a:	4013      	ands	r3, r2
 800278c:	d100      	bne.n	8002790 <HAL_RCC_OscConfig+0x140>
 800278e:	e08b      	b.n	80028a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d13e      	bne.n	8002820 <HAL_RCC_OscConfig+0x1d0>
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d13b      	bne.n	8002820 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80027a8:	4b7e      	ldr	r3, [pc, #504]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2204      	movs	r2, #4
 80027ae:	4013      	ands	r3, r2
 80027b0:	d004      	beq.n	80027bc <HAL_RCC_OscConfig+0x16c>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e302      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b79      	ldr	r3, [pc, #484]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a7b      	ldr	r2, [pc, #492]	; (80029b0 <HAL_RCC_OscConfig+0x360>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	021a      	lsls	r2, r3, #8
 80027cc:	4b75      	ldr	r3, [pc, #468]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027d2:	4b74      	ldr	r3, [pc, #464]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2209      	movs	r2, #9
 80027d8:	4393      	bics	r3, r2
 80027da:	0019      	movs	r1, r3
 80027dc:	4b71      	ldr	r3, [pc, #452]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027e4:	f000 fc40 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 80027e8:	0001      	movs	r1, r0
 80027ea:	4b6e      	ldr	r3, [pc, #440]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	220f      	movs	r2, #15
 80027f2:	4013      	ands	r3, r2
 80027f4:	4a6f      	ldr	r2, [pc, #444]	; (80029b4 <HAL_RCC_OscConfig+0x364>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	000a      	movs	r2, r1
 80027fa:	40da      	lsrs	r2, r3
 80027fc:	4b6e      	ldr	r3, [pc, #440]	; (80029b8 <HAL_RCC_OscConfig+0x368>)
 80027fe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002800:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x36c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2513      	movs	r5, #19
 8002806:	197c      	adds	r4, r7, r5
 8002808:	0018      	movs	r0, r3
 800280a:	f7fd ff97 	bl	800073c <HAL_InitTick>
 800280e:	0003      	movs	r3, r0
 8002810:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002812:	197b      	adds	r3, r7, r5
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d046      	beq.n	80028a8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800281a:	197b      	adds	r3, r7, r5
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	e2d0      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d027      	beq.n	8002876 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002826:	4b5f      	ldr	r3, [pc, #380]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2209      	movs	r2, #9
 800282c:	4393      	bics	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	4b5c      	ldr	r3, [pc, #368]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fd ffc6 	bl	80007c8 <HAL_GetTick>
 800283c:	0003      	movs	r3, r0
 800283e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002842:	f7fd ffc1 	bl	80007c8 <HAL_GetTick>
 8002846:	0002      	movs	r2, r0
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e2b6      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002854:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2204      	movs	r2, #4
 800285a:	4013      	ands	r3, r2
 800285c:	d0f1      	beq.n	8002842 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a53      	ldr	r2, [pc, #332]	; (80029b0 <HAL_RCC_OscConfig+0x360>)
 8002864:	4013      	ands	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	021a      	lsls	r2, r3, #8
 800286e:	4b4d      	ldr	r3, [pc, #308]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	e018      	b.n	80028a8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	4b4b      	ldr	r3, [pc, #300]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 800287c:	2101      	movs	r1, #1
 800287e:	438a      	bics	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fd ffa1 	bl	80007c8 <HAL_GetTick>
 8002886:	0003      	movs	r3, r0
 8002888:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288c:	f7fd ff9c 	bl	80007c8 <HAL_GetTick>
 8002890:	0002      	movs	r2, r0
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e291      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2204      	movs	r2, #4
 80028a4:	4013      	ands	r3, r2
 80028a6:	d1f1      	bne.n	800288c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2210      	movs	r2, #16
 80028ae:	4013      	ands	r3, r2
 80028b0:	d100      	bne.n	80028b4 <HAL_RCC_OscConfig+0x264>
 80028b2:	e0a1      	b.n	80029f8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d140      	bne.n	800293c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ba:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4013      	ands	r3, r2
 80028c4:	d005      	beq.n	80028d2 <HAL_RCC_OscConfig+0x282>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e277      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028d2:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4a3a      	ldr	r2, [pc, #232]	; (80029c0 <HAL_RCC_OscConfig+0x370>)
 80028d8:	4013      	ands	r3, r2
 80028da:	0019      	movs	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e0:	4b30      	ldr	r3, [pc, #192]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028e6:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	0a19      	lsrs	r1, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	061a      	lsls	r2, r3, #24
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	0b5b      	lsrs	r3, r3, #13
 8002900:	3301      	adds	r3, #1
 8002902:	2280      	movs	r2, #128	; 0x80
 8002904:	0212      	lsls	r2, r2, #8
 8002906:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002908:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	210f      	movs	r1, #15
 8002910:	400b      	ands	r3, r1
 8002912:	4928      	ldr	r1, [pc, #160]	; (80029b4 <HAL_RCC_OscConfig+0x364>)
 8002914:	5ccb      	ldrb	r3, [r1, r3]
 8002916:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_RCC_OscConfig+0x368>)
 800291a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800291c:	4b27      	ldr	r3, [pc, #156]	; (80029bc <HAL_RCC_OscConfig+0x36c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2513      	movs	r5, #19
 8002922:	197c      	adds	r4, r7, r5
 8002924:	0018      	movs	r0, r3
 8002926:	f7fd ff09 	bl	800073c <HAL_InitTick>
 800292a:	0003      	movs	r3, r0
 800292c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800292e:	197b      	adds	r3, r7, r5
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d060      	beq.n	80029f8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002936:	197b      	adds	r3, r7, r5
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	e242      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d03f      	beq.n	80029c4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002944:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 800294a:	2180      	movs	r1, #128	; 0x80
 800294c:	0049      	lsls	r1, r1, #1
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7fd ff39 	bl	80007c8 <HAL_GetTick>
 8002956:	0003      	movs	r3, r0
 8002958:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800295c:	f7fd ff34 	bl	80007c8 <HAL_GetTick>
 8002960:	0002      	movs	r2, r0
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e229      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4013      	ands	r3, r2
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <HAL_RCC_OscConfig+0x370>)
 8002980:	4013      	ands	r3, r2
 8002982:	0019      	movs	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	0a19      	lsrs	r1, r3, #8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	061a      	lsls	r2, r3, #24
 800299c:	4b01      	ldr	r3, [pc, #4]	; (80029a4 <HAL_RCC_OscConfig+0x354>)
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	e029      	b.n	80029f8 <HAL_RCC_OscConfig+0x3a8>
 80029a4:	40021000 	.word	0x40021000
 80029a8:	fffeffff 	.word	0xfffeffff
 80029ac:	fffbffff 	.word	0xfffbffff
 80029b0:	ffffe0ff 	.word	0xffffe0ff
 80029b4:	08007788 	.word	0x08007788
 80029b8:	20000000 	.word	0x20000000
 80029bc:	20000004 	.word	0x20000004
 80029c0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029c4:	4bbd      	ldr	r3, [pc, #756]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4bbc      	ldr	r3, [pc, #752]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 80029ca:	49bd      	ldr	r1, [pc, #756]	; (8002cc0 <HAL_RCC_OscConfig+0x670>)
 80029cc:	400a      	ands	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fd fefa 	bl	80007c8 <HAL_GetTick>
 80029d4:	0003      	movs	r3, r0
 80029d6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029da:	f7fd fef5 	bl	80007c8 <HAL_GetTick>
 80029de:	0002      	movs	r2, r0
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1ea      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029ec:	4bb3      	ldr	r3, [pc, #716]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4013      	ands	r3, r2
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2208      	movs	r2, #8
 80029fe:	4013      	ands	r3, r2
 8002a00:	d036      	beq.n	8002a70 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d019      	beq.n	8002a3e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0a:	4bac      	ldr	r3, [pc, #688]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002a0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a0e:	4bab      	ldr	r3, [pc, #684]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002a10:	2101      	movs	r1, #1
 8002a12:	430a      	orrs	r2, r1
 8002a14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7fd fed7 	bl	80007c8 <HAL_GetTick>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a20:	f7fd fed2 	bl	80007c8 <HAL_GetTick>
 8002a24:	0002      	movs	r2, r0
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1c7      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a32:	4ba2      	ldr	r3, [pc, #648]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a36:	2202      	movs	r2, #2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d0f1      	beq.n	8002a20 <HAL_RCC_OscConfig+0x3d0>
 8002a3c:	e018      	b.n	8002a70 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a3e:	4b9f      	ldr	r3, [pc, #636]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002a40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a42:	4b9e      	ldr	r3, [pc, #632]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002a44:	2101      	movs	r1, #1
 8002a46:	438a      	bics	r2, r1
 8002a48:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4a:	f7fd febd 	bl	80007c8 <HAL_GetTick>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a54:	f7fd feb8 	bl	80007c8 <HAL_GetTick>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1ad      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a66:	4b95      	ldr	r3, [pc, #596]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d1f1      	bne.n	8002a54 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2204      	movs	r2, #4
 8002a76:	4013      	ands	r3, r2
 8002a78:	d100      	bne.n	8002a7c <HAL_RCC_OscConfig+0x42c>
 8002a7a:	e0ae      	b.n	8002bda <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7c:	2027      	movs	r0, #39	; 0x27
 8002a7e:	183b      	adds	r3, r7, r0
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a84:	4b8d      	ldr	r3, [pc, #564]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	055b      	lsls	r3, r3, #21
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d109      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a90:	4b8a      	ldr	r3, [pc, #552]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a94:	4b89      	ldr	r3, [pc, #548]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	0549      	lsls	r1, r1, #21
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a9e:	183b      	adds	r3, r7, r0
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b87      	ldr	r3, [pc, #540]	; (8002cc4 <HAL_RCC_OscConfig+0x674>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4013      	ands	r3, r2
 8002aae:	d11a      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab0:	4b84      	ldr	r3, [pc, #528]	; (8002cc4 <HAL_RCC_OscConfig+0x674>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b83      	ldr	r3, [pc, #524]	; (8002cc4 <HAL_RCC_OscConfig+0x674>)
 8002ab6:	2180      	movs	r1, #128	; 0x80
 8002ab8:	0049      	lsls	r1, r1, #1
 8002aba:	430a      	orrs	r2, r1
 8002abc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abe:	f7fd fe83 	bl	80007c8 <HAL_GetTick>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac8:	f7fd fe7e 	bl	80007c8 <HAL_GetTick>
 8002acc:	0002      	movs	r2, r0
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e173      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4b7a      	ldr	r3, [pc, #488]	; (8002cc4 <HAL_RCC_OscConfig+0x674>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_OscConfig+0x4b2>
 8002af2:	4b72      	ldr	r3, [pc, #456]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002af4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002af6:	4b71      	ldr	r3, [pc, #452]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	0049      	lsls	r1, r1, #1
 8002afc:	430a      	orrs	r2, r1
 8002afe:	651a      	str	r2, [r3, #80]	; 0x50
 8002b00:	e031      	b.n	8002b66 <HAL_RCC_OscConfig+0x516>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4d4>
 8002b0a:	4b6c      	ldr	r3, [pc, #432]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b0e:	4b6b      	ldr	r3, [pc, #428]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b10:	496b      	ldr	r1, [pc, #428]	; (8002cc0 <HAL_RCC_OscConfig+0x670>)
 8002b12:	400a      	ands	r2, r1
 8002b14:	651a      	str	r2, [r3, #80]	; 0x50
 8002b16:	4b69      	ldr	r3, [pc, #420]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b1a:	4b68      	ldr	r3, [pc, #416]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b1c:	496a      	ldr	r1, [pc, #424]	; (8002cc8 <HAL_RCC_OscConfig+0x678>)
 8002b1e:	400a      	ands	r2, r1
 8002b20:	651a      	str	r2, [r3, #80]	; 0x50
 8002b22:	e020      	b.n	8002b66 <HAL_RCC_OscConfig+0x516>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	23a0      	movs	r3, #160	; 0xa0
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d10e      	bne.n	8002b4e <HAL_RCC_OscConfig+0x4fe>
 8002b30:	4b62      	ldr	r3, [pc, #392]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b34:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b36:	2180      	movs	r1, #128	; 0x80
 8002b38:	00c9      	lsls	r1, r1, #3
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	651a      	str	r2, [r3, #80]	; 0x50
 8002b3e:	4b5f      	ldr	r3, [pc, #380]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b42:	4b5e      	ldr	r3, [pc, #376]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	0049      	lsls	r1, r1, #1
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	651a      	str	r2, [r3, #80]	; 0x50
 8002b4c:	e00b      	b.n	8002b66 <HAL_RCC_OscConfig+0x516>
 8002b4e:	4b5b      	ldr	r3, [pc, #364]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b52:	4b5a      	ldr	r3, [pc, #360]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b54:	495a      	ldr	r1, [pc, #360]	; (8002cc0 <HAL_RCC_OscConfig+0x670>)
 8002b56:	400a      	ands	r2, r1
 8002b58:	651a      	str	r2, [r3, #80]	; 0x50
 8002b5a:	4b58      	ldr	r3, [pc, #352]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b5e:	4b57      	ldr	r3, [pc, #348]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b60:	4959      	ldr	r1, [pc, #356]	; (8002cc8 <HAL_RCC_OscConfig+0x678>)
 8002b62:	400a      	ands	r2, r1
 8002b64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d015      	beq.n	8002b9a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7fd fe2b 	bl	80007c8 <HAL_GetTick>
 8002b72:	0003      	movs	r3, r0
 8002b74:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b76:	e009      	b.n	8002b8c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7fd fe26 	bl	80007c8 <HAL_GetTick>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <HAL_RCC_OscConfig+0x67c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e11a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b8c:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002b8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4013      	ands	r3, r2
 8002b96:	d0ef      	beq.n	8002b78 <HAL_RCC_OscConfig+0x528>
 8002b98:	e014      	b.n	8002bc4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7fd fe15 	bl	80007c8 <HAL_GetTick>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ba2:	e009      	b.n	8002bb8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fd fe10 	bl	80007c8 <HAL_GetTick>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	4a47      	ldr	r2, [pc, #284]	; (8002ccc <HAL_RCC_OscConfig+0x67c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e104      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bb8:	4b40      	ldr	r3, [pc, #256]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d1ef      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bc4:	2327      	movs	r3, #39	; 0x27
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d105      	bne.n	8002bda <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd2:	4b3a      	ldr	r3, [pc, #232]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002bd4:	493e      	ldr	r1, [pc, #248]	; (8002cd0 <HAL_RCC_OscConfig+0x680>)
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2220      	movs	r2, #32
 8002be0:	4013      	ands	r3, r2
 8002be2:	d049      	beq.n	8002c78 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d026      	beq.n	8002c3a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002bec:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	4b30      	ldr	r3, [pc, #192]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	430a      	orrs	r2, r1
 8002c02:	635a      	str	r2, [r3, #52]	; 0x34
 8002c04:	4b33      	ldr	r3, [pc, #204]	; (8002cd4 <HAL_RCC_OscConfig+0x684>)
 8002c06:	6a1a      	ldr	r2, [r3, #32]
 8002c08:	4b32      	ldr	r3, [pc, #200]	; (8002cd4 <HAL_RCC_OscConfig+0x684>)
 8002c0a:	2180      	movs	r1, #128	; 0x80
 8002c0c:	0189      	lsls	r1, r1, #6
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fd fdd9 	bl	80007c8 <HAL_GetTick>
 8002c16:	0003      	movs	r3, r0
 8002c18:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c1c:	f7fd fdd4 	bl	80007c8 <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0c9      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2202      	movs	r2, #2
 8002c34:	4013      	ands	r3, r2
 8002c36:	d0f1      	beq.n	8002c1c <HAL_RCC_OscConfig+0x5cc>
 8002c38:	e01e      	b.n	8002c78 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002c40:	2101      	movs	r1, #1
 8002c42:	438a      	bics	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <HAL_RCC_OscConfig+0x684>)
 8002c48:	6a1a      	ldr	r2, [r3, #32]
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_RCC_OscConfig+0x684>)
 8002c4c:	4922      	ldr	r1, [pc, #136]	; (8002cd8 <HAL_RCC_OscConfig+0x688>)
 8002c4e:	400a      	ands	r2, r1
 8002c50:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fd fdb9 	bl	80007c8 <HAL_GetTick>
 8002c56:	0003      	movs	r3, r0
 8002c58:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c5c:	f7fd fdb4 	bl	80007c8 <HAL_GetTick>
 8002c60:	0002      	movs	r2, r0
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0a9      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2202      	movs	r2, #2
 8002c74:	4013      	ands	r3, r2
 8002c76:	d1f1      	bne.n	8002c5c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d100      	bne.n	8002c82 <HAL_RCC_OscConfig+0x632>
 8002c80:	e09e      	b.n	8002dc0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	2b0c      	cmp	r3, #12
 8002c86:	d100      	bne.n	8002c8a <HAL_RCC_OscConfig+0x63a>
 8002c88:	e077      	b.n	8002d7a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d158      	bne.n	8002d44 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_OscConfig+0x66c>)
 8002c98:	4910      	ldr	r1, [pc, #64]	; (8002cdc <HAL_RCC_OscConfig+0x68c>)
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fd fd93 	bl	80007c8 <HAL_GetTick>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ca6:	e01b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fd fd8e 	bl	80007c8 <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d914      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e083      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	fffffeff 	.word	0xfffffeff
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	fffffbff 	.word	0xfffffbff
 8002ccc:	00001388 	.word	0x00001388
 8002cd0:	efffffff 	.word	0xefffffff
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	ffffdfff 	.word	0xffffdfff
 8002cdc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <HAL_RCC_OscConfig+0x77c>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	049b      	lsls	r3, r3, #18
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d1dd      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cec:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <HAL_RCC_OscConfig+0x77c>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a37      	ldr	r2, [pc, #220]	; (8002dd0 <HAL_RCC_OscConfig+0x780>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	431a      	orrs	r2, r3
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <HAL_RCC_OscConfig+0x77c>)
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_RCC_OscConfig+0x77c>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b2e      	ldr	r3, [pc, #184]	; (8002dcc <HAL_RCC_OscConfig+0x77c>)
 8002d12:	2180      	movs	r1, #128	; 0x80
 8002d14:	0449      	lsls	r1, r1, #17
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7fd fd55 	bl	80007c8 <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fd fd50 	bl	80007c8 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e045      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d36:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <HAL_RCC_OscConfig+0x77c>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	049b      	lsls	r3, r3, #18
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x6d4>
 8002d42:	e03d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <HAL_RCC_OscConfig+0x77c>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_RCC_OscConfig+0x77c>)
 8002d4a:	4922      	ldr	r1, [pc, #136]	; (8002dd4 <HAL_RCC_OscConfig+0x784>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fd fd3a 	bl	80007c8 <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fd fd35 	bl	80007c8 <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e02a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_RCC_OscConfig+0x77c>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	049b      	lsls	r3, r3, #18
 8002d74:	4013      	ands	r3, r2
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCC_OscConfig+0x70a>
 8002d78:	e022      	b.n	8002dc0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e01d      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_RCC_OscConfig+0x77c>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	025b      	lsls	r3, r3, #9
 8002d92:	401a      	ands	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d10f      	bne.n	8002dbc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	23f0      	movs	r3, #240	; 0xf0
 8002da0:	039b      	lsls	r3, r3, #14
 8002da2:	401a      	ands	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	23c0      	movs	r3, #192	; 0xc0
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	401a      	ands	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b00a      	add	sp, #40	; 0x28
 8002dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	ff02ffff 	.word	0xff02ffff
 8002dd4:	feffffff 	.word	0xfeffffff

08002dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd8:	b5b0      	push	{r4, r5, r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e128      	b.n	800303e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dec:	4b96      	ldr	r3, [pc, #600]	; (8003048 <HAL_RCC_ClockConfig+0x270>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2201      	movs	r2, #1
 8002df2:	4013      	ands	r3, r2
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d91e      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b93      	ldr	r3, [pc, #588]	; (8003048 <HAL_RCC_ClockConfig+0x270>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	4393      	bics	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	4b90      	ldr	r3, [pc, #576]	; (8003048 <HAL_RCC_ClockConfig+0x270>)
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e0c:	f7fd fcdc 	bl	80007c8 <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e14:	e009      	b.n	8002e2a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e16:	f7fd fcd7 	bl	80007c8 <HAL_GetTick>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	4a8a      	ldr	r2, [pc, #552]	; (800304c <HAL_RCC_ClockConfig+0x274>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e109      	b.n	800303e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b87      	ldr	r3, [pc, #540]	; (8003048 <HAL_RCC_ClockConfig+0x270>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4013      	ands	r3, r2
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1ee      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d009      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e42:	4b83      	ldr	r3, [pc, #524]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	22f0      	movs	r2, #240	; 0xf0
 8002e48:	4393      	bics	r3, r2
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	4b7f      	ldr	r3, [pc, #508]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002e52:	430a      	orrs	r2, r1
 8002e54:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d100      	bne.n	8002e62 <HAL_RCC_ClockConfig+0x8a>
 8002e60:	e089      	b.n	8002f76 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e6a:	4b79      	ldr	r3, [pc, #484]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	029b      	lsls	r3, r3, #10
 8002e72:	4013      	ands	r3, r2
 8002e74:	d120      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0e1      	b.n	800303e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e82:	4b73      	ldr	r3, [pc, #460]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	049b      	lsls	r3, r3, #18
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d114      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0d5      	b.n	800303e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e9a:	4b6d      	ldr	r3, [pc, #436]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d109      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0ca      	b.n	800303e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ea8:	4b69      	ldr	r3, [pc, #420]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0c2      	b.n	800303e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb8:	4b65      	ldr	r3, [pc, #404]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4b62      	ldr	r3, [pc, #392]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ecc:	f7fd fc7c 	bl	80007c8 <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d111      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002edc:	e009      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ede:	f7fd fc73 	bl	80007c8 <HAL_GetTick>
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	4a58      	ldr	r2, [pc, #352]	; (800304c <HAL_RCC_ClockConfig+0x274>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e0a5      	b.n	800303e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef2:	4b57      	ldr	r3, [pc, #348]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d1ef      	bne.n	8002ede <HAL_RCC_ClockConfig+0x106>
 8002efe:	e03a      	b.n	8002f76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d111      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f08:	e009      	b.n	8002f1e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0a:	f7fd fc5d 	bl	80007c8 <HAL_GetTick>
 8002f0e:	0002      	movs	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	4a4d      	ldr	r2, [pc, #308]	; (800304c <HAL_RCC_ClockConfig+0x274>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e08f      	b.n	800303e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f1e:	4b4c      	ldr	r3, [pc, #304]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	220c      	movs	r2, #12
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d1ef      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x132>
 8002f2a:	e024      	b.n	8002f76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d11b      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f34:	e009      	b.n	8002f4a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f36:	f7fd fc47 	bl	80007c8 <HAL_GetTick>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	4a42      	ldr	r2, [pc, #264]	; (800304c <HAL_RCC_ClockConfig+0x274>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e079      	b.n	800303e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f4a:	4b41      	ldr	r3, [pc, #260]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	220c      	movs	r2, #12
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d1ef      	bne.n	8002f36 <HAL_RCC_ClockConfig+0x15e>
 8002f56:	e00e      	b.n	8002f76 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f58:	f7fd fc36 	bl	80007c8 <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	4a3a      	ldr	r2, [pc, #232]	; (800304c <HAL_RCC_ClockConfig+0x274>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e068      	b.n	800303e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f6c:	4b38      	ldr	r3, [pc, #224]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	220c      	movs	r2, #12
 8002f72:	4013      	ands	r3, r2
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f76:	4b34      	ldr	r3, [pc, #208]	; (8003048 <HAL_RCC_ClockConfig+0x270>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d21e      	bcs.n	8002fc2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f84:	4b30      	ldr	r3, [pc, #192]	; (8003048 <HAL_RCC_ClockConfig+0x270>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	4393      	bics	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	4b2e      	ldr	r3, [pc, #184]	; (8003048 <HAL_RCC_ClockConfig+0x270>)
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f96:	f7fd fc17 	bl	80007c8 <HAL_GetTick>
 8002f9a:	0003      	movs	r3, r0
 8002f9c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	e009      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa0:	f7fd fc12 	bl	80007c8 <HAL_GetTick>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	4a28      	ldr	r2, [pc, #160]	; (800304c <HAL_RCC_ClockConfig+0x274>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e044      	b.n	800303e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb4:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCC_ClockConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4013      	ands	r3, r2
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d1ee      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4a20      	ldr	r2, [pc, #128]	; (8003054 <HAL_RCC_ClockConfig+0x27c>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2208      	movs	r2, #8
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fea:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <HAL_RCC_ClockConfig+0x280>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	00da      	lsls	r2, r3, #3
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003000:	f000 f832 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003004:	0001      	movs	r1, r0
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_RCC_ClockConfig+0x278>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	220f      	movs	r2, #15
 800300e:	4013      	ands	r3, r2
 8003010:	4a12      	ldr	r2, [pc, #72]	; (800305c <HAL_RCC_ClockConfig+0x284>)
 8003012:	5cd3      	ldrb	r3, [r2, r3]
 8003014:	000a      	movs	r2, r1
 8003016:	40da      	lsrs	r2, r3
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_RCC_ClockConfig+0x288>)
 800301a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_RCC_ClockConfig+0x28c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	250b      	movs	r5, #11
 8003022:	197c      	adds	r4, r7, r5
 8003024:	0018      	movs	r0, r3
 8003026:	f7fd fb89 	bl	800073c <HAL_InitTick>
 800302a:	0003      	movs	r3, r0
 800302c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800302e:	197b      	adds	r3, r7, r5
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003036:	197b      	adds	r3, r7, r5
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	e000      	b.n	800303e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b004      	add	sp, #16
 8003044:	bdb0      	pop	{r4, r5, r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	40022000 	.word	0x40022000
 800304c:	00001388 	.word	0x00001388
 8003050:	40021000 	.word	0x40021000
 8003054:	fffff8ff 	.word	0xfffff8ff
 8003058:	ffffc7ff 	.word	0xffffc7ff
 800305c:	08007788 	.word	0x08007788
 8003060:	20000000 	.word	0x20000000
 8003064:	20000004 	.word	0x20000004

08003068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	b08e      	sub	sp, #56	; 0x38
 800306c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800306e:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003076:	230c      	movs	r3, #12
 8003078:	4013      	ands	r3, r2
 800307a:	2b0c      	cmp	r3, #12
 800307c:	d014      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x40>
 800307e:	d900      	bls.n	8003082 <HAL_RCC_GetSysClockFreq+0x1a>
 8003080:	e07b      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x112>
 8003082:	2b04      	cmp	r3, #4
 8003084:	d002      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x24>
 8003086:	2b08      	cmp	r3, #8
 8003088:	d00b      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800308a:	e076      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800308c:	4b44      	ldr	r3, [pc, #272]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2210      	movs	r2, #16
 8003092:	4013      	ands	r3, r2
 8003094:	d002      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003096:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003098:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800309a:	e07c      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800309c:	4b42      	ldr	r3, [pc, #264]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030a0:	e079      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a2:	4b42      	ldr	r3, [pc, #264]	; (80031ac <HAL_RCC_GetSysClockFreq+0x144>)
 80030a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030a6:	e076      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	0c9a      	lsrs	r2, r3, #18
 80030ac:	230f      	movs	r3, #15
 80030ae:	401a      	ands	r2, r3
 80030b0:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x148>)
 80030b2:	5c9b      	ldrb	r3, [r3, r2]
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	0d9a      	lsrs	r2, r3, #22
 80030ba:	2303      	movs	r3, #3
 80030bc:	4013      	ands	r3, r2
 80030be:	3301      	adds	r3, #1
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c2:	4b37      	ldr	r3, [pc, #220]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x138>)
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	025b      	lsls	r3, r3, #9
 80030ca:	4013      	ands	r3, r2
 80030cc:	d01a      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	4a35      	ldr	r2, [pc, #212]	; (80031ac <HAL_RCC_GetSysClockFreq+0x144>)
 80030d8:	2300      	movs	r3, #0
 80030da:	69b8      	ldr	r0, [r7, #24]
 80030dc:	69f9      	ldr	r1, [r7, #28]
 80030de:	f7fd f8bf 	bl	8000260 <__aeabi_lmul>
 80030e2:	0002      	movs	r2, r0
 80030e4:	000b      	movs	r3, r1
 80030e6:	0010      	movs	r0, r2
 80030e8:	0019      	movs	r1, r3
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f7fd f893 	bl	8000220 <__aeabi_uldivmod>
 80030fa:	0002      	movs	r2, r0
 80030fc:	000b      	movs	r3, r1
 80030fe:	0013      	movs	r3, r2
 8003100:	637b      	str	r3, [r7, #52]	; 0x34
 8003102:	e037      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003104:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2210      	movs	r2, #16
 800310a:	4013      	ands	r3, r2
 800310c:	d01a      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	4a23      	ldr	r2, [pc, #140]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003118:	2300      	movs	r3, #0
 800311a:	68b8      	ldr	r0, [r7, #8]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	f7fd f89f 	bl	8000260 <__aeabi_lmul>
 8003122:	0002      	movs	r2, r0
 8003124:	000b      	movs	r3, r1
 8003126:	0010      	movs	r0, r2
 8003128:	0019      	movs	r1, r3
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f7fd f873 	bl	8000220 <__aeabi_uldivmod>
 800313a:	0002      	movs	r2, r0
 800313c:	000b      	movs	r3, r1
 800313e:	0013      	movs	r3, r2
 8003140:	637b      	str	r3, [r7, #52]	; 0x34
 8003142:	e017      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	0018      	movs	r0, r3
 8003148:	2300      	movs	r3, #0
 800314a:	0019      	movs	r1, r3
 800314c:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800314e:	2300      	movs	r3, #0
 8003150:	f7fd f886 	bl	8000260 <__aeabi_lmul>
 8003154:	0002      	movs	r2, r0
 8003156:	000b      	movs	r3, r1
 8003158:	0010      	movs	r0, r2
 800315a:	0019      	movs	r1, r3
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	001c      	movs	r4, r3
 8003160:	2300      	movs	r3, #0
 8003162:	001d      	movs	r5, r3
 8003164:	0022      	movs	r2, r4
 8003166:	002b      	movs	r3, r5
 8003168:	f7fd f85a 	bl	8000220 <__aeabi_uldivmod>
 800316c:	0002      	movs	r2, r0
 800316e:	000b      	movs	r3, r1
 8003170:	0013      	movs	r3, r2
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003178:	e00d      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	0b5b      	lsrs	r3, r3, #13
 8003180:	2207      	movs	r2, #7
 8003182:	4013      	ands	r3, r2
 8003184:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	3301      	adds	r3, #1
 800318a:	2280      	movs	r2, #128	; 0x80
 800318c:	0212      	lsls	r2, r2, #8
 800318e:	409a      	lsls	r2, r3
 8003190:	0013      	movs	r3, r2
 8003192:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003194:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b00e      	add	sp, #56	; 0x38
 800319e:	bdb0      	pop	{r4, r5, r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	003d0900 	.word	0x003d0900
 80031a8:	00f42400 	.word	0x00f42400
 80031ac:	007a1200 	.word	0x007a1200
 80031b0:	08007798 	.word	0x08007798

080031b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80031bc:	2317      	movs	r3, #23
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2220      	movs	r2, #32
 80031ca:	4013      	ands	r3, r2
 80031cc:	d106      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	4013      	ands	r3, r2
 80031d8:	d100      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80031da:	e104      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031dc:	4bb1      	ldr	r3, [pc, #708]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	055b      	lsls	r3, r3, #21
 80031e4:	4013      	ands	r3, r2
 80031e6:	d10a      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e8:	4bae      	ldr	r3, [pc, #696]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ec:	4bad      	ldr	r3, [pc, #692]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	0549      	lsls	r1, r1, #21
 80031f2:	430a      	orrs	r2, r1
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80031f6:	2317      	movs	r3, #23
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4baa      	ldr	r3, [pc, #680]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4013      	ands	r3, r2
 8003208:	d11a      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320a:	4ba7      	ldr	r3, [pc, #668]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4ba6      	ldr	r3, [pc, #664]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003210:	2180      	movs	r1, #128	; 0x80
 8003212:	0049      	lsls	r1, r1, #1
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003218:	f7fd fad6 	bl	80007c8 <HAL_GetTick>
 800321c:	0003      	movs	r3, r0
 800321e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003220:	e008      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003222:	f7fd fad1 	bl	80007c8 <HAL_GetTick>
 8003226:	0002      	movs	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b64      	cmp	r3, #100	; 0x64
 800322e:	d901      	bls.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e133      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	4b9c      	ldr	r3, [pc, #624]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4013      	ands	r3, r2
 800323e:	d0f0      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003240:	4b98      	ldr	r3, [pc, #608]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	23c0      	movs	r3, #192	; 0xc0
 8003246:	039b      	lsls	r3, r3, #14
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	23c0      	movs	r3, #192	; 0xc0
 8003252:	039b      	lsls	r3, r3, #14
 8003254:	4013      	ands	r3, r2
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d107      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	23c0      	movs	r3, #192	; 0xc0
 8003262:	039b      	lsls	r3, r3, #14
 8003264:	4013      	ands	r3, r2
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	429a      	cmp	r2, r3
 800326a:	d013      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	23c0      	movs	r3, #192	; 0xc0
 8003272:	029b      	lsls	r3, r3, #10
 8003274:	401a      	ands	r2, r3
 8003276:	23c0      	movs	r3, #192	; 0xc0
 8003278:	029b      	lsls	r3, r3, #10
 800327a:	429a      	cmp	r2, r3
 800327c:	d10a      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800327e:	4b89      	ldr	r3, [pc, #548]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	029b      	lsls	r3, r3, #10
 8003286:	401a      	ands	r2, r3
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	029b      	lsls	r3, r3, #10
 800328c:	429a      	cmp	r2, r3
 800328e:	d101      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e103      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003294:	4b83      	ldr	r3, [pc, #524]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003298:	23c0      	movs	r3, #192	; 0xc0
 800329a:	029b      	lsls	r3, r3, #10
 800329c:	4013      	ands	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d049      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	23c0      	movs	r3, #192	; 0xc0
 80032ac:	029b      	lsls	r3, r3, #10
 80032ae:	4013      	ands	r3, r2
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d004      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2220      	movs	r2, #32
 80032bc:	4013      	ands	r3, r2
 80032be:	d10d      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	23c0      	movs	r3, #192	; 0xc0
 80032c6:	029b      	lsls	r3, r3, #10
 80032c8:	4013      	ands	r3, r2
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d034      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	4013      	ands	r3, r2
 80032da:	d02e      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80032dc:	4b71      	ldr	r3, [pc, #452]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e0:	4a72      	ldr	r2, [pc, #456]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e6:	4b6f      	ldr	r3, [pc, #444]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032ea:	4b6e      	ldr	r3, [pc, #440]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	0309      	lsls	r1, r1, #12
 80032f0:	430a      	orrs	r2, r1
 80032f2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032f4:	4b6b      	ldr	r3, [pc, #428]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032f8:	4b6a      	ldr	r3, [pc, #424]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032fa:	496d      	ldr	r1, [pc, #436]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80032fc:	400a      	ands	r2, r1
 80032fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003300:	4b68      	ldr	r3, [pc, #416]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4013      	ands	r3, r2
 800330e:	d014      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fd fa5a 	bl	80007c8 <HAL_GetTick>
 8003314:	0003      	movs	r3, r0
 8003316:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003318:	e009      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fd fa55 	bl	80007c8 <HAL_GetTick>
 800331e:	0002      	movs	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	4a63      	ldr	r2, [pc, #396]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e0b6      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800332e:	4b5d      	ldr	r3, [pc, #372]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003332:	2380      	movs	r3, #128	; 0x80
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4013      	ands	r3, r2
 8003338:	d0ef      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	4013      	ands	r3, r2
 8003344:	d01f      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	23c0      	movs	r3, #192	; 0xc0
 800334c:	029b      	lsls	r3, r3, #10
 800334e:	401a      	ands	r2, r3
 8003350:	23c0      	movs	r3, #192	; 0xc0
 8003352:	029b      	lsls	r3, r3, #10
 8003354:	429a      	cmp	r2, r3
 8003356:	d10c      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003358:	4b52      	ldr	r3, [pc, #328]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a56      	ldr	r2, [pc, #344]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800335e:	4013      	ands	r3, r2
 8003360:	0019      	movs	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	23c0      	movs	r3, #192	; 0xc0
 8003368:	039b      	lsls	r3, r3, #14
 800336a:	401a      	ands	r2, r3
 800336c:	4b4d      	ldr	r3, [pc, #308]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800336e:	430a      	orrs	r2, r1
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	4b4c      	ldr	r3, [pc, #304]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003374:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	23c0      	movs	r3, #192	; 0xc0
 800337c:	029b      	lsls	r3, r3, #10
 800337e:	401a      	ands	r2, r3
 8003380:	4b48      	ldr	r3, [pc, #288]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003382:	430a      	orrs	r2, r1
 8003384:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2220      	movs	r2, #32
 800338c:	4013      	ands	r3, r2
 800338e:	d01f      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	23c0      	movs	r3, #192	; 0xc0
 8003396:	029b      	lsls	r3, r3, #10
 8003398:	401a      	ands	r2, r3
 800339a:	23c0      	movs	r3, #192	; 0xc0
 800339c:	029b      	lsls	r3, r3, #10
 800339e:	429a      	cmp	r2, r3
 80033a0:	d10c      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80033a2:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a44      	ldr	r2, [pc, #272]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	23c0      	movs	r3, #192	; 0xc0
 80033b2:	039b      	lsls	r3, r3, #14
 80033b4:	401a      	ands	r2, r3
 80033b6:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033b8:	430a      	orrs	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	4b39      	ldr	r3, [pc, #228]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033be:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	23c0      	movs	r3, #192	; 0xc0
 80033c6:	029b      	lsls	r3, r3, #10
 80033c8:	401a      	ands	r2, r3
 80033ca:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033cc:	430a      	orrs	r2, r1
 80033ce:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033d0:	2317      	movs	r3, #23
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d105      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033da:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033de:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033e0:	4936      	ldr	r1, [pc, #216]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033e2:	400a      	ands	r2, r1
 80033e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2201      	movs	r2, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033f0:	4b2c      	ldr	r3, [pc, #176]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f4:	2203      	movs	r2, #3
 80033f6:	4393      	bics	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003400:	430a      	orrs	r2, r1
 8003402:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2202      	movs	r2, #2
 800340a:	4013      	ands	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800340e:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	220c      	movs	r2, #12
 8003414:	4393      	bics	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800341e:	430a      	orrs	r2, r1
 8003420:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2204      	movs	r2, #4
 8003428:	4013      	ands	r3, r2
 800342a:	d009      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800342c:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800342e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003430:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003432:	4013      	ands	r3, r2
 8003434:	0019      	movs	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800343c:	430a      	orrs	r2, r1
 800343e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2208      	movs	r2, #8
 8003446:	4013      	ands	r3, r2
 8003448:	d009      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800344a:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003450:	4013      	ands	r3, r2
 8003452:	0019      	movs	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800345a:	430a      	orrs	r2, r1
 800345c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2240      	movs	r2, #64	; 0x40
 8003464:	4013      	ands	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003468:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800346a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346c:	4a16      	ldr	r2, [pc, #88]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800346e:	4013      	ands	r3, r2
 8003470:	0019      	movs	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1a      	ldr	r2, [r3, #32]
 8003476:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003478:	430a      	orrs	r2, r1
 800347a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2280      	movs	r2, #128	; 0x80
 8003482:	4013      	ands	r3, r2
 8003484:	d009      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003486:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	4a10      	ldr	r2, [pc, #64]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800348c:	4013      	ands	r3, r2
 800348e:	0019      	movs	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003496:	430a      	orrs	r2, r1
 8003498:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b006      	add	sp, #24
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40007000 	.word	0x40007000
 80034ac:	fffcffff 	.word	0xfffcffff
 80034b0:	fff7ffff 	.word	0xfff7ffff
 80034b4:	00001388 	.word	0x00001388
 80034b8:	ffcfffff 	.word	0xffcfffff
 80034bc:	efffffff 	.word	0xefffffff
 80034c0:	fffff3ff 	.word	0xfffff3ff
 80034c4:	ffffcfff 	.word	0xffffcfff
 80034c8:	fbffffff 	.word	0xfbffffff
 80034cc:	fff3ffff 	.word	0xfff3ffff

080034d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2244      	movs	r2, #68	; 0x44
 80034dc:	2100      	movs	r1, #0
 80034de:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <USB_EnableGlobalInt+0x28>)
 80034e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	b299      	uxth	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2240      	movs	r2, #64	; 0x40
 80034ec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b004      	add	sp, #16
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	0000bf80 	.word	0x0000bf80

080034fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <USB_DisableGlobalInt+0x30>)
 8003506:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	5a9b      	ldrh	r3, [r3, r2]
 800350e:	b29b      	uxth	r3, r3
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	b292      	uxth	r2, r2
 8003514:	43d2      	mvns	r2, r2
 8003516:	b292      	uxth	r2, r2
 8003518:	4013      	ands	r3, r2
 800351a:	b299      	uxth	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2240      	movs	r2, #64	; 0x40
 8003520:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b004      	add	sp, #16
 800352a:	bd80      	pop	{r7, pc}
 800352c:	0000bf80 	.word	0x0000bf80

08003530 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003530:	b084      	sub	sp, #16
 8003532:	b590      	push	{r4, r7, lr}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	2004      	movs	r0, #4
 800353c:	2410      	movs	r4, #16
 800353e:	1900      	adds	r0, r0, r4
 8003540:	2408      	movs	r4, #8
 8003542:	46a4      	mov	ip, r4
 8003544:	44bc      	add	ip, r7
 8003546:	4460      	add	r0, ip
 8003548:	6001      	str	r1, [r0, #0]
 800354a:	6042      	str	r2, [r0, #4]
 800354c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2240      	movs	r2, #64	; 0x40
 8003552:	2101      	movs	r1, #1
 8003554:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2240      	movs	r2, #64	; 0x40
 800355a:	2100      	movs	r1, #0
 800355c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2244      	movs	r2, #68	; 0x44
 8003562:	2100      	movs	r1, #0
 8003564:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2250      	movs	r2, #80	; 0x50
 800356a:	2100      	movs	r1, #0
 800356c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b003      	add	sp, #12
 8003576:	bc90      	pop	{r4, r7}
 8003578:	bc08      	pop	{r3}
 800357a:	b004      	add	sp, #16
 800357c:	4718      	bx	r3
	...

08003580 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b09c      	sub	sp, #112	; 0x70
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800358a:	236f      	movs	r3, #111	; 0x6f
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	18d3      	adds	r3, r2, r3
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	236c      	movs	r3, #108	; 0x6c
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	49a3      	ldr	r1, [pc, #652]	; (8003834 <USB_ActivateEndpoint+0x2b4>)
 80035a6:	400a      	ands	r2, r1
 80035a8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	78db      	ldrb	r3, [r3, #3]
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d017      	beq.n	80035e2 <USB_ActivateEndpoint+0x62>
 80035b2:	dc28      	bgt.n	8003606 <USB_ActivateEndpoint+0x86>
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d00e      	beq.n	80035d6 <USB_ActivateEndpoint+0x56>
 80035b8:	dc25      	bgt.n	8003606 <USB_ActivateEndpoint+0x86>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <USB_ActivateEndpoint+0x44>
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d018      	beq.n	80035f4 <USB_ActivateEndpoint+0x74>
 80035c2:	e020      	b.n	8003606 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80035c4:	226c      	movs	r2, #108	; 0x6c
 80035c6:	18bb      	adds	r3, r7, r2
 80035c8:	18ba      	adds	r2, r7, r2
 80035ca:	8812      	ldrh	r2, [r2, #0]
 80035cc:	2180      	movs	r1, #128	; 0x80
 80035ce:	0089      	lsls	r1, r1, #2
 80035d0:	430a      	orrs	r2, r1
 80035d2:	801a      	strh	r2, [r3, #0]
      break;
 80035d4:	e01c      	b.n	8003610 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80035d6:	226c      	movs	r2, #108	; 0x6c
 80035d8:	18bb      	adds	r3, r7, r2
 80035da:	18ba      	adds	r2, r7, r2
 80035dc:	8812      	ldrh	r2, [r2, #0]
 80035de:	801a      	strh	r2, [r3, #0]
      break;
 80035e0:	e016      	b.n	8003610 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80035e2:	226c      	movs	r2, #108	; 0x6c
 80035e4:	18bb      	adds	r3, r7, r2
 80035e6:	18ba      	adds	r2, r7, r2
 80035e8:	8812      	ldrh	r2, [r2, #0]
 80035ea:	21c0      	movs	r1, #192	; 0xc0
 80035ec:	00c9      	lsls	r1, r1, #3
 80035ee:	430a      	orrs	r2, r1
 80035f0:	801a      	strh	r2, [r3, #0]
      break;
 80035f2:	e00d      	b.n	8003610 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80035f4:	226c      	movs	r2, #108	; 0x6c
 80035f6:	18bb      	adds	r3, r7, r2
 80035f8:	18ba      	adds	r2, r7, r2
 80035fa:	8812      	ldrh	r2, [r2, #0]
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	00c9      	lsls	r1, r1, #3
 8003600:	430a      	orrs	r2, r1
 8003602:	801a      	strh	r2, [r3, #0]
      break;
 8003604:	e004      	b.n	8003610 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003606:	236f      	movs	r3, #111	; 0x6f
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	2201      	movs	r2, #1
 800360c:	701a      	strb	r2, [r3, #0]
      break;
 800360e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	18d3      	adds	r3, r2, r3
 800361a:	226c      	movs	r2, #108	; 0x6c
 800361c:	18ba      	adds	r2, r7, r2
 800361e:	8812      	ldrh	r2, [r2, #0]
 8003620:	4985      	ldr	r1, [pc, #532]	; (8003838 <USB_ActivateEndpoint+0x2b8>)
 8003622:	430a      	orrs	r2, r1
 8003624:	b292      	uxth	r2, r2
 8003626:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	18d3      	adds	r3, r2, r3
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	b29b      	uxth	r3, r3
 8003636:	b21b      	sxth	r3, r3
 8003638:	4a80      	ldr	r2, [pc, #512]	; (800383c <USB_ActivateEndpoint+0x2bc>)
 800363a:	4013      	ands	r3, r2
 800363c:	b21a      	sxth	r2, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	b21b      	sxth	r3, r3
 8003644:	4313      	orrs	r3, r2
 8003646:	b21a      	sxth	r2, r3
 8003648:	2166      	movs	r1, #102	; 0x66
 800364a:	187b      	adds	r3, r7, r1
 800364c:	801a      	strh	r2, [r3, #0]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	18d3      	adds	r3, r2, r3
 8003658:	187a      	adds	r2, r7, r1
 800365a:	8812      	ldrh	r2, [r2, #0]
 800365c:	4976      	ldr	r1, [pc, #472]	; (8003838 <USB_ActivateEndpoint+0x2b8>)
 800365e:	430a      	orrs	r2, r1
 8003660:	b292      	uxth	r2, r2
 8003662:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	7b1b      	ldrb	r3, [r3, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d000      	beq.n	800366e <USB_ActivateEndpoint+0xee>
 800366c:	e178      	b.n	8003960 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	785b      	ldrb	r3, [r3, #1]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d100      	bne.n	8003678 <USB_ActivateEndpoint+0xf8>
 8003676:	e07a      	b.n	800376e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	61bb      	str	r3, [r7, #24]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2250      	movs	r2, #80	; 0x50
 8003680:	5a9b      	ldrh	r3, [r3, r2]
 8003682:	b29b      	uxth	r3, r3
 8003684:	001a      	movs	r2, r3
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	189b      	adds	r3, r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	00da      	lsls	r2, r3, #3
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	18d3      	adds	r3, r2, r3
 8003696:	2280      	movs	r2, #128	; 0x80
 8003698:	00d2      	lsls	r2, r2, #3
 800369a:	4694      	mov	ip, r2
 800369c:	4463      	add	r3, ip
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	88db      	ldrh	r3, [r3, #6]
 80036a4:	085b      	lsrs	r3, r3, #1
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	18db      	adds	r3, r3, r3
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	18d2      	adds	r2, r2, r3
 80036ba:	2112      	movs	r1, #18
 80036bc:	187b      	adds	r3, r7, r1
 80036be:	8812      	ldrh	r2, [r2, #0]
 80036c0:	801a      	strh	r2, [r3, #0]
 80036c2:	187b      	adds	r3, r7, r1
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	2240      	movs	r2, #64	; 0x40
 80036c8:	4013      	ands	r3, r2
 80036ca:	d016      	beq.n	80036fa <USB_ActivateEndpoint+0x17a>
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	18d3      	adds	r3, r2, r3
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b29a      	uxth	r2, r3
 80036da:	2010      	movs	r0, #16
 80036dc:	183b      	adds	r3, r7, r0
 80036de:	4957      	ldr	r1, [pc, #348]	; (800383c <USB_ActivateEndpoint+0x2bc>)
 80036e0:	400a      	ands	r2, r1
 80036e2:	801a      	strh	r2, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	18d3      	adds	r3, r2, r3
 80036ee:	183a      	adds	r2, r7, r0
 80036f0:	8812      	ldrh	r2, [r2, #0]
 80036f2:	4953      	ldr	r1, [pc, #332]	; (8003840 <USB_ActivateEndpoint+0x2c0>)
 80036f4:	430a      	orrs	r2, r1
 80036f6:	b292      	uxth	r2, r2
 80036f8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	78db      	ldrb	r3, [r3, #3]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d01d      	beq.n	800373e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	18d3      	adds	r3, r2, r3
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b29a      	uxth	r2, r3
 8003710:	200c      	movs	r0, #12
 8003712:	183b      	adds	r3, r7, r0
 8003714:	494b      	ldr	r1, [pc, #300]	; (8003844 <USB_ActivateEndpoint+0x2c4>)
 8003716:	400a      	ands	r2, r1
 8003718:	801a      	strh	r2, [r3, #0]
 800371a:	183b      	adds	r3, r7, r0
 800371c:	183a      	adds	r2, r7, r0
 800371e:	8812      	ldrh	r2, [r2, #0]
 8003720:	2120      	movs	r1, #32
 8003722:	404a      	eors	r2, r1
 8003724:	801a      	strh	r2, [r3, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	18d3      	adds	r3, r2, r3
 8003730:	183a      	adds	r2, r7, r0
 8003732:	8812      	ldrh	r2, [r2, #0]
 8003734:	4940      	ldr	r1, [pc, #256]	; (8003838 <USB_ActivateEndpoint+0x2b8>)
 8003736:	430a      	orrs	r2, r1
 8003738:	b292      	uxth	r2, r2
 800373a:	801a      	strh	r2, [r3, #0]
 800373c:	e2b4      	b.n	8003ca8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	18d3      	adds	r3, r2, r3
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29a      	uxth	r2, r3
 800374c:	200e      	movs	r0, #14
 800374e:	183b      	adds	r3, r7, r0
 8003750:	493c      	ldr	r1, [pc, #240]	; (8003844 <USB_ActivateEndpoint+0x2c4>)
 8003752:	400a      	ands	r2, r1
 8003754:	801a      	strh	r2, [r3, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	18d3      	adds	r3, r2, r3
 8003760:	183a      	adds	r2, r7, r0
 8003762:	8812      	ldrh	r2, [r2, #0]
 8003764:	4934      	ldr	r1, [pc, #208]	; (8003838 <USB_ActivateEndpoint+0x2b8>)
 8003766:	430a      	orrs	r2, r1
 8003768:	b292      	uxth	r2, r2
 800376a:	801a      	strh	r2, [r3, #0]
 800376c:	e29c      	b.n	8003ca8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	633b      	str	r3, [r7, #48]	; 0x30
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2250      	movs	r2, #80	; 0x50
 8003776:	5a9b      	ldrh	r3, [r3, r2]
 8003778:	b29b      	uxth	r3, r3
 800377a:	001a      	movs	r2, r3
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	189b      	adds	r3, r3, r2
 8003780:	633b      	str	r3, [r7, #48]	; 0x30
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	00da      	lsls	r2, r3, #3
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	18d3      	adds	r3, r2, r3
 800378c:	4a2e      	ldr	r2, [pc, #184]	; (8003848 <USB_ActivateEndpoint+0x2c8>)
 800378e:	4694      	mov	ip, r2
 8003790:	4463      	add	r3, ip
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	88db      	ldrh	r3, [r3, #6]
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	b29b      	uxth	r3, r3
 800379c:	18db      	adds	r3, r3, r3
 800379e:	b29a      	uxth	r2, r3
 80037a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2250      	movs	r2, #80	; 0x50
 80037ac:	5a9b      	ldrh	r3, [r3, r2]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	001a      	movs	r2, r3
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	189b      	adds	r3, r3, r2
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	00da      	lsls	r2, r3, #3
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	18d3      	adds	r3, r2, r3
 80037c2:	4a22      	ldr	r2, [pc, #136]	; (800384c <USB_ActivateEndpoint+0x2cc>)
 80037c4:	4694      	mov	ip, r2
 80037c6:	4463      	add	r3, ip
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	059b      	lsls	r3, r3, #22
 80037d2:	0d9b      	lsrs	r3, r3, #22
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b3e      	cmp	r3, #62	; 0x3e
 80037e0:	d91a      	bls.n	8003818 <USB_ActivateEndpoint+0x298>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	221f      	movs	r2, #31
 80037f0:	4013      	ands	r3, r2
 80037f2:	d102      	bne.n	80037fa <USB_ActivateEndpoint+0x27a>
 80037f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037f6:	3b01      	subs	r3, #1
 80037f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003802:	b29b      	uxth	r3, r3
 8003804:	029b      	lsls	r3, r3, #10
 8003806:	b29b      	uxth	r3, r3
 8003808:	4313      	orrs	r3, r2
 800380a:	b29b      	uxth	r3, r3
 800380c:	4a10      	ldr	r2, [pc, #64]	; (8003850 <USB_ActivateEndpoint+0x2d0>)
 800380e:	4313      	orrs	r3, r2
 8003810:	b29a      	uxth	r2, r3
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	801a      	strh	r2, [r3, #0]
 8003816:	e034      	b.n	8003882 <USB_ActivateEndpoint+0x302>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d119      	bne.n	8003854 <USB_ActivateEndpoint+0x2d4>
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <USB_ActivateEndpoint+0x2d0>)
 8003828:	4313      	orrs	r3, r2
 800382a:	b29a      	uxth	r2, r3
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	801a      	strh	r2, [r3, #0]
 8003830:	e027      	b.n	8003882 <USB_ActivateEndpoint+0x302>
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	ffff898f 	.word	0xffff898f
 8003838:	ffff8080 	.word	0xffff8080
 800383c:	ffff8f8f 	.word	0xffff8f8f
 8003840:	ffff80c0 	.word	0xffff80c0
 8003844:	ffff8fbf 	.word	0xffff8fbf
 8003848:	00000404 	.word	0x00000404
 800384c:	00000406 	.word	0x00000406
 8003850:	ffff8000 	.word	0xffff8000
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	085b      	lsrs	r3, r3, #1
 800385a:	66bb      	str	r3, [r7, #104]	; 0x68
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2201      	movs	r2, #1
 8003862:	4013      	ands	r3, r2
 8003864:	d002      	beq.n	800386c <USB_ActivateEndpoint+0x2ec>
 8003866:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003868:	3301      	adds	r3, #1
 800386a:	66bb      	str	r3, [r7, #104]	; 0x68
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29a      	uxth	r2, r3
 8003872:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003874:	b29b      	uxth	r3, r3
 8003876:	029b      	lsls	r3, r3, #10
 8003878:	b29b      	uxth	r3, r3
 800387a:	4313      	orrs	r3, r2
 800387c:	b29a      	uxth	r2, r3
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	18d2      	adds	r2, r2, r3
 800388c:	2122      	movs	r1, #34	; 0x22
 800388e:	187b      	adds	r3, r7, r1
 8003890:	8812      	ldrh	r2, [r2, #0]
 8003892:	801a      	strh	r2, [r3, #0]
 8003894:	187b      	adds	r3, r7, r1
 8003896:	881a      	ldrh	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	01db      	lsls	r3, r3, #7
 800389c:	4013      	ands	r3, r2
 800389e:	d016      	beq.n	80038ce <USB_ActivateEndpoint+0x34e>
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	18d3      	adds	r3, r2, r3
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	2020      	movs	r0, #32
 80038b0:	183b      	adds	r3, r7, r0
 80038b2:	49dd      	ldr	r1, [pc, #884]	; (8003c28 <USB_ActivateEndpoint+0x6a8>)
 80038b4:	400a      	ands	r2, r1
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	18d3      	adds	r3, r2, r3
 80038c2:	183a      	adds	r2, r7, r0
 80038c4:	8812      	ldrh	r2, [r2, #0]
 80038c6:	49d9      	ldr	r1, [pc, #868]	; (8003c2c <USB_ActivateEndpoint+0x6ac>)
 80038c8:	430a      	orrs	r2, r1
 80038ca:	b292      	uxth	r2, r2
 80038cc:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d125      	bne.n	8003922 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	18d3      	adds	r3, r2, r3
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	201c      	movs	r0, #28
 80038e6:	183b      	adds	r3, r7, r0
 80038e8:	49d1      	ldr	r1, [pc, #836]	; (8003c30 <USB_ActivateEndpoint+0x6b0>)
 80038ea:	400a      	ands	r2, r1
 80038ec:	801a      	strh	r2, [r3, #0]
 80038ee:	183b      	adds	r3, r7, r0
 80038f0:	183a      	adds	r2, r7, r0
 80038f2:	8812      	ldrh	r2, [r2, #0]
 80038f4:	2180      	movs	r1, #128	; 0x80
 80038f6:	0149      	lsls	r1, r1, #5
 80038f8:	404a      	eors	r2, r1
 80038fa:	801a      	strh	r2, [r3, #0]
 80038fc:	183b      	adds	r3, r7, r0
 80038fe:	183a      	adds	r2, r7, r0
 8003900:	8812      	ldrh	r2, [r2, #0]
 8003902:	2180      	movs	r1, #128	; 0x80
 8003904:	0189      	lsls	r1, r1, #6
 8003906:	404a      	eors	r2, r1
 8003908:	801a      	strh	r2, [r3, #0]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	18d3      	adds	r3, r2, r3
 8003914:	183a      	adds	r2, r7, r0
 8003916:	8812      	ldrh	r2, [r2, #0]
 8003918:	49c6      	ldr	r1, [pc, #792]	; (8003c34 <USB_ActivateEndpoint+0x6b4>)
 800391a:	430a      	orrs	r2, r1
 800391c:	b292      	uxth	r2, r2
 800391e:	801a      	strh	r2, [r3, #0]
 8003920:	e1c2      	b.n	8003ca8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	18d3      	adds	r3, r2, r3
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	b29a      	uxth	r2, r3
 8003930:	201e      	movs	r0, #30
 8003932:	183b      	adds	r3, r7, r0
 8003934:	49be      	ldr	r1, [pc, #760]	; (8003c30 <USB_ActivateEndpoint+0x6b0>)
 8003936:	400a      	ands	r2, r1
 8003938:	801a      	strh	r2, [r3, #0]
 800393a:	183b      	adds	r3, r7, r0
 800393c:	183a      	adds	r2, r7, r0
 800393e:	8812      	ldrh	r2, [r2, #0]
 8003940:	2180      	movs	r1, #128	; 0x80
 8003942:	0189      	lsls	r1, r1, #6
 8003944:	404a      	eors	r2, r1
 8003946:	801a      	strh	r2, [r3, #0]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	18d3      	adds	r3, r2, r3
 8003952:	183a      	adds	r2, r7, r0
 8003954:	8812      	ldrh	r2, [r2, #0]
 8003956:	49b7      	ldr	r1, [pc, #732]	; (8003c34 <USB_ActivateEndpoint+0x6b4>)
 8003958:	430a      	orrs	r2, r1
 800395a:	b292      	uxth	r2, r2
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	e1a3      	b.n	8003ca8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	78db      	ldrb	r3, [r3, #3]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d117      	bne.n	8003998 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	18d3      	adds	r3, r2, r3
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	b29a      	uxth	r2, r3
 8003976:	2062      	movs	r0, #98	; 0x62
 8003978:	183b      	adds	r3, r7, r0
 800397a:	49ab      	ldr	r1, [pc, #684]	; (8003c28 <USB_ActivateEndpoint+0x6a8>)
 800397c:	400a      	ands	r2, r1
 800397e:	801a      	strh	r2, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	18d3      	adds	r3, r2, r3
 800398a:	183a      	adds	r2, r7, r0
 800398c:	8812      	ldrh	r2, [r2, #0]
 800398e:	49aa      	ldr	r1, [pc, #680]	; (8003c38 <USB_ActivateEndpoint+0x6b8>)
 8003990:	430a      	orrs	r2, r1
 8003992:	b292      	uxth	r2, r2
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	e016      	b.n	80039c6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	18d3      	adds	r3, r2, r3
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	2064      	movs	r0, #100	; 0x64
 80039a8:	183b      	adds	r3, r7, r0
 80039aa:	49a4      	ldr	r1, [pc, #656]	; (8003c3c <USB_ActivateEndpoint+0x6bc>)
 80039ac:	400a      	ands	r2, r1
 80039ae:	801a      	strh	r2, [r3, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	18d3      	adds	r3, r2, r3
 80039ba:	183a      	adds	r2, r7, r0
 80039bc:	8812      	ldrh	r2, [r2, #0]
 80039be:	499d      	ldr	r1, [pc, #628]	; (8003c34 <USB_ActivateEndpoint+0x6b4>)
 80039c0:	430a      	orrs	r2, r1
 80039c2:	b292      	uxth	r2, r2
 80039c4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2250      	movs	r2, #80	; 0x50
 80039ce:	5a9b      	ldrh	r3, [r3, r2]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	001a      	movs	r2, r3
 80039d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	00da      	lsls	r2, r3, #3
 80039e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e2:	18d3      	adds	r3, r2, r3
 80039e4:	2280      	movs	r2, #128	; 0x80
 80039e6:	00d2      	lsls	r2, r2, #3
 80039e8:	4694      	mov	ip, r2
 80039ea:	4463      	add	r3, ip
 80039ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	891b      	ldrh	r3, [r3, #8]
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	18db      	adds	r3, r3, r3
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039fc:	801a      	strh	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	657b      	str	r3, [r7, #84]	; 0x54
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2250      	movs	r2, #80	; 0x50
 8003a06:	5a9b      	ldrh	r3, [r3, r2]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	001a      	movs	r2, r3
 8003a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	657b      	str	r3, [r7, #84]	; 0x54
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	00da      	lsls	r2, r3, #3
 8003a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a1a:	18d3      	adds	r3, r2, r3
 8003a1c:	4a88      	ldr	r2, [pc, #544]	; (8003c40 <USB_ActivateEndpoint+0x6c0>)
 8003a1e:	4694      	mov	ip, r2
 8003a20:	4463      	add	r3, ip
 8003a22:	653b      	str	r3, [r7, #80]	; 0x50
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	895b      	ldrh	r3, [r3, #10]
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	18db      	adds	r3, r3, r3
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a32:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	785b      	ldrb	r3, [r3, #1]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d000      	beq.n	8003a3e <USB_ActivateEndpoint+0x4be>
 8003a3c:	e087      	b.n	8003b4e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	18d2      	adds	r2, r2, r3
 8003a48:	2140      	movs	r1, #64	; 0x40
 8003a4a:	187b      	adds	r3, r7, r1
 8003a4c:	8812      	ldrh	r2, [r2, #0]
 8003a4e:	801a      	strh	r2, [r3, #0]
 8003a50:	187b      	adds	r3, r7, r1
 8003a52:	881a      	ldrh	r2, [r3, #0]
 8003a54:	2380      	movs	r3, #128	; 0x80
 8003a56:	01db      	lsls	r3, r3, #7
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d016      	beq.n	8003a8a <USB_ActivateEndpoint+0x50a>
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	18d3      	adds	r3, r2, r3
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	203e      	movs	r0, #62	; 0x3e
 8003a6c:	183b      	adds	r3, r7, r0
 8003a6e:	496e      	ldr	r1, [pc, #440]	; (8003c28 <USB_ActivateEndpoint+0x6a8>)
 8003a70:	400a      	ands	r2, r1
 8003a72:	801a      	strh	r2, [r3, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	18d3      	adds	r3, r2, r3
 8003a7e:	183a      	adds	r2, r7, r0
 8003a80:	8812      	ldrh	r2, [r2, #0]
 8003a82:	496a      	ldr	r1, [pc, #424]	; (8003c2c <USB_ActivateEndpoint+0x6ac>)
 8003a84:	430a      	orrs	r2, r1
 8003a86:	b292      	uxth	r2, r2
 8003a88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	18d2      	adds	r2, r2, r3
 8003a94:	213c      	movs	r1, #60	; 0x3c
 8003a96:	187b      	adds	r3, r7, r1
 8003a98:	8812      	ldrh	r2, [r2, #0]
 8003a9a:	801a      	strh	r2, [r3, #0]
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	2240      	movs	r2, #64	; 0x40
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d016      	beq.n	8003ad4 <USB_ActivateEndpoint+0x554>
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	18d3      	adds	r3, r2, r3
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	203a      	movs	r0, #58	; 0x3a
 8003ab6:	183b      	adds	r3, r7, r0
 8003ab8:	495b      	ldr	r1, [pc, #364]	; (8003c28 <USB_ActivateEndpoint+0x6a8>)
 8003aba:	400a      	ands	r2, r1
 8003abc:	801a      	strh	r2, [r3, #0]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	18d3      	adds	r3, r2, r3
 8003ac8:	183a      	adds	r2, r7, r0
 8003aca:	8812      	ldrh	r2, [r2, #0]
 8003acc:	495d      	ldr	r1, [pc, #372]	; (8003c44 <USB_ActivateEndpoint+0x6c4>)
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	b292      	uxth	r2, r2
 8003ad2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	18d3      	adds	r3, r2, r3
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	2038      	movs	r0, #56	; 0x38
 8003ae4:	183b      	adds	r3, r7, r0
 8003ae6:	4952      	ldr	r1, [pc, #328]	; (8003c30 <USB_ActivateEndpoint+0x6b0>)
 8003ae8:	400a      	ands	r2, r1
 8003aea:	801a      	strh	r2, [r3, #0]
 8003aec:	183b      	adds	r3, r7, r0
 8003aee:	183a      	adds	r2, r7, r0
 8003af0:	8812      	ldrh	r2, [r2, #0]
 8003af2:	2180      	movs	r1, #128	; 0x80
 8003af4:	0149      	lsls	r1, r1, #5
 8003af6:	404a      	eors	r2, r1
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	183b      	adds	r3, r7, r0
 8003afc:	183a      	adds	r2, r7, r0
 8003afe:	8812      	ldrh	r2, [r2, #0]
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	0189      	lsls	r1, r1, #6
 8003b04:	404a      	eors	r2, r1
 8003b06:	801a      	strh	r2, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	18d3      	adds	r3, r2, r3
 8003b12:	183a      	adds	r2, r7, r0
 8003b14:	8812      	ldrh	r2, [r2, #0]
 8003b16:	4947      	ldr	r1, [pc, #284]	; (8003c34 <USB_ActivateEndpoint+0x6b4>)
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	b292      	uxth	r2, r2
 8003b1c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	18d3      	adds	r3, r2, r3
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	2036      	movs	r0, #54	; 0x36
 8003b2e:	183b      	adds	r3, r7, r0
 8003b30:	4945      	ldr	r1, [pc, #276]	; (8003c48 <USB_ActivateEndpoint+0x6c8>)
 8003b32:	400a      	ands	r2, r1
 8003b34:	801a      	strh	r2, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	18d3      	adds	r3, r2, r3
 8003b40:	183a      	adds	r2, r7, r0
 8003b42:	8812      	ldrh	r2, [r2, #0]
 8003b44:	493b      	ldr	r1, [pc, #236]	; (8003c34 <USB_ActivateEndpoint+0x6b4>)
 8003b46:	430a      	orrs	r2, r1
 8003b48:	b292      	uxth	r2, r2
 8003b4a:	801a      	strh	r2, [r3, #0]
 8003b4c:	e0ac      	b.n	8003ca8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	18d2      	adds	r2, r2, r3
 8003b58:	214e      	movs	r1, #78	; 0x4e
 8003b5a:	187b      	adds	r3, r7, r1
 8003b5c:	8812      	ldrh	r2, [r2, #0]
 8003b5e:	801a      	strh	r2, [r3, #0]
 8003b60:	187b      	adds	r3, r7, r1
 8003b62:	881a      	ldrh	r2, [r3, #0]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	01db      	lsls	r3, r3, #7
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d016      	beq.n	8003b9a <USB_ActivateEndpoint+0x61a>
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	18d3      	adds	r3, r2, r3
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	204c      	movs	r0, #76	; 0x4c
 8003b7c:	183b      	adds	r3, r7, r0
 8003b7e:	492a      	ldr	r1, [pc, #168]	; (8003c28 <USB_ActivateEndpoint+0x6a8>)
 8003b80:	400a      	ands	r2, r1
 8003b82:	801a      	strh	r2, [r3, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	18d3      	adds	r3, r2, r3
 8003b8e:	183a      	adds	r2, r7, r0
 8003b90:	8812      	ldrh	r2, [r2, #0]
 8003b92:	4926      	ldr	r1, [pc, #152]	; (8003c2c <USB_ActivateEndpoint+0x6ac>)
 8003b94:	430a      	orrs	r2, r1
 8003b96:	b292      	uxth	r2, r2
 8003b98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	18d2      	adds	r2, r2, r3
 8003ba4:	214a      	movs	r1, #74	; 0x4a
 8003ba6:	187b      	adds	r3, r7, r1
 8003ba8:	8812      	ldrh	r2, [r2, #0]
 8003baa:	801a      	strh	r2, [r3, #0]
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d016      	beq.n	8003be4 <USB_ActivateEndpoint+0x664>
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	18d3      	adds	r3, r2, r3
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	2048      	movs	r0, #72	; 0x48
 8003bc6:	183b      	adds	r3, r7, r0
 8003bc8:	4917      	ldr	r1, [pc, #92]	; (8003c28 <USB_ActivateEndpoint+0x6a8>)
 8003bca:	400a      	ands	r2, r1
 8003bcc:	801a      	strh	r2, [r3, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	18d3      	adds	r3, r2, r3
 8003bd8:	183a      	adds	r2, r7, r0
 8003bda:	8812      	ldrh	r2, [r2, #0]
 8003bdc:	4919      	ldr	r1, [pc, #100]	; (8003c44 <USB_ActivateEndpoint+0x6c4>)
 8003bde:	430a      	orrs	r2, r1
 8003be0:	b292      	uxth	r2, r2
 8003be2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	78db      	ldrb	r3, [r3, #3]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d02f      	beq.n	8003c4c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	18d3      	adds	r3, r2, r3
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	2044      	movs	r0, #68	; 0x44
 8003bfc:	183b      	adds	r3, r7, r0
 8003bfe:	4912      	ldr	r1, [pc, #72]	; (8003c48 <USB_ActivateEndpoint+0x6c8>)
 8003c00:	400a      	ands	r2, r1
 8003c02:	801a      	strh	r2, [r3, #0]
 8003c04:	183b      	adds	r3, r7, r0
 8003c06:	183a      	adds	r2, r7, r0
 8003c08:	8812      	ldrh	r2, [r2, #0]
 8003c0a:	2120      	movs	r1, #32
 8003c0c:	404a      	eors	r2, r1
 8003c0e:	801a      	strh	r2, [r3, #0]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	18d3      	adds	r3, r2, r3
 8003c1a:	183a      	adds	r2, r7, r0
 8003c1c:	8812      	ldrh	r2, [r2, #0]
 8003c1e:	4905      	ldr	r1, [pc, #20]	; (8003c34 <USB_ActivateEndpoint+0x6b4>)
 8003c20:	430a      	orrs	r2, r1
 8003c22:	b292      	uxth	r2, r2
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	e028      	b.n	8003c7a <USB_ActivateEndpoint+0x6fa>
 8003c28:	ffff8f8f 	.word	0xffff8f8f
 8003c2c:	ffffc080 	.word	0xffffc080
 8003c30:	ffffbf8f 	.word	0xffffbf8f
 8003c34:	ffff8080 	.word	0xffff8080
 8003c38:	ffff8180 	.word	0xffff8180
 8003c3c:	ffff8e8f 	.word	0xffff8e8f
 8003c40:	00000404 	.word	0x00000404
 8003c44:	ffff80c0 	.word	0xffff80c0
 8003c48:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	18d3      	adds	r3, r2, r3
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	2046      	movs	r0, #70	; 0x46
 8003c5c:	183b      	adds	r3, r7, r0
 8003c5e:	4916      	ldr	r1, [pc, #88]	; (8003cb8 <USB_ActivateEndpoint+0x738>)
 8003c60:	400a      	ands	r2, r1
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	18d3      	adds	r3, r2, r3
 8003c6e:	183a      	adds	r2, r7, r0
 8003c70:	8812      	ldrh	r2, [r2, #0]
 8003c72:	4912      	ldr	r1, [pc, #72]	; (8003cbc <USB_ActivateEndpoint+0x73c>)
 8003c74:	430a      	orrs	r2, r1
 8003c76:	b292      	uxth	r2, r2
 8003c78:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	18d3      	adds	r3, r2, r3
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	2042      	movs	r0, #66	; 0x42
 8003c8a:	183b      	adds	r3, r7, r0
 8003c8c:	490c      	ldr	r1, [pc, #48]	; (8003cc0 <USB_ActivateEndpoint+0x740>)
 8003c8e:	400a      	ands	r2, r1
 8003c90:	801a      	strh	r2, [r3, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	18d3      	adds	r3, r2, r3
 8003c9c:	183a      	adds	r2, r7, r0
 8003c9e:	8812      	ldrh	r2, [r2, #0]
 8003ca0:	4906      	ldr	r1, [pc, #24]	; (8003cbc <USB_ActivateEndpoint+0x73c>)
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	b292      	uxth	r2, r2
 8003ca6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003ca8:	236f      	movs	r3, #111	; 0x6f
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	781b      	ldrb	r3, [r3, #0]
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b01c      	add	sp, #112	; 0x70
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	ffff8fbf 	.word	0xffff8fbf
 8003cbc:	ffff8080 	.word	0xffff8080
 8003cc0:	ffffbf8f 	.word	0xffffbf8f

08003cc4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08c      	sub	sp, #48	; 0x30
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	7b1b      	ldrb	r3, [r3, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d000      	beq.n	8003cd8 <USB_DeactivateEndpoint+0x14>
 8003cd6:	e07e      	b.n	8003dd6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	785b      	ldrb	r3, [r3, #1]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d03c      	beq.n	8003d5a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	18d2      	adds	r2, r2, r3
 8003cea:	210c      	movs	r1, #12
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	8812      	ldrh	r2, [r2, #0]
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	2240      	movs	r2, #64	; 0x40
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d016      	beq.n	8003d2a <USB_DeactivateEndpoint+0x66>
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	18d3      	adds	r3, r2, r3
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	200a      	movs	r0, #10
 8003d0c:	183b      	adds	r3, r7, r0
 8003d0e:	49c7      	ldr	r1, [pc, #796]	; (800402c <USB_DeactivateEndpoint+0x368>)
 8003d10:	400a      	ands	r2, r1
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	18d3      	adds	r3, r2, r3
 8003d1e:	183a      	adds	r2, r7, r0
 8003d20:	8812      	ldrh	r2, [r2, #0]
 8003d22:	49c3      	ldr	r1, [pc, #780]	; (8004030 <USB_DeactivateEndpoint+0x36c>)
 8003d24:	430a      	orrs	r2, r1
 8003d26:	b292      	uxth	r2, r2
 8003d28:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	18d3      	adds	r3, r2, r3
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	2008      	movs	r0, #8
 8003d3a:	183b      	adds	r3, r7, r0
 8003d3c:	49bd      	ldr	r1, [pc, #756]	; (8004034 <USB_DeactivateEndpoint+0x370>)
 8003d3e:	400a      	ands	r2, r1
 8003d40:	801a      	strh	r2, [r3, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	18d3      	adds	r3, r2, r3
 8003d4c:	183a      	adds	r2, r7, r0
 8003d4e:	8812      	ldrh	r2, [r2, #0]
 8003d50:	49b9      	ldr	r1, [pc, #740]	; (8004038 <USB_DeactivateEndpoint+0x374>)
 8003d52:	430a      	orrs	r2, r1
 8003d54:	b292      	uxth	r2, r2
 8003d56:	801a      	strh	r2, [r3, #0]
 8003d58:	e163      	b.n	8004022 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	18d2      	adds	r2, r2, r3
 8003d64:	2112      	movs	r1, #18
 8003d66:	187b      	adds	r3, r7, r1
 8003d68:	8812      	ldrh	r2, [r2, #0]
 8003d6a:	801a      	strh	r2, [r3, #0]
 8003d6c:	187b      	adds	r3, r7, r1
 8003d6e:	881a      	ldrh	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	01db      	lsls	r3, r3, #7
 8003d74:	4013      	ands	r3, r2
 8003d76:	d016      	beq.n	8003da6 <USB_DeactivateEndpoint+0xe2>
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	18d3      	adds	r3, r2, r3
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	2010      	movs	r0, #16
 8003d88:	183b      	adds	r3, r7, r0
 8003d8a:	49a8      	ldr	r1, [pc, #672]	; (800402c <USB_DeactivateEndpoint+0x368>)
 8003d8c:	400a      	ands	r2, r1
 8003d8e:	801a      	strh	r2, [r3, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	18d3      	adds	r3, r2, r3
 8003d9a:	183a      	adds	r2, r7, r0
 8003d9c:	8812      	ldrh	r2, [r2, #0]
 8003d9e:	49a7      	ldr	r1, [pc, #668]	; (800403c <USB_DeactivateEndpoint+0x378>)
 8003da0:	430a      	orrs	r2, r1
 8003da2:	b292      	uxth	r2, r2
 8003da4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	18d3      	adds	r3, r2, r3
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	200e      	movs	r0, #14
 8003db6:	183b      	adds	r3, r7, r0
 8003db8:	49a1      	ldr	r1, [pc, #644]	; (8004040 <USB_DeactivateEndpoint+0x37c>)
 8003dba:	400a      	ands	r2, r1
 8003dbc:	801a      	strh	r2, [r3, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	18d3      	adds	r3, r2, r3
 8003dc8:	183a      	adds	r2, r7, r0
 8003dca:	8812      	ldrh	r2, [r2, #0]
 8003dcc:	499a      	ldr	r1, [pc, #616]	; (8004038 <USB_DeactivateEndpoint+0x374>)
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	b292      	uxth	r2, r2
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	e125      	b.n	8004022 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d000      	beq.n	8003de0 <USB_DeactivateEndpoint+0x11c>
 8003dde:	e090      	b.n	8003f02 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	18d2      	adds	r2, r2, r3
 8003dea:	2120      	movs	r1, #32
 8003dec:	187b      	adds	r3, r7, r1
 8003dee:	8812      	ldrh	r2, [r2, #0]
 8003df0:	801a      	strh	r2, [r3, #0]
 8003df2:	187b      	adds	r3, r7, r1
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	01db      	lsls	r3, r3, #7
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d016      	beq.n	8003e2c <USB_DeactivateEndpoint+0x168>
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	18d3      	adds	r3, r2, r3
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	201e      	movs	r0, #30
 8003e0e:	183b      	adds	r3, r7, r0
 8003e10:	4986      	ldr	r1, [pc, #536]	; (800402c <USB_DeactivateEndpoint+0x368>)
 8003e12:	400a      	ands	r2, r1
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	18d3      	adds	r3, r2, r3
 8003e20:	183a      	adds	r2, r7, r0
 8003e22:	8812      	ldrh	r2, [r2, #0]
 8003e24:	4985      	ldr	r1, [pc, #532]	; (800403c <USB_DeactivateEndpoint+0x378>)
 8003e26:	430a      	orrs	r2, r1
 8003e28:	b292      	uxth	r2, r2
 8003e2a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	18d2      	adds	r2, r2, r3
 8003e36:	211c      	movs	r1, #28
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	8812      	ldrh	r2, [r2, #0]
 8003e3c:	801a      	strh	r2, [r3, #0]
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	2240      	movs	r2, #64	; 0x40
 8003e44:	4013      	ands	r3, r2
 8003e46:	d016      	beq.n	8003e76 <USB_DeactivateEndpoint+0x1b2>
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	201a      	movs	r0, #26
 8003e58:	183b      	adds	r3, r7, r0
 8003e5a:	4974      	ldr	r1, [pc, #464]	; (800402c <USB_DeactivateEndpoint+0x368>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	801a      	strh	r2, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	18d3      	adds	r3, r2, r3
 8003e6a:	183a      	adds	r2, r7, r0
 8003e6c:	8812      	ldrh	r2, [r2, #0]
 8003e6e:	4970      	ldr	r1, [pc, #448]	; (8004030 <USB_DeactivateEndpoint+0x36c>)
 8003e70:	430a      	orrs	r2, r1
 8003e72:	b292      	uxth	r2, r2
 8003e74:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	18d3      	adds	r3, r2, r3
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	2018      	movs	r0, #24
 8003e86:	183b      	adds	r3, r7, r0
 8003e88:	4968      	ldr	r1, [pc, #416]	; (800402c <USB_DeactivateEndpoint+0x368>)
 8003e8a:	400a      	ands	r2, r1
 8003e8c:	801a      	strh	r2, [r3, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	18d3      	adds	r3, r2, r3
 8003e98:	183a      	adds	r2, r7, r0
 8003e9a:	8812      	ldrh	r2, [r2, #0]
 8003e9c:	4964      	ldr	r1, [pc, #400]	; (8004030 <USB_DeactivateEndpoint+0x36c>)
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	b292      	uxth	r2, r2
 8003ea2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	18d3      	adds	r3, r2, r3
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	2016      	movs	r0, #22
 8003eb4:	183b      	adds	r3, r7, r0
 8003eb6:	4962      	ldr	r1, [pc, #392]	; (8004040 <USB_DeactivateEndpoint+0x37c>)
 8003eb8:	400a      	ands	r2, r1
 8003eba:	801a      	strh	r2, [r3, #0]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	18d3      	adds	r3, r2, r3
 8003ec6:	183a      	adds	r2, r7, r0
 8003ec8:	8812      	ldrh	r2, [r2, #0]
 8003eca:	495b      	ldr	r1, [pc, #364]	; (8004038 <USB_DeactivateEndpoint+0x374>)
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	b292      	uxth	r2, r2
 8003ed0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	18d3      	adds	r3, r2, r3
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	2014      	movs	r0, #20
 8003ee2:	183b      	adds	r3, r7, r0
 8003ee4:	4953      	ldr	r1, [pc, #332]	; (8004034 <USB_DeactivateEndpoint+0x370>)
 8003ee6:	400a      	ands	r2, r1
 8003ee8:	801a      	strh	r2, [r3, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	18d3      	adds	r3, r2, r3
 8003ef4:	183a      	adds	r2, r7, r0
 8003ef6:	8812      	ldrh	r2, [r2, #0]
 8003ef8:	494f      	ldr	r1, [pc, #316]	; (8004038 <USB_DeactivateEndpoint+0x374>)
 8003efa:	430a      	orrs	r2, r1
 8003efc:	b292      	uxth	r2, r2
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	e08f      	b.n	8004022 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	18d2      	adds	r2, r2, r3
 8003f0c:	212e      	movs	r1, #46	; 0x2e
 8003f0e:	187b      	adds	r3, r7, r1
 8003f10:	8812      	ldrh	r2, [r2, #0]
 8003f12:	801a      	strh	r2, [r3, #0]
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	881a      	ldrh	r2, [r3, #0]
 8003f18:	2380      	movs	r3, #128	; 0x80
 8003f1a:	01db      	lsls	r3, r3, #7
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d016      	beq.n	8003f4e <USB_DeactivateEndpoint+0x28a>
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	18d3      	adds	r3, r2, r3
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	202c      	movs	r0, #44	; 0x2c
 8003f30:	183b      	adds	r3, r7, r0
 8003f32:	493e      	ldr	r1, [pc, #248]	; (800402c <USB_DeactivateEndpoint+0x368>)
 8003f34:	400a      	ands	r2, r1
 8003f36:	801a      	strh	r2, [r3, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	18d3      	adds	r3, r2, r3
 8003f42:	183a      	adds	r2, r7, r0
 8003f44:	8812      	ldrh	r2, [r2, #0]
 8003f46:	493d      	ldr	r1, [pc, #244]	; (800403c <USB_DeactivateEndpoint+0x378>)
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	18d2      	adds	r2, r2, r3
 8003f58:	212a      	movs	r1, #42	; 0x2a
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	8812      	ldrh	r2, [r2, #0]
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	187b      	adds	r3, r7, r1
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	2240      	movs	r2, #64	; 0x40
 8003f66:	4013      	ands	r3, r2
 8003f68:	d016      	beq.n	8003f98 <USB_DeactivateEndpoint+0x2d4>
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	18d3      	adds	r3, r2, r3
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	2028      	movs	r0, #40	; 0x28
 8003f7a:	183b      	adds	r3, r7, r0
 8003f7c:	492b      	ldr	r1, [pc, #172]	; (800402c <USB_DeactivateEndpoint+0x368>)
 8003f7e:	400a      	ands	r2, r1
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	18d3      	adds	r3, r2, r3
 8003f8c:	183a      	adds	r2, r7, r0
 8003f8e:	8812      	ldrh	r2, [r2, #0]
 8003f90:	4927      	ldr	r1, [pc, #156]	; (8004030 <USB_DeactivateEndpoint+0x36c>)
 8003f92:	430a      	orrs	r2, r1
 8003f94:	b292      	uxth	r2, r2
 8003f96:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	18d3      	adds	r3, r2, r3
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	2026      	movs	r0, #38	; 0x26
 8003fa8:	183b      	adds	r3, r7, r0
 8003faa:	4920      	ldr	r1, [pc, #128]	; (800402c <USB_DeactivateEndpoint+0x368>)
 8003fac:	400a      	ands	r2, r1
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	18d3      	adds	r3, r2, r3
 8003fba:	183a      	adds	r2, r7, r0
 8003fbc:	8812      	ldrh	r2, [r2, #0]
 8003fbe:	491f      	ldr	r1, [pc, #124]	; (800403c <USB_DeactivateEndpoint+0x378>)
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	b292      	uxth	r2, r2
 8003fc4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	18d3      	adds	r3, r2, r3
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	2024      	movs	r0, #36	; 0x24
 8003fd6:	183b      	adds	r3, r7, r0
 8003fd8:	4916      	ldr	r1, [pc, #88]	; (8004034 <USB_DeactivateEndpoint+0x370>)
 8003fda:	400a      	ands	r2, r1
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	18d3      	adds	r3, r2, r3
 8003fe8:	183a      	adds	r2, r7, r0
 8003fea:	8812      	ldrh	r2, [r2, #0]
 8003fec:	4912      	ldr	r1, [pc, #72]	; (8004038 <USB_DeactivateEndpoint+0x374>)
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	18d3      	adds	r3, r2, r3
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29a      	uxth	r2, r3
 8004002:	2022      	movs	r0, #34	; 0x22
 8004004:	183b      	adds	r3, r7, r0
 8004006:	490e      	ldr	r1, [pc, #56]	; (8004040 <USB_DeactivateEndpoint+0x37c>)
 8004008:	400a      	ands	r2, r1
 800400a:	801a      	strh	r2, [r3, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	18d3      	adds	r3, r2, r3
 8004016:	183a      	adds	r2, r7, r0
 8004018:	8812      	ldrh	r2, [r2, #0]
 800401a:	4907      	ldr	r1, [pc, #28]	; (8004038 <USB_DeactivateEndpoint+0x374>)
 800401c:	430a      	orrs	r2, r1
 800401e:	b292      	uxth	r2, r2
 8004020:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	b00c      	add	sp, #48	; 0x30
 800402a:	bd80      	pop	{r7, pc}
 800402c:	ffff8f8f 	.word	0xffff8f8f
 8004030:	ffff80c0 	.word	0xffff80c0
 8004034:	ffff8fbf 	.word	0xffff8fbf
 8004038:	ffff8080 	.word	0xffff8080
 800403c:	ffffc080 	.word	0xffffc080
 8004040:	ffffbf8f 	.word	0xffffbf8f

08004044 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b0c3      	sub	sp, #268	; 0x10c
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d001      	beq.n	800405a <USB_EPStartXfer+0x16>
 8004056:	f000 fd2d 	bl	8004ab4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	429a      	cmp	r2, r3
 8004064:	d905      	bls.n	8004072 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	1d7a      	adds	r2, r7, #5
 800406c:	32ff      	adds	r2, #255	; 0xff
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	e004      	b.n	800407c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	1d7a      	adds	r2, r7, #5
 8004078:	32ff      	adds	r2, #255	; 0xff
 800407a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	7b1b      	ldrb	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d125      	bne.n	80040d0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	6959      	ldr	r1, [r3, #20]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	88da      	ldrh	r2, [r3, #6]
 800408c:	1d7b      	adds	r3, r7, #5
 800408e:	33ff      	adds	r3, #255	; 0xff
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f001 fa47 	bl	8005528 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2250      	movs	r2, #80	; 0x50
 80040a2:	5a9b      	ldrh	r3, [r3, r2]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	001a      	movs	r2, r3
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	00da      	lsls	r2, r3, #3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	18d3      	adds	r3, r2, r3
 80040b8:	4ad7      	ldr	r2, [pc, #860]	; (8004418 <USB_EPStartXfer+0x3d4>)
 80040ba:	4694      	mov	ip, r2
 80040bc:	4463      	add	r3, ip
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	1d7b      	adds	r3, r7, #5
 80040c2:	33ff      	adds	r3, #255	; 0xff
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	801a      	strh	r2, [r3, #0]
 80040cc:	f000 fccd 	bl	8004a6a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	78db      	ldrb	r3, [r3, #3]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d000      	beq.n	80040da <USB_EPStartXfer+0x96>
 80040d8:	e362      	b.n	80047a0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6a1a      	ldr	r2, [r3, #32]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d800      	bhi.n	80040e8 <USB_EPStartXfer+0xa4>
 80040e6:	e309      	b.n	80046fc <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	18d3      	adds	r3, r2, r3
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	2056      	movs	r0, #86	; 0x56
 80040f8:	183b      	adds	r3, r7, r0
 80040fa:	49c8      	ldr	r1, [pc, #800]	; (800441c <USB_EPStartXfer+0x3d8>)
 80040fc:	400a      	ands	r2, r1
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	18d3      	adds	r3, r2, r3
 800410a:	183a      	adds	r2, r7, r0
 800410c:	8812      	ldrh	r2, [r2, #0]
 800410e:	49c4      	ldr	r1, [pc, #784]	; (8004420 <USB_EPStartXfer+0x3dc>)
 8004110:	430a      	orrs	r2, r1
 8004112:	b292      	uxth	r2, r2
 8004114:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6a1a      	ldr	r2, [r3, #32]
 800411a:	1d7b      	adds	r3, r7, #5
 800411c:	33ff      	adds	r3, #255	; 0xff
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	1ad2      	subs	r2, r2, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	18d3      	adds	r3, r2, r3
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	001a      	movs	r2, r3
 8004136:	2340      	movs	r3, #64	; 0x40
 8004138:	4013      	ands	r3, r2
 800413a:	d100      	bne.n	800413e <USB_EPStartXfer+0xfa>
 800413c:	e176      	b.n	800442c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	633b      	str	r3, [r7, #48]	; 0x30
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	785b      	ldrb	r3, [r3, #1]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d000      	beq.n	800414c <USB_EPStartXfer+0x108>
 800414a:	e074      	b.n	8004236 <USB_EPStartXfer+0x1f2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2250      	movs	r2, #80	; 0x50
 8004154:	5a9b      	ldrh	r3, [r3, r2]
 8004156:	b29b      	uxth	r3, r3
 8004158:	001a      	movs	r2, r3
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	189b      	adds	r3, r3, r2
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	00da      	lsls	r2, r3, #3
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	18d3      	adds	r3, r2, r3
 800416a:	4aae      	ldr	r2, [pc, #696]	; (8004424 <USB_EPStartXfer+0x3e0>)
 800416c:	4694      	mov	ip, r2
 800416e:	4463      	add	r3, ip
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	059b      	lsls	r3, r3, #22
 800417a:	0d9b      	lsrs	r3, r3, #22
 800417c:	b29a      	uxth	r2, r3
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	801a      	strh	r2, [r3, #0]
 8004182:	1d7b      	adds	r3, r7, #5
 8004184:	33ff      	adds	r3, #255	; 0xff
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b3e      	cmp	r3, #62	; 0x3e
 800418a:	d924      	bls.n	80041d6 <USB_EPStartXfer+0x192>
 800418c:	1d7b      	adds	r3, r7, #5
 800418e:	33ff      	adds	r3, #255	; 0xff
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	1c7a      	adds	r2, r7, #1
 8004196:	32ff      	adds	r2, #255	; 0xff
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	1d7b      	adds	r3, r7, #5
 800419c:	33ff      	adds	r3, #255	; 0xff
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	221f      	movs	r2, #31
 80041a2:	4013      	ands	r3, r2
 80041a4:	d106      	bne.n	80041b4 <USB_EPStartXfer+0x170>
 80041a6:	1c7b      	adds	r3, r7, #1
 80041a8:	33ff      	adds	r3, #255	; 0xff
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	1c7a      	adds	r2, r7, #1
 80041b0:	32ff      	adds	r2, #255	; 0xff
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	1c7b      	adds	r3, r7, #1
 80041bc:	33ff      	adds	r3, #255	; 0xff
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	029b      	lsls	r3, r3, #10
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	4313      	orrs	r3, r2
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	4a97      	ldr	r2, [pc, #604]	; (8004428 <USB_EPStartXfer+0x3e4>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	801a      	strh	r2, [r3, #0]
 80041d4:	e04a      	b.n	800426c <USB_EPStartXfer+0x228>
 80041d6:	1d7b      	adds	r3, r7, #5
 80041d8:	33ff      	adds	r3, #255	; 0xff
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d108      	bne.n	80041f2 <USB_EPStartXfer+0x1ae>
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	4a90      	ldr	r2, [pc, #576]	; (8004428 <USB_EPStartXfer+0x3e4>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	801a      	strh	r2, [r3, #0]
 80041f0:	e03c      	b.n	800426c <USB_EPStartXfer+0x228>
 80041f2:	1d7b      	adds	r3, r7, #5
 80041f4:	33ff      	adds	r3, #255	; 0xff
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	1c7a      	adds	r2, r7, #1
 80041fc:	32ff      	adds	r2, #255	; 0xff
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	1d7b      	adds	r3, r7, #5
 8004202:	33ff      	adds	r3, #255	; 0xff
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2201      	movs	r2, #1
 8004208:	4013      	ands	r3, r2
 800420a:	d006      	beq.n	800421a <USB_EPStartXfer+0x1d6>
 800420c:	1c7b      	adds	r3, r7, #1
 800420e:	33ff      	adds	r3, #255	; 0xff
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	1c7a      	adds	r2, r7, #1
 8004216:	32ff      	adds	r2, #255	; 0xff
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29a      	uxth	r2, r3
 8004220:	1c7b      	adds	r3, r7, #1
 8004222:	33ff      	adds	r3, #255	; 0xff
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	029b      	lsls	r3, r3, #10
 800422a:	b29b      	uxth	r3, r3
 800422c:	4313      	orrs	r3, r2
 800422e:	b29a      	uxth	r2, r3
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	801a      	strh	r2, [r3, #0]
 8004234:	e01a      	b.n	800426c <USB_EPStartXfer+0x228>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d116      	bne.n	800426c <USB_EPStartXfer+0x228>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2250      	movs	r2, #80	; 0x50
 8004242:	5a9b      	ldrh	r3, [r3, r2]
 8004244:	b29b      	uxth	r3, r3
 8004246:	001a      	movs	r2, r3
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	189b      	adds	r3, r3, r2
 800424c:	633b      	str	r3, [r7, #48]	; 0x30
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	00da      	lsls	r2, r3, #3
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	18d3      	adds	r3, r2, r3
 8004258:	4a72      	ldr	r2, [pc, #456]	; (8004424 <USB_EPStartXfer+0x3e0>)
 800425a:	4694      	mov	ip, r2
 800425c:	4463      	add	r3, ip
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004260:	1d7b      	adds	r3, r7, #5
 8004262:	33ff      	adds	r3, #255	; 0xff
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	b29a      	uxth	r2, r3
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800426c:	2076      	movs	r0, #118	; 0x76
 800426e:	183b      	adds	r3, r7, r0
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	8952      	ldrh	r2, [r2, #10]
 8004274:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6959      	ldr	r1, [r3, #20]
 800427a:	1d7b      	adds	r3, r7, #5
 800427c:	33ff      	adds	r3, #255	; 0xff
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	b29c      	uxth	r4, r3
 8004282:	183b      	adds	r3, r7, r0
 8004284:	881a      	ldrh	r2, [r3, #0]
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	0023      	movs	r3, r4
 800428a:	f001 f94d 	bl	8005528 <USB_WritePMA>
            ep->xfer_buff += len;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	1d7b      	adds	r3, r7, #5
 8004294:	33ff      	adds	r3, #255	; 0xff
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	18d2      	adds	r2, r2, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d908      	bls.n	80042bc <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6a1a      	ldr	r2, [r3, #32]
 80042ae:	1d7b      	adds	r3, r7, #5
 80042b0:	33ff      	adds	r3, #255	; 0xff
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	1ad2      	subs	r2, r2, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	621a      	str	r2, [r3, #32]
 80042ba:	e007      	b.n	80042cc <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	1d7a      	adds	r2, r7, #5
 80042c2:	32ff      	adds	r2, #255	; 0xff
 80042c4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2200      	movs	r2, #0
 80042ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	785b      	ldrb	r3, [r3, #1]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d000      	beq.n	80042d6 <USB_EPStartXfer+0x292>
 80042d4:	e070      	b.n	80043b8 <USB_EPStartXfer+0x374>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2250      	movs	r2, #80	; 0x50
 80042de:	5a9b      	ldrh	r3, [r3, r2]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	001a      	movs	r2, r3
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	189b      	adds	r3, r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	00da      	lsls	r2, r3, #3
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	18d3      	adds	r3, r2, r3
 80042f4:	4a48      	ldr	r2, [pc, #288]	; (8004418 <USB_EPStartXfer+0x3d4>)
 80042f6:	4694      	mov	ip, r2
 80042f8:	4463      	add	r3, ip
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	059b      	lsls	r3, r3, #22
 8004304:	0d9b      	lsrs	r3, r3, #22
 8004306:	b29a      	uxth	r2, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	1d7b      	adds	r3, r7, #5
 800430e:	33ff      	adds	r3, #255	; 0xff
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b3e      	cmp	r3, #62	; 0x3e
 8004314:	d922      	bls.n	800435c <USB_EPStartXfer+0x318>
 8004316:	1d7b      	adds	r3, r7, #5
 8004318:	33ff      	adds	r3, #255	; 0xff
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	21fc      	movs	r1, #252	; 0xfc
 8004320:	187a      	adds	r2, r7, r1
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	1d7b      	adds	r3, r7, #5
 8004326:	33ff      	adds	r3, #255	; 0xff
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	221f      	movs	r2, #31
 800432c:	4013      	ands	r3, r2
 800432e:	d104      	bne.n	800433a <USB_EPStartXfer+0x2f6>
 8004330:	187b      	adds	r3, r7, r1
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3b01      	subs	r3, #1
 8004336:	187a      	adds	r2, r7, r1
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29a      	uxth	r2, r3
 8004340:	23fc      	movs	r3, #252	; 0xfc
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	029b      	lsls	r3, r3, #10
 800434a:	b29b      	uxth	r3, r3
 800434c:	4313      	orrs	r3, r2
 800434e:	b29b      	uxth	r3, r3
 8004350:	4a35      	ldr	r2, [pc, #212]	; (8004428 <USB_EPStartXfer+0x3e4>)
 8004352:	4313      	orrs	r3, r2
 8004354:	b29a      	uxth	r2, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	e04a      	b.n	80043f2 <USB_EPStartXfer+0x3ae>
 800435c:	1d7b      	adds	r3, r7, #5
 800435e:	33ff      	adds	r3, #255	; 0xff
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d108      	bne.n	8004378 <USB_EPStartXfer+0x334>
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	4a2e      	ldr	r2, [pc, #184]	; (8004428 <USB_EPStartXfer+0x3e4>)
 800436e:	4313      	orrs	r3, r2
 8004370:	b29a      	uxth	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	e03c      	b.n	80043f2 <USB_EPStartXfer+0x3ae>
 8004378:	1d7b      	adds	r3, r7, #5
 800437a:	33ff      	adds	r3, #255	; 0xff
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	21fc      	movs	r1, #252	; 0xfc
 8004382:	187a      	adds	r2, r7, r1
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	1d7b      	adds	r3, r7, #5
 8004388:	33ff      	adds	r3, #255	; 0xff
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	4013      	ands	r3, r2
 8004390:	d004      	beq.n	800439c <USB_EPStartXfer+0x358>
 8004392:	187b      	adds	r3, r7, r1
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3301      	adds	r3, #1
 8004398:	187a      	adds	r2, r7, r1
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	23fc      	movs	r3, #252	; 0xfc
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	029b      	lsls	r3, r3, #10
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	4313      	orrs	r3, r2
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	801a      	strh	r2, [r3, #0]
 80043b6:	e01c      	b.n	80043f2 <USB_EPStartXfer+0x3ae>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d118      	bne.n	80043f2 <USB_EPStartXfer+0x3ae>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	623b      	str	r3, [r7, #32]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2250      	movs	r2, #80	; 0x50
 80043c8:	5a9b      	ldrh	r3, [r3, r2]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	001a      	movs	r2, r3
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	189b      	adds	r3, r3, r2
 80043d2:	623b      	str	r3, [r7, #32]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	00da      	lsls	r2, r3, #3
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	18d3      	adds	r3, r2, r3
 80043de:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <USB_EPStartXfer+0x3d4>)
 80043e0:	4694      	mov	ip, r2
 80043e2:	4463      	add	r3, ip
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	1d7b      	adds	r3, r7, #5
 80043e8:	33ff      	adds	r3, #255	; 0xff
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80043f2:	2076      	movs	r0, #118	; 0x76
 80043f4:	183b      	adds	r3, r7, r0
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	8912      	ldrh	r2, [r2, #8]
 80043fa:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	6959      	ldr	r1, [r3, #20]
 8004400:	1d7b      	adds	r3, r7, #5
 8004402:	33ff      	adds	r3, #255	; 0xff
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	b29c      	uxth	r4, r3
 8004408:	183b      	adds	r3, r7, r0
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	0023      	movs	r3, r4
 8004410:	f001 f88a 	bl	8005528 <USB_WritePMA>
 8004414:	e329      	b.n	8004a6a <USB_EPStartXfer+0xa26>
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	00000402 	.word	0x00000402
 800441c:	ffff8f8f 	.word	0xffff8f8f
 8004420:	ffff8180 	.word	0xffff8180
 8004424:	00000406 	.word	0x00000406
 8004428:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d000      	beq.n	8004436 <USB_EPStartXfer+0x3f2>
 8004434:	e070      	b.n	8004518 <USB_EPStartXfer+0x4d4>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	64bb      	str	r3, [r7, #72]	; 0x48
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2250      	movs	r2, #80	; 0x50
 800443e:	5a9b      	ldrh	r3, [r3, r2]
 8004440:	b29b      	uxth	r3, r3
 8004442:	001a      	movs	r2, r3
 8004444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004446:	189b      	adds	r3, r3, r2
 8004448:	64bb      	str	r3, [r7, #72]	; 0x48
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	00da      	lsls	r2, r3, #3
 8004450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004452:	18d3      	adds	r3, r2, r3
 8004454:	4acd      	ldr	r2, [pc, #820]	; (800478c <USB_EPStartXfer+0x748>)
 8004456:	4694      	mov	ip, r2
 8004458:	4463      	add	r3, ip
 800445a:	647b      	str	r3, [r7, #68]	; 0x44
 800445c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	059b      	lsls	r3, r3, #22
 8004464:	0d9b      	lsrs	r3, r3, #22
 8004466:	b29a      	uxth	r2, r3
 8004468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800446a:	801a      	strh	r2, [r3, #0]
 800446c:	1d7b      	adds	r3, r7, #5
 800446e:	33ff      	adds	r3, #255	; 0xff
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b3e      	cmp	r3, #62	; 0x3e
 8004474:	d922      	bls.n	80044bc <USB_EPStartXfer+0x478>
 8004476:	1d7b      	adds	r3, r7, #5
 8004478:	33ff      	adds	r3, #255	; 0xff
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	21f8      	movs	r1, #248	; 0xf8
 8004480:	187a      	adds	r2, r7, r1
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	1d7b      	adds	r3, r7, #5
 8004486:	33ff      	adds	r3, #255	; 0xff
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	221f      	movs	r2, #31
 800448c:	4013      	ands	r3, r2
 800448e:	d104      	bne.n	800449a <USB_EPStartXfer+0x456>
 8004490:	187b      	adds	r3, r7, r1
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3b01      	subs	r3, #1
 8004496:	187a      	adds	r2, r7, r1
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	23f8      	movs	r3, #248	; 0xf8
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	029b      	lsls	r3, r3, #10
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	4313      	orrs	r3, r2
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	4ab7      	ldr	r2, [pc, #732]	; (8004790 <USB_EPStartXfer+0x74c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b8:	801a      	strh	r2, [r3, #0]
 80044ba:	e04a      	b.n	8004552 <USB_EPStartXfer+0x50e>
 80044bc:	1d7b      	adds	r3, r7, #5
 80044be:	33ff      	adds	r3, #255	; 0xff
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d108      	bne.n	80044d8 <USB_EPStartXfer+0x494>
 80044c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	4ab0      	ldr	r2, [pc, #704]	; (8004790 <USB_EPStartXfer+0x74c>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d4:	801a      	strh	r2, [r3, #0]
 80044d6:	e03c      	b.n	8004552 <USB_EPStartXfer+0x50e>
 80044d8:	1d7b      	adds	r3, r7, #5
 80044da:	33ff      	adds	r3, #255	; 0xff
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	085b      	lsrs	r3, r3, #1
 80044e0:	21f8      	movs	r1, #248	; 0xf8
 80044e2:	187a      	adds	r2, r7, r1
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	1d7b      	adds	r3, r7, #5
 80044e8:	33ff      	adds	r3, #255	; 0xff
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2201      	movs	r2, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	d004      	beq.n	80044fc <USB_EPStartXfer+0x4b8>
 80044f2:	187b      	adds	r3, r7, r1
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3301      	adds	r3, #1
 80044f8:	187a      	adds	r2, r7, r1
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29a      	uxth	r2, r3
 8004502:	23f8      	movs	r3, #248	; 0xf8
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	029b      	lsls	r3, r3, #10
 800450c:	b29b      	uxth	r3, r3
 800450e:	4313      	orrs	r3, r2
 8004510:	b29a      	uxth	r2, r3
 8004512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	e01c      	b.n	8004552 <USB_EPStartXfer+0x50e>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d118      	bne.n	8004552 <USB_EPStartXfer+0x50e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	653b      	str	r3, [r7, #80]	; 0x50
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2250      	movs	r2, #80	; 0x50
 8004528:	5a9b      	ldrh	r3, [r3, r2]
 800452a:	b29b      	uxth	r3, r3
 800452c:	001a      	movs	r2, r3
 800452e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004530:	189b      	adds	r3, r3, r2
 8004532:	653b      	str	r3, [r7, #80]	; 0x50
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	00da      	lsls	r2, r3, #3
 800453a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453c:	18d3      	adds	r3, r2, r3
 800453e:	4a93      	ldr	r2, [pc, #588]	; (800478c <USB_EPStartXfer+0x748>)
 8004540:	4694      	mov	ip, r2
 8004542:	4463      	add	r3, ip
 8004544:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004546:	1d7b      	adds	r3, r7, #5
 8004548:	33ff      	adds	r3, #255	; 0xff
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	b29a      	uxth	r2, r3
 800454e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004550:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004552:	2076      	movs	r0, #118	; 0x76
 8004554:	183b      	adds	r3, r7, r0
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	8912      	ldrh	r2, [r2, #8]
 800455a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6959      	ldr	r1, [r3, #20]
 8004560:	1d7b      	adds	r3, r7, #5
 8004562:	33ff      	adds	r3, #255	; 0xff
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	b29c      	uxth	r4, r3
 8004568:	183b      	adds	r3, r7, r0
 800456a:	881a      	ldrh	r2, [r3, #0]
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	0023      	movs	r3, r4
 8004570:	f000 ffda 	bl	8005528 <USB_WritePMA>
            ep->xfer_buff += len;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	1d7b      	adds	r3, r7, #5
 800457a:	33ff      	adds	r3, #255	; 0xff
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	18d2      	adds	r2, r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	429a      	cmp	r2, r3
 800458e:	d908      	bls.n	80045a2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6a1a      	ldr	r2, [r3, #32]
 8004594:	1d7b      	adds	r3, r7, #5
 8004596:	33ff      	adds	r3, #255	; 0xff
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	1ad2      	subs	r2, r2, r3
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	621a      	str	r2, [r3, #32]
 80045a0:	e007      	b.n	80045b2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	1d7a      	adds	r2, r7, #5
 80045a8:	32ff      	adds	r2, #255	; 0xff
 80045aa:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	643b      	str	r3, [r7, #64]	; 0x40
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d000      	beq.n	80045c0 <USB_EPStartXfer+0x57c>
 80045be:	e070      	b.n	80046a2 <USB_EPStartXfer+0x65e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2250      	movs	r2, #80	; 0x50
 80045c8:	5a9b      	ldrh	r3, [r3, r2]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	001a      	movs	r2, r3
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	189b      	adds	r3, r3, r2
 80045d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	00da      	lsls	r2, r3, #3
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	18d3      	adds	r3, r2, r3
 80045de:	4a6d      	ldr	r2, [pc, #436]	; (8004794 <USB_EPStartXfer+0x750>)
 80045e0:	4694      	mov	ip, r2
 80045e2:	4463      	add	r3, ip
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	059b      	lsls	r3, r3, #22
 80045ee:	0d9b      	lsrs	r3, r3, #22
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	1d7b      	adds	r3, r7, #5
 80045f8:	33ff      	adds	r3, #255	; 0xff
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b3e      	cmp	r3, #62	; 0x3e
 80045fe:	d922      	bls.n	8004646 <USB_EPStartXfer+0x602>
 8004600:	1d7b      	adds	r3, r7, #5
 8004602:	33ff      	adds	r3, #255	; 0xff
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	21f4      	movs	r1, #244	; 0xf4
 800460a:	187a      	adds	r2, r7, r1
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	1d7b      	adds	r3, r7, #5
 8004610:	33ff      	adds	r3, #255	; 0xff
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	221f      	movs	r2, #31
 8004616:	4013      	ands	r3, r2
 8004618:	d104      	bne.n	8004624 <USB_EPStartXfer+0x5e0>
 800461a:	187b      	adds	r3, r7, r1
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3b01      	subs	r3, #1
 8004620:	187a      	adds	r2, r7, r1
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29a      	uxth	r2, r3
 800462a:	23f4      	movs	r3, #244	; 0xf4
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	029b      	lsls	r3, r3, #10
 8004634:	b29b      	uxth	r3, r3
 8004636:	4313      	orrs	r3, r2
 8004638:	b29b      	uxth	r3, r3
 800463a:	4a55      	ldr	r2, [pc, #340]	; (8004790 <USB_EPStartXfer+0x74c>)
 800463c:	4313      	orrs	r3, r2
 800463e:	b29a      	uxth	r2, r3
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	e048      	b.n	80046d8 <USB_EPStartXfer+0x694>
 8004646:	1d7b      	adds	r3, r7, #5
 8004648:	33ff      	adds	r3, #255	; 0xff
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d108      	bne.n	8004662 <USB_EPStartXfer+0x61e>
 8004650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	4a4e      	ldr	r2, [pc, #312]	; (8004790 <USB_EPStartXfer+0x74c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	b29a      	uxth	r2, r3
 800465c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	e03a      	b.n	80046d8 <USB_EPStartXfer+0x694>
 8004662:	1d7b      	adds	r3, r7, #5
 8004664:	33ff      	adds	r3, #255	; 0xff
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	21f4      	movs	r1, #244	; 0xf4
 800466c:	187a      	adds	r2, r7, r1
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	1d7b      	adds	r3, r7, #5
 8004672:	33ff      	adds	r3, #255	; 0xff
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2201      	movs	r2, #1
 8004678:	4013      	ands	r3, r2
 800467a:	d004      	beq.n	8004686 <USB_EPStartXfer+0x642>
 800467c:	187b      	adds	r3, r7, r1
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3301      	adds	r3, #1
 8004682:	187a      	adds	r2, r7, r1
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b29a      	uxth	r2, r3
 800468c:	23f4      	movs	r3, #244	; 0xf4
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	029b      	lsls	r3, r3, #10
 8004696:	b29b      	uxth	r3, r3
 8004698:	4313      	orrs	r3, r2
 800469a:	b29a      	uxth	r2, r3
 800469c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	e01a      	b.n	80046d8 <USB_EPStartXfer+0x694>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d116      	bne.n	80046d8 <USB_EPStartXfer+0x694>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2250      	movs	r2, #80	; 0x50
 80046ae:	5a9b      	ldrh	r3, [r3, r2]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	001a      	movs	r2, r3
 80046b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	643b      	str	r3, [r7, #64]	; 0x40
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	00da      	lsls	r2, r3, #3
 80046c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046c2:	18d3      	adds	r3, r2, r3
 80046c4:	4a33      	ldr	r2, [pc, #204]	; (8004794 <USB_EPStartXfer+0x750>)
 80046c6:	4694      	mov	ip, r2
 80046c8:	4463      	add	r3, ip
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046cc:	1d7b      	adds	r3, r7, #5
 80046ce:	33ff      	adds	r3, #255	; 0xff
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046d8:	2076      	movs	r0, #118	; 0x76
 80046da:	183b      	adds	r3, r7, r0
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	8952      	ldrh	r2, [r2, #10]
 80046e0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6959      	ldr	r1, [r3, #20]
 80046e6:	1d7b      	adds	r3, r7, #5
 80046e8:	33ff      	adds	r3, #255	; 0xff
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	b29c      	uxth	r4, r3
 80046ee:	183b      	adds	r3, r7, r0
 80046f0:	881a      	ldrh	r2, [r3, #0]
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	0023      	movs	r3, r4
 80046f6:	f000 ff17 	bl	8005528 <USB_WritePMA>
 80046fa:	e1b6      	b.n	8004a6a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	1d7a      	adds	r2, r7, #5
 8004702:	32ff      	adds	r2, #255	; 0xff
 8004704:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	18d3      	adds	r3, r2, r3
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29a      	uxth	r2, r3
 8004714:	2062      	movs	r0, #98	; 0x62
 8004716:	183b      	adds	r3, r7, r0
 8004718:	491f      	ldr	r1, [pc, #124]	; (8004798 <USB_EPStartXfer+0x754>)
 800471a:	400a      	ands	r2, r1
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	18d3      	adds	r3, r2, r3
 8004728:	183a      	adds	r2, r7, r0
 800472a:	8812      	ldrh	r2, [r2, #0]
 800472c:	491b      	ldr	r1, [pc, #108]	; (800479c <USB_EPStartXfer+0x758>)
 800472e:	430a      	orrs	r2, r1
 8004730:	b292      	uxth	r2, r2
 8004732:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2250      	movs	r2, #80	; 0x50
 800473c:	5a9b      	ldrh	r3, [r3, r2]
 800473e:	b29b      	uxth	r3, r3
 8004740:	001a      	movs	r2, r3
 8004742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004744:	189b      	adds	r3, r3, r2
 8004746:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	00da      	lsls	r2, r3, #3
 800474e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004750:	18d3      	adds	r3, r2, r3
 8004752:	4a0e      	ldr	r2, [pc, #56]	; (800478c <USB_EPStartXfer+0x748>)
 8004754:	4694      	mov	ip, r2
 8004756:	4463      	add	r3, ip
 8004758:	65bb      	str	r3, [r7, #88]	; 0x58
 800475a:	1d7b      	adds	r3, r7, #5
 800475c:	33ff      	adds	r3, #255	; 0xff
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	b29a      	uxth	r2, r3
 8004762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004764:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004766:	2076      	movs	r0, #118	; 0x76
 8004768:	183b      	adds	r3, r7, r0
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	8912      	ldrh	r2, [r2, #8]
 800476e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6959      	ldr	r1, [r3, #20]
 8004774:	1d7b      	adds	r3, r7, #5
 8004776:	33ff      	adds	r3, #255	; 0xff
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	b29c      	uxth	r4, r3
 800477c:	183b      	adds	r3, r7, r0
 800477e:	881a      	ldrh	r2, [r3, #0]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	0023      	movs	r3, r4
 8004784:	f000 fed0 	bl	8005528 <USB_WritePMA>
 8004788:	e16f      	b.n	8004a6a <USB_EPStartXfer+0xa26>
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	00000402 	.word	0x00000402
 8004790:	ffff8000 	.word	0xffff8000
 8004794:	00000406 	.word	0x00000406
 8004798:	ffff8e8f 	.word	0xffff8e8f
 800479c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	1d7b      	adds	r3, r7, #5
 80047a6:	33ff      	adds	r3, #255	; 0xff
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	1ad2      	subs	r2, r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	18d3      	adds	r3, r2, r3
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	001a      	movs	r2, r3
 80047c0:	2340      	movs	r3, #64	; 0x40
 80047c2:	4013      	ands	r3, r2
 80047c4:	d100      	bne.n	80047c8 <USB_EPStartXfer+0x784>
 80047c6:	e0a4      	b.n	8004912 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	673b      	str	r3, [r7, #112]	; 0x70
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d000      	beq.n	80047d6 <USB_EPStartXfer+0x792>
 80047d4:	e070      	b.n	80048b8 <USB_EPStartXfer+0x874>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2250      	movs	r2, #80	; 0x50
 80047de:	5a9b      	ldrh	r3, [r3, r2]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	001a      	movs	r2, r3
 80047e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	00da      	lsls	r2, r3, #3
 80047f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047f2:	18d3      	adds	r3, r2, r3
 80047f4:	4abc      	ldr	r2, [pc, #752]	; (8004ae8 <USB_EPStartXfer+0xaa4>)
 80047f6:	4694      	mov	ip, r2
 80047f8:	4463      	add	r3, ip
 80047fa:	667b      	str	r3, [r7, #100]	; 0x64
 80047fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	059b      	lsls	r3, r3, #22
 8004804:	0d9b      	lsrs	r3, r3, #22
 8004806:	b29a      	uxth	r2, r3
 8004808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800480a:	801a      	strh	r2, [r3, #0]
 800480c:	1d7b      	adds	r3, r7, #5
 800480e:	33ff      	adds	r3, #255	; 0xff
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b3e      	cmp	r3, #62	; 0x3e
 8004814:	d922      	bls.n	800485c <USB_EPStartXfer+0x818>
 8004816:	1d7b      	adds	r3, r7, #5
 8004818:	33ff      	adds	r3, #255	; 0xff
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	21f0      	movs	r1, #240	; 0xf0
 8004820:	187a      	adds	r2, r7, r1
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	1d7b      	adds	r3, r7, #5
 8004826:	33ff      	adds	r3, #255	; 0xff
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	221f      	movs	r2, #31
 800482c:	4013      	ands	r3, r2
 800482e:	d104      	bne.n	800483a <USB_EPStartXfer+0x7f6>
 8004830:	187b      	adds	r3, r7, r1
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3b01      	subs	r3, #1
 8004836:	187a      	adds	r2, r7, r1
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29a      	uxth	r2, r3
 8004840:	23f0      	movs	r3, #240	; 0xf0
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	029b      	lsls	r3, r3, #10
 800484a:	b29b      	uxth	r3, r3
 800484c:	4313      	orrs	r3, r2
 800484e:	b29b      	uxth	r3, r3
 8004850:	4aa6      	ldr	r2, [pc, #664]	; (8004aec <USB_EPStartXfer+0xaa8>)
 8004852:	4313      	orrs	r3, r2
 8004854:	b29a      	uxth	r2, r3
 8004856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004858:	801a      	strh	r2, [r3, #0]
 800485a:	e048      	b.n	80048ee <USB_EPStartXfer+0x8aa>
 800485c:	1d7b      	adds	r3, r7, #5
 800485e:	33ff      	adds	r3, #255	; 0xff
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d108      	bne.n	8004878 <USB_EPStartXfer+0x834>
 8004866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	b29b      	uxth	r3, r3
 800486c:	4a9f      	ldr	r2, [pc, #636]	; (8004aec <USB_EPStartXfer+0xaa8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	b29a      	uxth	r2, r3
 8004872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	e03a      	b.n	80048ee <USB_EPStartXfer+0x8aa>
 8004878:	1d7b      	adds	r3, r7, #5
 800487a:	33ff      	adds	r3, #255	; 0xff
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	085b      	lsrs	r3, r3, #1
 8004880:	21f0      	movs	r1, #240	; 0xf0
 8004882:	187a      	adds	r2, r7, r1
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	1d7b      	adds	r3, r7, #5
 8004888:	33ff      	adds	r3, #255	; 0xff
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2201      	movs	r2, #1
 800488e:	4013      	ands	r3, r2
 8004890:	d004      	beq.n	800489c <USB_EPStartXfer+0x858>
 8004892:	187b      	adds	r3, r7, r1
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3301      	adds	r3, #1
 8004898:	187a      	adds	r2, r7, r1
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	23f0      	movs	r3, #240	; 0xf0
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	029b      	lsls	r3, r3, #10
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	4313      	orrs	r3, r2
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	e01a      	b.n	80048ee <USB_EPStartXfer+0x8aa>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d116      	bne.n	80048ee <USB_EPStartXfer+0x8aa>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2250      	movs	r2, #80	; 0x50
 80048c4:	5a9b      	ldrh	r3, [r3, r2]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	001a      	movs	r2, r3
 80048ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048cc:	189b      	adds	r3, r3, r2
 80048ce:	673b      	str	r3, [r7, #112]	; 0x70
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	00da      	lsls	r2, r3, #3
 80048d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048d8:	18d3      	adds	r3, r2, r3
 80048da:	4a83      	ldr	r2, [pc, #524]	; (8004ae8 <USB_EPStartXfer+0xaa4>)
 80048dc:	4694      	mov	ip, r2
 80048de:	4463      	add	r3, ip
 80048e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048e2:	1d7b      	adds	r3, r7, #5
 80048e4:	33ff      	adds	r3, #255	; 0xff
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80048ee:	2076      	movs	r0, #118	; 0x76
 80048f0:	183b      	adds	r3, r7, r0
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	8952      	ldrh	r2, [r2, #10]
 80048f6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	6959      	ldr	r1, [r3, #20]
 80048fc:	1d7b      	adds	r3, r7, #5
 80048fe:	33ff      	adds	r3, #255	; 0xff
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	b29c      	uxth	r4, r3
 8004904:	183b      	adds	r3, r7, r0
 8004906:	881a      	ldrh	r2, [r3, #0]
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	0023      	movs	r3, r4
 800490c:	f000 fe0c 	bl	8005528 <USB_WritePMA>
 8004910:	e0ab      	b.n	8004a6a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	785b      	ldrb	r3, [r3, #1]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d000      	beq.n	800491c <USB_EPStartXfer+0x8d8>
 800491a:	e070      	b.n	80049fe <USB_EPStartXfer+0x9ba>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2250      	movs	r2, #80	; 0x50
 8004924:	5a9b      	ldrh	r3, [r3, r2]
 8004926:	b29b      	uxth	r3, r3
 8004928:	001a      	movs	r2, r3
 800492a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800492c:	189b      	adds	r3, r3, r2
 800492e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	00da      	lsls	r2, r3, #3
 8004936:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004938:	18d3      	adds	r3, r2, r3
 800493a:	4a6d      	ldr	r2, [pc, #436]	; (8004af0 <USB_EPStartXfer+0xaac>)
 800493c:	4694      	mov	ip, r2
 800493e:	4463      	add	r3, ip
 8004940:	67bb      	str	r3, [r7, #120]	; 0x78
 8004942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	059b      	lsls	r3, r3, #22
 800494a:	0d9b      	lsrs	r3, r3, #22
 800494c:	b29a      	uxth	r2, r3
 800494e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	1d7b      	adds	r3, r7, #5
 8004954:	33ff      	adds	r3, #255	; 0xff
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b3e      	cmp	r3, #62	; 0x3e
 800495a:	d922      	bls.n	80049a2 <USB_EPStartXfer+0x95e>
 800495c:	1d7b      	adds	r3, r7, #5
 800495e:	33ff      	adds	r3, #255	; 0xff
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	21ec      	movs	r1, #236	; 0xec
 8004966:	187a      	adds	r2, r7, r1
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	1d7b      	adds	r3, r7, #5
 800496c:	33ff      	adds	r3, #255	; 0xff
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	221f      	movs	r2, #31
 8004972:	4013      	ands	r3, r2
 8004974:	d104      	bne.n	8004980 <USB_EPStartXfer+0x93c>
 8004976:	187b      	adds	r3, r7, r1
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3b01      	subs	r3, #1
 800497c:	187a      	adds	r2, r7, r1
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29a      	uxth	r2, r3
 8004986:	23ec      	movs	r3, #236	; 0xec
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	029b      	lsls	r3, r3, #10
 8004990:	b29b      	uxth	r3, r3
 8004992:	4313      	orrs	r3, r2
 8004994:	b29b      	uxth	r3, r3
 8004996:	4a55      	ldr	r2, [pc, #340]	; (8004aec <USB_EPStartXfer+0xaa8>)
 8004998:	4313      	orrs	r3, r2
 800499a:	b29a      	uxth	r2, r3
 800499c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800499e:	801a      	strh	r2, [r3, #0]
 80049a0:	e052      	b.n	8004a48 <USB_EPStartXfer+0xa04>
 80049a2:	1d7b      	adds	r3, r7, #5
 80049a4:	33ff      	adds	r3, #255	; 0xff
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d108      	bne.n	80049be <USB_EPStartXfer+0x97a>
 80049ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	4a4e      	ldr	r2, [pc, #312]	; (8004aec <USB_EPStartXfer+0xaa8>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ba:	801a      	strh	r2, [r3, #0]
 80049bc:	e044      	b.n	8004a48 <USB_EPStartXfer+0xa04>
 80049be:	1d7b      	adds	r3, r7, #5
 80049c0:	33ff      	adds	r3, #255	; 0xff
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	085b      	lsrs	r3, r3, #1
 80049c6:	21ec      	movs	r1, #236	; 0xec
 80049c8:	187a      	adds	r2, r7, r1
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	1d7b      	adds	r3, r7, #5
 80049ce:	33ff      	adds	r3, #255	; 0xff
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2201      	movs	r2, #1
 80049d4:	4013      	ands	r3, r2
 80049d6:	d004      	beq.n	80049e2 <USB_EPStartXfer+0x99e>
 80049d8:	187b      	adds	r3, r7, r1
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	187a      	adds	r2, r7, r1
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	23ec      	movs	r3, #236	; 0xec
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	029b      	lsls	r3, r3, #10
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4313      	orrs	r3, r2
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	e024      	b.n	8004a48 <USB_EPStartXfer+0xa04>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d120      	bne.n	8004a48 <USB_EPStartXfer+0xa04>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2184      	movs	r1, #132	; 0x84
 8004a0a:	187a      	adds	r2, r7, r1
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2250      	movs	r2, #80	; 0x50
 8004a12:	5a9b      	ldrh	r3, [r3, r2]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	001a      	movs	r2, r3
 8004a18:	187b      	adds	r3, r7, r1
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	187a      	adds	r2, r7, r1
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	00da      	lsls	r2, r3, #3
 8004a28:	187b      	adds	r3, r7, r1
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	18d3      	adds	r3, r2, r3
 8004a2e:	4a30      	ldr	r2, [pc, #192]	; (8004af0 <USB_EPStartXfer+0xaac>)
 8004a30:	4694      	mov	ip, r2
 8004a32:	4463      	add	r3, ip
 8004a34:	2180      	movs	r1, #128	; 0x80
 8004a36:	187a      	adds	r2, r7, r1
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	1d7b      	adds	r3, r7, #5
 8004a3c:	33ff      	adds	r3, #255	; 0xff
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	187b      	adds	r3, r7, r1
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004a48:	2076      	movs	r0, #118	; 0x76
 8004a4a:	183b      	adds	r3, r7, r0
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	8912      	ldrh	r2, [r2, #8]
 8004a50:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6959      	ldr	r1, [r3, #20]
 8004a56:	1d7b      	adds	r3, r7, #5
 8004a58:	33ff      	adds	r3, #255	; 0xff
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	b29c      	uxth	r4, r3
 8004a5e:	183b      	adds	r3, r7, r0
 8004a60:	881a      	ldrh	r2, [r3, #0]
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	0023      	movs	r3, r4
 8004a66:	f000 fd5f 	bl	8005528 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	18d3      	adds	r3, r2, r3
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	200a      	movs	r0, #10
 8004a7a:	183b      	adds	r3, r7, r0
 8004a7c:	491d      	ldr	r1, [pc, #116]	; (8004af4 <USB_EPStartXfer+0xab0>)
 8004a7e:	400a      	ands	r2, r1
 8004a80:	801a      	strh	r2, [r3, #0]
 8004a82:	183b      	adds	r3, r7, r0
 8004a84:	183a      	adds	r2, r7, r0
 8004a86:	8812      	ldrh	r2, [r2, #0]
 8004a88:	2110      	movs	r1, #16
 8004a8a:	404a      	eors	r2, r1
 8004a8c:	801a      	strh	r2, [r3, #0]
 8004a8e:	183b      	adds	r3, r7, r0
 8004a90:	183a      	adds	r2, r7, r0
 8004a92:	8812      	ldrh	r2, [r2, #0]
 8004a94:	2120      	movs	r1, #32
 8004a96:	404a      	eors	r2, r1
 8004a98:	801a      	strh	r2, [r3, #0]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	18d3      	adds	r3, r2, r3
 8004aa4:	183a      	adds	r2, r7, r0
 8004aa6:	8812      	ldrh	r2, [r2, #0]
 8004aa8:	4913      	ldr	r1, [pc, #76]	; (8004af8 <USB_EPStartXfer+0xab4>)
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	b292      	uxth	r2, r2
 8004aae:	801a      	strh	r2, [r3, #0]
 8004ab0:	f000 fbf4 	bl	800529c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	7b1b      	ldrb	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d000      	beq.n	8004abe <USB_EPStartXfer+0xa7a>
 8004abc:	e0a9      	b.n	8004c12 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d918      	bls.n	8004afc <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	1d7a      	adds	r2, r7, #5
 8004ad0:	32ff      	adds	r2, #255	; 0xff
 8004ad2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	699a      	ldr	r2, [r3, #24]
 8004ad8:	1d7b      	adds	r3, r7, #5
 8004ada:	33ff      	adds	r3, #255	; 0xff
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	619a      	str	r2, [r3, #24]
 8004ae4:	e012      	b.n	8004b0c <USB_EPStartXfer+0xac8>
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	00000406 	.word	0x00000406
 8004aec:	ffff8000 	.word	0xffff8000
 8004af0:	00000402 	.word	0x00000402
 8004af4:	ffff8fbf 	.word	0xffff8fbf
 8004af8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	1d7a      	adds	r2, r7, #5
 8004b02:	32ff      	adds	r2, #255	; 0xff
 8004b04:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2190      	movs	r1, #144	; 0x90
 8004b10:	187a      	adds	r2, r7, r1
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2250      	movs	r2, #80	; 0x50
 8004b18:	5a9b      	ldrh	r3, [r3, r2]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	001a      	movs	r2, r3
 8004b1e:	187b      	adds	r3, r7, r1
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	189b      	adds	r3, r3, r2
 8004b24:	187a      	adds	r2, r7, r1
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	00da      	lsls	r2, r3, #3
 8004b2e:	187b      	adds	r3, r7, r1
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	18d3      	adds	r3, r2, r3
 8004b34:	4acf      	ldr	r2, [pc, #828]	; (8004e74 <USB_EPStartXfer+0xe30>)
 8004b36:	4694      	mov	ip, r2
 8004b38:	4463      	add	r3, ip
 8004b3a:	218c      	movs	r1, #140	; 0x8c
 8004b3c:	187a      	adds	r2, r7, r1
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	187b      	adds	r3, r7, r1
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	059b      	lsls	r3, r3, #22
 8004b4a:	0d9b      	lsrs	r3, r3, #22
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	187b      	adds	r3, r7, r1
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	801a      	strh	r2, [r3, #0]
 8004b54:	1d7b      	adds	r3, r7, #5
 8004b56:	33ff      	adds	r3, #255	; 0xff
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b5c:	d925      	bls.n	8004baa <USB_EPStartXfer+0xb66>
 8004b5e:	1d7b      	adds	r3, r7, #5
 8004b60:	33ff      	adds	r3, #255	; 0xff
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	21e8      	movs	r1, #232	; 0xe8
 8004b68:	187a      	adds	r2, r7, r1
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	1d7b      	adds	r3, r7, #5
 8004b6e:	33ff      	adds	r3, #255	; 0xff
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	221f      	movs	r2, #31
 8004b74:	4013      	ands	r3, r2
 8004b76:	d104      	bne.n	8004b82 <USB_EPStartXfer+0xb3e>
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	187a      	adds	r2, r7, r1
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	218c      	movs	r1, #140	; 0x8c
 8004b84:	187b      	adds	r3, r7, r1
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	23e8      	movs	r3, #232	; 0xe8
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	029b      	lsls	r3, r3, #10
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4ab6      	ldr	r2, [pc, #728]	; (8004e78 <USB_EPStartXfer+0xe34>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	187b      	adds	r3, r7, r1
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	801a      	strh	r2, [r3, #0]
 8004ba8:	e353      	b.n	8005252 <USB_EPStartXfer+0x120e>
 8004baa:	1d7b      	adds	r3, r7, #5
 8004bac:	33ff      	adds	r3, #255	; 0xff
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <USB_EPStartXfer+0xb88>
 8004bb4:	218c      	movs	r1, #140	; 0x8c
 8004bb6:	187b      	adds	r3, r7, r1
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	4aae      	ldr	r2, [pc, #696]	; (8004e78 <USB_EPStartXfer+0xe34>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	187b      	adds	r3, r7, r1
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	801a      	strh	r2, [r3, #0]
 8004bca:	e342      	b.n	8005252 <USB_EPStartXfer+0x120e>
 8004bcc:	1d7b      	adds	r3, r7, #5
 8004bce:	33ff      	adds	r3, #255	; 0xff
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	21e8      	movs	r1, #232	; 0xe8
 8004bd6:	187a      	adds	r2, r7, r1
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	1d7b      	adds	r3, r7, #5
 8004bdc:	33ff      	adds	r3, #255	; 0xff
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2201      	movs	r2, #1
 8004be2:	4013      	ands	r3, r2
 8004be4:	d004      	beq.n	8004bf0 <USB_EPStartXfer+0xbac>
 8004be6:	187b      	adds	r3, r7, r1
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3301      	adds	r3, #1
 8004bec:	187a      	adds	r2, r7, r1
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	218c      	movs	r1, #140	; 0x8c
 8004bf2:	187b      	adds	r3, r7, r1
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	23e8      	movs	r3, #232	; 0xe8
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	029b      	lsls	r3, r3, #10
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	4313      	orrs	r3, r2
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	187b      	adds	r3, r7, r1
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	e31f      	b.n	8005252 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	78db      	ldrb	r3, [r3, #3]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d000      	beq.n	8004c1c <USB_EPStartXfer+0xbd8>
 8004c1a:	e191      	b.n	8004f40 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	785b      	ldrb	r3, [r3, #1]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d000      	beq.n	8004c26 <USB_EPStartXfer+0xbe2>
 8004c24:	e07c      	b.n	8004d20 <USB_EPStartXfer+0xcdc>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	21ac      	movs	r1, #172	; 0xac
 8004c2a:	187a      	adds	r2, r7, r1
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2250      	movs	r2, #80	; 0x50
 8004c32:	5a9b      	ldrh	r3, [r3, r2]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	001a      	movs	r2, r3
 8004c38:	187b      	adds	r3, r7, r1
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	189b      	adds	r3, r3, r2
 8004c3e:	187a      	adds	r2, r7, r1
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	00da      	lsls	r2, r3, #3
 8004c48:	187b      	adds	r3, r7, r1
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	18d3      	adds	r3, r2, r3
 8004c4e:	4a8b      	ldr	r2, [pc, #556]	; (8004e7c <USB_EPStartXfer+0xe38>)
 8004c50:	4694      	mov	ip, r2
 8004c52:	4463      	add	r3, ip
 8004c54:	21a8      	movs	r1, #168	; 0xa8
 8004c56:	187a      	adds	r2, r7, r1
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	187b      	adds	r3, r7, r1
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	059b      	lsls	r3, r3, #22
 8004c64:	0d9b      	lsrs	r3, r3, #22
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	187b      	adds	r3, r7, r1
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	801a      	strh	r2, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b3e      	cmp	r3, #62	; 0x3e
 8004c74:	d923      	bls.n	8004cbe <USB_EPStartXfer+0xc7a>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	21e4      	movs	r1, #228	; 0xe4
 8004c7e:	187a      	adds	r2, r7, r1
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	221f      	movs	r2, #31
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d104      	bne.n	8004c96 <USB_EPStartXfer+0xc52>
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	187a      	adds	r2, r7, r1
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	21a8      	movs	r1, #168	; 0xa8
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	23e4      	movs	r3, #228	; 0xe4
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	029b      	lsls	r3, r3, #10
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	4313      	orrs	r3, r2
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	4a71      	ldr	r2, [pc, #452]	; (8004e78 <USB_EPStartXfer+0xe34>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	187b      	adds	r3, r7, r1
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	801a      	strh	r2, [r3, #0]
 8004cbc:	e054      	b.n	8004d68 <USB_EPStartXfer+0xd24>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <USB_EPStartXfer+0xc9a>
 8004cc6:	21a8      	movs	r1, #168	; 0xa8
 8004cc8:	187b      	adds	r3, r7, r1
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4a69      	ldr	r2, [pc, #420]	; (8004e78 <USB_EPStartXfer+0xe34>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	187b      	adds	r3, r7, r1
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	801a      	strh	r2, [r3, #0]
 8004cdc:	e044      	b.n	8004d68 <USB_EPStartXfer+0xd24>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	21e4      	movs	r1, #228	; 0xe4
 8004ce6:	187a      	adds	r2, r7, r1
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <USB_EPStartXfer+0xcba>
 8004cf4:	187b      	adds	r3, r7, r1
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	187a      	adds	r2, r7, r1
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	21a8      	movs	r1, #168	; 0xa8
 8004d00:	187b      	adds	r3, r7, r1
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	23e4      	movs	r3, #228	; 0xe4
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	029b      	lsls	r3, r3, #10
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	4313      	orrs	r3, r2
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	187b      	adds	r3, r7, r1
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	e023      	b.n	8004d68 <USB_EPStartXfer+0xd24>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	785b      	ldrb	r3, [r3, #1]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d11f      	bne.n	8004d68 <USB_EPStartXfer+0xd24>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	21b4      	movs	r1, #180	; 0xb4
 8004d2c:	187a      	adds	r2, r7, r1
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2250      	movs	r2, #80	; 0x50
 8004d34:	5a9b      	ldrh	r3, [r3, r2]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	001a      	movs	r2, r3
 8004d3a:	187b      	adds	r3, r7, r1
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	187a      	adds	r2, r7, r1
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	00da      	lsls	r2, r3, #3
 8004d4a:	187b      	adds	r3, r7, r1
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	18d3      	adds	r3, r2, r3
 8004d50:	4a4a      	ldr	r2, [pc, #296]	; (8004e7c <USB_EPStartXfer+0xe38>)
 8004d52:	4694      	mov	ip, r2
 8004d54:	4463      	add	r3, ip
 8004d56:	21b0      	movs	r1, #176	; 0xb0
 8004d58:	187a      	adds	r2, r7, r1
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	187b      	adds	r3, r7, r1
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	801a      	strh	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	22a4      	movs	r2, #164	; 0xa4
 8004d6c:	18ba      	adds	r2, r7, r2
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d000      	beq.n	8004d7a <USB_EPStartXfer+0xd36>
 8004d78:	e082      	b.n	8004e80 <USB_EPStartXfer+0xe3c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	219c      	movs	r1, #156	; 0x9c
 8004d7e:	187a      	adds	r2, r7, r1
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2250      	movs	r2, #80	; 0x50
 8004d86:	5a9b      	ldrh	r3, [r3, r2]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	187b      	adds	r3, r7, r1
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	189b      	adds	r3, r3, r2
 8004d92:	187a      	adds	r2, r7, r1
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	00da      	lsls	r2, r3, #3
 8004d9c:	187b      	adds	r3, r7, r1
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	18d3      	adds	r3, r2, r3
 8004da2:	4a34      	ldr	r2, [pc, #208]	; (8004e74 <USB_EPStartXfer+0xe30>)
 8004da4:	4694      	mov	ip, r2
 8004da6:	4463      	add	r3, ip
 8004da8:	2198      	movs	r1, #152	; 0x98
 8004daa:	187a      	adds	r2, r7, r1
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	187b      	adds	r3, r7, r1
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	059b      	lsls	r3, r3, #22
 8004db8:	0d9b      	lsrs	r3, r3, #22
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	187b      	adds	r3, r7, r1
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	801a      	strh	r2, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8004dc8:	d923      	bls.n	8004e12 <USB_EPStartXfer+0xdce>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	21e0      	movs	r1, #224	; 0xe0
 8004dd2:	187a      	adds	r2, r7, r1
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	221f      	movs	r2, #31
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d104      	bne.n	8004dea <USB_EPStartXfer+0xda6>
 8004de0:	187b      	adds	r3, r7, r1
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	187a      	adds	r2, r7, r1
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	2198      	movs	r1, #152	; 0x98
 8004dec:	187b      	adds	r3, r7, r1
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	23e0      	movs	r3, #224	; 0xe0
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	029b      	lsls	r3, r3, #10
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	4313      	orrs	r3, r2
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <USB_EPStartXfer+0xe34>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	187b      	adds	r3, r7, r1
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	801a      	strh	r2, [r3, #0]
 8004e10:	e057      	b.n	8004ec2 <USB_EPStartXfer+0xe7e>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10b      	bne.n	8004e32 <USB_EPStartXfer+0xdee>
 8004e1a:	2198      	movs	r1, #152	; 0x98
 8004e1c:	187b      	adds	r3, r7, r1
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	4a14      	ldr	r2, [pc, #80]	; (8004e78 <USB_EPStartXfer+0xe34>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	187b      	adds	r3, r7, r1
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	e047      	b.n	8004ec2 <USB_EPStartXfer+0xe7e>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	21e0      	movs	r1, #224	; 0xe0
 8004e3a:	187a      	adds	r2, r7, r1
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2201      	movs	r2, #1
 8004e44:	4013      	ands	r3, r2
 8004e46:	d004      	beq.n	8004e52 <USB_EPStartXfer+0xe0e>
 8004e48:	187b      	adds	r3, r7, r1
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	187a      	adds	r2, r7, r1
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	2198      	movs	r1, #152	; 0x98
 8004e54:	187b      	adds	r3, r7, r1
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	23e0      	movs	r3, #224	; 0xe0
 8004e5e:	18fb      	adds	r3, r7, r3
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	029b      	lsls	r3, r3, #10
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	187b      	adds	r3, r7, r1
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	e026      	b.n	8004ec2 <USB_EPStartXfer+0xe7e>
 8004e74:	00000406 	.word	0x00000406
 8004e78:	ffff8000 	.word	0xffff8000
 8004e7c:	00000402 	.word	0x00000402
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d11c      	bne.n	8004ec2 <USB_EPStartXfer+0xe7e>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2250      	movs	r2, #80	; 0x50
 8004e8c:	5a9b      	ldrh	r3, [r3, r2]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	001a      	movs	r2, r3
 8004e92:	21a4      	movs	r1, #164	; 0xa4
 8004e94:	187b      	adds	r3, r7, r1
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	189b      	adds	r3, r3, r2
 8004e9a:	187a      	adds	r2, r7, r1
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	00da      	lsls	r2, r3, #3
 8004ea4:	187b      	adds	r3, r7, r1
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	18d3      	adds	r3, r2, r3
 8004eaa:	4ad2      	ldr	r2, [pc, #840]	; (80051f4 <USB_EPStartXfer+0x11b0>)
 8004eac:	4694      	mov	ip, r2
 8004eae:	4463      	add	r3, ip
 8004eb0:	21a0      	movs	r1, #160	; 0xa0
 8004eb2:	187a      	adds	r2, r7, r1
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	187b      	adds	r3, r7, r1
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d100      	bne.n	8004ecc <USB_EPStartXfer+0xe88>
 8004eca:	e1c2      	b.n	8005252 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	18d2      	adds	r2, r2, r3
 8004ed6:	2196      	movs	r1, #150	; 0x96
 8004ed8:	187b      	adds	r3, r7, r1
 8004eda:	8812      	ldrh	r2, [r2, #0]
 8004edc:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004ede:	187b      	adds	r3, r7, r1
 8004ee0:	881a      	ldrh	r2, [r3, #0]
 8004ee2:	2380      	movs	r3, #128	; 0x80
 8004ee4:	01db      	lsls	r3, r3, #7
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <USB_EPStartXfer+0xeb0>
 8004eea:	187b      	adds	r3, r7, r1
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	2240      	movs	r2, #64	; 0x40
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d10d      	bne.n	8004f10 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004ef4:	2196      	movs	r1, #150	; 0x96
 8004ef6:	187b      	adds	r3, r7, r1
 8004ef8:	881a      	ldrh	r2, [r3, #0]
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	01db      	lsls	r3, r3, #7
 8004efe:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f00:	d000      	beq.n	8004f04 <USB_EPStartXfer+0xec0>
 8004f02:	e1a6      	b.n	8005252 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f04:	187b      	adds	r3, r7, r1
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	2240      	movs	r2, #64	; 0x40
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d000      	beq.n	8004f10 <USB_EPStartXfer+0xecc>
 8004f0e:	e1a0      	b.n	8005252 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	18d3      	adds	r3, r2, r3
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	2094      	movs	r0, #148	; 0x94
 8004f20:	183b      	adds	r3, r7, r0
 8004f22:	49b5      	ldr	r1, [pc, #724]	; (80051f8 <USB_EPStartXfer+0x11b4>)
 8004f24:	400a      	ands	r2, r1
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	18d3      	adds	r3, r2, r3
 8004f32:	183a      	adds	r2, r7, r0
 8004f34:	8812      	ldrh	r2, [r2, #0]
 8004f36:	49b1      	ldr	r1, [pc, #708]	; (80051fc <USB_EPStartXfer+0x11b8>)
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	b292      	uxth	r2, r2
 8004f3c:	801a      	strh	r2, [r3, #0]
 8004f3e:	e188      	b.n	8005252 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	78db      	ldrb	r3, [r3, #3]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d000      	beq.n	8004f4a <USB_EPStartXfer+0xf06>
 8004f48:	e181      	b.n	800524e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d90d      	bls.n	8004f72 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	1d7a      	adds	r2, r7, #5
 8004f5c:	32ff      	adds	r2, #255	; 0xff
 8004f5e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	699a      	ldr	r2, [r3, #24]
 8004f64:	1d7b      	adds	r3, r7, #5
 8004f66:	33ff      	adds	r3, #255	; 0xff
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	1ad2      	subs	r2, r2, r3
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	619a      	str	r2, [r3, #24]
 8004f70:	e007      	b.n	8004f82 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	1d7a      	adds	r2, r7, #5
 8004f78:	32ff      	adds	r2, #255	; 0xff
 8004f7a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	785b      	ldrb	r3, [r3, #1]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d000      	beq.n	8004f8c <USB_EPStartXfer+0xf48>
 8004f8a:	e082      	b.n	8005092 <USB_EPStartXfer+0x104e>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	21cc      	movs	r1, #204	; 0xcc
 8004f90:	187a      	adds	r2, r7, r1
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2250      	movs	r2, #80	; 0x50
 8004f98:	5a9b      	ldrh	r3, [r3, r2]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	001a      	movs	r2, r3
 8004f9e:	187b      	adds	r3, r7, r1
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	189b      	adds	r3, r3, r2
 8004fa4:	187a      	adds	r2, r7, r1
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	00da      	lsls	r2, r3, #3
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	18d3      	adds	r3, r2, r3
 8004fb4:	4a92      	ldr	r2, [pc, #584]	; (8005200 <USB_EPStartXfer+0x11bc>)
 8004fb6:	4694      	mov	ip, r2
 8004fb8:	4463      	add	r3, ip
 8004fba:	21c8      	movs	r1, #200	; 0xc8
 8004fbc:	187a      	adds	r2, r7, r1
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	187b      	adds	r3, r7, r1
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	059b      	lsls	r3, r3, #22
 8004fca:	0d9b      	lsrs	r3, r3, #22
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	187b      	adds	r3, r7, r1
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	1d7b      	adds	r3, r7, #5
 8004fd6:	33ff      	adds	r3, #255	; 0xff
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b3e      	cmp	r3, #62	; 0x3e
 8004fdc:	d925      	bls.n	800502a <USB_EPStartXfer+0xfe6>
 8004fde:	1d7b      	adds	r3, r7, #5
 8004fe0:	33ff      	adds	r3, #255	; 0xff
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	21dc      	movs	r1, #220	; 0xdc
 8004fe8:	187a      	adds	r2, r7, r1
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	1d7b      	adds	r3, r7, #5
 8004fee:	33ff      	adds	r3, #255	; 0xff
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	221f      	movs	r2, #31
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d104      	bne.n	8005002 <USB_EPStartXfer+0xfbe>
 8004ff8:	187b      	adds	r3, r7, r1
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	187a      	adds	r2, r7, r1
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	21c8      	movs	r1, #200	; 0xc8
 8005004:	187b      	adds	r3, r7, r1
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29a      	uxth	r2, r3
 800500c:	23dc      	movs	r3, #220	; 0xdc
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	029b      	lsls	r3, r3, #10
 8005016:	b29b      	uxth	r3, r3
 8005018:	4313      	orrs	r3, r2
 800501a:	b29b      	uxth	r3, r3
 800501c:	4a79      	ldr	r2, [pc, #484]	; (8005204 <USB_EPStartXfer+0x11c0>)
 800501e:	4313      	orrs	r3, r2
 8005020:	b29a      	uxth	r2, r3
 8005022:	187b      	adds	r3, r7, r1
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	e058      	b.n	80050dc <USB_EPStartXfer+0x1098>
 800502a:	1d7b      	adds	r3, r7, #5
 800502c:	33ff      	adds	r3, #255	; 0xff
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10b      	bne.n	800504c <USB_EPStartXfer+0x1008>
 8005034:	21c8      	movs	r1, #200	; 0xc8
 8005036:	187b      	adds	r3, r7, r1
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	4a71      	ldr	r2, [pc, #452]	; (8005204 <USB_EPStartXfer+0x11c0>)
 8005040:	4313      	orrs	r3, r2
 8005042:	b29a      	uxth	r2, r3
 8005044:	187b      	adds	r3, r7, r1
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	801a      	strh	r2, [r3, #0]
 800504a:	e047      	b.n	80050dc <USB_EPStartXfer+0x1098>
 800504c:	1d7b      	adds	r3, r7, #5
 800504e:	33ff      	adds	r3, #255	; 0xff
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	21dc      	movs	r1, #220	; 0xdc
 8005056:	187a      	adds	r2, r7, r1
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	1d7b      	adds	r3, r7, #5
 800505c:	33ff      	adds	r3, #255	; 0xff
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2201      	movs	r2, #1
 8005062:	4013      	ands	r3, r2
 8005064:	d004      	beq.n	8005070 <USB_EPStartXfer+0x102c>
 8005066:	187b      	adds	r3, r7, r1
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3301      	adds	r3, #1
 800506c:	187a      	adds	r2, r7, r1
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	21c8      	movs	r1, #200	; 0xc8
 8005072:	187b      	adds	r3, r7, r1
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29a      	uxth	r2, r3
 800507a:	23dc      	movs	r3, #220	; 0xdc
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	029b      	lsls	r3, r3, #10
 8005084:	b29b      	uxth	r3, r3
 8005086:	4313      	orrs	r3, r2
 8005088:	b29a      	uxth	r2, r3
 800508a:	187b      	adds	r3, r7, r1
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	801a      	strh	r2, [r3, #0]
 8005090:	e024      	b.n	80050dc <USB_EPStartXfer+0x1098>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d120      	bne.n	80050dc <USB_EPStartXfer+0x1098>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	21d4      	movs	r1, #212	; 0xd4
 800509e:	187a      	adds	r2, r7, r1
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2250      	movs	r2, #80	; 0x50
 80050a6:	5a9b      	ldrh	r3, [r3, r2]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	001a      	movs	r2, r3
 80050ac:	187b      	adds	r3, r7, r1
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	189b      	adds	r3, r3, r2
 80050b2:	187a      	adds	r2, r7, r1
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	00da      	lsls	r2, r3, #3
 80050bc:	187b      	adds	r3, r7, r1
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	18d3      	adds	r3, r2, r3
 80050c2:	4a4f      	ldr	r2, [pc, #316]	; (8005200 <USB_EPStartXfer+0x11bc>)
 80050c4:	4694      	mov	ip, r2
 80050c6:	4463      	add	r3, ip
 80050c8:	21d0      	movs	r1, #208	; 0xd0
 80050ca:	187a      	adds	r2, r7, r1
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	1d7b      	adds	r3, r7, #5
 80050d0:	33ff      	adds	r3, #255	; 0xff
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	187b      	adds	r3, r7, r1
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	801a      	strh	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	22c4      	movs	r2, #196	; 0xc4
 80050e0:	18ba      	adds	r2, r7, r2
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d000      	beq.n	80050ee <USB_EPStartXfer+0x10aa>
 80050ec:	e08c      	b.n	8005208 <USB_EPStartXfer+0x11c4>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	21bc      	movs	r1, #188	; 0xbc
 80050f2:	187a      	adds	r2, r7, r1
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2250      	movs	r2, #80	; 0x50
 80050fa:	5a9b      	ldrh	r3, [r3, r2]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	001a      	movs	r2, r3
 8005100:	187b      	adds	r3, r7, r1
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	189b      	adds	r3, r3, r2
 8005106:	187a      	adds	r2, r7, r1
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	00da      	lsls	r2, r3, #3
 8005110:	187b      	adds	r3, r7, r1
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	18d3      	adds	r3, r2, r3
 8005116:	4a37      	ldr	r2, [pc, #220]	; (80051f4 <USB_EPStartXfer+0x11b0>)
 8005118:	4694      	mov	ip, r2
 800511a:	4463      	add	r3, ip
 800511c:	21b8      	movs	r1, #184	; 0xb8
 800511e:	187a      	adds	r2, r7, r1
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	187b      	adds	r3, r7, r1
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	059b      	lsls	r3, r3, #22
 800512c:	0d9b      	lsrs	r3, r3, #22
 800512e:	b29a      	uxth	r2, r3
 8005130:	187b      	adds	r3, r7, r1
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	1d7b      	adds	r3, r7, #5
 8005138:	33ff      	adds	r3, #255	; 0xff
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b3e      	cmp	r3, #62	; 0x3e
 800513e:	d925      	bls.n	800518c <USB_EPStartXfer+0x1148>
 8005140:	1d7b      	adds	r3, r7, #5
 8005142:	33ff      	adds	r3, #255	; 0xff
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	21d8      	movs	r1, #216	; 0xd8
 800514a:	187a      	adds	r2, r7, r1
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	1d7b      	adds	r3, r7, #5
 8005150:	33ff      	adds	r3, #255	; 0xff
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	221f      	movs	r2, #31
 8005156:	4013      	ands	r3, r2
 8005158:	d104      	bne.n	8005164 <USB_EPStartXfer+0x1120>
 800515a:	187b      	adds	r3, r7, r1
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3b01      	subs	r3, #1
 8005160:	187a      	adds	r2, r7, r1
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	21b8      	movs	r1, #184	; 0xb8
 8005166:	187b      	adds	r3, r7, r1
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29a      	uxth	r2, r3
 800516e:	23d8      	movs	r3, #216	; 0xd8
 8005170:	18fb      	adds	r3, r7, r3
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	b29b      	uxth	r3, r3
 8005176:	029b      	lsls	r3, r3, #10
 8005178:	b29b      	uxth	r3, r3
 800517a:	4313      	orrs	r3, r2
 800517c:	b29b      	uxth	r3, r3
 800517e:	4a21      	ldr	r2, [pc, #132]	; (8005204 <USB_EPStartXfer+0x11c0>)
 8005180:	4313      	orrs	r3, r2
 8005182:	b29a      	uxth	r2, r3
 8005184:	187b      	adds	r3, r7, r1
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	e062      	b.n	8005252 <USB_EPStartXfer+0x120e>
 800518c:	1d7b      	adds	r3, r7, #5
 800518e:	33ff      	adds	r3, #255	; 0xff
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10b      	bne.n	80051ae <USB_EPStartXfer+0x116a>
 8005196:	21b8      	movs	r1, #184	; 0xb8
 8005198:	187b      	adds	r3, r7, r1
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	4a18      	ldr	r2, [pc, #96]	; (8005204 <USB_EPStartXfer+0x11c0>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	187b      	adds	r3, r7, r1
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	e051      	b.n	8005252 <USB_EPStartXfer+0x120e>
 80051ae:	1d7b      	adds	r3, r7, #5
 80051b0:	33ff      	adds	r3, #255	; 0xff
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	21d8      	movs	r1, #216	; 0xd8
 80051b8:	187a      	adds	r2, r7, r1
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	1d7b      	adds	r3, r7, #5
 80051be:	33ff      	adds	r3, #255	; 0xff
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	4013      	ands	r3, r2
 80051c6:	d004      	beq.n	80051d2 <USB_EPStartXfer+0x118e>
 80051c8:	187b      	adds	r3, r7, r1
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3301      	adds	r3, #1
 80051ce:	187a      	adds	r2, r7, r1
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	21b8      	movs	r1, #184	; 0xb8
 80051d4:	187b      	adds	r3, r7, r1
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	b29a      	uxth	r2, r3
 80051dc:	23d8      	movs	r3, #216	; 0xd8
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	029b      	lsls	r3, r3, #10
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	4313      	orrs	r3, r2
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	187b      	adds	r3, r7, r1
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	e02e      	b.n	8005252 <USB_EPStartXfer+0x120e>
 80051f4:	00000406 	.word	0x00000406
 80051f8:	ffff8f8f 	.word	0xffff8f8f
 80051fc:	ffff80c0 	.word	0xffff80c0
 8005200:	00000402 	.word	0x00000402
 8005204:	ffff8000 	.word	0xffff8000
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	785b      	ldrb	r3, [r3, #1]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d120      	bne.n	8005252 <USB_EPStartXfer+0x120e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2250      	movs	r2, #80	; 0x50
 8005214:	5a9b      	ldrh	r3, [r3, r2]
 8005216:	b29b      	uxth	r3, r3
 8005218:	001a      	movs	r2, r3
 800521a:	21c4      	movs	r1, #196	; 0xc4
 800521c:	187b      	adds	r3, r7, r1
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	189b      	adds	r3, r3, r2
 8005222:	187a      	adds	r2, r7, r1
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	00da      	lsls	r2, r3, #3
 800522c:	187b      	adds	r3, r7, r1
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	18d3      	adds	r3, r2, r3
 8005232:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <USB_EPStartXfer+0x1264>)
 8005234:	4694      	mov	ip, r2
 8005236:	4463      	add	r3, ip
 8005238:	21c0      	movs	r1, #192	; 0xc0
 800523a:	187a      	adds	r2, r7, r1
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	1d7b      	adds	r3, r7, #5
 8005240:	33ff      	adds	r3, #255	; 0xff
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	b29a      	uxth	r2, r3
 8005246:	187b      	adds	r3, r7, r1
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	e001      	b.n	8005252 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e025      	b.n	800529e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	18d3      	adds	r3, r2, r3
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29a      	uxth	r2, r3
 8005260:	208a      	movs	r0, #138	; 0x8a
 8005262:	183b      	adds	r3, r7, r0
 8005264:	4911      	ldr	r1, [pc, #68]	; (80052ac <USB_EPStartXfer+0x1268>)
 8005266:	400a      	ands	r2, r1
 8005268:	801a      	strh	r2, [r3, #0]
 800526a:	183b      	adds	r3, r7, r0
 800526c:	183a      	adds	r2, r7, r0
 800526e:	8812      	ldrh	r2, [r2, #0]
 8005270:	2180      	movs	r1, #128	; 0x80
 8005272:	0149      	lsls	r1, r1, #5
 8005274:	404a      	eors	r2, r1
 8005276:	801a      	strh	r2, [r3, #0]
 8005278:	183b      	adds	r3, r7, r0
 800527a:	183a      	adds	r2, r7, r0
 800527c:	8812      	ldrh	r2, [r2, #0]
 800527e:	2180      	movs	r1, #128	; 0x80
 8005280:	0189      	lsls	r1, r1, #6
 8005282:	404a      	eors	r2, r1
 8005284:	801a      	strh	r2, [r3, #0]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	18d3      	adds	r3, r2, r3
 8005290:	183a      	adds	r2, r7, r0
 8005292:	8812      	ldrh	r2, [r2, #0]
 8005294:	4906      	ldr	r1, [pc, #24]	; (80052b0 <USB_EPStartXfer+0x126c>)
 8005296:	430a      	orrs	r2, r1
 8005298:	b292      	uxth	r2, r2
 800529a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	0018      	movs	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b043      	add	sp, #268	; 0x10c
 80052a4:	bd90      	pop	{r4, r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	00000406 	.word	0x00000406
 80052ac:	ffffbf8f 	.word	0xffffbf8f
 80052b0:	ffff8080 	.word	0xffff8080

080052b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01d      	beq.n	8005302 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	18d3      	adds	r3, r2, r3
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	200c      	movs	r0, #12
 80052d6:	183b      	adds	r3, r7, r0
 80052d8:	491b      	ldr	r1, [pc, #108]	; (8005348 <USB_EPSetStall+0x94>)
 80052da:	400a      	ands	r2, r1
 80052dc:	801a      	strh	r2, [r3, #0]
 80052de:	183b      	adds	r3, r7, r0
 80052e0:	183a      	adds	r2, r7, r0
 80052e2:	8812      	ldrh	r2, [r2, #0]
 80052e4:	2110      	movs	r1, #16
 80052e6:	404a      	eors	r2, r1
 80052e8:	801a      	strh	r2, [r3, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	18d3      	adds	r3, r2, r3
 80052f4:	183a      	adds	r2, r7, r0
 80052f6:	8812      	ldrh	r2, [r2, #0]
 80052f8:	4914      	ldr	r1, [pc, #80]	; (800534c <USB_EPSetStall+0x98>)
 80052fa:	430a      	orrs	r2, r1
 80052fc:	b292      	uxth	r2, r2
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e01d      	b.n	800533e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	18d3      	adds	r3, r2, r3
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29a      	uxth	r2, r3
 8005310:	200e      	movs	r0, #14
 8005312:	183b      	adds	r3, r7, r0
 8005314:	490e      	ldr	r1, [pc, #56]	; (8005350 <USB_EPSetStall+0x9c>)
 8005316:	400a      	ands	r2, r1
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	183b      	adds	r3, r7, r0
 800531c:	183a      	adds	r2, r7, r0
 800531e:	8812      	ldrh	r2, [r2, #0]
 8005320:	2180      	movs	r1, #128	; 0x80
 8005322:	0149      	lsls	r1, r1, #5
 8005324:	404a      	eors	r2, r1
 8005326:	801a      	strh	r2, [r3, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	18d3      	adds	r3, r2, r3
 8005332:	183a      	adds	r2, r7, r0
 8005334:	8812      	ldrh	r2, [r2, #0]
 8005336:	4905      	ldr	r1, [pc, #20]	; (800534c <USB_EPSetStall+0x98>)
 8005338:	430a      	orrs	r2, r1
 800533a:	b292      	uxth	r2, r2
 800533c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	0018      	movs	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	b004      	add	sp, #16
 8005346:	bd80      	pop	{r7, pc}
 8005348:	ffff8fbf 	.word	0xffff8fbf
 800534c:	ffff8080 	.word	0xffff8080
 8005350:	ffffbf8f 	.word	0xffffbf8f

08005354 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	7b1b      	ldrb	r3, [r3, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d000      	beq.n	8005368 <USB_EPClearStall+0x14>
 8005366:	e095      	b.n	8005494 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	785b      	ldrb	r3, [r3, #1]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d046      	beq.n	80053fe <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	18d2      	adds	r2, r2, r3
 800537a:	2110      	movs	r1, #16
 800537c:	187b      	adds	r3, r7, r1
 800537e:	8812      	ldrh	r2, [r2, #0]
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	187b      	adds	r3, r7, r1
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	2240      	movs	r2, #64	; 0x40
 8005388:	4013      	ands	r3, r2
 800538a:	d016      	beq.n	80053ba <USB_EPClearStall+0x66>
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	18d3      	adds	r3, r2, r3
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29a      	uxth	r2, r3
 800539a:	200e      	movs	r0, #14
 800539c:	183b      	adds	r3, r7, r0
 800539e:	4940      	ldr	r1, [pc, #256]	; (80054a0 <USB_EPClearStall+0x14c>)
 80053a0:	400a      	ands	r2, r1
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	18d3      	adds	r3, r2, r3
 80053ae:	183a      	adds	r2, r7, r0
 80053b0:	8812      	ldrh	r2, [r2, #0]
 80053b2:	493c      	ldr	r1, [pc, #240]	; (80054a4 <USB_EPClearStall+0x150>)
 80053b4:	430a      	orrs	r2, r1
 80053b6:	b292      	uxth	r2, r2
 80053b8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	78db      	ldrb	r3, [r3, #3]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d068      	beq.n	8005494 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	18d3      	adds	r3, r2, r3
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	200c      	movs	r0, #12
 80053d2:	183b      	adds	r3, r7, r0
 80053d4:	4934      	ldr	r1, [pc, #208]	; (80054a8 <USB_EPClearStall+0x154>)
 80053d6:	400a      	ands	r2, r1
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	183b      	adds	r3, r7, r0
 80053dc:	183a      	adds	r2, r7, r0
 80053de:	8812      	ldrh	r2, [r2, #0]
 80053e0:	2120      	movs	r1, #32
 80053e2:	404a      	eors	r2, r1
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	18d3      	adds	r3, r2, r3
 80053f0:	183a      	adds	r2, r7, r0
 80053f2:	8812      	ldrh	r2, [r2, #0]
 80053f4:	492d      	ldr	r1, [pc, #180]	; (80054ac <USB_EPClearStall+0x158>)
 80053f6:	430a      	orrs	r2, r1
 80053f8:	b292      	uxth	r2, r2
 80053fa:	801a      	strh	r2, [r3, #0]
 80053fc:	e04a      	b.n	8005494 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	18d2      	adds	r2, r2, r3
 8005408:	2116      	movs	r1, #22
 800540a:	187b      	adds	r3, r7, r1
 800540c:	8812      	ldrh	r2, [r2, #0]
 800540e:	801a      	strh	r2, [r3, #0]
 8005410:	187b      	adds	r3, r7, r1
 8005412:	881a      	ldrh	r2, [r3, #0]
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	01db      	lsls	r3, r3, #7
 8005418:	4013      	ands	r3, r2
 800541a:	d016      	beq.n	800544a <USB_EPClearStall+0xf6>
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	18d3      	adds	r3, r2, r3
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29a      	uxth	r2, r3
 800542a:	2014      	movs	r0, #20
 800542c:	183b      	adds	r3, r7, r0
 800542e:	491c      	ldr	r1, [pc, #112]	; (80054a0 <USB_EPClearStall+0x14c>)
 8005430:	400a      	ands	r2, r1
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	18d3      	adds	r3, r2, r3
 800543e:	183a      	adds	r2, r7, r0
 8005440:	8812      	ldrh	r2, [r2, #0]
 8005442:	491b      	ldr	r1, [pc, #108]	; (80054b0 <USB_EPClearStall+0x15c>)
 8005444:	430a      	orrs	r2, r1
 8005446:	b292      	uxth	r2, r2
 8005448:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	18d3      	adds	r3, r2, r3
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29a      	uxth	r2, r3
 8005458:	2012      	movs	r0, #18
 800545a:	183b      	adds	r3, r7, r0
 800545c:	4915      	ldr	r1, [pc, #84]	; (80054b4 <USB_EPClearStall+0x160>)
 800545e:	400a      	ands	r2, r1
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	183b      	adds	r3, r7, r0
 8005464:	183a      	adds	r2, r7, r0
 8005466:	8812      	ldrh	r2, [r2, #0]
 8005468:	2180      	movs	r1, #128	; 0x80
 800546a:	0149      	lsls	r1, r1, #5
 800546c:	404a      	eors	r2, r1
 800546e:	801a      	strh	r2, [r3, #0]
 8005470:	183b      	adds	r3, r7, r0
 8005472:	183a      	adds	r2, r7, r0
 8005474:	8812      	ldrh	r2, [r2, #0]
 8005476:	2180      	movs	r1, #128	; 0x80
 8005478:	0189      	lsls	r1, r1, #6
 800547a:	404a      	eors	r2, r1
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	18d3      	adds	r3, r2, r3
 8005488:	183a      	adds	r2, r7, r0
 800548a:	8812      	ldrh	r2, [r2, #0]
 800548c:	4907      	ldr	r1, [pc, #28]	; (80054ac <USB_EPClearStall+0x158>)
 800548e:	430a      	orrs	r2, r1
 8005490:	b292      	uxth	r2, r2
 8005492:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	0018      	movs	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	b006      	add	sp, #24
 800549c:	bd80      	pop	{r7, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	ffff8f8f 	.word	0xffff8f8f
 80054a4:	ffff80c0 	.word	0xffff80c0
 80054a8:	ffff8fbf 	.word	0xffff8fbf
 80054ac:	ffff8080 	.word	0xffff8080
 80054b0:	ffffc080 	.word	0xffffc080
 80054b4:	ffffbf8f 	.word	0xffffbf8f

080054b8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	000a      	movs	r2, r1
 80054c2:	1cfb      	adds	r3, r7, #3
 80054c4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80054c6:	1cfb      	adds	r3, r7, #3
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d103      	bne.n	80054d6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	224c      	movs	r2, #76	; 0x4c
 80054d2:	2180      	movs	r1, #128	; 0x80
 80054d4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	b002      	add	sp, #8
 80054de:	bd80      	pop	{r7, pc}

080054e0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2258      	movs	r2, #88	; 0x58
 80054ec:	5a9b      	ldrh	r3, [r3, r2]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	4a05      	ldr	r2, [pc, #20]	; (8005508 <USB_DevConnect+0x28>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	b299      	uxth	r1, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2258      	movs	r2, #88	; 0x58
 80054fa:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	0018      	movs	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	b002      	add	sp, #8
 8005504:	bd80      	pop	{r7, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	ffff8000 	.word	0xffff8000

0800550c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2244      	movs	r2, #68	; 0x44
 8005518:	5a9b      	ldrh	r3, [r3, r2]
 800551a:	b29b      	uxth	r3, r3
 800551c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800551e:	68fb      	ldr	r3, [r7, #12]
}
 8005520:	0018      	movs	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	b004      	add	sp, #16
 8005526:	bd80      	pop	{r7, pc}

08005528 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	0019      	movs	r1, r3
 8005534:	1dbb      	adds	r3, r7, #6
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	1d3b      	adds	r3, r7, #4
 800553a:	1c0a      	adds	r2, r1, #0
 800553c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800553e:	1d3b      	adds	r3, r7, #4
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005550:	1dbb      	adds	r3, r7, #6
 8005552:	881a      	ldrh	r2, [r3, #0]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	18d3      	adds	r3, r2, r3
 8005558:	2280      	movs	r2, #128	; 0x80
 800555a:	00d2      	lsls	r2, r2, #3
 800555c:	4694      	mov	ip, r2
 800555e:	4463      	add	r3, ip
 8005560:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
 8005566:	e020      	b.n	80055aa <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	781a      	ldrb	r2, [r3, #0]
 800556c:	2112      	movs	r1, #18
 800556e:	187b      	adds	r3, r7, r1
 8005570:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3301      	adds	r3, #1
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	b21a      	sxth	r2, r3
 800557c:	187b      	adds	r3, r7, r1
 800557e:	2000      	movs	r0, #0
 8005580:	5e1b      	ldrsh	r3, [r3, r0]
 8005582:	4313      	orrs	r3, r2
 8005584:	b21a      	sxth	r2, r3
 8005586:	187b      	adds	r3, r7, r1
 8005588:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	187a      	adds	r2, r7, r1
 800558e:	8812      	ldrh	r2, [r2, #0]
 8005590:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	3302      	adds	r3, #2
 8005596:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	3301      	adds	r3, #1
 800559c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3301      	adds	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	3b01      	subs	r3, #1
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1db      	bne.n	8005568 <USB_WritePMA+0x40>
  }
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b00a      	add	sp, #40	; 0x28
 80055b8:	bd80      	pop	{r7, pc}

080055ba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b08a      	sub	sp, #40	; 0x28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	0019      	movs	r1, r3
 80055c6:	1dbb      	adds	r3, r7, #6
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	1d3b      	adds	r3, r7, #4
 80055cc:	1c0a      	adds	r2, r1, #0
 80055ce:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055e2:	1dbb      	adds	r3, r7, #6
 80055e4:	881a      	ldrh	r2, [r3, #0]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	18d3      	adds	r3, r2, r3
 80055ea:	2280      	movs	r2, #128	; 0x80
 80055ec:	00d2      	lsls	r2, r2, #3
 80055ee:	4694      	mov	ip, r2
 80055f0:	4463      	add	r3, ip
 80055f2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
 80055f8:	e018      	b.n	800562c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	3302      	adds	r3, #2
 8005606:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	b2da      	uxtb	r2, r3
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	3301      	adds	r3, #1
 8005614:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	0a1b      	lsrs	r3, r3, #8
 800561a:	b2da      	uxtb	r2, r3
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	3301      	adds	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	3b01      	subs	r3, #1
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e3      	bne.n	80055fa <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005632:	1d3b      	adds	r3, r7, #4
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	2201      	movs	r2, #1
 8005638:	4013      	ands	r3, r2
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	b2da      	uxtb	r2, r3
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	701a      	strb	r2, [r3, #0]
  }
}
 8005650:	46c0      	nop			; (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b00a      	add	sp, #40	; 0x28
 8005656:	bd80      	pop	{r7, pc}

08005658 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	000a      	movs	r2, r1
 8005662:	1cfb      	adds	r3, r7, #3
 8005664:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	2304      	movs	r3, #4
 800566a:	2203      	movs	r2, #3
 800566c:	2181      	movs	r1, #129	; 0x81
 800566e:	f001 fe5a 	bl	8007326 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005678:	2010      	movs	r0, #16
 800567a:	f001 ffd7 	bl	800762c <USBD_static_malloc>
 800567e:	0001      	movs	r1, r0
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	23ae      	movs	r3, #174	; 0xae
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	23ae      	movs	r3, #174	; 0xae
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	58d3      	ldr	r3, [r2, r3]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 8005694:	2302      	movs	r3, #2
 8005696:	e006      	b.n	80056a6 <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	23ae      	movs	r3, #174	; 0xae
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	58d3      	ldr	r3, [r2, r3]
 80056a0:	2200      	movs	r2, #0
 80056a2:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b002      	add	sp, #8
 80056ac:	bd80      	pop	{r7, pc}

080056ae <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	000a      	movs	r2, r1
 80056b8:	1cfb      	adds	r3, r7, #3
 80056ba:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2181      	movs	r1, #129	; 0x81
 80056c0:	0018      	movs	r0, r3
 80056c2:	f001 fe67 	bl	8007394 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	23ae      	movs	r3, #174	; 0xae
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	58d3      	ldr	r3, [r2, r3]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	23ae      	movs	r3, #174	; 0xae
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	58d3      	ldr	r3, [r2, r3]
 80056e0:	0018      	movs	r0, r3
 80056e2:	f001 ffaf 	bl	8007644 <USBD_static_free>
    pdev->pClassData = NULL;
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	23ae      	movs	r3, #174	; 0xae
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	2100      	movs	r1, #0
 80056ee:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	0018      	movs	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	b002      	add	sp, #8
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	23ae      	movs	r3, #174	; 0xae
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	58d3      	ldr	r3, [r2, r3]
 800570e:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005710:	231e      	movs	r3, #30
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	2200      	movs	r2, #0
 8005716:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8005718:	2300      	movs	r3, #0
 800571a:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800571c:	230e      	movs	r3, #14
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	2200      	movs	r2, #0
 8005722:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005724:	2317      	movs	r3, #23
 8005726:	18fb      	adds	r3, r7, r3
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	001a      	movs	r2, r3
 8005732:	2360      	movs	r3, #96	; 0x60
 8005734:	4013      	ands	r3, r2
 8005736:	d03a      	beq.n	80057ae <USBD_HID_Setup+0xb2>
 8005738:	2b20      	cmp	r3, #32
 800573a:	d000      	beq.n	800573e <USBD_HID_Setup+0x42>
 800573c:	e0d6      	b.n	80058ec <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	2b0b      	cmp	r3, #11
 8005744:	d008      	beq.n	8005758 <USBD_HID_Setup+0x5c>
 8005746:	dc26      	bgt.n	8005796 <USBD_HID_Setup+0x9a>
 8005748:	2b0a      	cmp	r3, #10
 800574a:	d013      	beq.n	8005774 <USBD_HID_Setup+0x78>
 800574c:	dc23      	bgt.n	8005796 <USBD_HID_Setup+0x9a>
 800574e:	2b02      	cmp	r3, #2
 8005750:	d019      	beq.n	8005786 <USBD_HID_Setup+0x8a>
 8005752:	2b03      	cmp	r3, #3
 8005754:	d007      	beq.n	8005766 <USBD_HID_Setup+0x6a>
 8005756:	e01e      	b.n	8005796 <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	885b      	ldrh	r3, [r3, #2]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	001a      	movs	r2, r3
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	601a      	str	r2, [r3, #0]
          break;
 8005764:	e022      	b.n	80057ac <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005766:	6939      	ldr	r1, [r7, #16]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	0018      	movs	r0, r3
 800576e:	f001 fabf 	bl	8006cf0 <USBD_CtlSendData>
          break;
 8005772:	e01b      	b.n	80057ac <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	885b      	ldrh	r3, [r3, #2]
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	b29b      	uxth	r3, r3
 800577c:	b2db      	uxtb	r3, r3
 800577e:	001a      	movs	r2, r3
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	605a      	str	r2, [r3, #4]
          break;
 8005784:	e012      	b.n	80057ac <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1d19      	adds	r1, r3, #4
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	0018      	movs	r0, r3
 8005790:	f001 faae 	bl	8006cf0 <USBD_CtlSendData>
          break;
 8005794:	e00a      	b.n	80057ac <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	0011      	movs	r1, r2
 800579c:	0018      	movs	r0, r3
 800579e:	f001 fa29 	bl	8006bf4 <USBD_CtlError>
          ret = USBD_FAIL;
 80057a2:	2317      	movs	r3, #23
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	2202      	movs	r2, #2
 80057a8:	701a      	strb	r2, [r3, #0]
          break;
 80057aa:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80057ac:	e0a9      	b.n	8005902 <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	2b0b      	cmp	r3, #11
 80057b4:	d100      	bne.n	80057b8 <USBD_HID_Setup+0xbc>
 80057b6:	e075      	b.n	80058a4 <USBD_HID_Setup+0x1a8>
 80057b8:	dd00      	ble.n	80057bc <USBD_HID_Setup+0xc0>
 80057ba:	e08b      	b.n	80058d4 <USBD_HID_Setup+0x1d8>
 80057bc:	2b0a      	cmp	r3, #10
 80057be:	d057      	beq.n	8005870 <USBD_HID_Setup+0x174>
 80057c0:	dd00      	ble.n	80057c4 <USBD_HID_Setup+0xc8>
 80057c2:	e087      	b.n	80058d4 <USBD_HID_Setup+0x1d8>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <USBD_HID_Setup+0xd2>
 80057c8:	2b06      	cmp	r3, #6
 80057ca:	d019      	beq.n	8005800 <USBD_HID_Setup+0x104>
 80057cc:	e082      	b.n	80058d4 <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	23a7      	movs	r3, #167	; 0xa7
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	5cd3      	ldrb	r3, [r2, r3]
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d107      	bne.n	80057ea <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80057da:	230e      	movs	r3, #14
 80057dc:	18f9      	adds	r1, r7, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	0018      	movs	r0, r3
 80057e4:	f001 fa84 	bl	8006cf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057e8:	e07f      	b.n	80058ea <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	0011      	movs	r1, r2
 80057f0:	0018      	movs	r0, r3
 80057f2:	f001 f9ff 	bl	8006bf4 <USBD_CtlError>
            ret = USBD_FAIL;
 80057f6:	2317      	movs	r3, #23
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	2202      	movs	r2, #2
 80057fc:	701a      	strb	r2, [r3, #0]
          break;
 80057fe:	e074      	b.n	80058ea <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	885b      	ldrh	r3, [r3, #2]
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	b29b      	uxth	r3, r3
 8005808:	2b22      	cmp	r3, #34	; 0x22
 800580a:	d10b      	bne.n	8005824 <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	88db      	ldrh	r3, [r3, #6]
 8005810:	221e      	movs	r2, #30
 8005812:	18ba      	adds	r2, r7, r2
 8005814:	b299      	uxth	r1, r3
 8005816:	294a      	cmp	r1, #74	; 0x4a
 8005818:	d900      	bls.n	800581c <USBD_HID_Setup+0x120>
 800581a:	234a      	movs	r3, #74	; 0x4a
 800581c:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 800581e:	4b3c      	ldr	r3, [pc, #240]	; (8005910 <USBD_HID_Setup+0x214>)
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	e01c      	b.n	800585e <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	885b      	ldrh	r3, [r3, #2]
 8005828:	0a1b      	lsrs	r3, r3, #8
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b21      	cmp	r3, #33	; 0x21
 800582e:	d10b      	bne.n	8005848 <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 8005830:	4b38      	ldr	r3, [pc, #224]	; (8005914 <USBD_HID_Setup+0x218>)
 8005832:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	88db      	ldrh	r3, [r3, #6]
 8005838:	221e      	movs	r2, #30
 800583a:	18ba      	adds	r2, r7, r2
 800583c:	b299      	uxth	r1, r3
 800583e:	2909      	cmp	r1, #9
 8005840:	d900      	bls.n	8005844 <USBD_HID_Setup+0x148>
 8005842:	2309      	movs	r3, #9
 8005844:	8013      	strh	r3, [r2, #0]
 8005846:	e00a      	b.n	800585e <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	0011      	movs	r1, r2
 800584e:	0018      	movs	r0, r3
 8005850:	f001 f9d0 	bl	8006bf4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005854:	2317      	movs	r3, #23
 8005856:	18fb      	adds	r3, r7, r3
 8005858:	2202      	movs	r2, #2
 800585a:	701a      	strb	r2, [r3, #0]
            break;
 800585c:	e045      	b.n	80058ea <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800585e:	231e      	movs	r3, #30
 8005860:	18fb      	adds	r3, r7, r3
 8005862:	881a      	ldrh	r2, [r3, #0]
 8005864:	69b9      	ldr	r1, [r7, #24]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	0018      	movs	r0, r3
 800586a:	f001 fa41 	bl	8006cf0 <USBD_CtlSendData>
          break;
 800586e:	e03c      	b.n	80058ea <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	23a7      	movs	r3, #167	; 0xa7
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	5cd3      	ldrb	r3, [r2, r3]
 8005878:	2b03      	cmp	r3, #3
 800587a:	d108      	bne.n	800588e <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	3308      	adds	r3, #8
 8005880:	0019      	movs	r1, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	0018      	movs	r0, r3
 8005888:	f001 fa32 	bl	8006cf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800588c:	e02d      	b.n	80058ea <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	0011      	movs	r1, r2
 8005894:	0018      	movs	r0, r3
 8005896:	f001 f9ad 	bl	8006bf4 <USBD_CtlError>
            ret = USBD_FAIL;
 800589a:	2317      	movs	r3, #23
 800589c:	18fb      	adds	r3, r7, r3
 800589e:	2202      	movs	r2, #2
 80058a0:	701a      	strb	r2, [r3, #0]
          break;
 80058a2:	e022      	b.n	80058ea <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	23a7      	movs	r3, #167	; 0xa7
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	5cd3      	ldrb	r3, [r2, r3]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d106      	bne.n	80058be <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	885b      	ldrh	r3, [r3, #2]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	001a      	movs	r2, r3
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058bc:	e015      	b.n	80058ea <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	0011      	movs	r1, r2
 80058c4:	0018      	movs	r0, r3
 80058c6:	f001 f995 	bl	8006bf4 <USBD_CtlError>
            ret = USBD_FAIL;
 80058ca:	2317      	movs	r3, #23
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	2202      	movs	r2, #2
 80058d0:	701a      	strb	r2, [r3, #0]
          break;
 80058d2:	e00a      	b.n	80058ea <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	0011      	movs	r1, r2
 80058da:	0018      	movs	r0, r3
 80058dc:	f001 f98a 	bl	8006bf4 <USBD_CtlError>
          ret = USBD_FAIL;
 80058e0:	2317      	movs	r3, #23
 80058e2:	18fb      	adds	r3, r7, r3
 80058e4:	2202      	movs	r2, #2
 80058e6:	701a      	strb	r2, [r3, #0]
          break;
 80058e8:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80058ea:	e00a      	b.n	8005902 <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	0011      	movs	r1, r2
 80058f2:	0018      	movs	r0, r3
 80058f4:	f001 f97e 	bl	8006bf4 <USBD_CtlError>
      ret = USBD_FAIL;
 80058f8:	2317      	movs	r3, #23
 80058fa:	18fb      	adds	r3, r7, r3
 80058fc:	2202      	movs	r2, #2
 80058fe:	701a      	strb	r2, [r3, #0]
      break;
 8005900:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005902:	2317      	movs	r3, #23
 8005904:	18fb      	adds	r3, r7, r3
 8005906:	781b      	ldrb	r3, [r3, #0]
}
 8005908:	0018      	movs	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	b008      	add	sp, #32
 800590e:	bd80      	pop	{r7, pc}
 8005910:	200000c8 	.word	0x200000c8
 8005914:	200000b0 	.word	0x200000b0

08005918 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	1dbb      	adds	r3, r7, #6
 8005924:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	23ae      	movs	r3, #174	; 0xae
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	58d3      	ldr	r3, [r2, r3]
 800592e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	23a7      	movs	r3, #167	; 0xa7
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	5cd3      	ldrb	r3, [r2, r3]
 8005938:	2b03      	cmp	r3, #3
 800593a:	d10d      	bne.n	8005958 <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	7b1b      	ldrb	r3, [r3, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2201      	movs	r2, #1
 8005948:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800594a:	1dbb      	adds	r3, r7, #6
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	2181      	movs	r1, #129	; 0x81
 8005954:	f001 fdfb 	bl	800754e <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	0018      	movs	r0, r3
 800595c:	46bd      	mov	sp, r7
 800595e:	b006      	add	sp, #24
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2222      	movs	r2, #34	; 0x22
 8005970:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005972:	4b02      	ldr	r3, [pc, #8]	; (800597c <USBD_HID_GetFSCfgDesc+0x18>)
}
 8005974:	0018      	movs	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	b002      	add	sp, #8
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000044 	.word	0x20000044

08005980 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2222      	movs	r2, #34	; 0x22
 800598c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800598e:	4b02      	ldr	r3, [pc, #8]	; (8005998 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8005990:	0018      	movs	r0, r3
 8005992:	46bd      	mov	sp, r7
 8005994:	b002      	add	sp, #8
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20000068 	.word	0x20000068

0800599c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2222      	movs	r2, #34	; 0x22
 80059a8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80059aa:	4b02      	ldr	r3, [pc, #8]	; (80059b4 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 80059ac:	0018      	movs	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b002      	add	sp, #8
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	2000008c 	.word	0x2000008c

080059b8 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	000a      	movs	r2, r1
 80059c2:	1cfb      	adds	r3, r7, #3
 80059c4:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	23ae      	movs	r3, #174	; 0xae
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	58d3      	ldr	r3, [r2, r3]
 80059ce:	2200      	movs	r2, #0
 80059d0:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	0018      	movs	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b002      	add	sp, #8
 80059da:	bd80      	pop	{r7, pc}

080059dc <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	220a      	movs	r2, #10
 80059e8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80059ea:	4b02      	ldr	r3, [pc, #8]	; (80059f4 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 80059ec:	0018      	movs	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b002      	add	sp, #8
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	200000bc 	.word	0x200000bc

080059f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	1dfb      	adds	r3, r7, #7
 8005a04:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e020      	b.n	8005a52 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	23ad      	movs	r3, #173	; 0xad
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	58d3      	ldr	r3, [r2, r3]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	23ad      	movs	r3, #173	; 0xad
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	2100      	movs	r1, #0
 8005a24:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	23ac      	movs	r3, #172	; 0xac
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	23a7      	movs	r3, #167	; 0xa7
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	1dfa      	adds	r2, r7, #7
 8005a44:	7812      	ldrb	r2, [r2, #0]
 8005a46:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f001 fbf6 	bl	800723c <USBD_LL_Init>

  return USBD_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b004      	add	sp, #16
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005a64:	200f      	movs	r0, #15
 8005a66:	183b      	adds	r3, r7, r0
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d008      	beq.n	8005a84 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	23ad      	movs	r3, #173	; 0xad
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005a7c:	183b      	adds	r3, r7, r0
 8005a7e:	2200      	movs	r2, #0
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	e003      	b.n	8005a8c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005a84:	230f      	movs	r3, #15
 8005a86:	18fb      	adds	r3, r7, r3
 8005a88:	2202      	movs	r2, #2
 8005a8a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005a8c:	230f      	movs	r3, #15
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	781b      	ldrb	r3, [r3, #0]
}
 8005a92:	0018      	movs	r0, r3
 8005a94:	46bd      	mov	sp, r7
 8005a96:	b004      	add	sp, #16
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f001 fc19 	bl	80072dc <USBD_LL_Start>

  return USBD_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	0018      	movs	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	0018      	movs	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b002      	add	sp, #8
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005ac6:	b590      	push	{r4, r7, lr}
 8005ac8:	b085      	sub	sp, #20
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	000a      	movs	r2, r1
 8005ad0:	1cfb      	adds	r3, r7, #3
 8005ad2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ad4:	240f      	movs	r4, #15
 8005ad6:	193b      	adds	r3, r7, r4
 8005ad8:	2202      	movs	r2, #2
 8005ada:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	23ad      	movs	r3, #173	; 0xad
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	58d3      	ldr	r3, [r2, r3]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	23ad      	movs	r3, #173	; 0xad
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	58d3      	ldr	r3, [r2, r3]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	1cfa      	adds	r2, r7, #3
 8005af4:	7811      	ldrb	r1, [r2, #0]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	0010      	movs	r0, r2
 8005afa:	4798      	blx	r3
 8005afc:	1e03      	subs	r3, r0, #0
 8005afe:	d102      	bne.n	8005b06 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005b00:	193b      	adds	r3, r7, r4
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005b06:	230f      	movs	r3, #15
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	781b      	ldrb	r3, [r3, #0]
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b005      	add	sp, #20
 8005b12:	bd90      	pop	{r4, r7, pc}

08005b14 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	000a      	movs	r2, r1
 8005b1e:	1cfb      	adds	r3, r7, #3
 8005b20:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	23ad      	movs	r3, #173	; 0xad
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	58d3      	ldr	r3, [r2, r3]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	1cfa      	adds	r2, r7, #3
 8005b2e:	7811      	ldrb	r1, [r2, #0]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	0010      	movs	r0, r2
 8005b34:	4798      	blx	r3

  return USBD_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	0018      	movs	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b002      	add	sp, #8
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	22aa      	movs	r2, #170	; 0xaa
 8005b4e:	0092      	lsls	r2, r2, #2
 8005b50:	4694      	mov	ip, r2
 8005b52:	4463      	add	r3, ip
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	0011      	movs	r1, r2
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f001 f810 	bl	8006b7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	23a5      	movs	r3, #165	; 0xa5
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	2101      	movs	r1, #1
 8005b66:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a23      	ldr	r2, [pc, #140]	; (8005bf8 <USBD_LL_SetupStage+0xb8>)
 8005b6c:	5a9b      	ldrh	r3, [r3, r2]
 8005b6e:	0019      	movs	r1, r3
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	23a6      	movs	r3, #166	; 0xa6
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	23aa      	movs	r3, #170	; 0xaa
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	5cd3      	ldrb	r3, [r2, r3]
 8005b80:	001a      	movs	r2, r3
 8005b82:	231f      	movs	r3, #31
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d019      	beq.n	8005bbe <USBD_LL_SetupStage+0x7e>
 8005b8a:	d822      	bhi.n	8005bd2 <USBD_LL_SetupStage+0x92>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <USBD_LL_SetupStage+0x56>
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d00a      	beq.n	8005baa <USBD_LL_SetupStage+0x6a>
 8005b94:	e01d      	b.n	8005bd2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	22aa      	movs	r2, #170	; 0xaa
 8005b9a:	0092      	lsls	r2, r2, #2
 8005b9c:	189a      	adds	r2, r3, r2
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	0011      	movs	r1, r2
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f000 fa10 	bl	8005fc8 <USBD_StdDevReq>
      break;
 8005ba8:	e020      	b.n	8005bec <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	22aa      	movs	r2, #170	; 0xaa
 8005bae:	0092      	lsls	r2, r2, #2
 8005bb0:	189a      	adds	r2, r3, r2
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	0011      	movs	r1, r2
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f000 fa78 	bl	80060ac <USBD_StdItfReq>
      break;
 8005bbc:	e016      	b.n	8005bec <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	22aa      	movs	r2, #170	; 0xaa
 8005bc2:	0092      	lsls	r2, r2, #2
 8005bc4:	189a      	adds	r2, r3, r2
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	0011      	movs	r1, r2
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f000 fac5 	bl	800615a <USBD_StdEPReq>
      break;
 8005bd0:	e00c      	b.n	8005bec <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	23aa      	movs	r3, #170	; 0xaa
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	5cd3      	ldrb	r3, [r2, r3]
 8005bda:	227f      	movs	r2, #127	; 0x7f
 8005bdc:	4393      	bics	r3, r2
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	0011      	movs	r1, r2
 8005be4:	0018      	movs	r0, r3
 8005be6:	f001 fc00 	bl	80073ea <USBD_LL_StallEP>
      break;
 8005bea:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	0018      	movs	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b002      	add	sp, #8
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	000002ae 	.word	0x000002ae

08005bfc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	200b      	movs	r0, #11
 8005c08:	183b      	adds	r3, r7, r0
 8005c0a:	1c0a      	adds	r2, r1, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c0e:	183b      	adds	r3, r7, r0
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d154      	bne.n	8005cc0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3355      	adds	r3, #85	; 0x55
 8005c1a:	33ff      	adds	r3, #255	; 0xff
 8005c1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	23a5      	movs	r3, #165	; 0xa5
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	58d3      	ldr	r3, [r2, r3]
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d139      	bne.n	8005c9e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d919      	bls.n	8005c6a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	1ad2      	subs	r2, r2, r3
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d203      	bcs.n	8005c58 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	e002      	b.n	8005c5e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	001a      	movs	r2, r3
 8005c64:	f001 f877 	bl	8006d56 <USBD_CtlContinueRx>
 8005c68:	e045      	b.n	8005cf6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	23ad      	movs	r3, #173	; 0xad
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	58d3      	ldr	r3, [r2, r3]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00d      	beq.n	8005c94 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	23a7      	movs	r3, #167	; 0xa7
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d107      	bne.n	8005c94 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	23ad      	movs	r3, #173	; 0xad
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	58d3      	ldr	r3, [r2, r3]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	0010      	movs	r0, r2
 8005c92:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	0018      	movs	r0, r3
 8005c98:	f001 f870 	bl	8006d7c <USBD_CtlSendStatus>
 8005c9c:	e02b      	b.n	8005cf6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	23a5      	movs	r3, #165	; 0xa5
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	58d3      	ldr	r3, [r2, r3]
 8005ca6:	2b05      	cmp	r3, #5
 8005ca8:	d125      	bne.n	8005cf6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	23a5      	movs	r3, #165	; 0xa5
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f001 fb96 	bl	80073ea <USBD_LL_StallEP>
 8005cbe:	e01a      	b.n	8005cf6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	23ad      	movs	r3, #173	; 0xad
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	58d3      	ldr	r3, [r2, r3]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d011      	beq.n	8005cf2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	23a7      	movs	r3, #167	; 0xa7
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d10b      	bne.n	8005cf2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	23ad      	movs	r3, #173	; 0xad
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	58d3      	ldr	r3, [r2, r3]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	220b      	movs	r2, #11
 8005ce6:	18ba      	adds	r2, r7, r2
 8005ce8:	7811      	ldrb	r1, [r2, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	0010      	movs	r0, r2
 8005cee:	4798      	blx	r3
 8005cf0:	e001      	b.n	8005cf6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e000      	b.n	8005cf8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b006      	add	sp, #24
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	200b      	movs	r0, #11
 8005d0c:	183b      	adds	r3, r7, r0
 8005d0e:	1c0a      	adds	r2, r1, #0
 8005d10:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d12:	183b      	adds	r3, r7, r0
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d000      	beq.n	8005d1c <USBD_LL_DataInStage+0x1c>
 8005d1a:	e08e      	b.n	8005e3a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3314      	adds	r3, #20
 8005d20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	23a5      	movs	r3, #165	; 0xa5
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	58d3      	ldr	r3, [r2, r3]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d164      	bne.n	8005df8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d915      	bls.n	8005d66 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	1ad2      	subs	r2, r2, r3
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	0018      	movs	r0, r3
 8005d54:	f000 ffec 	bl	8006d30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2100      	movs	r1, #0
 8005d60:	f001 fc2c 	bl	80075bc <USBD_LL_PrepareReceive>
 8005d64:	e059      	b.n	8005e1a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	0019      	movs	r1, r3
 8005d70:	0010      	movs	r0, r2
 8005d72:	f7fa fa4f 	bl	8000214 <__aeabi_uidivmod>
 8005d76:	1e0b      	subs	r3, r1, #0
 8005d78:	d11f      	bne.n	8005dba <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d319      	bcc.n	8005dba <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	68f9      	ldr	r1, [r7, #12]
 8005d8c:	23a6      	movs	r3, #166	; 0xa6
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d211      	bcs.n	8005dba <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f000 ffc7 	bl	8006d30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	23a6      	movs	r3, #166	; 0xa6
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	2100      	movs	r1, #0
 8005daa:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	2300      	movs	r3, #0
 8005db0:	2200      	movs	r2, #0
 8005db2:	2100      	movs	r1, #0
 8005db4:	f001 fc02 	bl	80075bc <USBD_LL_PrepareReceive>
 8005db8:	e02f      	b.n	8005e1a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	23ad      	movs	r3, #173	; 0xad
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	58d3      	ldr	r3, [r2, r3]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00d      	beq.n	8005de4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	23a7      	movs	r3, #167	; 0xa7
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d107      	bne.n	8005de4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	23ad      	movs	r3, #173	; 0xad
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	58d3      	ldr	r3, [r2, r3]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	0010      	movs	r0, r2
 8005de2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2180      	movs	r1, #128	; 0x80
 8005de8:	0018      	movs	r0, r3
 8005dea:	f001 fafe 	bl	80073ea <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	0018      	movs	r0, r3
 8005df2:	f000 ffd7 	bl	8006da4 <USBD_CtlReceiveStatus>
 8005df6:	e010      	b.n	8005e1a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	23a5      	movs	r3, #165	; 0xa5
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	58d3      	ldr	r3, [r2, r3]
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d005      	beq.n	8005e10 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	23a5      	movs	r3, #165	; 0xa5
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2180      	movs	r1, #128	; 0x80
 8005e14:	0018      	movs	r0, r3
 8005e16:	f001 fae8 	bl	80073ea <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	23a8      	movs	r3, #168	; 0xa8
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	5cd3      	ldrb	r3, [r2, r3]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d124      	bne.n	8005e70 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7ff fe43 	bl	8005ab4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	23a8      	movs	r3, #168	; 0xa8
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	2100      	movs	r1, #0
 8005e36:	54d1      	strb	r1, [r2, r3]
 8005e38:	e01a      	b.n	8005e70 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	23ad      	movs	r3, #173	; 0xad
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	58d3      	ldr	r3, [r2, r3]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d011      	beq.n	8005e6c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	23a7      	movs	r3, #167	; 0xa7
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d10b      	bne.n	8005e6c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	23ad      	movs	r3, #173	; 0xad
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	58d3      	ldr	r3, [r2, r3]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	220b      	movs	r2, #11
 8005e60:	18ba      	adds	r2, r7, r2
 8005e62:	7811      	ldrb	r1, [r2, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	0010      	movs	r0, r2
 8005e68:	4798      	blx	r3
 8005e6a:	e001      	b.n	8005e70 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e000      	b.n	8005e72 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	0018      	movs	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b006      	add	sp, #24
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	2340      	movs	r3, #64	; 0x40
 8005e86:	2200      	movs	r2, #0
 8005e88:	2100      	movs	r1, #0
 8005e8a:	f001 fa4c 	bl	8007326 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	23ac      	movs	r3, #172	; 0xac
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	2101      	movs	r1, #1
 8005e96:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	23b2      	movs	r3, #178	; 0xb2
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	2140      	movs	r1, #64	; 0x40
 8005ea0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	2340      	movs	r3, #64	; 0x40
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2180      	movs	r1, #128	; 0x80
 8005eaa:	f001 fa3c 	bl	8007326 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2240      	movs	r2, #64	; 0x40
 8005eb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	23a7      	movs	r3, #167	; 0xa7
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	23a5      	movs	r3, #165	; 0xa5
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	2100      	movs	r1, #0
 8005ecc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	23a9      	movs	r3, #169	; 0xa9
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	2100      	movs	r1, #0
 8005edc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	23ae      	movs	r3, #174	; 0xae
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	58d3      	ldr	r3, [r2, r3]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	23ad      	movs	r3, #173	; 0xad
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	58d3      	ldr	r3, [r2, r3]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	b2d9      	uxtb	r1, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	0018      	movs	r0, r3
 8005efe:	4790      	blx	r2
  }

  return USBD_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	0018      	movs	r0, r3
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b002      	add	sp, #8
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	000a      	movs	r2, r1
 8005f14:	1cfb      	adds	r3, r7, #3
 8005f16:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	1cfa      	adds	r2, r7, #3
 8005f1c:	7812      	ldrb	r2, [r2, #0]
 8005f1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	0018      	movs	r0, r3
 8005f24:	46bd      	mov	sp, r7
 8005f26:	b002      	add	sp, #8
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	23a7      	movs	r3, #167	; 0xa7
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	5cd1      	ldrb	r1, [r2, r3]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a06      	ldr	r2, [pc, #24]	; (8005f58 <USBD_LL_Suspend+0x2c>)
 8005f40:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	23a7      	movs	r3, #167	; 0xa7
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	2104      	movs	r1, #4
 8005f4a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	0018      	movs	r0, r3
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b002      	add	sp, #8
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	0000029d 	.word	0x0000029d

08005f5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	23a7      	movs	r3, #167	; 0xa7
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	5cd3      	ldrb	r3, [r2, r3]
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d106      	bne.n	8005f7e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a05      	ldr	r2, [pc, #20]	; (8005f88 <USBD_LL_Resume+0x2c>)
 8005f74:	5c99      	ldrb	r1, [r3, r2]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	23a7      	movs	r3, #167	; 0xa7
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	0018      	movs	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b002      	add	sp, #8
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	0000029d 	.word	0x0000029d

08005f8c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	23a7      	movs	r3, #167	; 0xa7
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	5cd3      	ldrb	r3, [r2, r3]
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d10e      	bne.n	8005fbe <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	23ad      	movs	r3, #173	; 0xad
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	58d3      	ldr	r3, [r2, r3]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	23ad      	movs	r3, #173	; 0xad
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	58d3      	ldr	r3, [r2, r3]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	0010      	movs	r0, r2
 8005fbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	b002      	add	sp, #8
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fd2:	230f      	movs	r3, #15
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	001a      	movs	r2, r3
 8005fe0:	2360      	movs	r3, #96	; 0x60
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b40      	cmp	r3, #64	; 0x40
 8005fe6:	d004      	beq.n	8005ff2 <USBD_StdDevReq+0x2a>
 8005fe8:	d84f      	bhi.n	800608a <USBD_StdDevReq+0xc2>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <USBD_StdDevReq+0x3e>
 8005fee:	2b20      	cmp	r3, #32
 8005ff0:	d14b      	bne.n	800608a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	23ad      	movs	r3, #173	; 0xad
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	58d3      	ldr	r3, [r2, r3]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	0010      	movs	r0, r2
 8006002:	4798      	blx	r3
      break;
 8006004:	e048      	b.n	8006098 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b09      	cmp	r3, #9
 800600c:	d835      	bhi.n	800607a <USBD_StdDevReq+0xb2>
 800600e:	009a      	lsls	r2, r3, #2
 8006010:	4b25      	ldr	r3, [pc, #148]	; (80060a8 <USBD_StdDevReq+0xe0>)
 8006012:	18d3      	adds	r3, r2, r3
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	0011      	movs	r1, r2
 800601e:	0018      	movs	r0, r3
 8006020:	f000 fa52 	bl	80064c8 <USBD_GetDescriptor>
          break;
 8006024:	e030      	b.n	8006088 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	0011      	movs	r1, r2
 800602c:	0018      	movs	r0, r3
 800602e:	f000 fbfd 	bl	800682c <USBD_SetAddress>
          break;
 8006032:	e029      	b.n	8006088 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	0011      	movs	r1, r2
 800603a:	0018      	movs	r0, r3
 800603c:	f000 fc4a 	bl	80068d4 <USBD_SetConfig>
          break;
 8006040:	e022      	b.n	8006088 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	0011      	movs	r1, r2
 8006048:	0018      	movs	r0, r3
 800604a:	f000 fce7 	bl	8006a1c <USBD_GetConfig>
          break;
 800604e:	e01b      	b.n	8006088 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	0011      	movs	r1, r2
 8006056:	0018      	movs	r0, r3
 8006058:	f000 fd1b 	bl	8006a92 <USBD_GetStatus>
          break;
 800605c:	e014      	b.n	8006088 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	0011      	movs	r1, r2
 8006064:	0018      	movs	r0, r3
 8006066:	f000 fd4e 	bl	8006b06 <USBD_SetFeature>
          break;
 800606a:	e00d      	b.n	8006088 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	0011      	movs	r1, r2
 8006072:	0018      	movs	r0, r3
 8006074:	f000 fd5d 	bl	8006b32 <USBD_ClrFeature>
          break;
 8006078:	e006      	b.n	8006088 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	0011      	movs	r1, r2
 8006080:	0018      	movs	r0, r3
 8006082:	f000 fdb7 	bl	8006bf4 <USBD_CtlError>
          break;
 8006086:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006088:	e006      	b.n	8006098 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	0011      	movs	r1, r2
 8006090:	0018      	movs	r0, r3
 8006092:	f000 fdaf 	bl	8006bf4 <USBD_CtlError>
      break;
 8006096:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006098:	230f      	movs	r3, #15
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	781b      	ldrb	r3, [r3, #0]
}
 800609e:	0018      	movs	r0, r3
 80060a0:	46bd      	mov	sp, r7
 80060a2:	b004      	add	sp, #16
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	080077a4 	.word	0x080077a4

080060ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80060ac:	b5b0      	push	{r4, r5, r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060b6:	230f      	movs	r3, #15
 80060b8:	18fb      	adds	r3, r7, r3
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	001a      	movs	r2, r3
 80060c4:	2360      	movs	r3, #96	; 0x60
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b40      	cmp	r3, #64	; 0x40
 80060ca:	d004      	beq.n	80060d6 <USBD_StdItfReq+0x2a>
 80060cc:	d839      	bhi.n	8006142 <USBD_StdItfReq+0x96>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <USBD_StdItfReq+0x2a>
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d135      	bne.n	8006142 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	23a7      	movs	r3, #167	; 0xa7
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	5cd3      	ldrb	r3, [r2, r3]
 80060de:	3b01      	subs	r3, #1
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d825      	bhi.n	8006130 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	889b      	ldrh	r3, [r3, #4]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d819      	bhi.n	8006122 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	23ad      	movs	r3, #173	; 0xad
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	58d3      	ldr	r3, [r2, r3]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	250f      	movs	r5, #15
 80060fa:	197c      	adds	r4, r7, r5
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	0010      	movs	r0, r2
 8006102:	4798      	blx	r3
 8006104:	0003      	movs	r3, r0
 8006106:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	88db      	ldrh	r3, [r3, #6]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d116      	bne.n	800613e <USBD_StdItfReq+0x92>
 8006110:	197b      	adds	r3, r7, r5
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d112      	bne.n	800613e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	0018      	movs	r0, r3
 800611c:	f000 fe2e 	bl	8006d7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006120:	e00d      	b.n	800613e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	0011      	movs	r1, r2
 8006128:	0018      	movs	r0, r3
 800612a:	f000 fd63 	bl	8006bf4 <USBD_CtlError>
          break;
 800612e:	e006      	b.n	800613e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	0011      	movs	r1, r2
 8006136:	0018      	movs	r0, r3
 8006138:	f000 fd5c 	bl	8006bf4 <USBD_CtlError>
          break;
 800613c:	e000      	b.n	8006140 <USBD_StdItfReq+0x94>
          break;
 800613e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006140:	e006      	b.n	8006150 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	0011      	movs	r1, r2
 8006148:	0018      	movs	r0, r3
 800614a:	f000 fd53 	bl	8006bf4 <USBD_CtlError>
      break;
 800614e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	0018      	movs	r0, r3
 8006154:	46bd      	mov	sp, r7
 8006156:	b004      	add	sp, #16
 8006158:	bdb0      	pop	{r4, r5, r7, pc}

0800615a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800615a:	b5b0      	push	{r4, r5, r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006164:	230f      	movs	r3, #15
 8006166:	18fb      	adds	r3, r7, r3
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	889a      	ldrh	r2, [r3, #4]
 8006170:	230e      	movs	r3, #14
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	001a      	movs	r2, r3
 800617c:	2360      	movs	r3, #96	; 0x60
 800617e:	4013      	ands	r3, r2
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	d006      	beq.n	8006192 <USBD_StdEPReq+0x38>
 8006184:	d900      	bls.n	8006188 <USBD_StdEPReq+0x2e>
 8006186:	e190      	b.n	80064aa <USBD_StdEPReq+0x350>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00c      	beq.n	80061a6 <USBD_StdEPReq+0x4c>
 800618c:	2b20      	cmp	r3, #32
 800618e:	d000      	beq.n	8006192 <USBD_StdEPReq+0x38>
 8006190:	e18b      	b.n	80064aa <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	23ad      	movs	r3, #173	; 0xad
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	58d3      	ldr	r3, [r2, r3]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	0010      	movs	r0, r2
 80061a2:	4798      	blx	r3
      break;
 80061a4:	e188      	b.n	80064b8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	001a      	movs	r2, r3
 80061ac:	2360      	movs	r3, #96	; 0x60
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d10f      	bne.n	80061d4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	23ad      	movs	r3, #173	; 0xad
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	58d3      	ldr	r3, [r2, r3]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	250f      	movs	r5, #15
 80061c0:	197c      	adds	r4, r7, r5
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	0010      	movs	r0, r2
 80061c8:	4798      	blx	r3
 80061ca:	0003      	movs	r3, r0
 80061cc:	7023      	strb	r3, [r4, #0]

        return ret;
 80061ce:	197b      	adds	r3, r7, r5
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	e174      	b.n	80064be <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d007      	beq.n	80061ec <USBD_StdEPReq+0x92>
 80061dc:	dd00      	ble.n	80061e0 <USBD_StdEPReq+0x86>
 80061de:	e15c      	b.n	800649a <USBD_StdEPReq+0x340>
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d100      	bne.n	80061e6 <USBD_StdEPReq+0x8c>
 80061e4:	e092      	b.n	800630c <USBD_StdEPReq+0x1b2>
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d04b      	beq.n	8006282 <USBD_StdEPReq+0x128>
 80061ea:	e156      	b.n	800649a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	23a7      	movs	r3, #167	; 0xa7
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	5cd3      	ldrb	r3, [r2, r3]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d002      	beq.n	80061fe <USBD_StdEPReq+0xa4>
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d01d      	beq.n	8006238 <USBD_StdEPReq+0xde>
 80061fc:	e039      	b.n	8006272 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061fe:	220e      	movs	r2, #14
 8006200:	18bb      	adds	r3, r7, r2
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d010      	beq.n	800622a <USBD_StdEPReq+0xd0>
 8006208:	18bb      	adds	r3, r7, r2
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b80      	cmp	r3, #128	; 0x80
 800620e:	d00c      	beq.n	800622a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006210:	18bb      	adds	r3, r7, r2
 8006212:	781a      	ldrb	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	0011      	movs	r1, r2
 8006218:	0018      	movs	r0, r3
 800621a:	f001 f8e6 	bl	80073ea <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2180      	movs	r1, #128	; 0x80
 8006222:	0018      	movs	r0, r3
 8006224:	f001 f8e1 	bl	80073ea <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006228:	e02a      	b.n	8006280 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	0011      	movs	r1, r2
 8006230:	0018      	movs	r0, r3
 8006232:	f000 fcdf 	bl	8006bf4 <USBD_CtlError>
              break;
 8006236:	e023      	b.n	8006280 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	885b      	ldrh	r3, [r3, #2]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d113      	bne.n	8006268 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006240:	220e      	movs	r2, #14
 8006242:	18bb      	adds	r3, r7, r2
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00e      	beq.n	8006268 <USBD_StdEPReq+0x10e>
 800624a:	18bb      	adds	r3, r7, r2
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b80      	cmp	r3, #128	; 0x80
 8006250:	d00a      	beq.n	8006268 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	88db      	ldrh	r3, [r3, #6]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800625a:	18bb      	adds	r3, r7, r2
 800625c:	781a      	ldrb	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	0011      	movs	r1, r2
 8006262:	0018      	movs	r0, r3
 8006264:	f001 f8c1 	bl	80073ea <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	0018      	movs	r0, r3
 800626c:	f000 fd86 	bl	8006d7c <USBD_CtlSendStatus>

              break;
 8006270:	e006      	b.n	8006280 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	0011      	movs	r1, r2
 8006278:	0018      	movs	r0, r3
 800627a:	f000 fcbb 	bl	8006bf4 <USBD_CtlError>
              break;
 800627e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006280:	e112      	b.n	80064a8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	23a7      	movs	r3, #167	; 0xa7
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	5cd3      	ldrb	r3, [r2, r3]
 800628a:	2b02      	cmp	r3, #2
 800628c:	d002      	beq.n	8006294 <USBD_StdEPReq+0x13a>
 800628e:	2b03      	cmp	r3, #3
 8006290:	d01d      	beq.n	80062ce <USBD_StdEPReq+0x174>
 8006292:	e032      	b.n	80062fa <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006294:	220e      	movs	r2, #14
 8006296:	18bb      	adds	r3, r7, r2
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d010      	beq.n	80062c0 <USBD_StdEPReq+0x166>
 800629e:	18bb      	adds	r3, r7, r2
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b80      	cmp	r3, #128	; 0x80
 80062a4:	d00c      	beq.n	80062c0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80062a6:	18bb      	adds	r3, r7, r2
 80062a8:	781a      	ldrb	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	0011      	movs	r1, r2
 80062ae:	0018      	movs	r0, r3
 80062b0:	f001 f89b 	bl	80073ea <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2180      	movs	r1, #128	; 0x80
 80062b8:	0018      	movs	r0, r3
 80062ba:	f001 f896 	bl	80073ea <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062be:	e024      	b.n	800630a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	0011      	movs	r1, r2
 80062c6:	0018      	movs	r0, r3
 80062c8:	f000 fc94 	bl	8006bf4 <USBD_CtlError>
              break;
 80062cc:	e01d      	b.n	800630a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	885b      	ldrh	r3, [r3, #2]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d118      	bne.n	8006308 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80062d6:	210e      	movs	r1, #14
 80062d8:	187b      	adds	r3, r7, r1
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	227f      	movs	r2, #127	; 0x7f
 80062de:	4013      	ands	r3, r2
 80062e0:	d006      	beq.n	80062f0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80062e2:	187b      	adds	r3, r7, r1
 80062e4:	781a      	ldrb	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	0011      	movs	r1, r2
 80062ea:	0018      	movs	r0, r3
 80062ec:	f001 f8a8 	bl	8007440 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	0018      	movs	r0, r3
 80062f4:	f000 fd42 	bl	8006d7c <USBD_CtlSendStatus>
              }
              break;
 80062f8:	e006      	b.n	8006308 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	0011      	movs	r1, r2
 8006300:	0018      	movs	r0, r3
 8006302:	f000 fc77 	bl	8006bf4 <USBD_CtlError>
              break;
 8006306:	e000      	b.n	800630a <USBD_StdEPReq+0x1b0>
              break;
 8006308:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800630a:	e0cd      	b.n	80064a8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	23a7      	movs	r3, #167	; 0xa7
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	5cd3      	ldrb	r3, [r2, r3]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d002      	beq.n	800631e <USBD_StdEPReq+0x1c4>
 8006318:	2b03      	cmp	r3, #3
 800631a:	d03c      	beq.n	8006396 <USBD_StdEPReq+0x23c>
 800631c:	e0b5      	b.n	800648a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800631e:	220e      	movs	r2, #14
 8006320:	18bb      	adds	r3, r7, r2
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <USBD_StdEPReq+0x1e4>
 8006328:	18bb      	adds	r3, r7, r2
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b80      	cmp	r3, #128	; 0x80
 800632e:	d006      	beq.n	800633e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	0011      	movs	r1, r2
 8006336:	0018      	movs	r0, r3
 8006338:	f000 fc5c 	bl	8006bf4 <USBD_CtlError>
                break;
 800633c:	e0ac      	b.n	8006498 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800633e:	220e      	movs	r2, #14
 8006340:	18bb      	adds	r3, r7, r2
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	b25b      	sxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	da0c      	bge.n	8006364 <USBD_StdEPReq+0x20a>
 800634a:	18bb      	adds	r3, r7, r2
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	227f      	movs	r2, #127	; 0x7f
 8006350:	401a      	ands	r2, r3
 8006352:	0013      	movs	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	189b      	adds	r3, r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	3310      	adds	r3, #16
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	18d3      	adds	r3, r2, r3
 8006360:	3304      	adds	r3, #4
 8006362:	e00d      	b.n	8006380 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006364:	230e      	movs	r3, #14
 8006366:	18fb      	adds	r3, r7, r3
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	227f      	movs	r2, #127	; 0x7f
 800636c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800636e:	0013      	movs	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	189b      	adds	r3, r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	3351      	adds	r3, #81	; 0x51
 8006378:	33ff      	adds	r3, #255	; 0xff
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	18d3      	adds	r3, r2, r3
 800637e:	3304      	adds	r3, #4
 8006380:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2202      	movs	r2, #2
 800638e:	0018      	movs	r0, r3
 8006390:	f000 fcae 	bl	8006cf0 <USBD_CtlSendData>
              break;
 8006394:	e080      	b.n	8006498 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006396:	220e      	movs	r2, #14
 8006398:	18bb      	adds	r3, r7, r2
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	b25b      	sxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	da14      	bge.n	80063cc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80063a2:	18bb      	adds	r3, r7, r2
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	220f      	movs	r2, #15
 80063a8:	401a      	ands	r2, r3
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	0013      	movs	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	189b      	adds	r3, r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	18cb      	adds	r3, r1, r3
 80063b6:	3318      	adds	r3, #24
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d11e      	bne.n	80063fc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	0011      	movs	r1, r2
 80063c4:	0018      	movs	r0, r3
 80063c6:	f000 fc15 	bl	8006bf4 <USBD_CtlError>
                  break;
 80063ca:	e065      	b.n	8006498 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063cc:	230e      	movs	r3, #14
 80063ce:	18fb      	adds	r3, r7, r3
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	220f      	movs	r2, #15
 80063d4:	401a      	ands	r2, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	23ac      	movs	r3, #172	; 0xac
 80063da:	0059      	lsls	r1, r3, #1
 80063dc:	0013      	movs	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	189b      	adds	r3, r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	18c3      	adds	r3, r0, r3
 80063e6:	185b      	adds	r3, r3, r1
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	0011      	movs	r1, r2
 80063f4:	0018      	movs	r0, r3
 80063f6:	f000 fbfd 	bl	8006bf4 <USBD_CtlError>
                  break;
 80063fa:	e04d      	b.n	8006498 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063fc:	220e      	movs	r2, #14
 80063fe:	18bb      	adds	r3, r7, r2
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	b25b      	sxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	da0c      	bge.n	8006422 <USBD_StdEPReq+0x2c8>
 8006408:	18bb      	adds	r3, r7, r2
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	227f      	movs	r2, #127	; 0x7f
 800640e:	401a      	ands	r2, r3
 8006410:	0013      	movs	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	189b      	adds	r3, r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	3310      	adds	r3, #16
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	18d3      	adds	r3, r2, r3
 800641e:	3304      	adds	r3, #4
 8006420:	e00d      	b.n	800643e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006422:	230e      	movs	r3, #14
 8006424:	18fb      	adds	r3, r7, r3
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	227f      	movs	r2, #127	; 0x7f
 800642a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800642c:	0013      	movs	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	189b      	adds	r3, r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	3351      	adds	r3, #81	; 0x51
 8006436:	33ff      	adds	r3, #255	; 0xff
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	18d3      	adds	r3, r2, r3
 800643c:	3304      	adds	r3, #4
 800643e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006440:	220e      	movs	r2, #14
 8006442:	18bb      	adds	r3, r7, r2
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <USBD_StdEPReq+0x2f8>
 800644a:	18bb      	adds	r3, r7, r2
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b80      	cmp	r3, #128	; 0x80
 8006450:	d103      	bne.n	800645a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	e010      	b.n	800647c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800645a:	230e      	movs	r3, #14
 800645c:	18fb      	adds	r3, r7, r3
 800645e:	781a      	ldrb	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	0011      	movs	r1, r2
 8006464:	0018      	movs	r0, r3
 8006466:	f001 f816 	bl	8007496 <USBD_LL_IsStallEP>
 800646a:	1e03      	subs	r3, r0, #0
 800646c:	d003      	beq.n	8006476 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2201      	movs	r2, #1
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	e002      	b.n	800647c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2202      	movs	r2, #2
 8006482:	0018      	movs	r0, r3
 8006484:	f000 fc34 	bl	8006cf0 <USBD_CtlSendData>
              break;
 8006488:	e006      	b.n	8006498 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	0011      	movs	r1, r2
 8006490:	0018      	movs	r0, r3
 8006492:	f000 fbaf 	bl	8006bf4 <USBD_CtlError>
              break;
 8006496:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006498:	e006      	b.n	80064a8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	0011      	movs	r1, r2
 80064a0:	0018      	movs	r0, r3
 80064a2:	f000 fba7 	bl	8006bf4 <USBD_CtlError>
          break;
 80064a6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80064a8:	e006      	b.n	80064b8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	0011      	movs	r1, r2
 80064b0:	0018      	movs	r0, r3
 80064b2:	f000 fb9f 	bl	8006bf4 <USBD_CtlError>
      break;
 80064b6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80064b8:	230f      	movs	r3, #15
 80064ba:	18fb      	adds	r3, r7, r3
 80064bc:	781b      	ldrb	r3, [r3, #0]
}
 80064be:	0018      	movs	r0, r3
 80064c0:	46bd      	mov	sp, r7
 80064c2:	b004      	add	sp, #16
 80064c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080064c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064d2:	2308      	movs	r3, #8
 80064d4:	18fb      	adds	r3, r7, r3
 80064d6:	2200      	movs	r2, #0
 80064d8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80064de:	230b      	movs	r3, #11
 80064e0:	18fb      	adds	r3, r7, r3
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	885b      	ldrh	r3, [r3, #2]
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b07      	cmp	r3, #7
 80064f0:	d900      	bls.n	80064f4 <USBD_GetDescriptor+0x2c>
 80064f2:	e159      	b.n	80067a8 <USBD_GetDescriptor+0x2e0>
 80064f4:	009a      	lsls	r2, r3, #2
 80064f6:	4bcb      	ldr	r3, [pc, #812]	; (8006824 <USBD_GetDescriptor+0x35c>)
 80064f8:	18d3      	adds	r3, r2, r3
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	23ac      	movs	r3, #172	; 0xac
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	58d3      	ldr	r3, [r2, r3]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	7c12      	ldrb	r2, [r2, #16]
 800650c:	2108      	movs	r1, #8
 800650e:	1879      	adds	r1, r7, r1
 8006510:	0010      	movs	r0, r2
 8006512:	4798      	blx	r3
 8006514:	0003      	movs	r3, r0
 8006516:	60fb      	str	r3, [r7, #12]
      break;
 8006518:	e153      	b.n	80067c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	7c1b      	ldrb	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	23ad      	movs	r3, #173	; 0xad
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	58d3      	ldr	r3, [r2, r3]
 800652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652c:	2208      	movs	r2, #8
 800652e:	18ba      	adds	r2, r7, r2
 8006530:	0010      	movs	r0, r2
 8006532:	4798      	blx	r3
 8006534:	0003      	movs	r3, r0
 8006536:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3301      	adds	r3, #1
 800653c:	2202      	movs	r2, #2
 800653e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006540:	e13f      	b.n	80067c2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	23ad      	movs	r3, #173	; 0xad
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	58d3      	ldr	r3, [r2, r3]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	2208      	movs	r2, #8
 800654e:	18ba      	adds	r2, r7, r2
 8006550:	0010      	movs	r0, r2
 8006552:	4798      	blx	r3
 8006554:	0003      	movs	r3, r0
 8006556:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	2202      	movs	r2, #2
 800655e:	701a      	strb	r2, [r3, #0]
      break;
 8006560:	e12f      	b.n	80067c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	885b      	ldrh	r3, [r3, #2]
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b05      	cmp	r3, #5
 800656a:	d900      	bls.n	800656e <USBD_GetDescriptor+0xa6>
 800656c:	e0d0      	b.n	8006710 <USBD_GetDescriptor+0x248>
 800656e:	009a      	lsls	r2, r3, #2
 8006570:	4bad      	ldr	r3, [pc, #692]	; (8006828 <USBD_GetDescriptor+0x360>)
 8006572:	18d3      	adds	r3, r2, r3
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	23ac      	movs	r3, #172	; 0xac
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	58d3      	ldr	r3, [r2, r3]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00d      	beq.n	80065a2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	23ac      	movs	r3, #172	; 0xac
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	58d3      	ldr	r3, [r2, r3]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	7c12      	ldrb	r2, [r2, #16]
 8006594:	2108      	movs	r1, #8
 8006596:	1879      	adds	r1, r7, r1
 8006598:	0010      	movs	r0, r2
 800659a:	4798      	blx	r3
 800659c:	0003      	movs	r3, r0
 800659e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065a0:	e0c3      	b.n	800672a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	0011      	movs	r1, r2
 80065a8:	0018      	movs	r0, r3
 80065aa:	f000 fb23 	bl	8006bf4 <USBD_CtlError>
            err++;
 80065ae:	210b      	movs	r1, #11
 80065b0:	187b      	adds	r3, r7, r1
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	187b      	adds	r3, r7, r1
 80065b6:	3201      	adds	r2, #1
 80065b8:	701a      	strb	r2, [r3, #0]
          break;
 80065ba:	e0b6      	b.n	800672a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	23ac      	movs	r3, #172	; 0xac
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	58d3      	ldr	r3, [r2, r3]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00d      	beq.n	80065e6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	23ac      	movs	r3, #172	; 0xac
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	58d3      	ldr	r3, [r2, r3]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	7c12      	ldrb	r2, [r2, #16]
 80065d8:	2108      	movs	r1, #8
 80065da:	1879      	adds	r1, r7, r1
 80065dc:	0010      	movs	r0, r2
 80065de:	4798      	blx	r3
 80065e0:	0003      	movs	r3, r0
 80065e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065e4:	e0a1      	b.n	800672a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	0011      	movs	r1, r2
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 fb01 	bl	8006bf4 <USBD_CtlError>
            err++;
 80065f2:	210b      	movs	r1, #11
 80065f4:	187b      	adds	r3, r7, r1
 80065f6:	781a      	ldrb	r2, [r3, #0]
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	3201      	adds	r2, #1
 80065fc:	701a      	strb	r2, [r3, #0]
          break;
 80065fe:	e094      	b.n	800672a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	23ac      	movs	r3, #172	; 0xac
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	58d3      	ldr	r3, [r2, r3]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00d      	beq.n	800662a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	23ac      	movs	r3, #172	; 0xac
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	58d3      	ldr	r3, [r2, r3]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	7c12      	ldrb	r2, [r2, #16]
 800661c:	2108      	movs	r1, #8
 800661e:	1879      	adds	r1, r7, r1
 8006620:	0010      	movs	r0, r2
 8006622:	4798      	blx	r3
 8006624:	0003      	movs	r3, r0
 8006626:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006628:	e07f      	b.n	800672a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	0011      	movs	r1, r2
 8006630:	0018      	movs	r0, r3
 8006632:	f000 fadf 	bl	8006bf4 <USBD_CtlError>
            err++;
 8006636:	210b      	movs	r1, #11
 8006638:	187b      	adds	r3, r7, r1
 800663a:	781a      	ldrb	r2, [r3, #0]
 800663c:	187b      	adds	r3, r7, r1
 800663e:	3201      	adds	r2, #1
 8006640:	701a      	strb	r2, [r3, #0]
          break;
 8006642:	e072      	b.n	800672a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	23ac      	movs	r3, #172	; 0xac
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	58d3      	ldr	r3, [r2, r3]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00d      	beq.n	800666e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	23ac      	movs	r3, #172	; 0xac
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	58d3      	ldr	r3, [r2, r3]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	7c12      	ldrb	r2, [r2, #16]
 8006660:	2108      	movs	r1, #8
 8006662:	1879      	adds	r1, r7, r1
 8006664:	0010      	movs	r0, r2
 8006666:	4798      	blx	r3
 8006668:	0003      	movs	r3, r0
 800666a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800666c:	e05d      	b.n	800672a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	0011      	movs	r1, r2
 8006674:	0018      	movs	r0, r3
 8006676:	f000 fabd 	bl	8006bf4 <USBD_CtlError>
            err++;
 800667a:	210b      	movs	r1, #11
 800667c:	187b      	adds	r3, r7, r1
 800667e:	781a      	ldrb	r2, [r3, #0]
 8006680:	187b      	adds	r3, r7, r1
 8006682:	3201      	adds	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
          break;
 8006686:	e050      	b.n	800672a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	23ac      	movs	r3, #172	; 0xac
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	58d3      	ldr	r3, [r2, r3]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00d      	beq.n	80066b2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	23ac      	movs	r3, #172	; 0xac
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	58d3      	ldr	r3, [r2, r3]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	7c12      	ldrb	r2, [r2, #16]
 80066a4:	2108      	movs	r1, #8
 80066a6:	1879      	adds	r1, r7, r1
 80066a8:	0010      	movs	r0, r2
 80066aa:	4798      	blx	r3
 80066ac:	0003      	movs	r3, r0
 80066ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066b0:	e03b      	b.n	800672a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	0011      	movs	r1, r2
 80066b8:	0018      	movs	r0, r3
 80066ba:	f000 fa9b 	bl	8006bf4 <USBD_CtlError>
            err++;
 80066be:	210b      	movs	r1, #11
 80066c0:	187b      	adds	r3, r7, r1
 80066c2:	781a      	ldrb	r2, [r3, #0]
 80066c4:	187b      	adds	r3, r7, r1
 80066c6:	3201      	adds	r2, #1
 80066c8:	701a      	strb	r2, [r3, #0]
          break;
 80066ca:	e02e      	b.n	800672a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	23ac      	movs	r3, #172	; 0xac
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	58d3      	ldr	r3, [r2, r3]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00d      	beq.n	80066f6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	23ac      	movs	r3, #172	; 0xac
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	58d3      	ldr	r3, [r2, r3]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	7c12      	ldrb	r2, [r2, #16]
 80066e8:	2108      	movs	r1, #8
 80066ea:	1879      	adds	r1, r7, r1
 80066ec:	0010      	movs	r0, r2
 80066ee:	4798      	blx	r3
 80066f0:	0003      	movs	r3, r0
 80066f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066f4:	e019      	b.n	800672a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	0011      	movs	r1, r2
 80066fc:	0018      	movs	r0, r3
 80066fe:	f000 fa79 	bl	8006bf4 <USBD_CtlError>
            err++;
 8006702:	210b      	movs	r1, #11
 8006704:	187b      	adds	r3, r7, r1
 8006706:	781a      	ldrb	r2, [r3, #0]
 8006708:	187b      	adds	r3, r7, r1
 800670a:	3201      	adds	r2, #1
 800670c:	701a      	strb	r2, [r3, #0]
          break;
 800670e:	e00c      	b.n	800672a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	0011      	movs	r1, r2
 8006716:	0018      	movs	r0, r3
 8006718:	f000 fa6c 	bl	8006bf4 <USBD_CtlError>
          err++;
 800671c:	210b      	movs	r1, #11
 800671e:	187b      	adds	r3, r7, r1
 8006720:	781a      	ldrb	r2, [r3, #0]
 8006722:	187b      	adds	r3, r7, r1
 8006724:	3201      	adds	r2, #1
 8006726:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006728:	e04b      	b.n	80067c2 <USBD_GetDescriptor+0x2fa>
 800672a:	e04a      	b.n	80067c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	7c1b      	ldrb	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	23ad      	movs	r3, #173	; 0xad
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	58d3      	ldr	r3, [r2, r3]
 800673c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673e:	2208      	movs	r2, #8
 8006740:	18ba      	adds	r2, r7, r2
 8006742:	0010      	movs	r0, r2
 8006744:	4798      	blx	r3
 8006746:	0003      	movs	r3, r0
 8006748:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800674a:	e03a      	b.n	80067c2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	0011      	movs	r1, r2
 8006752:	0018      	movs	r0, r3
 8006754:	f000 fa4e 	bl	8006bf4 <USBD_CtlError>
        err++;
 8006758:	210b      	movs	r1, #11
 800675a:	187b      	adds	r3, r7, r1
 800675c:	781a      	ldrb	r2, [r3, #0]
 800675e:	187b      	adds	r3, r7, r1
 8006760:	3201      	adds	r2, #1
 8006762:	701a      	strb	r2, [r3, #0]
      break;
 8006764:	e02d      	b.n	80067c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	7c1b      	ldrb	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10f      	bne.n	800678e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	23ad      	movs	r3, #173	; 0xad
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	58d3      	ldr	r3, [r2, r3]
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	2208      	movs	r2, #8
 800677a:	18ba      	adds	r2, r7, r2
 800677c:	0010      	movs	r0, r2
 800677e:	4798      	blx	r3
 8006780:	0003      	movs	r3, r0
 8006782:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	2207      	movs	r2, #7
 800678a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800678c:	e019      	b.n	80067c2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	0011      	movs	r1, r2
 8006794:	0018      	movs	r0, r3
 8006796:	f000 fa2d 	bl	8006bf4 <USBD_CtlError>
        err++;
 800679a:	210b      	movs	r1, #11
 800679c:	187b      	adds	r3, r7, r1
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	187b      	adds	r3, r7, r1
 80067a2:	3201      	adds	r2, #1
 80067a4:	701a      	strb	r2, [r3, #0]
      break;
 80067a6:	e00c      	b.n	80067c2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	0011      	movs	r1, r2
 80067ae:	0018      	movs	r0, r3
 80067b0:	f000 fa20 	bl	8006bf4 <USBD_CtlError>
      err++;
 80067b4:	210b      	movs	r1, #11
 80067b6:	187b      	adds	r3, r7, r1
 80067b8:	781a      	ldrb	r2, [r3, #0]
 80067ba:	187b      	adds	r3, r7, r1
 80067bc:	3201      	adds	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
      break;
 80067c0:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80067c2:	230b      	movs	r3, #11
 80067c4:	18fb      	adds	r3, r7, r3
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d127      	bne.n	800681c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80067cc:	2108      	movs	r1, #8
 80067ce:	187b      	adds	r3, r7, r1
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d019      	beq.n	800680a <USBD_GetDescriptor+0x342>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	88db      	ldrh	r3, [r3, #6]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d015      	beq.n	800680a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	88da      	ldrh	r2, [r3, #6]
 80067e2:	187b      	adds	r3, r7, r1
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	1c18      	adds	r0, r3, #0
 80067e8:	1c11      	adds	r1, r2, #0
 80067ea:	b28a      	uxth	r2, r1
 80067ec:	b283      	uxth	r3, r0
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d900      	bls.n	80067f4 <USBD_GetDescriptor+0x32c>
 80067f2:	1c01      	adds	r1, r0, #0
 80067f4:	b28a      	uxth	r2, r1
 80067f6:	2108      	movs	r1, #8
 80067f8:	187b      	adds	r3, r7, r1
 80067fa:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067fc:	187b      	adds	r3, r7, r1
 80067fe:	881a      	ldrh	r2, [r3, #0]
 8006800:	68f9      	ldr	r1, [r7, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	0018      	movs	r0, r3
 8006806:	f000 fa73 	bl	8006cf0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	88db      	ldrh	r3, [r3, #6]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d105      	bne.n	800681e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	0018      	movs	r0, r3
 8006816:	f000 fab1 	bl	8006d7c <USBD_CtlSendStatus>
 800681a:	e000      	b.n	800681e <USBD_GetDescriptor+0x356>
    return;
 800681c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800681e:	46bd      	mov	sp, r7
 8006820:	b004      	add	sp, #16
 8006822:	bd80      	pop	{r7, pc}
 8006824:	080077cc 	.word	0x080077cc
 8006828:	080077ec 	.word	0x080077ec

0800682c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800682c:	b590      	push	{r4, r7, lr}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	889b      	ldrh	r3, [r3, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d13d      	bne.n	80068ba <USBD_SetAddress+0x8e>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	88db      	ldrh	r3, [r3, #6]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d139      	bne.n	80068ba <USBD_SetAddress+0x8e>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	885b      	ldrh	r3, [r3, #2]
 800684a:	2b7f      	cmp	r3, #127	; 0x7f
 800684c:	d835      	bhi.n	80068ba <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	885b      	ldrh	r3, [r3, #2]
 8006852:	b2da      	uxtb	r2, r3
 8006854:	230f      	movs	r3, #15
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	217f      	movs	r1, #127	; 0x7f
 800685a:	400a      	ands	r2, r1
 800685c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	23a7      	movs	r3, #167	; 0xa7
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	5cd3      	ldrb	r3, [r2, r3]
 8006866:	2b03      	cmp	r3, #3
 8006868:	d106      	bne.n	8006878 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	0011      	movs	r1, r2
 8006870:	0018      	movs	r0, r3
 8006872:	f000 f9bf 	bl	8006bf4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006876:	e027      	b.n	80068c8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	240f      	movs	r4, #15
 800687c:	193a      	adds	r2, r7, r4
 800687e:	4914      	ldr	r1, [pc, #80]	; (80068d0 <USBD_SetAddress+0xa4>)
 8006880:	7812      	ldrb	r2, [r2, #0]
 8006882:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006884:	193b      	adds	r3, r7, r4
 8006886:	781a      	ldrb	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	0011      	movs	r1, r2
 800688c:	0018      	movs	r0, r3
 800688e:	f000 fe33 	bl	80074f8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	0018      	movs	r0, r3
 8006896:	f000 fa71 	bl	8006d7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800689a:	193b      	adds	r3, r7, r4
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	23a7      	movs	r3, #167	; 0xa7
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	2102      	movs	r1, #2
 80068aa:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ac:	e00c      	b.n	80068c8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	23a7      	movs	r3, #167	; 0xa7
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	2101      	movs	r1, #1
 80068b6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b8:	e006      	b.n	80068c8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	0011      	movs	r1, r2
 80068c0:	0018      	movs	r0, r3
 80068c2:	f000 f997 	bl	8006bf4 <USBD_CtlError>
  }
}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	46c0      	nop			; (mov r8, r8)
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b005      	add	sp, #20
 80068ce:	bd90      	pop	{r4, r7, pc}
 80068d0:	0000029e 	.word	0x0000029e

080068d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	885b      	ldrh	r3, [r3, #2]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	4b4c      	ldr	r3, [pc, #304]	; (8006a18 <USBD_SetConfig+0x144>)
 80068e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068e8:	4b4b      	ldr	r3, [pc, #300]	; (8006a18 <USBD_SetConfig+0x144>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d906      	bls.n	80068fe <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	0011      	movs	r1, r2
 80068f6:	0018      	movs	r0, r3
 80068f8:	f000 f97c 	bl	8006bf4 <USBD_CtlError>
 80068fc:	e088      	b.n	8006a10 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	23a7      	movs	r3, #167	; 0xa7
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	5cd3      	ldrb	r3, [r2, r3]
 8006906:	2b02      	cmp	r3, #2
 8006908:	d002      	beq.n	8006910 <USBD_SetConfig+0x3c>
 800690a:	2b03      	cmp	r3, #3
 800690c:	d029      	beq.n	8006962 <USBD_SetConfig+0x8e>
 800690e:	e071      	b.n	80069f4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006910:	4b41      	ldr	r3, [pc, #260]	; (8006a18 <USBD_SetConfig+0x144>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01f      	beq.n	8006958 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006918:	4b3f      	ldr	r3, [pc, #252]	; (8006a18 <USBD_SetConfig+0x144>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	001a      	movs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	23a7      	movs	r3, #167	; 0xa7
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	2103      	movs	r1, #3
 800692a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800692c:	4b3a      	ldr	r3, [pc, #232]	; (8006a18 <USBD_SetConfig+0x144>)
 800692e:	781a      	ldrb	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	0011      	movs	r1, r2
 8006934:	0018      	movs	r0, r3
 8006936:	f7ff f8c6 	bl	8005ac6 <USBD_SetClassConfig>
 800693a:	0003      	movs	r3, r0
 800693c:	2b02      	cmp	r3, #2
 800693e:	d106      	bne.n	800694e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	0011      	movs	r1, r2
 8006946:	0018      	movs	r0, r3
 8006948:	f000 f954 	bl	8006bf4 <USBD_CtlError>
            return;
 800694c:	e060      	b.n	8006a10 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	0018      	movs	r0, r3
 8006952:	f000 fa13 	bl	8006d7c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006956:	e05b      	b.n	8006a10 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	0018      	movs	r0, r3
 800695c:	f000 fa0e 	bl	8006d7c <USBD_CtlSendStatus>
        break;
 8006960:	e056      	b.n	8006a10 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006962:	4b2d      	ldr	r3, [pc, #180]	; (8006a18 <USBD_SetConfig+0x144>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d115      	bne.n	8006996 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	23a7      	movs	r3, #167	; 0xa7
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	2102      	movs	r1, #2
 8006972:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006974:	4b28      	ldr	r3, [pc, #160]	; (8006a18 <USBD_SetConfig+0x144>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	001a      	movs	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800697e:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <USBD_SetConfig+0x144>)
 8006980:	781a      	ldrb	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	0011      	movs	r1, r2
 8006986:	0018      	movs	r0, r3
 8006988:	f7ff f8c4 	bl	8005b14 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	0018      	movs	r0, r3
 8006990:	f000 f9f4 	bl	8006d7c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006994:	e03c      	b.n	8006a10 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8006996:	4b20      	ldr	r3, [pc, #128]	; (8006a18 <USBD_SetConfig+0x144>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	001a      	movs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d022      	beq.n	80069ea <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0011      	movs	r1, r2
 80069ae:	0018      	movs	r0, r3
 80069b0:	f7ff f8b0 	bl	8005b14 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80069b4:	4b18      	ldr	r3, [pc, #96]	; (8006a18 <USBD_SetConfig+0x144>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	001a      	movs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069be:	4b16      	ldr	r3, [pc, #88]	; (8006a18 <USBD_SetConfig+0x144>)
 80069c0:	781a      	ldrb	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	0011      	movs	r1, r2
 80069c6:	0018      	movs	r0, r3
 80069c8:	f7ff f87d 	bl	8005ac6 <USBD_SetClassConfig>
 80069cc:	0003      	movs	r3, r0
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d106      	bne.n	80069e0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	0011      	movs	r1, r2
 80069d8:	0018      	movs	r0, r3
 80069da:	f000 f90b 	bl	8006bf4 <USBD_CtlError>
            return;
 80069de:	e017      	b.n	8006a10 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	0018      	movs	r0, r3
 80069e4:	f000 f9ca 	bl	8006d7c <USBD_CtlSendStatus>
        break;
 80069e8:	e012      	b.n	8006a10 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	0018      	movs	r0, r3
 80069ee:	f000 f9c5 	bl	8006d7c <USBD_CtlSendStatus>
        break;
 80069f2:	e00d      	b.n	8006a10 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	0011      	movs	r1, r2
 80069fa:	0018      	movs	r0, r3
 80069fc:	f000 f8fa 	bl	8006bf4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <USBD_SetConfig+0x144>)
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	0011      	movs	r1, r2
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7ff f883 	bl	8005b14 <USBD_ClrClassConfig>
        break;
 8006a0e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006a10:	46bd      	mov	sp, r7
 8006a12:	b002      	add	sp, #8
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	20000188 	.word	0x20000188

08006a1c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	88db      	ldrh	r3, [r3, #6]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d006      	beq.n	8006a3c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	0011      	movs	r1, r2
 8006a34:	0018      	movs	r0, r3
 8006a36:	f000 f8dd 	bl	8006bf4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a3a:	e026      	b.n	8006a8a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	23a7      	movs	r3, #167	; 0xa7
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	5cd3      	ldrb	r3, [r2, r3]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	dc02      	bgt.n	8006a4e <USBD_GetConfig+0x32>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dc03      	bgt.n	8006a54 <USBD_GetConfig+0x38>
 8006a4c:	e016      	b.n	8006a7c <USBD_GetConfig+0x60>
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d00c      	beq.n	8006a6c <USBD_GetConfig+0x50>
 8006a52:	e013      	b.n	8006a7c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	0019      	movs	r1, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	0018      	movs	r0, r3
 8006a66:	f000 f943 	bl	8006cf0 <USBD_CtlSendData>
        break;
 8006a6a:	e00e      	b.n	8006a8a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	1d19      	adds	r1, r3, #4
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	0018      	movs	r0, r3
 8006a76:	f000 f93b 	bl	8006cf0 <USBD_CtlSendData>
        break;
 8006a7a:	e006      	b.n	8006a8a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	0011      	movs	r1, r2
 8006a82:	0018      	movs	r0, r3
 8006a84:	f000 f8b6 	bl	8006bf4 <USBD_CtlError>
        break;
 8006a88:	46c0      	nop			; (mov r8, r8)
}
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	b002      	add	sp, #8
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	23a7      	movs	r3, #167	; 0xa7
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	5cd3      	ldrb	r3, [r2, r3]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d822      	bhi.n	8006af0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	88db      	ldrh	r3, [r3, #6]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d006      	beq.n	8006ac0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	0011      	movs	r1, r2
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f000 f89b 	bl	8006bf4 <USBD_CtlError>
        break;
 8006abe:	e01e      	b.n	8006afe <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	23a9      	movs	r3, #169	; 0xa9
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	58d3      	ldr	r3, [r2, r3]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d005      	beq.n	8006ade <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	0019      	movs	r1, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f000 f901 	bl	8006cf0 <USBD_CtlSendData>
      break;
 8006aee:	e006      	b.n	8006afe <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	0011      	movs	r1, r2
 8006af6:	0018      	movs	r0, r3
 8006af8:	f000 f87c 	bl	8006bf4 <USBD_CtlError>
      break;
 8006afc:	46c0      	nop			; (mov r8, r8)
  }
}
 8006afe:	46c0      	nop			; (mov r8, r8)
 8006b00:	46bd      	mov	sp, r7
 8006b02:	b002      	add	sp, #8
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	885b      	ldrh	r3, [r3, #2]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d108      	bne.n	8006b2a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	23a9      	movs	r3, #169	; 0xa9
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	2101      	movs	r1, #1
 8006b20:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	0018      	movs	r0, r3
 8006b26:	f000 f929 	bl	8006d7c <USBD_CtlSendStatus>
  }
}
 8006b2a:	46c0      	nop			; (mov r8, r8)
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	b002      	add	sp, #8
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	23a7      	movs	r3, #167	; 0xa7
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	5cd3      	ldrb	r3, [r2, r3]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d80d      	bhi.n	8006b66 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	885b      	ldrh	r3, [r3, #2]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d110      	bne.n	8006b74 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	23a9      	movs	r3, #169	; 0xa9
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	2100      	movs	r1, #0
 8006b5a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f000 f90c 	bl	8006d7c <USBD_CtlSendStatus>
      }
      break;
 8006b64:	e006      	b.n	8006b74 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	0011      	movs	r1, r2
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f000 f841 	bl	8006bf4 <USBD_CtlError>
      break;
 8006b72:	e000      	b.n	8006b76 <USBD_ClrFeature+0x44>
      break;
 8006b74:	46c0      	nop			; (mov r8, r8)
  }
}
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	b002      	add	sp, #8
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	785a      	ldrb	r2, [r3, #1]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	3302      	adds	r3, #2
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	3303      	adds	r3, #3
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	021b      	lsls	r3, r3, #8
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	18d3      	adds	r3, r2, r3
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	3305      	adds	r3, #5
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	021b      	lsls	r3, r3, #8
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	18d3      	adds	r3, r2, r3
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	3306      	adds	r3, #6
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	3307      	adds	r3, #7
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	18d3      	adds	r3, r2, r3
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	80da      	strh	r2, [r3, #6]

}
 8006bec:	46c0      	nop			; (mov r8, r8)
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b002      	add	sp, #8
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2180      	movs	r1, #128	; 0x80
 8006c02:	0018      	movs	r0, r3
 8006c04:	f000 fbf1 	bl	80073ea <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f000 fbec 	bl	80073ea <USBD_LL_StallEP>
}
 8006c12:	46c0      	nop			; (mov r8, r8)
 8006c14:	46bd      	mov	sp, r7
 8006c16:	b002      	add	sp, #8
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c1a:	b590      	push	{r4, r7, lr}
 8006c1c:	b087      	sub	sp, #28
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c26:	2417      	movs	r4, #23
 8006c28:	193b      	adds	r3, r7, r4
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d03c      	beq.n	8006cae <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	0018      	movs	r0, r3
 8006c38:	f000 f83d 	bl	8006cb6 <USBD_GetLen>
 8006c3c:	0003      	movs	r3, r0
 8006c3e:	3301      	adds	r3, #1
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	18db      	adds	r3, r3, r3
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006c4a:	193b      	adds	r3, r7, r4
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	193a      	adds	r2, r7, r4
 8006c50:	1c59      	adds	r1, r3, #1
 8006c52:	7011      	strb	r1, [r2, #0]
 8006c54:	001a      	movs	r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	189b      	adds	r3, r3, r2
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	7812      	ldrb	r2, [r2, #0]
 8006c5e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c60:	193b      	adds	r3, r7, r4
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	193a      	adds	r2, r7, r4
 8006c66:	1c59      	adds	r1, r3, #1
 8006c68:	7011      	strb	r1, [r2, #0]
 8006c6a:	001a      	movs	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	189b      	adds	r3, r3, r2
 8006c70:	2203      	movs	r2, #3
 8006c72:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006c74:	e017      	b.n	8006ca6 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	60fa      	str	r2, [r7, #12]
 8006c7c:	2417      	movs	r4, #23
 8006c7e:	193a      	adds	r2, r7, r4
 8006c80:	7812      	ldrb	r2, [r2, #0]
 8006c82:	1939      	adds	r1, r7, r4
 8006c84:	1c50      	adds	r0, r2, #1
 8006c86:	7008      	strb	r0, [r1, #0]
 8006c88:	0011      	movs	r1, r2
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	1852      	adds	r2, r2, r1
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006c92:	193b      	adds	r3, r7, r4
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	193a      	adds	r2, r7, r4
 8006c98:	1c59      	adds	r1, r3, #1
 8006c9a:	7011      	strb	r1, [r2, #0]
 8006c9c:	001a      	movs	r2, r3
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	189b      	adds	r3, r3, r2
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e3      	bne.n	8006c76 <USBD_GetString+0x5c>
    }
  }
}
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b007      	add	sp, #28
 8006cb4:	bd90      	pop	{r4, r7, pc}

08006cb6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cbe:	230f      	movs	r3, #15
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006cc6:	e008      	b.n	8006cda <USBD_GetLen+0x24>
  {
    len++;
 8006cc8:	210f      	movs	r1, #15
 8006cca:	187b      	adds	r3, r7, r1
 8006ccc:	781a      	ldrb	r2, [r3, #0]
 8006cce:	187b      	adds	r3, r7, r1
 8006cd0:	3201      	adds	r2, #1
 8006cd2:	701a      	strb	r2, [r3, #0]
    buf++;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f2      	bne.n	8006cc8 <USBD_GetLen+0x12>
  }

  return len;
 8006ce2:	230f      	movs	r3, #15
 8006ce4:	18fb      	adds	r3, r7, r3
 8006ce6:	781b      	ldrb	r3, [r3, #0]
}
 8006ce8:	0018      	movs	r0, r3
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b004      	add	sp, #16
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	1dbb      	adds	r3, r7, #6
 8006cfc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	23a5      	movs	r3, #165	; 0xa5
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	2102      	movs	r1, #2
 8006d06:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006d08:	1dbb      	adds	r3, r7, #6
 8006d0a:	881a      	ldrh	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006d10:	1dbb      	adds	r3, r7, #6
 8006d12:	881a      	ldrh	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d18:	1dbb      	adds	r3, r7, #6
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	2100      	movs	r1, #0
 8006d22:	f000 fc14 	bl	800754e <USBD_LL_Transmit>

  return USBD_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	0018      	movs	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	b004      	add	sp, #16
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	1dbb      	adds	r3, r7, #6
 8006d3c:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d3e:	1dbb      	adds	r3, r7, #6
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	2100      	movs	r1, #0
 8006d48:	f000 fc01 	bl	800754e <USBD_LL_Transmit>

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	0018      	movs	r0, r3
 8006d50:	46bd      	mov	sp, r7
 8006d52:	b004      	add	sp, #16
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	1dbb      	adds	r3, r7, #6
 8006d62:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d64:	1dbb      	adds	r3, r7, #6
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	f000 fc25 	bl	80075bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	0018      	movs	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b004      	add	sp, #16
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	23a5      	movs	r3, #165	; 0xa5
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	2104      	movs	r1, #4
 8006d8c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	2300      	movs	r3, #0
 8006d92:	2200      	movs	r2, #0
 8006d94:	2100      	movs	r1, #0
 8006d96:	f000 fbda 	bl	800754e <USBD_LL_Transmit>

  return USBD_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b002      	add	sp, #8
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	23a5      	movs	r3, #165	; 0xa5
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	2105      	movs	r1, #5
 8006db4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	2300      	movs	r3, #0
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	f000 fbfd 	bl	80075bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	b002      	add	sp, #8
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006dd0:	490f      	ldr	r1, [pc, #60]	; (8006e10 <MX_USB_DEVICE_Init+0x44>)
 8006dd2:	4b10      	ldr	r3, [pc, #64]	; (8006e14 <MX_USB_DEVICE_Init+0x48>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	f7fe fe0e 	bl	80059f8 <USBD_Init>
 8006ddc:	1e03      	subs	r3, r0, #0
 8006dde:	d001      	beq.n	8006de4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006de0:	f7f9 fc1e 	bl	8000620 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006de4:	4a0c      	ldr	r2, [pc, #48]	; (8006e18 <MX_USB_DEVICE_Init+0x4c>)
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <MX_USB_DEVICE_Init+0x48>)
 8006de8:	0011      	movs	r1, r2
 8006dea:	0018      	movs	r0, r3
 8006dec:	f7fe fe35 	bl	8005a5a <USBD_RegisterClass>
 8006df0:	1e03      	subs	r3, r0, #0
 8006df2:	d001      	beq.n	8006df8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006df4:	f7f9 fc14 	bl	8000620 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006df8:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <MX_USB_DEVICE_Init+0x48>)
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	f7fe fe4d 	bl	8005a9a <USBD_Start>
 8006e00:	1e03      	subs	r3, r0, #0
 8006e02:	d001      	beq.n	8006e08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e04:	f7f9 fc0c 	bl	8000620 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e08:	46c0      	nop			; (mov r8, r8)
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	46c0      	nop			; (mov r8, r8)
 8006e10:	20000114 	.word	0x20000114
 8006e14:	2000018c 	.word	0x2000018c
 8006e18:	2000000c 	.word	0x2000000c

08006e1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	0002      	movs	r2, r0
 8006e24:	6039      	str	r1, [r7, #0]
 8006e26:	1dfb      	adds	r3, r7, #7
 8006e28:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2212      	movs	r2, #18
 8006e2e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e30:	4b02      	ldr	r3, [pc, #8]	; (8006e3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e32:	0018      	movs	r0, r3
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b002      	add	sp, #8
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	20000130 	.word	0x20000130

08006e40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	0002      	movs	r2, r0
 8006e48:	6039      	str	r1, [r7, #0]
 8006e4a:	1dfb      	adds	r3, r7, #7
 8006e4c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2204      	movs	r2, #4
 8006e52:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e54:	4b02      	ldr	r3, [pc, #8]	; (8006e60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e56:	0018      	movs	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b002      	add	sp, #8
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	20000144 	.word	0x20000144

08006e64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	0002      	movs	r2, r0
 8006e6c:	6039      	str	r1, [r7, #0]
 8006e6e:	1dfb      	adds	r3, r7, #7
 8006e70:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006e72:	1dfb      	adds	r3, r7, #7
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	4908      	ldr	r1, [pc, #32]	; (8006ea0 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <USBD_FS_ProductStrDescriptor+0x40>)
 8006e80:	0018      	movs	r0, r3
 8006e82:	f7ff feca 	bl	8006c1a <USBD_GetString>
 8006e86:	e005      	b.n	8006e94 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	4905      	ldr	r1, [pc, #20]	; (8006ea0 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006e8c:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <USBD_FS_ProductStrDescriptor+0x40>)
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f7ff fec3 	bl	8006c1a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e94:	4b02      	ldr	r3, [pc, #8]	; (8006ea0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8006e96:	0018      	movs	r0, r3
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	b002      	add	sp, #8
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	20000450 	.word	0x20000450
 8006ea4:	08007740 	.word	0x08007740

08006ea8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	0002      	movs	r2, r0
 8006eb0:	6039      	str	r1, [r7, #0]
 8006eb2:	1dfb      	adds	r3, r7, #7
 8006eb4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	4904      	ldr	r1, [pc, #16]	; (8006ecc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f7ff feac 	bl	8006c1a <USBD_GetString>
  return USBD_StrDesc;
 8006ec2:	4b02      	ldr	r3, [pc, #8]	; (8006ecc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	b002      	add	sp, #8
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000450 	.word	0x20000450
 8006ed0:	08007758 	.word	0x08007758

08006ed4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	0002      	movs	r2, r0
 8006edc:	6039      	str	r1, [r7, #0]
 8006ede:	1dfb      	adds	r3, r7, #7
 8006ee0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	221a      	movs	r2, #26
 8006ee6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006ee8:	f000 f84c 	bl	8006f84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006eec:	4b02      	ldr	r3, [pc, #8]	; (8006ef8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8006eee:	0018      	movs	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	b002      	add	sp, #8
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	20000148 	.word	0x20000148

08006efc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	0002      	movs	r2, r0
 8006f04:	6039      	str	r1, [r7, #0]
 8006f06:	1dfb      	adds	r3, r7, #7
 8006f08:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8006f0a:	1dfb      	adds	r3, r7, #7
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	4908      	ldr	r1, [pc, #32]	; (8006f38 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006f16:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <USBD_FS_ConfigStrDescriptor+0x40>)
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f7ff fe7e 	bl	8006c1a <USBD_GetString>
 8006f1e:	e005      	b.n	8006f2c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	4905      	ldr	r1, [pc, #20]	; (8006f38 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <USBD_FS_ConfigStrDescriptor+0x40>)
 8006f26:	0018      	movs	r0, r3
 8006f28:	f7ff fe77 	bl	8006c1a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f2c:	4b02      	ldr	r3, [pc, #8]	; (8006f38 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8006f2e:	0018      	movs	r0, r3
 8006f30:	46bd      	mov	sp, r7
 8006f32:	b002      	add	sp, #8
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	46c0      	nop			; (mov r8, r8)
 8006f38:	20000450 	.word	0x20000450
 8006f3c:	0800776c 	.word	0x0800776c

08006f40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	0002      	movs	r2, r0
 8006f48:	6039      	str	r1, [r7, #0]
 8006f4a:	1dfb      	adds	r3, r7, #7
 8006f4c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006f4e:	1dfb      	adds	r3, r7, #7
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	4908      	ldr	r1, [pc, #32]	; (8006f7c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006f5a:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f7ff fe5c 	bl	8006c1a <USBD_GetString>
 8006f62:	e005      	b.n	8006f70 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	4905      	ldr	r1, [pc, #20]	; (8006f7c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f7ff fe55 	bl	8006c1a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f70:	4b02      	ldr	r3, [pc, #8]	; (8006f7c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8006f72:	0018      	movs	r0, r3
 8006f74:	46bd      	mov	sp, r7
 8006f76:	b002      	add	sp, #8
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	20000450 	.word	0x20000450
 8006f80:	08007778 	.word	0x08007778

08006f84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f8a:	4b10      	ldr	r3, [pc, #64]	; (8006fcc <Get_SerialNum+0x48>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f90:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <Get_SerialNum+0x4c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f96:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <Get_SerialNum+0x50>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	18d3      	adds	r3, r2, r3
 8006fa2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006faa:	490b      	ldr	r1, [pc, #44]	; (8006fd8 <Get_SerialNum+0x54>)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2208      	movs	r2, #8
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f000 f815 	bl	8006fe0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006fb6:	4909      	ldr	r1, [pc, #36]	; (8006fdc <Get_SerialNum+0x58>)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2204      	movs	r2, #4
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f000 f80f 	bl	8006fe0 <IntToUnicode>
  }
}
 8006fc2:	46c0      	nop			; (mov r8, r8)
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	b004      	add	sp, #16
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	1ff80050 	.word	0x1ff80050
 8006fd0:	1ff80054 	.word	0x1ff80054
 8006fd4:	1ff80058 	.word	0x1ff80058
 8006fd8:	2000014a 	.word	0x2000014a
 8006fdc:	2000015a 	.word	0x2000015a

08006fe0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	1dfb      	adds	r3, r7, #7
 8006fec:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8006fee:	2117      	movs	r1, #23
 8006ff0:	187b      	adds	r3, r7, r1
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8006ff6:	187b      	adds	r3, r7, r1
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e02f      	b.n	800705e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	0f1b      	lsrs	r3, r3, #28
 8007002:	2b09      	cmp	r3, #9
 8007004:	d80d      	bhi.n	8007022 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	0f1b      	lsrs	r3, r3, #28
 800700a:	b2da      	uxtb	r2, r3
 800700c:	2317      	movs	r3, #23
 800700e:	18fb      	adds	r3, r7, r3
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	0019      	movs	r1, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	185b      	adds	r3, r3, r1
 800701a:	3230      	adds	r2, #48	; 0x30
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	e00c      	b.n	800703c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	0f1b      	lsrs	r3, r3, #28
 8007026:	b2da      	uxtb	r2, r3
 8007028:	2317      	movs	r3, #23
 800702a:	18fb      	adds	r3, r7, r3
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	0019      	movs	r1, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	185b      	adds	r3, r3, r1
 8007036:	3237      	adds	r2, #55	; 0x37
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007042:	2117      	movs	r1, #23
 8007044:	187b      	adds	r3, r7, r1
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	3301      	adds	r3, #1
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	18d3      	adds	r3, r2, r3
 8007050:	2200      	movs	r2, #0
 8007052:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007054:	187b      	adds	r3, r7, r1
 8007056:	781a      	ldrb	r2, [r3, #0]
 8007058:	187b      	adds	r3, r7, r1
 800705a:	3201      	adds	r2, #1
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	2317      	movs	r3, #23
 8007060:	18fa      	adds	r2, r7, r3
 8007062:	1dfb      	adds	r3, r7, #7
 8007064:	7812      	ldrb	r2, [r2, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d3c8      	bcc.n	8006ffe <IntToUnicode+0x1e>
  }
}
 800706c:	46c0      	nop			; (mov r8, r8)
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	46bd      	mov	sp, r7
 8007072:	b006      	add	sp, #24
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a0a      	ldr	r2, [pc, #40]	; (80070b0 <HAL_PCD_MspInit+0x38>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d10e      	bne.n	80070a8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800708a:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <HAL_PCD_MspInit+0x3c>)
 800708c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800708e:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <HAL_PCD_MspInit+0x3c>)
 8007090:	2180      	movs	r1, #128	; 0x80
 8007092:	0409      	lsls	r1, r1, #16
 8007094:	430a      	orrs	r2, r1
 8007096:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007098:	2200      	movs	r2, #0
 800709a:	2100      	movs	r1, #0
 800709c:	201f      	movs	r0, #31
 800709e:	f7f9 fc6d 	bl	800097c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80070a2:	201f      	movs	r0, #31
 80070a4:	f7f9 fc7f 	bl	80009a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80070a8:	46c0      	nop			; (mov r8, r8)
 80070aa:	46bd      	mov	sp, r7
 80070ac:	b002      	add	sp, #8
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	40005c00 	.word	0x40005c00
 80070b4:	40021000 	.word	0x40021000

080070b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	23bc      	movs	r3, #188	; 0xbc
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	58d2      	ldr	r2, [r2, r3]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	21ac      	movs	r1, #172	; 0xac
 80070cc:	0089      	lsls	r1, r1, #2
 80070ce:	468c      	mov	ip, r1
 80070d0:	4463      	add	r3, ip
 80070d2:	0019      	movs	r1, r3
 80070d4:	0010      	movs	r0, r2
 80070d6:	f7fe fd33 	bl	8005b40 <USBD_LL_SetupStage>
}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	46bd      	mov	sp, r7
 80070de:	b002      	add	sp, #8
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e2:	b590      	push	{r4, r7, lr}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	000a      	movs	r2, r1
 80070ec:	1cfb      	adds	r3, r7, #3
 80070ee:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	23bc      	movs	r3, #188	; 0xbc
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	58d4      	ldr	r4, [r2, r3]
 80070f8:	1cfb      	adds	r3, r7, #3
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	23be      	movs	r3, #190	; 0xbe
 8007100:	0059      	lsls	r1, r3, #1
 8007102:	0013      	movs	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	189b      	adds	r3, r3, r2
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	18c3      	adds	r3, r0, r3
 800710c:	185b      	adds	r3, r3, r1
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	1cfb      	adds	r3, r7, #3
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	0019      	movs	r1, r3
 8007116:	0020      	movs	r0, r4
 8007118:	f7fe fd70 	bl	8005bfc <USBD_LL_DataOutStage>
}
 800711c:	46c0      	nop			; (mov r8, r8)
 800711e:	46bd      	mov	sp, r7
 8007120:	b003      	add	sp, #12
 8007122:	bd90      	pop	{r4, r7, pc}

08007124 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	000a      	movs	r2, r1
 800712e:	1cfb      	adds	r3, r7, #3
 8007130:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	23bc      	movs	r3, #188	; 0xbc
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	58d0      	ldr	r0, [r2, r3]
 800713a:	1cfb      	adds	r3, r7, #3
 800713c:	781a      	ldrb	r2, [r3, #0]
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	0013      	movs	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	189b      	adds	r3, r3, r2
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	18cb      	adds	r3, r1, r3
 800714a:	333c      	adds	r3, #60	; 0x3c
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	1cfb      	adds	r3, r7, #3
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	0019      	movs	r1, r3
 8007154:	f7fe fdd4 	bl	8005d00 <USBD_LL_DataInStage>
}
 8007158:	46c0      	nop			; (mov r8, r8)
 800715a:	46bd      	mov	sp, r7
 800715c:	b002      	add	sp, #8
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	23bc      	movs	r3, #188	; 0xbc
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	58d3      	ldr	r3, [r2, r3]
 8007170:	0018      	movs	r0, r3
 8007172:	f7fe ff0b 	bl	8005f8c <USBD_LL_SOF>
}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	46bd      	mov	sp, r7
 800717a:	b002      	add	sp, #8
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007186:	230f      	movs	r3, #15
 8007188:	18fb      	adds	r3, r7, r3
 800718a:	2201      	movs	r2, #1
 800718c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	2b02      	cmp	r3, #2
 8007194:	d001      	beq.n	800719a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007196:	f7f9 fa43 	bl	8000620 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	23bc      	movs	r3, #188	; 0xbc
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	58d2      	ldr	r2, [r2, r3]
 80071a2:	230f      	movs	r3, #15
 80071a4:	18fb      	adds	r3, r7, r3
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	0019      	movs	r1, r3
 80071aa:	0010      	movs	r0, r2
 80071ac:	f7fe fead 	bl	8005f0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	23bc      	movs	r3, #188	; 0xbc
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	58d3      	ldr	r3, [r2, r3]
 80071b8:	0018      	movs	r0, r3
 80071ba:	f7fe fe5e 	bl	8005e7a <USBD_LL_Reset>
}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	46bd      	mov	sp, r7
 80071c2:	b004      	add	sp, #16
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	23bc      	movs	r3, #188	; 0xbc
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	58d3      	ldr	r3, [r2, r3]
 80071d8:	0018      	movs	r0, r3
 80071da:	f7fe fea7 	bl	8005f2c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071e6:	4b05      	ldr	r3, [pc, #20]	; (80071fc <HAL_PCD_SuspendCallback+0x34>)
 80071e8:	691a      	ldr	r2, [r3, #16]
 80071ea:	4b04      	ldr	r3, [pc, #16]	; (80071fc <HAL_PCD_SuspendCallback+0x34>)
 80071ec:	2106      	movs	r1, #6
 80071ee:	430a      	orrs	r2, r1
 80071f0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	46bd      	mov	sp, r7
 80071f6:	b002      	add	sp, #8
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	e000ed00 	.word	0xe000ed00

08007200 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007210:	4b09      	ldr	r3, [pc, #36]	; (8007238 <HAL_PCD_ResumeCallback+0x38>)
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	4b08      	ldr	r3, [pc, #32]	; (8007238 <HAL_PCD_ResumeCallback+0x38>)
 8007216:	2106      	movs	r1, #6
 8007218:	438a      	bics	r2, r1
 800721a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800721c:	f000 fa1a 	bl	8007654 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	23bc      	movs	r3, #188	; 0xbc
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	58d3      	ldr	r3, [r2, r3]
 8007228:	0018      	movs	r0, r3
 800722a:	f7fe fe97 	bl	8005f5c <USBD_LL_Resume>
}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	46bd      	mov	sp, r7
 8007232:	b002      	add	sp, #8
 8007234:	bd80      	pop	{r7, pc}
 8007236:	46c0      	nop			; (mov r8, r8)
 8007238:	e000ed00 	.word	0xe000ed00

0800723c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007244:	4a23      	ldr	r2, [pc, #140]	; (80072d4 <USBD_LL_Init+0x98>)
 8007246:	23bc      	movs	r3, #188	; 0xbc
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	23b0      	movs	r3, #176	; 0xb0
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	491f      	ldr	r1, [pc, #124]	; (80072d4 <USBD_LL_Init+0x98>)
 8007256:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007258:	4b1e      	ldr	r3, [pc, #120]	; (80072d4 <USBD_LL_Init+0x98>)
 800725a:	4a1f      	ldr	r2, [pc, #124]	; (80072d8 <USBD_LL_Init+0x9c>)
 800725c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800725e:	4b1d      	ldr	r3, [pc, #116]	; (80072d4 <USBD_LL_Init+0x98>)
 8007260:	2208      	movs	r2, #8
 8007262:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007264:	4b1b      	ldr	r3, [pc, #108]	; (80072d4 <USBD_LL_Init+0x98>)
 8007266:	2202      	movs	r2, #2
 8007268:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800726a:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <USBD_LL_Init+0x98>)
 800726c:	2202      	movs	r2, #2
 800726e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007270:	4b18      	ldr	r3, [pc, #96]	; (80072d4 <USBD_LL_Init+0x98>)
 8007272:	2200      	movs	r2, #0
 8007274:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007276:	4b17      	ldr	r3, [pc, #92]	; (80072d4 <USBD_LL_Init+0x98>)
 8007278:	2200      	movs	r2, #0
 800727a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800727c:	4b15      	ldr	r3, [pc, #84]	; (80072d4 <USBD_LL_Init+0x98>)
 800727e:	2200      	movs	r2, #0
 8007280:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007282:	4b14      	ldr	r3, [pc, #80]	; (80072d4 <USBD_LL_Init+0x98>)
 8007284:	0018      	movs	r0, r3
 8007286:	f7f9 fbab 	bl	80009e0 <HAL_PCD_Init>
 800728a:	1e03      	subs	r3, r0, #0
 800728c:	d001      	beq.n	8007292 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800728e:	f7f9 f9c7 	bl	8000620 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	23b0      	movs	r3, #176	; 0xb0
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	58d0      	ldr	r0, [r2, r3]
 800729a:	2318      	movs	r3, #24
 800729c:	2200      	movs	r2, #0
 800729e:	2100      	movs	r1, #0
 80072a0:	f7fb f952 	bl	8002548 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	23b0      	movs	r3, #176	; 0xb0
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	58d0      	ldr	r0, [r2, r3]
 80072ac:	2358      	movs	r3, #88	; 0x58
 80072ae:	2200      	movs	r2, #0
 80072b0:	2180      	movs	r1, #128	; 0x80
 80072b2:	f7fb f949 	bl	8002548 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	23b0      	movs	r3, #176	; 0xb0
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	58d0      	ldr	r0, [r2, r3]
 80072be:	2380      	movs	r3, #128	; 0x80
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	2200      	movs	r2, #0
 80072c4:	2181      	movs	r1, #129	; 0x81
 80072c6:	f7fb f93f 	bl	8002548 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	0018      	movs	r0, r3
 80072ce:	46bd      	mov	sp, r7
 80072d0:	b002      	add	sp, #8
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000650 	.word	0x20000650
 80072d8:	40005c00 	.word	0x40005c00

080072dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072e4:	210f      	movs	r1, #15
 80072e6:	187b      	adds	r3, r7, r1
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072ec:	260e      	movs	r6, #14
 80072ee:	19bb      	adds	r3, r7, r6
 80072f0:	2200      	movs	r2, #0
 80072f2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	23b0      	movs	r3, #176	; 0xb0
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	58d3      	ldr	r3, [r2, r3]
 80072fc:	000d      	movs	r5, r1
 80072fe:	187c      	adds	r4, r7, r1
 8007300:	0018      	movs	r0, r3
 8007302:	f7f9 fc6d 	bl	8000be0 <HAL_PCD_Start>
 8007306:	0003      	movs	r3, r0
 8007308:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800730a:	19bc      	adds	r4, r7, r6
 800730c:	197b      	adds	r3, r7, r5
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	0018      	movs	r0, r3
 8007312:	f000 f9a6 	bl	8007662 <USBD_Get_USB_Status>
 8007316:	0003      	movs	r3, r0
 8007318:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800731a:	19bb      	adds	r3, r7, r6
 800731c:	781b      	ldrb	r3, [r3, #0]
}
 800731e:	0018      	movs	r0, r3
 8007320:	46bd      	mov	sp, r7
 8007322:	b005      	add	sp, #20
 8007324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007326 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007326:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	000c      	movs	r4, r1
 8007330:	0010      	movs	r0, r2
 8007332:	0019      	movs	r1, r3
 8007334:	1cfb      	adds	r3, r7, #3
 8007336:	1c22      	adds	r2, r4, #0
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	1cbb      	adds	r3, r7, #2
 800733c:	1c02      	adds	r2, r0, #0
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	003b      	movs	r3, r7
 8007342:	1c0a      	adds	r2, r1, #0
 8007344:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007346:	260f      	movs	r6, #15
 8007348:	19bb      	adds	r3, r7, r6
 800734a:	2200      	movs	r2, #0
 800734c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800734e:	250e      	movs	r5, #14
 8007350:	197b      	adds	r3, r7, r5
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	23b0      	movs	r3, #176	; 0xb0
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	58d0      	ldr	r0, [r2, r3]
 800735e:	19bc      	adds	r4, r7, r6
 8007360:	1cbb      	adds	r3, r7, #2
 8007362:	781d      	ldrb	r5, [r3, #0]
 8007364:	003b      	movs	r3, r7
 8007366:	881a      	ldrh	r2, [r3, #0]
 8007368:	1cfb      	adds	r3, r7, #3
 800736a:	7819      	ldrb	r1, [r3, #0]
 800736c:	002b      	movs	r3, r5
 800736e:	f7f9 fdcc 	bl	8000f0a <HAL_PCD_EP_Open>
 8007372:	0003      	movs	r3, r0
 8007374:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007376:	250e      	movs	r5, #14
 8007378:	197c      	adds	r4, r7, r5
 800737a:	19bb      	adds	r3, r7, r6
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	0018      	movs	r0, r3
 8007380:	f000 f96f 	bl	8007662 <USBD_Get_USB_Status>
 8007384:	0003      	movs	r3, r0
 8007386:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007388:	197b      	adds	r3, r7, r5
 800738a:	781b      	ldrb	r3, [r3, #0]
}
 800738c:	0018      	movs	r0, r3
 800738e:	46bd      	mov	sp, r7
 8007390:	b005      	add	sp, #20
 8007392:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007394 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	000a      	movs	r2, r1
 800739e:	1cfb      	adds	r3, r7, #3
 80073a0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a2:	210f      	movs	r1, #15
 80073a4:	187b      	adds	r3, r7, r1
 80073a6:	2200      	movs	r2, #0
 80073a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073aa:	260e      	movs	r6, #14
 80073ac:	19bb      	adds	r3, r7, r6
 80073ae:	2200      	movs	r2, #0
 80073b0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	23b0      	movs	r3, #176	; 0xb0
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	58d2      	ldr	r2, [r2, r3]
 80073ba:	000d      	movs	r5, r1
 80073bc:	187c      	adds	r4, r7, r1
 80073be:	1cfb      	adds	r3, r7, #3
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	0019      	movs	r1, r3
 80073c4:	0010      	movs	r0, r2
 80073c6:	f7f9 fe0f 	bl	8000fe8 <HAL_PCD_EP_Close>
 80073ca:	0003      	movs	r3, r0
 80073cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073ce:	19bc      	adds	r4, r7, r6
 80073d0:	197b      	adds	r3, r7, r5
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	0018      	movs	r0, r3
 80073d6:	f000 f944 	bl	8007662 <USBD_Get_USB_Status>
 80073da:	0003      	movs	r3, r0
 80073dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80073de:	19bb      	adds	r3, r7, r6
 80073e0:	781b      	ldrb	r3, [r3, #0]
}
 80073e2:	0018      	movs	r0, r3
 80073e4:	46bd      	mov	sp, r7
 80073e6:	b005      	add	sp, #20
 80073e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073ea <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ec:	b085      	sub	sp, #20
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	000a      	movs	r2, r1
 80073f4:	1cfb      	adds	r3, r7, #3
 80073f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f8:	210f      	movs	r1, #15
 80073fa:	187b      	adds	r3, r7, r1
 80073fc:	2200      	movs	r2, #0
 80073fe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007400:	260e      	movs	r6, #14
 8007402:	19bb      	adds	r3, r7, r6
 8007404:	2200      	movs	r2, #0
 8007406:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	23b0      	movs	r3, #176	; 0xb0
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	58d2      	ldr	r2, [r2, r3]
 8007410:	000d      	movs	r5, r1
 8007412:	187c      	adds	r4, r7, r1
 8007414:	1cfb      	adds	r3, r7, #3
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	0019      	movs	r1, r3
 800741a:	0010      	movs	r0, r2
 800741c:	f7f9 fea8 	bl	8001170 <HAL_PCD_EP_SetStall>
 8007420:	0003      	movs	r3, r0
 8007422:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007424:	19bc      	adds	r4, r7, r6
 8007426:	197b      	adds	r3, r7, r5
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	0018      	movs	r0, r3
 800742c:	f000 f919 	bl	8007662 <USBD_Get_USB_Status>
 8007430:	0003      	movs	r3, r0
 8007432:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007434:	19bb      	adds	r3, r7, r6
 8007436:	781b      	ldrb	r3, [r3, #0]
}
 8007438:	0018      	movs	r0, r3
 800743a:	46bd      	mov	sp, r7
 800743c:	b005      	add	sp, #20
 800743e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007440 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	000a      	movs	r2, r1
 800744a:	1cfb      	adds	r3, r7, #3
 800744c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800744e:	210f      	movs	r1, #15
 8007450:	187b      	adds	r3, r7, r1
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007456:	260e      	movs	r6, #14
 8007458:	19bb      	adds	r3, r7, r6
 800745a:	2200      	movs	r2, #0
 800745c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	23b0      	movs	r3, #176	; 0xb0
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	58d2      	ldr	r2, [r2, r3]
 8007466:	000d      	movs	r5, r1
 8007468:	187c      	adds	r4, r7, r1
 800746a:	1cfb      	adds	r3, r7, #3
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	0019      	movs	r1, r3
 8007470:	0010      	movs	r0, r2
 8007472:	f7f9 fed9 	bl	8001228 <HAL_PCD_EP_ClrStall>
 8007476:	0003      	movs	r3, r0
 8007478:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800747a:	19bc      	adds	r4, r7, r6
 800747c:	197b      	adds	r3, r7, r5
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	0018      	movs	r0, r3
 8007482:	f000 f8ee 	bl	8007662 <USBD_Get_USB_Status>
 8007486:	0003      	movs	r3, r0
 8007488:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800748a:	19bb      	adds	r3, r7, r6
 800748c:	781b      	ldrb	r3, [r3, #0]
}
 800748e:	0018      	movs	r0, r3
 8007490:	46bd      	mov	sp, r7
 8007492:	b005      	add	sp, #20
 8007494:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007496 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	000a      	movs	r2, r1
 80074a0:	1cfb      	adds	r3, r7, #3
 80074a2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	23b0      	movs	r3, #176	; 0xb0
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	58d3      	ldr	r3, [r2, r3]
 80074ac:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074ae:	1cfb      	adds	r3, r7, #3
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	b25b      	sxtb	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	da0d      	bge.n	80074d4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074b8:	1cfb      	adds	r3, r7, #3
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	227f      	movs	r2, #127	; 0x7f
 80074be:	4013      	ands	r3, r2
 80074c0:	68f9      	ldr	r1, [r7, #12]
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	0013      	movs	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	189b      	adds	r3, r3, r2
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	18cb      	adds	r3, r1, r3
 80074ce:	3302      	adds	r3, #2
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	e00d      	b.n	80074f0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074d4:	1cfb      	adds	r3, r7, #3
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	227f      	movs	r2, #127	; 0x7f
 80074da:	401a      	ands	r2, r3
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	23b5      	movs	r3, #181	; 0xb5
 80074e0:	0059      	lsls	r1, r3, #1
 80074e2:	0013      	movs	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	189b      	adds	r3, r3, r2
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	18c3      	adds	r3, r0, r3
 80074ec:	185b      	adds	r3, r3, r1
 80074ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074f0:	0018      	movs	r0, r3
 80074f2:	46bd      	mov	sp, r7
 80074f4:	b004      	add	sp, #16
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	000a      	movs	r2, r1
 8007502:	1cfb      	adds	r3, r7, #3
 8007504:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007506:	210f      	movs	r1, #15
 8007508:	187b      	adds	r3, r7, r1
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800750e:	260e      	movs	r6, #14
 8007510:	19bb      	adds	r3, r7, r6
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	23b0      	movs	r3, #176	; 0xb0
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	58d2      	ldr	r2, [r2, r3]
 800751e:	000d      	movs	r5, r1
 8007520:	187c      	adds	r4, r7, r1
 8007522:	1cfb      	adds	r3, r7, #3
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	0019      	movs	r1, r3
 8007528:	0010      	movs	r0, r2
 800752a:	f7f9 fcc3 	bl	8000eb4 <HAL_PCD_SetAddress>
 800752e:	0003      	movs	r3, r0
 8007530:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007532:	19bc      	adds	r4, r7, r6
 8007534:	197b      	adds	r3, r7, r5
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	0018      	movs	r0, r3
 800753a:	f000 f892 	bl	8007662 <USBD_Get_USB_Status>
 800753e:	0003      	movs	r3, r0
 8007540:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007542:	19bb      	adds	r3, r7, r6
 8007544:	781b      	ldrb	r3, [r3, #0]
}
 8007546:	0018      	movs	r0, r3
 8007548:	46bd      	mov	sp, r7
 800754a:	b005      	add	sp, #20
 800754c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800754e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800754e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007550:	b087      	sub	sp, #28
 8007552:	af00      	add	r7, sp, #0
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	0008      	movs	r0, r1
 8007558:	607a      	str	r2, [r7, #4]
 800755a:	0019      	movs	r1, r3
 800755c:	230b      	movs	r3, #11
 800755e:	18fb      	adds	r3, r7, r3
 8007560:	1c02      	adds	r2, r0, #0
 8007562:	701a      	strb	r2, [r3, #0]
 8007564:	2408      	movs	r4, #8
 8007566:	193b      	adds	r3, r7, r4
 8007568:	1c0a      	adds	r2, r1, #0
 800756a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800756c:	2117      	movs	r1, #23
 800756e:	187b      	adds	r3, r7, r1
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007574:	2516      	movs	r5, #22
 8007576:	197b      	adds	r3, r7, r5
 8007578:	2200      	movs	r2, #0
 800757a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	23b0      	movs	r3, #176	; 0xb0
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	58d0      	ldr	r0, [r2, r3]
 8007584:	193b      	adds	r3, r7, r4
 8007586:	881d      	ldrh	r5, [r3, #0]
 8007588:	000e      	movs	r6, r1
 800758a:	187c      	adds	r4, r7, r1
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	230b      	movs	r3, #11
 8007590:	18fb      	adds	r3, r7, r3
 8007592:	7819      	ldrb	r1, [r3, #0]
 8007594:	002b      	movs	r3, r5
 8007596:	f7f9 fdaf 	bl	80010f8 <HAL_PCD_EP_Transmit>
 800759a:	0003      	movs	r3, r0
 800759c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800759e:	2516      	movs	r5, #22
 80075a0:	197c      	adds	r4, r7, r5
 80075a2:	19bb      	adds	r3, r7, r6
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	0018      	movs	r0, r3
 80075a8:	f000 f85b 	bl	8007662 <USBD_Get_USB_Status>
 80075ac:	0003      	movs	r3, r0
 80075ae:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80075b0:	197b      	adds	r3, r7, r5
 80075b2:	781b      	ldrb	r3, [r3, #0]
}
 80075b4:	0018      	movs	r0, r3
 80075b6:	46bd      	mov	sp, r7
 80075b8:	b007      	add	sp, #28
 80075ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80075bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	0008      	movs	r0, r1
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	0019      	movs	r1, r3
 80075ca:	230b      	movs	r3, #11
 80075cc:	18fb      	adds	r3, r7, r3
 80075ce:	1c02      	adds	r2, r0, #0
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	2408      	movs	r4, #8
 80075d4:	193b      	adds	r3, r7, r4
 80075d6:	1c0a      	adds	r2, r1, #0
 80075d8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075da:	2117      	movs	r1, #23
 80075dc:	187b      	adds	r3, r7, r1
 80075de:	2200      	movs	r2, #0
 80075e0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e2:	2516      	movs	r5, #22
 80075e4:	197b      	adds	r3, r7, r5
 80075e6:	2200      	movs	r2, #0
 80075e8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	23b0      	movs	r3, #176	; 0xb0
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	58d0      	ldr	r0, [r2, r3]
 80075f2:	193b      	adds	r3, r7, r4
 80075f4:	881d      	ldrh	r5, [r3, #0]
 80075f6:	000e      	movs	r6, r1
 80075f8:	187c      	adds	r4, r7, r1
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	230b      	movs	r3, #11
 80075fe:	18fb      	adds	r3, r7, r3
 8007600:	7819      	ldrb	r1, [r3, #0]
 8007602:	002b      	movs	r3, r5
 8007604:	f7f9 fd41 	bl	800108a <HAL_PCD_EP_Receive>
 8007608:	0003      	movs	r3, r0
 800760a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800760c:	2516      	movs	r5, #22
 800760e:	197c      	adds	r4, r7, r5
 8007610:	19bb      	adds	r3, r7, r6
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	0018      	movs	r0, r3
 8007616:	f000 f824 	bl	8007662 <USBD_Get_USB_Status>
 800761a:	0003      	movs	r3, r0
 800761c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800761e:	197b      	adds	r3, r7, r5
 8007620:	781b      	ldrb	r3, [r3, #0]
}
 8007622:	0018      	movs	r0, r3
 8007624:	46bd      	mov	sp, r7
 8007626:	b007      	add	sp, #28
 8007628:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800762c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007634:	4b02      	ldr	r3, [pc, #8]	; (8007640 <USBD_static_malloc+0x14>)
}
 8007636:	0018      	movs	r0, r3
 8007638:	46bd      	mov	sp, r7
 800763a:	b002      	add	sp, #8
 800763c:	bd80      	pop	{r7, pc}
 800763e:	46c0      	nop			; (mov r8, r8)
 8007640:	20000944 	.word	0x20000944

08007644 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]

}
 800764c:	46c0      	nop			; (mov r8, r8)
 800764e:	46bd      	mov	sp, r7
 8007650:	b002      	add	sp, #8
 8007652:	bd80      	pop	{r7, pc}

08007654 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007658:	f7f8 ff4a 	bl	80004f0 <SystemClock_Config>
}
 800765c:	46c0      	nop			; (mov r8, r8)
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	0002      	movs	r2, r0
 800766a:	1dfb      	adds	r3, r7, #7
 800766c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766e:	230f      	movs	r3, #15
 8007670:	18fb      	adds	r3, r7, r3
 8007672:	2200      	movs	r2, #0
 8007674:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007676:	1dfb      	adds	r3, r7, #7
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b03      	cmp	r3, #3
 800767c:	d017      	beq.n	80076ae <USBD_Get_USB_Status+0x4c>
 800767e:	dc1b      	bgt.n	80076b8 <USBD_Get_USB_Status+0x56>
 8007680:	2b02      	cmp	r3, #2
 8007682:	d00f      	beq.n	80076a4 <USBD_Get_USB_Status+0x42>
 8007684:	dc18      	bgt.n	80076b8 <USBD_Get_USB_Status+0x56>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <USBD_Get_USB_Status+0x2e>
 800768a:	2b01      	cmp	r3, #1
 800768c:	d005      	beq.n	800769a <USBD_Get_USB_Status+0x38>
 800768e:	e013      	b.n	80076b8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007690:	230f      	movs	r3, #15
 8007692:	18fb      	adds	r3, r7, r3
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
    break;
 8007698:	e013      	b.n	80076c2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800769a:	230f      	movs	r3, #15
 800769c:	18fb      	adds	r3, r7, r3
 800769e:	2202      	movs	r2, #2
 80076a0:	701a      	strb	r2, [r3, #0]
    break;
 80076a2:	e00e      	b.n	80076c2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076a4:	230f      	movs	r3, #15
 80076a6:	18fb      	adds	r3, r7, r3
 80076a8:	2201      	movs	r2, #1
 80076aa:	701a      	strb	r2, [r3, #0]
    break;
 80076ac:	e009      	b.n	80076c2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076ae:	230f      	movs	r3, #15
 80076b0:	18fb      	adds	r3, r7, r3
 80076b2:	2202      	movs	r2, #2
 80076b4:	701a      	strb	r2, [r3, #0]
    break;
 80076b6:	e004      	b.n	80076c2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80076b8:	230f      	movs	r3, #15
 80076ba:	18fb      	adds	r3, r7, r3
 80076bc:	2202      	movs	r2, #2
 80076be:	701a      	strb	r2, [r3, #0]
    break;
 80076c0:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80076c2:	230f      	movs	r3, #15
 80076c4:	18fb      	adds	r3, r7, r3
 80076c6:	781b      	ldrb	r3, [r3, #0]
}
 80076c8:	0018      	movs	r0, r3
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b004      	add	sp, #16
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <__libc_init_array>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	2600      	movs	r6, #0
 80076d4:	4d0c      	ldr	r5, [pc, #48]	; (8007708 <__libc_init_array+0x38>)
 80076d6:	4c0d      	ldr	r4, [pc, #52]	; (800770c <__libc_init_array+0x3c>)
 80076d8:	1b64      	subs	r4, r4, r5
 80076da:	10a4      	asrs	r4, r4, #2
 80076dc:	42a6      	cmp	r6, r4
 80076de:	d109      	bne.n	80076f4 <__libc_init_array+0x24>
 80076e0:	2600      	movs	r6, #0
 80076e2:	f000 f821 	bl	8007728 <_init>
 80076e6:	4d0a      	ldr	r5, [pc, #40]	; (8007710 <__libc_init_array+0x40>)
 80076e8:	4c0a      	ldr	r4, [pc, #40]	; (8007714 <__libc_init_array+0x44>)
 80076ea:	1b64      	subs	r4, r4, r5
 80076ec:	10a4      	asrs	r4, r4, #2
 80076ee:	42a6      	cmp	r6, r4
 80076f0:	d105      	bne.n	80076fe <__libc_init_array+0x2e>
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	00b3      	lsls	r3, r6, #2
 80076f6:	58eb      	ldr	r3, [r5, r3]
 80076f8:	4798      	blx	r3
 80076fa:	3601      	adds	r6, #1
 80076fc:	e7ee      	b.n	80076dc <__libc_init_array+0xc>
 80076fe:	00b3      	lsls	r3, r6, #2
 8007700:	58eb      	ldr	r3, [r5, r3]
 8007702:	4798      	blx	r3
 8007704:	3601      	adds	r6, #1
 8007706:	e7f2      	b.n	80076ee <__libc_init_array+0x1e>
 8007708:	0800780c 	.word	0x0800780c
 800770c:	0800780c 	.word	0x0800780c
 8007710:	0800780c 	.word	0x0800780c
 8007714:	08007810 	.word	0x08007810

08007718 <memset>:
 8007718:	0003      	movs	r3, r0
 800771a:	1882      	adds	r2, r0, r2
 800771c:	4293      	cmp	r3, r2
 800771e:	d100      	bne.n	8007722 <memset+0xa>
 8007720:	4770      	bx	lr
 8007722:	7019      	strb	r1, [r3, #0]
 8007724:	3301      	adds	r3, #1
 8007726:	e7f9      	b.n	800771c <memset+0x4>

08007728 <_init>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	46c0      	nop			; (mov r8, r8)
 800772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772e:	bc08      	pop	{r3}
 8007730:	469e      	mov	lr, r3
 8007732:	4770      	bx	lr

08007734 <_fini>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	46c0      	nop			; (mov r8, r8)
 8007738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773a:	bc08      	pop	{r3}
 800773c:	469e      	mov	lr, r3
 800773e:	4770      	bx	lr
