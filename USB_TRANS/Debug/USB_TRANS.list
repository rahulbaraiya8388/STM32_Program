
USB_TRANS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08007f88  08007f88  00017f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080dc  080080dc  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080e4  080080e4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e8  080080e8  000180e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080080ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011fc  2000017c  08008268  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001378  08008268  00021378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd3f  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c2  00000000  00000000  0002cee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  00030358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e85  00000000  00000000  00030cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eadd  00000000  00000000  00046b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000777e3  00000000  00000000  00055622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cce05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000242c  00000000  00000000  000cce58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000017c 	.word	0x2000017c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007f70 	.word	0x08007f70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000180 	.word	0x20000180
 8000104:	08007f70 	.word	0x08007f70

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 f954 	bl	8000758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f806 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f87a 	bl	80005ac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004b8:	f006 ffee 	bl	8007498 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <main+0x14>
	...

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b09d      	sub	sp, #116	; 0x74
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	2438      	movs	r4, #56	; 0x38
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	0018      	movs	r0, r3
 80004cc:	2338      	movs	r3, #56	; 0x38
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f007 fd45 	bl	8007f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	2324      	movs	r3, #36	; 0x24
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	0018      	movs	r0, r3
 80004dc:	2314      	movs	r3, #20
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f007 fd3d 	bl	8007f60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e6:	003b      	movs	r3, r7
 80004e8:	0018      	movs	r0, r3
 80004ea:	2324      	movs	r3, #36	; 0x24
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f007 fd36 	bl	8007f60 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <SystemClock_Config+0xe4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a2b      	ldr	r2, [pc, #172]	; (80005a8 <SystemClock_Config+0xe8>)
 80004fa:	401a      	ands	r2, r3
 80004fc:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <SystemClock_Config+0xe4>)
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	0109      	lsls	r1, r1, #4
 8000502:	430a      	orrs	r2, r1
 8000504:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000506:	0021      	movs	r1, r4
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2222      	movs	r2, #34	; 0x22
 800050c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2201      	movs	r2, #1
 8000512:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2210      	movs	r2, #16
 8000518:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2201      	movs	r2, #1
 800051e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2202      	movs	r2, #2
 8000524:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	02d2      	lsls	r2, r2, #11
 8000532:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	03d2      	lsls	r2, r2, #15
 800053a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	187b      	adds	r3, r7, r1
 800053e:	0018      	movs	r0, r3
 8000540:	f002 fa58 	bl	80029f4 <HAL_RCC_OscConfig>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000548:	f000 f898 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054c:	2124      	movs	r1, #36	; 0x24
 800054e:	187b      	adds	r3, r7, r1
 8000550:	220f      	movs	r2, #15
 8000552:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2203      	movs	r2, #3
 8000558:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2101      	movs	r1, #1
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fe03 	bl	800317c <HAL_RCC_ClockConfig>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800057a:	f000 f87f 	bl	800067c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800057e:	003b      	movs	r3, r7
 8000580:	2240      	movs	r2, #64	; 0x40
 8000582:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000584:	003b      	movs	r3, r7
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	04d2      	lsls	r2, r2, #19
 800058a:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058c:	003b      	movs	r3, r7
 800058e:	0018      	movs	r0, r3
 8000590:	f002 ffe2 	bl	8003558 <HAL_RCCEx_PeriphCLKConfig>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000598:	f000 f870 	bl	800067c <Error_Handler>
  }
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b01d      	add	sp, #116	; 0x74
 80005a2:	bd90      	pop	{r4, r7, pc}
 80005a4:	40007000 	.word	0x40007000
 80005a8:	ffffe7ff 	.word	0xffffe7ff

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b089      	sub	sp, #36	; 0x24
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	240c      	movs	r4, #12
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	0018      	movs	r0, r3
 80005b8:	2314      	movs	r3, #20
 80005ba:	001a      	movs	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f007 fccf 	bl	8007f60 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <MX_GPIO_Init+0x98>)
 80005c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005c6:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <MX_GPIO_Init+0x98>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	430a      	orrs	r2, r1
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80005ce:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <MX_GPIO_Init+0x98>)
 80005d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <MX_GPIO_Init+0x98>)
 80005dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <MX_GPIO_Init+0x98>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	430a      	orrs	r2, r1
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_GPIO_Init+0x98>)
 80005e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ea:	2201      	movs	r2, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_GPIO_Init+0x98>)
 80005f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <MX_GPIO_Init+0x98>)
 80005f8:	2102      	movs	r1, #2
 80005fa:	430a      	orrs	r2, r1
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_GPIO_Init+0x98>)
 8000600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000602:	2202      	movs	r2, #2
 8000604:	4013      	ands	r3, r2
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_GPIO_Init+0x9c>)
 800060c:	2200      	movs	r2, #0
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fb65 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000616:	0021      	movs	r1, r4
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2201      	movs	r2, #1
 8000622:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000630:	187b      	adds	r3, r7, r1
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <MX_GPIO_Init+0x9c>)
 8000634:	0019      	movs	r1, r3
 8000636:	0010      	movs	r0, r2
 8000638:	f000 f9dc 	bl	80009f4 <HAL_GPIO_Init>

}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b009      	add	sp, #36	; 0x24
 8000642:	bd90      	pop	{r4, r7, pc}
 8000644:	40021000 	.word	0x40021000
 8000648:	50000400 	.word	0x50000400

0800064c <CDC_ReceiveCallBack>:

/* USER CODE BEGIN 4 */

void CDC_ReceiveCallBack(uint8_t* Buf, uint32_t Len){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]

	CDC_Transmit_FS(Buf,Len);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b29a      	uxth	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	0011      	movs	r1, r2
 800065e:	0018      	movs	r0, r3
 8000660:	f006 ffa6 	bl	80075b0 <CDC_Transmit_FS>
	HAL_GPIO_TogglePin(BSP_LED_GPIO_Port, BSP_LED_Pin);
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <CDC_ReceiveCallBack+0x2c>)
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fb56 	bl	8000d1a <HAL_GPIO_TogglePin>


}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	50000400 	.word	0x50000400

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	e7fe      	b.n	8000684 <Error_Handler+0x8>
	...

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <HAL_MspInit+0x24>)
 800068e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_MspInit+0x24>)
 8000692:	2101      	movs	r1, #1
 8000694:	430a      	orrs	r2, r1
 8000696:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <HAL_MspInit+0x24>)
 800069a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <HAL_MspInit+0x24>)
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	0549      	lsls	r1, r1, #21
 80006a2:	430a      	orrs	r2, r1
 80006a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <NMI_Handler+0x4>

080006b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <HardFault_Handler+0x4>

080006bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d4:	f000 f894 	bl	8000800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <USB_IRQHandler+0x14>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fc58 	bl	8000f9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	20000e64 	.word	0x20000e64

080006f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000706:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000708:	f7ff fff6 	bl	80006f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070e:	490d      	ldr	r1, [pc, #52]	; (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000710:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <LoopForever+0xe>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000724:	4c0a      	ldr	r4, [pc, #40]	; (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000732:	f007 fbf1 	bl	8007f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000736:	f7ff feb7 	bl	80004a8 <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   r0, =_estack
 800073c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000748:	080080ec 	.word	0x080080ec
  ldr r2, =_sbss
 800074c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000750:	20001378 	.word	0x20001378

08000754 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_COMP_IRQHandler>
	...

08000758 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <HAL_Init+0x3c>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <HAL_Init+0x3c>)
 800076a:	2140      	movs	r1, #64	; 0x40
 800076c:	430a      	orrs	r2, r1
 800076e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000770:	2000      	movs	r0, #0
 8000772:	f000 f811 	bl	8000798 <HAL_InitTick>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d003      	beq.n	8000782 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e001      	b.n	8000786 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000782:	f7ff ff81 	bl	8000688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
}
 800078a:	0018      	movs	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40022000 	.word	0x40022000

08000798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <HAL_InitTick+0x5c>)
 80007a2:	681c      	ldr	r4, [r3, #0]
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_InitTick+0x60>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	0019      	movs	r1, r3
 80007aa:	23fa      	movs	r3, #250	; 0xfa
 80007ac:	0098      	lsls	r0, r3, #2
 80007ae:	f7ff fcab 	bl	8000108 <__udivsi3>
 80007b2:	0003      	movs	r3, r0
 80007b4:	0019      	movs	r1, r3
 80007b6:	0020      	movs	r0, r4
 80007b8:	f7ff fca6 	bl	8000108 <__udivsi3>
 80007bc:	0003      	movs	r3, r0
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 f90b 	bl	80009da <HAL_SYSTICK_Config>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007c8:	2301      	movs	r3, #1
 80007ca:	e00f      	b.n	80007ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d80b      	bhi.n	80007ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	2301      	movs	r3, #1
 80007d6:	425b      	negs	r3, r3
 80007d8:	2200      	movs	r2, #0
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 f8d8 	bl	8000990 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_InitTick+0x64>)
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	e000      	b.n	80007ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b003      	add	sp, #12
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000004 	.word	0x20000004

08000800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_IncTick+0x1c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	001a      	movs	r2, r3
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_IncTick+0x20>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	18d2      	adds	r2, r2, r3
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_IncTick+0x20>)
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	20000008 	.word	0x20000008
 8000820:	20000198 	.word	0x20000198

08000824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  return uwTick;
 8000828:	4b02      	ldr	r3, [pc, #8]	; (8000834 <HAL_GetTick+0x10>)
 800082a:	681b      	ldr	r3, [r3, #0]
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	20000198 	.word	0x20000198

08000838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	0002      	movs	r2, r0
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b7f      	cmp	r3, #127	; 0x7f
 800084a:	d809      	bhi.n	8000860 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	001a      	movs	r2, r3
 8000852:	231f      	movs	r3, #31
 8000854:	401a      	ands	r2, r3
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <__NVIC_EnableIRQ+0x30>)
 8000858:	2101      	movs	r1, #1
 800085a:	4091      	lsls	r1, r2
 800085c:	000a      	movs	r2, r1
 800085e:	601a      	str	r2, [r3, #0]
  }
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bd80      	pop	{r7, pc}
 8000868:	e000e100 	.word	0xe000e100

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	0002      	movs	r2, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b7f      	cmp	r3, #127	; 0x7f
 8000880:	d828      	bhi.n	80008d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000882:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <__NVIC_SetPriority+0xd4>)
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	33c0      	adds	r3, #192	; 0xc0
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	589b      	ldr	r3, [r3, r2]
 8000892:	1dfa      	adds	r2, r7, #7
 8000894:	7812      	ldrb	r2, [r2, #0]
 8000896:	0011      	movs	r1, r2
 8000898:	2203      	movs	r2, #3
 800089a:	400a      	ands	r2, r1
 800089c:	00d2      	lsls	r2, r2, #3
 800089e:	21ff      	movs	r1, #255	; 0xff
 80008a0:	4091      	lsls	r1, r2
 80008a2:	000a      	movs	r2, r1
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	401a      	ands	r2, r3
 80008a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	019b      	lsls	r3, r3, #6
 80008ae:	22ff      	movs	r2, #255	; 0xff
 80008b0:	401a      	ands	r2, r3
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0018      	movs	r0, r3
 80008b8:	2303      	movs	r3, #3
 80008ba:	4003      	ands	r3, r0
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c0:	481f      	ldr	r0, [pc, #124]	; (8000940 <__NVIC_SetPriority+0xd4>)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	089b      	lsrs	r3, r3, #2
 80008ca:	430a      	orrs	r2, r1
 80008cc:	33c0      	adds	r3, #192	; 0xc0
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008d2:	e031      	b.n	8000938 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <__NVIC_SetPriority+0xd8>)
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	0019      	movs	r1, r3
 80008dc:	230f      	movs	r3, #15
 80008de:	400b      	ands	r3, r1
 80008e0:	3b08      	subs	r3, #8
 80008e2:	089b      	lsrs	r3, r3, #2
 80008e4:	3306      	adds	r3, #6
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	18d3      	adds	r3, r2, r3
 80008ea:	3304      	adds	r3, #4
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	1dfa      	adds	r2, r7, #7
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	0011      	movs	r1, r2
 80008f4:	2203      	movs	r2, #3
 80008f6:	400a      	ands	r2, r1
 80008f8:	00d2      	lsls	r2, r2, #3
 80008fa:	21ff      	movs	r1, #255	; 0xff
 80008fc:	4091      	lsls	r1, r2
 80008fe:	000a      	movs	r2, r1
 8000900:	43d2      	mvns	r2, r2
 8000902:	401a      	ands	r2, r3
 8000904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	019b      	lsls	r3, r3, #6
 800090a:	22ff      	movs	r2, #255	; 0xff
 800090c:	401a      	ands	r2, r3
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	0018      	movs	r0, r3
 8000914:	2303      	movs	r3, #3
 8000916:	4003      	ands	r3, r0
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <__NVIC_SetPriority+0xd8>)
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	001c      	movs	r4, r3
 8000924:	230f      	movs	r3, #15
 8000926:	4023      	ands	r3, r4
 8000928:	3b08      	subs	r3, #8
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	430a      	orrs	r2, r1
 800092e:	3306      	adds	r3, #6
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	18c3      	adds	r3, r0, r3
 8000934:	3304      	adds	r3, #4
 8000936:	601a      	str	r2, [r3, #0]
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b003      	add	sp, #12
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	1e5a      	subs	r2, r3, #1
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	045b      	lsls	r3, r3, #17
 8000958:	429a      	cmp	r2, r3
 800095a:	d301      	bcc.n	8000960 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095c:	2301      	movs	r3, #1
 800095e:	e010      	b.n	8000982 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <SysTick_Config+0x44>)
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	3a01      	subs	r2, #1
 8000966:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000968:	2301      	movs	r3, #1
 800096a:	425b      	negs	r3, r3
 800096c:	2103      	movs	r1, #3
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff ff7c 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x44>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	210f      	movs	r1, #15
 800099c:	187b      	adds	r3, r7, r1
 800099e:	1c02      	adds	r2, r0, #0
 80009a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff ff5d 	bl	800086c <__NVIC_SetPriority>
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b004      	add	sp, #16
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	0002      	movs	r2, r0
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff ff33 	bl	8000838 <__NVIC_EnableIRQ>
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ffaf 	bl	8000948 <SysTick_Config>
 80009ea:	0003      	movs	r3, r0
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b002      	add	sp, #8
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a0a:	e14f      	b.n	8000cac <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2101      	movs	r1, #1
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	4091      	lsls	r1, r2
 8000a16:	000a      	movs	r2, r1
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d100      	bne.n	8000a24 <HAL_GPIO_Init+0x30>
 8000a22:	e140      	b.n	8000ca6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2203      	movs	r2, #3
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d005      	beq.n	8000a3c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	2203      	movs	r2, #3
 8000a36:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d130      	bne.n	8000a9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	409a      	lsls	r2, r3
 8000a4a:	0013      	movs	r3, r2
 8000a4c:	43da      	mvns	r2, r3
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	409a      	lsls	r2, r3
 8000a5e:	0013      	movs	r3, r2
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a72:	2201      	movs	r2, #1
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	091b      	lsrs	r3, r3, #4
 8000a88:	2201      	movs	r2, #1
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	0013      	movs	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d017      	beq.n	8000ada <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	43da      	mvns	r2, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	409a      	lsls	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2203      	movs	r2, #3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d123      	bne.n	8000b2e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	08da      	lsrs	r2, r3, #3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3208      	adds	r2, #8
 8000aee:	0092      	lsls	r2, r2, #2
 8000af0:	58d3      	ldr	r3, [r2, r3]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	2207      	movs	r2, #7
 8000af8:	4013      	ands	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	220f      	movs	r2, #15
 8000afe:	409a      	lsls	r2, r3
 8000b00:	0013      	movs	r3, r2
 8000b02:	43da      	mvns	r2, r3
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	691a      	ldr	r2, [r3, #16]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	2107      	movs	r1, #7
 8000b12:	400b      	ands	r3, r1
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	409a      	lsls	r2, r3
 8000b18:	0013      	movs	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	08da      	lsrs	r2, r3, #3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3208      	adds	r2, #8
 8000b28:	0092      	lsls	r2, r2, #2
 8000b2a:	6939      	ldr	r1, [r7, #16]
 8000b2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	0013      	movs	r3, r2
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	409a      	lsls	r2, r3
 8000b54:	0013      	movs	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	23c0      	movs	r3, #192	; 0xc0
 8000b68:	029b      	lsls	r3, r3, #10
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	d100      	bne.n	8000b70 <HAL_GPIO_Init+0x17c>
 8000b6e:	e09a      	b.n	8000ca6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b70:	4b54      	ldr	r3, [pc, #336]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b74:	4b53      	ldr	r3, [pc, #332]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b7c:	4a52      	ldr	r2, [pc, #328]	; (8000cc8 <HAL_GPIO_Init+0x2d4>)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	089b      	lsrs	r3, r3, #2
 8000b82:	3302      	adds	r3, #2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	589b      	ldr	r3, [r3, r2]
 8000b88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	4013      	ands	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	220f      	movs	r2, #15
 8000b94:	409a      	lsls	r2, r3
 8000b96:	0013      	movs	r3, r2
 8000b98:	43da      	mvns	r2, r3
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	23a0      	movs	r3, #160	; 0xa0
 8000ba4:	05db      	lsls	r3, r3, #23
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d019      	beq.n	8000bde <HAL_GPIO_Init+0x1ea>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a47      	ldr	r2, [pc, #284]	; (8000ccc <HAL_GPIO_Init+0x2d8>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d013      	beq.n	8000bda <HAL_GPIO_Init+0x1e6>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a46      	ldr	r2, [pc, #280]	; (8000cd0 <HAL_GPIO_Init+0x2dc>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d00d      	beq.n	8000bd6 <HAL_GPIO_Init+0x1e2>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a45      	ldr	r2, [pc, #276]	; (8000cd4 <HAL_GPIO_Init+0x2e0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d007      	beq.n	8000bd2 <HAL_GPIO_Init+0x1de>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a44      	ldr	r2, [pc, #272]	; (8000cd8 <HAL_GPIO_Init+0x2e4>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d101      	bne.n	8000bce <HAL_GPIO_Init+0x1da>
 8000bca:	2305      	movs	r3, #5
 8000bcc:	e008      	b.n	8000be0 <HAL_GPIO_Init+0x1ec>
 8000bce:	2306      	movs	r3, #6
 8000bd0:	e006      	b.n	8000be0 <HAL_GPIO_Init+0x1ec>
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e004      	b.n	8000be0 <HAL_GPIO_Init+0x1ec>
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	e002      	b.n	8000be0 <HAL_GPIO_Init+0x1ec>
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e000      	b.n	8000be0 <HAL_GPIO_Init+0x1ec>
 8000bde:	2300      	movs	r3, #0
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	2103      	movs	r1, #3
 8000be4:	400a      	ands	r2, r1
 8000be6:	0092      	lsls	r2, r2, #2
 8000be8:	4093      	lsls	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bf0:	4935      	ldr	r1, [pc, #212]	; (8000cc8 <HAL_GPIO_Init+0x2d4>)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	089b      	lsrs	r3, r3, #2
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bfe:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <HAL_GPIO_Init+0x2e8>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43da      	mvns	r2, r3
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	035b      	lsls	r3, r3, #13
 8000c16:	4013      	ands	r3, r2
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c22:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <HAL_GPIO_Init+0x2e8>)
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c28:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <HAL_GPIO_Init+0x2e8>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	43da      	mvns	r2, r3
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	039b      	lsls	r3, r3, #14
 8000c40:	4013      	ands	r3, r2
 8000c42:	d003      	beq.n	8000c4c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <HAL_GPIO_Init+0x2e8>)
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000c52:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <HAL_GPIO_Init+0x2e8>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	029b      	lsls	r3, r3, #10
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_GPIO_Init+0x2e8>)
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_GPIO_Init+0x2e8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43da      	mvns	r2, r3
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	025b      	lsls	r3, r3, #9
 8000c94:	4013      	ands	r3, r2
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_GPIO_Init+0x2e8>)
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	40da      	lsrs	r2, r3
 8000cb4:	1e13      	subs	r3, r2, #0
 8000cb6:	d000      	beq.n	8000cba <HAL_GPIO_Init+0x2c6>
 8000cb8:	e6a8      	b.n	8000a0c <HAL_GPIO_Init+0x18>
  }
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b006      	add	sp, #24
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	50000400 	.word	0x50000400
 8000cd0:	50000800 	.word	0x50000800
 8000cd4:	50000c00 	.word	0x50000c00
 8000cd8:	50001c00 	.word	0x50001c00
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	0008      	movs	r0, r1
 8000cea:	0011      	movs	r1, r2
 8000cec:	1cbb      	adds	r3, r7, #2
 8000cee:	1c02      	adds	r2, r0, #0
 8000cf0:	801a      	strh	r2, [r3, #0]
 8000cf2:	1c7b      	adds	r3, r7, #1
 8000cf4:	1c0a      	adds	r2, r1, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cf8:	1c7b      	adds	r3, r7, #1
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d004      	beq.n	8000d0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d00:	1cbb      	adds	r3, r7, #2
 8000d02:	881a      	ldrh	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000d08:	e003      	b.n	8000d12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000d0a:	1cbb      	adds	r3, r7, #2
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	000a      	movs	r2, r1
 8000d24:	1cbb      	adds	r3, r7, #2
 8000d26:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d2e:	1cbb      	adds	r3, r7, #2
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	4013      	ands	r3, r2
 8000d36:	041a      	lsls	r2, r3, #16
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	1cb9      	adds	r1, r7, #2
 8000d3e:	8809      	ldrh	r1, [r1, #0]
 8000d40:	400b      	ands	r3, r1
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	619a      	str	r2, [r3, #24]
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b004      	add	sp, #16
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d52:	b08b      	sub	sp, #44	; 0x2c
 8000d54:	af06      	add	r7, sp, #24
 8000d56:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e0f0      	b.n	8000f44 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a79      	ldr	r2, [pc, #484]	; (8000f4c <HAL_PCD_Init+0x1fc>)
 8000d66:	5c9b      	ldrb	r3, [r3, r2]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d108      	bne.n	8000d80 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	23aa      	movs	r3, #170	; 0xaa
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	2100      	movs	r1, #0
 8000d76:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f006 fd76 	bl	800786c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a72      	ldr	r2, [pc, #456]	; (8000f4c <HAL_PCD_Init+0x1fc>)
 8000d84:	2103      	movs	r1, #3
 8000d86:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f002 fd87 	bl	80038a0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d92:	230f      	movs	r3, #15
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	e049      	b.n	8000e30 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d9c:	200f      	movs	r0, #15
 8000d9e:	183b      	adds	r3, r7, r0
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	0013      	movs	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	189b      	adds	r3, r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	18cb      	adds	r3, r1, r3
 8000db0:	3301      	adds	r3, #1
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000db6:	183b      	adds	r3, r7, r0
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	0013      	movs	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	189b      	adds	r3, r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	183a      	adds	r2, r7, r0
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000dcc:	183b      	adds	r3, r7, r0
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	189b      	adds	r3, r3, r2
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	18cb      	adds	r3, r1, r3
 8000dde:	3303      	adds	r3, #3
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000de4:	183b      	adds	r3, r7, r0
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	0013      	movs	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	189b      	adds	r3, r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	18cb      	adds	r3, r1, r3
 8000df4:	3338      	adds	r3, #56	; 0x38
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000dfa:	183b      	adds	r3, r7, r0
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	0013      	movs	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	189b      	adds	r3, r3, r2
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	18cb      	adds	r3, r1, r3
 8000e0a:	333c      	adds	r3, #60	; 0x3c
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e10:	183b      	adds	r3, r7, r0
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	0013      	movs	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	189b      	adds	r3, r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	18cb      	adds	r3, r1, r3
 8000e20:	3340      	adds	r3, #64	; 0x40
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e26:	183b      	adds	r3, r7, r0
 8000e28:	781a      	ldrb	r2, [r3, #0]
 8000e2a:	183b      	adds	r3, r7, r0
 8000e2c:	3201      	adds	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	210f      	movs	r1, #15
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	781a      	ldrb	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3ae      	bcc.n	8000d9c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
 8000e44:	e056      	b.n	8000ef4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e46:	240f      	movs	r4, #15
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	236a      	movs	r3, #106	; 0x6a
 8000e50:	33ff      	adds	r3, #255	; 0xff
 8000e52:	0019      	movs	r1, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	189b      	adds	r3, r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	18c3      	adds	r3, r0, r3
 8000e5e:	185b      	adds	r3, r3, r1
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	23b4      	movs	r3, #180	; 0xb4
 8000e6c:	0059      	lsls	r1, r3, #1
 8000e6e:	0013      	movs	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	189b      	adds	r3, r3, r2
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	18c3      	adds	r3, r0, r3
 8000e78:	185b      	adds	r3, r3, r1
 8000e7a:	193a      	adds	r2, r7, r4
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	236c      	movs	r3, #108	; 0x6c
 8000e88:	33ff      	adds	r3, #255	; 0xff
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	189b      	adds	r3, r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	18c3      	adds	r3, r0, r3
 8000e96:	185b      	adds	r3, r3, r1
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	781a      	ldrb	r2, [r3, #0]
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	23bc      	movs	r3, #188	; 0xbc
 8000ea4:	0059      	lsls	r1, r3, #1
 8000ea6:	0013      	movs	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	189b      	adds	r3, r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	18c3      	adds	r3, r0, r3
 8000eb0:	185b      	adds	r3, r3, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	23be      	movs	r3, #190	; 0xbe
 8000ebe:	0059      	lsls	r1, r3, #1
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	189b      	adds	r3, r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	18c3      	adds	r3, r0, r3
 8000eca:	185b      	adds	r3, r3, r1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	781a      	ldrb	r2, [r3, #0]
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	23c0      	movs	r3, #192	; 0xc0
 8000ed8:	0059      	lsls	r1, r3, #1
 8000eda:	0013      	movs	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	189b      	adds	r3, r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	18c3      	adds	r3, r0, r3
 8000ee4:	185b      	adds	r3, r3, r1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	3201      	adds	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	781a      	ldrb	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3a1      	bcc.n	8000e46 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	466a      	mov	r2, sp
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	3210      	adds	r2, #16
 8000f10:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000f12:	c170      	stmia	r1!, {r4, r5, r6}
 8000f14:	ca30      	ldmia	r2!, {r4, r5}
 8000f16:	c130      	stmia	r1!, {r4, r5}
 8000f18:	6859      	ldr	r1, [r3, #4]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	f002 fcd9 	bl	80038d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2224      	movs	r2, #36	; 0x24
 8000f26:	2100      	movs	r1, #0
 8000f28:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_PCD_Init+0x1fc>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d103      	bne.n	8000f42 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 fd23 	bl	8002988 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b005      	add	sp, #20
 8000f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4c:	000002a9 	.word	0x000002a9

08000f50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	23aa      	movs	r3, #170	; 0xaa
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <HAL_PCD_Start+0x18>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e014      	b.n	8000f92 <HAL_PCD_Start+0x42>
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	23aa      	movs	r3, #170	; 0xaa
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	2101      	movs	r1, #1
 8000f70:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	0018      	movs	r0, r3
 8000f78:	f002 fc7c 	bl	8003874 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	0018      	movs	r0, r3
 8000f82:	f004 fc7f 	bl	8005884 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	23aa      	movs	r3, #170	; 0xaa
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f004 fc81 	bl	80058b0 <USB_ReadInterrupts>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d004      	beq.n	8000fc6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 fb62 	bl	8001688 <PCD_EP_ISR_Handler>

    return;
 8000fc4:	e11d      	b.n	8001202 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d015      	beq.n	8000ffc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2244      	movs	r2, #68	; 0x44
 8000fd6:	5a9b      	ldrh	r3, [r3, r2]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	498a      	ldr	r1, [pc, #552]	; (8001208 <HAL_PCD_IRQHandler+0x26c>)
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	b291      	uxth	r1, r2
 8000fe4:	2244      	movs	r2, #68	; 0x44
 8000fe6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	0018      	movs	r0, r3
 8000fec:	f006 fcc1 	bl	8007972 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f000 f915 	bl	8001224 <HAL_PCD_SetAddress>

    return;
 8000ffa:	e102      	b.n	8001202 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	01db      	lsls	r3, r3, #7
 8001002:	4013      	ands	r3, r2
 8001004:	d00c      	beq.n	8001020 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2244      	movs	r2, #68	; 0x44
 800100c:	5a9b      	ldrh	r3, [r3, r2]
 800100e:	b29a      	uxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	497d      	ldr	r1, [pc, #500]	; (800120c <HAL_PCD_IRQHandler+0x270>)
 8001016:	400a      	ands	r2, r1
 8001018:	b291      	uxth	r1, r2
 800101a:	2244      	movs	r2, #68	; 0x44
 800101c:	5299      	strh	r1, [r3, r2]

    return;
 800101e:	e0f0      	b.n	8001202 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	019b      	lsls	r3, r3, #6
 8001026:	4013      	ands	r3, r2
 8001028:	d00c      	beq.n	8001044 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2244      	movs	r2, #68	; 0x44
 8001030:	5a9b      	ldrh	r3, [r3, r2]
 8001032:	b29a      	uxth	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4975      	ldr	r1, [pc, #468]	; (8001210 <HAL_PCD_IRQHandler+0x274>)
 800103a:	400a      	ands	r2, r1
 800103c:	b291      	uxth	r1, r2
 800103e:	2244      	movs	r2, #68	; 0x44
 8001040:	5299      	strh	r1, [r3, r2]

    return;
 8001042:	e0de      	b.n	8001202 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	015b      	lsls	r3, r3, #5
 800104a:	4013      	ands	r3, r2
 800104c:	d038      	beq.n	80010c0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	5a9b      	ldrh	r3, [r3, r2]
 8001056:	b29a      	uxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2104      	movs	r1, #4
 800105e:	438a      	bics	r2, r1
 8001060:	b291      	uxth	r1, r2
 8001062:	2240      	movs	r2, #64	; 0x40
 8001064:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2240      	movs	r2, #64	; 0x40
 800106c:	5a9b      	ldrh	r3, [r3, r2]
 800106e:	b29a      	uxth	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2108      	movs	r1, #8
 8001076:	438a      	bics	r2, r1
 8001078:	b291      	uxth	r1, r2
 800107a:	2240      	movs	r2, #64	; 0x40
 800107c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	23b8      	movs	r3, #184	; 0xb8
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d109      	bne.n	800109e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	23b8      	movs	r3, #184	; 0xb8
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	2100      	movs	r1, #0
 8001092:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2100      	movs	r1, #0
 8001098:	0018      	movs	r0, r3
 800109a:	f001 fc9f 	bl	80029dc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f006 fca7 	bl	80079f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2244      	movs	r2, #68	; 0x44
 80010ac:	5a9b      	ldrh	r3, [r3, r2]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4957      	ldr	r1, [pc, #348]	; (8001214 <HAL_PCD_IRQHandler+0x278>)
 80010b6:	400a      	ands	r2, r1
 80010b8:	b291      	uxth	r1, r2
 80010ba:	2244      	movs	r2, #68	; 0x44
 80010bc:	5299      	strh	r1, [r3, r2]

    return;
 80010be:	e0a0      	b.n	8001202 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	4013      	ands	r3, r2
 80010c8:	d028      	beq.n	800111c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2240      	movs	r2, #64	; 0x40
 80010d0:	5a9b      	ldrh	r3, [r3, r2]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2108      	movs	r1, #8
 80010da:	430a      	orrs	r2, r1
 80010dc:	b291      	uxth	r1, r2
 80010de:	2240      	movs	r2, #64	; 0x40
 80010e0:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2244      	movs	r2, #68	; 0x44
 80010e8:	5a9b      	ldrh	r3, [r3, r2]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4949      	ldr	r1, [pc, #292]	; (8001218 <HAL_PCD_IRQHandler+0x27c>)
 80010f2:	400a      	ands	r2, r1
 80010f4:	b291      	uxth	r1, r2
 80010f6:	2244      	movs	r2, #68	; 0x44
 80010f8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2240      	movs	r2, #64	; 0x40
 8001100:	5a9b      	ldrh	r3, [r3, r2]
 8001102:	b29a      	uxth	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2104      	movs	r1, #4
 800110a:	430a      	orrs	r2, r1
 800110c:	b291      	uxth	r1, r2
 800110e:	2240      	movs	r2, #64	; 0x40
 8001110:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	0018      	movs	r0, r3
 8001116:	f006 fc51 	bl	80079bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800111a:	e072      	b.n	8001202 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	4013      	ands	r3, r2
 8001122:	d046      	beq.n	80011b2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2244      	movs	r2, #68	; 0x44
 800112a:	5a9b      	ldrh	r3, [r3, r2]
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	438a      	bics	r2, r1
 8001136:	b291      	uxth	r1, r2
 8001138:	2244      	movs	r2, #68	; 0x44
 800113a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	23b8      	movs	r3, #184	; 0xb8
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d12f      	bne.n	80011a8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2240      	movs	r2, #64	; 0x40
 800114e:	5a9b      	ldrh	r3, [r3, r2]
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2104      	movs	r1, #4
 8001158:	430a      	orrs	r2, r1
 800115a:	b291      	uxth	r1, r2
 800115c:	2240      	movs	r2, #64	; 0x40
 800115e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2240      	movs	r2, #64	; 0x40
 8001166:	5a9b      	ldrh	r3, [r3, r2]
 8001168:	b29a      	uxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2108      	movs	r1, #8
 8001170:	430a      	orrs	r2, r1
 8001172:	b291      	uxth	r1, r2
 8001174:	2240      	movs	r2, #64	; 0x40
 8001176:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	23b8      	movs	r3, #184	; 0xb8
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	2101      	movs	r1, #1
 8001180:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2254      	movs	r2, #84	; 0x54
 8001188:	5a9b      	ldrh	r3, [r3, r2]
 800118a:	b29b      	uxth	r3, r3
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	223c      	movs	r2, #60	; 0x3c
 8001190:	4013      	ands	r3, r2
 8001192:	0019      	movs	r1, r3
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	23b9      	movs	r3, #185	; 0xb9
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2101      	movs	r1, #1
 80011a0:	0018      	movs	r0, r3
 80011a2:	f001 fc1b 	bl	80029dc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80011a6:	e02c      	b.n	8001202 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	0018      	movs	r0, r3
 80011ac:	f006 fc06 	bl	80079bc <HAL_PCD_SuspendCallback>
    return;
 80011b0:	e027      	b.n	8001202 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4013      	ands	r3, r2
 80011ba:	d010      	beq.n	80011de <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2244      	movs	r2, #68	; 0x44
 80011c2:	5a9b      	ldrh	r3, [r3, r2]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4914      	ldr	r1, [pc, #80]	; (800121c <HAL_PCD_IRQHandler+0x280>)
 80011cc:	400a      	ands	r2, r1
 80011ce:	b291      	uxth	r1, r2
 80011d0:	2244      	movs	r2, #68	; 0x44
 80011d2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	0018      	movs	r0, r3
 80011d8:	f006 fbbc 	bl	8007954 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011dc:	e011      	b.n	8001202 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4013      	ands	r3, r2
 80011e6:	d00c      	beq.n	8001202 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2244      	movs	r2, #68	; 0x44
 80011ee:	5a9b      	ldrh	r3, [r3, r2]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	490a      	ldr	r1, [pc, #40]	; (8001220 <HAL_PCD_IRQHandler+0x284>)
 80011f8:	400a      	ands	r2, r1
 80011fa:	b291      	uxth	r1, r2
 80011fc:	2244      	movs	r2, #68	; 0x44
 80011fe:	5299      	strh	r1, [r3, r2]

    return;
 8001200:	46c0      	nop			; (mov r8, r8)
  }
}
 8001202:	46bd      	mov	sp, r7
 8001204:	b004      	add	sp, #16
 8001206:	bd80      	pop	{r7, pc}
 8001208:	fffffbff 	.word	0xfffffbff
 800120c:	ffffbfff 	.word	0xffffbfff
 8001210:	ffffdfff 	.word	0xffffdfff
 8001214:	ffffefff 	.word	0xffffefff
 8001218:	fffff7ff 	.word	0xfffff7ff
 800121c:	fffffdff 	.word	0xfffffdff
 8001220:	fffffeff 	.word	0xfffffeff

08001224 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	000a      	movs	r2, r1
 800122e:	1cfb      	adds	r3, r7, #3
 8001230:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	23aa      	movs	r3, #170	; 0xaa
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	5cd3      	ldrb	r3, [r2, r3]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_PCD_SetAddress+0x1e>
 800123e:	2302      	movs	r3, #2
 8001240:	e017      	b.n	8001272 <HAL_PCD_SetAddress+0x4e>
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	23aa      	movs	r3, #170	; 0xaa
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	2101      	movs	r1, #1
 800124a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	1cfa      	adds	r2, r7, #3
 8001250:	2124      	movs	r1, #36	; 0x24
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	1cfb      	adds	r3, r7, #3
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	0019      	movs	r1, r3
 8001260:	0010      	movs	r0, r2
 8001262:	f004 fafb 	bl	800585c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	23aa      	movs	r3, #170	; 0xaa
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	2100      	movs	r1, #0
 800126e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	0018      	movs	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	b002      	add	sp, #8
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800127a:	b590      	push	{r4, r7, lr}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	000c      	movs	r4, r1
 8001284:	0010      	movs	r0, r2
 8001286:	0019      	movs	r1, r3
 8001288:	1cfb      	adds	r3, r7, #3
 800128a:	1c22      	adds	r2, r4, #0
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	003b      	movs	r3, r7
 8001290:	1c02      	adds	r2, r0, #0
 8001292:	801a      	strh	r2, [r3, #0]
 8001294:	1cbb      	adds	r3, r7, #2
 8001296:	1c0a      	adds	r2, r1, #0
 8001298:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800129a:	230b      	movs	r3, #11
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012a2:	1cfb      	adds	r3, r7, #3
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da0f      	bge.n	80012cc <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012ac:	1cfb      	adds	r3, r7, #3
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2207      	movs	r2, #7
 80012b2:	4013      	ands	r3, r2
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	0013      	movs	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	189b      	adds	r3, r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2201      	movs	r2, #1
 80012c8:	705a      	strb	r2, [r3, #1]
 80012ca:	e00f      	b.n	80012ec <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012cc:	1cfb      	adds	r3, r7, #3
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2207      	movs	r2, #7
 80012d2:	401a      	ands	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	189b      	adds	r3, r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	3369      	adds	r3, #105	; 0x69
 80012de:	33ff      	adds	r3, #255	; 0xff
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	18d3      	adds	r3, r2, r3
 80012e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80012ec:	1cfb      	adds	r3, r7, #3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2207      	movs	r2, #7
 80012f2:	4013      	ands	r3, r2
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80012fa:	003b      	movs	r3, r7
 80012fc:	881a      	ldrh	r2, [r3, #0]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1cba      	adds	r2, r7, #2
 8001306:	7812      	ldrb	r2, [r2, #0]
 8001308:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800130a:	1cbb      	adds	r3, r7, #2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d102      	bne.n	8001318 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	23aa      	movs	r3, #170	; 0xaa
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	5cd3      	ldrb	r3, [r2, r3]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_PCD_EP_Open+0xae>
 8001324:	2302      	movs	r3, #2
 8001326:	e013      	b.n	8001350 <HAL_PCD_EP_Open+0xd6>
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	23aa      	movs	r3, #170	; 0xaa
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	2101      	movs	r1, #1
 8001330:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	0011      	movs	r1, r2
 800133a:	0018      	movs	r0, r3
 800133c:	f002 faf2 	bl	8003924 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	23aa      	movs	r3, #170	; 0xaa
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	2100      	movs	r1, #0
 8001348:	54d1      	strb	r1, [r2, r3]

  return ret;
 800134a:	230b      	movs	r3, #11
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	781b      	ldrb	r3, [r3, #0]
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	b005      	add	sp, #20
 8001356:	bd90      	pop	{r4, r7, pc}

08001358 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	000a      	movs	r2, r1
 8001362:	1cfb      	adds	r3, r7, #3
 8001364:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001366:	1cfb      	adds	r3, r7, #3
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b25b      	sxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	da0f      	bge.n	8001390 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001370:	1cfb      	adds	r3, r7, #3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2207      	movs	r2, #7
 8001376:	4013      	ands	r3, r2
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	0013      	movs	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	189b      	adds	r3, r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	18d3      	adds	r3, r2, r3
 8001386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2201      	movs	r2, #1
 800138c:	705a      	strb	r2, [r3, #1]
 800138e:	e00f      	b.n	80013b0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001390:	1cfb      	adds	r3, r7, #3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2207      	movs	r2, #7
 8001396:	401a      	ands	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	189b      	adds	r3, r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	3369      	adds	r3, #105	; 0x69
 80013a2:	33ff      	adds	r3, #255	; 0xff
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	18d3      	adds	r3, r2, r3
 80013a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b0:	1cfb      	adds	r3, r7, #3
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2207      	movs	r2, #7
 80013b6:	4013      	ands	r3, r2
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	23aa      	movs	r3, #170	; 0xaa
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_PCD_EP_Close+0x76>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e011      	b.n	80013f2 <HAL_PCD_EP_Close+0x9a>
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	23aa      	movs	r3, #170	; 0xaa
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	2101      	movs	r1, #1
 80013d6:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	0011      	movs	r1, r2
 80013e0:	0018      	movs	r0, r3
 80013e2:	f002 fe41 	bl	8004068 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	23aa      	movs	r3, #170	; 0xaa
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	2100      	movs	r1, #0
 80013ee:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b004      	add	sp, #16
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	200b      	movs	r0, #11
 8001408:	183b      	adds	r3, r7, r0
 800140a:	1c0a      	adds	r2, r1, #0
 800140c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800140e:	0001      	movs	r1, r0
 8001410:	187b      	adds	r3, r7, r1
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2207      	movs	r2, #7
 8001416:	401a      	ands	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	189b      	adds	r3, r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	3369      	adds	r3, #105	; 0x69
 8001422:	33ff      	adds	r3, #255	; 0xff
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	18d3      	adds	r3, r2, r3
 8001428:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2200      	movs	r2, #0
 8001440:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001442:	187b      	adds	r3, r7, r1
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2207      	movs	r2, #7
 8001448:	4013      	ands	r3, r2
 800144a:	b2da      	uxtb	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f002 ffc5 	bl	80043e8 <USB_EPStartXfer>

  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b006      	add	sp, #24
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	000a      	movs	r2, r1
 8001472:	1cfb      	adds	r3, r7, #3
 8001474:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001476:	1cfb      	adds	r3, r7, #3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2207      	movs	r2, #7
 800147c:	401a      	ands	r2, r3
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	23c2      	movs	r3, #194	; 0xc2
 8001482:	0059      	lsls	r1, r3, #1
 8001484:	0013      	movs	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	189b      	adds	r3, r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	18c3      	adds	r3, r0, r3
 800148e:	185b      	adds	r3, r3, r1
 8001490:	681b      	ldr	r3, [r3, #0]
}
 8001492:	0018      	movs	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	b002      	add	sp, #8
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	200b      	movs	r0, #11
 80014a8:	183b      	adds	r3, r7, r0
 80014aa:	1c0a      	adds	r2, r1, #0
 80014ac:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ae:	183b      	adds	r3, r7, r0
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2207      	movs	r2, #7
 80014b4:	4013      	ands	r3, r2
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	0013      	movs	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	189b      	adds	r3, r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	18d3      	adds	r3, r2, r3
 80014c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2224      	movs	r2, #36	; 0x24
 80014d6:	2101      	movs	r1, #1
 80014d8:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2201      	movs	r2, #1
 80014ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014ec:	183b      	adds	r3, r7, r0
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2207      	movs	r2, #7
 80014f2:	4013      	ands	r3, r2
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	0011      	movs	r1, r2
 8001502:	0018      	movs	r0, r3
 8001504:	f002 ff70 	bl	80043e8 <USB_EPStartXfer>

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	0018      	movs	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	b006      	add	sp, #24
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	000a      	movs	r2, r1
 800151c:	1cfb      	adds	r3, r7, #3
 800151e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001520:	1cfb      	adds	r3, r7, #3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2207      	movs	r2, #7
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	d901      	bls.n	8001534 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e046      	b.n	80015c2 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001534:	1cfb      	adds	r3, r7, #3
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b25b      	sxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	da0f      	bge.n	800155e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800153e:	1cfb      	adds	r3, r7, #3
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2207      	movs	r2, #7
 8001544:	4013      	ands	r3, r2
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	0013      	movs	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	189b      	adds	r3, r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	18d3      	adds	r3, r2, r3
 8001554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2201      	movs	r2, #1
 800155a:	705a      	strb	r2, [r3, #1]
 800155c:	e00d      	b.n	800157a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800155e:	1cfb      	adds	r3, r7, #3
 8001560:	781a      	ldrb	r2, [r3, #0]
 8001562:	0013      	movs	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	189b      	adds	r3, r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	3369      	adds	r3, #105	; 0x69
 800156c:	33ff      	adds	r3, #255	; 0xff
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	18d3      	adds	r3, r2, r3
 8001572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001580:	1cfb      	adds	r3, r7, #3
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2207      	movs	r2, #7
 8001586:	4013      	ands	r3, r2
 8001588:	b2da      	uxtb	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	23aa      	movs	r3, #170	; 0xaa
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_PCD_EP_SetStall+0x8c>
 800159a:	2302      	movs	r3, #2
 800159c:	e011      	b.n	80015c2 <HAL_PCD_EP_SetStall+0xb0>
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	23aa      	movs	r3, #170	; 0xaa
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	2101      	movs	r1, #1
 80015a6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	0011      	movs	r1, r2
 80015b0:	0018      	movs	r0, r3
 80015b2:	f004 f851 	bl	8005658 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	23aa      	movs	r3, #170	; 0xaa
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	2100      	movs	r1, #0
 80015be:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	0018      	movs	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	000a      	movs	r2, r1
 80015d4:	1cfb      	adds	r3, r7, #3
 80015d6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015d8:	1cfb      	adds	r3, r7, #3
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	220f      	movs	r2, #15
 80015de:	401a      	ands	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d901      	bls.n	80015ec <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e048      	b.n	800167e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015ec:	1cfb      	adds	r3, r7, #3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da0f      	bge.n	8001616 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015f6:	1cfb      	adds	r3, r7, #3
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2207      	movs	r2, #7
 80015fc:	4013      	ands	r3, r2
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	0013      	movs	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	189b      	adds	r3, r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	18d3      	adds	r3, r2, r3
 800160c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	705a      	strb	r2, [r3, #1]
 8001614:	e00f      	b.n	8001636 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001616:	1cfb      	adds	r3, r7, #3
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2207      	movs	r2, #7
 800161c:	401a      	ands	r2, r3
 800161e:	0013      	movs	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	189b      	adds	r3, r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	3369      	adds	r3, #105	; 0x69
 8001628:	33ff      	adds	r3, #255	; 0xff
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	18d3      	adds	r3, r2, r3
 800162e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800163c:	1cfb      	adds	r3, r7, #3
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2207      	movs	r2, #7
 8001642:	4013      	ands	r3, r2
 8001644:	b2da      	uxtb	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	23aa      	movs	r3, #170	; 0xaa
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_PCD_EP_ClrStall+0x90>
 8001656:	2302      	movs	r3, #2
 8001658:	e011      	b.n	800167e <HAL_PCD_EP_ClrStall+0xb4>
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	23aa      	movs	r3, #170	; 0xaa
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	2101      	movs	r1, #1
 8001662:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	0011      	movs	r1, r2
 800166c:	0018      	movs	r0, r3
 800166e:	f004 f843 	bl	80056f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	23aa      	movs	r3, #170	; 0xaa
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	2100      	movs	r1, #0
 800167a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	0018      	movs	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	b004      	add	sp, #16
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b096      	sub	sp, #88	; 0x58
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001690:	f000 fbec 	bl	8001e6c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	204e      	movs	r0, #78	; 0x4e
 800169a:	183b      	adds	r3, r7, r0
 800169c:	2144      	movs	r1, #68	; 0x44
 800169e:	5a52      	ldrh	r2, [r2, r1]
 80016a0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016a2:	183b      	adds	r3, r7, r0
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	244d      	movs	r4, #77	; 0x4d
 80016aa:	193b      	adds	r3, r7, r4
 80016ac:	210f      	movs	r1, #15
 80016ae:	400a      	ands	r2, r1
 80016b0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d000      	beq.n	80016bc <PCD_EP_ISR_Handler+0x34>
 80016ba:	e18f      	b.n	80019dc <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016bc:	183b      	adds	r3, r7, r0
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	2210      	movs	r2, #16
 80016c2:	4013      	ands	r3, r2
 80016c4:	d155      	bne.n	8001772 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	200e      	movs	r0, #14
 80016d0:	183b      	adds	r3, r7, r0
 80016d2:	49bb      	ldr	r1, [pc, #748]	; (80019c0 <PCD_EP_ISR_Handler+0x338>)
 80016d4:	400a      	ands	r2, r1
 80016d6:	801a      	strh	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	183a      	adds	r2, r7, r0
 80016de:	8812      	ldrh	r2, [r2, #0]
 80016e0:	49b8      	ldr	r1, [pc, #736]	; (80019c4 <PCD_EP_ISR_Handler+0x33c>)
 80016e2:	430a      	orrs	r2, r1
 80016e4:	b292      	uxth	r2, r2
 80016e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3328      	adds	r3, #40	; 0x28
 80016ec:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2250      	movs	r2, #80	; 0x50
 80016f4:	5a9b      	ldrh	r3, [r3, r2]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	001a      	movs	r2, r3
 80016fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	18d2      	adds	r2, r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	18d3      	adds	r3, r2, r3
 8001708:	4aaf      	ldr	r2, [pc, #700]	; (80019c8 <PCD_EP_ISR_Handler+0x340>)
 800170a:	4694      	mov	ip, r2
 800170c:	4463      	add	r3, ip
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	059b      	lsls	r3, r3, #22
 8001712:	0d9a      	lsrs	r2, r3, #22
 8001714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001716:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	18d2      	adds	r2, r2, r3
 8001722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001724:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2100      	movs	r1, #0
 800172a:	0018      	movs	r0, r3
 800172c:	f006 f8f4 	bl	8007918 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2224      	movs	r2, #36	; 0x24
 8001734:	5c9b      	ldrb	r3, [r3, r2]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <PCD_EP_ISR_Handler+0xb8>
 800173c:	f000 fb96 	bl	8001e6c <PCD_EP_ISR_Handler+0x7e4>
 8001740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <PCD_EP_ISR_Handler+0xc4>
 8001748:	f000 fb90 	bl	8001e6c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2224      	movs	r2, #36	; 0x24
 8001750:	5c9b      	ldrb	r3, [r3, r2]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	4252      	negs	r2, r2
 8001758:	4313      	orrs	r3, r2
 800175a:	b2da      	uxtb	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	b291      	uxth	r1, r2
 8001762:	224c      	movs	r2, #76	; 0x4c
 8001764:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2224      	movs	r2, #36	; 0x24
 800176a:	2100      	movs	r1, #0
 800176c:	5499      	strb	r1, [r3, r2]
 800176e:	f000 fb7d 	bl	8001e6c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3369      	adds	r3, #105	; 0x69
 8001776:	33ff      	adds	r3, #255	; 0xff
 8001778:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	214a      	movs	r1, #74	; 0x4a
 8001780:	187b      	adds	r3, r7, r1
 8001782:	8812      	ldrh	r2, [r2, #0]
 8001784:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001786:	187b      	adds	r3, r7, r1
 8001788:	881a      	ldrh	r2, [r3, #0]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	4013      	ands	r3, r2
 8001790:	d037      	beq.n	8001802 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2250      	movs	r2, #80	; 0x50
 8001798:	5a9b      	ldrh	r3, [r3, r2]
 800179a:	b29b      	uxth	r3, r3
 800179c:	001a      	movs	r2, r3
 800179e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	18d2      	adds	r2, r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	18d3      	adds	r3, r2, r3
 80017ac:	4a87      	ldr	r2, [pc, #540]	; (80019cc <PCD_EP_ISR_Handler+0x344>)
 80017ae:	4694      	mov	ip, r2
 80017b0:	4463      	add	r3, ip
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	059b      	lsls	r3, r3, #22
 80017b6:	0d9a      	lsrs	r2, r3, #22
 80017b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	22ac      	movs	r2, #172	; 0xac
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	1899      	adds	r1, r3, r2
 80017c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	f004 f8c4 	bl	800595e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	2010      	movs	r0, #16
 80017e0:	183b      	adds	r3, r7, r0
 80017e2:	497b      	ldr	r1, [pc, #492]	; (80019d0 <PCD_EP_ISR_Handler+0x348>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	801a      	strh	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	183a      	adds	r2, r7, r0
 80017ee:	8812      	ldrh	r2, [r2, #0]
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	430a      	orrs	r2, r1
 80017f4:	b292      	uxth	r2, r2
 80017f6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f006 f856 	bl	80078ac <HAL_PCD_SetupStageCallback>
 8001800:	e334      	b.n	8001e6c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001802:	234a      	movs	r3, #74	; 0x4a
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	2200      	movs	r2, #0
 8001808:	5e9b      	ldrsh	r3, [r3, r2]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db00      	blt.n	8001810 <PCD_EP_ISR_Handler+0x188>
 800180e:	e32d      	b.n	8001e6c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	b29a      	uxth	r2, r3
 8001818:	201e      	movs	r0, #30
 800181a:	183b      	adds	r3, r7, r0
 800181c:	496c      	ldr	r1, [pc, #432]	; (80019d0 <PCD_EP_ISR_Handler+0x348>)
 800181e:	400a      	ands	r2, r1
 8001820:	801a      	strh	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	183a      	adds	r2, r7, r0
 8001828:	8812      	ldrh	r2, [r2, #0]
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	430a      	orrs	r2, r1
 800182e:	b292      	uxth	r2, r2
 8001830:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2250      	movs	r2, #80	; 0x50
 8001838:	5a9b      	ldrh	r3, [r3, r2]
 800183a:	b29b      	uxth	r3, r3
 800183c:	001a      	movs	r2, r3
 800183e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	18d2      	adds	r2, r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	18d3      	adds	r3, r2, r3
 800184c:	4a5f      	ldr	r2, [pc, #380]	; (80019cc <PCD_EP_ISR_Handler+0x344>)
 800184e:	4694      	mov	ip, r2
 8001850:	4463      	add	r3, ip
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	059b      	lsls	r3, r3, #22
 8001856:	0d9a      	lsrs	r2, r3, #22
 8001858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800185c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01a      	beq.n	800189a <PCD_EP_ISR_Handler+0x212>
 8001864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d016      	beq.n	800189a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001872:	6959      	ldr	r1, [r3, #20]
 8001874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001876:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800187c:	b29b      	uxth	r3, r3
 800187e:	f004 f86e 	bl	800595e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	18d2      	adds	r2, r2, r3
 800188c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2100      	movs	r1, #0
 8001894:	0018      	movs	r0, r3
 8001896:	f006 f81e 	bl	80078d6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	214a      	movs	r1, #74	; 0x4a
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	8812      	ldrh	r2, [r2, #0]
 80018a4:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	881a      	ldrh	r2, [r3, #0]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	4013      	ands	r3, r2
 80018b0:	d000      	beq.n	80018b4 <PCD_EP_ISR_Handler+0x22c>
 80018b2:	e2db      	b.n	8001e6c <PCD_EP_ISR_Handler+0x7e4>
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	881a      	ldrh	r2, [r3, #0]
 80018b8:	23c0      	movs	r3, #192	; 0xc0
 80018ba:	019b      	lsls	r3, r3, #6
 80018bc:	401a      	ands	r2, r3
 80018be:	23c0      	movs	r3, #192	; 0xc0
 80018c0:	019b      	lsls	r3, r3, #6
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d100      	bne.n	80018c8 <PCD_EP_ISR_Handler+0x240>
 80018c6:	e2d1      	b.n	8001e6c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2250      	movs	r2, #80	; 0x50
 80018d4:	5a9b      	ldrh	r3, [r3, r2]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	001a      	movs	r2, r3
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	189b      	adds	r3, r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	4a3a      	ldr	r2, [pc, #232]	; (80019cc <PCD_EP_ISR_Handler+0x344>)
 80018e4:	4694      	mov	ip, r2
 80018e6:	4463      	add	r3, ip
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	059b      	lsls	r3, r3, #22
 80018f2:	0d9b      	lsrs	r3, r3, #22
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	801a      	strh	r2, [r3, #0]
 80018fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	2b3e      	cmp	r3, #62	; 0x3e
 8001900:	d91a      	bls.n	8001938 <PCD_EP_ISR_Handler+0x2b0>
 8001902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	647b      	str	r3, [r7, #68]	; 0x44
 800190a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	221f      	movs	r2, #31
 8001910:	4013      	ands	r3, r2
 8001912:	d102      	bne.n	800191a <PCD_EP_ISR_Handler+0x292>
 8001914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001916:	3b01      	subs	r3, #1
 8001918:	647b      	str	r3, [r7, #68]	; 0x44
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	b29a      	uxth	r2, r3
 8001920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001922:	b29b      	uxth	r3, r3
 8001924:	029b      	lsls	r3, r3, #10
 8001926:	b29b      	uxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b29b      	uxth	r3, r3
 800192c:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <PCD_EP_ISR_Handler+0x33c>)
 800192e:	4313      	orrs	r3, r2
 8001930:	b29a      	uxth	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	e023      	b.n	8001980 <PCD_EP_ISR_Handler+0x2f8>
 8001938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d108      	bne.n	8001952 <PCD_EP_ISR_Handler+0x2ca>
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <PCD_EP_ISR_Handler+0x33c>)
 8001948:	4313      	orrs	r3, r2
 800194a:	b29a      	uxth	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	801a      	strh	r2, [r3, #0]
 8001950:	e016      	b.n	8001980 <PCD_EP_ISR_Handler+0x2f8>
 8001952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	647b      	str	r3, [r7, #68]	; 0x44
 800195a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2201      	movs	r2, #1
 8001960:	4013      	ands	r3, r2
 8001962:	d002      	beq.n	800196a <PCD_EP_ISR_Handler+0x2e2>
 8001964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001966:	3301      	adds	r3, #1
 8001968:	647b      	str	r3, [r7, #68]	; 0x44
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	b29a      	uxth	r2, r3
 8001970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001972:	b29b      	uxth	r3, r3
 8001974:	029b      	lsls	r3, r3, #10
 8001976:	b29b      	uxth	r3, r3
 8001978:	4313      	orrs	r3, r2
 800197a:	b29a      	uxth	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	b29a      	uxth	r2, r3
 8001988:	2012      	movs	r0, #18
 800198a:	183b      	adds	r3, r7, r0
 800198c:	4911      	ldr	r1, [pc, #68]	; (80019d4 <PCD_EP_ISR_Handler+0x34c>)
 800198e:	400a      	ands	r2, r1
 8001990:	801a      	strh	r2, [r3, #0]
 8001992:	183b      	adds	r3, r7, r0
 8001994:	183a      	adds	r2, r7, r0
 8001996:	8812      	ldrh	r2, [r2, #0]
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	0149      	lsls	r1, r1, #5
 800199c:	404a      	eors	r2, r1
 800199e:	801a      	strh	r2, [r3, #0]
 80019a0:	183b      	adds	r3, r7, r0
 80019a2:	183a      	adds	r2, r7, r0
 80019a4:	8812      	ldrh	r2, [r2, #0]
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	0189      	lsls	r1, r1, #6
 80019aa:	404a      	eors	r2, r1
 80019ac:	801a      	strh	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	183a      	adds	r2, r7, r0
 80019b4:	8812      	ldrh	r2, [r2, #0]
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <PCD_EP_ISR_Handler+0x350>)
 80019b8:	430a      	orrs	r2, r1
 80019ba:	b292      	uxth	r2, r2
 80019bc:	801a      	strh	r2, [r3, #0]
 80019be:	e255      	b.n	8001e6c <PCD_EP_ISR_Handler+0x7e4>
 80019c0:	ffff8f0f 	.word	0xffff8f0f
 80019c4:	ffff8000 	.word	0xffff8000
 80019c8:	00000402 	.word	0x00000402
 80019cc:	00000406 	.word	0x00000406
 80019d0:	00000f8f 	.word	0x00000f8f
 80019d4:	ffffbf8f 	.word	0xffffbf8f
 80019d8:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	001a      	movs	r2, r3
 80019e2:	204d      	movs	r0, #77	; 0x4d
 80019e4:	183b      	adds	r3, r7, r0
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	18d2      	adds	r2, r2, r3
 80019ec:	214a      	movs	r1, #74	; 0x4a
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	8812      	ldrh	r2, [r2, #0]
 80019f2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	2200      	movs	r2, #0
 80019f8:	5e9b      	ldrsh	r3, [r3, r2]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db00      	blt.n	8001a00 <PCD_EP_ISR_Handler+0x378>
 80019fe:	e0fa      	b.n	8001bf6 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	001a      	movs	r2, r3
 8001a06:	183b      	adds	r3, r7, r0
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	18d3      	adds	r3, r2, r3
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	2448      	movs	r4, #72	; 0x48
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	49d1      	ldr	r1, [pc, #836]	; (8001d5c <PCD_EP_ISR_Handler+0x6d4>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	801a      	strh	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	001a      	movs	r2, r3
 8001a22:	183b      	adds	r3, r7, r0
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	18d3      	adds	r3, r2, r3
 8001a2a:	193a      	adds	r2, r7, r4
 8001a2c:	8812      	ldrh	r2, [r2, #0]
 8001a2e:	2180      	movs	r1, #128	; 0x80
 8001a30:	430a      	orrs	r2, r1
 8001a32:	b292      	uxth	r2, r2
 8001a34:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a36:	183b      	adds	r3, r7, r0
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	189b      	adds	r3, r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	3369      	adds	r3, #105	; 0x69
 8001a44:	33ff      	adds	r3, #255	; 0xff
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	18d3      	adds	r3, r2, r3
 8001a4a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4e:	7b1b      	ldrb	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d125      	bne.n	8001aa0 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2250      	movs	r2, #80	; 0x50
 8001a5a:	5a9b      	ldrh	r3, [r3, r2]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	001a      	movs	r2, r3
 8001a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	18d2      	adds	r2, r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	18d3      	adds	r3, r2, r3
 8001a6e:	4abc      	ldr	r2, [pc, #752]	; (8001d60 <PCD_EP_ISR_Handler+0x6d8>)
 8001a70:	4694      	mov	ip, r2
 8001a72:	4463      	add	r3, ip
 8001a74:	881a      	ldrh	r2, [r3, #0]
 8001a76:	2450      	movs	r4, #80	; 0x50
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	0592      	lsls	r2, r2, #22
 8001a7c:	0d92      	lsrs	r2, r2, #22
 8001a7e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001a80:	193b      	adds	r3, r7, r4
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d100      	bne.n	8001a8a <PCD_EP_ISR_Handler+0x402>
 8001a88:	e08d      	b.n	8001ba6 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a90:	6959      	ldr	r1, [r3, #20]
 8001a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a94:	88da      	ldrh	r2, [r3, #6]
 8001a96:	193b      	adds	r3, r7, r4
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	f003 ff60 	bl	800595e <USB_ReadPMA>
 8001a9e:	e082      	b.n	8001ba6 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa2:	78db      	ldrb	r3, [r3, #3]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d10c      	bne.n	8001ac2 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001aa8:	2350      	movs	r3, #80	; 0x50
 8001aaa:	18fc      	adds	r4, r7, r3
 8001aac:	234a      	movs	r3, #74	; 0x4a
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	881a      	ldrh	r2, [r3, #0]
 8001ab2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f000 f9ec 	bl	8001e94 <HAL_PCD_EP_DB_Receive>
 8001abc:	0003      	movs	r3, r0
 8001abe:	8023      	strh	r3, [r4, #0]
 8001ac0:	e071      	b.n	8001ba6 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	001a      	movs	r2, r3
 8001ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	18d3      	adds	r3, r2, r3
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	2052      	movs	r0, #82	; 0x52
 8001ad6:	183b      	adds	r3, r7, r0
 8001ad8:	49a2      	ldr	r1, [pc, #648]	; (8001d64 <PCD_EP_ISR_Handler+0x6dc>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	801a      	strh	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	18d3      	adds	r3, r2, r3
 8001aec:	183a      	adds	r2, r7, r0
 8001aee:	8812      	ldrh	r2, [r2, #0]
 8001af0:	499d      	ldr	r1, [pc, #628]	; (8001d68 <PCD_EP_ISR_Handler+0x6e0>)
 8001af2:	430a      	orrs	r2, r1
 8001af4:	b292      	uxth	r2, r2
 8001af6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	001a      	movs	r2, r3
 8001afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	18d3      	adds	r3, r2, r3
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	01db      	lsls	r3, r3, #7
 8001b10:	4013      	ands	r3, r2
 8001b12:	d024      	beq.n	8001b5e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2250      	movs	r2, #80	; 0x50
 8001b1a:	5a9b      	ldrh	r3, [r3, r2]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	001a      	movs	r2, r3
 8001b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	18d2      	adds	r2, r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	18d3      	adds	r3, r2, r3
 8001b2e:	4a8f      	ldr	r2, [pc, #572]	; (8001d6c <PCD_EP_ISR_Handler+0x6e4>)
 8001b30:	4694      	mov	ip, r2
 8001b32:	4463      	add	r3, ip
 8001b34:	881a      	ldrh	r2, [r3, #0]
 8001b36:	2450      	movs	r4, #80	; 0x50
 8001b38:	193b      	adds	r3, r7, r4
 8001b3a:	0592      	lsls	r2, r2, #22
 8001b3c:	0d92      	lsrs	r2, r2, #22
 8001b3e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001b40:	193b      	adds	r3, r7, r4
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d02e      	beq.n	8001ba6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4e:	6959      	ldr	r1, [r3, #20]
 8001b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b52:	891a      	ldrh	r2, [r3, #8]
 8001b54:	193b      	adds	r3, r7, r4
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	f003 ff01 	bl	800595e <USB_ReadPMA>
 8001b5c:	e023      	b.n	8001ba6 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2250      	movs	r2, #80	; 0x50
 8001b64:	5a9b      	ldrh	r3, [r3, r2]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	001a      	movs	r2, r3
 8001b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	18d2      	adds	r2, r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	18d3      	adds	r3, r2, r3
 8001b78:	4a79      	ldr	r2, [pc, #484]	; (8001d60 <PCD_EP_ISR_Handler+0x6d8>)
 8001b7a:	4694      	mov	ip, r2
 8001b7c:	4463      	add	r3, ip
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	2450      	movs	r4, #80	; 0x50
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	0592      	lsls	r2, r2, #22
 8001b86:	0d92      	lsrs	r2, r2, #22
 8001b88:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001b8a:	193b      	adds	r3, r7, r4
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b98:	6959      	ldr	r1, [r3, #20]
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9c:	895a      	ldrh	r2, [r3, #10]
 8001b9e:	193b      	adds	r3, r7, r4
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	f003 fedc 	bl	800595e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	2150      	movs	r1, #80	; 0x50
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	18d2      	adds	r2, r2, r3
 8001bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	18d2      	adds	r2, r2, r3
 8001bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <PCD_EP_ISR_Handler+0x550>
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	881a      	ldrh	r2, [r3, #0]
 8001bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0011      	movs	r1, r2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f005 fe78 	bl	80078d6 <HAL_PCD_DataOutStageCallback>
 8001be6:	e006      	b.n	8001bf6 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bee:	0011      	movs	r1, r2
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f002 fbf9 	bl	80043e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bf6:	244a      	movs	r4, #74	; 0x4a
 8001bf8:	193b      	adds	r3, r7, r4
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d100      	bne.n	8001c04 <PCD_EP_ISR_Handler+0x57c>
 8001c02:	e133      	b.n	8001e6c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c04:	204d      	movs	r0, #77	; 0x4d
 8001c06:	183b      	adds	r3, r7, r0
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	189b      	adds	r3, r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	18d3      	adds	r3, r2, r3
 8001c18:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	001a      	movs	r2, r3
 8001c20:	183b      	adds	r3, r7, r0
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	18d3      	adds	r3, r2, r3
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	2542      	movs	r5, #66	; 0x42
 8001c2e:	197b      	adds	r3, r7, r5
 8001c30:	494f      	ldr	r1, [pc, #316]	; (8001d70 <PCD_EP_ISR_Handler+0x6e8>)
 8001c32:	400a      	ands	r2, r1
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	183b      	adds	r3, r7, r0
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	18d3      	adds	r3, r2, r3
 8001c44:	197a      	adds	r2, r7, r5
 8001c46:	8812      	ldrh	r2, [r2, #0]
 8001c48:	494a      	ldr	r1, [pc, #296]	; (8001d74 <PCD_EP_ISR_Handler+0x6ec>)
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	b292      	uxth	r2, r2
 8001c4e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c52:	78db      	ldrb	r3, [r3, #3]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d000      	beq.n	8001c5a <PCD_EP_ISR_Handler+0x5d2>
 8001c58:	e0af      	b.n	8001dba <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c62:	7b1b      	ldrb	r3, [r3, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d100      	bne.n	8001c6a <PCD_EP_ISR_Handler+0x5e2>
 8001c68:	e09f      	b.n	8001daa <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	2240      	movs	r2, #64	; 0x40
 8001c70:	4013      	ands	r3, r2
 8001c72:	d046      	beq.n	8001d02 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c76:	785b      	ldrb	r3, [r3, #1]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d125      	bne.n	8001cc8 <PCD_EP_ISR_Handler+0x640>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2250      	movs	r2, #80	; 0x50
 8001c88:	5a9b      	ldrh	r3, [r3, r2]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	189b      	adds	r3, r3, r2
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
 8001c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	00da      	lsls	r2, r3, #3
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	18d3      	adds	r3, r2, r3
 8001c9e:	4a33      	ldr	r2, [pc, #204]	; (8001d6c <PCD_EP_ISR_Handler+0x6e4>)
 8001ca0:	4694      	mov	ip, r2
 8001ca2:	4463      	add	r3, ip
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	059b      	lsls	r3, r3, #22
 8001cae:	0d9b      	lsrs	r3, r3, #22
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4a2d      	ldr	r2, [pc, #180]	; (8001d74 <PCD_EP_ISR_Handler+0x6ec>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	801a      	strh	r2, [r3, #0]
 8001cc6:	e070      	b.n	8001daa <PCD_EP_ISR_Handler+0x722>
 8001cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d16c      	bne.n	8001daa <PCD_EP_ISR_Handler+0x722>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2250      	movs	r2, #80	; 0x50
 8001cdc:	5a9b      	ldrh	r3, [r3, r2]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce4:	189b      	adds	r3, r3, r2
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	00da      	lsls	r2, r3, #3
 8001cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf0:	18d3      	adds	r3, r2, r3
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <PCD_EP_ISR_Handler+0x6e4>)
 8001cf4:	4694      	mov	ip, r2
 8001cf6:	4463      	add	r3, ip
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	801a      	strh	r2, [r3, #0]
 8001d00:	e053      	b.n	8001daa <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0a:	785b      	ldrb	r3, [r3, #1]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d133      	bne.n	8001d78 <PCD_EP_ISR_Handler+0x6f0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2250      	movs	r2, #80	; 0x50
 8001d1c:	5a9b      	ldrh	r3, [r3, r2]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	001a      	movs	r2, r3
 8001d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d24:	189b      	adds	r3, r3, r2
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	00da      	lsls	r2, r3, #3
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d30:	18d3      	adds	r3, r2, r3
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <PCD_EP_ISR_Handler+0x6d8>)
 8001d34:	4694      	mov	ip, r2
 8001d36:	4463      	add	r3, ip
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
 8001d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	059b      	lsls	r3, r3, #22
 8001d42:	0d9b      	lsrs	r3, r3, #22
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d48:	801a      	strh	r2, [r3, #0]
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <PCD_EP_ISR_Handler+0x6ec>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d58:	801a      	strh	r2, [r3, #0]
 8001d5a:	e026      	b.n	8001daa <PCD_EP_ISR_Handler+0x722>
 8001d5c:	00000f8f 	.word	0x00000f8f
 8001d60:	00000406 	.word	0x00000406
 8001d64:	ffff8f8f 	.word	0xffff8f8f
 8001d68:	ffff80c0 	.word	0xffff80c0
 8001d6c:	00000402 	.word	0x00000402
 8001d70:	ffff8f0f 	.word	0xffff8f0f
 8001d74:	ffff8000 	.word	0xffff8000
 8001d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d114      	bne.n	8001daa <PCD_EP_ISR_Handler+0x722>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2250      	movs	r2, #80	; 0x50
 8001d86:	5a9b      	ldrh	r3, [r3, r2]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8e:	189b      	adds	r3, r3, r2
 8001d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	00da      	lsls	r2, r3, #3
 8001d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9a:	18d3      	adds	r3, r2, r3
 8001d9c:	4a3b      	ldr	r2, [pc, #236]	; (8001e8c <PCD_EP_ISR_Handler+0x804>)
 8001d9e:	4694      	mov	ip, r2
 8001da0:	4463      	add	r3, ip
 8001da2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da6:	2200      	movs	r2, #0
 8001da8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dac:	781a      	ldrb	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	0011      	movs	r1, r2
 8001db2:	0018      	movs	r0, r3
 8001db4:	f005 fdb0 	bl	8007918 <HAL_PCD_DataInStageCallback>
 8001db8:	e058      	b.n	8001e6c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001dba:	234a      	movs	r3, #74	; 0x4a
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	881a      	ldrh	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d149      	bne.n	8001e5c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2250      	movs	r2, #80	; 0x50
 8001dce:	5a9b      	ldrh	r3, [r3, r2]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	18d2      	adds	r2, r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	18d3      	adds	r3, r2, r3
 8001de2:	4a2b      	ldr	r2, [pc, #172]	; (8001e90 <PCD_EP_ISR_Handler+0x808>)
 8001de4:	4694      	mov	ip, r2
 8001de6:	4463      	add	r3, ip
 8001de8:	881a      	ldrh	r2, [r3, #0]
 8001dea:	2140      	movs	r1, #64	; 0x40
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	0592      	lsls	r2, r2, #22
 8001df0:	0d92      	lsrs	r2, r2, #22
 8001df2:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df6:	699a      	ldr	r2, [r3, #24]
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d907      	bls.n	8001e10 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e02:	699a      	ldr	r2, [r3, #24]
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	1ad2      	subs	r2, r2, r3
 8001e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0c:	619a      	str	r2, [r3, #24]
 8001e0e:	e002      	b.n	8001e16 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d107      	bne.n	8001e2e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	0011      	movs	r1, r2
 8001e26:	0018      	movs	r0, r3
 8001e28:	f005 fd76 	bl	8007918 <HAL_PCD_DataInStageCallback>
 8001e2c:	e01e      	b.n	8001e6c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	2140      	movs	r1, #64	; 0x40
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	18d2      	adds	r2, r2, r3
 8001e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	187b      	adds	r3, r7, r1
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	18d2      	adds	r2, r2, r3
 8001e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e52:	0011      	movs	r1, r2
 8001e54:	0018      	movs	r0, r3
 8001e56:	f002 fac7 	bl	80043e8 <USB_EPStartXfer>
 8001e5a:	e007      	b.n	8001e6c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e5c:	234a      	movs	r3, #74	; 0x4a
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	881a      	ldrh	r2, [r3, #0]
 8001e62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	0018      	movs	r0, r3
 8001e68:	f000 f930 	bl	80020cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2244      	movs	r2, #68	; 0x44
 8001e72:	5a9b      	ldrh	r3, [r3, r2]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da01      	bge.n	8001e80 <PCD_EP_ISR_Handler+0x7f8>
 8001e7c:	f7ff fc0a 	bl	8001694 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b016      	add	sp, #88	; 0x58
 8001e88:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	00000406 	.word	0x00000406
 8001e90:	00000402 	.word	0x00000402

08001e94 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	1dbb      	adds	r3, r7, #6
 8001ea0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ea2:	1dbb      	adds	r3, r7, #6
 8001ea4:	881a      	ldrh	r2, [r3, #0]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	01db      	lsls	r3, r3, #7
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d100      	bne.n	8001eb0 <HAL_PCD_EP_DB_Receive+0x1c>
 8001eae:	e07d      	b.n	8001fac <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2250      	movs	r2, #80	; 0x50
 8001eb6:	5a9b      	ldrh	r3, [r3, r2]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	001a      	movs	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	18d2      	adds	r2, r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	18d3      	adds	r3, r2, r3
 8001eca:	4a7a      	ldr	r2, [pc, #488]	; (80020b4 <HAL_PCD_EP_DB_Receive+0x220>)
 8001ecc:	4694      	mov	ip, r2
 8001ece:	4463      	add	r3, ip
 8001ed0:	881a      	ldrh	r2, [r3, #0]
 8001ed2:	211a      	movs	r1, #26
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	0592      	lsls	r2, r2, #22
 8001ed8:	0d92      	lsrs	r2, r2, #22
 8001eda:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d307      	bcc.n	8001ef8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	1ad2      	subs	r2, r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	619a      	str	r2, [r3, #24]
 8001ef6:	e002      	b.n	8001efe <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2200      	movs	r2, #0
 8001efc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d121      	bne.n	8001f4a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	18d3      	adds	r3, r2, r3
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	2018      	movs	r0, #24
 8001f1a:	183b      	adds	r3, r7, r0
 8001f1c:	4966      	ldr	r1, [pc, #408]	; (80020b8 <HAL_PCD_EP_DB_Receive+0x224>)
 8001f1e:	400a      	ands	r2, r1
 8001f20:	801a      	strh	r2, [r3, #0]
 8001f22:	183b      	adds	r3, r7, r0
 8001f24:	183a      	adds	r2, r7, r0
 8001f26:	8812      	ldrh	r2, [r2, #0]
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	0189      	lsls	r1, r1, #6
 8001f2c:	404a      	eors	r2, r1
 8001f2e:	801a      	strh	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	001a      	movs	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	18d3      	adds	r3, r2, r3
 8001f3e:	183a      	adds	r2, r7, r0
 8001f40:	8812      	ldrh	r2, [r2, #0]
 8001f42:	495e      	ldr	r1, [pc, #376]	; (80020bc <HAL_PCD_EP_DB_Receive+0x228>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	b292      	uxth	r2, r2
 8001f48:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f4a:	1dbb      	adds	r3, r7, #6
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	4013      	ands	r3, r2
 8001f52:	d01a      	beq.n	8001f8a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	001a      	movs	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	18d3      	adds	r3, r2, r3
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	2016      	movs	r0, #22
 8001f68:	183b      	adds	r3, r7, r0
 8001f6a:	4955      	ldr	r1, [pc, #340]	; (80020c0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	801a      	strh	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	001a      	movs	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	18d3      	adds	r3, r2, r3
 8001f7e:	183a      	adds	r2, r7, r0
 8001f80:	8812      	ldrh	r2, [r2, #0]
 8001f82:	4950      	ldr	r1, [pc, #320]	; (80020c4 <HAL_PCD_EP_DB_Receive+0x230>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	b292      	uxth	r2, r2
 8001f88:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001f8a:	241a      	movs	r4, #26
 8001f8c:	193b      	adds	r3, r7, r4
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d100      	bne.n	8001f96 <HAL_PCD_EP_DB_Receive+0x102>
 8001f94:	e086      	b.n	80020a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	6959      	ldr	r1, [r3, #20]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	891a      	ldrh	r2, [r3, #8]
 8001fa2:	193b      	adds	r3, r7, r4
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	f003 fcda 	bl	800595e <USB_ReadPMA>
 8001faa:	e07b      	b.n	80020a4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2250      	movs	r2, #80	; 0x50
 8001fb2:	5a9b      	ldrh	r3, [r3, r2]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	001a      	movs	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	18d2      	adds	r2, r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	18d3      	adds	r3, r2, r3
 8001fc6:	4a40      	ldr	r2, [pc, #256]	; (80020c8 <HAL_PCD_EP_DB_Receive+0x234>)
 8001fc8:	4694      	mov	ip, r2
 8001fca:	4463      	add	r3, ip
 8001fcc:	881a      	ldrh	r2, [r3, #0]
 8001fce:	211a      	movs	r1, #26
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	0592      	lsls	r2, r2, #22
 8001fd4:	0d92      	lsrs	r2, r2, #22
 8001fd6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d307      	bcc.n	8001ff4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	699a      	ldr	r2, [r3, #24]
 8001fe8:	187b      	adds	r3, r7, r1
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	1ad2      	subs	r2, r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	619a      	str	r2, [r3, #24]
 8001ff2:	e002      	b.n	8001ffa <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d121      	bne.n	8002046 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	001a      	movs	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	18d3      	adds	r3, r2, r3
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29a      	uxth	r2, r3
 8002014:	201e      	movs	r0, #30
 8002016:	183b      	adds	r3, r7, r0
 8002018:	4927      	ldr	r1, [pc, #156]	; (80020b8 <HAL_PCD_EP_DB_Receive+0x224>)
 800201a:	400a      	ands	r2, r1
 800201c:	801a      	strh	r2, [r3, #0]
 800201e:	183b      	adds	r3, r7, r0
 8002020:	183a      	adds	r2, r7, r0
 8002022:	8812      	ldrh	r2, [r2, #0]
 8002024:	2180      	movs	r1, #128	; 0x80
 8002026:	0189      	lsls	r1, r1, #6
 8002028:	404a      	eors	r2, r1
 800202a:	801a      	strh	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	001a      	movs	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	18d3      	adds	r3, r2, r3
 800203a:	183a      	adds	r2, r7, r0
 800203c:	8812      	ldrh	r2, [r2, #0]
 800203e:	491f      	ldr	r1, [pc, #124]	; (80020bc <HAL_PCD_EP_DB_Receive+0x228>)
 8002040:	430a      	orrs	r2, r1
 8002042:	b292      	uxth	r2, r2
 8002044:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002046:	1dbb      	adds	r3, r7, #6
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	2240      	movs	r2, #64	; 0x40
 800204c:	4013      	ands	r3, r2
 800204e:	d11a      	bne.n	8002086 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	001a      	movs	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	18d3      	adds	r3, r2, r3
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b29a      	uxth	r2, r3
 8002062:	201c      	movs	r0, #28
 8002064:	183b      	adds	r3, r7, r0
 8002066:	4916      	ldr	r1, [pc, #88]	; (80020c0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002068:	400a      	ands	r2, r1
 800206a:	801a      	strh	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	001a      	movs	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	18d3      	adds	r3, r2, r3
 800207a:	183a      	adds	r2, r7, r0
 800207c:	8812      	ldrh	r2, [r2, #0]
 800207e:	4911      	ldr	r1, [pc, #68]	; (80020c4 <HAL_PCD_EP_DB_Receive+0x230>)
 8002080:	430a      	orrs	r2, r1
 8002082:	b292      	uxth	r2, r2
 8002084:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002086:	241a      	movs	r4, #26
 8002088:	193b      	adds	r3, r7, r4
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d009      	beq.n	80020a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	6959      	ldr	r1, [r3, #20]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	895a      	ldrh	r2, [r3, #10]
 800209c:	193b      	adds	r3, r7, r4
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	f003 fc5d 	bl	800595e <USB_ReadPMA>
    }
  }

  return count;
 80020a4:	231a      	movs	r3, #26
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	881b      	ldrh	r3, [r3, #0]
}
 80020aa:	0018      	movs	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b009      	add	sp, #36	; 0x24
 80020b0:	bd90      	pop	{r4, r7, pc}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	00000402 	.word	0x00000402
 80020b8:	ffffbf8f 	.word	0xffffbf8f
 80020bc:	ffff8080 	.word	0xffff8080
 80020c0:	ffff8f8f 	.word	0xffff8f8f
 80020c4:	ffff80c0 	.word	0xffff80c0
 80020c8:	00000406 	.word	0x00000406

080020cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b0a4      	sub	sp, #144	; 0x90
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	1dbb      	adds	r3, r7, #6
 80020d8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020da:	1dbb      	adds	r3, r7, #6
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	2240      	movs	r2, #64	; 0x40
 80020e0:	4013      	ands	r3, r2
 80020e2:	d100      	bne.n	80020e6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80020e4:	e1e4      	b.n	80024b0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2250      	movs	r2, #80	; 0x50
 80020ec:	5a9b      	ldrh	r3, [r3, r2]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	001a      	movs	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	18d2      	adds	r2, r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	18d3      	adds	r3, r2, r3
 8002100:	4ad0      	ldr	r2, [pc, #832]	; (8002444 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002102:	4694      	mov	ip, r2
 8002104:	4463      	add	r3, ip
 8002106:	881a      	ldrh	r2, [r3, #0]
 8002108:	2186      	movs	r1, #134	; 0x86
 800210a:	187b      	adds	r3, r7, r1
 800210c:	0592      	lsls	r2, r2, #22
 800210e:	0d92      	lsrs	r2, r2, #22
 8002110:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	187b      	adds	r3, r7, r1
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d907      	bls.n	800212e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	699a      	ldr	r2, [r3, #24]
 8002122:	187b      	adds	r3, r7, r1
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	619a      	str	r2, [r3, #24]
 800212c:	e002      	b.n	8002134 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d000      	beq.n	800213e <HAL_PCD_EP_DB_Transmit+0x72>
 800213c:	e0b5      	b.n	80022aa <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	785b      	ldrb	r3, [r3, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d125      	bne.n	8002192 <HAL_PCD_EP_DB_Transmit+0xc6>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2250      	movs	r2, #80	; 0x50
 8002152:	5a9b      	ldrh	r3, [r3, r2]
 8002154:	b29b      	uxth	r3, r3
 8002156:	001a      	movs	r2, r3
 8002158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215a:	189b      	adds	r3, r3, r2
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	00da      	lsls	r2, r3, #3
 8002164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002166:	18d3      	adds	r3, r2, r3
 8002168:	4ab6      	ldr	r2, [pc, #728]	; (8002444 <HAL_PCD_EP_DB_Transmit+0x378>)
 800216a:	4694      	mov	ip, r2
 800216c:	4463      	add	r3, ip
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	059b      	lsls	r3, r3, #22
 8002178:	0d9b      	lsrs	r3, r3, #22
 800217a:	b29a      	uxth	r2, r3
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	801a      	strh	r2, [r3, #0]
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4ab0      	ldr	r2, [pc, #704]	; (8002448 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002188:	4313      	orrs	r3, r2
 800218a:	b29a      	uxth	r2, r3
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	e01b      	b.n	80021ca <HAL_PCD_EP_DB_Transmit+0xfe>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d117      	bne.n	80021ca <HAL_PCD_EP_DB_Transmit+0xfe>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2250      	movs	r2, #80	; 0x50
 80021a6:	5a9b      	ldrh	r3, [r3, r2]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	001a      	movs	r2, r3
 80021ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ae:	189b      	adds	r3, r3, r2
 80021b0:	637b      	str	r3, [r7, #52]	; 0x34
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	00da      	lsls	r2, r3, #3
 80021b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ba:	18d3      	adds	r3, r2, r3
 80021bc:	4aa1      	ldr	r2, [pc, #644]	; (8002444 <HAL_PCD_EP_DB_Transmit+0x378>)
 80021be:	4694      	mov	ip, r2
 80021c0:	4463      	add	r3, ip
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	2200      	movs	r2, #0
 80021c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d125      	bne.n	8002224 <HAL_PCD_EP_DB_Transmit+0x158>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2250      	movs	r2, #80	; 0x50
 80021e4:	5a9b      	ldrh	r3, [r3, r2]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	001a      	movs	r2, r3
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	189b      	adds	r3, r3, r2
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	00da      	lsls	r2, r3, #3
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	18d3      	adds	r3, r2, r3
 80021fa:	4a94      	ldr	r2, [pc, #592]	; (800244c <HAL_PCD_EP_DB_Transmit+0x380>)
 80021fc:	4694      	mov	ip, r2
 80021fe:	4463      	add	r3, ip
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	059b      	lsls	r3, r3, #22
 800220a:	0d9b      	lsrs	r3, r3, #22
 800220c:	b29a      	uxth	r2, r3
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	801a      	strh	r2, [r3, #0]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	4a8b      	ldr	r2, [pc, #556]	; (8002448 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800221a:	4313      	orrs	r3, r2
 800221c:	b29a      	uxth	r2, r3
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	801a      	strh	r2, [r3, #0]
 8002222:	e018      	b.n	8002256 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	785b      	ldrb	r3, [r3, #1]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d114      	bne.n	8002256 <HAL_PCD_EP_DB_Transmit+0x18a>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2250      	movs	r2, #80	; 0x50
 8002232:	5a9b      	ldrh	r3, [r3, r2]
 8002234:	b29b      	uxth	r3, r3
 8002236:	001a      	movs	r2, r3
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	189b      	adds	r3, r3, r2
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	00da      	lsls	r2, r3, #3
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	18d3      	adds	r3, r2, r3
 8002248:	4a80      	ldr	r2, [pc, #512]	; (800244c <HAL_PCD_EP_DB_Transmit+0x380>)
 800224a:	4694      	mov	ip, r2
 800224c:	4463      	add	r3, ip
 800224e:	623b      	str	r3, [r7, #32]
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	2200      	movs	r2, #0
 8002254:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	0011      	movs	r1, r2
 800225e:	0018      	movs	r0, r3
 8002260:	f005 fb5a 	bl	8007918 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002264:	1dbb      	adds	r3, r7, #6
 8002266:	881a      	ldrh	r2, [r3, #0]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	01db      	lsls	r3, r3, #7
 800226c:	4013      	ands	r3, r2
 800226e:	d100      	bne.n	8002272 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8002270:	e309      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	001a      	movs	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	18d3      	adds	r3, r2, r3
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29a      	uxth	r2, r3
 8002284:	2016      	movs	r0, #22
 8002286:	183b      	adds	r3, r7, r0
 8002288:	4971      	ldr	r1, [pc, #452]	; (8002450 <HAL_PCD_EP_DB_Transmit+0x384>)
 800228a:	400a      	ands	r2, r1
 800228c:	801a      	strh	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	001a      	movs	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	18d3      	adds	r3, r2, r3
 800229c:	183a      	adds	r2, r7, r0
 800229e:	8812      	ldrh	r2, [r2, #0]
 80022a0:	496c      	ldr	r1, [pc, #432]	; (8002454 <HAL_PCD_EP_DB_Transmit+0x388>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	b292      	uxth	r2, r2
 80022a6:	801a      	strh	r2, [r3, #0]
 80022a8:	e2ed      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022aa:	1dbb      	adds	r3, r7, #6
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	01db      	lsls	r3, r3, #7
 80022b2:	4013      	ands	r3, r2
 80022b4:	d01a      	beq.n	80022ec <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	001a      	movs	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	18d3      	adds	r3, r2, r3
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	208a      	movs	r0, #138	; 0x8a
 80022ca:	183b      	adds	r3, r7, r0
 80022cc:	4960      	ldr	r1, [pc, #384]	; (8002450 <HAL_PCD_EP_DB_Transmit+0x384>)
 80022ce:	400a      	ands	r2, r1
 80022d0:	801a      	strh	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	001a      	movs	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	18d3      	adds	r3, r2, r3
 80022e0:	183a      	adds	r2, r7, r0
 80022e2:	8812      	ldrh	r2, [r2, #0]
 80022e4:	495b      	ldr	r1, [pc, #364]	; (8002454 <HAL_PCD_EP_DB_Transmit+0x388>)
 80022e6:	430a      	orrs	r2, r1
 80022e8:	b292      	uxth	r2, r2
 80022ea:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2224      	movs	r2, #36	; 0x24
 80022f0:	5c9b      	ldrb	r3, [r3, r2]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d000      	beq.n	80022f8 <HAL_PCD_EP_DB_Transmit+0x22c>
 80022f6:	e2c6      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	2186      	movs	r1, #134	; 0x86
 80022fe:	187b      	adds	r3, r7, r1
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	18d2      	adds	r2, r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	69da      	ldr	r2, [r3, #28]
 800230c:	187b      	adds	r3, r7, r1
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	18d2      	adds	r2, r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	429a      	cmp	r2, r3
 8002320:	d30c      	bcc.n	800233c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	218c      	movs	r1, #140	; 0x8c
 8002328:	187a      	adds	r2, r7, r1
 800232a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	6a1a      	ldr	r2, [r3, #32]
 8002330:	187b      	adds	r3, r7, r1
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	1ad2      	subs	r2, r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	621a      	str	r2, [r3, #32]
 800233a:	e01a      	b.n	8002372 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002344:	2386      	movs	r3, #134	; 0x86
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	228c      	movs	r2, #140	; 0x8c
 800234c:	18ba      	adds	r2, r7, r2
 800234e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2224      	movs	r2, #36	; 0x24
 8002354:	2100      	movs	r1, #0
 8002356:	5499      	strb	r1, [r3, r2]
 8002358:	e00b      	b.n	8002372 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2224      	movs	r2, #36	; 0x24
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	228c      	movs	r2, #140	; 0x8c
 8002368:	18ba      	adds	r2, r7, r2
 800236a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2200      	movs	r2, #0
 8002370:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	785b      	ldrb	r3, [r3, #1]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d000      	beq.n	800237c <HAL_PCD_EP_DB_Transmit+0x2b0>
 800237a:	e06d      	b.n	8002458 <HAL_PCD_EP_DB_Transmit+0x38c>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2250      	movs	r2, #80	; 0x50
 8002388:	5a9b      	ldrh	r3, [r3, r2]
 800238a:	b29b      	uxth	r3, r3
 800238c:	001a      	movs	r2, r3
 800238e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002390:	189b      	adds	r3, r3, r2
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	00da      	lsls	r2, r3, #3
 800239a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239c:	18d3      	adds	r3, r2, r3
 800239e:	4a29      	ldr	r2, [pc, #164]	; (8002444 <HAL_PCD_EP_DB_Transmit+0x378>)
 80023a0:	4694      	mov	ip, r2
 80023a2:	4463      	add	r3, ip
 80023a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	059b      	lsls	r3, r3, #22
 80023ae:	0d9b      	lsrs	r3, r3, #22
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b4:	801a      	strh	r2, [r3, #0]
 80023b6:	228c      	movs	r2, #140	; 0x8c
 80023b8:	18bb      	adds	r3, r7, r2
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b3e      	cmp	r3, #62	; 0x3e
 80023be:	d91a      	bls.n	80023f6 <HAL_PCD_EP_DB_Transmit+0x32a>
 80023c0:	18bb      	adds	r3, r7, r2
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80023c8:	18bb      	adds	r3, r7, r2
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	221f      	movs	r2, #31
 80023ce:	4013      	ands	r3, r2
 80023d0:	d102      	bne.n	80023d8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80023d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d4:	3b01      	subs	r3, #1
 80023d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	b29a      	uxth	r2, r3
 80023de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4a17      	ldr	r2, [pc, #92]	; (8002448 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f2:	801a      	strh	r2, [r3, #0]
 80023f4:	e04f      	b.n	8002496 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80023f6:	238c      	movs	r3, #140	; 0x8c
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d108      	bne.n	8002412 <HAL_PCD_EP_DB_Transmit+0x346>
 8002400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	4a10      	ldr	r2, [pc, #64]	; (8002448 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002408:	4313      	orrs	r3, r2
 800240a:	b29a      	uxth	r2, r3
 800240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240e:	801a      	strh	r2, [r3, #0]
 8002410:	e041      	b.n	8002496 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002412:	228c      	movs	r2, #140	; 0x8c
 8002414:	18bb      	adds	r3, r7, r2
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	64bb      	str	r3, [r7, #72]	; 0x48
 800241c:	18bb      	adds	r3, r7, r2
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	d002      	beq.n	800242c <HAL_PCD_EP_DB_Transmit+0x360>
 8002426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002428:	3301      	adds	r3, #1
 800242a:	64bb      	str	r3, [r7, #72]	; 0x48
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29a      	uxth	r2, r3
 8002432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002434:	b29b      	uxth	r3, r3
 8002436:	029b      	lsls	r3, r3, #10
 8002438:	b29b      	uxth	r3, r3
 800243a:	4313      	orrs	r3, r2
 800243c:	b29a      	uxth	r2, r3
 800243e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002440:	801a      	strh	r2, [r3, #0]
 8002442:	e028      	b.n	8002496 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002444:	00000402 	.word	0x00000402
 8002448:	ffff8000 	.word	0xffff8000
 800244c:	00000406 	.word	0x00000406
 8002450:	ffff8f8f 	.word	0xffff8f8f
 8002454:	ffffc080 	.word	0xffffc080
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	785b      	ldrb	r3, [r3, #1]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d11a      	bne.n	8002496 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	647b      	str	r3, [r7, #68]	; 0x44
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2250      	movs	r2, #80	; 0x50
 800246c:	5a9b      	ldrh	r3, [r3, r2]
 800246e:	b29b      	uxth	r3, r3
 8002470:	001a      	movs	r2, r3
 8002472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002474:	189b      	adds	r3, r3, r2
 8002476:	647b      	str	r3, [r7, #68]	; 0x44
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	00da      	lsls	r2, r3, #3
 800247e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002480:	18d3      	adds	r3, r2, r3
 8002482:	4adb      	ldr	r2, [pc, #876]	; (80027f0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002484:	4694      	mov	ip, r2
 8002486:	4463      	add	r3, ip
 8002488:	643b      	str	r3, [r7, #64]	; 0x40
 800248a:	238c      	movs	r3, #140	; 0x8c
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	b29a      	uxth	r2, r3
 8002492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002494:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6959      	ldr	r1, [r3, #20]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	891a      	ldrh	r2, [r3, #8]
 80024a2:	238c      	movs	r3, #140	; 0x8c
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f003 fa0f 	bl	80058cc <USB_WritePMA>
 80024ae:	e1ea      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2250      	movs	r2, #80	; 0x50
 80024b6:	5a9b      	ldrh	r3, [r3, r2]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	001a      	movs	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	18d2      	adds	r2, r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	18d3      	adds	r3, r2, r3
 80024ca:	4aca      	ldr	r2, [pc, #808]	; (80027f4 <HAL_PCD_EP_DB_Transmit+0x728>)
 80024cc:	4694      	mov	ip, r2
 80024ce:	4463      	add	r3, ip
 80024d0:	881a      	ldrh	r2, [r3, #0]
 80024d2:	2186      	movs	r1, #134	; 0x86
 80024d4:	187b      	adds	r3, r7, r1
 80024d6:	0592      	lsls	r2, r2, #22
 80024d8:	0d92      	lsrs	r2, r2, #22
 80024da:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d307      	bcc.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	699a      	ldr	r2, [r3, #24]
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	1ad2      	subs	r2, r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	619a      	str	r2, [r3, #24]
 80024f6:	e002      	b.n	80024fe <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d000      	beq.n	8002508 <HAL_PCD_EP_DB_Transmit+0x43c>
 8002506:	e0bb      	b.n	8002680 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	785b      	ldrb	r3, [r3, #1]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d125      	bne.n	800255c <HAL_PCD_EP_DB_Transmit+0x490>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2250      	movs	r2, #80	; 0x50
 800251c:	5a9b      	ldrh	r3, [r3, r2]
 800251e:	b29b      	uxth	r3, r3
 8002520:	001a      	movs	r2, r3
 8002522:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002524:	189b      	adds	r3, r3, r2
 8002526:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	00da      	lsls	r2, r3, #3
 800252e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002530:	18d3      	adds	r3, r2, r3
 8002532:	4aaf      	ldr	r2, [pc, #700]	; (80027f0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002534:	4694      	mov	ip, r2
 8002536:	4463      	add	r3, ip
 8002538:	67bb      	str	r3, [r7, #120]	; 0x78
 800253a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	059b      	lsls	r3, r3, #22
 8002542:	0d9b      	lsrs	r3, r3, #22
 8002544:	b29a      	uxth	r2, r3
 8002546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	4aa9      	ldr	r2, [pc, #676]	; (80027f8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002552:	4313      	orrs	r3, r2
 8002554:	b29a      	uxth	r2, r3
 8002556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002558:	801a      	strh	r2, [r3, #0]
 800255a:	e01b      	b.n	8002594 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d117      	bne.n	8002594 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	667b      	str	r3, [r7, #100]	; 0x64
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2250      	movs	r2, #80	; 0x50
 8002570:	5a9b      	ldrh	r3, [r3, r2]
 8002572:	b29b      	uxth	r3, r3
 8002574:	001a      	movs	r2, r3
 8002576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002578:	189b      	adds	r3, r3, r2
 800257a:	667b      	str	r3, [r7, #100]	; 0x64
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	00da      	lsls	r2, r3, #3
 8002582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002584:	18d3      	adds	r3, r2, r3
 8002586:	4a9a      	ldr	r2, [pc, #616]	; (80027f0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002588:	4694      	mov	ip, r2
 800258a:	4463      	add	r3, ip
 800258c:	663b      	str	r3, [r7, #96]	; 0x60
 800258e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002590:	2200      	movs	r2, #0
 8002592:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	677b      	str	r3, [r7, #116]	; 0x74
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	785b      	ldrb	r3, [r3, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d12b      	bne.n	80025fa <HAL_PCD_EP_DB_Transmit+0x52e>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2250      	movs	r2, #80	; 0x50
 80025ae:	5a9b      	ldrh	r3, [r3, r2]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	001a      	movs	r2, r3
 80025b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b6:	189b      	adds	r3, r3, r2
 80025b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	00da      	lsls	r2, r3, #3
 80025c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c2:	18d3      	adds	r3, r2, r3
 80025c4:	4a8b      	ldr	r2, [pc, #556]	; (80027f4 <HAL_PCD_EP_DB_Transmit+0x728>)
 80025c6:	4694      	mov	ip, r2
 80025c8:	4463      	add	r3, ip
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	187a      	adds	r2, r7, r1
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	059b      	lsls	r3, r3, #22
 80025da:	0d9b      	lsrs	r3, r3, #22
 80025dc:	b29a      	uxth	r2, r3
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	801a      	strh	r2, [r3, #0]
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4a82      	ldr	r2, [pc, #520]	; (80027f8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	801a      	strh	r2, [r3, #0]
 80025f8:	e018      	b.n	800262c <HAL_PCD_EP_DB_Transmit+0x560>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d114      	bne.n	800262c <HAL_PCD_EP_DB_Transmit+0x560>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2250      	movs	r2, #80	; 0x50
 8002608:	5a9b      	ldrh	r3, [r3, r2]
 800260a:	b29b      	uxth	r3, r3
 800260c:	001a      	movs	r2, r3
 800260e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002610:	189b      	adds	r3, r3, r2
 8002612:	677b      	str	r3, [r7, #116]	; 0x74
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	00da      	lsls	r2, r3, #3
 800261a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261c:	18d3      	adds	r3, r2, r3
 800261e:	4a75      	ldr	r2, [pc, #468]	; (80027f4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002620:	4694      	mov	ip, r2
 8002622:	4463      	add	r3, ip
 8002624:	673b      	str	r3, [r7, #112]	; 0x70
 8002626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002628:	2200      	movs	r2, #0
 800262a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	781a      	ldrb	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	0011      	movs	r1, r2
 8002634:	0018      	movs	r0, r3
 8002636:	f005 f96f 	bl	8007918 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800263a:	1dbb      	adds	r3, r7, #6
 800263c:	881a      	ldrh	r2, [r3, #0]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	01db      	lsls	r3, r3, #7
 8002642:	4013      	ands	r3, r2
 8002644:	d000      	beq.n	8002648 <HAL_PCD_EP_DB_Transmit+0x57c>
 8002646:	e11e      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	001a      	movs	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	18d3      	adds	r3, r2, r3
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	b29a      	uxth	r2, r3
 800265a:	2088      	movs	r0, #136	; 0x88
 800265c:	183b      	adds	r3, r7, r0
 800265e:	4967      	ldr	r1, [pc, #412]	; (80027fc <HAL_PCD_EP_DB_Transmit+0x730>)
 8002660:	400a      	ands	r2, r1
 8002662:	801a      	strh	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	001a      	movs	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	18d3      	adds	r3, r2, r3
 8002672:	183a      	adds	r2, r7, r0
 8002674:	8812      	ldrh	r2, [r2, #0]
 8002676:	4962      	ldr	r1, [pc, #392]	; (8002800 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002678:	430a      	orrs	r2, r1
 800267a:	b292      	uxth	r2, r2
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	e102      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002680:	1dbb      	adds	r3, r7, #6
 8002682:	881a      	ldrh	r2, [r3, #0]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	01db      	lsls	r3, r3, #7
 8002688:	4013      	ands	r3, r2
 800268a:	d11a      	bne.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	001a      	movs	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	18d3      	adds	r3, r2, r3
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b29a      	uxth	r2, r3
 800269e:	204e      	movs	r0, #78	; 0x4e
 80026a0:	183b      	adds	r3, r7, r0
 80026a2:	4956      	ldr	r1, [pc, #344]	; (80027fc <HAL_PCD_EP_DB_Transmit+0x730>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	801a      	strh	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	001a      	movs	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	18d3      	adds	r3, r2, r3
 80026b6:	183a      	adds	r2, r7, r0
 80026b8:	8812      	ldrh	r2, [r2, #0]
 80026ba:	4951      	ldr	r1, [pc, #324]	; (8002800 <HAL_PCD_EP_DB_Transmit+0x734>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	b292      	uxth	r2, r2
 80026c0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2224      	movs	r2, #36	; 0x24
 80026c6:	5c9b      	ldrb	r3, [r3, r2]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d000      	beq.n	80026ce <HAL_PCD_EP_DB_Transmit+0x602>
 80026cc:	e0db      	b.n	8002886 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	2186      	movs	r1, #134	; 0x86
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	18d2      	adds	r2, r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	18d2      	adds	r2, r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	6a1a      	ldr	r2, [r3, #32]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d30c      	bcc.n	8002712 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	218c      	movs	r1, #140	; 0x8c
 80026fe:	187a      	adds	r2, r7, r1
 8002700:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	6a1a      	ldr	r2, [r3, #32]
 8002706:	187b      	adds	r3, r7, r1
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1ad2      	subs	r2, r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	621a      	str	r2, [r3, #32]
 8002710:	e01a      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10a      	bne.n	8002730 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800271a:	2386      	movs	r3, #134	; 0x86
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	228c      	movs	r2, #140	; 0x8c
 8002722:	18ba      	adds	r2, r7, r2
 8002724:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2224      	movs	r2, #36	; 0x24
 800272a:	2100      	movs	r1, #0
 800272c:	5499      	strb	r1, [r3, r2]
 800272e:	e00b      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	228c      	movs	r2, #140	; 0x8c
 8002736:	18ba      	adds	r2, r7, r2
 8002738:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2224      	movs	r2, #36	; 0x24
 8002744:	2100      	movs	r1, #0
 8002746:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	657b      	str	r3, [r7, #84]	; 0x54
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	785b      	ldrb	r3, [r3, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d000      	beq.n	8002758 <HAL_PCD_EP_DB_Transmit+0x68c>
 8002756:	e06e      	b.n	8002836 <HAL_PCD_EP_DB_Transmit+0x76a>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2250      	movs	r2, #80	; 0x50
 8002764:	5a9b      	ldrh	r3, [r3, r2]
 8002766:	b29b      	uxth	r3, r3
 8002768:	001a      	movs	r2, r3
 800276a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276c:	189b      	adds	r3, r3, r2
 800276e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	00da      	lsls	r2, r3, #3
 8002776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002778:	18d3      	adds	r3, r2, r3
 800277a:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <HAL_PCD_EP_DB_Transmit+0x728>)
 800277c:	4694      	mov	ip, r2
 800277e:	4463      	add	r3, ip
 8002780:	65bb      	str	r3, [r7, #88]	; 0x58
 8002782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	059b      	lsls	r3, r3, #22
 800278a:	0d9b      	lsrs	r3, r3, #22
 800278c:	b29a      	uxth	r2, r3
 800278e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	228c      	movs	r2, #140	; 0x8c
 8002794:	18bb      	adds	r3, r7, r2
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b3e      	cmp	r3, #62	; 0x3e
 800279a:	d91a      	bls.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x706>
 800279c:	18bb      	adds	r3, r7, r2
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80027a4:	18bb      	adds	r3, r7, r2
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	221f      	movs	r2, #31
 80027aa:	4013      	ands	r3, r2
 80027ac:	d102      	bne.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80027ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b0:	3b01      	subs	r3, #1
 80027b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80027b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027bc:	b29b      	uxth	r3, r3
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4313      	orrs	r3, r2
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4a0c      	ldr	r2, [pc, #48]	; (80027f8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ce:	801a      	strh	r2, [r3, #0]
 80027d0:	e04d      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80027d2:	238c      	movs	r3, #140	; 0x8c
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d113      	bne.n	8002804 <HAL_PCD_EP_DB_Transmit+0x738>
 80027dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	e03f      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	00000402 	.word	0x00000402
 80027f4:	00000406 	.word	0x00000406
 80027f8:	ffff8000 	.word	0xffff8000
 80027fc:	ffff8f8f 	.word	0xffff8f8f
 8002800:	ffffc080 	.word	0xffffc080
 8002804:	228c      	movs	r2, #140	; 0x8c
 8002806:	18bb      	adds	r3, r7, r2
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	66bb      	str	r3, [r7, #104]	; 0x68
 800280e:	18bb      	adds	r3, r7, r2
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2201      	movs	r2, #1
 8002814:	4013      	ands	r3, r2
 8002816:	d002      	beq.n	800281e <HAL_PCD_EP_DB_Transmit+0x752>
 8002818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800281a:	3301      	adds	r3, #1
 800281c:	66bb      	str	r3, [r7, #104]	; 0x68
 800281e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	b29a      	uxth	r2, r3
 8002824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002826:	b29b      	uxth	r3, r3
 8002828:	029b      	lsls	r3, r3, #10
 800282a:	b29b      	uxth	r3, r3
 800282c:	4313      	orrs	r3, r2
 800282e:	b29a      	uxth	r2, r3
 8002830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	e01b      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d117      	bne.n	800286e <HAL_PCD_EP_DB_Transmit+0x7a2>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2250      	movs	r2, #80	; 0x50
 8002844:	5a9b      	ldrh	r3, [r3, r2]
 8002846:	b29b      	uxth	r3, r3
 8002848:	001a      	movs	r2, r3
 800284a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284c:	189b      	adds	r3, r3, r2
 800284e:	657b      	str	r3, [r7, #84]	; 0x54
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	00da      	lsls	r2, r3, #3
 8002856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002858:	18d3      	adds	r3, r2, r3
 800285a:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <HAL_PCD_EP_DB_Transmit+0x814>)
 800285c:	4694      	mov	ip, r2
 800285e:	4463      	add	r3, ip
 8002860:	653b      	str	r3, [r7, #80]	; 0x50
 8002862:	238c      	movs	r3, #140	; 0x8c
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b29a      	uxth	r2, r3
 800286a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800286c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	6959      	ldr	r1, [r3, #20]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	895a      	ldrh	r2, [r3, #10]
 800287a:	238c      	movs	r3, #140	; 0x8c
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	f003 f823 	bl	80058cc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	001a      	movs	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	18d3      	adds	r3, r2, r3
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29a      	uxth	r2, r3
 8002898:	2014      	movs	r0, #20
 800289a:	183b      	adds	r3, r7, r0
 800289c:	4911      	ldr	r1, [pc, #68]	; (80028e4 <HAL_PCD_EP_DB_Transmit+0x818>)
 800289e:	400a      	ands	r2, r1
 80028a0:	801a      	strh	r2, [r3, #0]
 80028a2:	183b      	adds	r3, r7, r0
 80028a4:	183a      	adds	r2, r7, r0
 80028a6:	8812      	ldrh	r2, [r2, #0]
 80028a8:	2110      	movs	r1, #16
 80028aa:	404a      	eors	r2, r1
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	183b      	adds	r3, r7, r0
 80028b0:	183a      	adds	r2, r7, r0
 80028b2:	8812      	ldrh	r2, [r2, #0]
 80028b4:	2120      	movs	r1, #32
 80028b6:	404a      	eors	r2, r1
 80028b8:	801a      	strh	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	001a      	movs	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	18d3      	adds	r3, r2, r3
 80028c8:	183a      	adds	r2, r7, r0
 80028ca:	8812      	ldrh	r2, [r2, #0]
 80028cc:	4906      	ldr	r1, [pc, #24]	; (80028e8 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80028ce:	430a      	orrs	r2, r1
 80028d0:	b292      	uxth	r2, r2
 80028d2:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b024      	add	sp, #144	; 0x90
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	00000406 	.word	0x00000406
 80028e4:	ffff8fbf 	.word	0xffff8fbf
 80028e8:	ffff8080 	.word	0xffff8080

080028ec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	0008      	movs	r0, r1
 80028f6:	0011      	movs	r1, r2
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	240a      	movs	r4, #10
 80028fc:	193b      	adds	r3, r7, r4
 80028fe:	1c02      	adds	r2, r0, #0
 8002900:	801a      	strh	r2, [r3, #0]
 8002902:	2308      	movs	r3, #8
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	1c0a      	adds	r2, r1, #0
 8002908:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800290a:	0021      	movs	r1, r4
 800290c:	187b      	adds	r3, r7, r1
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	4013      	ands	r3, r2
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291a:	187b      	adds	r3, r7, r1
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	2207      	movs	r2, #7
 8002920:	4013      	ands	r3, r2
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	0013      	movs	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	189b      	adds	r3, r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	18d3      	adds	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	e00b      	b.n	800294c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002934:	230a      	movs	r3, #10
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	0013      	movs	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	189b      	adds	r3, r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	3369      	adds	r3, #105	; 0x69
 8002944:	33ff      	adds	r3, #255	; 0xff
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	18d3      	adds	r3, r2, r3
 800294a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800294c:	2308      	movs	r3, #8
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d107      	bne.n	8002966 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2200      	movs	r2, #0
 800295a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	b29a      	uxth	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	80da      	strh	r2, [r3, #6]
 8002964:	e00b      	b.n	800297e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2201      	movs	r2, #1
 800296a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	b29a      	uxth	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	0c1b      	lsrs	r3, r3, #16
 8002978:	b29a      	uxth	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b007      	add	sp, #28
 8002986:	bd90      	pop	{r4, r7, pc}

08002988 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	23ba      	movs	r3, #186	; 0xba
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	2101      	movs	r1, #1
 800299e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	23b8      	movs	r3, #184	; 0xb8
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	2100      	movs	r1, #0
 80029a8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2254      	movs	r2, #84	; 0x54
 80029ae:	5a9b      	ldrh	r3, [r3, r2]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2201      	movs	r2, #1
 80029b4:	4313      	orrs	r3, r2
 80029b6:	b299      	uxth	r1, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2254      	movs	r2, #84	; 0x54
 80029bc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2254      	movs	r2, #84	; 0x54
 80029c2:	5a9b      	ldrh	r3, [r3, r2]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2202      	movs	r2, #2
 80029c8:	4313      	orrs	r3, r2
 80029ca:	b299      	uxth	r1, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2254      	movs	r2, #84	; 0x54
 80029d0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b004      	add	sp, #16
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	000a      	movs	r2, r1
 80029e6:	1cfb      	adds	r3, r7, #3
 80029e8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b5b0      	push	{r4, r5, r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f000 fbaf 	bl	8003166 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a08:	4bcf      	ldr	r3, [pc, #828]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	220c      	movs	r2, #12
 8002a0e:	4013      	ands	r3, r2
 8002a10:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a12:	4bcd      	ldr	r3, [pc, #820]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	025b      	lsls	r3, r3, #9
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2201      	movs	r2, #1
 8002a24:	4013      	ands	r3, r2
 8002a26:	d100      	bne.n	8002a2a <HAL_RCC_OscConfig+0x36>
 8002a28:	e07e      	b.n	8002b28 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d007      	beq.n	8002a40 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d112      	bne.n	8002a5c <HAL_RCC_OscConfig+0x68>
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	025b      	lsls	r3, r3, #9
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d10d      	bne.n	8002a5c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	4bc1      	ldr	r3, [pc, #772]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	029b      	lsls	r3, r3, #10
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d100      	bne.n	8002a4e <HAL_RCC_OscConfig+0x5a>
 8002a4c:	e06b      	b.n	8002b26 <HAL_RCC_OscConfig+0x132>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d167      	bne.n	8002b26 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f000 fb85 	bl	8003166 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	025b      	lsls	r3, r3, #9
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x84>
 8002a68:	4bb7      	ldr	r3, [pc, #732]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4bb6      	ldr	r3, [pc, #728]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002a6e:	2180      	movs	r1, #128	; 0x80
 8002a70:	0249      	lsls	r1, r1, #9
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e027      	b.n	8002ac8 <HAL_RCC_OscConfig+0xd4>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	23a0      	movs	r3, #160	; 0xa0
 8002a7e:	02db      	lsls	r3, r3, #11
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d10e      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xae>
 8002a84:	4bb0      	ldr	r3, [pc, #704]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4baf      	ldr	r3, [pc, #700]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	02c9      	lsls	r1, r1, #11
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	4bad      	ldr	r3, [pc, #692]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4bac      	ldr	r3, [pc, #688]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0249      	lsls	r1, r1, #9
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e012      	b.n	8002ac8 <HAL_RCC_OscConfig+0xd4>
 8002aa2:	4ba9      	ldr	r3, [pc, #676]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4ba8      	ldr	r3, [pc, #672]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002aa8:	49a8      	ldr	r1, [pc, #672]	; (8002d4c <HAL_RCC_OscConfig+0x358>)
 8002aaa:	400a      	ands	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	4ba6      	ldr	r3, [pc, #664]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	025b      	lsls	r3, r3, #9
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4ba2      	ldr	r3, [pc, #648]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4ba1      	ldr	r3, [pc, #644]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002ac2:	49a3      	ldr	r1, [pc, #652]	; (8002d50 <HAL_RCC_OscConfig+0x35c>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fd fea8 	bl	8000824 <HAL_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ad8:	e009      	b.n	8002aee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ada:	f7fd fea3 	bl	8000824 <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b64      	cmp	r3, #100	; 0x64
 8002ae6:	d902      	bls.n	8002aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	f000 fb3c 	bl	8003166 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aee:	4b96      	ldr	r3, [pc, #600]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	4013      	ands	r3, r2
 8002af8:	d0ef      	beq.n	8002ada <HAL_RCC_OscConfig+0xe6>
 8002afa:	e015      	b.n	8002b28 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fd fe92 	bl	8000824 <HAL_GetTick>
 8002b00:	0003      	movs	r3, r0
 8002b02:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b06:	f7fd fe8d 	bl	8000824 <HAL_GetTick>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b64      	cmp	r3, #100	; 0x64
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e326      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b18:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	029b      	lsls	r3, r3, #10
 8002b20:	4013      	ands	r3, r2
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0x112>
 8002b24:	e000      	b.n	8002b28 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d100      	bne.n	8002b34 <HAL_RCC_OscConfig+0x140>
 8002b32:	e08b      	b.n	8002c4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	2b0c      	cmp	r3, #12
 8002b44:	d13e      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1d0>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d13b      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002b4c:	4b7e      	ldr	r3, [pc, #504]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2204      	movs	r2, #4
 8002b52:	4013      	ands	r3, r2
 8002b54:	d004      	beq.n	8002b60 <HAL_RCC_OscConfig+0x16c>
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e302      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b60:	4b79      	ldr	r3, [pc, #484]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4a7b      	ldr	r2, [pc, #492]	; (8002d54 <HAL_RCC_OscConfig+0x360>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	0019      	movs	r1, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	021a      	lsls	r2, r3, #8
 8002b70:	4b75      	ldr	r3, [pc, #468]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b76:	4b74      	ldr	r3, [pc, #464]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2209      	movs	r2, #9
 8002b7c:	4393      	bics	r3, r2
 8002b7e:	0019      	movs	r1, r3
 8002b80:	4b71      	ldr	r3, [pc, #452]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b88:	f000 fc40 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8002b8c:	0001      	movs	r1, r0
 8002b8e:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	220f      	movs	r2, #15
 8002b96:	4013      	ands	r3, r2
 8002b98:	4a6f      	ldr	r2, [pc, #444]	; (8002d58 <HAL_RCC_OscConfig+0x364>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	000a      	movs	r2, r1
 8002b9e:	40da      	lsrs	r2, r3
 8002ba0:	4b6e      	ldr	r3, [pc, #440]	; (8002d5c <HAL_RCC_OscConfig+0x368>)
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002ba4:	4b6e      	ldr	r3, [pc, #440]	; (8002d60 <HAL_RCC_OscConfig+0x36c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2513      	movs	r5, #19
 8002baa:	197c      	adds	r4, r7, r5
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7fd fdf3 	bl	8000798 <HAL_InitTick>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002bb6:	197b      	adds	r3, r7, r5
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d046      	beq.n	8002c4c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002bbe:	197b      	adds	r3, r7, r5
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	e2d0      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d027      	beq.n	8002c1a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002bca:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2209      	movs	r2, #9
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fd fe22 	bl	8000824 <HAL_GetTick>
 8002be0:	0003      	movs	r3, r0
 8002be2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fd fe1d 	bl	8000824 <HAL_GetTick>
 8002bea:	0002      	movs	r2, r0
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e2b6      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bf8:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d0f1      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c02:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4a53      	ldr	r2, [pc, #332]	; (8002d54 <HAL_RCC_OscConfig+0x360>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	021a      	lsls	r2, r3, #8
 8002c12:	4b4d      	ldr	r3, [pc, #308]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	e018      	b.n	8002c4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1a:	4b4b      	ldr	r3, [pc, #300]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002c20:	2101      	movs	r1, #1
 8002c22:	438a      	bics	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c26:	f7fd fdfd 	bl	8000824 <HAL_GetTick>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c30:	f7fd fdf8 	bl	8000824 <HAL_GetTick>
 8002c34:	0002      	movs	r2, r0
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e291      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c42:	4b41      	ldr	r3, [pc, #260]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2204      	movs	r2, #4
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d1f1      	bne.n	8002c30 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2210      	movs	r2, #16
 8002c52:	4013      	ands	r3, r2
 8002c54:	d100      	bne.n	8002c58 <HAL_RCC_OscConfig+0x264>
 8002c56:	e0a1      	b.n	8002d9c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d140      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c5e:	4b3a      	ldr	r3, [pc, #232]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	d005      	beq.n	8002c76 <HAL_RCC_OscConfig+0x282>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e277      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c76:	4b34      	ldr	r3, [pc, #208]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4a3a      	ldr	r2, [pc, #232]	; (8002d64 <HAL_RCC_OscConfig+0x370>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	0019      	movs	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c84:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	0a19      	lsrs	r1, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	061a      	lsls	r2, r3, #24
 8002c98:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	0b5b      	lsrs	r3, r3, #13
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	2280      	movs	r2, #128	; 0x80
 8002ca8:	0212      	lsls	r2, r2, #8
 8002caa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002cac:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	210f      	movs	r1, #15
 8002cb4:	400b      	ands	r3, r1
 8002cb6:	4928      	ldr	r1, [pc, #160]	; (8002d58 <HAL_RCC_OscConfig+0x364>)
 8002cb8:	5ccb      	ldrb	r3, [r1, r3]
 8002cba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cbc:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <HAL_RCC_OscConfig+0x368>)
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002cc0:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <HAL_RCC_OscConfig+0x36c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2513      	movs	r5, #19
 8002cc6:	197c      	adds	r4, r7, r5
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7fd fd65 	bl	8000798 <HAL_InitTick>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002cd2:	197b      	adds	r3, r7, r5
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d060      	beq.n	8002d9c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002cda:	197b      	adds	r3, r7, r5
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	e242      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d03f      	beq.n	8002d68 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ce8:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002cee:	2180      	movs	r1, #128	; 0x80
 8002cf0:	0049      	lsls	r1, r1, #1
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7fd fd95 	bl	8000824 <HAL_GetTick>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d00:	f7fd fd90 	bl	8000824 <HAL_GetTick>
 8002d04:	0002      	movs	r2, r0
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e229      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <HAL_RCC_OscConfig+0x370>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	0019      	movs	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	0a19      	lsrs	r1, r3, #8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	061a      	lsls	r2, r3, #24
 8002d40:	4b01      	ldr	r3, [pc, #4]	; (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	e029      	b.n	8002d9c <HAL_RCC_OscConfig+0x3a8>
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	fffeffff 	.word	0xfffeffff
 8002d50:	fffbffff 	.word	0xfffbffff
 8002d54:	ffffe0ff 	.word	0xffffe0ff
 8002d58:	08007fd0 	.word	0x08007fd0
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	20000004 	.word	0x20000004
 8002d64:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d68:	4bbd      	ldr	r3, [pc, #756]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4bbc      	ldr	r3, [pc, #752]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002d6e:	49bd      	ldr	r1, [pc, #756]	; (8003064 <HAL_RCC_OscConfig+0x670>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fd fd56 	bl	8000824 <HAL_GetTick>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d7e:	f7fd fd51 	bl	8000824 <HAL_GetTick>
 8002d82:	0002      	movs	r2, r0
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e1ea      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d90:	4bb3      	ldr	r3, [pc, #716]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2208      	movs	r2, #8
 8002da2:	4013      	ands	r3, r2
 8002da4:	d036      	beq.n	8002e14 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d019      	beq.n	8002de2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4bac      	ldr	r3, [pc, #688]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002db0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002db2:	4bab      	ldr	r3, [pc, #684]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002db4:	2101      	movs	r1, #1
 8002db6:	430a      	orrs	r2, r1
 8002db8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dba:	f7fd fd33 	bl	8000824 <HAL_GetTick>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fd fd2e 	bl	8000824 <HAL_GetTick>
 8002dc8:	0002      	movs	r2, r0
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1c7      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dd6:	4ba2      	ldr	r3, [pc, #648]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dda:	2202      	movs	r2, #2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d0f1      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x3d0>
 8002de0:	e018      	b.n	8002e14 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de2:	4b9f      	ldr	r3, [pc, #636]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002de4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002de6:	4b9e      	ldr	r3, [pc, #632]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002de8:	2101      	movs	r1, #1
 8002dea:	438a      	bics	r2, r1
 8002dec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dee:	f7fd fd19 	bl	8000824 <HAL_GetTick>
 8002df2:	0003      	movs	r3, r0
 8002df4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df8:	f7fd fd14 	bl	8000824 <HAL_GetTick>
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1ad      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e0a:	4b95      	ldr	r3, [pc, #596]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0e:	2202      	movs	r2, #2
 8002e10:	4013      	ands	r3, r2
 8002e12:	d1f1      	bne.n	8002df8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d100      	bne.n	8002e20 <HAL_RCC_OscConfig+0x42c>
 8002e1e:	e0ae      	b.n	8002f7e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e20:	2027      	movs	r0, #39	; 0x27
 8002e22:	183b      	adds	r3, r7, r0
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e28:	4b8d      	ldr	r3, [pc, #564]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	055b      	lsls	r3, r3, #21
 8002e30:	4013      	ands	r3, r2
 8002e32:	d109      	bne.n	8002e48 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e34:	4b8a      	ldr	r3, [pc, #552]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e38:	4b89      	ldr	r3, [pc, #548]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002e3a:	2180      	movs	r1, #128	; 0x80
 8002e3c:	0549      	lsls	r1, r1, #21
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002e42:	183b      	adds	r3, r7, r0
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	4b87      	ldr	r3, [pc, #540]	; (8003068 <HAL_RCC_OscConfig+0x674>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4013      	ands	r3, r2
 8002e52:	d11a      	bne.n	8002e8a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e54:	4b84      	ldr	r3, [pc, #528]	; (8003068 <HAL_RCC_OscConfig+0x674>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b83      	ldr	r3, [pc, #524]	; (8003068 <HAL_RCC_OscConfig+0x674>)
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	0049      	lsls	r1, r1, #1
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e62:	f7fd fcdf 	bl	8000824 <HAL_GetTick>
 8002e66:	0003      	movs	r3, r0
 8002e68:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6c:	f7fd fcda 	bl	8000824 <HAL_GetTick>
 8002e70:	0002      	movs	r2, r0
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e173      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b7a      	ldr	r3, [pc, #488]	; (8003068 <HAL_RCC_OscConfig+0x674>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4013      	ands	r3, r2
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x4b2>
 8002e96:	4b72      	ldr	r3, [pc, #456]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002e98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e9a:	4b71      	ldr	r3, [pc, #452]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	0049      	lsls	r1, r1, #1
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ea4:	e031      	b.n	8002f0a <HAL_RCC_OscConfig+0x516>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4d4>
 8002eae:	4b6c      	ldr	r3, [pc, #432]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eb2:	4b6b      	ldr	r3, [pc, #428]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002eb4:	496b      	ldr	r1, [pc, #428]	; (8003064 <HAL_RCC_OscConfig+0x670>)
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	651a      	str	r2, [r3, #80]	; 0x50
 8002eba:	4b69      	ldr	r3, [pc, #420]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ebe:	4b68      	ldr	r3, [pc, #416]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002ec0:	496a      	ldr	r1, [pc, #424]	; (800306c <HAL_RCC_OscConfig+0x678>)
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	651a      	str	r2, [r3, #80]	; 0x50
 8002ec6:	e020      	b.n	8002f0a <HAL_RCC_OscConfig+0x516>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	23a0      	movs	r3, #160	; 0xa0
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d10e      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4fe>
 8002ed4:	4b62      	ldr	r3, [pc, #392]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002ed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ed8:	4b61      	ldr	r3, [pc, #388]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	00c9      	lsls	r1, r1, #3
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ee2:	4b5f      	ldr	r3, [pc, #380]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ee6:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	0049      	lsls	r1, r1, #1
 8002eec:	430a      	orrs	r2, r1
 8002eee:	651a      	str	r2, [r3, #80]	; 0x50
 8002ef0:	e00b      	b.n	8002f0a <HAL_RCC_OscConfig+0x516>
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ef6:	4b5a      	ldr	r3, [pc, #360]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002ef8:	495a      	ldr	r1, [pc, #360]	; (8003064 <HAL_RCC_OscConfig+0x670>)
 8002efa:	400a      	ands	r2, r1
 8002efc:	651a      	str	r2, [r3, #80]	; 0x50
 8002efe:	4b58      	ldr	r3, [pc, #352]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f02:	4b57      	ldr	r3, [pc, #348]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002f04:	4959      	ldr	r1, [pc, #356]	; (800306c <HAL_RCC_OscConfig+0x678>)
 8002f06:	400a      	ands	r2, r1
 8002f08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d015      	beq.n	8002f3e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7fd fc87 	bl	8000824 <HAL_GetTick>
 8002f16:	0003      	movs	r3, r0
 8002f18:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f1a:	e009      	b.n	8002f30 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fd fc82 	bl	8000824 <HAL_GetTick>
 8002f20:	0002      	movs	r2, r0
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e11a      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f30:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002f32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d0ef      	beq.n	8002f1c <HAL_RCC_OscConfig+0x528>
 8002f3c:	e014      	b.n	8002f68 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7fd fc71 	bl	8000824 <HAL_GetTick>
 8002f42:	0003      	movs	r3, r0
 8002f44:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f46:	e009      	b.n	8002f5c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7fd fc6c 	bl	8000824 <HAL_GetTick>
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	4a47      	ldr	r2, [pc, #284]	; (8003070 <HAL_RCC_OscConfig+0x67c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e104      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f5c:	4b40      	ldr	r3, [pc, #256]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002f5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4013      	ands	r3, r2
 8002f66:	d1ef      	bne.n	8002f48 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f68:	2327      	movs	r3, #39	; 0x27
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d105      	bne.n	8002f7e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f72:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f76:	4b3a      	ldr	r3, [pc, #232]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002f78:	493e      	ldr	r1, [pc, #248]	; (8003074 <HAL_RCC_OscConfig+0x680>)
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2220      	movs	r2, #32
 8002f84:	4013      	ands	r3, r2
 8002f86:	d049      	beq.n	800301c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d026      	beq.n	8002fde <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f90:	4b33      	ldr	r3, [pc, #204]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	4b32      	ldr	r3, [pc, #200]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	4b30      	ldr	r3, [pc, #192]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa0:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa8:	4b33      	ldr	r3, [pc, #204]	; (8003078 <HAL_RCC_OscConfig+0x684>)
 8002faa:	6a1a      	ldr	r2, [r3, #32]
 8002fac:	4b32      	ldr	r3, [pc, #200]	; (8003078 <HAL_RCC_OscConfig+0x684>)
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	0189      	lsls	r1, r1, #6
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fd fc35 	bl	8000824 <HAL_GetTick>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc0:	f7fd fc30 	bl	8000824 <HAL_GetTick>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e0c9      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d0f1      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x5cc>
 8002fdc:	e01e      	b.n	800301c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	438a      	bics	r2, r1
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	4b23      	ldr	r3, [pc, #140]	; (8003078 <HAL_RCC_OscConfig+0x684>)
 8002fec:	6a1a      	ldr	r2, [r3, #32]
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_RCC_OscConfig+0x684>)
 8002ff0:	4922      	ldr	r1, [pc, #136]	; (800307c <HAL_RCC_OscConfig+0x688>)
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fd fc15 	bl	8000824 <HAL_GetTick>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003000:	f7fd fc10 	bl	8000824 <HAL_GetTick>
 8003004:	0002      	movs	r2, r0
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0a9      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003012:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2202      	movs	r2, #2
 8003018:	4013      	ands	r3, r2
 800301a:	d1f1      	bne.n	8003000 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	2b00      	cmp	r3, #0
 8003022:	d100      	bne.n	8003026 <HAL_RCC_OscConfig+0x632>
 8003024:	e09e      	b.n	8003164 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d100      	bne.n	800302e <HAL_RCC_OscConfig+0x63a>
 800302c:	e077      	b.n	800311e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	2b02      	cmp	r3, #2
 8003034:	d158      	bne.n	80030e8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_OscConfig+0x66c>)
 800303c:	4910      	ldr	r1, [pc, #64]	; (8003080 <HAL_RCC_OscConfig+0x68c>)
 800303e:	400a      	ands	r2, r1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fd fbef 	bl	8000824 <HAL_GetTick>
 8003046:	0003      	movs	r3, r0
 8003048:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800304a:	e01b      	b.n	8003084 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304c:	f7fd fbea 	bl	8000824 <HAL_GetTick>
 8003050:	0002      	movs	r2, r0
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d914      	bls.n	8003084 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e083      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	40021000 	.word	0x40021000
 8003064:	fffffeff 	.word	0xfffffeff
 8003068:	40007000 	.word	0x40007000
 800306c:	fffffbff 	.word	0xfffffbff
 8003070:	00001388 	.word	0x00001388
 8003074:	efffffff 	.word	0xefffffff
 8003078:	40010000 	.word	0x40010000
 800307c:	ffffdfff 	.word	0xffffdfff
 8003080:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003084:	4b3a      	ldr	r3, [pc, #232]	; (8003170 <HAL_RCC_OscConfig+0x77c>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	049b      	lsls	r3, r3, #18
 800308c:	4013      	ands	r3, r2
 800308e:	d1dd      	bne.n	800304c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003090:	4b37      	ldr	r3, [pc, #220]	; (8003170 <HAL_RCC_OscConfig+0x77c>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a37      	ldr	r2, [pc, #220]	; (8003174 <HAL_RCC_OscConfig+0x780>)
 8003096:	4013      	ands	r3, r2
 8003098:	0019      	movs	r1, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a8:	431a      	orrs	r2, r3
 80030aa:	4b31      	ldr	r3, [pc, #196]	; (8003170 <HAL_RCC_OscConfig+0x77c>)
 80030ac:	430a      	orrs	r2, r1
 80030ae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b2f      	ldr	r3, [pc, #188]	; (8003170 <HAL_RCC_OscConfig+0x77c>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b2e      	ldr	r3, [pc, #184]	; (8003170 <HAL_RCC_OscConfig+0x77c>)
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	0449      	lsls	r1, r1, #17
 80030ba:	430a      	orrs	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fd fbb1 	bl	8000824 <HAL_GetTick>
 80030c2:	0003      	movs	r3, r0
 80030c4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fd fbac 	bl	8000824 <HAL_GetTick>
 80030cc:	0002      	movs	r2, r0
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e045      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030da:	4b25      	ldr	r3, [pc, #148]	; (8003170 <HAL_RCC_OscConfig+0x77c>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	049b      	lsls	r3, r3, #18
 80030e2:	4013      	ands	r3, r2
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x6d4>
 80030e6:	e03d      	b.n	8003164 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e8:	4b21      	ldr	r3, [pc, #132]	; (8003170 <HAL_RCC_OscConfig+0x77c>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_RCC_OscConfig+0x77c>)
 80030ee:	4922      	ldr	r1, [pc, #136]	; (8003178 <HAL_RCC_OscConfig+0x784>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fd fb96 	bl	8000824 <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fe:	f7fd fb91 	bl	8000824 <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e02a      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003110:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_RCC_OscConfig+0x77c>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	049b      	lsls	r3, r3, #18
 8003118:	4013      	ands	r3, r2
 800311a:	d1f0      	bne.n	80030fe <HAL_RCC_OscConfig+0x70a>
 800311c:	e022      	b.n	8003164 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e01d      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_RCC_OscConfig+0x77c>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	025b      	lsls	r3, r3, #9
 8003136:	401a      	ands	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	429a      	cmp	r2, r3
 800313e:	d10f      	bne.n	8003160 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	23f0      	movs	r3, #240	; 0xf0
 8003144:	039b      	lsls	r3, r3, #14
 8003146:	401a      	ands	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d107      	bne.n	8003160 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	23c0      	movs	r3, #192	; 0xc0
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	401a      	ands	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b00a      	add	sp, #40	; 0x28
 800316c:	bdb0      	pop	{r4, r5, r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	40021000 	.word	0x40021000
 8003174:	ff02ffff 	.word	0xff02ffff
 8003178:	feffffff 	.word	0xfeffffff

0800317c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b5b0      	push	{r4, r5, r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e128      	b.n	80033e2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b96      	ldr	r3, [pc, #600]	; (80033ec <HAL_RCC_ClockConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2201      	movs	r2, #1
 8003196:	4013      	ands	r3, r2
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d91e      	bls.n	80031dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b93      	ldr	r3, [pc, #588]	; (80033ec <HAL_RCC_ClockConfig+0x270>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	4393      	bics	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	4b90      	ldr	r3, [pc, #576]	; (80033ec <HAL_RCC_ClockConfig+0x270>)
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031b0:	f7fd fb38 	bl	8000824 <HAL_GetTick>
 80031b4:	0003      	movs	r3, r0
 80031b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b8:	e009      	b.n	80031ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ba:	f7fd fb33 	bl	8000824 <HAL_GetTick>
 80031be:	0002      	movs	r2, r0
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	4a8a      	ldr	r2, [pc, #552]	; (80033f0 <HAL_RCC_ClockConfig+0x274>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e109      	b.n	80033e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ce:	4b87      	ldr	r3, [pc, #540]	; (80033ec <HAL_RCC_ClockConfig+0x270>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2201      	movs	r2, #1
 80031d4:	4013      	ands	r3, r2
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d1ee      	bne.n	80031ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2202      	movs	r2, #2
 80031e2:	4013      	ands	r3, r2
 80031e4:	d009      	beq.n	80031fa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e6:	4b83      	ldr	r3, [pc, #524]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	22f0      	movs	r2, #240	; 0xf0
 80031ec:	4393      	bics	r3, r2
 80031ee:	0019      	movs	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	4b7f      	ldr	r3, [pc, #508]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 80031f6:	430a      	orrs	r2, r1
 80031f8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2201      	movs	r2, #1
 8003200:	4013      	ands	r3, r2
 8003202:	d100      	bne.n	8003206 <HAL_RCC_ClockConfig+0x8a>
 8003204:	e089      	b.n	800331a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800320e:	4b79      	ldr	r3, [pc, #484]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	029b      	lsls	r3, r3, #10
 8003216:	4013      	ands	r3, r2
 8003218:	d120      	bne.n	800325c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0e1      	b.n	80033e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003226:	4b73      	ldr	r3, [pc, #460]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	049b      	lsls	r3, r3, #18
 800322e:	4013      	ands	r3, r2
 8003230:	d114      	bne.n	800325c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0d5      	b.n	80033e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d106      	bne.n	800324c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800323e:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2204      	movs	r2, #4
 8003244:	4013      	ands	r3, r2
 8003246:	d109      	bne.n	800325c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0ca      	b.n	80033e2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800324c:	4b69      	ldr	r3, [pc, #420]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4013      	ands	r3, r2
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0c2      	b.n	80033e2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325c:	4b65      	ldr	r3, [pc, #404]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2203      	movs	r2, #3
 8003262:	4393      	bics	r3, r2
 8003264:	0019      	movs	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4b62      	ldr	r3, [pc, #392]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 800326c:	430a      	orrs	r2, r1
 800326e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003270:	f7fd fad8 	bl	8000824 <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d111      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003280:	e009      	b.n	8003296 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003282:	f7fd facf 	bl	8000824 <HAL_GetTick>
 8003286:	0002      	movs	r2, r0
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	4a58      	ldr	r2, [pc, #352]	; (80033f0 <HAL_RCC_ClockConfig+0x274>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e0a5      	b.n	80033e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003296:	4b57      	ldr	r3, [pc, #348]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	220c      	movs	r2, #12
 800329c:	4013      	ands	r3, r2
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d1ef      	bne.n	8003282 <HAL_RCC_ClockConfig+0x106>
 80032a2:	e03a      	b.n	800331a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d111      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ac:	e009      	b.n	80032c2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ae:	f7fd fab9 	bl	8000824 <HAL_GetTick>
 80032b2:	0002      	movs	r2, r0
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	4a4d      	ldr	r2, [pc, #308]	; (80033f0 <HAL_RCC_ClockConfig+0x274>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e08f      	b.n	80033e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c2:	4b4c      	ldr	r3, [pc, #304]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	220c      	movs	r2, #12
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b0c      	cmp	r3, #12
 80032cc:	d1ef      	bne.n	80032ae <HAL_RCC_ClockConfig+0x132>
 80032ce:	e024      	b.n	800331a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d11b      	bne.n	8003310 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032d8:	e009      	b.n	80032ee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032da:	f7fd faa3 	bl	8000824 <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	4a42      	ldr	r2, [pc, #264]	; (80033f0 <HAL_RCC_ClockConfig+0x274>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e079      	b.n	80033e2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	220c      	movs	r2, #12
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d1ef      	bne.n	80032da <HAL_RCC_ClockConfig+0x15e>
 80032fa:	e00e      	b.n	800331a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fc:	f7fd fa92 	bl	8000824 <HAL_GetTick>
 8003300:	0002      	movs	r2, r0
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	4a3a      	ldr	r2, [pc, #232]	; (80033f0 <HAL_RCC_ClockConfig+0x274>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e068      	b.n	80033e2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003310:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	220c      	movs	r2, #12
 8003316:	4013      	ands	r3, r2
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800331a:	4b34      	ldr	r3, [pc, #208]	; (80033ec <HAL_RCC_ClockConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2201      	movs	r2, #1
 8003320:	4013      	ands	r3, r2
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d21e      	bcs.n	8003366 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003328:	4b30      	ldr	r3, [pc, #192]	; (80033ec <HAL_RCC_ClockConfig+0x270>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2201      	movs	r2, #1
 800332e:	4393      	bics	r3, r2
 8003330:	0019      	movs	r1, r3
 8003332:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <HAL_RCC_ClockConfig+0x270>)
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800333a:	f7fd fa73 	bl	8000824 <HAL_GetTick>
 800333e:	0003      	movs	r3, r0
 8003340:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	e009      	b.n	8003358 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fd fa6e 	bl	8000824 <HAL_GetTick>
 8003348:	0002      	movs	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	4a28      	ldr	r2, [pc, #160]	; (80033f0 <HAL_RCC_ClockConfig+0x274>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e044      	b.n	80033e2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003358:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_RCC_ClockConfig+0x270>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2201      	movs	r2, #1
 800335e:	4013      	ands	r3, r2
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d1ee      	bne.n	8003344 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2204      	movs	r2, #4
 800336c:	4013      	ands	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4a20      	ldr	r2, [pc, #128]	; (80033f8 <HAL_RCC_ClockConfig+0x27c>)
 8003376:	4013      	ands	r3, r2
 8003378:	0019      	movs	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 8003380:	430a      	orrs	r2, r1
 8003382:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2208      	movs	r2, #8
 800338a:	4013      	ands	r3, r2
 800338c:	d00a      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800338e:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	4a1a      	ldr	r2, [pc, #104]	; (80033fc <HAL_RCC_ClockConfig+0x280>)
 8003394:	4013      	ands	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	00da      	lsls	r2, r3, #3
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033a4:	f000 f832 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033a8:	0001      	movs	r1, r0
 80033aa:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_RCC_ClockConfig+0x278>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	220f      	movs	r2, #15
 80033b2:	4013      	ands	r3, r2
 80033b4:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_RCC_ClockConfig+0x284>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	000a      	movs	r2, r1
 80033ba:	40da      	lsrs	r2, r3
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_RCC_ClockConfig+0x288>)
 80033be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_RCC_ClockConfig+0x28c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	250b      	movs	r5, #11
 80033c6:	197c      	adds	r4, r7, r5
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7fd f9e5 	bl	8000798 <HAL_InitTick>
 80033ce:	0003      	movs	r3, r0
 80033d0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80033d2:	197b      	adds	r3, r7, r5
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80033da:	197b      	adds	r3, r7, r5
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	e000      	b.n	80033e2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	0018      	movs	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b004      	add	sp, #16
 80033e8:	bdb0      	pop	{r4, r5, r7, pc}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	40022000 	.word	0x40022000
 80033f0:	00001388 	.word	0x00001388
 80033f4:	40021000 	.word	0x40021000
 80033f8:	fffff8ff 	.word	0xfffff8ff
 80033fc:	ffffc7ff 	.word	0xffffc7ff
 8003400:	08007fd0 	.word	0x08007fd0
 8003404:	20000000 	.word	0x20000000
 8003408:	20000004 	.word	0x20000004

0800340c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	b5b0      	push	{r4, r5, r7, lr}
 800340e:	b08e      	sub	sp, #56	; 0x38
 8003410:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003412:	4b4c      	ldr	r3, [pc, #304]	; (8003544 <HAL_RCC_GetSysClockFreq+0x138>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341a:	230c      	movs	r3, #12
 800341c:	4013      	ands	r3, r2
 800341e:	2b0c      	cmp	r3, #12
 8003420:	d014      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x40>
 8003422:	d900      	bls.n	8003426 <HAL_RCC_GetSysClockFreq+0x1a>
 8003424:	e07b      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x112>
 8003426:	2b04      	cmp	r3, #4
 8003428:	d002      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x24>
 800342a:	2b08      	cmp	r3, #8
 800342c:	d00b      	beq.n	8003446 <HAL_RCC_GetSysClockFreq+0x3a>
 800342e:	e076      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003430:	4b44      	ldr	r3, [pc, #272]	; (8003544 <HAL_RCC_GetSysClockFreq+0x138>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2210      	movs	r2, #16
 8003436:	4013      	ands	r3, r2
 8003438:	d002      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800343a:	4b43      	ldr	r3, [pc, #268]	; (8003548 <HAL_RCC_GetSysClockFreq+0x13c>)
 800343c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800343e:	e07c      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003440:	4b42      	ldr	r3, [pc, #264]	; (800354c <HAL_RCC_GetSysClockFreq+0x140>)
 8003442:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003444:	e079      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003446:	4b42      	ldr	r3, [pc, #264]	; (8003550 <HAL_RCC_GetSysClockFreq+0x144>)
 8003448:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800344a:	e076      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	0c9a      	lsrs	r2, r3, #18
 8003450:	230f      	movs	r3, #15
 8003452:	401a      	ands	r2, r3
 8003454:	4b3f      	ldr	r3, [pc, #252]	; (8003554 <HAL_RCC_GetSysClockFreq+0x148>)
 8003456:	5c9b      	ldrb	r3, [r3, r2]
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	0d9a      	lsrs	r2, r3, #22
 800345e:	2303      	movs	r3, #3
 8003460:	4013      	ands	r3, r2
 8003462:	3301      	adds	r3, #1
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003466:	4b37      	ldr	r3, [pc, #220]	; (8003544 <HAL_RCC_GetSysClockFreq+0x138>)
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	025b      	lsls	r3, r3, #9
 800346e:	4013      	ands	r3, r2
 8003470:	d01a      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	4a35      	ldr	r2, [pc, #212]	; (8003550 <HAL_RCC_GetSysClockFreq+0x144>)
 800347c:	2300      	movs	r3, #0
 800347e:	69b8      	ldr	r0, [r7, #24]
 8003480:	69f9      	ldr	r1, [r7, #28]
 8003482:	f7fc feed 	bl	8000260 <__aeabi_lmul>
 8003486:	0002      	movs	r2, r0
 8003488:	000b      	movs	r3, r1
 800348a:	0010      	movs	r0, r2
 800348c:	0019      	movs	r1, r3
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f7fc fec1 	bl	8000220 <__aeabi_uldivmod>
 800349e:	0002      	movs	r2, r0
 80034a0:	000b      	movs	r3, r1
 80034a2:	0013      	movs	r3, r2
 80034a4:	637b      	str	r3, [r7, #52]	; 0x34
 80034a6:	e037      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034a8:	4b26      	ldr	r3, [pc, #152]	; (8003544 <HAL_RCC_GetSysClockFreq+0x138>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2210      	movs	r2, #16
 80034ae:	4013      	ands	r3, r2
 80034b0:	d01a      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	4a23      	ldr	r2, [pc, #140]	; (8003548 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034bc:	2300      	movs	r3, #0
 80034be:	68b8      	ldr	r0, [r7, #8]
 80034c0:	68f9      	ldr	r1, [r7, #12]
 80034c2:	f7fc fecd 	bl	8000260 <__aeabi_lmul>
 80034c6:	0002      	movs	r2, r0
 80034c8:	000b      	movs	r3, r1
 80034ca:	0010      	movs	r0, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f7fc fea1 	bl	8000220 <__aeabi_uldivmod>
 80034de:	0002      	movs	r2, r0
 80034e0:	000b      	movs	r3, r1
 80034e2:	0013      	movs	r3, r2
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
 80034e6:	e017      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	0018      	movs	r0, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	0019      	movs	r1, r3
 80034f0:	4a16      	ldr	r2, [pc, #88]	; (800354c <HAL_RCC_GetSysClockFreq+0x140>)
 80034f2:	2300      	movs	r3, #0
 80034f4:	f7fc feb4 	bl	8000260 <__aeabi_lmul>
 80034f8:	0002      	movs	r2, r0
 80034fa:	000b      	movs	r3, r1
 80034fc:	0010      	movs	r0, r2
 80034fe:	0019      	movs	r1, r3
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	001c      	movs	r4, r3
 8003504:	2300      	movs	r3, #0
 8003506:	001d      	movs	r5, r3
 8003508:	0022      	movs	r2, r4
 800350a:	002b      	movs	r3, r5
 800350c:	f7fc fe88 	bl	8000220 <__aeabi_uldivmod>
 8003510:	0002      	movs	r2, r0
 8003512:	000b      	movs	r3, r1
 8003514:	0013      	movs	r3, r2
 8003516:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800351c:	e00d      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_GetSysClockFreq+0x138>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	0b5b      	lsrs	r3, r3, #13
 8003524:	2207      	movs	r2, #7
 8003526:	4013      	ands	r3, r2
 8003528:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	3301      	adds	r3, #1
 800352e:	2280      	movs	r2, #128	; 0x80
 8003530:	0212      	lsls	r2, r2, #8
 8003532:	409a      	lsls	r2, r3
 8003534:	0013      	movs	r3, r2
 8003536:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003538:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b00e      	add	sp, #56	; 0x38
 8003542:	bdb0      	pop	{r4, r5, r7, pc}
 8003544:	40021000 	.word	0x40021000
 8003548:	003d0900 	.word	0x003d0900
 800354c:	00f42400 	.word	0x00f42400
 8003550:	007a1200 	.word	0x007a1200
 8003554:	08007fe0 	.word	0x08007fe0

08003558 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003560:	2317      	movs	r3, #23
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2220      	movs	r2, #32
 800356e:	4013      	ands	r3, r2
 8003570:	d106      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	4013      	ands	r3, r2
 800357c:	d100      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800357e:	e104      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003580:	4bb1      	ldr	r3, [pc, #708]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	055b      	lsls	r3, r3, #21
 8003588:	4013      	ands	r3, r2
 800358a:	d10a      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358c:	4bae      	ldr	r3, [pc, #696]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800358e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003590:	4bad      	ldr	r3, [pc, #692]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003592:	2180      	movs	r1, #128	; 0x80
 8003594:	0549      	lsls	r1, r1, #21
 8003596:	430a      	orrs	r2, r1
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800359a:	2317      	movs	r3, #23
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4baa      	ldr	r3, [pc, #680]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4013      	ands	r3, r2
 80035ac:	d11a      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4ba7      	ldr	r3, [pc, #668]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4ba6      	ldr	r3, [pc, #664]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035b4:	2180      	movs	r1, #128	; 0x80
 80035b6:	0049      	lsls	r1, r1, #1
 80035b8:	430a      	orrs	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035bc:	f7fd f932 	bl	8000824 <HAL_GetTick>
 80035c0:	0003      	movs	r3, r0
 80035c2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	e008      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c6:	f7fd f92d 	bl	8000824 <HAL_GetTick>
 80035ca:	0002      	movs	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b64      	cmp	r3, #100	; 0x64
 80035d2:	d901      	bls.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e133      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	4b9c      	ldr	r3, [pc, #624]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4013      	ands	r3, r2
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80035e4:	4b98      	ldr	r3, [pc, #608]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	23c0      	movs	r3, #192	; 0xc0
 80035ea:	039b      	lsls	r3, r3, #14
 80035ec:	4013      	ands	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	23c0      	movs	r3, #192	; 0xc0
 80035f6:	039b      	lsls	r3, r3, #14
 80035f8:	4013      	ands	r3, r2
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d107      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	23c0      	movs	r3, #192	; 0xc0
 8003606:	039b      	lsls	r3, r3, #14
 8003608:	4013      	ands	r3, r2
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	429a      	cmp	r2, r3
 800360e:	d013      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	23c0      	movs	r3, #192	; 0xc0
 8003616:	029b      	lsls	r3, r3, #10
 8003618:	401a      	ands	r2, r3
 800361a:	23c0      	movs	r3, #192	; 0xc0
 800361c:	029b      	lsls	r3, r3, #10
 800361e:	429a      	cmp	r2, r3
 8003620:	d10a      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003622:	4b89      	ldr	r3, [pc, #548]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	029b      	lsls	r3, r3, #10
 800362a:	401a      	ands	r2, r3
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	029b      	lsls	r3, r3, #10
 8003630:	429a      	cmp	r2, r3
 8003632:	d101      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e103      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003638:	4b83      	ldr	r3, [pc, #524]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800363a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800363c:	23c0      	movs	r3, #192	; 0xc0
 800363e:	029b      	lsls	r3, r3, #10
 8003640:	4013      	ands	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d049      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x186>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	23c0      	movs	r3, #192	; 0xc0
 8003650:	029b      	lsls	r3, r3, #10
 8003652:	4013      	ands	r3, r2
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	429a      	cmp	r2, r3
 8003658:	d004      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2220      	movs	r2, #32
 8003660:	4013      	ands	r3, r2
 8003662:	d10d      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	23c0      	movs	r3, #192	; 0xc0
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	4013      	ands	r3, r2
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	429a      	cmp	r2, r3
 8003672:	d034      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	4013      	ands	r3, r2
 800367e:	d02e      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003680:	4b71      	ldr	r3, [pc, #452]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003684:	4a72      	ldr	r2, [pc, #456]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003686:	4013      	ands	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800368a:	4b6f      	ldr	r3, [pc, #444]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800368c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800368e:	4b6e      	ldr	r3, [pc, #440]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003690:	2180      	movs	r1, #128	; 0x80
 8003692:	0309      	lsls	r1, r1, #12
 8003694:	430a      	orrs	r2, r1
 8003696:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003698:	4b6b      	ldr	r3, [pc, #428]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800369a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800369c:	4b6a      	ldr	r3, [pc, #424]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800369e:	496d      	ldr	r1, [pc, #436]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80036a0:	400a      	ands	r2, r1
 80036a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80036a4:	4b68      	ldr	r3, [pc, #416]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4013      	ands	r3, r2
 80036b2:	d014      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fd f8b6 	bl	8000824 <HAL_GetTick>
 80036b8:	0003      	movs	r3, r0
 80036ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036bc:	e009      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fd f8b1 	bl	8000824 <HAL_GetTick>
 80036c2:	0002      	movs	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	4a63      	ldr	r2, [pc, #396]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e0b6      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d2:	4b5d      	ldr	r3, [pc, #372]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4013      	ands	r3, r2
 80036dc:	d0ef      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4013      	ands	r3, r2
 80036e8:	d01f      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	23c0      	movs	r3, #192	; 0xc0
 80036f0:	029b      	lsls	r3, r3, #10
 80036f2:	401a      	ands	r2, r3
 80036f4:	23c0      	movs	r3, #192	; 0xc0
 80036f6:	029b      	lsls	r3, r3, #10
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d10c      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80036fc:	4b52      	ldr	r3, [pc, #328]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a56      	ldr	r2, [pc, #344]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003702:	4013      	ands	r3, r2
 8003704:	0019      	movs	r1, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	23c0      	movs	r3, #192	; 0xc0
 800370c:	039b      	lsls	r3, r3, #14
 800370e:	401a      	ands	r2, r3
 8003710:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003712:	430a      	orrs	r2, r1
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003718:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	23c0      	movs	r3, #192	; 0xc0
 8003720:	029b      	lsls	r3, r3, #10
 8003722:	401a      	ands	r2, r3
 8003724:	4b48      	ldr	r3, [pc, #288]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003726:	430a      	orrs	r2, r1
 8003728:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2220      	movs	r2, #32
 8003730:	4013      	ands	r3, r2
 8003732:	d01f      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	23c0      	movs	r3, #192	; 0xc0
 800373a:	029b      	lsls	r3, r3, #10
 800373c:	401a      	ands	r2, r3
 800373e:	23c0      	movs	r3, #192	; 0xc0
 8003740:	029b      	lsls	r3, r3, #10
 8003742:	429a      	cmp	r2, r3
 8003744:	d10c      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003746:	4b40      	ldr	r3, [pc, #256]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a44      	ldr	r2, [pc, #272]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800374c:	4013      	ands	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	23c0      	movs	r3, #192	; 0xc0
 8003756:	039b      	lsls	r3, r3, #14
 8003758:	401a      	ands	r2, r3
 800375a:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	4b39      	ldr	r3, [pc, #228]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003762:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	23c0      	movs	r3, #192	; 0xc0
 800376a:	029b      	lsls	r3, r3, #10
 800376c:	401a      	ands	r2, r3
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003770:	430a      	orrs	r2, r1
 8003772:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003774:	2317      	movs	r3, #23
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377e:	4b32      	ldr	r3, [pc, #200]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003782:	4b31      	ldr	r3, [pc, #196]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003784:	4936      	ldr	r1, [pc, #216]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003786:	400a      	ands	r2, r1
 8003788:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2201      	movs	r2, #1
 8003790:	4013      	ands	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003794:	4b2c      	ldr	r3, [pc, #176]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003798:	2203      	movs	r2, #3
 800379a:	4393      	bics	r3, r2
 800379c:	0019      	movs	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037a4:	430a      	orrs	r2, r1
 80037a6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2202      	movs	r2, #2
 80037ae:	4013      	ands	r3, r2
 80037b0:	d009      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b2:	4b25      	ldr	r3, [pc, #148]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	220c      	movs	r2, #12
 80037b8:	4393      	bics	r3, r2
 80037ba:	0019      	movs	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037c2:	430a      	orrs	r2, r1
 80037c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2204      	movs	r2, #4
 80037cc:	4013      	ands	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d4:	4a23      	ldr	r2, [pc, #140]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037e0:	430a      	orrs	r2, r1
 80037e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2208      	movs	r2, #8
 80037ea:	4013      	ands	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f2:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037fe:	430a      	orrs	r2, r1
 8003800:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2240      	movs	r2, #64	; 0x40
 8003808:	4013      	ands	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800380c:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800380e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003810:	4a16      	ldr	r2, [pc, #88]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003812:	4013      	ands	r3, r2
 8003814:	0019      	movs	r1, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1a      	ldr	r2, [r3, #32]
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800381c:	430a      	orrs	r2, r1
 800381e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2280      	movs	r2, #128	; 0x80
 8003826:	4013      	ands	r3, r2
 8003828:	d009      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	4a10      	ldr	r2, [pc, #64]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003830:	4013      	ands	r3, r2
 8003832:	0019      	movs	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800383a:	430a      	orrs	r2, r1
 800383c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b006      	add	sp, #24
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	40007000 	.word	0x40007000
 8003850:	fffcffff 	.word	0xfffcffff
 8003854:	fff7ffff 	.word	0xfff7ffff
 8003858:	00001388 	.word	0x00001388
 800385c:	ffcfffff 	.word	0xffcfffff
 8003860:	efffffff 	.word	0xefffffff
 8003864:	fffff3ff 	.word	0xfffff3ff
 8003868:	ffffcfff 	.word	0xffffcfff
 800386c:	fbffffff 	.word	0xfbffffff
 8003870:	fff3ffff 	.word	0xfff3ffff

08003874 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2244      	movs	r2, #68	; 0x44
 8003880:	2100      	movs	r1, #0
 8003882:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <USB_EnableGlobalInt+0x28>)
 8003886:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	b299      	uxth	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	b004      	add	sp, #16
 800389a:	bd80      	pop	{r7, pc}
 800389c:	0000bf80 	.word	0x0000bf80

080038a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <USB_DisableGlobalInt+0x30>)
 80038aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2240      	movs	r2, #64	; 0x40
 80038b0:	5a9b      	ldrh	r3, [r3, r2]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	b292      	uxth	r2, r2
 80038b8:	43d2      	mvns	r2, r2
 80038ba:	b292      	uxth	r2, r2
 80038bc:	4013      	ands	r3, r2
 80038be:	b299      	uxth	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b004      	add	sp, #16
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	0000bf80 	.word	0x0000bf80

080038d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038d4:	b084      	sub	sp, #16
 80038d6:	b590      	push	{r4, r7, lr}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	2004      	movs	r0, #4
 80038e0:	2410      	movs	r4, #16
 80038e2:	1900      	adds	r0, r0, r4
 80038e4:	2408      	movs	r4, #8
 80038e6:	46a4      	mov	ip, r4
 80038e8:	44bc      	add	ip, r7
 80038ea:	4460      	add	r0, ip
 80038ec:	6001      	str	r1, [r0, #0]
 80038ee:	6042      	str	r2, [r0, #4]
 80038f0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2240      	movs	r2, #64	; 0x40
 80038f6:	2101      	movs	r1, #1
 80038f8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2240      	movs	r2, #64	; 0x40
 80038fe:	2100      	movs	r1, #0
 8003900:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2244      	movs	r2, #68	; 0x44
 8003906:	2100      	movs	r1, #0
 8003908:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2250      	movs	r2, #80	; 0x50
 800390e:	2100      	movs	r1, #0
 8003910:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	b003      	add	sp, #12
 800391a:	bc90      	pop	{r4, r7}
 800391c:	bc08      	pop	{r3}
 800391e:	b004      	add	sp, #16
 8003920:	4718      	bx	r3
	...

08003924 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b09c      	sub	sp, #112	; 0x70
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800392e:	236f      	movs	r3, #111	; 0x6f
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	18d3      	adds	r3, r2, r3
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b29a      	uxth	r2, r3
 8003944:	236c      	movs	r3, #108	; 0x6c
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	49a3      	ldr	r1, [pc, #652]	; (8003bd8 <USB_ActivateEndpoint+0x2b4>)
 800394a:	400a      	ands	r2, r1
 800394c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	78db      	ldrb	r3, [r3, #3]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d017      	beq.n	8003986 <USB_ActivateEndpoint+0x62>
 8003956:	dc28      	bgt.n	80039aa <USB_ActivateEndpoint+0x86>
 8003958:	2b02      	cmp	r3, #2
 800395a:	d00e      	beq.n	800397a <USB_ActivateEndpoint+0x56>
 800395c:	dc25      	bgt.n	80039aa <USB_ActivateEndpoint+0x86>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <USB_ActivateEndpoint+0x44>
 8003962:	2b01      	cmp	r3, #1
 8003964:	d018      	beq.n	8003998 <USB_ActivateEndpoint+0x74>
 8003966:	e020      	b.n	80039aa <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003968:	226c      	movs	r2, #108	; 0x6c
 800396a:	18bb      	adds	r3, r7, r2
 800396c:	18ba      	adds	r2, r7, r2
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	0089      	lsls	r1, r1, #2
 8003974:	430a      	orrs	r2, r1
 8003976:	801a      	strh	r2, [r3, #0]
      break;
 8003978:	e01c      	b.n	80039b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800397a:	226c      	movs	r2, #108	; 0x6c
 800397c:	18bb      	adds	r3, r7, r2
 800397e:	18ba      	adds	r2, r7, r2
 8003980:	8812      	ldrh	r2, [r2, #0]
 8003982:	801a      	strh	r2, [r3, #0]
      break;
 8003984:	e016      	b.n	80039b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003986:	226c      	movs	r2, #108	; 0x6c
 8003988:	18bb      	adds	r3, r7, r2
 800398a:	18ba      	adds	r2, r7, r2
 800398c:	8812      	ldrh	r2, [r2, #0]
 800398e:	21c0      	movs	r1, #192	; 0xc0
 8003990:	00c9      	lsls	r1, r1, #3
 8003992:	430a      	orrs	r2, r1
 8003994:	801a      	strh	r2, [r3, #0]
      break;
 8003996:	e00d      	b.n	80039b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003998:	226c      	movs	r2, #108	; 0x6c
 800399a:	18bb      	adds	r3, r7, r2
 800399c:	18ba      	adds	r2, r7, r2
 800399e:	8812      	ldrh	r2, [r2, #0]
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	00c9      	lsls	r1, r1, #3
 80039a4:	430a      	orrs	r2, r1
 80039a6:	801a      	strh	r2, [r3, #0]
      break;
 80039a8:	e004      	b.n	80039b4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80039aa:	236f      	movs	r3, #111	; 0x6f
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]
      break;
 80039b2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	18d3      	adds	r3, r2, r3
 80039be:	226c      	movs	r2, #108	; 0x6c
 80039c0:	18ba      	adds	r2, r7, r2
 80039c2:	8812      	ldrh	r2, [r2, #0]
 80039c4:	4985      	ldr	r1, [pc, #532]	; (8003bdc <USB_ActivateEndpoint+0x2b8>)
 80039c6:	430a      	orrs	r2, r1
 80039c8:	b292      	uxth	r2, r2
 80039ca:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	18d3      	adds	r3, r2, r3
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	b21b      	sxth	r3, r3
 80039dc:	4a80      	ldr	r2, [pc, #512]	; (8003be0 <USB_ActivateEndpoint+0x2bc>)
 80039de:	4013      	ands	r3, r2
 80039e0:	b21a      	sxth	r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b21b      	sxth	r3, r3
 80039e8:	4313      	orrs	r3, r2
 80039ea:	b21a      	sxth	r2, r3
 80039ec:	2166      	movs	r1, #102	; 0x66
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	18d3      	adds	r3, r2, r3
 80039fc:	187a      	adds	r2, r7, r1
 80039fe:	8812      	ldrh	r2, [r2, #0]
 8003a00:	4976      	ldr	r1, [pc, #472]	; (8003bdc <USB_ActivateEndpoint+0x2b8>)
 8003a02:	430a      	orrs	r2, r1
 8003a04:	b292      	uxth	r2, r2
 8003a06:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	7b1b      	ldrb	r3, [r3, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d000      	beq.n	8003a12 <USB_ActivateEndpoint+0xee>
 8003a10:	e178      	b.n	8003d04 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	785b      	ldrb	r3, [r3, #1]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d100      	bne.n	8003a1c <USB_ActivateEndpoint+0xf8>
 8003a1a:	e07a      	b.n	8003b12 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2250      	movs	r2, #80	; 0x50
 8003a24:	5a9b      	ldrh	r3, [r3, r2]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	001a      	movs	r2, r3
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	189b      	adds	r3, r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	00da      	lsls	r2, r3, #3
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	18d3      	adds	r3, r2, r3
 8003a3a:	2280      	movs	r2, #128	; 0x80
 8003a3c:	00d2      	lsls	r2, r2, #3
 8003a3e:	4694      	mov	ip, r2
 8003a40:	4463      	add	r3, ip
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	88db      	ldrh	r3, [r3, #6]
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	18db      	adds	r3, r3, r3
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	18d2      	adds	r2, r2, r3
 8003a5e:	2112      	movs	r1, #18
 8003a60:	187b      	adds	r3, r7, r1
 8003a62:	8812      	ldrh	r2, [r2, #0]
 8003a64:	801a      	strh	r2, [r3, #0]
 8003a66:	187b      	adds	r3, r7, r1
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	2240      	movs	r2, #64	; 0x40
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d016      	beq.n	8003a9e <USB_ActivateEndpoint+0x17a>
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	18d3      	adds	r3, r2, r3
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	2010      	movs	r0, #16
 8003a80:	183b      	adds	r3, r7, r0
 8003a82:	4957      	ldr	r1, [pc, #348]	; (8003be0 <USB_ActivateEndpoint+0x2bc>)
 8003a84:	400a      	ands	r2, r1
 8003a86:	801a      	strh	r2, [r3, #0]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	18d3      	adds	r3, r2, r3
 8003a92:	183a      	adds	r2, r7, r0
 8003a94:	8812      	ldrh	r2, [r2, #0]
 8003a96:	4953      	ldr	r1, [pc, #332]	; (8003be4 <USB_ActivateEndpoint+0x2c0>)
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	b292      	uxth	r2, r2
 8003a9c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	78db      	ldrb	r3, [r3, #3]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d01d      	beq.n	8003ae2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	18d3      	adds	r3, r2, r3
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	200c      	movs	r0, #12
 8003ab6:	183b      	adds	r3, r7, r0
 8003ab8:	494b      	ldr	r1, [pc, #300]	; (8003be8 <USB_ActivateEndpoint+0x2c4>)
 8003aba:	400a      	ands	r2, r1
 8003abc:	801a      	strh	r2, [r3, #0]
 8003abe:	183b      	adds	r3, r7, r0
 8003ac0:	183a      	adds	r2, r7, r0
 8003ac2:	8812      	ldrh	r2, [r2, #0]
 8003ac4:	2120      	movs	r1, #32
 8003ac6:	404a      	eors	r2, r1
 8003ac8:	801a      	strh	r2, [r3, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	18d3      	adds	r3, r2, r3
 8003ad4:	183a      	adds	r2, r7, r0
 8003ad6:	8812      	ldrh	r2, [r2, #0]
 8003ad8:	4940      	ldr	r1, [pc, #256]	; (8003bdc <USB_ActivateEndpoint+0x2b8>)
 8003ada:	430a      	orrs	r2, r1
 8003adc:	b292      	uxth	r2, r2
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	e2b4      	b.n	800404c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	18d3      	adds	r3, r2, r3
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	200e      	movs	r0, #14
 8003af2:	183b      	adds	r3, r7, r0
 8003af4:	493c      	ldr	r1, [pc, #240]	; (8003be8 <USB_ActivateEndpoint+0x2c4>)
 8003af6:	400a      	ands	r2, r1
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	18d3      	adds	r3, r2, r3
 8003b04:	183a      	adds	r2, r7, r0
 8003b06:	8812      	ldrh	r2, [r2, #0]
 8003b08:	4934      	ldr	r1, [pc, #208]	; (8003bdc <USB_ActivateEndpoint+0x2b8>)
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	b292      	uxth	r2, r2
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	e29c      	b.n	800404c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	633b      	str	r3, [r7, #48]	; 0x30
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2250      	movs	r2, #80	; 0x50
 8003b1a:	5a9b      	ldrh	r3, [r3, r2]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	001a      	movs	r2, r3
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	189b      	adds	r3, r3, r2
 8003b24:	633b      	str	r3, [r7, #48]	; 0x30
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	00da      	lsls	r2, r3, #3
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	18d3      	adds	r3, r2, r3
 8003b30:	4a2e      	ldr	r2, [pc, #184]	; (8003bec <USB_ActivateEndpoint+0x2c8>)
 8003b32:	4694      	mov	ip, r2
 8003b34:	4463      	add	r3, ip
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	88db      	ldrh	r3, [r3, #6]
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	18db      	adds	r3, r3, r3
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2250      	movs	r2, #80	; 0x50
 8003b50:	5a9b      	ldrh	r3, [r3, r2]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	001a      	movs	r2, r3
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	189b      	adds	r3, r3, r2
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	00da      	lsls	r2, r3, #3
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	18d3      	adds	r3, r2, r3
 8003b66:	4a22      	ldr	r2, [pc, #136]	; (8003bf0 <USB_ActivateEndpoint+0x2cc>)
 8003b68:	4694      	mov	ip, r2
 8003b6a:	4463      	add	r3, ip
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	059b      	lsls	r3, r3, #22
 8003b76:	0d9b      	lsrs	r3, r3, #22
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	801a      	strh	r2, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b3e      	cmp	r3, #62	; 0x3e
 8003b84:	d91a      	bls.n	8003bbc <USB_ActivateEndpoint+0x298>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	221f      	movs	r2, #31
 8003b94:	4013      	ands	r3, r2
 8003b96:	d102      	bne.n	8003b9e <USB_ActivateEndpoint+0x27a>
 8003b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	029b      	lsls	r3, r3, #10
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	4313      	orrs	r3, r2
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4a10      	ldr	r2, [pc, #64]	; (8003bf4 <USB_ActivateEndpoint+0x2d0>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	801a      	strh	r2, [r3, #0]
 8003bba:	e034      	b.n	8003c26 <USB_ActivateEndpoint+0x302>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d119      	bne.n	8003bf8 <USB_ActivateEndpoint+0x2d4>
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <USB_ActivateEndpoint+0x2d0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	801a      	strh	r2, [r3, #0]
 8003bd4:	e027      	b.n	8003c26 <USB_ActivateEndpoint+0x302>
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	ffff898f 	.word	0xffff898f
 8003bdc:	ffff8080 	.word	0xffff8080
 8003be0:	ffff8f8f 	.word	0xffff8f8f
 8003be4:	ffff80c0 	.word	0xffff80c0
 8003be8:	ffff8fbf 	.word	0xffff8fbf
 8003bec:	00000404 	.word	0x00000404
 8003bf0:	00000406 	.word	0x00000406
 8003bf4:	ffff8000 	.word	0xffff8000
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2201      	movs	r2, #1
 8003c06:	4013      	ands	r3, r2
 8003c08:	d002      	beq.n	8003c10 <USB_ActivateEndpoint+0x2ec>
 8003c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	029b      	lsls	r3, r3, #10
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	18d2      	adds	r2, r2, r3
 8003c30:	2122      	movs	r1, #34	; 0x22
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	8812      	ldrh	r2, [r2, #0]
 8003c36:	801a      	strh	r2, [r3, #0]
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	881a      	ldrh	r2, [r3, #0]
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	01db      	lsls	r3, r3, #7
 8003c40:	4013      	ands	r3, r2
 8003c42:	d016      	beq.n	8003c72 <USB_ActivateEndpoint+0x34e>
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	18d3      	adds	r3, r2, r3
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	2020      	movs	r0, #32
 8003c54:	183b      	adds	r3, r7, r0
 8003c56:	49dd      	ldr	r1, [pc, #884]	; (8003fcc <USB_ActivateEndpoint+0x6a8>)
 8003c58:	400a      	ands	r2, r1
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	18d3      	adds	r3, r2, r3
 8003c66:	183a      	adds	r2, r7, r0
 8003c68:	8812      	ldrh	r2, [r2, #0]
 8003c6a:	49d9      	ldr	r1, [pc, #868]	; (8003fd0 <USB_ActivateEndpoint+0x6ac>)
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	b292      	uxth	r2, r2
 8003c70:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d125      	bne.n	8003cc6 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	18d3      	adds	r3, r2, r3
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	201c      	movs	r0, #28
 8003c8a:	183b      	adds	r3, r7, r0
 8003c8c:	49d1      	ldr	r1, [pc, #836]	; (8003fd4 <USB_ActivateEndpoint+0x6b0>)
 8003c8e:	400a      	ands	r2, r1
 8003c90:	801a      	strh	r2, [r3, #0]
 8003c92:	183b      	adds	r3, r7, r0
 8003c94:	183a      	adds	r2, r7, r0
 8003c96:	8812      	ldrh	r2, [r2, #0]
 8003c98:	2180      	movs	r1, #128	; 0x80
 8003c9a:	0149      	lsls	r1, r1, #5
 8003c9c:	404a      	eors	r2, r1
 8003c9e:	801a      	strh	r2, [r3, #0]
 8003ca0:	183b      	adds	r3, r7, r0
 8003ca2:	183a      	adds	r2, r7, r0
 8003ca4:	8812      	ldrh	r2, [r2, #0]
 8003ca6:	2180      	movs	r1, #128	; 0x80
 8003ca8:	0189      	lsls	r1, r1, #6
 8003caa:	404a      	eors	r2, r1
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	18d3      	adds	r3, r2, r3
 8003cb8:	183a      	adds	r2, r7, r0
 8003cba:	8812      	ldrh	r2, [r2, #0]
 8003cbc:	49c6      	ldr	r1, [pc, #792]	; (8003fd8 <USB_ActivateEndpoint+0x6b4>)
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	b292      	uxth	r2, r2
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	e1c2      	b.n	800404c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	18d3      	adds	r3, r2, r3
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	201e      	movs	r0, #30
 8003cd6:	183b      	adds	r3, r7, r0
 8003cd8:	49be      	ldr	r1, [pc, #760]	; (8003fd4 <USB_ActivateEndpoint+0x6b0>)
 8003cda:	400a      	ands	r2, r1
 8003cdc:	801a      	strh	r2, [r3, #0]
 8003cde:	183b      	adds	r3, r7, r0
 8003ce0:	183a      	adds	r2, r7, r0
 8003ce2:	8812      	ldrh	r2, [r2, #0]
 8003ce4:	2180      	movs	r1, #128	; 0x80
 8003ce6:	0189      	lsls	r1, r1, #6
 8003ce8:	404a      	eors	r2, r1
 8003cea:	801a      	strh	r2, [r3, #0]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	18d3      	adds	r3, r2, r3
 8003cf6:	183a      	adds	r2, r7, r0
 8003cf8:	8812      	ldrh	r2, [r2, #0]
 8003cfa:	49b7      	ldr	r1, [pc, #732]	; (8003fd8 <USB_ActivateEndpoint+0x6b4>)
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	b292      	uxth	r2, r2
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	e1a3      	b.n	800404c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	78db      	ldrb	r3, [r3, #3]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d117      	bne.n	8003d3c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	18d3      	adds	r3, r2, r3
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	2062      	movs	r0, #98	; 0x62
 8003d1c:	183b      	adds	r3, r7, r0
 8003d1e:	49ab      	ldr	r1, [pc, #684]	; (8003fcc <USB_ActivateEndpoint+0x6a8>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	801a      	strh	r2, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	18d3      	adds	r3, r2, r3
 8003d2e:	183a      	adds	r2, r7, r0
 8003d30:	8812      	ldrh	r2, [r2, #0]
 8003d32:	49aa      	ldr	r1, [pc, #680]	; (8003fdc <USB_ActivateEndpoint+0x6b8>)
 8003d34:	430a      	orrs	r2, r1
 8003d36:	b292      	uxth	r2, r2
 8003d38:	801a      	strh	r2, [r3, #0]
 8003d3a:	e016      	b.n	8003d6a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	18d3      	adds	r3, r2, r3
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	2064      	movs	r0, #100	; 0x64
 8003d4c:	183b      	adds	r3, r7, r0
 8003d4e:	49a4      	ldr	r1, [pc, #656]	; (8003fe0 <USB_ActivateEndpoint+0x6bc>)
 8003d50:	400a      	ands	r2, r1
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	18d3      	adds	r3, r2, r3
 8003d5e:	183a      	adds	r2, r7, r0
 8003d60:	8812      	ldrh	r2, [r2, #0]
 8003d62:	499d      	ldr	r1, [pc, #628]	; (8003fd8 <USB_ActivateEndpoint+0x6b4>)
 8003d64:	430a      	orrs	r2, r1
 8003d66:	b292      	uxth	r2, r2
 8003d68:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2250      	movs	r2, #80	; 0x50
 8003d72:	5a9b      	ldrh	r3, [r3, r2]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	001a      	movs	r2, r3
 8003d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d7a:	189b      	adds	r3, r3, r2
 8003d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	00da      	lsls	r2, r3, #3
 8003d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d86:	18d3      	adds	r3, r2, r3
 8003d88:	2280      	movs	r2, #128	; 0x80
 8003d8a:	00d2      	lsls	r2, r2, #3
 8003d8c:	4694      	mov	ip, r2
 8003d8e:	4463      	add	r3, ip
 8003d90:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	891b      	ldrh	r3, [r3, #8]
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	18db      	adds	r3, r3, r3
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003da0:	801a      	strh	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	657b      	str	r3, [r7, #84]	; 0x54
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2250      	movs	r2, #80	; 0x50
 8003daa:	5a9b      	ldrh	r3, [r3, r2]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	001a      	movs	r2, r3
 8003db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003db2:	189b      	adds	r3, r3, r2
 8003db4:	657b      	str	r3, [r7, #84]	; 0x54
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	00da      	lsls	r2, r3, #3
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dbe:	18d3      	adds	r3, r2, r3
 8003dc0:	4a88      	ldr	r2, [pc, #544]	; (8003fe4 <USB_ActivateEndpoint+0x6c0>)
 8003dc2:	4694      	mov	ip, r2
 8003dc4:	4463      	add	r3, ip
 8003dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	895b      	ldrh	r3, [r3, #10]
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	18db      	adds	r3, r3, r3
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	785b      	ldrb	r3, [r3, #1]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d000      	beq.n	8003de2 <USB_ActivateEndpoint+0x4be>
 8003de0:	e087      	b.n	8003ef2 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	18d2      	adds	r2, r2, r3
 8003dec:	2140      	movs	r1, #64	; 0x40
 8003dee:	187b      	adds	r3, r7, r1
 8003df0:	8812      	ldrh	r2, [r2, #0]
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	187b      	adds	r3, r7, r1
 8003df6:	881a      	ldrh	r2, [r3, #0]
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	01db      	lsls	r3, r3, #7
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d016      	beq.n	8003e2e <USB_ActivateEndpoint+0x50a>
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	18d3      	adds	r3, r2, r3
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	203e      	movs	r0, #62	; 0x3e
 8003e10:	183b      	adds	r3, r7, r0
 8003e12:	496e      	ldr	r1, [pc, #440]	; (8003fcc <USB_ActivateEndpoint+0x6a8>)
 8003e14:	400a      	ands	r2, r1
 8003e16:	801a      	strh	r2, [r3, #0]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	18d3      	adds	r3, r2, r3
 8003e22:	183a      	adds	r2, r7, r0
 8003e24:	8812      	ldrh	r2, [r2, #0]
 8003e26:	496a      	ldr	r1, [pc, #424]	; (8003fd0 <USB_ActivateEndpoint+0x6ac>)
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	b292      	uxth	r2, r2
 8003e2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	18d2      	adds	r2, r2, r3
 8003e38:	213c      	movs	r1, #60	; 0x3c
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	8812      	ldrh	r2, [r2, #0]
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	2240      	movs	r2, #64	; 0x40
 8003e46:	4013      	ands	r3, r2
 8003e48:	d016      	beq.n	8003e78 <USB_ActivateEndpoint+0x554>
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	18d3      	adds	r3, r2, r3
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	203a      	movs	r0, #58	; 0x3a
 8003e5a:	183b      	adds	r3, r7, r0
 8003e5c:	495b      	ldr	r1, [pc, #364]	; (8003fcc <USB_ActivateEndpoint+0x6a8>)
 8003e5e:	400a      	ands	r2, r1
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	18d3      	adds	r3, r2, r3
 8003e6c:	183a      	adds	r2, r7, r0
 8003e6e:	8812      	ldrh	r2, [r2, #0]
 8003e70:	495d      	ldr	r1, [pc, #372]	; (8003fe8 <USB_ActivateEndpoint+0x6c4>)
 8003e72:	430a      	orrs	r2, r1
 8003e74:	b292      	uxth	r2, r2
 8003e76:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	18d3      	adds	r3, r2, r3
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	2038      	movs	r0, #56	; 0x38
 8003e88:	183b      	adds	r3, r7, r0
 8003e8a:	4952      	ldr	r1, [pc, #328]	; (8003fd4 <USB_ActivateEndpoint+0x6b0>)
 8003e8c:	400a      	ands	r2, r1
 8003e8e:	801a      	strh	r2, [r3, #0]
 8003e90:	183b      	adds	r3, r7, r0
 8003e92:	183a      	adds	r2, r7, r0
 8003e94:	8812      	ldrh	r2, [r2, #0]
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	0149      	lsls	r1, r1, #5
 8003e9a:	404a      	eors	r2, r1
 8003e9c:	801a      	strh	r2, [r3, #0]
 8003e9e:	183b      	adds	r3, r7, r0
 8003ea0:	183a      	adds	r2, r7, r0
 8003ea2:	8812      	ldrh	r2, [r2, #0]
 8003ea4:	2180      	movs	r1, #128	; 0x80
 8003ea6:	0189      	lsls	r1, r1, #6
 8003ea8:	404a      	eors	r2, r1
 8003eaa:	801a      	strh	r2, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	18d3      	adds	r3, r2, r3
 8003eb6:	183a      	adds	r2, r7, r0
 8003eb8:	8812      	ldrh	r2, [r2, #0]
 8003eba:	4947      	ldr	r1, [pc, #284]	; (8003fd8 <USB_ActivateEndpoint+0x6b4>)
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	b292      	uxth	r2, r2
 8003ec0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	18d3      	adds	r3, r2, r3
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	2036      	movs	r0, #54	; 0x36
 8003ed2:	183b      	adds	r3, r7, r0
 8003ed4:	4945      	ldr	r1, [pc, #276]	; (8003fec <USB_ActivateEndpoint+0x6c8>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	801a      	strh	r2, [r3, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	18d3      	adds	r3, r2, r3
 8003ee4:	183a      	adds	r2, r7, r0
 8003ee6:	8812      	ldrh	r2, [r2, #0]
 8003ee8:	493b      	ldr	r1, [pc, #236]	; (8003fd8 <USB_ActivateEndpoint+0x6b4>)
 8003eea:	430a      	orrs	r2, r1
 8003eec:	b292      	uxth	r2, r2
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	e0ac      	b.n	800404c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	18d2      	adds	r2, r2, r3
 8003efc:	214e      	movs	r1, #78	; 0x4e
 8003efe:	187b      	adds	r3, r7, r1
 8003f00:	8812      	ldrh	r2, [r2, #0]
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	881a      	ldrh	r2, [r3, #0]
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	01db      	lsls	r3, r3, #7
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d016      	beq.n	8003f3e <USB_ActivateEndpoint+0x61a>
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	18d3      	adds	r3, r2, r3
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	204c      	movs	r0, #76	; 0x4c
 8003f20:	183b      	adds	r3, r7, r0
 8003f22:	492a      	ldr	r1, [pc, #168]	; (8003fcc <USB_ActivateEndpoint+0x6a8>)
 8003f24:	400a      	ands	r2, r1
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	18d3      	adds	r3, r2, r3
 8003f32:	183a      	adds	r2, r7, r0
 8003f34:	8812      	ldrh	r2, [r2, #0]
 8003f36:	4926      	ldr	r1, [pc, #152]	; (8003fd0 <USB_ActivateEndpoint+0x6ac>)
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	18d2      	adds	r2, r2, r3
 8003f48:	214a      	movs	r1, #74	; 0x4a
 8003f4a:	187b      	adds	r3, r7, r1
 8003f4c:	8812      	ldrh	r2, [r2, #0]
 8003f4e:	801a      	strh	r2, [r3, #0]
 8003f50:	187b      	adds	r3, r7, r1
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	2240      	movs	r2, #64	; 0x40
 8003f56:	4013      	ands	r3, r2
 8003f58:	d016      	beq.n	8003f88 <USB_ActivateEndpoint+0x664>
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	18d3      	adds	r3, r2, r3
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	2048      	movs	r0, #72	; 0x48
 8003f6a:	183b      	adds	r3, r7, r0
 8003f6c:	4917      	ldr	r1, [pc, #92]	; (8003fcc <USB_ActivateEndpoint+0x6a8>)
 8003f6e:	400a      	ands	r2, r1
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	18d3      	adds	r3, r2, r3
 8003f7c:	183a      	adds	r2, r7, r0
 8003f7e:	8812      	ldrh	r2, [r2, #0]
 8003f80:	4919      	ldr	r1, [pc, #100]	; (8003fe8 <USB_ActivateEndpoint+0x6c4>)
 8003f82:	430a      	orrs	r2, r1
 8003f84:	b292      	uxth	r2, r2
 8003f86:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	78db      	ldrb	r3, [r3, #3]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d02f      	beq.n	8003ff0 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	18d3      	adds	r3, r2, r3
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	2044      	movs	r0, #68	; 0x44
 8003fa0:	183b      	adds	r3, r7, r0
 8003fa2:	4912      	ldr	r1, [pc, #72]	; (8003fec <USB_ActivateEndpoint+0x6c8>)
 8003fa4:	400a      	ands	r2, r1
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	183b      	adds	r3, r7, r0
 8003faa:	183a      	adds	r2, r7, r0
 8003fac:	8812      	ldrh	r2, [r2, #0]
 8003fae:	2120      	movs	r1, #32
 8003fb0:	404a      	eors	r2, r1
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	18d3      	adds	r3, r2, r3
 8003fbe:	183a      	adds	r2, r7, r0
 8003fc0:	8812      	ldrh	r2, [r2, #0]
 8003fc2:	4905      	ldr	r1, [pc, #20]	; (8003fd8 <USB_ActivateEndpoint+0x6b4>)
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	b292      	uxth	r2, r2
 8003fc8:	801a      	strh	r2, [r3, #0]
 8003fca:	e028      	b.n	800401e <USB_ActivateEndpoint+0x6fa>
 8003fcc:	ffff8f8f 	.word	0xffff8f8f
 8003fd0:	ffffc080 	.word	0xffffc080
 8003fd4:	ffffbf8f 	.word	0xffffbf8f
 8003fd8:	ffff8080 	.word	0xffff8080
 8003fdc:	ffff8180 	.word	0xffff8180
 8003fe0:	ffff8e8f 	.word	0xffff8e8f
 8003fe4:	00000404 	.word	0x00000404
 8003fe8:	ffff80c0 	.word	0xffff80c0
 8003fec:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	18d3      	adds	r3, r2, r3
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	2046      	movs	r0, #70	; 0x46
 8004000:	183b      	adds	r3, r7, r0
 8004002:	4916      	ldr	r1, [pc, #88]	; (800405c <USB_ActivateEndpoint+0x738>)
 8004004:	400a      	ands	r2, r1
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	18d3      	adds	r3, r2, r3
 8004012:	183a      	adds	r2, r7, r0
 8004014:	8812      	ldrh	r2, [r2, #0]
 8004016:	4912      	ldr	r1, [pc, #72]	; (8004060 <USB_ActivateEndpoint+0x73c>)
 8004018:	430a      	orrs	r2, r1
 800401a:	b292      	uxth	r2, r2
 800401c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	18d3      	adds	r3, r2, r3
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29a      	uxth	r2, r3
 800402c:	2042      	movs	r0, #66	; 0x42
 800402e:	183b      	adds	r3, r7, r0
 8004030:	490c      	ldr	r1, [pc, #48]	; (8004064 <USB_ActivateEndpoint+0x740>)
 8004032:	400a      	ands	r2, r1
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	18d3      	adds	r3, r2, r3
 8004040:	183a      	adds	r2, r7, r0
 8004042:	8812      	ldrh	r2, [r2, #0]
 8004044:	4906      	ldr	r1, [pc, #24]	; (8004060 <USB_ActivateEndpoint+0x73c>)
 8004046:	430a      	orrs	r2, r1
 8004048:	b292      	uxth	r2, r2
 800404a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800404c:	236f      	movs	r3, #111	; 0x6f
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	781b      	ldrb	r3, [r3, #0]
}
 8004052:	0018      	movs	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	b01c      	add	sp, #112	; 0x70
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	ffff8fbf 	.word	0xffff8fbf
 8004060:	ffff8080 	.word	0xffff8080
 8004064:	ffffbf8f 	.word	0xffffbf8f

08004068 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08c      	sub	sp, #48	; 0x30
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	7b1b      	ldrb	r3, [r3, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d000      	beq.n	800407c <USB_DeactivateEndpoint+0x14>
 800407a:	e07e      	b.n	800417a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d03c      	beq.n	80040fe <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	18d2      	adds	r2, r2, r3
 800408e:	210c      	movs	r1, #12
 8004090:	187b      	adds	r3, r7, r1
 8004092:	8812      	ldrh	r2, [r2, #0]
 8004094:	801a      	strh	r2, [r3, #0]
 8004096:	187b      	adds	r3, r7, r1
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	2240      	movs	r2, #64	; 0x40
 800409c:	4013      	ands	r3, r2
 800409e:	d016      	beq.n	80040ce <USB_DeactivateEndpoint+0x66>
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	18d3      	adds	r3, r2, r3
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	200a      	movs	r0, #10
 80040b0:	183b      	adds	r3, r7, r0
 80040b2:	49c7      	ldr	r1, [pc, #796]	; (80043d0 <USB_DeactivateEndpoint+0x368>)
 80040b4:	400a      	ands	r2, r1
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	18d3      	adds	r3, r2, r3
 80040c2:	183a      	adds	r2, r7, r0
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	49c3      	ldr	r1, [pc, #780]	; (80043d4 <USB_DeactivateEndpoint+0x36c>)
 80040c8:	430a      	orrs	r2, r1
 80040ca:	b292      	uxth	r2, r2
 80040cc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	18d3      	adds	r3, r2, r3
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29a      	uxth	r2, r3
 80040dc:	2008      	movs	r0, #8
 80040de:	183b      	adds	r3, r7, r0
 80040e0:	49bd      	ldr	r1, [pc, #756]	; (80043d8 <USB_DeactivateEndpoint+0x370>)
 80040e2:	400a      	ands	r2, r1
 80040e4:	801a      	strh	r2, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	18d3      	adds	r3, r2, r3
 80040f0:	183a      	adds	r2, r7, r0
 80040f2:	8812      	ldrh	r2, [r2, #0]
 80040f4:	49b9      	ldr	r1, [pc, #740]	; (80043dc <USB_DeactivateEndpoint+0x374>)
 80040f6:	430a      	orrs	r2, r1
 80040f8:	b292      	uxth	r2, r2
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	e163      	b.n	80043c6 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	18d2      	adds	r2, r2, r3
 8004108:	2112      	movs	r1, #18
 800410a:	187b      	adds	r3, r7, r1
 800410c:	8812      	ldrh	r2, [r2, #0]
 800410e:	801a      	strh	r2, [r3, #0]
 8004110:	187b      	adds	r3, r7, r1
 8004112:	881a      	ldrh	r2, [r3, #0]
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	01db      	lsls	r3, r3, #7
 8004118:	4013      	ands	r3, r2
 800411a:	d016      	beq.n	800414a <USB_DeactivateEndpoint+0xe2>
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	18d3      	adds	r3, r2, r3
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b29a      	uxth	r2, r3
 800412a:	2010      	movs	r0, #16
 800412c:	183b      	adds	r3, r7, r0
 800412e:	49a8      	ldr	r1, [pc, #672]	; (80043d0 <USB_DeactivateEndpoint+0x368>)
 8004130:	400a      	ands	r2, r1
 8004132:	801a      	strh	r2, [r3, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	18d3      	adds	r3, r2, r3
 800413e:	183a      	adds	r2, r7, r0
 8004140:	8812      	ldrh	r2, [r2, #0]
 8004142:	49a7      	ldr	r1, [pc, #668]	; (80043e0 <USB_DeactivateEndpoint+0x378>)
 8004144:	430a      	orrs	r2, r1
 8004146:	b292      	uxth	r2, r2
 8004148:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	18d3      	adds	r3, r2, r3
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29a      	uxth	r2, r3
 8004158:	200e      	movs	r0, #14
 800415a:	183b      	adds	r3, r7, r0
 800415c:	49a1      	ldr	r1, [pc, #644]	; (80043e4 <USB_DeactivateEndpoint+0x37c>)
 800415e:	400a      	ands	r2, r1
 8004160:	801a      	strh	r2, [r3, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	18d3      	adds	r3, r2, r3
 800416c:	183a      	adds	r2, r7, r0
 800416e:	8812      	ldrh	r2, [r2, #0]
 8004170:	499a      	ldr	r1, [pc, #616]	; (80043dc <USB_DeactivateEndpoint+0x374>)
 8004172:	430a      	orrs	r2, r1
 8004174:	b292      	uxth	r2, r2
 8004176:	801a      	strh	r2, [r3, #0]
 8004178:	e125      	b.n	80043c6 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d000      	beq.n	8004184 <USB_DeactivateEndpoint+0x11c>
 8004182:	e090      	b.n	80042a6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	18d2      	adds	r2, r2, r3
 800418e:	2120      	movs	r1, #32
 8004190:	187b      	adds	r3, r7, r1
 8004192:	8812      	ldrh	r2, [r2, #0]
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	187b      	adds	r3, r7, r1
 8004198:	881a      	ldrh	r2, [r3, #0]
 800419a:	2380      	movs	r3, #128	; 0x80
 800419c:	01db      	lsls	r3, r3, #7
 800419e:	4013      	ands	r3, r2
 80041a0:	d016      	beq.n	80041d0 <USB_DeactivateEndpoint+0x168>
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	18d3      	adds	r3, r2, r3
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	201e      	movs	r0, #30
 80041b2:	183b      	adds	r3, r7, r0
 80041b4:	4986      	ldr	r1, [pc, #536]	; (80043d0 <USB_DeactivateEndpoint+0x368>)
 80041b6:	400a      	ands	r2, r1
 80041b8:	801a      	strh	r2, [r3, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	18d3      	adds	r3, r2, r3
 80041c4:	183a      	adds	r2, r7, r0
 80041c6:	8812      	ldrh	r2, [r2, #0]
 80041c8:	4985      	ldr	r1, [pc, #532]	; (80043e0 <USB_DeactivateEndpoint+0x378>)
 80041ca:	430a      	orrs	r2, r1
 80041cc:	b292      	uxth	r2, r2
 80041ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	18d2      	adds	r2, r2, r3
 80041da:	211c      	movs	r1, #28
 80041dc:	187b      	adds	r3, r7, r1
 80041de:	8812      	ldrh	r2, [r2, #0]
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	187b      	adds	r3, r7, r1
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	2240      	movs	r2, #64	; 0x40
 80041e8:	4013      	ands	r3, r2
 80041ea:	d016      	beq.n	800421a <USB_DeactivateEndpoint+0x1b2>
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	18d3      	adds	r3, r2, r3
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	201a      	movs	r0, #26
 80041fc:	183b      	adds	r3, r7, r0
 80041fe:	4974      	ldr	r1, [pc, #464]	; (80043d0 <USB_DeactivateEndpoint+0x368>)
 8004200:	400a      	ands	r2, r1
 8004202:	801a      	strh	r2, [r3, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	18d3      	adds	r3, r2, r3
 800420e:	183a      	adds	r2, r7, r0
 8004210:	8812      	ldrh	r2, [r2, #0]
 8004212:	4970      	ldr	r1, [pc, #448]	; (80043d4 <USB_DeactivateEndpoint+0x36c>)
 8004214:	430a      	orrs	r2, r1
 8004216:	b292      	uxth	r2, r2
 8004218:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	18d3      	adds	r3, r2, r3
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29a      	uxth	r2, r3
 8004228:	2018      	movs	r0, #24
 800422a:	183b      	adds	r3, r7, r0
 800422c:	4968      	ldr	r1, [pc, #416]	; (80043d0 <USB_DeactivateEndpoint+0x368>)
 800422e:	400a      	ands	r2, r1
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	18d3      	adds	r3, r2, r3
 800423c:	183a      	adds	r2, r7, r0
 800423e:	8812      	ldrh	r2, [r2, #0]
 8004240:	4964      	ldr	r1, [pc, #400]	; (80043d4 <USB_DeactivateEndpoint+0x36c>)
 8004242:	430a      	orrs	r2, r1
 8004244:	b292      	uxth	r2, r2
 8004246:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	18d3      	adds	r3, r2, r3
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29a      	uxth	r2, r3
 8004256:	2016      	movs	r0, #22
 8004258:	183b      	adds	r3, r7, r0
 800425a:	4962      	ldr	r1, [pc, #392]	; (80043e4 <USB_DeactivateEndpoint+0x37c>)
 800425c:	400a      	ands	r2, r1
 800425e:	801a      	strh	r2, [r3, #0]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	18d3      	adds	r3, r2, r3
 800426a:	183a      	adds	r2, r7, r0
 800426c:	8812      	ldrh	r2, [r2, #0]
 800426e:	495b      	ldr	r1, [pc, #364]	; (80043dc <USB_DeactivateEndpoint+0x374>)
 8004270:	430a      	orrs	r2, r1
 8004272:	b292      	uxth	r2, r2
 8004274:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	18d3      	adds	r3, r2, r3
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29a      	uxth	r2, r3
 8004284:	2014      	movs	r0, #20
 8004286:	183b      	adds	r3, r7, r0
 8004288:	4953      	ldr	r1, [pc, #332]	; (80043d8 <USB_DeactivateEndpoint+0x370>)
 800428a:	400a      	ands	r2, r1
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	18d3      	adds	r3, r2, r3
 8004298:	183a      	adds	r2, r7, r0
 800429a:	8812      	ldrh	r2, [r2, #0]
 800429c:	494f      	ldr	r1, [pc, #316]	; (80043dc <USB_DeactivateEndpoint+0x374>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	b292      	uxth	r2, r2
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	e08f      	b.n	80043c6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	18d2      	adds	r2, r2, r3
 80042b0:	212e      	movs	r1, #46	; 0x2e
 80042b2:	187b      	adds	r3, r7, r1
 80042b4:	8812      	ldrh	r2, [r2, #0]
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	187b      	adds	r3, r7, r1
 80042ba:	881a      	ldrh	r2, [r3, #0]
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	01db      	lsls	r3, r3, #7
 80042c0:	4013      	ands	r3, r2
 80042c2:	d016      	beq.n	80042f2 <USB_DeactivateEndpoint+0x28a>
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	18d3      	adds	r3, r2, r3
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	202c      	movs	r0, #44	; 0x2c
 80042d4:	183b      	adds	r3, r7, r0
 80042d6:	493e      	ldr	r1, [pc, #248]	; (80043d0 <USB_DeactivateEndpoint+0x368>)
 80042d8:	400a      	ands	r2, r1
 80042da:	801a      	strh	r2, [r3, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	183a      	adds	r2, r7, r0
 80042e8:	8812      	ldrh	r2, [r2, #0]
 80042ea:	493d      	ldr	r1, [pc, #244]	; (80043e0 <USB_DeactivateEndpoint+0x378>)
 80042ec:	430a      	orrs	r2, r1
 80042ee:	b292      	uxth	r2, r2
 80042f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	18d2      	adds	r2, r2, r3
 80042fc:	212a      	movs	r1, #42	; 0x2a
 80042fe:	187b      	adds	r3, r7, r1
 8004300:	8812      	ldrh	r2, [r2, #0]
 8004302:	801a      	strh	r2, [r3, #0]
 8004304:	187b      	adds	r3, r7, r1
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	2240      	movs	r2, #64	; 0x40
 800430a:	4013      	ands	r3, r2
 800430c:	d016      	beq.n	800433c <USB_DeactivateEndpoint+0x2d4>
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	18d3      	adds	r3, r2, r3
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	b29a      	uxth	r2, r3
 800431c:	2028      	movs	r0, #40	; 0x28
 800431e:	183b      	adds	r3, r7, r0
 8004320:	492b      	ldr	r1, [pc, #172]	; (80043d0 <USB_DeactivateEndpoint+0x368>)
 8004322:	400a      	ands	r2, r1
 8004324:	801a      	strh	r2, [r3, #0]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	18d3      	adds	r3, r2, r3
 8004330:	183a      	adds	r2, r7, r0
 8004332:	8812      	ldrh	r2, [r2, #0]
 8004334:	4927      	ldr	r1, [pc, #156]	; (80043d4 <USB_DeactivateEndpoint+0x36c>)
 8004336:	430a      	orrs	r2, r1
 8004338:	b292      	uxth	r2, r2
 800433a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	18d3      	adds	r3, r2, r3
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29a      	uxth	r2, r3
 800434a:	2026      	movs	r0, #38	; 0x26
 800434c:	183b      	adds	r3, r7, r0
 800434e:	4920      	ldr	r1, [pc, #128]	; (80043d0 <USB_DeactivateEndpoint+0x368>)
 8004350:	400a      	ands	r2, r1
 8004352:	801a      	strh	r2, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	18d3      	adds	r3, r2, r3
 800435e:	183a      	adds	r2, r7, r0
 8004360:	8812      	ldrh	r2, [r2, #0]
 8004362:	491f      	ldr	r1, [pc, #124]	; (80043e0 <USB_DeactivateEndpoint+0x378>)
 8004364:	430a      	orrs	r2, r1
 8004366:	b292      	uxth	r2, r2
 8004368:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	18d3      	adds	r3, r2, r3
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b29a      	uxth	r2, r3
 8004378:	2024      	movs	r0, #36	; 0x24
 800437a:	183b      	adds	r3, r7, r0
 800437c:	4916      	ldr	r1, [pc, #88]	; (80043d8 <USB_DeactivateEndpoint+0x370>)
 800437e:	400a      	ands	r2, r1
 8004380:	801a      	strh	r2, [r3, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	18d3      	adds	r3, r2, r3
 800438c:	183a      	adds	r2, r7, r0
 800438e:	8812      	ldrh	r2, [r2, #0]
 8004390:	4912      	ldr	r1, [pc, #72]	; (80043dc <USB_DeactivateEndpoint+0x374>)
 8004392:	430a      	orrs	r2, r1
 8004394:	b292      	uxth	r2, r2
 8004396:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	18d3      	adds	r3, r2, r3
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	2022      	movs	r0, #34	; 0x22
 80043a8:	183b      	adds	r3, r7, r0
 80043aa:	490e      	ldr	r1, [pc, #56]	; (80043e4 <USB_DeactivateEndpoint+0x37c>)
 80043ac:	400a      	ands	r2, r1
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	18d3      	adds	r3, r2, r3
 80043ba:	183a      	adds	r2, r7, r0
 80043bc:	8812      	ldrh	r2, [r2, #0]
 80043be:	4907      	ldr	r1, [pc, #28]	; (80043dc <USB_DeactivateEndpoint+0x374>)
 80043c0:	430a      	orrs	r2, r1
 80043c2:	b292      	uxth	r2, r2
 80043c4:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b00c      	add	sp, #48	; 0x30
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	ffff8f8f 	.word	0xffff8f8f
 80043d4:	ffff80c0 	.word	0xffff80c0
 80043d8:	ffff8fbf 	.word	0xffff8fbf
 80043dc:	ffff8080 	.word	0xffff8080
 80043e0:	ffffc080 	.word	0xffffc080
 80043e4:	ffffbf8f 	.word	0xffffbf8f

080043e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b0c3      	sub	sp, #268	; 0x10c
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d001      	beq.n	80043fe <USB_EPStartXfer+0x16>
 80043fa:	f000 fd2d 	bl	8004e58 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	429a      	cmp	r2, r3
 8004408:	d905      	bls.n	8004416 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	1d7a      	adds	r2, r7, #5
 8004410:	32ff      	adds	r2, #255	; 0xff
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	e004      	b.n	8004420 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	1d7a      	adds	r2, r7, #5
 800441c:	32ff      	adds	r2, #255	; 0xff
 800441e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	7b1b      	ldrb	r3, [r3, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d125      	bne.n	8004474 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6959      	ldr	r1, [r3, #20]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	88da      	ldrh	r2, [r3, #6]
 8004430:	1d7b      	adds	r3, r7, #5
 8004432:	33ff      	adds	r3, #255	; 0xff
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f001 fa47 	bl	80058cc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2250      	movs	r2, #80	; 0x50
 8004446:	5a9b      	ldrh	r3, [r3, r2]
 8004448:	b29b      	uxth	r3, r3
 800444a:	001a      	movs	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	189b      	adds	r3, r3, r2
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	00da      	lsls	r2, r3, #3
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	18d3      	adds	r3, r2, r3
 800445c:	4ad7      	ldr	r2, [pc, #860]	; (80047bc <USB_EPStartXfer+0x3d4>)
 800445e:	4694      	mov	ip, r2
 8004460:	4463      	add	r3, ip
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	1d7b      	adds	r3, r7, #5
 8004466:	33ff      	adds	r3, #255	; 0xff
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	801a      	strh	r2, [r3, #0]
 8004470:	f000 fccd 	bl	8004e0e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	78db      	ldrb	r3, [r3, #3]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d000      	beq.n	800447e <USB_EPStartXfer+0x96>
 800447c:	e362      	b.n	8004b44 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6a1a      	ldr	r2, [r3, #32]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	429a      	cmp	r2, r3
 8004488:	d800      	bhi.n	800448c <USB_EPStartXfer+0xa4>
 800448a:	e309      	b.n	8004aa0 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	18d3      	adds	r3, r2, r3
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29a      	uxth	r2, r3
 800449a:	2056      	movs	r0, #86	; 0x56
 800449c:	183b      	adds	r3, r7, r0
 800449e:	49c8      	ldr	r1, [pc, #800]	; (80047c0 <USB_EPStartXfer+0x3d8>)
 80044a0:	400a      	ands	r2, r1
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	18d3      	adds	r3, r2, r3
 80044ae:	183a      	adds	r2, r7, r0
 80044b0:	8812      	ldrh	r2, [r2, #0]
 80044b2:	49c4      	ldr	r1, [pc, #784]	; (80047c4 <USB_EPStartXfer+0x3dc>)
 80044b4:	430a      	orrs	r2, r1
 80044b6:	b292      	uxth	r2, r2
 80044b8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6a1a      	ldr	r2, [r3, #32]
 80044be:	1d7b      	adds	r3, r7, #5
 80044c0:	33ff      	adds	r3, #255	; 0xff
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	1ad2      	subs	r2, r2, r3
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	18d3      	adds	r3, r2, r3
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	001a      	movs	r2, r3
 80044da:	2340      	movs	r3, #64	; 0x40
 80044dc:	4013      	ands	r3, r2
 80044de:	d100      	bne.n	80044e2 <USB_EPStartXfer+0xfa>
 80044e0:	e176      	b.n	80047d0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	633b      	str	r3, [r7, #48]	; 0x30
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	785b      	ldrb	r3, [r3, #1]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d000      	beq.n	80044f0 <USB_EPStartXfer+0x108>
 80044ee:	e074      	b.n	80045da <USB_EPStartXfer+0x1f2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2250      	movs	r2, #80	; 0x50
 80044f8:	5a9b      	ldrh	r3, [r3, r2]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	001a      	movs	r2, r3
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	189b      	adds	r3, r3, r2
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	00da      	lsls	r2, r3, #3
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	18d3      	adds	r3, r2, r3
 800450e:	4aae      	ldr	r2, [pc, #696]	; (80047c8 <USB_EPStartXfer+0x3e0>)
 8004510:	4694      	mov	ip, r2
 8004512:	4463      	add	r3, ip
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	059b      	lsls	r3, r3, #22
 800451e:	0d9b      	lsrs	r3, r3, #22
 8004520:	b29a      	uxth	r2, r3
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	801a      	strh	r2, [r3, #0]
 8004526:	1d7b      	adds	r3, r7, #5
 8004528:	33ff      	adds	r3, #255	; 0xff
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b3e      	cmp	r3, #62	; 0x3e
 800452e:	d924      	bls.n	800457a <USB_EPStartXfer+0x192>
 8004530:	1d7b      	adds	r3, r7, #5
 8004532:	33ff      	adds	r3, #255	; 0xff
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	1c7a      	adds	r2, r7, #1
 800453a:	32ff      	adds	r2, #255	; 0xff
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	33ff      	adds	r3, #255	; 0xff
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	221f      	movs	r2, #31
 8004546:	4013      	ands	r3, r2
 8004548:	d106      	bne.n	8004558 <USB_EPStartXfer+0x170>
 800454a:	1c7b      	adds	r3, r7, #1
 800454c:	33ff      	adds	r3, #255	; 0xff
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3b01      	subs	r3, #1
 8004552:	1c7a      	adds	r2, r7, #1
 8004554:	32ff      	adds	r2, #255	; 0xff
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29a      	uxth	r2, r3
 800455e:	1c7b      	adds	r3, r7, #1
 8004560:	33ff      	adds	r3, #255	; 0xff
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	029b      	lsls	r3, r3, #10
 8004568:	b29b      	uxth	r3, r3
 800456a:	4313      	orrs	r3, r2
 800456c:	b29b      	uxth	r3, r3
 800456e:	4a97      	ldr	r2, [pc, #604]	; (80047cc <USB_EPStartXfer+0x3e4>)
 8004570:	4313      	orrs	r3, r2
 8004572:	b29a      	uxth	r2, r3
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	801a      	strh	r2, [r3, #0]
 8004578:	e04a      	b.n	8004610 <USB_EPStartXfer+0x228>
 800457a:	1d7b      	adds	r3, r7, #5
 800457c:	33ff      	adds	r3, #255	; 0xff
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d108      	bne.n	8004596 <USB_EPStartXfer+0x1ae>
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	4a90      	ldr	r2, [pc, #576]	; (80047cc <USB_EPStartXfer+0x3e4>)
 800458c:	4313      	orrs	r3, r2
 800458e:	b29a      	uxth	r2, r3
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	801a      	strh	r2, [r3, #0]
 8004594:	e03c      	b.n	8004610 <USB_EPStartXfer+0x228>
 8004596:	1d7b      	adds	r3, r7, #5
 8004598:	33ff      	adds	r3, #255	; 0xff
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	1c7a      	adds	r2, r7, #1
 80045a0:	32ff      	adds	r2, #255	; 0xff
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	1d7b      	adds	r3, r7, #5
 80045a6:	33ff      	adds	r3, #255	; 0xff
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2201      	movs	r2, #1
 80045ac:	4013      	ands	r3, r2
 80045ae:	d006      	beq.n	80045be <USB_EPStartXfer+0x1d6>
 80045b0:	1c7b      	adds	r3, r7, #1
 80045b2:	33ff      	adds	r3, #255	; 0xff
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	1c7a      	adds	r2, r7, #1
 80045ba:	32ff      	adds	r2, #255	; 0xff
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	1c7b      	adds	r3, r7, #1
 80045c6:	33ff      	adds	r3, #255	; 0xff
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	029b      	lsls	r3, r3, #10
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	4313      	orrs	r3, r2
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	e01a      	b.n	8004610 <USB_EPStartXfer+0x228>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	785b      	ldrb	r3, [r3, #1]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d116      	bne.n	8004610 <USB_EPStartXfer+0x228>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2250      	movs	r2, #80	; 0x50
 80045e6:	5a9b      	ldrh	r3, [r3, r2]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	001a      	movs	r2, r3
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	633b      	str	r3, [r7, #48]	; 0x30
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	00da      	lsls	r2, r3, #3
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	18d3      	adds	r3, r2, r3
 80045fc:	4a72      	ldr	r2, [pc, #456]	; (80047c8 <USB_EPStartXfer+0x3e0>)
 80045fe:	4694      	mov	ip, r2
 8004600:	4463      	add	r3, ip
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004604:	1d7b      	adds	r3, r7, #5
 8004606:	33ff      	adds	r3, #255	; 0xff
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	b29a      	uxth	r2, r3
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004610:	2076      	movs	r0, #118	; 0x76
 8004612:	183b      	adds	r3, r7, r0
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	8952      	ldrh	r2, [r2, #10]
 8004618:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6959      	ldr	r1, [r3, #20]
 800461e:	1d7b      	adds	r3, r7, #5
 8004620:	33ff      	adds	r3, #255	; 0xff
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	b29c      	uxth	r4, r3
 8004626:	183b      	adds	r3, r7, r0
 8004628:	881a      	ldrh	r2, [r3, #0]
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	0023      	movs	r3, r4
 800462e:	f001 f94d 	bl	80058cc <USB_WritePMA>
            ep->xfer_buff += len;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	1d7b      	adds	r3, r7, #5
 8004638:	33ff      	adds	r3, #255	; 0xff
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	18d2      	adds	r2, r2, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6a1a      	ldr	r2, [r3, #32]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	429a      	cmp	r2, r3
 800464c:	d908      	bls.n	8004660 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6a1a      	ldr	r2, [r3, #32]
 8004652:	1d7b      	adds	r3, r7, #5
 8004654:	33ff      	adds	r3, #255	; 0xff
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	1ad2      	subs	r2, r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	621a      	str	r2, [r3, #32]
 800465e:	e007      	b.n	8004670 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	1d7a      	adds	r2, r7, #5
 8004666:	32ff      	adds	r2, #255	; 0xff
 8004668:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2200      	movs	r2, #0
 800466e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d000      	beq.n	800467a <USB_EPStartXfer+0x292>
 8004678:	e070      	b.n	800475c <USB_EPStartXfer+0x374>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2250      	movs	r2, #80	; 0x50
 8004682:	5a9b      	ldrh	r3, [r3, r2]
 8004684:	b29b      	uxth	r3, r3
 8004686:	001a      	movs	r2, r3
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	189b      	adds	r3, r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	00da      	lsls	r2, r3, #3
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	18d3      	adds	r3, r2, r3
 8004698:	4a48      	ldr	r2, [pc, #288]	; (80047bc <USB_EPStartXfer+0x3d4>)
 800469a:	4694      	mov	ip, r2
 800469c:	4463      	add	r3, ip
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	059b      	lsls	r3, r3, #22
 80046a8:	0d9b      	lsrs	r3, r3, #22
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	801a      	strh	r2, [r3, #0]
 80046b0:	1d7b      	adds	r3, r7, #5
 80046b2:	33ff      	adds	r3, #255	; 0xff
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b3e      	cmp	r3, #62	; 0x3e
 80046b8:	d922      	bls.n	8004700 <USB_EPStartXfer+0x318>
 80046ba:	1d7b      	adds	r3, r7, #5
 80046bc:	33ff      	adds	r3, #255	; 0xff
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	21fc      	movs	r1, #252	; 0xfc
 80046c4:	187a      	adds	r2, r7, r1
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	1d7b      	adds	r3, r7, #5
 80046ca:	33ff      	adds	r3, #255	; 0xff
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	221f      	movs	r2, #31
 80046d0:	4013      	ands	r3, r2
 80046d2:	d104      	bne.n	80046de <USB_EPStartXfer+0x2f6>
 80046d4:	187b      	adds	r3, r7, r1
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3b01      	subs	r3, #1
 80046da:	187a      	adds	r2, r7, r1
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	23fc      	movs	r3, #252	; 0xfc
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	029b      	lsls	r3, r3, #10
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	4313      	orrs	r3, r2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	4a35      	ldr	r2, [pc, #212]	; (80047cc <USB_EPStartXfer+0x3e4>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	801a      	strh	r2, [r3, #0]
 80046fe:	e04a      	b.n	8004796 <USB_EPStartXfer+0x3ae>
 8004700:	1d7b      	adds	r3, r7, #5
 8004702:	33ff      	adds	r3, #255	; 0xff
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d108      	bne.n	800471c <USB_EPStartXfer+0x334>
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	4a2e      	ldr	r2, [pc, #184]	; (80047cc <USB_EPStartXfer+0x3e4>)
 8004712:	4313      	orrs	r3, r2
 8004714:	b29a      	uxth	r2, r3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	801a      	strh	r2, [r3, #0]
 800471a:	e03c      	b.n	8004796 <USB_EPStartXfer+0x3ae>
 800471c:	1d7b      	adds	r3, r7, #5
 800471e:	33ff      	adds	r3, #255	; 0xff
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	21fc      	movs	r1, #252	; 0xfc
 8004726:	187a      	adds	r2, r7, r1
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	1d7b      	adds	r3, r7, #5
 800472c:	33ff      	adds	r3, #255	; 0xff
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	4013      	ands	r3, r2
 8004734:	d004      	beq.n	8004740 <USB_EPStartXfer+0x358>
 8004736:	187b      	adds	r3, r7, r1
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3301      	adds	r3, #1
 800473c:	187a      	adds	r2, r7, r1
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29a      	uxth	r2, r3
 8004746:	23fc      	movs	r3, #252	; 0xfc
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	029b      	lsls	r3, r3, #10
 8004750:	b29b      	uxth	r3, r3
 8004752:	4313      	orrs	r3, r2
 8004754:	b29a      	uxth	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	801a      	strh	r2, [r3, #0]
 800475a:	e01c      	b.n	8004796 <USB_EPStartXfer+0x3ae>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	785b      	ldrb	r3, [r3, #1]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d118      	bne.n	8004796 <USB_EPStartXfer+0x3ae>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	623b      	str	r3, [r7, #32]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2250      	movs	r2, #80	; 0x50
 800476c:	5a9b      	ldrh	r3, [r3, r2]
 800476e:	b29b      	uxth	r3, r3
 8004770:	001a      	movs	r2, r3
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	189b      	adds	r3, r3, r2
 8004776:	623b      	str	r3, [r7, #32]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	00da      	lsls	r2, r3, #3
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	18d3      	adds	r3, r2, r3
 8004782:	4a0e      	ldr	r2, [pc, #56]	; (80047bc <USB_EPStartXfer+0x3d4>)
 8004784:	4694      	mov	ip, r2
 8004786:	4463      	add	r3, ip
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	1d7b      	adds	r3, r7, #5
 800478c:	33ff      	adds	r3, #255	; 0xff
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	b29a      	uxth	r2, r3
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004796:	2076      	movs	r0, #118	; 0x76
 8004798:	183b      	adds	r3, r7, r0
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	8912      	ldrh	r2, [r2, #8]
 800479e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	6959      	ldr	r1, [r3, #20]
 80047a4:	1d7b      	adds	r3, r7, #5
 80047a6:	33ff      	adds	r3, #255	; 0xff
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	b29c      	uxth	r4, r3
 80047ac:	183b      	adds	r3, r7, r0
 80047ae:	881a      	ldrh	r2, [r3, #0]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	0023      	movs	r3, r4
 80047b4:	f001 f88a 	bl	80058cc <USB_WritePMA>
 80047b8:	e329      	b.n	8004e0e <USB_EPStartXfer+0xa26>
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	00000402 	.word	0x00000402
 80047c0:	ffff8f8f 	.word	0xffff8f8f
 80047c4:	ffff8180 	.word	0xffff8180
 80047c8:	00000406 	.word	0x00000406
 80047cc:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	785b      	ldrb	r3, [r3, #1]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d000      	beq.n	80047da <USB_EPStartXfer+0x3f2>
 80047d8:	e070      	b.n	80048bc <USB_EPStartXfer+0x4d4>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2250      	movs	r2, #80	; 0x50
 80047e2:	5a9b      	ldrh	r3, [r3, r2]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	001a      	movs	r2, r3
 80047e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ea:	189b      	adds	r3, r3, r2
 80047ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	00da      	lsls	r2, r3, #3
 80047f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f6:	18d3      	adds	r3, r2, r3
 80047f8:	4acd      	ldr	r2, [pc, #820]	; (8004b30 <USB_EPStartXfer+0x748>)
 80047fa:	4694      	mov	ip, r2
 80047fc:	4463      	add	r3, ip
 80047fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	059b      	lsls	r3, r3, #22
 8004808:	0d9b      	lsrs	r3, r3, #22
 800480a:	b29a      	uxth	r2, r3
 800480c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480e:	801a      	strh	r2, [r3, #0]
 8004810:	1d7b      	adds	r3, r7, #5
 8004812:	33ff      	adds	r3, #255	; 0xff
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b3e      	cmp	r3, #62	; 0x3e
 8004818:	d922      	bls.n	8004860 <USB_EPStartXfer+0x478>
 800481a:	1d7b      	adds	r3, r7, #5
 800481c:	33ff      	adds	r3, #255	; 0xff
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	21f8      	movs	r1, #248	; 0xf8
 8004824:	187a      	adds	r2, r7, r1
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	1d7b      	adds	r3, r7, #5
 800482a:	33ff      	adds	r3, #255	; 0xff
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	221f      	movs	r2, #31
 8004830:	4013      	ands	r3, r2
 8004832:	d104      	bne.n	800483e <USB_EPStartXfer+0x456>
 8004834:	187b      	adds	r3, r7, r1
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3b01      	subs	r3, #1
 800483a:	187a      	adds	r2, r7, r1
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29a      	uxth	r2, r3
 8004844:	23f8      	movs	r3, #248	; 0xf8
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	029b      	lsls	r3, r3, #10
 800484e:	b29b      	uxth	r3, r3
 8004850:	4313      	orrs	r3, r2
 8004852:	b29b      	uxth	r3, r3
 8004854:	4ab7      	ldr	r2, [pc, #732]	; (8004b34 <USB_EPStartXfer+0x74c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	b29a      	uxth	r2, r3
 800485a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800485c:	801a      	strh	r2, [r3, #0]
 800485e:	e04a      	b.n	80048f6 <USB_EPStartXfer+0x50e>
 8004860:	1d7b      	adds	r3, r7, #5
 8004862:	33ff      	adds	r3, #255	; 0xff
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d108      	bne.n	800487c <USB_EPStartXfer+0x494>
 800486a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	4ab0      	ldr	r2, [pc, #704]	; (8004b34 <USB_EPStartXfer+0x74c>)
 8004872:	4313      	orrs	r3, r2
 8004874:	b29a      	uxth	r2, r3
 8004876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004878:	801a      	strh	r2, [r3, #0]
 800487a:	e03c      	b.n	80048f6 <USB_EPStartXfer+0x50e>
 800487c:	1d7b      	adds	r3, r7, #5
 800487e:	33ff      	adds	r3, #255	; 0xff
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	21f8      	movs	r1, #248	; 0xf8
 8004886:	187a      	adds	r2, r7, r1
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	1d7b      	adds	r3, r7, #5
 800488c:	33ff      	adds	r3, #255	; 0xff
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2201      	movs	r2, #1
 8004892:	4013      	ands	r3, r2
 8004894:	d004      	beq.n	80048a0 <USB_EPStartXfer+0x4b8>
 8004896:	187b      	adds	r3, r7, r1
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	187a      	adds	r2, r7, r1
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	23f8      	movs	r3, #248	; 0xf8
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	029b      	lsls	r3, r3, #10
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	4313      	orrs	r3, r2
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b8:	801a      	strh	r2, [r3, #0]
 80048ba:	e01c      	b.n	80048f6 <USB_EPStartXfer+0x50e>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	785b      	ldrb	r3, [r3, #1]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d118      	bne.n	80048f6 <USB_EPStartXfer+0x50e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	653b      	str	r3, [r7, #80]	; 0x50
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2250      	movs	r2, #80	; 0x50
 80048cc:	5a9b      	ldrh	r3, [r3, r2]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	001a      	movs	r2, r3
 80048d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d4:	189b      	adds	r3, r3, r2
 80048d6:	653b      	str	r3, [r7, #80]	; 0x50
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	00da      	lsls	r2, r3, #3
 80048de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e0:	18d3      	adds	r3, r2, r3
 80048e2:	4a93      	ldr	r2, [pc, #588]	; (8004b30 <USB_EPStartXfer+0x748>)
 80048e4:	4694      	mov	ip, r2
 80048e6:	4463      	add	r3, ip
 80048e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ea:	1d7b      	adds	r3, r7, #5
 80048ec:	33ff      	adds	r3, #255	; 0xff
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80048f6:	2076      	movs	r0, #118	; 0x76
 80048f8:	183b      	adds	r3, r7, r0
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	8912      	ldrh	r2, [r2, #8]
 80048fe:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6959      	ldr	r1, [r3, #20]
 8004904:	1d7b      	adds	r3, r7, #5
 8004906:	33ff      	adds	r3, #255	; 0xff
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	b29c      	uxth	r4, r3
 800490c:	183b      	adds	r3, r7, r0
 800490e:	881a      	ldrh	r2, [r3, #0]
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	0023      	movs	r3, r4
 8004914:	f000 ffda 	bl	80058cc <USB_WritePMA>
            ep->xfer_buff += len;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	1d7b      	adds	r3, r7, #5
 800491e:	33ff      	adds	r3, #255	; 0xff
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	18d2      	adds	r2, r2, r3
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	429a      	cmp	r2, r3
 8004932:	d908      	bls.n	8004946 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	6a1a      	ldr	r2, [r3, #32]
 8004938:	1d7b      	adds	r3, r7, #5
 800493a:	33ff      	adds	r3, #255	; 0xff
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	621a      	str	r2, [r3, #32]
 8004944:	e007      	b.n	8004956 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	1d7a      	adds	r2, r7, #5
 800494c:	32ff      	adds	r2, #255	; 0xff
 800494e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	643b      	str	r3, [r7, #64]	; 0x40
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	785b      	ldrb	r3, [r3, #1]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d000      	beq.n	8004964 <USB_EPStartXfer+0x57c>
 8004962:	e070      	b.n	8004a46 <USB_EPStartXfer+0x65e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	63bb      	str	r3, [r7, #56]	; 0x38
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2250      	movs	r2, #80	; 0x50
 800496c:	5a9b      	ldrh	r3, [r3, r2]
 800496e:	b29b      	uxth	r3, r3
 8004970:	001a      	movs	r2, r3
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	189b      	adds	r3, r3, r2
 8004976:	63bb      	str	r3, [r7, #56]	; 0x38
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	00da      	lsls	r2, r3, #3
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	18d3      	adds	r3, r2, r3
 8004982:	4a6d      	ldr	r2, [pc, #436]	; (8004b38 <USB_EPStartXfer+0x750>)
 8004984:	4694      	mov	ip, r2
 8004986:	4463      	add	r3, ip
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
 800498a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	059b      	lsls	r3, r3, #22
 8004992:	0d9b      	lsrs	r3, r3, #22
 8004994:	b29a      	uxth	r2, r3
 8004996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004998:	801a      	strh	r2, [r3, #0]
 800499a:	1d7b      	adds	r3, r7, #5
 800499c:	33ff      	adds	r3, #255	; 0xff
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b3e      	cmp	r3, #62	; 0x3e
 80049a2:	d922      	bls.n	80049ea <USB_EPStartXfer+0x602>
 80049a4:	1d7b      	adds	r3, r7, #5
 80049a6:	33ff      	adds	r3, #255	; 0xff
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	21f4      	movs	r1, #244	; 0xf4
 80049ae:	187a      	adds	r2, r7, r1
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	1d7b      	adds	r3, r7, #5
 80049b4:	33ff      	adds	r3, #255	; 0xff
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	221f      	movs	r2, #31
 80049ba:	4013      	ands	r3, r2
 80049bc:	d104      	bne.n	80049c8 <USB_EPStartXfer+0x5e0>
 80049be:	187b      	adds	r3, r7, r1
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	187a      	adds	r2, r7, r1
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	23f4      	movs	r3, #244	; 0xf4
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	029b      	lsls	r3, r3, #10
 80049d8:	b29b      	uxth	r3, r3
 80049da:	4313      	orrs	r3, r2
 80049dc:	b29b      	uxth	r3, r3
 80049de:	4a55      	ldr	r2, [pc, #340]	; (8004b34 <USB_EPStartXfer+0x74c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e6:	801a      	strh	r2, [r3, #0]
 80049e8:	e048      	b.n	8004a7c <USB_EPStartXfer+0x694>
 80049ea:	1d7b      	adds	r3, r7, #5
 80049ec:	33ff      	adds	r3, #255	; 0xff
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d108      	bne.n	8004a06 <USB_EPStartXfer+0x61e>
 80049f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	4a4e      	ldr	r2, [pc, #312]	; (8004b34 <USB_EPStartXfer+0x74c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	e03a      	b.n	8004a7c <USB_EPStartXfer+0x694>
 8004a06:	1d7b      	adds	r3, r7, #5
 8004a08:	33ff      	adds	r3, #255	; 0xff
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	21f4      	movs	r1, #244	; 0xf4
 8004a10:	187a      	adds	r2, r7, r1
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	1d7b      	adds	r3, r7, #5
 8004a16:	33ff      	adds	r3, #255	; 0xff
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d004      	beq.n	8004a2a <USB_EPStartXfer+0x642>
 8004a20:	187b      	adds	r3, r7, r1
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	187a      	adds	r2, r7, r1
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	23f4      	movs	r3, #244	; 0xf4
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	029b      	lsls	r3, r3, #10
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a42:	801a      	strh	r2, [r3, #0]
 8004a44:	e01a      	b.n	8004a7c <USB_EPStartXfer+0x694>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	785b      	ldrb	r3, [r3, #1]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d116      	bne.n	8004a7c <USB_EPStartXfer+0x694>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2250      	movs	r2, #80	; 0x50
 8004a52:	5a9b      	ldrh	r3, [r3, r2]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	001a      	movs	r2, r3
 8004a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5a:	189b      	adds	r3, r3, r2
 8004a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	00da      	lsls	r2, r3, #3
 8004a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a66:	18d3      	adds	r3, r2, r3
 8004a68:	4a33      	ldr	r2, [pc, #204]	; (8004b38 <USB_EPStartXfer+0x750>)
 8004a6a:	4694      	mov	ip, r2
 8004a6c:	4463      	add	r3, ip
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a70:	1d7b      	adds	r3, r7, #5
 8004a72:	33ff      	adds	r3, #255	; 0xff
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a7c:	2076      	movs	r0, #118	; 0x76
 8004a7e:	183b      	adds	r3, r7, r0
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	8952      	ldrh	r2, [r2, #10]
 8004a84:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6959      	ldr	r1, [r3, #20]
 8004a8a:	1d7b      	adds	r3, r7, #5
 8004a8c:	33ff      	adds	r3, #255	; 0xff
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	b29c      	uxth	r4, r3
 8004a92:	183b      	adds	r3, r7, r0
 8004a94:	881a      	ldrh	r2, [r3, #0]
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	0023      	movs	r3, r4
 8004a9a:	f000 ff17 	bl	80058cc <USB_WritePMA>
 8004a9e:	e1b6      	b.n	8004e0e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	1d7a      	adds	r2, r7, #5
 8004aa6:	32ff      	adds	r2, #255	; 0xff
 8004aa8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	18d3      	adds	r3, r2, r3
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	2062      	movs	r0, #98	; 0x62
 8004aba:	183b      	adds	r3, r7, r0
 8004abc:	491f      	ldr	r1, [pc, #124]	; (8004b3c <USB_EPStartXfer+0x754>)
 8004abe:	400a      	ands	r2, r1
 8004ac0:	801a      	strh	r2, [r3, #0]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	18d3      	adds	r3, r2, r3
 8004acc:	183a      	adds	r2, r7, r0
 8004ace:	8812      	ldrh	r2, [r2, #0]
 8004ad0:	491b      	ldr	r1, [pc, #108]	; (8004b40 <USB_EPStartXfer+0x758>)
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	b292      	uxth	r2, r2
 8004ad6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2250      	movs	r2, #80	; 0x50
 8004ae0:	5a9b      	ldrh	r3, [r3, r2]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae8:	189b      	adds	r3, r3, r2
 8004aea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	00da      	lsls	r2, r3, #3
 8004af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af4:	18d3      	adds	r3, r2, r3
 8004af6:	4a0e      	ldr	r2, [pc, #56]	; (8004b30 <USB_EPStartXfer+0x748>)
 8004af8:	4694      	mov	ip, r2
 8004afa:	4463      	add	r3, ip
 8004afc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004afe:	1d7b      	adds	r3, r7, #5
 8004b00:	33ff      	adds	r3, #255	; 0xff
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b0a:	2076      	movs	r0, #118	; 0x76
 8004b0c:	183b      	adds	r3, r7, r0
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	8912      	ldrh	r2, [r2, #8]
 8004b12:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	6959      	ldr	r1, [r3, #20]
 8004b18:	1d7b      	adds	r3, r7, #5
 8004b1a:	33ff      	adds	r3, #255	; 0xff
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	b29c      	uxth	r4, r3
 8004b20:	183b      	adds	r3, r7, r0
 8004b22:	881a      	ldrh	r2, [r3, #0]
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	0023      	movs	r3, r4
 8004b28:	f000 fed0 	bl	80058cc <USB_WritePMA>
 8004b2c:	e16f      	b.n	8004e0e <USB_EPStartXfer+0xa26>
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	00000402 	.word	0x00000402
 8004b34:	ffff8000 	.word	0xffff8000
 8004b38:	00000406 	.word	0x00000406
 8004b3c:	ffff8e8f 	.word	0xffff8e8f
 8004b40:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	1d7b      	adds	r3, r7, #5
 8004b4a:	33ff      	adds	r3, #255	; 0xff
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	1ad2      	subs	r2, r2, r3
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	18d3      	adds	r3, r2, r3
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	001a      	movs	r2, r3
 8004b64:	2340      	movs	r3, #64	; 0x40
 8004b66:	4013      	ands	r3, r2
 8004b68:	d100      	bne.n	8004b6c <USB_EPStartXfer+0x784>
 8004b6a:	e0a4      	b.n	8004cb6 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d000      	beq.n	8004b7a <USB_EPStartXfer+0x792>
 8004b78:	e070      	b.n	8004c5c <USB_EPStartXfer+0x874>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2250      	movs	r2, #80	; 0x50
 8004b82:	5a9b      	ldrh	r3, [r3, r2]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	001a      	movs	r2, r3
 8004b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	00da      	lsls	r2, r3, #3
 8004b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b96:	18d3      	adds	r3, r2, r3
 8004b98:	4abc      	ldr	r2, [pc, #752]	; (8004e8c <USB_EPStartXfer+0xaa4>)
 8004b9a:	4694      	mov	ip, r2
 8004b9c:	4463      	add	r3, ip
 8004b9e:	667b      	str	r3, [r7, #100]	; 0x64
 8004ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	059b      	lsls	r3, r3, #22
 8004ba8:	0d9b      	lsrs	r3, r3, #22
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	1d7b      	adds	r3, r7, #5
 8004bb2:	33ff      	adds	r3, #255	; 0xff
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb8:	d922      	bls.n	8004c00 <USB_EPStartXfer+0x818>
 8004bba:	1d7b      	adds	r3, r7, #5
 8004bbc:	33ff      	adds	r3, #255	; 0xff
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	21f0      	movs	r1, #240	; 0xf0
 8004bc4:	187a      	adds	r2, r7, r1
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	1d7b      	adds	r3, r7, #5
 8004bca:	33ff      	adds	r3, #255	; 0xff
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	221f      	movs	r2, #31
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d104      	bne.n	8004bde <USB_EPStartXfer+0x7f6>
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	187a      	adds	r2, r7, r1
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	23f0      	movs	r3, #240	; 0xf0
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	029b      	lsls	r3, r3, #10
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	4aa6      	ldr	r2, [pc, #664]	; (8004e90 <USB_EPStartXfer+0xaa8>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bfc:	801a      	strh	r2, [r3, #0]
 8004bfe:	e048      	b.n	8004c92 <USB_EPStartXfer+0x8aa>
 8004c00:	1d7b      	adds	r3, r7, #5
 8004c02:	33ff      	adds	r3, #255	; 0xff
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d108      	bne.n	8004c1c <USB_EPStartXfer+0x834>
 8004c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	4a9f      	ldr	r2, [pc, #636]	; (8004e90 <USB_EPStartXfer+0xaa8>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c18:	801a      	strh	r2, [r3, #0]
 8004c1a:	e03a      	b.n	8004c92 <USB_EPStartXfer+0x8aa>
 8004c1c:	1d7b      	adds	r3, r7, #5
 8004c1e:	33ff      	adds	r3, #255	; 0xff
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	21f0      	movs	r1, #240	; 0xf0
 8004c26:	187a      	adds	r2, r7, r1
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	1d7b      	adds	r3, r7, #5
 8004c2c:	33ff      	adds	r3, #255	; 0xff
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2201      	movs	r2, #1
 8004c32:	4013      	ands	r3, r2
 8004c34:	d004      	beq.n	8004c40 <USB_EPStartXfer+0x858>
 8004c36:	187b      	adds	r3, r7, r1
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	187a      	adds	r2, r7, r1
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	23f0      	movs	r3, #240	; 0xf0
 8004c48:	18fb      	adds	r3, r7, r3
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	029b      	lsls	r3, r3, #10
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	4313      	orrs	r3, r2
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c58:	801a      	strh	r2, [r3, #0]
 8004c5a:	e01a      	b.n	8004c92 <USB_EPStartXfer+0x8aa>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	785b      	ldrb	r3, [r3, #1]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d116      	bne.n	8004c92 <USB_EPStartXfer+0x8aa>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2250      	movs	r2, #80	; 0x50
 8004c68:	5a9b      	ldrh	r3, [r3, r2]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	001a      	movs	r2, r3
 8004c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c70:	189b      	adds	r3, r3, r2
 8004c72:	673b      	str	r3, [r7, #112]	; 0x70
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	00da      	lsls	r2, r3, #3
 8004c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c7c:	18d3      	adds	r3, r2, r3
 8004c7e:	4a83      	ldr	r2, [pc, #524]	; (8004e8c <USB_EPStartXfer+0xaa4>)
 8004c80:	4694      	mov	ip, r2
 8004c82:	4463      	add	r3, ip
 8004c84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c86:	1d7b      	adds	r3, r7, #5
 8004c88:	33ff      	adds	r3, #255	; 0xff
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004c92:	2076      	movs	r0, #118	; 0x76
 8004c94:	183b      	adds	r3, r7, r0
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	8952      	ldrh	r2, [r2, #10]
 8004c9a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	6959      	ldr	r1, [r3, #20]
 8004ca0:	1d7b      	adds	r3, r7, #5
 8004ca2:	33ff      	adds	r3, #255	; 0xff
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	b29c      	uxth	r4, r3
 8004ca8:	183b      	adds	r3, r7, r0
 8004caa:	881a      	ldrh	r2, [r3, #0]
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	0023      	movs	r3, r4
 8004cb0:	f000 fe0c 	bl	80058cc <USB_WritePMA>
 8004cb4:	e0ab      	b.n	8004e0e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	785b      	ldrb	r3, [r3, #1]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d000      	beq.n	8004cc0 <USB_EPStartXfer+0x8d8>
 8004cbe:	e070      	b.n	8004da2 <USB_EPStartXfer+0x9ba>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2250      	movs	r2, #80	; 0x50
 8004cc8:	5a9b      	ldrh	r3, [r3, r2]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	001a      	movs	r2, r3
 8004cce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cd0:	189b      	adds	r3, r3, r2
 8004cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	00da      	lsls	r2, r3, #3
 8004cda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cdc:	18d3      	adds	r3, r2, r3
 8004cde:	4a6d      	ldr	r2, [pc, #436]	; (8004e94 <USB_EPStartXfer+0xaac>)
 8004ce0:	4694      	mov	ip, r2
 8004ce2:	4463      	add	r3, ip
 8004ce4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	059b      	lsls	r3, r3, #22
 8004cee:	0d9b      	lsrs	r3, r3, #22
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf4:	801a      	strh	r2, [r3, #0]
 8004cf6:	1d7b      	adds	r3, r7, #5
 8004cf8:	33ff      	adds	r3, #255	; 0xff
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b3e      	cmp	r3, #62	; 0x3e
 8004cfe:	d922      	bls.n	8004d46 <USB_EPStartXfer+0x95e>
 8004d00:	1d7b      	adds	r3, r7, #5
 8004d02:	33ff      	adds	r3, #255	; 0xff
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	21ec      	movs	r1, #236	; 0xec
 8004d0a:	187a      	adds	r2, r7, r1
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	1d7b      	adds	r3, r7, #5
 8004d10:	33ff      	adds	r3, #255	; 0xff
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	221f      	movs	r2, #31
 8004d16:	4013      	ands	r3, r2
 8004d18:	d104      	bne.n	8004d24 <USB_EPStartXfer+0x93c>
 8004d1a:	187b      	adds	r3, r7, r1
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	187a      	adds	r2, r7, r1
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	23ec      	movs	r3, #236	; 0xec
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	029b      	lsls	r3, r3, #10
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	4313      	orrs	r3, r2
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	4a55      	ldr	r2, [pc, #340]	; (8004e90 <USB_EPStartXfer+0xaa8>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d42:	801a      	strh	r2, [r3, #0]
 8004d44:	e052      	b.n	8004dec <USB_EPStartXfer+0xa04>
 8004d46:	1d7b      	adds	r3, r7, #5
 8004d48:	33ff      	adds	r3, #255	; 0xff
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d108      	bne.n	8004d62 <USB_EPStartXfer+0x97a>
 8004d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	4a4e      	ldr	r2, [pc, #312]	; (8004e90 <USB_EPStartXfer+0xaa8>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d5e:	801a      	strh	r2, [r3, #0]
 8004d60:	e044      	b.n	8004dec <USB_EPStartXfer+0xa04>
 8004d62:	1d7b      	adds	r3, r7, #5
 8004d64:	33ff      	adds	r3, #255	; 0xff
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	21ec      	movs	r1, #236	; 0xec
 8004d6c:	187a      	adds	r2, r7, r1
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	1d7b      	adds	r3, r7, #5
 8004d72:	33ff      	adds	r3, #255	; 0xff
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2201      	movs	r2, #1
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <USB_EPStartXfer+0x99e>
 8004d7c:	187b      	adds	r3, r7, r1
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3301      	adds	r3, #1
 8004d82:	187a      	adds	r2, r7, r1
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	23ec      	movs	r3, #236	; 0xec
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	029b      	lsls	r3, r3, #10
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9e:	801a      	strh	r2, [r3, #0]
 8004da0:	e024      	b.n	8004dec <USB_EPStartXfer+0xa04>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d120      	bne.n	8004dec <USB_EPStartXfer+0xa04>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2184      	movs	r1, #132	; 0x84
 8004dae:	187a      	adds	r2, r7, r1
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2250      	movs	r2, #80	; 0x50
 8004db6:	5a9b      	ldrh	r3, [r3, r2]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	001a      	movs	r2, r3
 8004dbc:	187b      	adds	r3, r7, r1
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	189b      	adds	r3, r3, r2
 8004dc2:	187a      	adds	r2, r7, r1
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	00da      	lsls	r2, r3, #3
 8004dcc:	187b      	adds	r3, r7, r1
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	18d3      	adds	r3, r2, r3
 8004dd2:	4a30      	ldr	r2, [pc, #192]	; (8004e94 <USB_EPStartXfer+0xaac>)
 8004dd4:	4694      	mov	ip, r2
 8004dd6:	4463      	add	r3, ip
 8004dd8:	2180      	movs	r1, #128	; 0x80
 8004dda:	187a      	adds	r2, r7, r1
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	1d7b      	adds	r3, r7, #5
 8004de0:	33ff      	adds	r3, #255	; 0xff
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	187b      	adds	r3, r7, r1
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004dec:	2076      	movs	r0, #118	; 0x76
 8004dee:	183b      	adds	r3, r7, r0
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	8912      	ldrh	r2, [r2, #8]
 8004df4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6959      	ldr	r1, [r3, #20]
 8004dfa:	1d7b      	adds	r3, r7, #5
 8004dfc:	33ff      	adds	r3, #255	; 0xff
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	b29c      	uxth	r4, r3
 8004e02:	183b      	adds	r3, r7, r0
 8004e04:	881a      	ldrh	r2, [r3, #0]
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	0023      	movs	r3, r4
 8004e0a:	f000 fd5f 	bl	80058cc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	18d3      	adds	r3, r2, r3
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	200a      	movs	r0, #10
 8004e1e:	183b      	adds	r3, r7, r0
 8004e20:	491d      	ldr	r1, [pc, #116]	; (8004e98 <USB_EPStartXfer+0xab0>)
 8004e22:	400a      	ands	r2, r1
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	183b      	adds	r3, r7, r0
 8004e28:	183a      	adds	r2, r7, r0
 8004e2a:	8812      	ldrh	r2, [r2, #0]
 8004e2c:	2110      	movs	r1, #16
 8004e2e:	404a      	eors	r2, r1
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	183b      	adds	r3, r7, r0
 8004e34:	183a      	adds	r2, r7, r0
 8004e36:	8812      	ldrh	r2, [r2, #0]
 8004e38:	2120      	movs	r1, #32
 8004e3a:	404a      	eors	r2, r1
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	18d3      	adds	r3, r2, r3
 8004e48:	183a      	adds	r2, r7, r0
 8004e4a:	8812      	ldrh	r2, [r2, #0]
 8004e4c:	4913      	ldr	r1, [pc, #76]	; (8004e9c <USB_EPStartXfer+0xab4>)
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	b292      	uxth	r2, r2
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	f000 fbf4 	bl	8005640 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	7b1b      	ldrb	r3, [r3, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d000      	beq.n	8004e62 <USB_EPStartXfer+0xa7a>
 8004e60:	e0a9      	b.n	8004fb6 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d918      	bls.n	8004ea0 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	1d7a      	adds	r2, r7, #5
 8004e74:	32ff      	adds	r2, #255	; 0xff
 8004e76:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	1d7b      	adds	r3, r7, #5
 8004e7e:	33ff      	adds	r3, #255	; 0xff
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	1ad2      	subs	r2, r2, r3
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	619a      	str	r2, [r3, #24]
 8004e88:	e012      	b.n	8004eb0 <USB_EPStartXfer+0xac8>
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	00000406 	.word	0x00000406
 8004e90:	ffff8000 	.word	0xffff8000
 8004e94:	00000402 	.word	0x00000402
 8004e98:	ffff8fbf 	.word	0xffff8fbf
 8004e9c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	1d7a      	adds	r2, r7, #5
 8004ea6:	32ff      	adds	r2, #255	; 0xff
 8004ea8:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2200      	movs	r2, #0
 8004eae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2190      	movs	r1, #144	; 0x90
 8004eb4:	187a      	adds	r2, r7, r1
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2250      	movs	r2, #80	; 0x50
 8004ebc:	5a9b      	ldrh	r3, [r3, r2]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	001a      	movs	r2, r3
 8004ec2:	187b      	adds	r3, r7, r1
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	187a      	adds	r2, r7, r1
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	00da      	lsls	r2, r3, #3
 8004ed2:	187b      	adds	r3, r7, r1
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	18d3      	adds	r3, r2, r3
 8004ed8:	4acf      	ldr	r2, [pc, #828]	; (8005218 <USB_EPStartXfer+0xe30>)
 8004eda:	4694      	mov	ip, r2
 8004edc:	4463      	add	r3, ip
 8004ede:	218c      	movs	r1, #140	; 0x8c
 8004ee0:	187a      	adds	r2, r7, r1
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	187b      	adds	r3, r7, r1
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	059b      	lsls	r3, r3, #22
 8004eee:	0d9b      	lsrs	r3, r3, #22
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	1d7b      	adds	r3, r7, #5
 8004efa:	33ff      	adds	r3, #255	; 0xff
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b3e      	cmp	r3, #62	; 0x3e
 8004f00:	d925      	bls.n	8004f4e <USB_EPStartXfer+0xb66>
 8004f02:	1d7b      	adds	r3, r7, #5
 8004f04:	33ff      	adds	r3, #255	; 0xff
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	21e8      	movs	r1, #232	; 0xe8
 8004f0c:	187a      	adds	r2, r7, r1
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	1d7b      	adds	r3, r7, #5
 8004f12:	33ff      	adds	r3, #255	; 0xff
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	221f      	movs	r2, #31
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d104      	bne.n	8004f26 <USB_EPStartXfer+0xb3e>
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	187a      	adds	r2, r7, r1
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	218c      	movs	r1, #140	; 0x8c
 8004f28:	187b      	adds	r3, r7, r1
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	23e8      	movs	r3, #232	; 0xe8
 8004f32:	18fb      	adds	r3, r7, r3
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	029b      	lsls	r3, r3, #10
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	4ab6      	ldr	r2, [pc, #728]	; (800521c <USB_EPStartXfer+0xe34>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	187b      	adds	r3, r7, r1
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	e353      	b.n	80055f6 <USB_EPStartXfer+0x120e>
 8004f4e:	1d7b      	adds	r3, r7, #5
 8004f50:	33ff      	adds	r3, #255	; 0xff
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10b      	bne.n	8004f70 <USB_EPStartXfer+0xb88>
 8004f58:	218c      	movs	r1, #140	; 0x8c
 8004f5a:	187b      	adds	r3, r7, r1
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	4aae      	ldr	r2, [pc, #696]	; (800521c <USB_EPStartXfer+0xe34>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	187b      	adds	r3, r7, r1
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	801a      	strh	r2, [r3, #0]
 8004f6e:	e342      	b.n	80055f6 <USB_EPStartXfer+0x120e>
 8004f70:	1d7b      	adds	r3, r7, #5
 8004f72:	33ff      	adds	r3, #255	; 0xff
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	21e8      	movs	r1, #232	; 0xe8
 8004f7a:	187a      	adds	r2, r7, r1
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	1d7b      	adds	r3, r7, #5
 8004f80:	33ff      	adds	r3, #255	; 0xff
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2201      	movs	r2, #1
 8004f86:	4013      	ands	r3, r2
 8004f88:	d004      	beq.n	8004f94 <USB_EPStartXfer+0xbac>
 8004f8a:	187b      	adds	r3, r7, r1
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	187a      	adds	r2, r7, r1
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	218c      	movs	r1, #140	; 0x8c
 8004f96:	187b      	adds	r3, r7, r1
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	23e8      	movs	r3, #232	; 0xe8
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	029b      	lsls	r3, r3, #10
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	801a      	strh	r2, [r3, #0]
 8004fb4:	e31f      	b.n	80055f6 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	78db      	ldrb	r3, [r3, #3]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d000      	beq.n	8004fc0 <USB_EPStartXfer+0xbd8>
 8004fbe:	e191      	b.n	80052e4 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d000      	beq.n	8004fca <USB_EPStartXfer+0xbe2>
 8004fc8:	e07c      	b.n	80050c4 <USB_EPStartXfer+0xcdc>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	21ac      	movs	r1, #172	; 0xac
 8004fce:	187a      	adds	r2, r7, r1
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2250      	movs	r2, #80	; 0x50
 8004fd6:	5a9b      	ldrh	r3, [r3, r2]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	001a      	movs	r2, r3
 8004fdc:	187b      	adds	r3, r7, r1
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	189b      	adds	r3, r3, r2
 8004fe2:	187a      	adds	r2, r7, r1
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	00da      	lsls	r2, r3, #3
 8004fec:	187b      	adds	r3, r7, r1
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	18d3      	adds	r3, r2, r3
 8004ff2:	4a8b      	ldr	r2, [pc, #556]	; (8005220 <USB_EPStartXfer+0xe38>)
 8004ff4:	4694      	mov	ip, r2
 8004ff6:	4463      	add	r3, ip
 8004ff8:	21a8      	movs	r1, #168	; 0xa8
 8004ffa:	187a      	adds	r2, r7, r1
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	187b      	adds	r3, r7, r1
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b29b      	uxth	r3, r3
 8005006:	059b      	lsls	r3, r3, #22
 8005008:	0d9b      	lsrs	r3, r3, #22
 800500a:	b29a      	uxth	r2, r3
 800500c:	187b      	adds	r3, r7, r1
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	801a      	strh	r2, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b3e      	cmp	r3, #62	; 0x3e
 8005018:	d923      	bls.n	8005062 <USB_EPStartXfer+0xc7a>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	21e4      	movs	r1, #228	; 0xe4
 8005022:	187a      	adds	r2, r7, r1
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	221f      	movs	r2, #31
 800502c:	4013      	ands	r3, r2
 800502e:	d104      	bne.n	800503a <USB_EPStartXfer+0xc52>
 8005030:	187b      	adds	r3, r7, r1
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3b01      	subs	r3, #1
 8005036:	187a      	adds	r2, r7, r1
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	21a8      	movs	r1, #168	; 0xa8
 800503c:	187b      	adds	r3, r7, r1
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29a      	uxth	r2, r3
 8005044:	23e4      	movs	r3, #228	; 0xe4
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	029b      	lsls	r3, r3, #10
 800504e:	b29b      	uxth	r3, r3
 8005050:	4313      	orrs	r3, r2
 8005052:	b29b      	uxth	r3, r3
 8005054:	4a71      	ldr	r2, [pc, #452]	; (800521c <USB_EPStartXfer+0xe34>)
 8005056:	4313      	orrs	r3, r2
 8005058:	b29a      	uxth	r2, r3
 800505a:	187b      	adds	r3, r7, r1
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	e054      	b.n	800510c <USB_EPStartXfer+0xd24>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10b      	bne.n	8005082 <USB_EPStartXfer+0xc9a>
 800506a:	21a8      	movs	r1, #168	; 0xa8
 800506c:	187b      	adds	r3, r7, r1
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	4a69      	ldr	r2, [pc, #420]	; (800521c <USB_EPStartXfer+0xe34>)
 8005076:	4313      	orrs	r3, r2
 8005078:	b29a      	uxth	r2, r3
 800507a:	187b      	adds	r3, r7, r1
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	801a      	strh	r2, [r3, #0]
 8005080:	e044      	b.n	800510c <USB_EPStartXfer+0xd24>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	21e4      	movs	r1, #228	; 0xe4
 800508a:	187a      	adds	r2, r7, r1
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2201      	movs	r2, #1
 8005094:	4013      	ands	r3, r2
 8005096:	d004      	beq.n	80050a2 <USB_EPStartXfer+0xcba>
 8005098:	187b      	adds	r3, r7, r1
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3301      	adds	r3, #1
 800509e:	187a      	adds	r2, r7, r1
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	21a8      	movs	r1, #168	; 0xa8
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	23e4      	movs	r3, #228	; 0xe4
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	029b      	lsls	r3, r3, #10
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	4313      	orrs	r3, r2
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	187b      	adds	r3, r7, r1
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	e023      	b.n	800510c <USB_EPStartXfer+0xd24>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d11f      	bne.n	800510c <USB_EPStartXfer+0xd24>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	21b4      	movs	r1, #180	; 0xb4
 80050d0:	187a      	adds	r2, r7, r1
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2250      	movs	r2, #80	; 0x50
 80050d8:	5a9b      	ldrh	r3, [r3, r2]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	001a      	movs	r2, r3
 80050de:	187b      	adds	r3, r7, r1
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	187a      	adds	r2, r7, r1
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	00da      	lsls	r2, r3, #3
 80050ee:	187b      	adds	r3, r7, r1
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	18d3      	adds	r3, r2, r3
 80050f4:	4a4a      	ldr	r2, [pc, #296]	; (8005220 <USB_EPStartXfer+0xe38>)
 80050f6:	4694      	mov	ip, r2
 80050f8:	4463      	add	r3, ip
 80050fa:	21b0      	movs	r1, #176	; 0xb0
 80050fc:	187a      	adds	r2, r7, r1
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	b29a      	uxth	r2, r3
 8005106:	187b      	adds	r3, r7, r1
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	22a4      	movs	r2, #164	; 0xa4
 8005110:	18ba      	adds	r2, r7, r2
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d000      	beq.n	800511e <USB_EPStartXfer+0xd36>
 800511c:	e082      	b.n	8005224 <USB_EPStartXfer+0xe3c>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	219c      	movs	r1, #156	; 0x9c
 8005122:	187a      	adds	r2, r7, r1
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2250      	movs	r2, #80	; 0x50
 800512a:	5a9b      	ldrh	r3, [r3, r2]
 800512c:	b29b      	uxth	r3, r3
 800512e:	001a      	movs	r2, r3
 8005130:	187b      	adds	r3, r7, r1
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	189b      	adds	r3, r3, r2
 8005136:	187a      	adds	r2, r7, r1
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	00da      	lsls	r2, r3, #3
 8005140:	187b      	adds	r3, r7, r1
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	18d3      	adds	r3, r2, r3
 8005146:	4a34      	ldr	r2, [pc, #208]	; (8005218 <USB_EPStartXfer+0xe30>)
 8005148:	4694      	mov	ip, r2
 800514a:	4463      	add	r3, ip
 800514c:	2198      	movs	r1, #152	; 0x98
 800514e:	187a      	adds	r2, r7, r1
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	187b      	adds	r3, r7, r1
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	059b      	lsls	r3, r3, #22
 800515c:	0d9b      	lsrs	r3, r3, #22
 800515e:	b29a      	uxth	r2, r3
 8005160:	187b      	adds	r3, r7, r1
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b3e      	cmp	r3, #62	; 0x3e
 800516c:	d923      	bls.n	80051b6 <USB_EPStartXfer+0xdce>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	21e0      	movs	r1, #224	; 0xe0
 8005176:	187a      	adds	r2, r7, r1
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	221f      	movs	r2, #31
 8005180:	4013      	ands	r3, r2
 8005182:	d104      	bne.n	800518e <USB_EPStartXfer+0xda6>
 8005184:	187b      	adds	r3, r7, r1
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3b01      	subs	r3, #1
 800518a:	187a      	adds	r2, r7, r1
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	2198      	movs	r1, #152	; 0x98
 8005190:	187b      	adds	r3, r7, r1
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29a      	uxth	r2, r3
 8005198:	23e0      	movs	r3, #224	; 0xe0
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	029b      	lsls	r3, r3, #10
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	4313      	orrs	r3, r2
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4a1c      	ldr	r2, [pc, #112]	; (800521c <USB_EPStartXfer+0xe34>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	187b      	adds	r3, r7, r1
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	801a      	strh	r2, [r3, #0]
 80051b4:	e057      	b.n	8005266 <USB_EPStartXfer+0xe7e>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <USB_EPStartXfer+0xdee>
 80051be:	2198      	movs	r1, #152	; 0x98
 80051c0:	187b      	adds	r3, r7, r1
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	4a14      	ldr	r2, [pc, #80]	; (800521c <USB_EPStartXfer+0xe34>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	187b      	adds	r3, r7, r1
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	e047      	b.n	8005266 <USB_EPStartXfer+0xe7e>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	21e0      	movs	r1, #224	; 0xe0
 80051de:	187a      	adds	r2, r7, r1
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2201      	movs	r2, #1
 80051e8:	4013      	ands	r3, r2
 80051ea:	d004      	beq.n	80051f6 <USB_EPStartXfer+0xe0e>
 80051ec:	187b      	adds	r3, r7, r1
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	187a      	adds	r2, r7, r1
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	2198      	movs	r1, #152	; 0x98
 80051f8:	187b      	adds	r3, r7, r1
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29a      	uxth	r2, r3
 8005200:	23e0      	movs	r3, #224	; 0xe0
 8005202:	18fb      	adds	r3, r7, r3
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	029b      	lsls	r3, r3, #10
 800520a:	b29b      	uxth	r3, r3
 800520c:	4313      	orrs	r3, r2
 800520e:	b29a      	uxth	r2, r3
 8005210:	187b      	adds	r3, r7, r1
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	e026      	b.n	8005266 <USB_EPStartXfer+0xe7e>
 8005218:	00000406 	.word	0x00000406
 800521c:	ffff8000 	.word	0xffff8000
 8005220:	00000402 	.word	0x00000402
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d11c      	bne.n	8005266 <USB_EPStartXfer+0xe7e>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2250      	movs	r2, #80	; 0x50
 8005230:	5a9b      	ldrh	r3, [r3, r2]
 8005232:	b29b      	uxth	r3, r3
 8005234:	001a      	movs	r2, r3
 8005236:	21a4      	movs	r1, #164	; 0xa4
 8005238:	187b      	adds	r3, r7, r1
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	189b      	adds	r3, r3, r2
 800523e:	187a      	adds	r2, r7, r1
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	00da      	lsls	r2, r3, #3
 8005248:	187b      	adds	r3, r7, r1
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	18d3      	adds	r3, r2, r3
 800524e:	4ad2      	ldr	r2, [pc, #840]	; (8005598 <USB_EPStartXfer+0x11b0>)
 8005250:	4694      	mov	ip, r2
 8005252:	4463      	add	r3, ip
 8005254:	21a0      	movs	r1, #160	; 0xa0
 8005256:	187a      	adds	r2, r7, r1
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	b29a      	uxth	r2, r3
 8005260:	187b      	adds	r3, r7, r1
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d100      	bne.n	8005270 <USB_EPStartXfer+0xe88>
 800526e:	e1c2      	b.n	80055f6 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	18d2      	adds	r2, r2, r3
 800527a:	2196      	movs	r1, #150	; 0x96
 800527c:	187b      	adds	r3, r7, r1
 800527e:	8812      	ldrh	r2, [r2, #0]
 8005280:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005282:	187b      	adds	r3, r7, r1
 8005284:	881a      	ldrh	r2, [r3, #0]
 8005286:	2380      	movs	r3, #128	; 0x80
 8005288:	01db      	lsls	r3, r3, #7
 800528a:	4013      	ands	r3, r2
 800528c:	d004      	beq.n	8005298 <USB_EPStartXfer+0xeb0>
 800528e:	187b      	adds	r3, r7, r1
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	2240      	movs	r2, #64	; 0x40
 8005294:	4013      	ands	r3, r2
 8005296:	d10d      	bne.n	80052b4 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005298:	2196      	movs	r1, #150	; 0x96
 800529a:	187b      	adds	r3, r7, r1
 800529c:	881a      	ldrh	r2, [r3, #0]
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	01db      	lsls	r3, r3, #7
 80052a2:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80052a4:	d000      	beq.n	80052a8 <USB_EPStartXfer+0xec0>
 80052a6:	e1a6      	b.n	80055f6 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80052a8:	187b      	adds	r3, r7, r1
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	2240      	movs	r2, #64	; 0x40
 80052ae:	4013      	ands	r3, r2
 80052b0:	d000      	beq.n	80052b4 <USB_EPStartXfer+0xecc>
 80052b2:	e1a0      	b.n	80055f6 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	18d3      	adds	r3, r2, r3
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	2094      	movs	r0, #148	; 0x94
 80052c4:	183b      	adds	r3, r7, r0
 80052c6:	49b5      	ldr	r1, [pc, #724]	; (800559c <USB_EPStartXfer+0x11b4>)
 80052c8:	400a      	ands	r2, r1
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	18d3      	adds	r3, r2, r3
 80052d6:	183a      	adds	r2, r7, r0
 80052d8:	8812      	ldrh	r2, [r2, #0]
 80052da:	49b1      	ldr	r1, [pc, #708]	; (80055a0 <USB_EPStartXfer+0x11b8>)
 80052dc:	430a      	orrs	r2, r1
 80052de:	b292      	uxth	r2, r2
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	e188      	b.n	80055f6 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	78db      	ldrb	r3, [r3, #3]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d000      	beq.n	80052ee <USB_EPStartXfer+0xf06>
 80052ec:	e181      	b.n	80055f2 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d90d      	bls.n	8005316 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	1d7a      	adds	r2, r7, #5
 8005300:	32ff      	adds	r2, #255	; 0xff
 8005302:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	1d7b      	adds	r3, r7, #5
 800530a:	33ff      	adds	r3, #255	; 0xff
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	1ad2      	subs	r2, r2, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	619a      	str	r2, [r3, #24]
 8005314:	e007      	b.n	8005326 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	1d7a      	adds	r2, r7, #5
 800531c:	32ff      	adds	r2, #255	; 0xff
 800531e:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d000      	beq.n	8005330 <USB_EPStartXfer+0xf48>
 800532e:	e082      	b.n	8005436 <USB_EPStartXfer+0x104e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	21cc      	movs	r1, #204	; 0xcc
 8005334:	187a      	adds	r2, r7, r1
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2250      	movs	r2, #80	; 0x50
 800533c:	5a9b      	ldrh	r3, [r3, r2]
 800533e:	b29b      	uxth	r3, r3
 8005340:	001a      	movs	r2, r3
 8005342:	187b      	adds	r3, r7, r1
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	189b      	adds	r3, r3, r2
 8005348:	187a      	adds	r2, r7, r1
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	00da      	lsls	r2, r3, #3
 8005352:	187b      	adds	r3, r7, r1
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	18d3      	adds	r3, r2, r3
 8005358:	4a92      	ldr	r2, [pc, #584]	; (80055a4 <USB_EPStartXfer+0x11bc>)
 800535a:	4694      	mov	ip, r2
 800535c:	4463      	add	r3, ip
 800535e:	21c8      	movs	r1, #200	; 0xc8
 8005360:	187a      	adds	r2, r7, r1
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	187b      	adds	r3, r7, r1
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	059b      	lsls	r3, r3, #22
 800536e:	0d9b      	lsrs	r3, r3, #22
 8005370:	b29a      	uxth	r2, r3
 8005372:	187b      	adds	r3, r7, r1
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	1d7b      	adds	r3, r7, #5
 800537a:	33ff      	adds	r3, #255	; 0xff
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b3e      	cmp	r3, #62	; 0x3e
 8005380:	d925      	bls.n	80053ce <USB_EPStartXfer+0xfe6>
 8005382:	1d7b      	adds	r3, r7, #5
 8005384:	33ff      	adds	r3, #255	; 0xff
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	21dc      	movs	r1, #220	; 0xdc
 800538c:	187a      	adds	r2, r7, r1
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	1d7b      	adds	r3, r7, #5
 8005392:	33ff      	adds	r3, #255	; 0xff
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	221f      	movs	r2, #31
 8005398:	4013      	ands	r3, r2
 800539a:	d104      	bne.n	80053a6 <USB_EPStartXfer+0xfbe>
 800539c:	187b      	adds	r3, r7, r1
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	187a      	adds	r2, r7, r1
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	21c8      	movs	r1, #200	; 0xc8
 80053a8:	187b      	adds	r3, r7, r1
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	23dc      	movs	r3, #220	; 0xdc
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	029b      	lsls	r3, r3, #10
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	4313      	orrs	r3, r2
 80053be:	b29b      	uxth	r3, r3
 80053c0:	4a79      	ldr	r2, [pc, #484]	; (80055a8 <USB_EPStartXfer+0x11c0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	187b      	adds	r3, r7, r1
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	801a      	strh	r2, [r3, #0]
 80053cc:	e058      	b.n	8005480 <USB_EPStartXfer+0x1098>
 80053ce:	1d7b      	adds	r3, r7, #5
 80053d0:	33ff      	adds	r3, #255	; 0xff
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10b      	bne.n	80053f0 <USB_EPStartXfer+0x1008>
 80053d8:	21c8      	movs	r1, #200	; 0xc8
 80053da:	187b      	adds	r3, r7, r1
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	4a71      	ldr	r2, [pc, #452]	; (80055a8 <USB_EPStartXfer+0x11c0>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	187b      	adds	r3, r7, r1
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	e047      	b.n	8005480 <USB_EPStartXfer+0x1098>
 80053f0:	1d7b      	adds	r3, r7, #5
 80053f2:	33ff      	adds	r3, #255	; 0xff
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	21dc      	movs	r1, #220	; 0xdc
 80053fa:	187a      	adds	r2, r7, r1
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	1d7b      	adds	r3, r7, #5
 8005400:	33ff      	adds	r3, #255	; 0xff
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2201      	movs	r2, #1
 8005406:	4013      	ands	r3, r2
 8005408:	d004      	beq.n	8005414 <USB_EPStartXfer+0x102c>
 800540a:	187b      	adds	r3, r7, r1
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3301      	adds	r3, #1
 8005410:	187a      	adds	r2, r7, r1
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	21c8      	movs	r1, #200	; 0xc8
 8005416:	187b      	adds	r3, r7, r1
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29a      	uxth	r2, r3
 800541e:	23dc      	movs	r3, #220	; 0xdc
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	029b      	lsls	r3, r3, #10
 8005428:	b29b      	uxth	r3, r3
 800542a:	4313      	orrs	r3, r2
 800542c:	b29a      	uxth	r2, r3
 800542e:	187b      	adds	r3, r7, r1
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e024      	b.n	8005480 <USB_EPStartXfer+0x1098>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	785b      	ldrb	r3, [r3, #1]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d120      	bne.n	8005480 <USB_EPStartXfer+0x1098>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	21d4      	movs	r1, #212	; 0xd4
 8005442:	187a      	adds	r2, r7, r1
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2250      	movs	r2, #80	; 0x50
 800544a:	5a9b      	ldrh	r3, [r3, r2]
 800544c:	b29b      	uxth	r3, r3
 800544e:	001a      	movs	r2, r3
 8005450:	187b      	adds	r3, r7, r1
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	189b      	adds	r3, r3, r2
 8005456:	187a      	adds	r2, r7, r1
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	00da      	lsls	r2, r3, #3
 8005460:	187b      	adds	r3, r7, r1
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	18d3      	adds	r3, r2, r3
 8005466:	4a4f      	ldr	r2, [pc, #316]	; (80055a4 <USB_EPStartXfer+0x11bc>)
 8005468:	4694      	mov	ip, r2
 800546a:	4463      	add	r3, ip
 800546c:	21d0      	movs	r1, #208	; 0xd0
 800546e:	187a      	adds	r2, r7, r1
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	1d7b      	adds	r3, r7, #5
 8005474:	33ff      	adds	r3, #255	; 0xff
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	b29a      	uxth	r2, r3
 800547a:	187b      	adds	r3, r7, r1
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	801a      	strh	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	22c4      	movs	r2, #196	; 0xc4
 8005484:	18ba      	adds	r2, r7, r2
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d000      	beq.n	8005492 <USB_EPStartXfer+0x10aa>
 8005490:	e08c      	b.n	80055ac <USB_EPStartXfer+0x11c4>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	21bc      	movs	r1, #188	; 0xbc
 8005496:	187a      	adds	r2, r7, r1
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2250      	movs	r2, #80	; 0x50
 800549e:	5a9b      	ldrh	r3, [r3, r2]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	001a      	movs	r2, r3
 80054a4:	187b      	adds	r3, r7, r1
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	189b      	adds	r3, r3, r2
 80054aa:	187a      	adds	r2, r7, r1
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	00da      	lsls	r2, r3, #3
 80054b4:	187b      	adds	r3, r7, r1
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	18d3      	adds	r3, r2, r3
 80054ba:	4a37      	ldr	r2, [pc, #220]	; (8005598 <USB_EPStartXfer+0x11b0>)
 80054bc:	4694      	mov	ip, r2
 80054be:	4463      	add	r3, ip
 80054c0:	21b8      	movs	r1, #184	; 0xb8
 80054c2:	187a      	adds	r2, r7, r1
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	187b      	adds	r3, r7, r1
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	059b      	lsls	r3, r3, #22
 80054d0:	0d9b      	lsrs	r3, r3, #22
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	187b      	adds	r3, r7, r1
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	1d7b      	adds	r3, r7, #5
 80054dc:	33ff      	adds	r3, #255	; 0xff
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b3e      	cmp	r3, #62	; 0x3e
 80054e2:	d925      	bls.n	8005530 <USB_EPStartXfer+0x1148>
 80054e4:	1d7b      	adds	r3, r7, #5
 80054e6:	33ff      	adds	r3, #255	; 0xff
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	21d8      	movs	r1, #216	; 0xd8
 80054ee:	187a      	adds	r2, r7, r1
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	1d7b      	adds	r3, r7, #5
 80054f4:	33ff      	adds	r3, #255	; 0xff
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	221f      	movs	r2, #31
 80054fa:	4013      	ands	r3, r2
 80054fc:	d104      	bne.n	8005508 <USB_EPStartXfer+0x1120>
 80054fe:	187b      	adds	r3, r7, r1
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3b01      	subs	r3, #1
 8005504:	187a      	adds	r2, r7, r1
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	21b8      	movs	r1, #184	; 0xb8
 800550a:	187b      	adds	r3, r7, r1
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29a      	uxth	r2, r3
 8005512:	23d8      	movs	r3, #216	; 0xd8
 8005514:	18fb      	adds	r3, r7, r3
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	029b      	lsls	r3, r3, #10
 800551c:	b29b      	uxth	r3, r3
 800551e:	4313      	orrs	r3, r2
 8005520:	b29b      	uxth	r3, r3
 8005522:	4a21      	ldr	r2, [pc, #132]	; (80055a8 <USB_EPStartXfer+0x11c0>)
 8005524:	4313      	orrs	r3, r2
 8005526:	b29a      	uxth	r2, r3
 8005528:	187b      	adds	r3, r7, r1
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	801a      	strh	r2, [r3, #0]
 800552e:	e062      	b.n	80055f6 <USB_EPStartXfer+0x120e>
 8005530:	1d7b      	adds	r3, r7, #5
 8005532:	33ff      	adds	r3, #255	; 0xff
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10b      	bne.n	8005552 <USB_EPStartXfer+0x116a>
 800553a:	21b8      	movs	r1, #184	; 0xb8
 800553c:	187b      	adds	r3, r7, r1
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <USB_EPStartXfer+0x11c0>)
 8005546:	4313      	orrs	r3, r2
 8005548:	b29a      	uxth	r2, r3
 800554a:	187b      	adds	r3, r7, r1
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	801a      	strh	r2, [r3, #0]
 8005550:	e051      	b.n	80055f6 <USB_EPStartXfer+0x120e>
 8005552:	1d7b      	adds	r3, r7, #5
 8005554:	33ff      	adds	r3, #255	; 0xff
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	085b      	lsrs	r3, r3, #1
 800555a:	21d8      	movs	r1, #216	; 0xd8
 800555c:	187a      	adds	r2, r7, r1
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	1d7b      	adds	r3, r7, #5
 8005562:	33ff      	adds	r3, #255	; 0xff
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2201      	movs	r2, #1
 8005568:	4013      	ands	r3, r2
 800556a:	d004      	beq.n	8005576 <USB_EPStartXfer+0x118e>
 800556c:	187b      	adds	r3, r7, r1
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3301      	adds	r3, #1
 8005572:	187a      	adds	r2, r7, r1
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	21b8      	movs	r1, #184	; 0xb8
 8005578:	187b      	adds	r3, r7, r1
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	b29a      	uxth	r2, r3
 8005580:	23d8      	movs	r3, #216	; 0xd8
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	029b      	lsls	r3, r3, #10
 800558a:	b29b      	uxth	r3, r3
 800558c:	4313      	orrs	r3, r2
 800558e:	b29a      	uxth	r2, r3
 8005590:	187b      	adds	r3, r7, r1
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	801a      	strh	r2, [r3, #0]
 8005596:	e02e      	b.n	80055f6 <USB_EPStartXfer+0x120e>
 8005598:	00000406 	.word	0x00000406
 800559c:	ffff8f8f 	.word	0xffff8f8f
 80055a0:	ffff80c0 	.word	0xffff80c0
 80055a4:	00000402 	.word	0x00000402
 80055a8:	ffff8000 	.word	0xffff8000
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d120      	bne.n	80055f6 <USB_EPStartXfer+0x120e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2250      	movs	r2, #80	; 0x50
 80055b8:	5a9b      	ldrh	r3, [r3, r2]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	001a      	movs	r2, r3
 80055be:	21c4      	movs	r1, #196	; 0xc4
 80055c0:	187b      	adds	r3, r7, r1
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	189b      	adds	r3, r3, r2
 80055c6:	187a      	adds	r2, r7, r1
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	00da      	lsls	r2, r3, #3
 80055d0:	187b      	adds	r3, r7, r1
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	18d3      	adds	r3, r2, r3
 80055d6:	4a1d      	ldr	r2, [pc, #116]	; (800564c <USB_EPStartXfer+0x1264>)
 80055d8:	4694      	mov	ip, r2
 80055da:	4463      	add	r3, ip
 80055dc:	21c0      	movs	r1, #192	; 0xc0
 80055de:	187a      	adds	r2, r7, r1
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	1d7b      	adds	r3, r7, #5
 80055e4:	33ff      	adds	r3, #255	; 0xff
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	187b      	adds	r3, r7, r1
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	e001      	b.n	80055f6 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e025      	b.n	8005642 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	18d3      	adds	r3, r2, r3
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29a      	uxth	r2, r3
 8005604:	208a      	movs	r0, #138	; 0x8a
 8005606:	183b      	adds	r3, r7, r0
 8005608:	4911      	ldr	r1, [pc, #68]	; (8005650 <USB_EPStartXfer+0x1268>)
 800560a:	400a      	ands	r2, r1
 800560c:	801a      	strh	r2, [r3, #0]
 800560e:	183b      	adds	r3, r7, r0
 8005610:	183a      	adds	r2, r7, r0
 8005612:	8812      	ldrh	r2, [r2, #0]
 8005614:	2180      	movs	r1, #128	; 0x80
 8005616:	0149      	lsls	r1, r1, #5
 8005618:	404a      	eors	r2, r1
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	183b      	adds	r3, r7, r0
 800561e:	183a      	adds	r2, r7, r0
 8005620:	8812      	ldrh	r2, [r2, #0]
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	0189      	lsls	r1, r1, #6
 8005626:	404a      	eors	r2, r1
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	18d3      	adds	r3, r2, r3
 8005634:	183a      	adds	r2, r7, r0
 8005636:	8812      	ldrh	r2, [r2, #0]
 8005638:	4906      	ldr	r1, [pc, #24]	; (8005654 <USB_EPStartXfer+0x126c>)
 800563a:	430a      	orrs	r2, r1
 800563c:	b292      	uxth	r2, r2
 800563e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	0018      	movs	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	b043      	add	sp, #268	; 0x10c
 8005648:	bd90      	pop	{r4, r7, pc}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	00000406 	.word	0x00000406
 8005650:	ffffbf8f 	.word	0xffffbf8f
 8005654:	ffff8080 	.word	0xffff8080

08005658 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01d      	beq.n	80056a6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	18d3      	adds	r3, r2, r3
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29a      	uxth	r2, r3
 8005678:	200c      	movs	r0, #12
 800567a:	183b      	adds	r3, r7, r0
 800567c:	491b      	ldr	r1, [pc, #108]	; (80056ec <USB_EPSetStall+0x94>)
 800567e:	400a      	ands	r2, r1
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	183b      	adds	r3, r7, r0
 8005684:	183a      	adds	r2, r7, r0
 8005686:	8812      	ldrh	r2, [r2, #0]
 8005688:	2110      	movs	r1, #16
 800568a:	404a      	eors	r2, r1
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	18d3      	adds	r3, r2, r3
 8005698:	183a      	adds	r2, r7, r0
 800569a:	8812      	ldrh	r2, [r2, #0]
 800569c:	4914      	ldr	r1, [pc, #80]	; (80056f0 <USB_EPSetStall+0x98>)
 800569e:	430a      	orrs	r2, r1
 80056a0:	b292      	uxth	r2, r2
 80056a2:	801a      	strh	r2, [r3, #0]
 80056a4:	e01d      	b.n	80056e2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	18d3      	adds	r3, r2, r3
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	200e      	movs	r0, #14
 80056b6:	183b      	adds	r3, r7, r0
 80056b8:	490e      	ldr	r1, [pc, #56]	; (80056f4 <USB_EPSetStall+0x9c>)
 80056ba:	400a      	ands	r2, r1
 80056bc:	801a      	strh	r2, [r3, #0]
 80056be:	183b      	adds	r3, r7, r0
 80056c0:	183a      	adds	r2, r7, r0
 80056c2:	8812      	ldrh	r2, [r2, #0]
 80056c4:	2180      	movs	r1, #128	; 0x80
 80056c6:	0149      	lsls	r1, r1, #5
 80056c8:	404a      	eors	r2, r1
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	18d3      	adds	r3, r2, r3
 80056d6:	183a      	adds	r2, r7, r0
 80056d8:	8812      	ldrh	r2, [r2, #0]
 80056da:	4905      	ldr	r1, [pc, #20]	; (80056f0 <USB_EPSetStall+0x98>)
 80056dc:	430a      	orrs	r2, r1
 80056de:	b292      	uxth	r2, r2
 80056e0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	0018      	movs	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b004      	add	sp, #16
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	ffff8fbf 	.word	0xffff8fbf
 80056f0:	ffff8080 	.word	0xffff8080
 80056f4:	ffffbf8f 	.word	0xffffbf8f

080056f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	7b1b      	ldrb	r3, [r3, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d000      	beq.n	800570c <USB_EPClearStall+0x14>
 800570a:	e095      	b.n	8005838 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d046      	beq.n	80057a2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	18d2      	adds	r2, r2, r3
 800571e:	2110      	movs	r1, #16
 8005720:	187b      	adds	r3, r7, r1
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	801a      	strh	r2, [r3, #0]
 8005726:	187b      	adds	r3, r7, r1
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	2240      	movs	r2, #64	; 0x40
 800572c:	4013      	ands	r3, r2
 800572e:	d016      	beq.n	800575e <USB_EPClearStall+0x66>
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	18d3      	adds	r3, r2, r3
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29a      	uxth	r2, r3
 800573e:	200e      	movs	r0, #14
 8005740:	183b      	adds	r3, r7, r0
 8005742:	4940      	ldr	r1, [pc, #256]	; (8005844 <USB_EPClearStall+0x14c>)
 8005744:	400a      	ands	r2, r1
 8005746:	801a      	strh	r2, [r3, #0]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	18d3      	adds	r3, r2, r3
 8005752:	183a      	adds	r2, r7, r0
 8005754:	8812      	ldrh	r2, [r2, #0]
 8005756:	493c      	ldr	r1, [pc, #240]	; (8005848 <USB_EPClearStall+0x150>)
 8005758:	430a      	orrs	r2, r1
 800575a:	b292      	uxth	r2, r2
 800575c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	78db      	ldrb	r3, [r3, #3]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d068      	beq.n	8005838 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	18d3      	adds	r3, r2, r3
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29a      	uxth	r2, r3
 8005774:	200c      	movs	r0, #12
 8005776:	183b      	adds	r3, r7, r0
 8005778:	4934      	ldr	r1, [pc, #208]	; (800584c <USB_EPClearStall+0x154>)
 800577a:	400a      	ands	r2, r1
 800577c:	801a      	strh	r2, [r3, #0]
 800577e:	183b      	adds	r3, r7, r0
 8005780:	183a      	adds	r2, r7, r0
 8005782:	8812      	ldrh	r2, [r2, #0]
 8005784:	2120      	movs	r1, #32
 8005786:	404a      	eors	r2, r1
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	18d3      	adds	r3, r2, r3
 8005794:	183a      	adds	r2, r7, r0
 8005796:	8812      	ldrh	r2, [r2, #0]
 8005798:	492d      	ldr	r1, [pc, #180]	; (8005850 <USB_EPClearStall+0x158>)
 800579a:	430a      	orrs	r2, r1
 800579c:	b292      	uxth	r2, r2
 800579e:	801a      	strh	r2, [r3, #0]
 80057a0:	e04a      	b.n	8005838 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	18d2      	adds	r2, r2, r3
 80057ac:	2116      	movs	r1, #22
 80057ae:	187b      	adds	r3, r7, r1
 80057b0:	8812      	ldrh	r2, [r2, #0]
 80057b2:	801a      	strh	r2, [r3, #0]
 80057b4:	187b      	adds	r3, r7, r1
 80057b6:	881a      	ldrh	r2, [r3, #0]
 80057b8:	2380      	movs	r3, #128	; 0x80
 80057ba:	01db      	lsls	r3, r3, #7
 80057bc:	4013      	ands	r3, r2
 80057be:	d016      	beq.n	80057ee <USB_EPClearStall+0xf6>
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	18d3      	adds	r3, r2, r3
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	2014      	movs	r0, #20
 80057d0:	183b      	adds	r3, r7, r0
 80057d2:	491c      	ldr	r1, [pc, #112]	; (8005844 <USB_EPClearStall+0x14c>)
 80057d4:	400a      	ands	r2, r1
 80057d6:	801a      	strh	r2, [r3, #0]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	18d3      	adds	r3, r2, r3
 80057e2:	183a      	adds	r2, r7, r0
 80057e4:	8812      	ldrh	r2, [r2, #0]
 80057e6:	491b      	ldr	r1, [pc, #108]	; (8005854 <USB_EPClearStall+0x15c>)
 80057e8:	430a      	orrs	r2, r1
 80057ea:	b292      	uxth	r2, r2
 80057ec:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	18d3      	adds	r3, r2, r3
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	2012      	movs	r0, #18
 80057fe:	183b      	adds	r3, r7, r0
 8005800:	4915      	ldr	r1, [pc, #84]	; (8005858 <USB_EPClearStall+0x160>)
 8005802:	400a      	ands	r2, r1
 8005804:	801a      	strh	r2, [r3, #0]
 8005806:	183b      	adds	r3, r7, r0
 8005808:	183a      	adds	r2, r7, r0
 800580a:	8812      	ldrh	r2, [r2, #0]
 800580c:	2180      	movs	r1, #128	; 0x80
 800580e:	0149      	lsls	r1, r1, #5
 8005810:	404a      	eors	r2, r1
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	183b      	adds	r3, r7, r0
 8005816:	183a      	adds	r2, r7, r0
 8005818:	8812      	ldrh	r2, [r2, #0]
 800581a:	2180      	movs	r1, #128	; 0x80
 800581c:	0189      	lsls	r1, r1, #6
 800581e:	404a      	eors	r2, r1
 8005820:	801a      	strh	r2, [r3, #0]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	18d3      	adds	r3, r2, r3
 800582c:	183a      	adds	r2, r7, r0
 800582e:	8812      	ldrh	r2, [r2, #0]
 8005830:	4907      	ldr	r1, [pc, #28]	; (8005850 <USB_EPClearStall+0x158>)
 8005832:	430a      	orrs	r2, r1
 8005834:	b292      	uxth	r2, r2
 8005836:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	0018      	movs	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	b006      	add	sp, #24
 8005840:	bd80      	pop	{r7, pc}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	ffff8f8f 	.word	0xffff8f8f
 8005848:	ffff80c0 	.word	0xffff80c0
 800584c:	ffff8fbf 	.word	0xffff8fbf
 8005850:	ffff8080 	.word	0xffff8080
 8005854:	ffffc080 	.word	0xffffc080
 8005858:	ffffbf8f 	.word	0xffffbf8f

0800585c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	000a      	movs	r2, r1
 8005866:	1cfb      	adds	r3, r7, #3
 8005868:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800586a:	1cfb      	adds	r3, r7, #3
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	224c      	movs	r2, #76	; 0x4c
 8005876:	2180      	movs	r1, #128	; 0x80
 8005878:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	0018      	movs	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	b002      	add	sp, #8
 8005882:	bd80      	pop	{r7, pc}

08005884 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2258      	movs	r2, #88	; 0x58
 8005890:	5a9b      	ldrh	r3, [r3, r2]
 8005892:	b29b      	uxth	r3, r3
 8005894:	4a05      	ldr	r2, [pc, #20]	; (80058ac <USB_DevConnect+0x28>)
 8005896:	4313      	orrs	r3, r2
 8005898:	b299      	uxth	r1, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2258      	movs	r2, #88	; 0x58
 800589e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	0018      	movs	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b002      	add	sp, #8
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	ffff8000 	.word	0xffff8000

080058b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2244      	movs	r2, #68	; 0x44
 80058bc:	5a9b      	ldrh	r3, [r3, r2]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80058c2:	68fb      	ldr	r3, [r7, #12]
}
 80058c4:	0018      	movs	r0, r3
 80058c6:	46bd      	mov	sp, r7
 80058c8:	b004      	add	sp, #16
 80058ca:	bd80      	pop	{r7, pc}

080058cc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	; 0x28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	0019      	movs	r1, r3
 80058d8:	1dbb      	adds	r3, r7, #6
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	1d3b      	adds	r3, r7, #4
 80058de:	1c0a      	adds	r2, r1, #0
 80058e0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058e2:	1d3b      	adds	r3, r7, #4
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	3301      	adds	r3, #1
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058f4:	1dbb      	adds	r3, r7, #6
 80058f6:	881a      	ldrh	r2, [r3, #0]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	18d3      	adds	r3, r2, r3
 80058fc:	2280      	movs	r2, #128	; 0x80
 80058fe:	00d2      	lsls	r2, r2, #3
 8005900:	4694      	mov	ip, r2
 8005902:	4463      	add	r3, ip
 8005904:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
 800590a:	e020      	b.n	800594e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	781a      	ldrb	r2, [r3, #0]
 8005910:	2112      	movs	r1, #18
 8005912:	187b      	adds	r3, r7, r1
 8005914:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	3301      	adds	r3, #1
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	b21a      	sxth	r2, r3
 8005920:	187b      	adds	r3, r7, r1
 8005922:	2000      	movs	r0, #0
 8005924:	5e1b      	ldrsh	r3, [r3, r0]
 8005926:	4313      	orrs	r3, r2
 8005928:	b21a      	sxth	r2, r3
 800592a:	187b      	adds	r3, r7, r1
 800592c:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	187a      	adds	r2, r7, r1
 8005932:	8812      	ldrh	r2, [r2, #0]
 8005934:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	3302      	adds	r3, #2
 800593a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	3301      	adds	r3, #1
 8005940:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	3301      	adds	r3, #1
 8005946:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	3b01      	subs	r3, #1
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1db      	bne.n	800590c <USB_WritePMA+0x40>
  }
}
 8005954:	46c0      	nop			; (mov r8, r8)
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	46bd      	mov	sp, r7
 800595a:	b00a      	add	sp, #40	; 0x28
 800595c:	bd80      	pop	{r7, pc}

0800595e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b08a      	sub	sp, #40	; 0x28
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	0019      	movs	r1, r3
 800596a:	1dbb      	adds	r3, r7, #6
 800596c:	801a      	strh	r2, [r3, #0]
 800596e:	1d3b      	adds	r3, r7, #4
 8005970:	1c0a      	adds	r2, r1, #0
 8005972:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005974:	1d3b      	adds	r3, r7, #4
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	b29b      	uxth	r3, r3
 800597c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005986:	1dbb      	adds	r3, r7, #6
 8005988:	881a      	ldrh	r2, [r3, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	18d3      	adds	r3, r2, r3
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	00d2      	lsls	r2, r2, #3
 8005992:	4694      	mov	ip, r2
 8005994:	4463      	add	r3, ip
 8005996:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
 800599c:	e018      	b.n	80059d0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	3302      	adds	r3, #2
 80059aa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	3301      	adds	r3, #1
 80059b8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	0a1b      	lsrs	r3, r3, #8
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	3301      	adds	r3, #1
 80059c8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	3b01      	subs	r3, #1
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e3      	bne.n	800599e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80059d6:	1d3b      	adds	r3, r7, #4
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	2201      	movs	r2, #1
 80059dc:	4013      	ands	r3, r2
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d007      	beq.n	80059f4 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	701a      	strb	r2, [r3, #0]
  }
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b00a      	add	sp, #40	; 0x28
 80059fa:	bd80      	pop	{r7, pc}

080059fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	000a      	movs	r2, r1
 8005a06:	1cfb      	adds	r3, r7, #3
 8005a08:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005a0a:	230f      	movs	r3, #15
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	2200      	movs	r2, #0
 8005a10:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	7c1b      	ldrb	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d116      	bne.n	8005a48 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a1a:	2380      	movs	r3, #128	; 0x80
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	2181      	movs	r1, #129	; 0x81
 8005a24:	f002 f88d 	bl	8007b42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a2e:	2380      	movs	r3, #128	; 0x80
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	2101      	movs	r1, #1
 8005a38:	f002 f883 	bl	8007b42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	23b6      	movs	r3, #182	; 0xb6
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	2101      	movs	r1, #1
 8005a44:	50d1      	str	r1, [r2, r3]
 8005a46:	e013      	b.n	8005a70 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	2340      	movs	r3, #64	; 0x40
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	2181      	movs	r1, #129	; 0x81
 8005a50:	f002 f877 	bl	8007b42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	2340      	movs	r3, #64	; 0x40
 8005a5e:	2202      	movs	r2, #2
 8005a60:	2101      	movs	r1, #1
 8005a62:	f002 f86e 	bl	8007b42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	23b6      	movs	r3, #182	; 0xb6
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	2308      	movs	r3, #8
 8005a74:	2203      	movs	r2, #3
 8005a76:	2182      	movs	r1, #130	; 0x82
 8005a78:	f002 f863 	bl	8007b42 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a82:	2387      	movs	r3, #135	; 0x87
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	0018      	movs	r0, r3
 8005a88:	f002 f9f4 	bl	8007e74 <USBD_static_malloc>
 8005a8c:	0001      	movs	r1, r0
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	23ae      	movs	r3, #174	; 0xae
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	23ae      	movs	r3, #174	; 0xae
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	58d3      	ldr	r3, [r2, r3]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d104      	bne.n	8005aac <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8005aa2:	230f      	movs	r3, #15
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	e02c      	b.n	8005b06 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	23ae      	movs	r3, #174	; 0xae
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	58d3      	ldr	r3, [r2, r3]
 8005ab4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	23af      	movs	r3, #175	; 0xaf
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	58d3      	ldr	r3, [r2, r3]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	2385      	movs	r3, #133	; 0x85
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	2100      	movs	r1, #0
 8005aca:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	2386      	movs	r3, #134	; 0x86
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	7c1b      	ldrb	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	2381      	movs	r3, #129	; 0x81
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	58d2      	ldr	r2, [r2, r3]
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	2101      	movs	r1, #1
 8005aee:	f002 f973 	bl	8007dd8 <USBD_LL_PrepareReceive>
 8005af2:	e008      	b.n	8005b06 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	2381      	movs	r3, #129	; 0x81
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	58d2      	ldr	r2, [r2, r3]
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	2340      	movs	r3, #64	; 0x40
 8005b00:	2101      	movs	r1, #1
 8005b02:	f002 f969 	bl	8007dd8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005b06:	230f      	movs	r3, #15
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	781b      	ldrb	r3, [r3, #0]
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b004      	add	sp, #16
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	000a      	movs	r2, r1
 8005b1e:	1cfb      	adds	r3, r7, #3
 8005b20:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005b22:	230f      	movs	r3, #15
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2181      	movs	r1, #129	; 0x81
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f002 f83e 	bl	8007bb0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f002 f836 	bl	8007bb0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	23b6      	movs	r3, #182	; 0xb6
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2182      	movs	r1, #130	; 0x82
 8005b52:	0018      	movs	r0, r3
 8005b54:	f002 f82c 	bl	8007bb0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	23ae      	movs	r3, #174	; 0xae
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	58d3      	ldr	r3, [r2, r3]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d011      	beq.n	8005b8e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	23af      	movs	r3, #175	; 0xaf
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	58d3      	ldr	r3, [r2, r3]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	23ae      	movs	r3, #174	; 0xae
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	58d3      	ldr	r3, [r2, r3]
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f002 f984 	bl	8007e8c <USBD_static_free>
    pdev->pClassData = NULL;
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	23ae      	movs	r3, #174	; 0xae
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8005b8e:	230f      	movs	r3, #15
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	781b      	ldrb	r3, [r3, #0]
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b004      	add	sp, #16
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	23ae      	movs	r3, #174	; 0xae
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	58d3      	ldr	r3, [r2, r3]
 8005bae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005bb0:	230f      	movs	r3, #15
 8005bb2:	18fb      	adds	r3, r7, r3
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8005bb8:	230c      	movs	r3, #12
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8005bc0:	2317      	movs	r3, #23
 8005bc2:	18fb      	adds	r3, r7, r3
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	001a      	movs	r2, r3
 8005bce:	2360      	movs	r3, #96	; 0x60
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d03d      	beq.n	8005c50 <USBD_CDC_Setup+0xb4>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d000      	beq.n	8005bda <USBD_CDC_Setup+0x3e>
 8005bd8:	e094      	b.n	8005d04 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	88db      	ldrh	r3, [r3, #6]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d02b      	beq.n	8005c3a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	b25b      	sxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	da12      	bge.n	8005c12 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	23af      	movs	r3, #175	; 0xaf
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	58d3      	ldr	r3, [r2, r3]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005bfa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	88d2      	ldrh	r2, [r2, #6]
 8005c00:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005c02:	6939      	ldr	r1, [r7, #16]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	88da      	ldrh	r2, [r3, #6]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f001 fbb2 	bl	8007374 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005c10:	e083      	b.n	8005d1a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	7859      	ldrb	r1, [r3, #1]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	88db      	ldrh	r3, [r3, #6]
 8005c22:	b2d9      	uxtb	r1, r3
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4a40      	ldr	r2, [pc, #256]	; (8005d28 <USBD_CDC_Setup+0x18c>)
 8005c28:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005c2a:	6939      	ldr	r1, [r7, #16]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	88da      	ldrh	r2, [r3, #6]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f001 fbd1 	bl	80073da <USBD_CtlPrepareRx>
      break;
 8005c38:	e06f      	b.n	8005d1a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	23af      	movs	r3, #175	; 0xaf
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	58d3      	ldr	r3, [r2, r3]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	7850      	ldrb	r0, [r2, #1]
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	4798      	blx	r3
      break;
 8005c4e:	e064      	b.n	8005d1a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	2b0b      	cmp	r3, #11
 8005c56:	d037      	beq.n	8005cc8 <USBD_CDC_Setup+0x12c>
 8005c58:	dc47      	bgt.n	8005cea <USBD_CDC_Setup+0x14e>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <USBD_CDC_Setup+0xc8>
 8005c5e:	2b0a      	cmp	r3, #10
 8005c60:	d019      	beq.n	8005c96 <USBD_CDC_Setup+0xfa>
 8005c62:	e042      	b.n	8005cea <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	23a7      	movs	r3, #167	; 0xa7
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	5cd3      	ldrb	r3, [r2, r3]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d107      	bne.n	8005c80 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c70:	230c      	movs	r3, #12
 8005c72:	18f9      	adds	r1, r7, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f001 fb7b 	bl	8007374 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c7e:	e040      	b.n	8005d02 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	0011      	movs	r1, r2
 8005c86:	0018      	movs	r0, r3
 8005c88:	f001 faf6 	bl	8007278 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c8c:	2317      	movs	r3, #23
 8005c8e:	18fb      	adds	r3, r7, r3
 8005c90:	2202      	movs	r2, #2
 8005c92:	701a      	strb	r2, [r3, #0]
          break;
 8005c94:	e035      	b.n	8005d02 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	23a7      	movs	r3, #167	; 0xa7
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	5cd3      	ldrb	r3, [r2, r3]
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d107      	bne.n	8005cb2 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ca2:	230f      	movs	r3, #15
 8005ca4:	18f9      	adds	r1, r7, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	0018      	movs	r0, r3
 8005cac:	f001 fb62 	bl	8007374 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cb0:	e027      	b.n	8005d02 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	0011      	movs	r1, r2
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f001 fadd 	bl	8007278 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cbe:	2317      	movs	r3, #23
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	701a      	strb	r2, [r3, #0]
          break;
 8005cc6:	e01c      	b.n	8005d02 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	23a7      	movs	r3, #167	; 0xa7
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	5cd3      	ldrb	r3, [r2, r3]
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d015      	beq.n	8005d00 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	0011      	movs	r1, r2
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f001 facc 	bl	8007278 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ce0:	2317      	movs	r3, #23
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	701a      	strb	r2, [r3, #0]
          }
          break;
 8005ce8:	e00a      	b.n	8005d00 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	0011      	movs	r1, r2
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f001 fac1 	bl	8007278 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cf6:	2317      	movs	r3, #23
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	701a      	strb	r2, [r3, #0]
          break;
 8005cfe:	e000      	b.n	8005d02 <USBD_CDC_Setup+0x166>
          break;
 8005d00:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005d02:	e00a      	b.n	8005d1a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	0011      	movs	r1, r2
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f001 fab4 	bl	8007278 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d10:	2317      	movs	r3, #23
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	2202      	movs	r2, #2
 8005d16:	701a      	strb	r2, [r3, #0]
      break;
 8005d18:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005d1a:	2317      	movs	r3, #23
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	781b      	ldrb	r3, [r3, #0]
}
 8005d20:	0018      	movs	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b006      	add	sp, #24
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	00000201 	.word	0x00000201

08005d2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	000a      	movs	r2, r1
 8005d36:	1cfb      	adds	r3, r7, #3
 8005d38:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	23ae      	movs	r3, #174	; 0xae
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	58d3      	ldr	r3, [r2, r3]
 8005d42:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	23b0      	movs	r3, #176	; 0xb0
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	58d3      	ldr	r3, [r2, r3]
 8005d4c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	23ae      	movs	r3, #174	; 0xae
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	58d3      	ldr	r3, [r2, r3]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d03e      	beq.n	8005dd8 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d5a:	1cfb      	adds	r3, r7, #3
 8005d5c:	781a      	ldrb	r2, [r3, #0]
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	0013      	movs	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	189b      	adds	r3, r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	18cb      	adds	r3, r1, r3
 8005d6a:	331c      	adds	r3, #28
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d02b      	beq.n	8005dca <USBD_CDC_DataIn+0x9e>
 8005d72:	1cfb      	adds	r3, r7, #3
 8005d74:	781a      	ldrb	r2, [r3, #0]
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	0013      	movs	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	189b      	adds	r3, r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	18cb      	adds	r3, r1, r3
 8005d82:	331c      	adds	r3, #28
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	1cfb      	adds	r3, r7, #3
 8005d88:	781a      	ldrb	r2, [r3, #0]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	0013      	movs	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	189b      	adds	r3, r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	18cb      	adds	r3, r1, r3
 8005d96:	3338      	adds	r3, #56	; 0x38
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	0019      	movs	r1, r3
 8005d9c:	f7fa fa3a 	bl	8000214 <__aeabi_uidivmod>
 8005da0:	1e0b      	subs	r3, r1, #0
 8005da2:	d112      	bne.n	8005dca <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005da4:	1cfb      	adds	r3, r7, #3
 8005da6:	781a      	ldrb	r2, [r3, #0]
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	0013      	movs	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	189b      	adds	r3, r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	18cb      	adds	r3, r1, r3
 8005db4:	331c      	adds	r3, #28
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005dba:	1cfb      	adds	r3, r7, #3
 8005dbc:	7819      	ldrb	r1, [r3, #0]
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f001 ffd1 	bl	8007d6a <USBD_LL_Transmit>
 8005dc8:	e004      	b.n	8005dd4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	2385      	movs	r3, #133	; 0x85
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e000      	b.n	8005dda <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8005dd8:	2302      	movs	r3, #2
  }
}
 8005dda:	0018      	movs	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	b004      	add	sp, #16
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	000a      	movs	r2, r1
 8005dec:	1cfb      	adds	r3, r7, #3
 8005dee:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	23ae      	movs	r3, #174	; 0xae
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	58d3      	ldr	r3, [r2, r3]
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005dfa:	1cfb      	adds	r3, r7, #3
 8005dfc:	781a      	ldrb	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	0011      	movs	r1, r2
 8005e02:	0018      	movs	r0, r3
 8005e04:	f002 f81f 	bl	8007e46 <USBD_LL_GetRxDataSize>
 8005e08:	0001      	movs	r1, r0
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	2383      	movs	r3, #131	; 0x83
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	23ae      	movs	r3, #174	; 0xae
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	58d3      	ldr	r3, [r2, r3]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d011      	beq.n	8005e42 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	23af      	movs	r3, #175	; 0xaf
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	58d3      	ldr	r3, [r2, r3]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	68f9      	ldr	r1, [r7, #12]
 8005e2a:	2381      	movs	r3, #129	; 0x81
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	58c8      	ldr	r0, [r1, r3]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2183      	movs	r1, #131	; 0x83
 8005e34:	0089      	lsls	r1, r1, #2
 8005e36:	468c      	mov	ip, r1
 8005e38:	4463      	add	r3, ip
 8005e3a:	0019      	movs	r1, r3
 8005e3c:	4790      	blx	r2

    return USBD_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e000      	b.n	8005e44 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8005e42:	2302      	movs	r3, #2
  }
}
 8005e44:	0018      	movs	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b004      	add	sp, #16
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e4c:	b590      	push	{r4, r7, lr}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	23ae      	movs	r3, #174	; 0xae
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	58d3      	ldr	r3, [r2, r3]
 8005e5c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	23af      	movs	r3, #175	; 0xaf
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	58d3      	ldr	r3, [r2, r3]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d019      	beq.n	8005e9e <USBD_CDC_EP0_RxReady+0x52>
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	2380      	movs	r3, #128	; 0x80
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	5cd3      	ldrb	r3, [r2, r3]
 8005e72:	2bff      	cmp	r3, #255	; 0xff
 8005e74:	d013      	beq.n	8005e9e <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	23af      	movs	r3, #175	; 0xaf
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	58d3      	ldr	r3, [r2, r3]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	68f9      	ldr	r1, [r7, #12]
 8005e82:	2280      	movs	r2, #128	; 0x80
 8005e84:	0092      	lsls	r2, r2, #2
 8005e86:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8005e88:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4c06      	ldr	r4, [pc, #24]	; (8005ea8 <USBD_CDC_EP0_RxReady+0x5c>)
 8005e8e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e90:	b292      	uxth	r2, r2
 8005e92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	2380      	movs	r3, #128	; 0x80
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	21ff      	movs	r1, #255	; 0xff
 8005e9c:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b005      	add	sp, #20
 8005ea6:	bd90      	pop	{r4, r7, pc}
 8005ea8:	00000201 	.word	0x00000201

08005eac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2243      	movs	r2, #67	; 0x43
 8005eb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005eba:	4b02      	ldr	r3, [pc, #8]	; (8005ec4 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b002      	add	sp, #8
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20000094 	.word	0x20000094

08005ec8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2243      	movs	r2, #67	; 0x43
 8005ed4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005ed6:	4b02      	ldr	r3, [pc, #8]	; (8005ee0 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8005ed8:	0018      	movs	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	b002      	add	sp, #8
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000050 	.word	0x20000050

08005ee4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2243      	movs	r2, #67	; 0x43
 8005ef0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005ef2:	4b02      	ldr	r3, [pc, #8]	; (8005efc <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b002      	add	sp, #8
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	200000d8 	.word	0x200000d8

08005f00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	220a      	movs	r2, #10
 8005f0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005f0e:	4b02      	ldr	r3, [pc, #8]	; (8005f18 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8005f10:	0018      	movs	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b002      	add	sp, #8
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	2000000c 	.word	0x2000000c

08005f1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005f26:	200f      	movs	r0, #15
 8005f28:	183b      	adds	r3, r7, r0
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	23af      	movs	r3, #175	; 0xaf
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8005f3e:	183b      	adds	r3, r7, r0
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005f44:	230f      	movs	r3, #15
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	781b      	ldrb	r3, [r3, #0]
}
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	b004      	add	sp, #16
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b086      	sub	sp, #24
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	1dbb      	adds	r3, r7, #6
 8005f5e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	23ae      	movs	r3, #174	; 0xae
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	58d3      	ldr	r3, [r2, r3]
 8005f68:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	2382      	movs	r3, #130	; 0x82
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8005f74:	1dbb      	adds	r3, r7, #6
 8005f76:	8819      	ldrh	r1, [r3, #0]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	2384      	movs	r3, #132	; 0x84
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	0018      	movs	r0, r3
 8005f84:	46bd      	mov	sp, r7
 8005f86:	b006      	add	sp, #24
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	23ae      	movs	r3, #174	; 0xae
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	58d3      	ldr	r3, [r2, r3]
 8005f9c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	2381      	movs	r3, #129	; 0x81
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	0018      	movs	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b004      	add	sp, #16
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	23ae      	movs	r3, #174	; 0xae
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	58d3      	ldr	r3, [r2, r3]
 8005fc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	23ae      	movs	r3, #174	; 0xae
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	58d3      	ldr	r3, [r2, r3]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d022      	beq.n	8006016 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	2385      	movs	r3, #133	; 0x85
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	58d3      	ldr	r3, [r2, r3]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d11a      	bne.n	8006012 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	2385      	movs	r3, #133	; 0x85
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	2384      	movs	r3, #132	; 0x84
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	58d2      	ldr	r2, [r2, r3]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	2382      	movs	r3, #130	; 0x82
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	2384      	movs	r3, #132	; 0x84
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006002:	b29b      	uxth	r3, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	000a      	movs	r2, r1
 8006008:	2181      	movs	r1, #129	; 0x81
 800600a:	f001 feae 	bl	8007d6a <USBD_LL_Transmit>

      return USBD_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	e002      	b.n	8006018 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8006016:	2302      	movs	r3, #2
  }
}
 8006018:	0018      	movs	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	b004      	add	sp, #16
 800601e:	bd80      	pop	{r7, pc}

08006020 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	23ae      	movs	r3, #174	; 0xae
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	58d3      	ldr	r3, [r2, r3]
 8006030:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	23ae      	movs	r3, #174	; 0xae
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	58d3      	ldr	r3, [r2, r3]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d019      	beq.n	8006072 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	7c1b      	ldrb	r3, [r3, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	2381      	movs	r3, #129	; 0x81
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	58d2      	ldr	r2, [r2, r3]
 800604e:	2380      	movs	r3, #128	; 0x80
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	2101      	movs	r1, #1
 8006056:	f001 febf 	bl	8007dd8 <USBD_LL_PrepareReceive>
 800605a:	e008      	b.n	800606e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	2381      	movs	r3, #129	; 0x81
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	58d2      	ldr	r2, [r2, r3]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	2340      	movs	r3, #64	; 0x40
 8006068:	2101      	movs	r1, #1
 800606a:	f001 feb5 	bl	8007dd8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	e000      	b.n	8006074 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8006072:	2302      	movs	r3, #2
  }
}
 8006074:	0018      	movs	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	b004      	add	sp, #16
 800607a:	bd80      	pop	{r7, pc}

0800607c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	1dfb      	adds	r3, r7, #7
 8006088:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006090:	2302      	movs	r3, #2
 8006092:	e020      	b.n	80060d6 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	23ad      	movs	r3, #173	; 0xad
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	58d3      	ldr	r3, [r2, r3]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d004      	beq.n	80060aa <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	23ad      	movs	r3, #173	; 0xad
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	2100      	movs	r1, #0
 80060a8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	23ac      	movs	r3, #172	; 0xac
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	23a7      	movs	r3, #167	; 0xa7
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	2101      	movs	r1, #1
 80060c2:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	1dfa      	adds	r2, r7, #7
 80060c8:	7812      	ldrb	r2, [r2, #0]
 80060ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	0018      	movs	r0, r3
 80060d0:	f001 fcae 	bl	8007a30 <USBD_LL_Init>

  return USBD_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	0018      	movs	r0, r3
 80060d8:	46bd      	mov	sp, r7
 80060da:	b004      	add	sp, #16
 80060dc:	bd80      	pop	{r7, pc}

080060de <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80060e8:	200f      	movs	r0, #15
 80060ea:	183b      	adds	r3, r7, r0
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d008      	beq.n	8006108 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	23ad      	movs	r3, #173	; 0xad
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8006100:	183b      	adds	r3, r7, r0
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	e003      	b.n	8006110 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006108:	230f      	movs	r3, #15
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	2202      	movs	r2, #2
 800610e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006110:	230f      	movs	r3, #15
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	781b      	ldrb	r3, [r3, #0]
}
 8006116:	0018      	movs	r0, r3
 8006118:	46bd      	mov	sp, r7
 800611a:	b004      	add	sp, #16
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0018      	movs	r0, r3
 800612a:	f001 fce5 	bl	8007af8 <USBD_LL_Start>

  return USBD_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	0018      	movs	r0, r3
 8006132:	46bd      	mov	sp, r7
 8006134:	b002      	add	sp, #8
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	0018      	movs	r0, r3
 8006144:	46bd      	mov	sp, r7
 8006146:	b002      	add	sp, #8
 8006148:	bd80      	pop	{r7, pc}

0800614a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800614a:	b590      	push	{r4, r7, lr}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	000a      	movs	r2, r1
 8006154:	1cfb      	adds	r3, r7, #3
 8006156:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006158:	240f      	movs	r4, #15
 800615a:	193b      	adds	r3, r7, r4
 800615c:	2202      	movs	r2, #2
 800615e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	23ad      	movs	r3, #173	; 0xad
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	58d3      	ldr	r3, [r2, r3]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00e      	beq.n	800618a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	23ad      	movs	r3, #173	; 0xad
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	58d3      	ldr	r3, [r2, r3]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	1cfa      	adds	r2, r7, #3
 8006178:	7811      	ldrb	r1, [r2, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	0010      	movs	r0, r2
 800617e:	4798      	blx	r3
 8006180:	1e03      	subs	r3, r0, #0
 8006182:	d102      	bne.n	800618a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8006184:	193b      	adds	r3, r7, r4
 8006186:	2200      	movs	r2, #0
 8006188:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800618a:	230f      	movs	r3, #15
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	781b      	ldrb	r3, [r3, #0]
}
 8006190:	0018      	movs	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	b005      	add	sp, #20
 8006196:	bd90      	pop	{r4, r7, pc}

08006198 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	000a      	movs	r2, r1
 80061a2:	1cfb      	adds	r3, r7, #3
 80061a4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	23ad      	movs	r3, #173	; 0xad
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	58d3      	ldr	r3, [r2, r3]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	1cfa      	adds	r2, r7, #3
 80061b2:	7811      	ldrb	r1, [r2, #0]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	0010      	movs	r0, r2
 80061b8:	4798      	blx	r3

  return USBD_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	0018      	movs	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	b002      	add	sp, #8
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	22aa      	movs	r2, #170	; 0xaa
 80061d2:	0092      	lsls	r2, r2, #2
 80061d4:	4694      	mov	ip, r2
 80061d6:	4463      	add	r3, ip
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	0011      	movs	r1, r2
 80061dc:	0018      	movs	r0, r3
 80061de:	f001 f810 	bl	8007202 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	23a5      	movs	r3, #165	; 0xa5
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	2101      	movs	r1, #1
 80061ea:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a23      	ldr	r2, [pc, #140]	; (800627c <USBD_LL_SetupStage+0xb8>)
 80061f0:	5a9b      	ldrh	r3, [r3, r2]
 80061f2:	0019      	movs	r1, r3
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	23a6      	movs	r3, #166	; 0xa6
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	23aa      	movs	r3, #170	; 0xaa
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	5cd3      	ldrb	r3, [r2, r3]
 8006204:	001a      	movs	r2, r3
 8006206:	231f      	movs	r3, #31
 8006208:	4013      	ands	r3, r2
 800620a:	2b02      	cmp	r3, #2
 800620c:	d019      	beq.n	8006242 <USBD_LL_SetupStage+0x7e>
 800620e:	d822      	bhi.n	8006256 <USBD_LL_SetupStage+0x92>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <USBD_LL_SetupStage+0x56>
 8006214:	2b01      	cmp	r3, #1
 8006216:	d00a      	beq.n	800622e <USBD_LL_SetupStage+0x6a>
 8006218:	e01d      	b.n	8006256 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	22aa      	movs	r2, #170	; 0xaa
 800621e:	0092      	lsls	r2, r2, #2
 8006220:	189a      	adds	r2, r3, r2
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	0011      	movs	r1, r2
 8006226:	0018      	movs	r0, r3
 8006228:	f000 fa10 	bl	800664c <USBD_StdDevReq>
      break;
 800622c:	e020      	b.n	8006270 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	22aa      	movs	r2, #170	; 0xaa
 8006232:	0092      	lsls	r2, r2, #2
 8006234:	189a      	adds	r2, r3, r2
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	0011      	movs	r1, r2
 800623a:	0018      	movs	r0, r3
 800623c:	f000 fa78 	bl	8006730 <USBD_StdItfReq>
      break;
 8006240:	e016      	b.n	8006270 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	22aa      	movs	r2, #170	; 0xaa
 8006246:	0092      	lsls	r2, r2, #2
 8006248:	189a      	adds	r2, r3, r2
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	0011      	movs	r1, r2
 800624e:	0018      	movs	r0, r3
 8006250:	f000 fac5 	bl	80067de <USBD_StdEPReq>
      break;
 8006254:	e00c      	b.n	8006270 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	23aa      	movs	r3, #170	; 0xaa
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	5cd3      	ldrb	r3, [r2, r3]
 800625e:	227f      	movs	r2, #127	; 0x7f
 8006260:	4393      	bics	r3, r2
 8006262:	b2da      	uxtb	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	0011      	movs	r1, r2
 8006268:	0018      	movs	r0, r3
 800626a:	f001 fccc 	bl	8007c06 <USBD_LL_StallEP>
      break;
 800626e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	0018      	movs	r0, r3
 8006274:	46bd      	mov	sp, r7
 8006276:	b002      	add	sp, #8
 8006278:	bd80      	pop	{r7, pc}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	000002ae 	.word	0x000002ae

08006280 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	200b      	movs	r0, #11
 800628c:	183b      	adds	r3, r7, r0
 800628e:	1c0a      	adds	r2, r1, #0
 8006290:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006292:	183b      	adds	r3, r7, r0
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d154      	bne.n	8006344 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3355      	adds	r3, #85	; 0x55
 800629e:	33ff      	adds	r3, #255	; 0xff
 80062a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	23a5      	movs	r3, #165	; 0xa5
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	58d3      	ldr	r3, [r2, r3]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d139      	bne.n	8006322 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d919      	bls.n	80062ee <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d203      	bcs.n	80062dc <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80062d8:	b29b      	uxth	r3, r3
 80062da:	e002      	b.n	80062e2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	001a      	movs	r2, r3
 80062e8:	f001 f89b 	bl	8007422 <USBD_CtlContinueRx>
 80062ec:	e045      	b.n	800637a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	23ad      	movs	r3, #173	; 0xad
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	58d3      	ldr	r3, [r2, r3]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00d      	beq.n	8006318 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	23a7      	movs	r3, #167	; 0xa7
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006304:	2b03      	cmp	r3, #3
 8006306:	d107      	bne.n	8006318 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	23ad      	movs	r3, #173	; 0xad
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	58d3      	ldr	r3, [r2, r3]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	0010      	movs	r0, r2
 8006316:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	0018      	movs	r0, r3
 800631c:	f001 f894 	bl	8007448 <USBD_CtlSendStatus>
 8006320:	e02b      	b.n	800637a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	23a5      	movs	r3, #165	; 0xa5
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	58d3      	ldr	r3, [r2, r3]
 800632a:	2b05      	cmp	r3, #5
 800632c:	d125      	bne.n	800637a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	23a5      	movs	r3, #165	; 0xa5
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	2100      	movs	r1, #0
 8006336:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2100      	movs	r1, #0
 800633c:	0018      	movs	r0, r3
 800633e:	f001 fc62 	bl	8007c06 <USBD_LL_StallEP>
 8006342:	e01a      	b.n	800637a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	23ad      	movs	r3, #173	; 0xad
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	58d3      	ldr	r3, [r2, r3]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d011      	beq.n	8006376 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	23a7      	movs	r3, #167	; 0xa7
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800635a:	2b03      	cmp	r3, #3
 800635c:	d10b      	bne.n	8006376 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	23ad      	movs	r3, #173	; 0xad
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	58d3      	ldr	r3, [r2, r3]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	220b      	movs	r2, #11
 800636a:	18ba      	adds	r2, r7, r2
 800636c:	7811      	ldrb	r1, [r2, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	0010      	movs	r0, r2
 8006372:	4798      	blx	r3
 8006374:	e001      	b.n	800637a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006376:	2302      	movs	r3, #2
 8006378:	e000      	b.n	800637c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	0018      	movs	r0, r3
 800637e:	46bd      	mov	sp, r7
 8006380:	b006      	add	sp, #24
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	200b      	movs	r0, #11
 8006390:	183b      	adds	r3, r7, r0
 8006392:	1c0a      	adds	r2, r1, #0
 8006394:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006396:	183b      	adds	r3, r7, r0
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d000      	beq.n	80063a0 <USBD_LL_DataInStage+0x1c>
 800639e:	e08e      	b.n	80064be <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3314      	adds	r3, #20
 80063a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	23a5      	movs	r3, #165	; 0xa5
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	58d3      	ldr	r3, [r2, r3]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d164      	bne.n	800647c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d915      	bls.n	80063ea <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	1ad2      	subs	r2, r2, r3
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	0018      	movs	r0, r3
 80063d8:	f000 ffec 	bl	80073b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	2300      	movs	r3, #0
 80063e0:	2200      	movs	r2, #0
 80063e2:	2100      	movs	r1, #0
 80063e4:	f001 fcf8 	bl	8007dd8 <USBD_LL_PrepareReceive>
 80063e8:	e059      	b.n	800649e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	0019      	movs	r1, r3
 80063f4:	0010      	movs	r0, r2
 80063f6:	f7f9 ff0d 	bl	8000214 <__aeabi_uidivmod>
 80063fa:	1e0b      	subs	r3, r1, #0
 80063fc:	d11f      	bne.n	800643e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006406:	429a      	cmp	r2, r3
 8006408:	d319      	bcc.n	800643e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	68f9      	ldr	r1, [r7, #12]
 8006410:	23a6      	movs	r3, #166	; 0xa6
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006416:	429a      	cmp	r2, r3
 8006418:	d211      	bcs.n	800643e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	2100      	movs	r1, #0
 8006420:	0018      	movs	r0, r3
 8006422:	f000 ffc7 	bl	80073b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	23a6      	movs	r3, #166	; 0xa6
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	2100      	movs	r1, #0
 800642e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	2300      	movs	r3, #0
 8006434:	2200      	movs	r2, #0
 8006436:	2100      	movs	r1, #0
 8006438:	f001 fcce 	bl	8007dd8 <USBD_LL_PrepareReceive>
 800643c:	e02f      	b.n	800649e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	23ad      	movs	r3, #173	; 0xad
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	58d3      	ldr	r3, [r2, r3]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00d      	beq.n	8006468 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	23a7      	movs	r3, #167	; 0xa7
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006454:	2b03      	cmp	r3, #3
 8006456:	d107      	bne.n	8006468 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	23ad      	movs	r3, #173	; 0xad
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	58d3      	ldr	r3, [r2, r3]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	0010      	movs	r0, r2
 8006466:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2180      	movs	r1, #128	; 0x80
 800646c:	0018      	movs	r0, r3
 800646e:	f001 fbca 	bl	8007c06 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	0018      	movs	r0, r3
 8006476:	f000 fffb 	bl	8007470 <USBD_CtlReceiveStatus>
 800647a:	e010      	b.n	800649e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	23a5      	movs	r3, #165	; 0xa5
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	58d3      	ldr	r3, [r2, r3]
 8006484:	2b04      	cmp	r3, #4
 8006486:	d005      	beq.n	8006494 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	23a5      	movs	r3, #165	; 0xa5
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006490:	2b00      	cmp	r3, #0
 8006492:	d104      	bne.n	800649e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2180      	movs	r1, #128	; 0x80
 8006498:	0018      	movs	r0, r3
 800649a:	f001 fbb4 	bl	8007c06 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	23a8      	movs	r3, #168	; 0xa8
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	5cd3      	ldrb	r3, [r2, r3]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d124      	bne.n	80064f4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	0018      	movs	r0, r3
 80064ae:	f7ff fe43 	bl	8006138 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	23a8      	movs	r3, #168	; 0xa8
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	2100      	movs	r1, #0
 80064ba:	54d1      	strb	r1, [r2, r3]
 80064bc:	e01a      	b.n	80064f4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	23ad      	movs	r3, #173	; 0xad
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	58d3      	ldr	r3, [r2, r3]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d011      	beq.n	80064f0 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	23a7      	movs	r3, #167	; 0xa7
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d10b      	bne.n	80064f0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	23ad      	movs	r3, #173	; 0xad
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	58d3      	ldr	r3, [r2, r3]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	220b      	movs	r2, #11
 80064e4:	18ba      	adds	r2, r7, r2
 80064e6:	7811      	ldrb	r1, [r2, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	0010      	movs	r0, r2
 80064ec:	4798      	blx	r3
 80064ee:	e001      	b.n	80064f4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80064f0:	2302      	movs	r3, #2
 80064f2:	e000      	b.n	80064f6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	0018      	movs	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b006      	add	sp, #24
 80064fc:	bd80      	pop	{r7, pc}

080064fe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	2340      	movs	r3, #64	; 0x40
 800650a:	2200      	movs	r2, #0
 800650c:	2100      	movs	r1, #0
 800650e:	f001 fb18 	bl	8007b42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	23ac      	movs	r3, #172	; 0xac
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	2101      	movs	r1, #1
 800651a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	23b2      	movs	r3, #178	; 0xb2
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	2140      	movs	r1, #64	; 0x40
 8006524:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	2340      	movs	r3, #64	; 0x40
 800652a:	2200      	movs	r2, #0
 800652c:	2180      	movs	r1, #128	; 0x80
 800652e:	f001 fb08 	bl	8007b42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2240      	movs	r2, #64	; 0x40
 800653c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	23a7      	movs	r3, #167	; 0xa7
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	2101      	movs	r1, #1
 8006546:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	23a5      	movs	r3, #165	; 0xa5
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	2100      	movs	r1, #0
 8006550:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	23a9      	movs	r3, #169	; 0xa9
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	2100      	movs	r1, #0
 8006560:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	23ae      	movs	r3, #174	; 0xae
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	58d3      	ldr	r3, [r2, r3]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	23ad      	movs	r3, #173	; 0xad
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	58d3      	ldr	r3, [r2, r3]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	b2d9      	uxtb	r1, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	0018      	movs	r0, r3
 8006582:	4790      	blx	r2
  }

  return USBD_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	0018      	movs	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	b002      	add	sp, #8
 800658c:	bd80      	pop	{r7, pc}

0800658e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	000a      	movs	r2, r1
 8006598:	1cfb      	adds	r3, r7, #3
 800659a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	1cfa      	adds	r2, r7, #3
 80065a0:	7812      	ldrb	r2, [r2, #0]
 80065a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	0018      	movs	r0, r3
 80065a8:	46bd      	mov	sp, r7
 80065aa:	b002      	add	sp, #8
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	23a7      	movs	r3, #167	; 0xa7
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	5cd1      	ldrb	r1, [r2, r3]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a06      	ldr	r2, [pc, #24]	; (80065dc <USBD_LL_Suspend+0x2c>)
 80065c4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	23a7      	movs	r3, #167	; 0xa7
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	2104      	movs	r1, #4
 80065ce:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	0018      	movs	r0, r3
 80065d4:	46bd      	mov	sp, r7
 80065d6:	b002      	add	sp, #8
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	0000029d 	.word	0x0000029d

080065e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	23a7      	movs	r3, #167	; 0xa7
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	5cd3      	ldrb	r3, [r2, r3]
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d106      	bne.n	8006602 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a05      	ldr	r2, [pc, #20]	; (800660c <USBD_LL_Resume+0x2c>)
 80065f8:	5c99      	ldrb	r1, [r3, r2]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	23a7      	movs	r3, #167	; 0xa7
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	0018      	movs	r0, r3
 8006606:	46bd      	mov	sp, r7
 8006608:	b002      	add	sp, #8
 800660a:	bd80      	pop	{r7, pc}
 800660c:	0000029d 	.word	0x0000029d

08006610 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	23a7      	movs	r3, #167	; 0xa7
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	5cd3      	ldrb	r3, [r2, r3]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d10e      	bne.n	8006642 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	23ad      	movs	r3, #173	; 0xad
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	58d3      	ldr	r3, [r2, r3]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	23ad      	movs	r3, #173	; 0xad
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	58d3      	ldr	r3, [r2, r3]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	0010      	movs	r0, r2
 8006640:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	0018      	movs	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	b002      	add	sp, #8
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006656:	230f      	movs	r3, #15
 8006658:	18fb      	adds	r3, r7, r3
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	001a      	movs	r2, r3
 8006664:	2360      	movs	r3, #96	; 0x60
 8006666:	4013      	ands	r3, r2
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	d004      	beq.n	8006676 <USBD_StdDevReq+0x2a>
 800666c:	d84f      	bhi.n	800670e <USBD_StdDevReq+0xc2>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <USBD_StdDevReq+0x3e>
 8006672:	2b20      	cmp	r3, #32
 8006674:	d14b      	bne.n	800670e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	23ad      	movs	r3, #173	; 0xad
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	58d3      	ldr	r3, [r2, r3]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	0010      	movs	r0, r2
 8006686:	4798      	blx	r3
      break;
 8006688:	e048      	b.n	800671c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b09      	cmp	r3, #9
 8006690:	d835      	bhi.n	80066fe <USBD_StdDevReq+0xb2>
 8006692:	009a      	lsls	r2, r3, #2
 8006694:	4b25      	ldr	r3, [pc, #148]	; (800672c <USBD_StdDevReq+0xe0>)
 8006696:	18d3      	adds	r3, r2, r3
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	0011      	movs	r1, r2
 80066a2:	0018      	movs	r0, r3
 80066a4:	f000 fa52 	bl	8006b4c <USBD_GetDescriptor>
          break;
 80066a8:	e030      	b.n	800670c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	0011      	movs	r1, r2
 80066b0:	0018      	movs	r0, r3
 80066b2:	f000 fbfd 	bl	8006eb0 <USBD_SetAddress>
          break;
 80066b6:	e029      	b.n	800670c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	0011      	movs	r1, r2
 80066be:	0018      	movs	r0, r3
 80066c0:	f000 fc4a 	bl	8006f58 <USBD_SetConfig>
          break;
 80066c4:	e022      	b.n	800670c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	0011      	movs	r1, r2
 80066cc:	0018      	movs	r0, r3
 80066ce:	f000 fce7 	bl	80070a0 <USBD_GetConfig>
          break;
 80066d2:	e01b      	b.n	800670c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	0011      	movs	r1, r2
 80066da:	0018      	movs	r0, r3
 80066dc:	f000 fd1b 	bl	8007116 <USBD_GetStatus>
          break;
 80066e0:	e014      	b.n	800670c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	0011      	movs	r1, r2
 80066e8:	0018      	movs	r0, r3
 80066ea:	f000 fd4e 	bl	800718a <USBD_SetFeature>
          break;
 80066ee:	e00d      	b.n	800670c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	0011      	movs	r1, r2
 80066f6:	0018      	movs	r0, r3
 80066f8:	f000 fd5d 	bl	80071b6 <USBD_ClrFeature>
          break;
 80066fc:	e006      	b.n	800670c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	0011      	movs	r1, r2
 8006704:	0018      	movs	r0, r3
 8006706:	f000 fdb7 	bl	8007278 <USBD_CtlError>
          break;
 800670a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800670c:	e006      	b.n	800671c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	0011      	movs	r1, r2
 8006714:	0018      	movs	r0, r3
 8006716:	f000 fdaf 	bl	8007278 <USBD_CtlError>
      break;
 800671a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800671c:	230f      	movs	r3, #15
 800671e:	18fb      	adds	r3, r7, r3
 8006720:	781b      	ldrb	r3, [r3, #0]
}
 8006722:	0018      	movs	r0, r3
 8006724:	46bd      	mov	sp, r7
 8006726:	b004      	add	sp, #16
 8006728:	bd80      	pop	{r7, pc}
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	08007fec 	.word	0x08007fec

08006730 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006730:	b5b0      	push	{r4, r5, r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800673a:	230f      	movs	r3, #15
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	001a      	movs	r2, r3
 8006748:	2360      	movs	r3, #96	; 0x60
 800674a:	4013      	ands	r3, r2
 800674c:	2b40      	cmp	r3, #64	; 0x40
 800674e:	d004      	beq.n	800675a <USBD_StdItfReq+0x2a>
 8006750:	d839      	bhi.n	80067c6 <USBD_StdItfReq+0x96>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <USBD_StdItfReq+0x2a>
 8006756:	2b20      	cmp	r3, #32
 8006758:	d135      	bne.n	80067c6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	23a7      	movs	r3, #167	; 0xa7
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	5cd3      	ldrb	r3, [r2, r3]
 8006762:	3b01      	subs	r3, #1
 8006764:	2b02      	cmp	r3, #2
 8006766:	d825      	bhi.n	80067b4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	889b      	ldrh	r3, [r3, #4]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	d819      	bhi.n	80067a6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	23ad      	movs	r3, #173	; 0xad
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	58d3      	ldr	r3, [r2, r3]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	250f      	movs	r5, #15
 800677e:	197c      	adds	r4, r7, r5
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	0010      	movs	r0, r2
 8006786:	4798      	blx	r3
 8006788:	0003      	movs	r3, r0
 800678a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	88db      	ldrh	r3, [r3, #6]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d116      	bne.n	80067c2 <USBD_StdItfReq+0x92>
 8006794:	197b      	adds	r3, r7, r5
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d112      	bne.n	80067c2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	0018      	movs	r0, r3
 80067a0:	f000 fe52 	bl	8007448 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80067a4:	e00d      	b.n	80067c2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	0011      	movs	r1, r2
 80067ac:	0018      	movs	r0, r3
 80067ae:	f000 fd63 	bl	8007278 <USBD_CtlError>
          break;
 80067b2:	e006      	b.n	80067c2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	0011      	movs	r1, r2
 80067ba:	0018      	movs	r0, r3
 80067bc:	f000 fd5c 	bl	8007278 <USBD_CtlError>
          break;
 80067c0:	e000      	b.n	80067c4 <USBD_StdItfReq+0x94>
          break;
 80067c2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80067c4:	e006      	b.n	80067d4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	0011      	movs	r1, r2
 80067cc:	0018      	movs	r0, r3
 80067ce:	f000 fd53 	bl	8007278 <USBD_CtlError>
      break;
 80067d2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	0018      	movs	r0, r3
 80067d8:	46bd      	mov	sp, r7
 80067da:	b004      	add	sp, #16
 80067dc:	bdb0      	pop	{r4, r5, r7, pc}

080067de <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80067de:	b5b0      	push	{r4, r5, r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80067e8:	230f      	movs	r3, #15
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	2200      	movs	r2, #0
 80067ee:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	889a      	ldrh	r2, [r3, #4]
 80067f4:	230e      	movs	r3, #14
 80067f6:	18fb      	adds	r3, r7, r3
 80067f8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	001a      	movs	r2, r3
 8006800:	2360      	movs	r3, #96	; 0x60
 8006802:	4013      	ands	r3, r2
 8006804:	2b40      	cmp	r3, #64	; 0x40
 8006806:	d006      	beq.n	8006816 <USBD_StdEPReq+0x38>
 8006808:	d900      	bls.n	800680c <USBD_StdEPReq+0x2e>
 800680a:	e190      	b.n	8006b2e <USBD_StdEPReq+0x350>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00c      	beq.n	800682a <USBD_StdEPReq+0x4c>
 8006810:	2b20      	cmp	r3, #32
 8006812:	d000      	beq.n	8006816 <USBD_StdEPReq+0x38>
 8006814:	e18b      	b.n	8006b2e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	23ad      	movs	r3, #173	; 0xad
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	58d3      	ldr	r3, [r2, r3]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	0010      	movs	r0, r2
 8006826:	4798      	blx	r3
      break;
 8006828:	e188      	b.n	8006b3c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	001a      	movs	r2, r3
 8006830:	2360      	movs	r3, #96	; 0x60
 8006832:	4013      	ands	r3, r2
 8006834:	2b20      	cmp	r3, #32
 8006836:	d10f      	bne.n	8006858 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	23ad      	movs	r3, #173	; 0xad
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	58d3      	ldr	r3, [r2, r3]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	250f      	movs	r5, #15
 8006844:	197c      	adds	r4, r7, r5
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	0010      	movs	r0, r2
 800684c:	4798      	blx	r3
 800684e:	0003      	movs	r3, r0
 8006850:	7023      	strb	r3, [r4, #0]

        return ret;
 8006852:	197b      	adds	r3, r7, r5
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	e174      	b.n	8006b42 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	785b      	ldrb	r3, [r3, #1]
 800685c:	2b03      	cmp	r3, #3
 800685e:	d007      	beq.n	8006870 <USBD_StdEPReq+0x92>
 8006860:	dd00      	ble.n	8006864 <USBD_StdEPReq+0x86>
 8006862:	e15c      	b.n	8006b1e <USBD_StdEPReq+0x340>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d100      	bne.n	800686a <USBD_StdEPReq+0x8c>
 8006868:	e092      	b.n	8006990 <USBD_StdEPReq+0x1b2>
 800686a:	2b01      	cmp	r3, #1
 800686c:	d04b      	beq.n	8006906 <USBD_StdEPReq+0x128>
 800686e:	e156      	b.n	8006b1e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	23a7      	movs	r3, #167	; 0xa7
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	5cd3      	ldrb	r3, [r2, r3]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d002      	beq.n	8006882 <USBD_StdEPReq+0xa4>
 800687c:	2b03      	cmp	r3, #3
 800687e:	d01d      	beq.n	80068bc <USBD_StdEPReq+0xde>
 8006880:	e039      	b.n	80068f6 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006882:	220e      	movs	r2, #14
 8006884:	18bb      	adds	r3, r7, r2
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d010      	beq.n	80068ae <USBD_StdEPReq+0xd0>
 800688c:	18bb      	adds	r3, r7, r2
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b80      	cmp	r3, #128	; 0x80
 8006892:	d00c      	beq.n	80068ae <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006894:	18bb      	adds	r3, r7, r2
 8006896:	781a      	ldrb	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	0011      	movs	r1, r2
 800689c:	0018      	movs	r0, r3
 800689e:	f001 f9b2 	bl	8007c06 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2180      	movs	r1, #128	; 0x80
 80068a6:	0018      	movs	r0, r3
 80068a8:	f001 f9ad 	bl	8007c06 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068ac:	e02a      	b.n	8006904 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	0011      	movs	r1, r2
 80068b4:	0018      	movs	r0, r3
 80068b6:	f000 fcdf 	bl	8007278 <USBD_CtlError>
              break;
 80068ba:	e023      	b.n	8006904 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	885b      	ldrh	r3, [r3, #2]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d113      	bne.n	80068ec <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80068c4:	220e      	movs	r2, #14
 80068c6:	18bb      	adds	r3, r7, r2
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <USBD_StdEPReq+0x10e>
 80068ce:	18bb      	adds	r3, r7, r2
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2b80      	cmp	r3, #128	; 0x80
 80068d4:	d00a      	beq.n	80068ec <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	88db      	ldrh	r3, [r3, #6]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80068de:	18bb      	adds	r3, r7, r2
 80068e0:	781a      	ldrb	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	0011      	movs	r1, r2
 80068e6:	0018      	movs	r0, r3
 80068e8:	f001 f98d 	bl	8007c06 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	0018      	movs	r0, r3
 80068f0:	f000 fdaa 	bl	8007448 <USBD_CtlSendStatus>

              break;
 80068f4:	e006      	b.n	8006904 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	0011      	movs	r1, r2
 80068fc:	0018      	movs	r0, r3
 80068fe:	f000 fcbb 	bl	8007278 <USBD_CtlError>
              break;
 8006902:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006904:	e112      	b.n	8006b2c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	23a7      	movs	r3, #167	; 0xa7
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	5cd3      	ldrb	r3, [r2, r3]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d002      	beq.n	8006918 <USBD_StdEPReq+0x13a>
 8006912:	2b03      	cmp	r3, #3
 8006914:	d01d      	beq.n	8006952 <USBD_StdEPReq+0x174>
 8006916:	e032      	b.n	800697e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006918:	220e      	movs	r2, #14
 800691a:	18bb      	adds	r3, r7, r2
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d010      	beq.n	8006944 <USBD_StdEPReq+0x166>
 8006922:	18bb      	adds	r3, r7, r2
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b80      	cmp	r3, #128	; 0x80
 8006928:	d00c      	beq.n	8006944 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800692a:	18bb      	adds	r3, r7, r2
 800692c:	781a      	ldrb	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	0011      	movs	r1, r2
 8006932:	0018      	movs	r0, r3
 8006934:	f001 f967 	bl	8007c06 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2180      	movs	r1, #128	; 0x80
 800693c:	0018      	movs	r0, r3
 800693e:	f001 f962 	bl	8007c06 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006942:	e024      	b.n	800698e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	0011      	movs	r1, r2
 800694a:	0018      	movs	r0, r3
 800694c:	f000 fc94 	bl	8007278 <USBD_CtlError>
              break;
 8006950:	e01d      	b.n	800698e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	885b      	ldrh	r3, [r3, #2]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d118      	bne.n	800698c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800695a:	210e      	movs	r1, #14
 800695c:	187b      	adds	r3, r7, r1
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	227f      	movs	r2, #127	; 0x7f
 8006962:	4013      	ands	r3, r2
 8006964:	d006      	beq.n	8006974 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006966:	187b      	adds	r3, r7, r1
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	0011      	movs	r1, r2
 800696e:	0018      	movs	r0, r3
 8006970:	f001 f974 	bl	8007c5c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	0018      	movs	r0, r3
 8006978:	f000 fd66 	bl	8007448 <USBD_CtlSendStatus>
              }
              break;
 800697c:	e006      	b.n	800698c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	0011      	movs	r1, r2
 8006984:	0018      	movs	r0, r3
 8006986:	f000 fc77 	bl	8007278 <USBD_CtlError>
              break;
 800698a:	e000      	b.n	800698e <USBD_StdEPReq+0x1b0>
              break;
 800698c:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800698e:	e0cd      	b.n	8006b2c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	23a7      	movs	r3, #167	; 0xa7
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	5cd3      	ldrb	r3, [r2, r3]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d002      	beq.n	80069a2 <USBD_StdEPReq+0x1c4>
 800699c:	2b03      	cmp	r3, #3
 800699e:	d03c      	beq.n	8006a1a <USBD_StdEPReq+0x23c>
 80069a0:	e0b5      	b.n	8006b0e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069a2:	220e      	movs	r2, #14
 80069a4:	18bb      	adds	r3, r7, r2
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <USBD_StdEPReq+0x1e4>
 80069ac:	18bb      	adds	r3, r7, r2
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b80      	cmp	r3, #128	; 0x80
 80069b2:	d006      	beq.n	80069c2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	0011      	movs	r1, r2
 80069ba:	0018      	movs	r0, r3
 80069bc:	f000 fc5c 	bl	8007278 <USBD_CtlError>
                break;
 80069c0:	e0ac      	b.n	8006b1c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069c2:	220e      	movs	r2, #14
 80069c4:	18bb      	adds	r3, r7, r2
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	da0c      	bge.n	80069e8 <USBD_StdEPReq+0x20a>
 80069ce:	18bb      	adds	r3, r7, r2
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	227f      	movs	r2, #127	; 0x7f
 80069d4:	401a      	ands	r2, r3
 80069d6:	0013      	movs	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	3310      	adds	r3, #16
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	18d3      	adds	r3, r2, r3
 80069e4:	3304      	adds	r3, #4
 80069e6:	e00d      	b.n	8006a04 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069e8:	230e      	movs	r3, #14
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	227f      	movs	r2, #127	; 0x7f
 80069f0:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069f2:	0013      	movs	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	189b      	adds	r3, r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	3351      	adds	r3, #81	; 0x51
 80069fc:	33ff      	adds	r3, #255	; 0xff
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	18d3      	adds	r3, r2, r3
 8006a02:	3304      	adds	r3, #4
 8006a04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a0c:	68b9      	ldr	r1, [r7, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2202      	movs	r2, #2
 8006a12:	0018      	movs	r0, r3
 8006a14:	f000 fcae 	bl	8007374 <USBD_CtlSendData>
              break;
 8006a18:	e080      	b.n	8006b1c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a1a:	220e      	movs	r2, #14
 8006a1c:	18bb      	adds	r3, r7, r2
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	b25b      	sxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	da14      	bge.n	8006a50 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a26:	18bb      	adds	r3, r7, r2
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	220f      	movs	r2, #15
 8006a2c:	401a      	ands	r2, r3
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	0013      	movs	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	189b      	adds	r3, r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	18cb      	adds	r3, r1, r3
 8006a3a:	3318      	adds	r3, #24
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d11e      	bne.n	8006a80 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	0011      	movs	r1, r2
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f000 fc15 	bl	8007278 <USBD_CtlError>
                  break;
 8006a4e:	e065      	b.n	8006b1c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a50:	230e      	movs	r3, #14
 8006a52:	18fb      	adds	r3, r7, r3
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	220f      	movs	r2, #15
 8006a58:	401a      	ands	r2, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	23ac      	movs	r3, #172	; 0xac
 8006a5e:	0059      	lsls	r1, r3, #1
 8006a60:	0013      	movs	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	189b      	adds	r3, r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	18c3      	adds	r3, r0, r3
 8006a6a:	185b      	adds	r3, r3, r1
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	0011      	movs	r1, r2
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f000 fbfd 	bl	8007278 <USBD_CtlError>
                  break;
 8006a7e:	e04d      	b.n	8006b1c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a80:	220e      	movs	r2, #14
 8006a82:	18bb      	adds	r3, r7, r2
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	b25b      	sxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	da0c      	bge.n	8006aa6 <USBD_StdEPReq+0x2c8>
 8006a8c:	18bb      	adds	r3, r7, r2
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	227f      	movs	r2, #127	; 0x7f
 8006a92:	401a      	ands	r2, r3
 8006a94:	0013      	movs	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	189b      	adds	r3, r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	3310      	adds	r3, #16
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	18d3      	adds	r3, r2, r3
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	e00d      	b.n	8006ac2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006aa6:	230e      	movs	r3, #14
 8006aa8:	18fb      	adds	r3, r7, r3
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	227f      	movs	r2, #127	; 0x7f
 8006aae:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ab0:	0013      	movs	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	189b      	adds	r3, r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	3351      	adds	r3, #81	; 0x51
 8006aba:	33ff      	adds	r3, #255	; 0xff
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	18d3      	adds	r3, r2, r3
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ac4:	220e      	movs	r2, #14
 8006ac6:	18bb      	adds	r3, r7, r2
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <USBD_StdEPReq+0x2f8>
 8006ace:	18bb      	adds	r3, r7, r2
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b80      	cmp	r3, #128	; 0x80
 8006ad4:	d103      	bne.n	8006ade <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	e010      	b.n	8006b00 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006ade:	230e      	movs	r3, #14
 8006ae0:	18fb      	adds	r3, r7, r3
 8006ae2:	781a      	ldrb	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	0011      	movs	r1, r2
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f001 f8e2 	bl	8007cb2 <USBD_LL_IsStallEP>
 8006aee:	1e03      	subs	r3, r0, #0
 8006af0:	d003      	beq.n	8006afa <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2201      	movs	r2, #1
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	e002      	b.n	8006b00 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2202      	movs	r2, #2
 8006b06:	0018      	movs	r0, r3
 8006b08:	f000 fc34 	bl	8007374 <USBD_CtlSendData>
              break;
 8006b0c:	e006      	b.n	8006b1c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	0011      	movs	r1, r2
 8006b14:	0018      	movs	r0, r3
 8006b16:	f000 fbaf 	bl	8007278 <USBD_CtlError>
              break;
 8006b1a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006b1c:	e006      	b.n	8006b2c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	0011      	movs	r1, r2
 8006b24:	0018      	movs	r0, r3
 8006b26:	f000 fba7 	bl	8007278 <USBD_CtlError>
          break;
 8006b2a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006b2c:	e006      	b.n	8006b3c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	0011      	movs	r1, r2
 8006b34:	0018      	movs	r0, r3
 8006b36:	f000 fb9f 	bl	8007278 <USBD_CtlError>
      break;
 8006b3a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006b3c:	230f      	movs	r3, #15
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	781b      	ldrb	r3, [r3, #0]
}
 8006b42:	0018      	movs	r0, r3
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b004      	add	sp, #16
 8006b48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006b4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b56:	2308      	movs	r3, #8
 8006b58:	18fb      	adds	r3, r7, r3
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b62:	230b      	movs	r3, #11
 8006b64:	18fb      	adds	r3, r7, r3
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	885b      	ldrh	r3, [r3, #2]
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b07      	cmp	r3, #7
 8006b74:	d900      	bls.n	8006b78 <USBD_GetDescriptor+0x2c>
 8006b76:	e159      	b.n	8006e2c <USBD_GetDescriptor+0x2e0>
 8006b78:	009a      	lsls	r2, r3, #2
 8006b7a:	4bcb      	ldr	r3, [pc, #812]	; (8006ea8 <USBD_GetDescriptor+0x35c>)
 8006b7c:	18d3      	adds	r3, r2, r3
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	23ac      	movs	r3, #172	; 0xac
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	58d3      	ldr	r3, [r2, r3]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	7c12      	ldrb	r2, [r2, #16]
 8006b90:	2108      	movs	r1, #8
 8006b92:	1879      	adds	r1, r7, r1
 8006b94:	0010      	movs	r0, r2
 8006b96:	4798      	blx	r3
 8006b98:	0003      	movs	r3, r0
 8006b9a:	60fb      	str	r3, [r7, #12]
      break;
 8006b9c:	e153      	b.n	8006e46 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	7c1b      	ldrb	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10f      	bne.n	8006bc6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	23ad      	movs	r3, #173	; 0xad
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	58d3      	ldr	r3, [r2, r3]
 8006bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	18ba      	adds	r2, r7, r2
 8006bb4:	0010      	movs	r0, r2
 8006bb6:	4798      	blx	r3
 8006bb8:	0003      	movs	r3, r0
 8006bba:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006bc4:	e13f      	b.n	8006e46 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	23ad      	movs	r3, #173	; 0xad
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	58d3      	ldr	r3, [r2, r3]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	2208      	movs	r2, #8
 8006bd2:	18ba      	adds	r2, r7, r2
 8006bd4:	0010      	movs	r0, r2
 8006bd6:	4798      	blx	r3
 8006bd8:	0003      	movs	r3, r0
 8006bda:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	2202      	movs	r2, #2
 8006be2:	701a      	strb	r2, [r3, #0]
      break;
 8006be4:	e12f      	b.n	8006e46 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	885b      	ldrh	r3, [r3, #2]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b05      	cmp	r3, #5
 8006bee:	d900      	bls.n	8006bf2 <USBD_GetDescriptor+0xa6>
 8006bf0:	e0d0      	b.n	8006d94 <USBD_GetDescriptor+0x248>
 8006bf2:	009a      	lsls	r2, r3, #2
 8006bf4:	4bad      	ldr	r3, [pc, #692]	; (8006eac <USBD_GetDescriptor+0x360>)
 8006bf6:	18d3      	adds	r3, r2, r3
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	23ac      	movs	r3, #172	; 0xac
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	58d3      	ldr	r3, [r2, r3]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00d      	beq.n	8006c26 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	23ac      	movs	r3, #172	; 0xac
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	58d3      	ldr	r3, [r2, r3]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	7c12      	ldrb	r2, [r2, #16]
 8006c18:	2108      	movs	r1, #8
 8006c1a:	1879      	adds	r1, r7, r1
 8006c1c:	0010      	movs	r0, r2
 8006c1e:	4798      	blx	r3
 8006c20:	0003      	movs	r3, r0
 8006c22:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c24:	e0c3      	b.n	8006dae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	0011      	movs	r1, r2
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f000 fb23 	bl	8007278 <USBD_CtlError>
            err++;
 8006c32:	210b      	movs	r1, #11
 8006c34:	187b      	adds	r3, r7, r1
 8006c36:	781a      	ldrb	r2, [r3, #0]
 8006c38:	187b      	adds	r3, r7, r1
 8006c3a:	3201      	adds	r2, #1
 8006c3c:	701a      	strb	r2, [r3, #0]
          break;
 8006c3e:	e0b6      	b.n	8006dae <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	23ac      	movs	r3, #172	; 0xac
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	58d3      	ldr	r3, [r2, r3]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00d      	beq.n	8006c6a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	23ac      	movs	r3, #172	; 0xac
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	58d3      	ldr	r3, [r2, r3]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	7c12      	ldrb	r2, [r2, #16]
 8006c5c:	2108      	movs	r1, #8
 8006c5e:	1879      	adds	r1, r7, r1
 8006c60:	0010      	movs	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	0003      	movs	r3, r0
 8006c66:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c68:	e0a1      	b.n	8006dae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	0011      	movs	r1, r2
 8006c70:	0018      	movs	r0, r3
 8006c72:	f000 fb01 	bl	8007278 <USBD_CtlError>
            err++;
 8006c76:	210b      	movs	r1, #11
 8006c78:	187b      	adds	r3, r7, r1
 8006c7a:	781a      	ldrb	r2, [r3, #0]
 8006c7c:	187b      	adds	r3, r7, r1
 8006c7e:	3201      	adds	r2, #1
 8006c80:	701a      	strb	r2, [r3, #0]
          break;
 8006c82:	e094      	b.n	8006dae <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	23ac      	movs	r3, #172	; 0xac
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	58d3      	ldr	r3, [r2, r3]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00d      	beq.n	8006cae <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	23ac      	movs	r3, #172	; 0xac
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	58d3      	ldr	r3, [r2, r3]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	7c12      	ldrb	r2, [r2, #16]
 8006ca0:	2108      	movs	r1, #8
 8006ca2:	1879      	adds	r1, r7, r1
 8006ca4:	0010      	movs	r0, r2
 8006ca6:	4798      	blx	r3
 8006ca8:	0003      	movs	r3, r0
 8006caa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cac:	e07f      	b.n	8006dae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	0011      	movs	r1, r2
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f000 fadf 	bl	8007278 <USBD_CtlError>
            err++;
 8006cba:	210b      	movs	r1, #11
 8006cbc:	187b      	adds	r3, r7, r1
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	187b      	adds	r3, r7, r1
 8006cc2:	3201      	adds	r2, #1
 8006cc4:	701a      	strb	r2, [r3, #0]
          break;
 8006cc6:	e072      	b.n	8006dae <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	23ac      	movs	r3, #172	; 0xac
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	58d3      	ldr	r3, [r2, r3]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	23ac      	movs	r3, #172	; 0xac
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	58d3      	ldr	r3, [r2, r3]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	7c12      	ldrb	r2, [r2, #16]
 8006ce4:	2108      	movs	r1, #8
 8006ce6:	1879      	adds	r1, r7, r1
 8006ce8:	0010      	movs	r0, r2
 8006cea:	4798      	blx	r3
 8006cec:	0003      	movs	r3, r0
 8006cee:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cf0:	e05d      	b.n	8006dae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	0011      	movs	r1, r2
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f000 fabd 	bl	8007278 <USBD_CtlError>
            err++;
 8006cfe:	210b      	movs	r1, #11
 8006d00:	187b      	adds	r3, r7, r1
 8006d02:	781a      	ldrb	r2, [r3, #0]
 8006d04:	187b      	adds	r3, r7, r1
 8006d06:	3201      	adds	r2, #1
 8006d08:	701a      	strb	r2, [r3, #0]
          break;
 8006d0a:	e050      	b.n	8006dae <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	23ac      	movs	r3, #172	; 0xac
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	58d3      	ldr	r3, [r2, r3]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00d      	beq.n	8006d36 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	23ac      	movs	r3, #172	; 0xac
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	58d3      	ldr	r3, [r2, r3]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	7c12      	ldrb	r2, [r2, #16]
 8006d28:	2108      	movs	r1, #8
 8006d2a:	1879      	adds	r1, r7, r1
 8006d2c:	0010      	movs	r0, r2
 8006d2e:	4798      	blx	r3
 8006d30:	0003      	movs	r3, r0
 8006d32:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d34:	e03b      	b.n	8006dae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	0011      	movs	r1, r2
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f000 fa9b 	bl	8007278 <USBD_CtlError>
            err++;
 8006d42:	210b      	movs	r1, #11
 8006d44:	187b      	adds	r3, r7, r1
 8006d46:	781a      	ldrb	r2, [r3, #0]
 8006d48:	187b      	adds	r3, r7, r1
 8006d4a:	3201      	adds	r2, #1
 8006d4c:	701a      	strb	r2, [r3, #0]
          break;
 8006d4e:	e02e      	b.n	8006dae <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	23ac      	movs	r3, #172	; 0xac
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	58d3      	ldr	r3, [r2, r3]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00d      	beq.n	8006d7a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	23ac      	movs	r3, #172	; 0xac
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	58d3      	ldr	r3, [r2, r3]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7c12      	ldrb	r2, [r2, #16]
 8006d6c:	2108      	movs	r1, #8
 8006d6e:	1879      	adds	r1, r7, r1
 8006d70:	0010      	movs	r0, r2
 8006d72:	4798      	blx	r3
 8006d74:	0003      	movs	r3, r0
 8006d76:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d78:	e019      	b.n	8006dae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	0011      	movs	r1, r2
 8006d80:	0018      	movs	r0, r3
 8006d82:	f000 fa79 	bl	8007278 <USBD_CtlError>
            err++;
 8006d86:	210b      	movs	r1, #11
 8006d88:	187b      	adds	r3, r7, r1
 8006d8a:	781a      	ldrb	r2, [r3, #0]
 8006d8c:	187b      	adds	r3, r7, r1
 8006d8e:	3201      	adds	r2, #1
 8006d90:	701a      	strb	r2, [r3, #0]
          break;
 8006d92:	e00c      	b.n	8006dae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	0011      	movs	r1, r2
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f000 fa6c 	bl	8007278 <USBD_CtlError>
          err++;
 8006da0:	210b      	movs	r1, #11
 8006da2:	187b      	adds	r3, r7, r1
 8006da4:	781a      	ldrb	r2, [r3, #0]
 8006da6:	187b      	adds	r3, r7, r1
 8006da8:	3201      	adds	r2, #1
 8006daa:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006dac:	e04b      	b.n	8006e46 <USBD_GetDescriptor+0x2fa>
 8006dae:	e04a      	b.n	8006e46 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	7c1b      	ldrb	r3, [r3, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10b      	bne.n	8006dd0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	23ad      	movs	r3, #173	; 0xad
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	58d3      	ldr	r3, [r2, r3]
 8006dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	18ba      	adds	r2, r7, r2
 8006dc6:	0010      	movs	r0, r2
 8006dc8:	4798      	blx	r3
 8006dca:	0003      	movs	r3, r0
 8006dcc:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dce:	e03a      	b.n	8006e46 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	0011      	movs	r1, r2
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	f000 fa4e 	bl	8007278 <USBD_CtlError>
        err++;
 8006ddc:	210b      	movs	r1, #11
 8006dde:	187b      	adds	r3, r7, r1
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	187b      	adds	r3, r7, r1
 8006de4:	3201      	adds	r2, #1
 8006de6:	701a      	strb	r2, [r3, #0]
      break;
 8006de8:	e02d      	b.n	8006e46 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	7c1b      	ldrb	r3, [r3, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10f      	bne.n	8006e12 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	23ad      	movs	r3, #173	; 0xad
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	58d3      	ldr	r3, [r2, r3]
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	18ba      	adds	r2, r7, r2
 8006e00:	0010      	movs	r0, r2
 8006e02:	4798      	blx	r3
 8006e04:	0003      	movs	r3, r0
 8006e06:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	2207      	movs	r2, #7
 8006e0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e10:	e019      	b.n	8006e46 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	0011      	movs	r1, r2
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f000 fa2d 	bl	8007278 <USBD_CtlError>
        err++;
 8006e1e:	210b      	movs	r1, #11
 8006e20:	187b      	adds	r3, r7, r1
 8006e22:	781a      	ldrb	r2, [r3, #0]
 8006e24:	187b      	adds	r3, r7, r1
 8006e26:	3201      	adds	r2, #1
 8006e28:	701a      	strb	r2, [r3, #0]
      break;
 8006e2a:	e00c      	b.n	8006e46 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	0011      	movs	r1, r2
 8006e32:	0018      	movs	r0, r3
 8006e34:	f000 fa20 	bl	8007278 <USBD_CtlError>
      err++;
 8006e38:	210b      	movs	r1, #11
 8006e3a:	187b      	adds	r3, r7, r1
 8006e3c:	781a      	ldrb	r2, [r3, #0]
 8006e3e:	187b      	adds	r3, r7, r1
 8006e40:	3201      	adds	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]
      break;
 8006e44:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8006e46:	230b      	movs	r3, #11
 8006e48:	18fb      	adds	r3, r7, r3
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d127      	bne.n	8006ea0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006e50:	2108      	movs	r1, #8
 8006e52:	187b      	adds	r3, r7, r1
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d019      	beq.n	8006e8e <USBD_GetDescriptor+0x342>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	88db      	ldrh	r3, [r3, #6]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d015      	beq.n	8006e8e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	88da      	ldrh	r2, [r3, #6]
 8006e66:	187b      	adds	r3, r7, r1
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	1c18      	adds	r0, r3, #0
 8006e6c:	1c11      	adds	r1, r2, #0
 8006e6e:	b28a      	uxth	r2, r1
 8006e70:	b283      	uxth	r3, r0
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d900      	bls.n	8006e78 <USBD_GetDescriptor+0x32c>
 8006e76:	1c01      	adds	r1, r0, #0
 8006e78:	b28a      	uxth	r2, r1
 8006e7a:	2108      	movs	r1, #8
 8006e7c:	187b      	adds	r3, r7, r1
 8006e7e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e80:	187b      	adds	r3, r7, r1
 8006e82:	881a      	ldrh	r2, [r3, #0]
 8006e84:	68f9      	ldr	r1, [r7, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f000 fa73 	bl	8007374 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	88db      	ldrh	r3, [r3, #6]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d105      	bne.n	8006ea2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f000 fad5 	bl	8007448 <USBD_CtlSendStatus>
 8006e9e:	e000      	b.n	8006ea2 <USBD_GetDescriptor+0x356>
    return;
 8006ea0:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	b004      	add	sp, #16
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	08008014 	.word	0x08008014
 8006eac:	08008034 	.word	0x08008034

08006eb0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006eb0:	b590      	push	{r4, r7, lr}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	889b      	ldrh	r3, [r3, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d13d      	bne.n	8006f3e <USBD_SetAddress+0x8e>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	88db      	ldrh	r3, [r3, #6]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d139      	bne.n	8006f3e <USBD_SetAddress+0x8e>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	885b      	ldrh	r3, [r3, #2]
 8006ece:	2b7f      	cmp	r3, #127	; 0x7f
 8006ed0:	d835      	bhi.n	8006f3e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	885b      	ldrh	r3, [r3, #2]
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	230f      	movs	r3, #15
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	217f      	movs	r1, #127	; 0x7f
 8006ede:	400a      	ands	r2, r1
 8006ee0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	23a7      	movs	r3, #167	; 0xa7
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	5cd3      	ldrb	r3, [r2, r3]
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d106      	bne.n	8006efc <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	0011      	movs	r1, r2
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f000 f9bf 	bl	8007278 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efa:	e027      	b.n	8006f4c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	240f      	movs	r4, #15
 8006f00:	193a      	adds	r2, r7, r4
 8006f02:	4914      	ldr	r1, [pc, #80]	; (8006f54 <USBD_SetAddress+0xa4>)
 8006f04:	7812      	ldrb	r2, [r2, #0]
 8006f06:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f08:	193b      	adds	r3, r7, r4
 8006f0a:	781a      	ldrb	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	0011      	movs	r1, r2
 8006f10:	0018      	movs	r0, r3
 8006f12:	f000 feff 	bl	8007d14 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f000 fa95 	bl	8007448 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f1e:	193b      	adds	r3, r7, r4
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	23a7      	movs	r3, #167	; 0xa7
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	2102      	movs	r1, #2
 8006f2e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f30:	e00c      	b.n	8006f4c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	23a7      	movs	r3, #167	; 0xa7
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	2101      	movs	r1, #1
 8006f3a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f3c:	e006      	b.n	8006f4c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	0011      	movs	r1, r2
 8006f44:	0018      	movs	r0, r3
 8006f46:	f000 f997 	bl	8007278 <USBD_CtlError>
  }
}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	46c0      	nop			; (mov r8, r8)
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b005      	add	sp, #20
 8006f52:	bd90      	pop	{r4, r7, pc}
 8006f54:	0000029e 	.word	0x0000029e

08006f58 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	885b      	ldrh	r3, [r3, #2]
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	4b4c      	ldr	r3, [pc, #304]	; (800709c <USBD_SetConfig+0x144>)
 8006f6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f6c:	4b4b      	ldr	r3, [pc, #300]	; (800709c <USBD_SetConfig+0x144>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d906      	bls.n	8006f82 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	0011      	movs	r1, r2
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	f000 f97c 	bl	8007278 <USBD_CtlError>
 8006f80:	e088      	b.n	8007094 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	23a7      	movs	r3, #167	; 0xa7
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	5cd3      	ldrb	r3, [r2, r3]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d002      	beq.n	8006f94 <USBD_SetConfig+0x3c>
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d029      	beq.n	8006fe6 <USBD_SetConfig+0x8e>
 8006f92:	e071      	b.n	8007078 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006f94:	4b41      	ldr	r3, [pc, #260]	; (800709c <USBD_SetConfig+0x144>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d01f      	beq.n	8006fdc <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006f9c:	4b3f      	ldr	r3, [pc, #252]	; (800709c <USBD_SetConfig+0x144>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	001a      	movs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	23a7      	movs	r3, #167	; 0xa7
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	2103      	movs	r1, #3
 8006fae:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006fb0:	4b3a      	ldr	r3, [pc, #232]	; (800709c <USBD_SetConfig+0x144>)
 8006fb2:	781a      	ldrb	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	0011      	movs	r1, r2
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7ff f8c6 	bl	800614a <USBD_SetClassConfig>
 8006fbe:	0003      	movs	r3, r0
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d106      	bne.n	8006fd2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	0011      	movs	r1, r2
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f000 f954 	bl	8007278 <USBD_CtlError>
            return;
 8006fd0:	e060      	b.n	8007094 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	f000 fa37 	bl	8007448 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006fda:	e05b      	b.n	8007094 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f000 fa32 	bl	8007448 <USBD_CtlSendStatus>
        break;
 8006fe4:	e056      	b.n	8007094 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006fe6:	4b2d      	ldr	r3, [pc, #180]	; (800709c <USBD_SetConfig+0x144>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d115      	bne.n	800701a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	23a7      	movs	r3, #167	; 0xa7
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	2102      	movs	r1, #2
 8006ff6:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006ff8:	4b28      	ldr	r3, [pc, #160]	; (800709c <USBD_SetConfig+0x144>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	001a      	movs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007002:	4b26      	ldr	r3, [pc, #152]	; (800709c <USBD_SetConfig+0x144>)
 8007004:	781a      	ldrb	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	0011      	movs	r1, r2
 800700a:	0018      	movs	r0, r3
 800700c:	f7ff f8c4 	bl	8006198 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	0018      	movs	r0, r3
 8007014:	f000 fa18 	bl	8007448 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007018:	e03c      	b.n	8007094 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800701a:	4b20      	ldr	r3, [pc, #128]	; (800709c <USBD_SetConfig+0x144>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	001a      	movs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	429a      	cmp	r2, r3
 8007026:	d022      	beq.n	800706e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	b2da      	uxtb	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	0011      	movs	r1, r2
 8007032:	0018      	movs	r0, r3
 8007034:	f7ff f8b0 	bl	8006198 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007038:	4b18      	ldr	r3, [pc, #96]	; (800709c <USBD_SetConfig+0x144>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	001a      	movs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007042:	4b16      	ldr	r3, [pc, #88]	; (800709c <USBD_SetConfig+0x144>)
 8007044:	781a      	ldrb	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	0011      	movs	r1, r2
 800704a:	0018      	movs	r0, r3
 800704c:	f7ff f87d 	bl	800614a <USBD_SetClassConfig>
 8007050:	0003      	movs	r3, r0
 8007052:	2b02      	cmp	r3, #2
 8007054:	d106      	bne.n	8007064 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	0011      	movs	r1, r2
 800705c:	0018      	movs	r0, r3
 800705e:	f000 f90b 	bl	8007278 <USBD_CtlError>
            return;
 8007062:	e017      	b.n	8007094 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	0018      	movs	r0, r3
 8007068:	f000 f9ee 	bl	8007448 <USBD_CtlSendStatus>
        break;
 800706c:	e012      	b.n	8007094 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	0018      	movs	r0, r3
 8007072:	f000 f9e9 	bl	8007448 <USBD_CtlSendStatus>
        break;
 8007076:	e00d      	b.n	8007094 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	0011      	movs	r1, r2
 800707e:	0018      	movs	r0, r3
 8007080:	f000 f8fa 	bl	8007278 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007084:	4b05      	ldr	r3, [pc, #20]	; (800709c <USBD_SetConfig+0x144>)
 8007086:	781a      	ldrb	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	0011      	movs	r1, r2
 800708c:	0018      	movs	r0, r3
 800708e:	f7ff f883 	bl	8006198 <USBD_ClrClassConfig>
        break;
 8007092:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007094:	46bd      	mov	sp, r7
 8007096:	b002      	add	sp, #8
 8007098:	bd80      	pop	{r7, pc}
 800709a:	46c0      	nop			; (mov r8, r8)
 800709c:	2000019c 	.word	0x2000019c

080070a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	88db      	ldrh	r3, [r3, #6]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d006      	beq.n	80070c0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	0011      	movs	r1, r2
 80070b8:	0018      	movs	r0, r3
 80070ba:	f000 f8dd 	bl	8007278 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070be:	e026      	b.n	800710e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	23a7      	movs	r3, #167	; 0xa7
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	5cd3      	ldrb	r3, [r2, r3]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	dc02      	bgt.n	80070d2 <USBD_GetConfig+0x32>
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dc03      	bgt.n	80070d8 <USBD_GetConfig+0x38>
 80070d0:	e016      	b.n	8007100 <USBD_GetConfig+0x60>
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d00c      	beq.n	80070f0 <USBD_GetConfig+0x50>
 80070d6:	e013      	b.n	8007100 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3308      	adds	r3, #8
 80070e2:	0019      	movs	r1, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	0018      	movs	r0, r3
 80070ea:	f000 f943 	bl	8007374 <USBD_CtlSendData>
        break;
 80070ee:	e00e      	b.n	800710e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	1d19      	adds	r1, r3, #4
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	0018      	movs	r0, r3
 80070fa:	f000 f93b 	bl	8007374 <USBD_CtlSendData>
        break;
 80070fe:	e006      	b.n	800710e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	0011      	movs	r1, r2
 8007106:	0018      	movs	r0, r3
 8007108:	f000 f8b6 	bl	8007278 <USBD_CtlError>
        break;
 800710c:	46c0      	nop			; (mov r8, r8)
}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	46bd      	mov	sp, r7
 8007112:	b002      	add	sp, #8
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	23a7      	movs	r3, #167	; 0xa7
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	5cd3      	ldrb	r3, [r2, r3]
 8007128:	3b01      	subs	r3, #1
 800712a:	2b02      	cmp	r3, #2
 800712c:	d822      	bhi.n	8007174 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	88db      	ldrh	r3, [r3, #6]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d006      	beq.n	8007144 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	0011      	movs	r1, r2
 800713c:	0018      	movs	r0, r3
 800713e:	f000 f89b 	bl	8007278 <USBD_CtlError>
        break;
 8007142:	e01e      	b.n	8007182 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	23a9      	movs	r3, #169	; 0xa9
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	58d3      	ldr	r3, [r2, r3]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	2202      	movs	r2, #2
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	330c      	adds	r3, #12
 8007166:	0019      	movs	r1, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	0018      	movs	r0, r3
 800716e:	f000 f901 	bl	8007374 <USBD_CtlSendData>
      break;
 8007172:	e006      	b.n	8007182 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	0011      	movs	r1, r2
 800717a:	0018      	movs	r0, r3
 800717c:	f000 f87c 	bl	8007278 <USBD_CtlError>
      break;
 8007180:	46c0      	nop			; (mov r8, r8)
  }
}
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	46bd      	mov	sp, r7
 8007186:	b002      	add	sp, #8
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	885b      	ldrh	r3, [r3, #2]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d108      	bne.n	80071ae <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	23a9      	movs	r3, #169	; 0xa9
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	2101      	movs	r1, #1
 80071a4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	0018      	movs	r0, r3
 80071aa:	f000 f94d 	bl	8007448 <USBD_CtlSendStatus>
  }
}
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	46bd      	mov	sp, r7
 80071b2:	b002      	add	sp, #8
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	23a7      	movs	r3, #167	; 0xa7
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	5cd3      	ldrb	r3, [r2, r3]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d80d      	bhi.n	80071ea <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	885b      	ldrh	r3, [r3, #2]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d110      	bne.n	80071f8 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	23a9      	movs	r3, #169	; 0xa9
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	2100      	movs	r1, #0
 80071de:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	0018      	movs	r0, r3
 80071e4:	f000 f930 	bl	8007448 <USBD_CtlSendStatus>
      }
      break;
 80071e8:	e006      	b.n	80071f8 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	0011      	movs	r1, r2
 80071f0:	0018      	movs	r0, r3
 80071f2:	f000 f841 	bl	8007278 <USBD_CtlError>
      break;
 80071f6:	e000      	b.n	80071fa <USBD_ClrFeature+0x44>
      break;
 80071f8:	46c0      	nop			; (mov r8, r8)
  }
}
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	46bd      	mov	sp, r7
 80071fe:	b002      	add	sp, #8
 8007200:	bd80      	pop	{r7, pc}

08007202 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781a      	ldrb	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	785a      	ldrb	r2, [r3, #1]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	3302      	adds	r3, #2
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	b29a      	uxth	r2, r3
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	3303      	adds	r3, #3
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	b29b      	uxth	r3, r3
 800722c:	021b      	lsls	r3, r3, #8
 800722e:	b29b      	uxth	r3, r3
 8007230:	18d3      	adds	r3, r2, r3
 8007232:	b29a      	uxth	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	3304      	adds	r3, #4
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	b29a      	uxth	r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	3305      	adds	r3, #5
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	b29b      	uxth	r3, r3
 800724c:	18d3      	adds	r3, r2, r3
 800724e:	b29a      	uxth	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	3306      	adds	r3, #6
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	b29a      	uxth	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	3307      	adds	r3, #7
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	021b      	lsls	r3, r3, #8
 8007266:	b29b      	uxth	r3, r3
 8007268:	18d3      	adds	r3, r2, r3
 800726a:	b29a      	uxth	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	80da      	strh	r2, [r3, #6]

}
 8007270:	46c0      	nop			; (mov r8, r8)
 8007272:	46bd      	mov	sp, r7
 8007274:	b002      	add	sp, #8
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2180      	movs	r1, #128	; 0x80
 8007286:	0018      	movs	r0, r3
 8007288:	f000 fcbd 	bl	8007c06 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2100      	movs	r1, #0
 8007290:	0018      	movs	r0, r3
 8007292:	f000 fcb8 	bl	8007c06 <USBD_LL_StallEP>
}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	46bd      	mov	sp, r7
 800729a:	b002      	add	sp, #8
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800729e:	b590      	push	{r4, r7, lr}
 80072a0:	b087      	sub	sp, #28
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	60f8      	str	r0, [r7, #12]
 80072a6:	60b9      	str	r1, [r7, #8]
 80072a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072aa:	2417      	movs	r4, #23
 80072ac:	193b      	adds	r3, r7, r4
 80072ae:	2200      	movs	r2, #0
 80072b0:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d03c      	beq.n	8007332 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	0018      	movs	r0, r3
 80072bc:	f000 f83d 	bl	800733a <USBD_GetLen>
 80072c0:	0003      	movs	r3, r0
 80072c2:	3301      	adds	r3, #1
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	18db      	adds	r3, r3, r3
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80072ce:	193b      	adds	r3, r7, r4
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	193a      	adds	r2, r7, r4
 80072d4:	1c59      	adds	r1, r3, #1
 80072d6:	7011      	strb	r1, [r2, #0]
 80072d8:	001a      	movs	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	189b      	adds	r3, r3, r2
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80072e4:	193b      	adds	r3, r7, r4
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	193a      	adds	r2, r7, r4
 80072ea:	1c59      	adds	r1, r3, #1
 80072ec:	7011      	strb	r1, [r2, #0]
 80072ee:	001a      	movs	r2, r3
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	189b      	adds	r3, r3, r2
 80072f4:	2203      	movs	r2, #3
 80072f6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80072f8:	e017      	b.n	800732a <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	60fa      	str	r2, [r7, #12]
 8007300:	2417      	movs	r4, #23
 8007302:	193a      	adds	r2, r7, r4
 8007304:	7812      	ldrb	r2, [r2, #0]
 8007306:	1939      	adds	r1, r7, r4
 8007308:	1c50      	adds	r0, r2, #1
 800730a:	7008      	strb	r0, [r1, #0]
 800730c:	0011      	movs	r1, r2
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	1852      	adds	r2, r2, r1
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007316:	193b      	adds	r3, r7, r4
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	193a      	adds	r2, r7, r4
 800731c:	1c59      	adds	r1, r3, #1
 800731e:	7011      	strb	r1, [r2, #0]
 8007320:	001a      	movs	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	189b      	adds	r3, r3, r2
 8007326:	2200      	movs	r2, #0
 8007328:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e3      	bne.n	80072fa <USBD_GetString+0x5c>
    }
  }
}
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	46bd      	mov	sp, r7
 8007336:	b007      	add	sp, #28
 8007338:	bd90      	pop	{r4, r7, pc}

0800733a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007342:	230f      	movs	r3, #15
 8007344:	18fb      	adds	r3, r7, r3
 8007346:	2200      	movs	r2, #0
 8007348:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800734a:	e008      	b.n	800735e <USBD_GetLen+0x24>
  {
    len++;
 800734c:	210f      	movs	r1, #15
 800734e:	187b      	adds	r3, r7, r1
 8007350:	781a      	ldrb	r2, [r3, #0]
 8007352:	187b      	adds	r3, r7, r1
 8007354:	3201      	adds	r2, #1
 8007356:	701a      	strb	r2, [r3, #0]
    buf++;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3301      	adds	r3, #1
 800735c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1f2      	bne.n	800734c <USBD_GetLen+0x12>
  }

  return len;
 8007366:	230f      	movs	r3, #15
 8007368:	18fb      	adds	r3, r7, r3
 800736a:	781b      	ldrb	r3, [r3, #0]
}
 800736c:	0018      	movs	r0, r3
 800736e:	46bd      	mov	sp, r7
 8007370:	b004      	add	sp, #16
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	1dbb      	adds	r3, r7, #6
 8007380:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	23a5      	movs	r3, #165	; 0xa5
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	2102      	movs	r1, #2
 800738a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800738c:	1dbb      	adds	r3, r7, #6
 800738e:	881a      	ldrh	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007394:	1dbb      	adds	r3, r7, #6
 8007396:	881a      	ldrh	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800739c:	1dbb      	adds	r3, r7, #6
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	2100      	movs	r1, #0
 80073a6:	f000 fce0 	bl	8007d6a <USBD_LL_Transmit>

  return USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	0018      	movs	r0, r3
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b004      	add	sp, #16
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	1dbb      	adds	r3, r7, #6
 80073c0:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073c2:	1dbb      	adds	r3, r7, #6
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	2100      	movs	r1, #0
 80073cc:	f000 fccd 	bl	8007d6a <USBD_LL_Transmit>

  return USBD_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	0018      	movs	r0, r3
 80073d4:	46bd      	mov	sp, r7
 80073d6:	b004      	add	sp, #16
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	1dbb      	adds	r3, r7, #6
 80073e6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	23a5      	movs	r3, #165	; 0xa5
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	2103      	movs	r1, #3
 80073f0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80073f2:	1dbb      	adds	r3, r7, #6
 80073f4:	8819      	ldrh	r1, [r3, #0]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	23ae      	movs	r3, #174	; 0xae
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80073fe:	1dbb      	adds	r3, r7, #6
 8007400:	8819      	ldrh	r1, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	23b0      	movs	r3, #176	; 0xb0
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800740a:	1dbb      	adds	r3, r7, #6
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	2100      	movs	r1, #0
 8007414:	f000 fce0 	bl	8007dd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	0018      	movs	r0, r3
 800741c:	46bd      	mov	sp, r7
 800741e:	b004      	add	sp, #16
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	1dbb      	adds	r3, r7, #6
 800742e:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007430:	1dbb      	adds	r3, r7, #6
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	2100      	movs	r1, #0
 800743a:	f000 fccd 	bl	8007dd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	0018      	movs	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	b004      	add	sp, #16
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	23a5      	movs	r3, #165	; 0xa5
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	2104      	movs	r1, #4
 8007458:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	2300      	movs	r3, #0
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	f000 fc82 	bl	8007d6a <USBD_LL_Transmit>

  return USBD_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	0018      	movs	r0, r3
 800746a:	46bd      	mov	sp, r7
 800746c:	b002      	add	sp, #8
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	23a5      	movs	r3, #165	; 0xa5
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	2105      	movs	r1, #5
 8007480:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	2300      	movs	r3, #0
 8007486:	2200      	movs	r2, #0
 8007488:	2100      	movs	r1, #0
 800748a:	f000 fca5 	bl	8007dd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	0018      	movs	r0, r3
 8007492:	46bd      	mov	sp, r7
 8007494:	b002      	add	sp, #8
 8007496:	bd80      	pop	{r7, pc}

08007498 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800749c:	4914      	ldr	r1, [pc, #80]	; (80074f0 <MX_USB_DEVICE_Init+0x58>)
 800749e:	4b15      	ldr	r3, [pc, #84]	; (80074f4 <MX_USB_DEVICE_Init+0x5c>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	0018      	movs	r0, r3
 80074a4:	f7fe fdea 	bl	800607c <USBD_Init>
 80074a8:	1e03      	subs	r3, r0, #0
 80074aa:	d001      	beq.n	80074b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074ac:	f7f9 f8e6 	bl	800067c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80074b0:	4a11      	ldr	r2, [pc, #68]	; (80074f8 <MX_USB_DEVICE_Init+0x60>)
 80074b2:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <MX_USB_DEVICE_Init+0x5c>)
 80074b4:	0011      	movs	r1, r2
 80074b6:	0018      	movs	r0, r3
 80074b8:	f7fe fe11 	bl	80060de <USBD_RegisterClass>
 80074bc:	1e03      	subs	r3, r0, #0
 80074be:	d001      	beq.n	80074c4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80074c0:	f7f9 f8dc 	bl	800067c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80074c4:	4a0d      	ldr	r2, [pc, #52]	; (80074fc <MX_USB_DEVICE_Init+0x64>)
 80074c6:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <MX_USB_DEVICE_Init+0x5c>)
 80074c8:	0011      	movs	r1, r2
 80074ca:	0018      	movs	r0, r3
 80074cc:	f7fe fd26 	bl	8005f1c <USBD_CDC_RegisterInterface>
 80074d0:	1e03      	subs	r3, r0, #0
 80074d2:	d001      	beq.n	80074d8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80074d4:	f7f9 f8d2 	bl	800067c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074d8:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <MX_USB_DEVICE_Init+0x5c>)
 80074da:	0018      	movs	r0, r3
 80074dc:	f7fe fe1f 	bl	800611e <USBD_Start>
 80074e0:	1e03      	subs	r3, r0, #0
 80074e2:	d001      	beq.n	80074e8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80074e4:	f7f9 f8ca 	bl	800067c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074e8:	46c0      	nop			; (mov r8, r8)
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	2000012c 	.word	0x2000012c
 80074f4:	200001a0 	.word	0x200001a0
 80074f8:	20000018 	.word	0x20000018
 80074fc:	2000011c 	.word	0x2000011c

08007500 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007504:	4907      	ldr	r1, [pc, #28]	; (8007524 <CDC_Init_FS+0x24>)
 8007506:	4b08      	ldr	r3, [pc, #32]	; (8007528 <CDC_Init_FS+0x28>)
 8007508:	2200      	movs	r2, #0
 800750a:	0018      	movs	r0, r3
 800750c:	f7fe fd21 	bl	8005f52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007510:	4a06      	ldr	r2, [pc, #24]	; (800752c <CDC_Init_FS+0x2c>)
 8007512:	4b05      	ldr	r3, [pc, #20]	; (8007528 <CDC_Init_FS+0x28>)
 8007514:	0011      	movs	r1, r2
 8007516:	0018      	movs	r0, r3
 8007518:	f7fe fd37 	bl	8005f8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800751c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800751e:	0018      	movs	r0, r3
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	20000864 	.word	0x20000864
 8007528:	200001a0 	.word	0x200001a0
 800752c:	20000464 	.word	0x20000464

08007530 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007534:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007536:	0018      	movs	r0, r3
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6039      	str	r1, [r7, #0]
 8007544:	0011      	movs	r1, r2
 8007546:	1dfb      	adds	r3, r7, #7
 8007548:	1c02      	adds	r2, r0, #0
 800754a:	701a      	strb	r2, [r3, #0]
 800754c:	1d3b      	adds	r3, r7, #4
 800754e:	1c0a      	adds	r2, r1, #0
 8007550:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007552:	1dfb      	adds	r3, r7, #7
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b23      	cmp	r3, #35	; 0x23
 8007558:	d804      	bhi.n	8007564 <CDC_Control_FS+0x28>
 800755a:	009a      	lsls	r2, r3, #2
 800755c:	4b04      	ldr	r3, [pc, #16]	; (8007570 <CDC_Control_FS+0x34>)
 800755e:	18d3      	adds	r3, r2, r3
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007564:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8007566:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007568:	0018      	movs	r0, r3
 800756a:	46bd      	mov	sp, r7
 800756c:	b002      	add	sp, #8
 800756e:	bd80      	pop	{r7, pc}
 8007570:	0800804c 	.word	0x0800804c

08007574 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <CDC_Receive_FS+0x38>)
 8007582:	0011      	movs	r1, r2
 8007584:	0018      	movs	r0, r3
 8007586:	f7fe fd00 	bl	8005f8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800758a:	4b08      	ldr	r3, [pc, #32]	; (80075ac <CDC_Receive_FS+0x38>)
 800758c:	0018      	movs	r0, r3
 800758e:	f7fe fd47 	bl	8006020 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf,Len[0]);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	0011      	movs	r1, r2
 800759a:	0018      	movs	r0, r3
 800759c:	f7f9 f856 	bl	800064c <CDC_ReceiveCallBack>
  return (USBD_OK);
 80075a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075a2:	0018      	movs	r0, r3
 80075a4:	46bd      	mov	sp, r7
 80075a6:	b002      	add	sp, #8
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	200001a0 	.word	0x200001a0

080075b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80075b0:	b5b0      	push	{r4, r5, r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	000a      	movs	r2, r1
 80075ba:	1cbb      	adds	r3, r7, #2
 80075bc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80075be:	230f      	movs	r3, #15
 80075c0:	18fb      	adds	r3, r7, r3
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80075c6:	4a11      	ldr	r2, [pc, #68]	; (800760c <CDC_Transmit_FS+0x5c>)
 80075c8:	23ae      	movs	r3, #174	; 0xae
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	58d3      	ldr	r3, [r2, r3]
 80075ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	2385      	movs	r3, #133	; 0x85
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	58d3      	ldr	r3, [r2, r3]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80075dc:	2301      	movs	r3, #1
 80075de:	e010      	b.n	8007602 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80075e0:	1cbb      	adds	r3, r7, #2
 80075e2:	881a      	ldrh	r2, [r3, #0]
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	4b09      	ldr	r3, [pc, #36]	; (800760c <CDC_Transmit_FS+0x5c>)
 80075e8:	0018      	movs	r0, r3
 80075ea:	f7fe fcb2 	bl	8005f52 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80075ee:	250f      	movs	r5, #15
 80075f0:	197c      	adds	r4, r7, r5
 80075f2:	4b06      	ldr	r3, [pc, #24]	; (800760c <CDC_Transmit_FS+0x5c>)
 80075f4:	0018      	movs	r0, r3
 80075f6:	f7fe fcdc 	bl	8005fb2 <USBD_CDC_TransmitPacket>
 80075fa:	0003      	movs	r3, r0
 80075fc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80075fe:	197b      	adds	r3, r7, r5
 8007600:	781b      	ldrb	r3, [r3, #0]
}
 8007602:	0018      	movs	r0, r3
 8007604:	46bd      	mov	sp, r7
 8007606:	b004      	add	sp, #16
 8007608:	bdb0      	pop	{r4, r5, r7, pc}
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	200001a0 	.word	0x200001a0

08007610 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	0002      	movs	r2, r0
 8007618:	6039      	str	r1, [r7, #0]
 800761a:	1dfb      	adds	r3, r7, #7
 800761c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2212      	movs	r2, #18
 8007622:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007624:	4b02      	ldr	r3, [pc, #8]	; (8007630 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007626:	0018      	movs	r0, r3
 8007628:	46bd      	mov	sp, r7
 800762a:	b002      	add	sp, #8
 800762c:	bd80      	pop	{r7, pc}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	20000148 	.word	0x20000148

08007634 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	0002      	movs	r2, r0
 800763c:	6039      	str	r1, [r7, #0]
 800763e:	1dfb      	adds	r3, r7, #7
 8007640:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2204      	movs	r2, #4
 8007646:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007648:	4b02      	ldr	r3, [pc, #8]	; (8007654 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800764a:	0018      	movs	r0, r3
 800764c:	46bd      	mov	sp, r7
 800764e:	b002      	add	sp, #8
 8007650:	bd80      	pop	{r7, pc}
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	2000015c 	.word	0x2000015c

08007658 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	0002      	movs	r2, r0
 8007660:	6039      	str	r1, [r7, #0]
 8007662:	1dfb      	adds	r3, r7, #7
 8007664:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007666:	1dfb      	adds	r3, r7, #7
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d106      	bne.n	800767c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	4908      	ldr	r1, [pc, #32]	; (8007694 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007672:	4b09      	ldr	r3, [pc, #36]	; (8007698 <USBD_FS_ProductStrDescriptor+0x40>)
 8007674:	0018      	movs	r0, r3
 8007676:	f7ff fe12 	bl	800729e <USBD_GetString>
 800767a:	e005      	b.n	8007688 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	4905      	ldr	r1, [pc, #20]	; (8007694 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <USBD_FS_ProductStrDescriptor+0x40>)
 8007682:	0018      	movs	r0, r3
 8007684:	f7ff fe0b 	bl	800729e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007688:	4b02      	ldr	r3, [pc, #8]	; (8007694 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800768a:	0018      	movs	r0, r3
 800768c:	46bd      	mov	sp, r7
 800768e:	b002      	add	sp, #8
 8007690:	bd80      	pop	{r7, pc}
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	20000c64 	.word	0x20000c64
 8007698:	08007f88 	.word	0x08007f88

0800769c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	0002      	movs	r2, r0
 80076a4:	6039      	str	r1, [r7, #0]
 80076a6:	1dfb      	adds	r3, r7, #7
 80076a8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	4904      	ldr	r1, [pc, #16]	; (80076c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076ae:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80076b0:	0018      	movs	r0, r3
 80076b2:	f7ff fdf4 	bl	800729e <USBD_GetString>
  return USBD_StrDesc;
 80076b6:	4b02      	ldr	r3, [pc, #8]	; (80076c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80076b8:	0018      	movs	r0, r3
 80076ba:	46bd      	mov	sp, r7
 80076bc:	b002      	add	sp, #8
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	20000c64 	.word	0x20000c64
 80076c4:	08007fa0 	.word	0x08007fa0

080076c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	0002      	movs	r2, r0
 80076d0:	6039      	str	r1, [r7, #0]
 80076d2:	1dfb      	adds	r3, r7, #7
 80076d4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	221a      	movs	r2, #26
 80076da:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076dc:	f000 f84c 	bl	8007778 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076e0:	4b02      	ldr	r3, [pc, #8]	; (80076ec <USBD_FS_SerialStrDescriptor+0x24>)
}
 80076e2:	0018      	movs	r0, r3
 80076e4:	46bd      	mov	sp, r7
 80076e6:	b002      	add	sp, #8
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	20000160 	.word	0x20000160

080076f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	0002      	movs	r2, r0
 80076f8:	6039      	str	r1, [r7, #0]
 80076fa:	1dfb      	adds	r3, r7, #7
 80076fc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80076fe:	1dfb      	adds	r3, r7, #7
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	4908      	ldr	r1, [pc, #32]	; (800772c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800770a:	4b09      	ldr	r3, [pc, #36]	; (8007730 <USBD_FS_ConfigStrDescriptor+0x40>)
 800770c:	0018      	movs	r0, r3
 800770e:	f7ff fdc6 	bl	800729e <USBD_GetString>
 8007712:	e005      	b.n	8007720 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	4905      	ldr	r1, [pc, #20]	; (800772c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007718:	4b05      	ldr	r3, [pc, #20]	; (8007730 <USBD_FS_ConfigStrDescriptor+0x40>)
 800771a:	0018      	movs	r0, r3
 800771c:	f7ff fdbf 	bl	800729e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007720:	4b02      	ldr	r3, [pc, #8]	; (800772c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8007722:	0018      	movs	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	b002      	add	sp, #8
 8007728:	bd80      	pop	{r7, pc}
 800772a:	46c0      	nop			; (mov r8, r8)
 800772c:	20000c64 	.word	0x20000c64
 8007730:	08007fb4 	.word	0x08007fb4

08007734 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	0002      	movs	r2, r0
 800773c:	6039      	str	r1, [r7, #0]
 800773e:	1dfb      	adds	r3, r7, #7
 8007740:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007742:	1dfb      	adds	r3, r7, #7
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4908      	ldr	r1, [pc, #32]	; (8007770 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800774e:	4b09      	ldr	r3, [pc, #36]	; (8007774 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007750:	0018      	movs	r0, r3
 8007752:	f7ff fda4 	bl	800729e <USBD_GetString>
 8007756:	e005      	b.n	8007764 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	4905      	ldr	r1, [pc, #20]	; (8007770 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800775e:	0018      	movs	r0, r3
 8007760:	f7ff fd9d 	bl	800729e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007764:	4b02      	ldr	r3, [pc, #8]	; (8007770 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007766:	0018      	movs	r0, r3
 8007768:	46bd      	mov	sp, r7
 800776a:	b002      	add	sp, #8
 800776c:	bd80      	pop	{r7, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	20000c64 	.word	0x20000c64
 8007774:	08007fc0 	.word	0x08007fc0

08007778 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800777e:	4b10      	ldr	r3, [pc, #64]	; (80077c0 <Get_SerialNum+0x48>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007784:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <Get_SerialNum+0x4c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800778a:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <Get_SerialNum+0x50>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	18d3      	adds	r3, r2, r3
 8007796:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00b      	beq.n	80077b6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800779e:	490b      	ldr	r1, [pc, #44]	; (80077cc <Get_SerialNum+0x54>)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2208      	movs	r2, #8
 80077a4:	0018      	movs	r0, r3
 80077a6:	f000 f815 	bl	80077d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077aa:	4909      	ldr	r1, [pc, #36]	; (80077d0 <Get_SerialNum+0x58>)
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2204      	movs	r2, #4
 80077b0:	0018      	movs	r0, r3
 80077b2:	f000 f80f 	bl	80077d4 <IntToUnicode>
  }
}
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	46bd      	mov	sp, r7
 80077ba:	b004      	add	sp, #16
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	46c0      	nop			; (mov r8, r8)
 80077c0:	1ff80050 	.word	0x1ff80050
 80077c4:	1ff80054 	.word	0x1ff80054
 80077c8:	1ff80058 	.word	0x1ff80058
 80077cc:	20000162 	.word	0x20000162
 80077d0:	20000172 	.word	0x20000172

080077d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	1dfb      	adds	r3, r7, #7
 80077e0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80077e2:	2117      	movs	r1, #23
 80077e4:	187b      	adds	r3, r7, r1
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80077ea:	187b      	adds	r3, r7, r1
 80077ec:	2200      	movs	r2, #0
 80077ee:	701a      	strb	r2, [r3, #0]
 80077f0:	e02f      	b.n	8007852 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	0f1b      	lsrs	r3, r3, #28
 80077f6:	2b09      	cmp	r3, #9
 80077f8:	d80d      	bhi.n	8007816 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	0f1b      	lsrs	r3, r3, #28
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	2317      	movs	r3, #23
 8007802:	18fb      	adds	r3, r7, r3
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	0019      	movs	r1, r3
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	185b      	adds	r3, r3, r1
 800780e:	3230      	adds	r2, #48	; 0x30
 8007810:	b2d2      	uxtb	r2, r2
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	e00c      	b.n	8007830 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	0f1b      	lsrs	r3, r3, #28
 800781a:	b2da      	uxtb	r2, r3
 800781c:	2317      	movs	r3, #23
 800781e:	18fb      	adds	r3, r7, r3
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	0019      	movs	r1, r3
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	185b      	adds	r3, r3, r1
 800782a:	3237      	adds	r2, #55	; 0x37
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007836:	2117      	movs	r1, #23
 8007838:	187b      	adds	r3, r7, r1
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	3301      	adds	r3, #1
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	18d3      	adds	r3, r2, r3
 8007844:	2200      	movs	r2, #0
 8007846:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007848:	187b      	adds	r3, r7, r1
 800784a:	781a      	ldrb	r2, [r3, #0]
 800784c:	187b      	adds	r3, r7, r1
 800784e:	3201      	adds	r2, #1
 8007850:	701a      	strb	r2, [r3, #0]
 8007852:	2317      	movs	r3, #23
 8007854:	18fa      	adds	r2, r7, r3
 8007856:	1dfb      	adds	r3, r7, #7
 8007858:	7812      	ldrb	r2, [r2, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	429a      	cmp	r2, r3
 800785e:	d3c8      	bcc.n	80077f2 <IntToUnicode+0x1e>
  }
}
 8007860:	46c0      	nop			; (mov r8, r8)
 8007862:	46c0      	nop			; (mov r8, r8)
 8007864:	46bd      	mov	sp, r7
 8007866:	b006      	add	sp, #24
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a0a      	ldr	r2, [pc, #40]	; (80078a4 <HAL_PCD_MspInit+0x38>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d10e      	bne.n	800789c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800787e:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <HAL_PCD_MspInit+0x3c>)
 8007880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007882:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <HAL_PCD_MspInit+0x3c>)
 8007884:	2180      	movs	r1, #128	; 0x80
 8007886:	0409      	lsls	r1, r1, #16
 8007888:	430a      	orrs	r2, r1
 800788a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800788c:	2200      	movs	r2, #0
 800788e:	2100      	movs	r1, #0
 8007890:	201f      	movs	r0, #31
 8007892:	f7f9 f87d 	bl	8000990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007896:	201f      	movs	r0, #31
 8007898:	f7f9 f88f 	bl	80009ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800789c:	46c0      	nop			; (mov r8, r8)
 800789e:	46bd      	mov	sp, r7
 80078a0:	b002      	add	sp, #8
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40005c00 	.word	0x40005c00
 80078a8:	40021000 	.word	0x40021000

080078ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	23bc      	movs	r3, #188	; 0xbc
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	58d2      	ldr	r2, [r2, r3]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	21ac      	movs	r1, #172	; 0xac
 80078c0:	0089      	lsls	r1, r1, #2
 80078c2:	468c      	mov	ip, r1
 80078c4:	4463      	add	r3, ip
 80078c6:	0019      	movs	r1, r3
 80078c8:	0010      	movs	r0, r2
 80078ca:	f7fe fc7b 	bl	80061c4 <USBD_LL_SetupStage>
}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	46bd      	mov	sp, r7
 80078d2:	b002      	add	sp, #8
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d6:	b590      	push	{r4, r7, lr}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	000a      	movs	r2, r1
 80078e0:	1cfb      	adds	r3, r7, #3
 80078e2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	23bc      	movs	r3, #188	; 0xbc
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	58d4      	ldr	r4, [r2, r3]
 80078ec:	1cfb      	adds	r3, r7, #3
 80078ee:	781a      	ldrb	r2, [r3, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	23be      	movs	r3, #190	; 0xbe
 80078f4:	0059      	lsls	r1, r3, #1
 80078f6:	0013      	movs	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	189b      	adds	r3, r3, r2
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	18c3      	adds	r3, r0, r3
 8007900:	185b      	adds	r3, r3, r1
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	1cfb      	adds	r3, r7, #3
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	0019      	movs	r1, r3
 800790a:	0020      	movs	r0, r4
 800790c:	f7fe fcb8 	bl	8006280 <USBD_LL_DataOutStage>
}
 8007910:	46c0      	nop			; (mov r8, r8)
 8007912:	46bd      	mov	sp, r7
 8007914:	b003      	add	sp, #12
 8007916:	bd90      	pop	{r4, r7, pc}

08007918 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	000a      	movs	r2, r1
 8007922:	1cfb      	adds	r3, r7, #3
 8007924:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	23bc      	movs	r3, #188	; 0xbc
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	58d0      	ldr	r0, [r2, r3]
 800792e:	1cfb      	adds	r3, r7, #3
 8007930:	781a      	ldrb	r2, [r3, #0]
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	0013      	movs	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	189b      	adds	r3, r3, r2
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	18cb      	adds	r3, r1, r3
 800793e:	333c      	adds	r3, #60	; 0x3c
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	1cfb      	adds	r3, r7, #3
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	0019      	movs	r1, r3
 8007948:	f7fe fd1c 	bl	8006384 <USBD_LL_DataInStage>
}
 800794c:	46c0      	nop			; (mov r8, r8)
 800794e:	46bd      	mov	sp, r7
 8007950:	b002      	add	sp, #8
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	23bc      	movs	r3, #188	; 0xbc
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	58d3      	ldr	r3, [r2, r3]
 8007964:	0018      	movs	r0, r3
 8007966:	f7fe fe53 	bl	8006610 <USBD_LL_SOF>
}
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	46bd      	mov	sp, r7
 800796e:	b002      	add	sp, #8
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800797a:	230f      	movs	r3, #15
 800797c:	18fb      	adds	r3, r7, r3
 800797e:	2201      	movs	r2, #1
 8007980:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	2b02      	cmp	r3, #2
 8007988:	d001      	beq.n	800798e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800798a:	f7f8 fe77 	bl	800067c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	23bc      	movs	r3, #188	; 0xbc
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	58d2      	ldr	r2, [r2, r3]
 8007996:	230f      	movs	r3, #15
 8007998:	18fb      	adds	r3, r7, r3
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	0019      	movs	r1, r3
 800799e:	0010      	movs	r0, r2
 80079a0:	f7fe fdf5 	bl	800658e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	23bc      	movs	r3, #188	; 0xbc
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	58d3      	ldr	r3, [r2, r3]
 80079ac:	0018      	movs	r0, r3
 80079ae:	f7fe fda6 	bl	80064fe <USBD_LL_Reset>
}
 80079b2:	46c0      	nop			; (mov r8, r8)
 80079b4:	46bd      	mov	sp, r7
 80079b6:	b004      	add	sp, #16
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	23bc      	movs	r3, #188	; 0xbc
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	58d3      	ldr	r3, [r2, r3]
 80079cc:	0018      	movs	r0, r3
 80079ce:	f7fe fdef 	bl	80065b0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079da:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <HAL_PCD_SuspendCallback+0x34>)
 80079dc:	691a      	ldr	r2, [r3, #16]
 80079de:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <HAL_PCD_SuspendCallback+0x34>)
 80079e0:	2106      	movs	r1, #6
 80079e2:	430a      	orrs	r2, r1
 80079e4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	46bd      	mov	sp, r7
 80079ea:	b002      	add	sp, #8
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	46c0      	nop			; (mov r8, r8)
 80079f0:	e000ed00 	.word	0xe000ed00

080079f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d007      	beq.n	8007a14 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a04:	4b09      	ldr	r3, [pc, #36]	; (8007a2c <HAL_PCD_ResumeCallback+0x38>)
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <HAL_PCD_ResumeCallback+0x38>)
 8007a0a:	2106      	movs	r1, #6
 8007a0c:	438a      	bics	r2, r1
 8007a0e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007a10:	f000 fa44 	bl	8007e9c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	23bc      	movs	r3, #188	; 0xbc
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	58d3      	ldr	r3, [r2, r3]
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f7fe fddf 	bl	80065e0 <USBD_LL_Resume>
}
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	46bd      	mov	sp, r7
 8007a26:	b002      	add	sp, #8
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	e000ed00 	.word	0xe000ed00

08007a30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007a38:	4a2d      	ldr	r2, [pc, #180]	; (8007af0 <USBD_LL_Init+0xc0>)
 8007a3a:	23bc      	movs	r3, #188	; 0xbc
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	23b0      	movs	r3, #176	; 0xb0
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4929      	ldr	r1, [pc, #164]	; (8007af0 <USBD_LL_Init+0xc0>)
 8007a4a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007a4c:	4b28      	ldr	r3, [pc, #160]	; (8007af0 <USBD_LL_Init+0xc0>)
 8007a4e:	4a29      	ldr	r2, [pc, #164]	; (8007af4 <USBD_LL_Init+0xc4>)
 8007a50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007a52:	4b27      	ldr	r3, [pc, #156]	; (8007af0 <USBD_LL_Init+0xc0>)
 8007a54:	2208      	movs	r2, #8
 8007a56:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007a58:	4b25      	ldr	r3, [pc, #148]	; (8007af0 <USBD_LL_Init+0xc0>)
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a5e:	4b24      	ldr	r3, [pc, #144]	; (8007af0 <USBD_LL_Init+0xc0>)
 8007a60:	2202      	movs	r2, #2
 8007a62:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007a64:	4b22      	ldr	r3, [pc, #136]	; (8007af0 <USBD_LL_Init+0xc0>)
 8007a66:	2200      	movs	r2, #0
 8007a68:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a6a:	4b21      	ldr	r3, [pc, #132]	; (8007af0 <USBD_LL_Init+0xc0>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a70:	4b1f      	ldr	r3, [pc, #124]	; (8007af0 <USBD_LL_Init+0xc0>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a76:	4b1e      	ldr	r3, [pc, #120]	; (8007af0 <USBD_LL_Init+0xc0>)
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f7f9 f969 	bl	8000d50 <HAL_PCD_Init>
 8007a7e:	1e03      	subs	r3, r0, #0
 8007a80:	d001      	beq.n	8007a86 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007a82:	f7f8 fdfb 	bl	800067c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	23b0      	movs	r3, #176	; 0xb0
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	58d0      	ldr	r0, [r2, r3]
 8007a8e:	2318      	movs	r3, #24
 8007a90:	2200      	movs	r2, #0
 8007a92:	2100      	movs	r1, #0
 8007a94:	f7fa ff2a 	bl	80028ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	23b0      	movs	r3, #176	; 0xb0
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	58d0      	ldr	r0, [r2, r3]
 8007aa0:	2358      	movs	r3, #88	; 0x58
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	2180      	movs	r1, #128	; 0x80
 8007aa6:	f7fa ff21 	bl	80028ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	23b0      	movs	r3, #176	; 0xb0
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	58d0      	ldr	r0, [r2, r3]
 8007ab2:	23c0      	movs	r3, #192	; 0xc0
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	2181      	movs	r1, #129	; 0x81
 8007ab8:	f7fa ff18 	bl	80028ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	23b0      	movs	r3, #176	; 0xb0
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	58d0      	ldr	r0, [r2, r3]
 8007ac4:	2388      	movs	r3, #136	; 0x88
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2101      	movs	r1, #1
 8007acc:	f7fa ff0e 	bl	80028ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	23b0      	movs	r3, #176	; 0xb0
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	58d0      	ldr	r0, [r2, r3]
 8007ad8:	2380      	movs	r3, #128	; 0x80
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	2200      	movs	r2, #0
 8007ade:	2182      	movs	r1, #130	; 0x82
 8007ae0:	f7fa ff04 	bl	80028ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	b002      	add	sp, #8
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	20000e64 	.word	0x20000e64
 8007af4:	40005c00 	.word	0x40005c00

08007af8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b00:	210f      	movs	r1, #15
 8007b02:	187b      	adds	r3, r7, r1
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b08:	260e      	movs	r6, #14
 8007b0a:	19bb      	adds	r3, r7, r6
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	23b0      	movs	r3, #176	; 0xb0
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	58d3      	ldr	r3, [r2, r3]
 8007b18:	000d      	movs	r5, r1
 8007b1a:	187c      	adds	r4, r7, r1
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	f7f9 fa17 	bl	8000f50 <HAL_PCD_Start>
 8007b22:	0003      	movs	r3, r0
 8007b24:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b26:	19bc      	adds	r4, r7, r6
 8007b28:	197b      	adds	r3, r7, r5
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	f000 f9bc 	bl	8007eaa <USBD_Get_USB_Status>
 8007b32:	0003      	movs	r3, r0
 8007b34:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007b36:	19bb      	adds	r3, r7, r6
 8007b38:	781b      	ldrb	r3, [r3, #0]
}
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	b005      	add	sp, #20
 8007b40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	000c      	movs	r4, r1
 8007b4c:	0010      	movs	r0, r2
 8007b4e:	0019      	movs	r1, r3
 8007b50:	1cfb      	adds	r3, r7, #3
 8007b52:	1c22      	adds	r2, r4, #0
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	1cbb      	adds	r3, r7, #2
 8007b58:	1c02      	adds	r2, r0, #0
 8007b5a:	701a      	strb	r2, [r3, #0]
 8007b5c:	003b      	movs	r3, r7
 8007b5e:	1c0a      	adds	r2, r1, #0
 8007b60:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b62:	260f      	movs	r6, #15
 8007b64:	19bb      	adds	r3, r7, r6
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b6a:	250e      	movs	r5, #14
 8007b6c:	197b      	adds	r3, r7, r5
 8007b6e:	2200      	movs	r2, #0
 8007b70:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	23b0      	movs	r3, #176	; 0xb0
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	58d0      	ldr	r0, [r2, r3]
 8007b7a:	19bc      	adds	r4, r7, r6
 8007b7c:	1cbb      	adds	r3, r7, #2
 8007b7e:	781d      	ldrb	r5, [r3, #0]
 8007b80:	003b      	movs	r3, r7
 8007b82:	881a      	ldrh	r2, [r3, #0]
 8007b84:	1cfb      	adds	r3, r7, #3
 8007b86:	7819      	ldrb	r1, [r3, #0]
 8007b88:	002b      	movs	r3, r5
 8007b8a:	f7f9 fb76 	bl	800127a <HAL_PCD_EP_Open>
 8007b8e:	0003      	movs	r3, r0
 8007b90:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b92:	250e      	movs	r5, #14
 8007b94:	197c      	adds	r4, r7, r5
 8007b96:	19bb      	adds	r3, r7, r6
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	0018      	movs	r0, r3
 8007b9c:	f000 f985 	bl	8007eaa <USBD_Get_USB_Status>
 8007ba0:	0003      	movs	r3, r0
 8007ba2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007ba4:	197b      	adds	r3, r7, r5
 8007ba6:	781b      	ldrb	r3, [r3, #0]
}
 8007ba8:	0018      	movs	r0, r3
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b005      	add	sp, #20
 8007bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bb0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	000a      	movs	r2, r1
 8007bba:	1cfb      	adds	r3, r7, #3
 8007bbc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bbe:	210f      	movs	r1, #15
 8007bc0:	187b      	adds	r3, r7, r1
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc6:	260e      	movs	r6, #14
 8007bc8:	19bb      	adds	r3, r7, r6
 8007bca:	2200      	movs	r2, #0
 8007bcc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	23b0      	movs	r3, #176	; 0xb0
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	58d2      	ldr	r2, [r2, r3]
 8007bd6:	000d      	movs	r5, r1
 8007bd8:	187c      	adds	r4, r7, r1
 8007bda:	1cfb      	adds	r3, r7, #3
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	0019      	movs	r1, r3
 8007be0:	0010      	movs	r0, r2
 8007be2:	f7f9 fbb9 	bl	8001358 <HAL_PCD_EP_Close>
 8007be6:	0003      	movs	r3, r0
 8007be8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bea:	19bc      	adds	r4, r7, r6
 8007bec:	197b      	adds	r3, r7, r5
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	f000 f95a 	bl	8007eaa <USBD_Get_USB_Status>
 8007bf6:	0003      	movs	r3, r0
 8007bf8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007bfa:	19bb      	adds	r3, r7, r6
 8007bfc:	781b      	ldrb	r3, [r3, #0]
}
 8007bfe:	0018      	movs	r0, r3
 8007c00:	46bd      	mov	sp, r7
 8007c02:	b005      	add	sp, #20
 8007c04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c06 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	000a      	movs	r2, r1
 8007c10:	1cfb      	adds	r3, r7, #3
 8007c12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c14:	210f      	movs	r1, #15
 8007c16:	187b      	adds	r3, r7, r1
 8007c18:	2200      	movs	r2, #0
 8007c1a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c1c:	260e      	movs	r6, #14
 8007c1e:	19bb      	adds	r3, r7, r6
 8007c20:	2200      	movs	r2, #0
 8007c22:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	23b0      	movs	r3, #176	; 0xb0
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	58d2      	ldr	r2, [r2, r3]
 8007c2c:	000d      	movs	r5, r1
 8007c2e:	187c      	adds	r4, r7, r1
 8007c30:	1cfb      	adds	r3, r7, #3
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	0019      	movs	r1, r3
 8007c36:	0010      	movs	r0, r2
 8007c38:	f7f9 fc6b 	bl	8001512 <HAL_PCD_EP_SetStall>
 8007c3c:	0003      	movs	r3, r0
 8007c3e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c40:	19bc      	adds	r4, r7, r6
 8007c42:	197b      	adds	r3, r7, r5
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	0018      	movs	r0, r3
 8007c48:	f000 f92f 	bl	8007eaa <USBD_Get_USB_Status>
 8007c4c:	0003      	movs	r3, r0
 8007c4e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007c50:	19bb      	adds	r3, r7, r6
 8007c52:	781b      	ldrb	r3, [r3, #0]
}
 8007c54:	0018      	movs	r0, r3
 8007c56:	46bd      	mov	sp, r7
 8007c58:	b005      	add	sp, #20
 8007c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c5c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	000a      	movs	r2, r1
 8007c66:	1cfb      	adds	r3, r7, #3
 8007c68:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c6a:	210f      	movs	r1, #15
 8007c6c:	187b      	adds	r3, r7, r1
 8007c6e:	2200      	movs	r2, #0
 8007c70:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c72:	260e      	movs	r6, #14
 8007c74:	19bb      	adds	r3, r7, r6
 8007c76:	2200      	movs	r2, #0
 8007c78:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	23b0      	movs	r3, #176	; 0xb0
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	58d2      	ldr	r2, [r2, r3]
 8007c82:	000d      	movs	r5, r1
 8007c84:	187c      	adds	r4, r7, r1
 8007c86:	1cfb      	adds	r3, r7, #3
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	0019      	movs	r1, r3
 8007c8c:	0010      	movs	r0, r2
 8007c8e:	f7f9 fc9c 	bl	80015ca <HAL_PCD_EP_ClrStall>
 8007c92:	0003      	movs	r3, r0
 8007c94:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c96:	19bc      	adds	r4, r7, r6
 8007c98:	197b      	adds	r3, r7, r5
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	f000 f904 	bl	8007eaa <USBD_Get_USB_Status>
 8007ca2:	0003      	movs	r3, r0
 8007ca4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007ca6:	19bb      	adds	r3, r7, r6
 8007ca8:	781b      	ldrb	r3, [r3, #0]
}
 8007caa:	0018      	movs	r0, r3
 8007cac:	46bd      	mov	sp, r7
 8007cae:	b005      	add	sp, #20
 8007cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cb2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	000a      	movs	r2, r1
 8007cbc:	1cfb      	adds	r3, r7, #3
 8007cbe:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	23b0      	movs	r3, #176	; 0xb0
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	58d3      	ldr	r3, [r2, r3]
 8007cc8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007cca:	1cfb      	adds	r3, r7, #3
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b25b      	sxtb	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	da0d      	bge.n	8007cf0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007cd4:	1cfb      	adds	r3, r7, #3
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	227f      	movs	r2, #127	; 0x7f
 8007cda:	4013      	ands	r3, r2
 8007cdc:	68f9      	ldr	r1, [r7, #12]
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	0013      	movs	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	189b      	adds	r3, r3, r2
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	18cb      	adds	r3, r1, r3
 8007cea:	3302      	adds	r3, #2
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	e00d      	b.n	8007d0c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007cf0:	1cfb      	adds	r3, r7, #3
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	227f      	movs	r2, #127	; 0x7f
 8007cf6:	401a      	ands	r2, r3
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	23b5      	movs	r3, #181	; 0xb5
 8007cfc:	0059      	lsls	r1, r3, #1
 8007cfe:	0013      	movs	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	189b      	adds	r3, r3, r2
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	18c3      	adds	r3, r0, r3
 8007d08:	185b      	adds	r3, r3, r1
 8007d0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	b004      	add	sp, #16
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	000a      	movs	r2, r1
 8007d1e:	1cfb      	adds	r3, r7, #3
 8007d20:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d22:	210f      	movs	r1, #15
 8007d24:	187b      	adds	r3, r7, r1
 8007d26:	2200      	movs	r2, #0
 8007d28:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2a:	260e      	movs	r6, #14
 8007d2c:	19bb      	adds	r3, r7, r6
 8007d2e:	2200      	movs	r2, #0
 8007d30:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	23b0      	movs	r3, #176	; 0xb0
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	58d2      	ldr	r2, [r2, r3]
 8007d3a:	000d      	movs	r5, r1
 8007d3c:	187c      	adds	r4, r7, r1
 8007d3e:	1cfb      	adds	r3, r7, #3
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	0019      	movs	r1, r3
 8007d44:	0010      	movs	r0, r2
 8007d46:	f7f9 fa6d 	bl	8001224 <HAL_PCD_SetAddress>
 8007d4a:	0003      	movs	r3, r0
 8007d4c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d4e:	19bc      	adds	r4, r7, r6
 8007d50:	197b      	adds	r3, r7, r5
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	0018      	movs	r0, r3
 8007d56:	f000 f8a8 	bl	8007eaa <USBD_Get_USB_Status>
 8007d5a:	0003      	movs	r3, r0
 8007d5c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007d5e:	19bb      	adds	r3, r7, r6
 8007d60:	781b      	ldrb	r3, [r3, #0]
}
 8007d62:	0018      	movs	r0, r3
 8007d64:	46bd      	mov	sp, r7
 8007d66:	b005      	add	sp, #20
 8007d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d6c:	b087      	sub	sp, #28
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	0008      	movs	r0, r1
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	0019      	movs	r1, r3
 8007d78:	230b      	movs	r3, #11
 8007d7a:	18fb      	adds	r3, r7, r3
 8007d7c:	1c02      	adds	r2, r0, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
 8007d80:	2408      	movs	r4, #8
 8007d82:	193b      	adds	r3, r7, r4
 8007d84:	1c0a      	adds	r2, r1, #0
 8007d86:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d88:	2117      	movs	r1, #23
 8007d8a:	187b      	adds	r3, r7, r1
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d90:	2516      	movs	r5, #22
 8007d92:	197b      	adds	r3, r7, r5
 8007d94:	2200      	movs	r2, #0
 8007d96:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	23b0      	movs	r3, #176	; 0xb0
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	58d0      	ldr	r0, [r2, r3]
 8007da0:	193b      	adds	r3, r7, r4
 8007da2:	881d      	ldrh	r5, [r3, #0]
 8007da4:	000e      	movs	r6, r1
 8007da6:	187c      	adds	r4, r7, r1
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	230b      	movs	r3, #11
 8007dac:	18fb      	adds	r3, r7, r3
 8007dae:	7819      	ldrb	r1, [r3, #0]
 8007db0:	002b      	movs	r3, r5
 8007db2:	f7f9 fb72 	bl	800149a <HAL_PCD_EP_Transmit>
 8007db6:	0003      	movs	r3, r0
 8007db8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dba:	2516      	movs	r5, #22
 8007dbc:	197c      	adds	r4, r7, r5
 8007dbe:	19bb      	adds	r3, r7, r6
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	0018      	movs	r0, r3
 8007dc4:	f000 f871 	bl	8007eaa <USBD_Get_USB_Status>
 8007dc8:	0003      	movs	r3, r0
 8007dca:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007dcc:	197b      	adds	r3, r7, r5
 8007dce:	781b      	ldrb	r3, [r3, #0]
}
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	b007      	add	sp, #28
 8007dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	0008      	movs	r0, r1
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	0019      	movs	r1, r3
 8007de6:	230b      	movs	r3, #11
 8007de8:	18fb      	adds	r3, r7, r3
 8007dea:	1c02      	adds	r2, r0, #0
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	2408      	movs	r4, #8
 8007df0:	193b      	adds	r3, r7, r4
 8007df2:	1c0a      	adds	r2, r1, #0
 8007df4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df6:	2117      	movs	r1, #23
 8007df8:	187b      	adds	r3, r7, r1
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dfe:	2516      	movs	r5, #22
 8007e00:	197b      	adds	r3, r7, r5
 8007e02:	2200      	movs	r2, #0
 8007e04:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	23b0      	movs	r3, #176	; 0xb0
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	58d0      	ldr	r0, [r2, r3]
 8007e0e:	193b      	adds	r3, r7, r4
 8007e10:	881d      	ldrh	r5, [r3, #0]
 8007e12:	000e      	movs	r6, r1
 8007e14:	187c      	adds	r4, r7, r1
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	230b      	movs	r3, #11
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	7819      	ldrb	r1, [r3, #0]
 8007e1e:	002b      	movs	r3, r5
 8007e20:	f7f9 faeb 	bl	80013fa <HAL_PCD_EP_Receive>
 8007e24:	0003      	movs	r3, r0
 8007e26:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e28:	2516      	movs	r5, #22
 8007e2a:	197c      	adds	r4, r7, r5
 8007e2c:	19bb      	adds	r3, r7, r6
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	0018      	movs	r0, r3
 8007e32:	f000 f83a 	bl	8007eaa <USBD_Get_USB_Status>
 8007e36:	0003      	movs	r3, r0
 8007e38:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007e3a:	197b      	adds	r3, r7, r5
 8007e3c:	781b      	ldrb	r3, [r3, #0]
}
 8007e3e:	0018      	movs	r0, r3
 8007e40:	46bd      	mov	sp, r7
 8007e42:	b007      	add	sp, #28
 8007e44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	000a      	movs	r2, r1
 8007e50:	1cfb      	adds	r3, r7, #3
 8007e52:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	23b0      	movs	r3, #176	; 0xb0
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	58d2      	ldr	r2, [r2, r3]
 8007e5c:	1cfb      	adds	r3, r7, #3
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	0019      	movs	r1, r3
 8007e62:	0010      	movs	r0, r2
 8007e64:	f7f9 fb00 	bl	8001468 <HAL_PCD_EP_GetRxCount>
 8007e68:	0003      	movs	r3, r0
}
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	b002      	add	sp, #8
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e7c:	4b02      	ldr	r3, [pc, #8]	; (8007e88 <USBD_static_malloc+0x14>)
}
 8007e7e:	0018      	movs	r0, r3
 8007e80:	46bd      	mov	sp, r7
 8007e82:	b002      	add	sp, #8
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	20001158 	.word	0x20001158

08007e8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]

}
 8007e94:	46c0      	nop			; (mov r8, r8)
 8007e96:	46bd      	mov	sp, r7
 8007e98:	b002      	add	sp, #8
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007ea0:	f7f8 fb0e 	bl	80004c0 <SystemClock_Config>
}
 8007ea4:	46c0      	nop			; (mov r8, r8)
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	0002      	movs	r2, r0
 8007eb2:	1dfb      	adds	r3, r7, #7
 8007eb4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb6:	230f      	movs	r3, #15
 8007eb8:	18fb      	adds	r3, r7, r3
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007ebe:	1dfb      	adds	r3, r7, #7
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d017      	beq.n	8007ef6 <USBD_Get_USB_Status+0x4c>
 8007ec6:	dc1b      	bgt.n	8007f00 <USBD_Get_USB_Status+0x56>
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d00f      	beq.n	8007eec <USBD_Get_USB_Status+0x42>
 8007ecc:	dc18      	bgt.n	8007f00 <USBD_Get_USB_Status+0x56>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <USBD_Get_USB_Status+0x2e>
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d005      	beq.n	8007ee2 <USBD_Get_USB_Status+0x38>
 8007ed6:	e013      	b.n	8007f00 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ed8:	230f      	movs	r3, #15
 8007eda:	18fb      	adds	r3, r7, r3
 8007edc:	2200      	movs	r2, #0
 8007ede:	701a      	strb	r2, [r3, #0]
    break;
 8007ee0:	e013      	b.n	8007f0a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ee2:	230f      	movs	r3, #15
 8007ee4:	18fb      	adds	r3, r7, r3
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	701a      	strb	r2, [r3, #0]
    break;
 8007eea:	e00e      	b.n	8007f0a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007eec:	230f      	movs	r3, #15
 8007eee:	18fb      	adds	r3, r7, r3
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	701a      	strb	r2, [r3, #0]
    break;
 8007ef4:	e009      	b.n	8007f0a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ef6:	230f      	movs	r3, #15
 8007ef8:	18fb      	adds	r3, r7, r3
 8007efa:	2202      	movs	r2, #2
 8007efc:	701a      	strb	r2, [r3, #0]
    break;
 8007efe:	e004      	b.n	8007f0a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007f00:	230f      	movs	r3, #15
 8007f02:	18fb      	adds	r3, r7, r3
 8007f04:	2202      	movs	r2, #2
 8007f06:	701a      	strb	r2, [r3, #0]
    break;
 8007f08:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8007f0a:	230f      	movs	r3, #15
 8007f0c:	18fb      	adds	r3, r7, r3
 8007f0e:	781b      	ldrb	r3, [r3, #0]
}
 8007f10:	0018      	movs	r0, r3
 8007f12:	46bd      	mov	sp, r7
 8007f14:	b004      	add	sp, #16
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <__libc_init_array>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	2600      	movs	r6, #0
 8007f1c:	4d0c      	ldr	r5, [pc, #48]	; (8007f50 <__libc_init_array+0x38>)
 8007f1e:	4c0d      	ldr	r4, [pc, #52]	; (8007f54 <__libc_init_array+0x3c>)
 8007f20:	1b64      	subs	r4, r4, r5
 8007f22:	10a4      	asrs	r4, r4, #2
 8007f24:	42a6      	cmp	r6, r4
 8007f26:	d109      	bne.n	8007f3c <__libc_init_array+0x24>
 8007f28:	2600      	movs	r6, #0
 8007f2a:	f000 f821 	bl	8007f70 <_init>
 8007f2e:	4d0a      	ldr	r5, [pc, #40]	; (8007f58 <__libc_init_array+0x40>)
 8007f30:	4c0a      	ldr	r4, [pc, #40]	; (8007f5c <__libc_init_array+0x44>)
 8007f32:	1b64      	subs	r4, r4, r5
 8007f34:	10a4      	asrs	r4, r4, #2
 8007f36:	42a6      	cmp	r6, r4
 8007f38:	d105      	bne.n	8007f46 <__libc_init_array+0x2e>
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	00b3      	lsls	r3, r6, #2
 8007f3e:	58eb      	ldr	r3, [r5, r3]
 8007f40:	4798      	blx	r3
 8007f42:	3601      	adds	r6, #1
 8007f44:	e7ee      	b.n	8007f24 <__libc_init_array+0xc>
 8007f46:	00b3      	lsls	r3, r6, #2
 8007f48:	58eb      	ldr	r3, [r5, r3]
 8007f4a:	4798      	blx	r3
 8007f4c:	3601      	adds	r6, #1
 8007f4e:	e7f2      	b.n	8007f36 <__libc_init_array+0x1e>
 8007f50:	080080e4 	.word	0x080080e4
 8007f54:	080080e4 	.word	0x080080e4
 8007f58:	080080e4 	.word	0x080080e4
 8007f5c:	080080e8 	.word	0x080080e8

08007f60 <memset>:
 8007f60:	0003      	movs	r3, r0
 8007f62:	1882      	adds	r2, r0, r2
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d100      	bne.n	8007f6a <memset+0xa>
 8007f68:	4770      	bx	lr
 8007f6a:	7019      	strb	r1, [r3, #0]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	e7f9      	b.n	8007f64 <memset+0x4>

08007f70 <_init>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	46c0      	nop			; (mov r8, r8)
 8007f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f76:	bc08      	pop	{r3}
 8007f78:	469e      	mov	lr, r3
 8007f7a:	4770      	bx	lr

08007f7c <_fini>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f82:	bc08      	pop	{r3}
 8007f84:	469e      	mov	lr, r3
 8007f86:	4770      	bx	lr
